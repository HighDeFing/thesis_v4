na limitación de este modelo es que mientras la petición viaja hacia el servidor, y éste la procesa, la interacción se detiene; es decir, el usuario se encuentra en espera de los resultados que arrojará su petición, lo cual, entre otros aspectos, produce la brecha que se mencionó anteriormente entre las aplicaciones de escritorio y las aplicaciones Web. Sin embargo, esta brecha se ha ido cerrando cada vez más gracias a un nuevo esquema de desarrollo, denominado Aplicaciones Web Enriquecidas. 1.1. Aplicaciones de Internet Enriquecidas La siguiente sección fue extraída del trabajo especial de grado Reingeniería de una aplicación para el seguimiento de hojas de tiempo utilizando el enfoque AJAX y la tecnología JPA, la cual aborda detalladamente el tema de las aplicaciones RIA. RIA (Rich Internet Application, o Aplicación de Internet Enriquecida) es un tipo de aplicación Web que provee una mayor riqueza interactiva que las aplicaciones Web tradicionales, incorporando características muy similares a las que poseen las aplicaciones de escritorio, las cuales proveen una interacción dinámica y rica en elementos de interfaz. El término Rich Internet Application fue introducido en marzo de 2002 por Macromedia sin embargo, este mismo concepto ya había sido manejado bajo otros nombres [1]: • Remote Scripting, por Microsoft, en 1998 • X Internet, por Forrester Research, en octubre de 2000 • Rich Web Clients • Rich Web Application Como se mencionó anteriormente, el modelo tradicional de aplicaciones Web tiene una serie de limitaciones, como la poca capacidad multimedia que posee y la recarga continua de páginas. Todo esto se debe a que el cliente en las aplicaciones Web tradicionales sólo se limita a desplegar el contenido HTML. En cambio, las RIAs incorporan un motor como una nueva capa del lado del cliente, que sirve como intermediaria entre la interacción del cliente con el servidor, y tiene la responsabilidad de realizar los cambios sobre la interfaz de usuario. Algunos de los beneficios que provee el uso de este entorno son los siguientes: Tecnologías Utilizadas por las RIAs Hasta el momento se han mencionado los beneficios y limitaciones que presenta el entorno RIA, así como los aspectos que deben tomarse en cuenta al momento de escoger una tecnología o un enfoque para desarrollar RIAs. A continuación se mencionarán y describirán algunas de estas tecnologías. Laszlo (www.openlaszlo.org/) Laszlo es una plataforma de código abierto para el desarrollo de RIAs basada en Flash y XML. Esta tecnología utiliza como motor del lado del cliente el FlashPlayer 6.x o una versión superior (éste es incorporado al navegador en forma de plugin); como lenguaje de scripting utiliza LZX el cual es un lenguaje orientado a objetos basado en etiquetas que utiliza la sintaxis de JavaScript y XML para generar archivos Flash de forma dinámica. El intercambio de datos entre el motor del cliente y el servidor es a través de XML. Los datos transmitidos son parseados en el servidor mediante funciones XPath que es uno de los lenguajes existentes para acceder a los elementos de un archivo XML; La diferencia entre HTML y XUL es que XUL tiene un conjunto extenso de componentes gráficos como menús, barras de herramientas, cajas de texto, entre otros; estos componentes gráficos son creados sin la necesidad de desarrollar código JavaScript. El motor del lado del cliente puede ser desarrollado utilizando JavaScript para realizar los cambios en la Interfaz de Usuario haciendo uso del DOM. El intercambio de datos entre el motor del cliente y el servidor se realiza mediante XML. Marco Teórico 17 XForms (www.w3.org/TR/xforms/) Es un nuevo lenguaje de marcado para formularios Web, diseñado para ser el sustituto de los formularios tradicionales HTML. Este lenguaje permite a los desarrolladores de formularios Web distinguir entre el propósito del formulario y su presentación, lo que ofrece una serie de ventajas en términos de: • Reutilización: Los módulos XForms pueden reutilizarse independientemente de los datos que recogen. • Independencia de Dispositivo: Gracias a que los controles de la interfaz de usuario son abstractos y sólo se indican sus características genéricas, es posible el despliegue de estos formularios en diferentes dispositivos. XForms provee todas las funcionalidades de los formularios HTML y además permite: • Comprobar automáticamente los datos mientras el usuario los introduce. • Indicar que ciertos campos son obligatorios y que el formulario no podrá ser enviado sin esta información. • Enviar formularios de datos como XML, ya que XForms esta basado en XML. Tecnologías En la sección se identificaron las tecnologías que componen el enfoque AJAX, sin embargo el uso de cada una por su lado no construye una aplicación AJAX, cada tecnología cumple un papel importante y debe funcionar en conjunto con las otras tecnologías. • Las Hojas de Estilo en Cascada (CSS) proveen un repositorio de atributos visuales predefinidos que pueden ser asignados a ciertos elementos de la página en cualquier momento. • El Modelo de Objetos del Documento (DOM) provee una estructura de árbol que representa al documento, donde las distintas etiquetas HTML y los cuerpos de las mismas son los nodos del árbol, que a su vez pueden tener nodos hijos según como se encuentre estructurado el documento. El DOM expone la estructura del documento al motor JavaScript, el cual puede modificar sus elementos dinámicamente según se requiera. Esto se hace utilizando la variable global document la cual representa la raíz del árbol. • JavaScript es el lenguaje utilizado para integrar todas las tecnologías, definiendo la lógica de la presentación (del lado del cliente) y el flujo de trabajo de la aplicación. JavaScript permite: o Manipular los elementos del DOM para modificar la interfaz. o Obtener la respuesta del servidor y usarla para transformar la vista. o Usar las hojas de estilos en cascada para aplicar, dinámicamente, diferente estilos a los elementos de la página. Marco Teórico 23 Hasta ahora se han descrito las tecnologías que conforman el enfoque AJAX; existe un elemento que es el que hace posible la comunicación con el servidor de manera asíncrona, el XMLHttpRequest. JavaScript permite: o Manipular los elementos del DOM para modificar la interfaz. o Obtener la respuesta del servidor y usarla para transformar la vista. o Usar las hojas de estilos en cascada para aplicar, dinámicamente, diferente estilos a los elementos de la página. Marco Teórico 23 Hasta ahora se han descrito las tecnologías que conforman el enfoque AJAX; existe un elemento que es el que hace posible la comunicación con el servidor de manera asíncrona, el XMLHttpRequest. 1.3. ORM ORM (Object-Relational Mapping, o Mapeo Objeto-Relacional) es una técnica de programación que permite integrar lenguajes de programación orientados a objetos con sistemas de bases de datos relacionales; es decir, permite enlazar, o mapear, los objetos del lenguaje de programación con las tablas de una base de datos, procurando resolver el problema de la diferencia de impedancia (Amber, 2006). Las herramientas ORM permiten disminuir el trabajo necesario para mapear objetos con las tablas de la base de datos ya que eliminan la necesidad de pasar los datos entre objetos y tablas a través de sentencias SQL embebidas en el código y, en el caso del lenguaje de programación Java, el uso de la API de acceso a base de datos JDBC, haciendo transparente este proceso sin necesidad de codificación extra. Con una herramienta ORM es necesario definir sólo una vez la forma en que las clases se mapean con las tablas de la base de datos y luego, durante el desarrollo y evolución de la aplicación, este enlace es transparente para el programador. En los puntos 1.3.1 y 1.3.2 veremos las diferencias entre el mundo de Base de Datos Relacionales y el mundo Orientado a Objetos. 1.3.1. Mundo de Base de Datos Relacionales • Componentes: o Tablas o Vista o Columnas o Tipo de Datos (NUMBER, VARCHAR, DATE) o Filas/Registros o Índices o Secuencias o Claves Primarias, Alternas,