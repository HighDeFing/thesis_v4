 En este caso, el comportamiento del sistema debe ser estimado con una simulación. Algunas definiciones de simulación que se pueden encontrar en la literatura son: “Es una técnica numérica para llevar a cabo experimentos en una compu- tadora digital, la cual involucra ciertos tipos de modelos matemáticos y lógicos que describen el comportamiento de un sistema (o subsistema) económico, de negocios, mecánico o f́ısico a través del tiempo” [1] “Es la imitación de la operación de un sistema real a través del tiempo” [2] Caṕıtulo 2: Simulación 9 “Es el proceso de diseñar un modelo de un sistema real y llevar a cabo expe- rimentos con este modelo, con el propósito de entender el comportamiento del sistema y/o evaluar varias estrategias para su operación” [3] “Una representación exacta de la situación a modelar es raras veces posible, limitando esta a aproximaciones con cierto grado de fidelidad, la cual es aceptable para propósitos de estudio del sistema.” El análisis puede producir información en forma de tablas, gráficos, mapas, animaciones, entre otros. Documentar los resultados: Los resultados de los estudios realizados con la simu- lación deben ser documentados para su subsecuente divulgación. 13 Caṕıtulo 3 Agentes inteligentes 3.1. Definición de agente “Un agente es todo aquello que puede considerarse que percibe su ambiente mediante sensores y que responde o actúa en tal ambiente por medio de efectores.” [15] “Un agente es un sistema computacional situado en determinado ambiente, el cual es capaz de realizar acciones autónomas en este ambiente con el fin de alcanzar los objetivos para los cuales fue diseñado.” [16] “Los agentes autónomos son sistemas computacionales que habitan algún ambiente dinámico, tienen percepción y actúan de forma autónoma en este ambiente, satisfaciendo de esta forma un conjunto de metas o tareas para las cuales fue diseñado.” [17] Existen varias definiciones de agentes en la literatura, pero todas concuerdan al menos en algunas de las siguientes caracteŕısticas: de otra forma se considera que estático. Los ambientes estáticos son mucho más simples que los dinámicos, pues- to que el agente no necesita percibir su ambiente mientras decide sus acciones, ni tampoco necesita tomar en consideración el paso del tiempo. Discreto: Si existen un número de distintas y claramente definidas percepciones y acciones, entonces se dice que el ambiente es discreto. 3.4. Sistemas multiagentes “En general, los sistemas multiagentes son sistemas computacionales en los cuales varios agentes semi-autónomos interactúan o trabajan juntos para realizar algún conjunto de tareas o satisfacer algún conjunto de me- tas. Estos sistemas pueden involucrar agentes computacionales que sean homogéneos o heterogéneos y cuyas metas pueden ser comunes o no comu- nes.” [19] “Un sistema (multiagente) contiene un número de agentes que interactúan unos con otros comunicándose. Los agentes son capaces de actuar en un ambiente; diferentes agentes tienen diferentes “esferas de influencia”, en el Caṕıtulo 3: Agentes inteligentes 18 sentido que ellos tendrán control – o al menos serán capaces de influenciar – sobre diferentes partes del ambiente.” [16] Se pueden encontrar muchos ejemplos de sistemas multiagentes en la naturaleza. Un ejemplo sencillo es una colonia de hormigas, donde el comportamiento de cada individuo es bastante simple y son las interacciones grupales API El API utilizado proviene del framework de desarrollo de MATSim, el cual es descrito en el caṕıtulo 5 y los apéndices D, E y F. De igual forma, se usa API provisto por el conjunto de clases contenidas en el paquete org.geotools las cuales facilitan la manipulación de archivos SHP y los datos contenidos en éstos. 6.3. Gestión de proyecto: Maven Maven es una herramienta de software para la administración y construcción de proyectos. Aún cuando es usado primordialmente para proyectos en Java, puede ser usado también para construir y administrar proyectos escritos en C#, Ruby y Scala, entre otros. Maven sirve para un propósito similar a la herramienta Apache Ant, pero está basado en conceptos diferentes y trabaja de forma distinta. Inicialmente, Maven formó parte del proyecto Jakarta, pero ahora ya es un proyecto de nivel superior de la Apache Software Foundation. Maven usa una construcción denominada Project Object Model (POM) para des- cribir el proyecto de software a construir, sus dependencias y otros módulos y compo- nentes externos, y su orden de construcción. Maven posee objetivos predefinidos para realizar tareas determinadas, tales como compilación, depuración o distribución. Maven dinámicamente descarga las bibliotecas y los plug-ins de Java necesarios para un proyecto de uno o varios repositorios. Control de versiones El desarrollo en equipo requiere de algún método que permita integrar los desarro- llos individuales de forma automática y organizada. Para tal fin, se ha usado Mercurial como software para el soporte del control de versiones. En la página web de Mercurial es posible encontrar la siguiente descipción [79]: Mercurial es una herramienta de control de versiones gratuita y distribuida. Ésta permite manipular proyectos de cualquier tamaño a la vez que se usa una interfaz intuitiva. Es fácil de usar y dif́ıcil de dañar, haciéndola ideal para cualquiera que trabaje con archivos versionados. El repositorio de desarrollo está almacenado en bitbucket, el cual es un servicio de hosting web desarrollado en Python que usa el sistema de control de versiones de Mercurial. 58 Caṕıtulo 7 Visualizador de redes de tráfico: diseño, implementación y pruebas 7.1. Diseño del visualizador de la red Un elemento que no se encuentra implementado en el framework de MATSim es un programa que permita la edición de una red en formato nativo de MATSim. Aún cuando existe un visualizador,