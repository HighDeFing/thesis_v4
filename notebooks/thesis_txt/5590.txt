tesis.dvi Universidad Central de VenezuelaFacultad de CienciasEscuela de ComputaciónAplicaciones con Tecnología Internet Trabajo Especial de GradoSistema de Recolección de Estadísticas yGeneración de Reportes Web como unaextensión del navegador Mozilla Firefox Trabajo Especial de Gradopresentado ante la ilustreUniversidad Central de Venezuelapor los BachilleresJosé J. Sanchez P., C.I: 16.179.270yAngel D. Gil R., C.I: 17.977.347para optar por el título deLicenciado en Computación TutorProf. Sergio Rivas Caracas, Mayo del 2011 Acta Quienes suscriben miembros del Jurado, designados por el Consejo de Escuela deComputación, para examinar el Trabajo Especial de Grado presentado por los Bachi-lleres José Javier Sanchez Ponte, C.I. 16.179.270 y Angel David Gil Ramirez,C.I. 17.977.347, con el título Sistema de Recolección de Estadisticas y Genera-ción de Reportes Web como una extensión del navegador Mozilla Firefox, alos �nes de optar al título de Licenciado en Computación, dejan constancia lo siguiente:Leído como fue, dicho trabajo por cada uno de los miembros del Jurado, se �jóel 17 de Mayo de 2011, para que sus autores lo defendieran en forma pública, se hizoen la Escuela de Computación de la Facultad de Ciencias de la Universidad Centralde Venezuela, mediante una presentación oral de su contenido. Finalizada la defensapública del Trabajo Especial de Grado, el Jurado decidió aprobarlo con una nota depuntos, en fe de lo cual se levanta la presente Acta, en Caracas a los diecisiete días delmes de mayo del año dos mil once, dejándose también constancia de que actuó comoCoordinador del Jurado el profesor Sergio Rivas. Prof. Sergio RivasTutor Prof. Andrés Sanoja Prof. Jossie ZambranoJurado Jurado 1 Agradecimientos y Dedicatoria A la Universidad Central de Venezuela, alma mater y fuente de conocimientos"La Casa que vence las sombras", por darme la oportunidad de estudiar en tanprestigiosa institución.A mi tutor académico, el profesor Sergio Rivas por con�ar en nosotros, por sugran ayuda, colaboración, orientación y �exibilidad a lo largo del desarrollo deeste proyecto.A todos mis amigos con lo que compartí alegrías y penas; y me ayudaron a creceracadémica, mental y espiritualmente a lo largo de la carrera.Quisiera agradecer a toda mi familia por el apoyo brindado durante el desarrollode mis estudios universitarios, a mis compañeros y profesores por la ayuda recibi-da y �nalmente a la Universidad Central de Venezuela, como institución, que consus grandes virtudes y defectos me brindó la oportunidad de culminar exitosa-mente mis estudios y poder obtener el título de Licenciado en Computación.José J. Sanchez PA mi padre Angel Gil, por haberme orientado y ayudado durante mi formaciónprofesional.A mi madre Elisaira Ramirez, quien ha sido un pilar de fortaleza y estimulo paraseguir hacia adelante.A la Universidad Central de Venezuela, por haberme permitido estudiar en susprestigiosas aulas.A mi tutor académico, el profesor Sergio Rivas por con�ar en nosotros, por sugran ayuda, colaboración, orientación y �exibilidad a lo largo del desarrollo deeste proyecto. Angel D. Gil R.2 Dedicatorias La realización de este proyecto está dedicado especialmente:A mis padres, por su ayuda incondicional en los buenos y malos momentos, yapoyo en todo momento, quienes con sus sabios consejos y todos sus sacri�cioshicieron posible este proyecto.A mi abuelo Manuel Salvador Ponte Betancourt, y a mi abuela Maria Luisa PonteGarcía, que ya partieron de esta tierra, y que desde el cielo me bendicen con suamor, sabiduria y protección.A dios quien me dió la fuerza, paciencia, constancia y espíritu de lucha parasuperar las adversidades a lo largo de la carrera. José J. Sanchez PA mi padre Angel Gil y a mi madre Elisaira de Gil por siempre estar a mi lado ydandome las fuerzas para continuar con este objetivo y lograr alcanzarlo.A mi tía Margarita Bastardo por su ayuda durante toda la carrera e inclusive enel desarrollo de este trabajo.A los compañeros de trabajo en especial Esteban Soto, y Jean Carlos por icenti-varme y apoyarme en los momentos di�ciles del desarrollo de este trabajo.Angel D. Gil R. 3 Resumen Hoy en día, muchos sitios Web carecen de mecanismos que les permitan obtener in-formación acerca del comportamiento de los usuarios que navegan por la red. La mayoríade los servicios de estadísticas ofrecidos, realizan un análisis del comportamiento de losusuarios que acceden a un sitio Web, de manera global, ya que tienen la necesidad deabarcar la mayor cantidad de sitios Web posibles a quienes puedan ofrecer sus servicios.Sin embargo, dichos sistemas no proporcionan información de un usuario en especí�co,ni el comportamiento que estos presentan en aspectos relacionados a la navegabilidad,funciones utilizadas, tiempo de respuesta del usuario para completar una tarea especí-�ca en un sitio Web, tipos de interacción, etc.Dada esta situación, en el presente trabajo se desarrolla un sistema de estadísti-cas basado en la arquitectura Cliente-Servidor encargado de recolectar estadísticas ymostrar la información acerca del comportamiento del usuario mientras navega por laWeb, brindando reportes que pueden ser analizados por un ente interesado y lograrmejoras relacionadas a la usabilidad del sitio Web.Palabras Clave: XUL, XPCOM, JavaScript, XPConnect, JSF,extensión, estadísticas.ContactosJosé Javier Sanchez Ponte nirvana01@gmail.comAngel David Gil Ramirez angelgil87@gmail.comSergio Jose Rivas Atanacio ( Tutor) sergiorivas@gmail.com 4 Índice general Índice general 1Índice de �guras 4Índice de cuadros 71 Introducción y Problema 81.1. Situación actual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81.1.1. Analizadores de logs de servidores web . . . . . . . . . . . . . . 91.1.2. Servicios de estadísticas . . . . . . . . . . . . . . . . . . . . . . 91.2. Propuesta tecnológica . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111.2.1. Explicación de la arquitectura propuesta . . . . . . . . . . . . . 111.2.2. Sistema Cliente . . . . . . . . . . . . . . . . . . . . . . . . . . . 121.2.3. Sistema Servidor . . . . . . . . . . . . . . . . . . . . . . . . . . 121.2.4. Funcionamiento . . . . . . . . . . . . . . . . . . . . . . . . . . . 131.3. Objetivo general . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131.4. Objetivos especí�cos . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141.5. Proceso de desarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14I Marco Teórico 162 Firefox 172.1. De�nición . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172.2. Arquitectura multiplataforma de Mozilla Firefox . . . . . . . . . . . . . 172.3. Extensión de Firefox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202.3.1. Ventajas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202.3.2. Desventajas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213 JavaScript 223.1. De�nición . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223.2. Especi�caciones o�ciales . . . . . . . . . . . . . . . . . . . . . . . . . . 223.3. Motores de JavaScript disponibles . . . . . . . . . . . . . . . . . . . . . 233.4. Versiones de navegadores y de JavaScript . . . . . . . . . . . . . . . . . 231 ÍNDICE GENERAL 24 XUL 254.1. Ventajas de usar XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 274.2. Características fundamentales . . . . . . . . . . . . . . . . . . . . . . . 284.3. Desarrollo en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294.3.1. Estructura del archivo . . . . . . . . . . . . . . . . . . . . . . . 294.3.2. Manejadores de eventos . . . . . . . . . . . . . . . . . . . . . . 365 Servicios Web 395.1. REST . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406 Estadísticas en la Web 446.1. Medidores estadísticos . . . . . . . . . . . . . . . . . . . . . . . . . . . 566.2. Análisis de datos estadísticos en la Web . . . . . . . . . . . . . . . . . . 576.2.1. Análisis de visitas de un sitio web . . . . . . . . . . . . . . . . . 576.2.2. Análisis de accesos o visitas a un sitio web . . . . . . . . . . . . 576.2.3. Clientes detrás de proxys y routers NAT . . . . . . . . . . . . . 586.2.4. Visitas desde .COM .NET .EDU y .ORG . . . . . . . . . . . . . 596.2.5. Análisis de logs . . . . . . . . . . . . . . . . . . . . . . . . . . . 60II Marco Aplicativo 617 Marco Aplicativo 627.1. Adaptación del proceso de desarrollo XP . . . . . . . . . . . . . . . . . 627.2. Actores y responsabilidades . . . . . . . . . . . . . . . . . . . . . . . . 627.3. Metáfora del sistema . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637.3.1. Aplicación Cliente . . . . . . . . . . . . . . . . . . . . . . . . . 637.3.2. Aplicación Servidor . . . . . . . . . . . . . . . . . . . . . . . . . 647.4. Adaptación de las actividades XP . . . . . . . . . . . . . . . . . . . . . 667.4.1. Estrategia de desarrollo . . . . . . . . . . . . . . . . . . . . . . 677.4.2. Iteración 0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677.4.3. Iteración 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 687.4.4. Iteración 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697.4.5. Iteración 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 727.4.6. Iteración 4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747.4.7. Iteración 5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 757.4.8. Iteración 6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 767.4.9. Iteración 7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777.4.10. Iteración 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797.4.11. Iteración 9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827.4.12. Iteración 10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 837.4.13. Iteración 11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 857.4.14. Iteración 12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 ÍNDICE GENERAL 37.4.15. Iteración 13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 897.4.16. Iteración 14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 907.4.17. Iteración 15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927.4.18. Iteración 16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948 Caso de Estudio 978.1. Resultados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008.2. Estadísticas Globales . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1018.3. Resolución de Pantalla . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048.4. Textos buscados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058.5. Uso de Enlaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068.6. Usos Comandos del Navegador . . . . . . . . . . . . . . . . . . . . . . . 1079 Conclusiones 10910 Recomendaciones 112Bibliografía 113 Índice de �guras 1.1. Arquitectura propuesta para el TEG . . . . . . . . . . . . . . . . . . . . . 112.1. Arquitectura de Firefox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194.1. árbol de información jerárquica en XUL . . . . . . . . . . . . . . . . . . . 264.2. Pestañas de diálogos en XUL . . . . . . . . . . . . . . . . . . . . . . . . . 264.3. Cuadros de texto en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 274.4. Barras de progreso en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 274.5. Estructura del archivo xul.css . . . . . . . . . . . . . . . . . . . . . . . . . 304.6. Código fuente para imprimir Hola Mundo 3 veces . . . . . . . . . . . . . . 314.7. Hola mundo en el navegador . . . . . . . . . . . . . . . . . . . . . . . . . . 324.8. Usos de etiquetas box . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334.9. Barra de menú en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334.10. Menú 1 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.11. Menú 2 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.12. Menú 3 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.13. Pestañas desplegadas en el navegador utilizando XUL . . . . . . . . . . . . 354.14. Barra de desplazamiento en XUL . . . . . . . . . . . . . . . . . . . . . . . 354.15. Medidor de progreso en XUL . . . . . . . . . . . . . . . . . . . . . . . . . 354.16. Manejo de eventos en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 364.17. Código fuente para manejo de eventos básicos en XUL . . . . . . . . . . . 374.18. Botones XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384.19. Visualización de la etiqueta con el nombre del botón presionado . . . . . . 384.20. Texto �Doble clic� mostrado al hacer doble clic . . . . . . . . . . . . . . . . 385.1. Ejemplo de un servicio web con estado . . . . . . . . . . . . . . . . . . . . 425.2. Ejemplo de un servicio web sin estado . . . . . . . . . . . . . . . . . . . . 425.3. Ejemplo de una respuesta XML de un servicio web REST . . . . . . . . . 436.1. Implementación rápida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 456.2. Comparativa de campañas y palabras claves . . . . . . . . . . . . . . . . . 456.3. Paneles personalizados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466.4. Integración con AdWords . . . . . . . . . . . . . . . . . . . . . . . . . . . 466.5. Búsqueda interna en sitios . . . . . . . . . . . . . . . . . . . . . . . . . . . 464 ÍNDICE DE FIGURAS 56.6. Comparativas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476.7. Barra deslizante de tendencia y fecha . . . . . . . . . . . . . . . . . . . . . 476.8. Seguimiento de comercio electrónico . . . . . . . . . . . . . . . . . . . . . . 476.9. Visualización de redireccionamiento . . . . . . . . . . . . . . . . . . . . . . 486.10. Superposición del sitio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486.11. Informes por correo electrónico . . . . . . . . . . . . . . . . . . . . . . . . 486.12. Orientación geográ�ca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496.13. EstadisticasGratis - Tipos de Reportes . . . . . . . . . . . . . . . . . . . . 496.14. EstadisticasGratis - Páginas vistas por hora . . . . . . . . . . . . . . . . . 506.15. EstadisticasGratis - Visitas por hora . . . . . . . . . . . . . . . . . . . . . 506.16. EstadisticasGratis - Páginas vistas por día . . . . . . . . . . . . . . . . . . 516.17. EstadisticasGratis - Páginas visitadas por día . . . . . . . . . . . . . . . . 516.18. EstadisticasGratis - Páginas visitadas por mes . . . . . . . . . . . . . . . . 526.19. EstadisticasGratis - Páginas vistas por mes . . . . . . . . . . . . . . . . . . 526.20. EstadisticasGratis - Calidad del Color . . . . . . . . . . . . . . . . . . . . 536.21. 3dStats - Reporte general . . . . . . . . . . . . . . . . . . . . . . . . . . . 546.22. 3dStats - Búsqueda personalizada . . . . . . . . . . . . . . . . . . . . . . . 546.23. 3dStats - Reporte por visitas, número de páginas y visitantes . . . . . . . . 546.24. 3dStats - Reporte por Mejor día . . . . . . . . . . . . . . . . . . . . . . . . 556.25. 3dStats - Evolución de visitas en el tiempo . . . . . . . . . . . . . . . . . . 556.26. 3dStats - últimas 40 visitas . . . . . . . . . . . . . . . . . . . . . . . . . . 556.27. 3dStats - Reporte del día . . . . . . . . . . . . . . . . . . . . . . . . . . . . 567.1. Interacción - Módulos de la Aplicación . . . . . . . . . . . . . . . . . . . . 667.2. Diagrama de Clases de la aplicación Servidor - versión inicial . . . . . . . . 687.3. Método encargado de cargar la lista de proyectos en el sistema . . . . . . . 697.4. Funcionalidad Pantalla Completa01 . . . . . . . . . . . . . . . . . . . . . . 707.5. Funcionalidades - Versión del Navegador , Dirección IP . . . . . . . . . . . 717.6. Funcionalidad - Tiempo de Carga de una página . . . . . . . . . . . . . . . 737.7. Funcionalidad - Dirección IP del Usuario . . . . . . . . . . . . . . . . . . . 747.8. Componente tipo groupbox . . . . . . . . . . . . . . . . . . . . . . . . . . 757.9. Funcionalidad - Atras - Adelante - Parar - Siguiente . . . . . . . . . . . . . 767.10. Funcionalidad - Atras - Adelante - Parar - Siguiente02 . . . . . . . . . . . 777.11. Método encargado de obtener los proyectos creados en la aplicación servidor 787.12. Clase encargada de obtener los proyectos creados en el servidor . . . . . . 787.13. Método encargado de realizar la petición de los proyectos existentes en laaplicación servidor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797.14. Implementación funcionalidad - Tiempo de Carga por recurso . . . . . . . 807.15. Continuación funcionalidad Tiempo de Carga por recurso . . . . . . . . . . 817.16. Implementación funcionalidad - Búsqueda . . . . . . . . . . . . . . . . . . 827.17. Continuación - Implementación funcionalidad - Búsqueda01 . . . . . . . . 837.18. Implementación funcionalidad - Uso Funcionalidad . . . . . . . . . . . . . 847.19. Implementación funcionalidad - Tiempo de llenado de un formulario 01 . . 86 ÍNDICE DE FIGURAS 67.20. Continuación funcionalidad - Tiempo de Llenado de un formulario 02 . . . 867.21. Clases de los reportes para el núcleo . . . . . . . . . . . . . . . . . . . . . 887.22. Clases para la presentación de los reportes en la GUI Web . . . . . . . . . 907.23. Implementación funcionalidad - XML que será enviado a la aplicación servidor 927.24. Contenido archivo - chrome.manifest . . . . . . . . . . . . . . . . . . . . . 937.25. Contenido archivo - install.rdf . . . . . . . . . . . . . . . . . . . . . . . . . 947.26. Clases para la visualización de los grá�cos de los reportes en la GUI Web . 958.1. Ingreso de información - Creación de Proyecto de Estadísticas . . . . . . . 988.2. De�nición de Preferencias y estadísticas . . . . . . . . . . . . . . . . . . . 988.3. Opciones de con�guración . . . . . . . . . . . . . . . . . . . . . . . . . . . 998.4. Opciones de Con�guración - Detalles del Proyecto . . . . . . . . . . . . . . 998.5. Panel Con�guración - Opciones . . . . . . . . . . . . . . . . . . . . . . . . 1008.6. Reporte - Estadísticas Globales . . . . . . . . . . . . . . . . . . . . . . . . 1018.7. Reporte - Resolución de Pantalla . . . . . . . . . . . . . . . . . . . . . . . 1048.8. Reporte - Textos buscados . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058.9. Reporte - Uso de Enlaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068.10. Reporte - Usos Comandos del Navegador . . . . . . . . . . . . . . . . . . . 1078.11. Estadísticas de usos de enlaces en páginas . . . . . . . . . . . . . . . . . . 108 Índice de cuadros 5.1. Comparación de arquitecturas de servicios web . . . . . . . . . . . . . . . . 395.2. Tipos MIME soportados por REST . . . . . . . . . . . . . . . . . . . . . . 437.1. Roles existentes durante el desarrollo . . . . . . . . . . . . . . . . . . . . . 63 7 Capítulo 1Introducción y Problema En el presente capítulo se proporciona una explicación acerca de la situación actualde los servicios de estadísticas. Posteriormente se hace referencia a los diversos Ana-lizadores de información tales como los Analizadores de logs de servidores Web y losServicios de Estadísticas, explicando a groso modo su propósito y las desventajas de suutilización; y la solución propuesta en el presente trabajo especial de grado.1.1. Situación actualCada vez más Internet es el canal de comunicación global por excelencia. El inter-cambio de cualquier tipo de información por vía electrónica dejó de ser �cción paraconvertirse en realidad.En muchos países del mundo se ha denotado una fuerte tendencia hacia el aumen-to de usuarios en la red y gracias a esto, existen una gran variedad de sistemas queofrecen sus servicios para la recolección de datos en la Web cuyo diseño, interacción yprocesamiento de información parecen no estar dirigidos en pro de las necesidades y/oexpectativas de los usuarios, debido a que la información recolectada por los mismostratan de englobar la mayor cantidad de mercados posibles; en base a un conjunto deestudios realizados por dichos servicios para determinar que productos ofrecer, y asítratar de generar ventajas competitivas para sus clientes, de forma gratuita o mediantealguna forma de pago; pero generalmente no suelen estar centrados en la interaccióndel usuario.Entre los servicios más comunes ofrecidos podemos mencionar el análisis de trá�coexistente en la Web, sistema operativo empleado por el usuario, número de visitas enuna página Web determinada, y lugar de procedencia del usuario. Respecto a estos dosúltimos aspectos, se contemplan una serie de limitantes que serán descritas a lo largodel presente trabajo de grado. 8 CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 9Además suelen utilizar una gran variedad de analizadores de información, entre loscuales cabe mencionar: los analizadores de logs de servidores web y los servicios deestadísticas.A continuación, una explicación acerca de los analizadores mencionados:1.1.1. Analizadores de logs de servidores webDichos analizadores de logs generan información acerca del uso de un sitio web.Estos a su vez, constituyen una de las herramientas más con�ables, pero tienen comoinconveniente, que dichos logs muestran la información de manera engorrosa, poco le-gible, y de forma genérica.Otra forma de poder realizar un análisis de la información de un sitio web son losproxys. Estos presentan información básica sobre el acceso a determinados sitios web,pero los mismos no incluyen aspectos relacionados a la interacción del usuario con lapágina a través de un navegador.1.1.2. Servicios de estadísticasComo fuente de información adicional existen los llamados servicios de estadísticasen la web, que generan una gran variedad de reportes estadísticos para los sitios webque incluyen sus servicios, y los cuales ofrecen indicadores generales que pueden servisualizados, pero no muestran detalles especí�cos como por ejemplo, la navegabilidadde un usuario en un sitio web, además de otros indicadores relacionados a la interaccióndel usuario y la página.Además muchos de estos servicios de estadísticas generan código JavaScript, quedebe ser incorporado a cada una de las páginas de los sitios web que son monitorizadasutilizando las funcionalidades creadas por estos, lo cual puede resultar engorroso si elsitio web, no presenta un diseño bien estructurado, e inclusive el código JavaScriptpuede no ser compatible con algunos navegadores.Cabe agregar que, el código JavaScript disminuye el rendimiento de las páginas, yaque debe ser ejecutado internamente en la página para que pueda ser monitorizado.Por lo expuesto anteriormente podemos deducir que existen grandes brechas en losservicios ofrecidos por los generadores de estadísticas existentes en la Web, además delos bajos medidores que se obtienen de los analizadores de logs.En general, los servicios y analizadores de información expuestos permiten realizarun análisis del comportamiento de los usuarios que acceden a un sitio web, de mane-ra global. Esto es debido a que la mayoría de los sistemas que utilizan los servicios CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 10y/o analizadores mencionados, tienen la necesidad de abarcar la mayor cantidad desitios web posibles a quienes puedan ofrecer sus servicios, y por ello la informaciónpresentada por los mismos trata de dar a conocer servicios que sean de interés parala mayoría de los usuarios; sin embargo muchas veces no satisfacen las expectativas onecesidades de un usuario en particular que necesite recolectar otro tipo de informa-ción; a diferencia de un sistema de estadísticas con�gurable que muestre informaciónde un usuario en especí�co, que permita clasi�car o categorizar a los usuarios según susnecesidades, obtener información acerca del comportamiento que estos presentan en as-pectos relacionados a la navegabilidad, funcionalidades utilizadas, tiempo de respuestadel usuario para completar una tarea especí�ca en el sitio web, tipos de interacción, etc.Lo cual constituye una especie de guía de diseño, que le muestre al ente interesado,ya sea el administrador, o un ente externo del sitio web, de que forma puede lograrmejoras relacionadas a la usabilidad del mencionado.De acuerdo a lo expuesto anteriormente, se propone la implementación de una he-rramienta de estadísticas que permita obtener información de interés de uno o variossitios web, conformada por una aplicación cliente (recolector de datos) y una aplicaciónservidor (almacenador y encargado de mostrar la información obtenida de manera grá-�ca), quienes establecerán comunicación entre sí mediante servicios web.La aplicación cliente reside como una extensión del navegador Mozilla Firefox, ycuya función principal es la recolección con�gurable de datos, mediante la interaccióndel usuario con el navegador, a través de una página web.Dichos datos posteriormente son analizados por la aplicación servidor quien se en-carga de capturar la información proporcionada por la aplicación cliente, y almacenarlautilizando un sistema de manejador de bases de datos. Además de poder analizar ygenerar información estadística, que pueda ser visualizada en un sitio web residente enel servidor.La recolección de información por parte de la aplicación cliente, y la visualizaciónde la información de forma grá�ca obtenida del mismo, por parte de la aplicación servi-dor, permite conocer más a fondo al usuario, y a su vez contribuye a una mejor tomade decisiones en aspectos relacionados al análisis, diseño, desarrollo, mantenimiento einnovación de sitios web.Además de resolver los inconvenientes de generar código JavaScript, que debe serincorporado a cada una de las páginas de los sitios web que van a ser monitorizados,como es el caso de los servicios de estadísticas, debido a que este funciona como unaextensión del navegador Mozilla Firefox, con lo cual no es necesario agregar código alas páginas que serán estudiadas y a su vez se evita una disminución del rendimientode las mismas, ya que dicho codigo debe ser ejecutado internamente en la página para CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 11que pueda ser monitorizado, en contraposición al sistema anterior, donde el códigoJavascript se ejecuta como extensión del navegador y no internamente en la página.1.2. Propuesta tecnológicaA continuación se muestra un grá�co de la tecnología propuesta para la realizacióndel sistema de estadísticas anteriormente mencionado: Figura 1.1: Arquitectura propuesta para el TEG 1.2.1. Explicación de la arquitectura propuestaEn la presente sección se proporciona una síntesis de la arquitectura propuesta.Dichaarquitectura, se encuentra dividida en dos componentes: Sistema Cliente y SistemaServidor. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 121.2.2. Sistema ClienteEs el encargado de recolectar información acerca del comportamiento del usuariomientras navega por la Web. Dicho sistema está conformado por 3 componentes:Extensión del navegador Web: Representa la capa de presentación de la apli-cación, que fue creada utilizando el lenguaje de interfaces de usuario XUL ( XMLUser Interface).Comunicación con el núcleo: Encargado de capturar información acerca delos eventos realizados por el usuario mientras navega, ya sea sobre una páginaWeb determinada o sobre la capa de presentación de la extensión, tales como, elinvocar una interfaz de usuario, haciendo click en algunas sus opciones. El com-ponente Comunicación con el núcleo, dependiendo de los eventos acaecidos enlos escenarios ya descritos, establece o no una comunicación con el componentedenominado Componentes de la arquitectura de Mozilla Firefox, para obtener in-formación acerca de un determinado evento.Componentes de la arquitectura del navegador Mozilla Firefox: Con-formada por un componente multiplataforma que posee un modelo de objetossimilar al Microsoft COM, denominado XPCOM, que permite que los compo-nentes u objetos XPCOM, puedan ser utilizados o implementados por lenguajesde programación tales como: JavaScript, Java, Python, o C++; y la tecnologíaXPConnect, que permite la interoperabilidad entre componentes XPCOM y pro-cedimientos implementados en JavaScript.1.2.3. Sistema ServidorSe encarga de recibir la información recolectada por la aplicación cliente, y lacual es enviada por el mencionado, utilizando servicios Web REST implementados enJavaScript. El sistema servidor está conformado por los siguientes componentes:Manejador de la interfaz de servicios Web: Es el conjunto de componentesimplementados por medio de JAX-WS para el despliegue de servicios web REST,a objeto de que el cliente pueda enviar las estadísticas y obtener la con�guraciónde los proyectos de�nidos en el servidor.Gestor de estadísticas: Constituyen los componentes invocados por la interfazde servicios web para cargar las estadísticas de un documento XML en la base dedatos, o generar el XML de los proyectos con�gurados en el sistema.Núcleo del sistema: Conformado por los componentes que permiten la creacióny generación de los reportes en el sistema Web y ofrecen la comunicación de lacapa web con la capa de persistencia. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 13Controlador de datos: Tiene como función ofrecer una comunicación trans-parente entre el núcleo y la interfaz web con la base de datos del sistema. Estáconstituida por el conjunto de entidades de persistencia.1.2.4. FuncionamientoInicialmente el usuario debe crear un proyecto de estadísticas en el Sistema Servidor,a través de un sitio Web implementado en JSF (Java Server Faces) 1.2. Una vez creadoel proyecto, se instala la aplicación cliente en el navegador Mozilla Firefox y se realizanlas con�guraciones necesarias para iniciar el proceso de recolección.Dicho proceso se realiza de la siguiente manera:El Sistema Cliente solicita un id de visita al Sistema Servidor a través de un servicioWeb REST implementado en JavaScript. Si el Sistema Servidor no se encuentra activo,o no esta disponible, no se inicia la recolección de estadísticas en el Sistema Cliente. Encaso contrario, el Sistema Servidor, envía como respuesta un id de visita a la aplicacióncliente, utilizando un servicio Web implementado en JAX-RS ( Java API for RESTfulWeb Services).Posteriormente cuando un usuario ingresa a un dominio en la web; y dicho dominiopertenece al proyecto sobre el que se desea realizar la recolección de estadísticas; sinoexiste una visita activa, se inicia una nueva visita en la aplicación cliente. La aplicacióncliente inicia la recolección de información. Si el timeout de visita seleccionado por elusuario (el del Sistema Cliente o el del Sistema Servidor) expira, o el usuario decidecerrar el navegador, el Sistema Cliente envía la información recolectada hasta los mo-mentos al Sistema Servidor en forma de un archivo XML, utilizando un servicio WebREST implementado en JavaScript. Luego de enviar las estadísticas, el ciclo se inicianuevamente.Una vez �nalizada la recolección de datos estadísticos, el Sistema Servidor obtiene lainformación recolectada por el cliente, mediante un archivo XML enviado por el SistemaCliente. Dicha información es almacenada en la base de datos del Sistema Servidor, ya partir de su contenido se procede a la construcción de diversos reportes, en base a laspreferencias de con�guración del proyecto seleccionadas por el usuario, en el presentesistema, al momento de crear el proyecto de su preferencia.1.3. Objetivo generalDiseñar e implementar un Sistema de Recolección de estadísticas Web que obtengainformación acerca del comportamiento del usuario mientras navega por la red, paraque posteriormente, dicha información sea almacenada y visualizada de manera grá�ca. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 141.4. Objetivos especí�cosDiseñar e implementar una aplicación del lado del cliente encargada de realizar elproceso de extracción de los datos, como una extensión para el navegador MozillaFirefox.Diseñar las interfaces de usuario correspondientes a la aplicación cliente para larecolección de datos del Sistema de Visualización y generación de estadísticas webcon�gurables.Desarrollar los módulos encargados de medir la interacción del usuario con lapágina web.Implementar el núcleo de la aplicación cliente encargado de la invocación de losservicios web residentes en la aplicación servidor.Implementar el núcleo de la aplicación servidor, que permita la creación de proyec-tos de estadísticas.Diseñar e implementar la base de datos residente de la aplicación servidor quepermita almacenar la información relacionada a los parámetros de interaccióndel usuario y la pagina, e integrarla al modelo de datos existente del Sistema deVisualización y generación de estadísticas Web.Desarrollar los módulos de la aplicación servidor encargados de generar los re-portes estadísticos que serán mostrados.Integrar la aplicación cliente con la aplicación servidor para formar el sistema devisualización y generación de estadísticas web.Aplicar pruebas a las funcionalidades desarrolladas en la aplicación cliente y enla aplicación servidor, para veri�car su correcto funcionamiento y comunicación,una vez integradas con el Sistema de Visualización y generación de estadísticasWeb.Utilizar un proceso de desarrollo ligero, enfocando el desarrollo de la aplicaciónen función de los requerimientos comunicados por el cliente.1.5. Proceso de desarrolloLa metodología a utilizar será eXtremme Programming (XP) o Programación Ex-trema, la cual constituye un proceso de desarrollo ligero, que intenta reducir la comple-jidad del software por medio del trabajo en equipo; generalmente en parejas; a objetode desarrollar la mayor cantidad de código en el menor tiempo posible, la transmisiónde conocimientos entre los diversos integrantes de un proyecto de desarrollo; a objetode que los programadores incrementen sus habilidades y por ende; el desarrollo de las CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 15aplicaciones sea agilizado; y el desarrollar código de calidad, con la menor cantidad dedocumentación posible. Parte IMarco Teórico 16 Capítulo 2Firefox En el presente capítulo se explican los conceptos manejados en la arquitectura delnavegador Web Mozilla Firefox, de igual manera se exponen el conjunto de tecnologíasy lenguajes que hacen posible el funcionamiento del mismo. Adicionalmente se de�neel término extensión en el contexto del navegador Web y se presentan las ventajas ydesventajas de una extensión.2.1. De�niciónEs un navegador Web de código abierto desarrollado en el lenguaje de programaciónC++ que tiene la capacidad de incorporar cualquier número de aplicaciones comple-mentarias que pueden ejecutarse en máquinas que utilicen la mayoría de los sistemasoperativos de escritorios existentes, tales como: Microsoft Windows, OS X, Linux, Ma-cOS, entre otros [Feldt, 2007].2.2. Arquitectura multiplataforma de Mozilla FirefoxMozilla Firefox no es solo una aplicación convencional, su arquitectura está rela-cionada con aplicaciones Web que emplean HTML dinámico. Está constituída porplataformas basadas en estándares que permiten el manejo de eventos codi�cados enlenguaje JavaScript, y que residen en la interfaz XUL, que será explicada en el capítulo4. Por otra parte, el funcionamiento de la arquitectura del navegador Web radica encombinar lo que el usuario visualiza (a través del contenido Web) y las tecnologías fun-damentales usadas para accesar a la información, decodi�car, desplegar y estilizar elcontenido. Las tecnologías que hacen esto posible son quizás las menos comprendidasdel conglomerado de innovaciones de Mozilla [Firefox, 2009b]. 17 CAPÍTULO 2. FIREFOX 18En si la arquitectura del navegador web está basada en las siguientes tecnologías ylenguajes [Firefox, 2009d]:CSSJavaScriptXULXPIDLXPConnectXPCOMGeckoC++Las tecnologías y lenguajes anteriormente listados están asociados a los siguientescomponentes que conforman la arquitectura:Interfaz Grá�ca de Usuario (GUI): corresponde a toda la capa de pre-sentación de la aplicación al usuario �nal y está estructurada y basada en ellenguaje XUL. Adicionalmente la presentación del GUI es de�nida a través dearchivos CSS [Firefox, 2009d].Lógica de control: conforma todos los procesos de manejo de eventos entre lainterfaz de usuario y el núcleo del sistema. Esta lógica es manejada por medio dellenguaje JavaScript [Firefox, 2009d].Modelo de componentes: se encarga de establecer la comunicación entre lacapa de control y el núcleo a través de un sistema de objetos multiplataforma.Este modelo es manejado por medio de las tecnologías XPConnect y XPCOM[Firefox, 2009d].Núcleo del sistema: contiene toda la lógica de funcionamiento básica de laaplicación y el análisis del contenido Web para que pueda ser desplegado. Elnúcleo se encuentra desarrollado en C++ y utiliza como plataforma de renderizadoa Gecko [Firefox, 2009d] .La �gura 2.1 muestra la arquitectura del navegador Mozilla Firefox [Firefox, 2009b]. CAPÍTULO 2. FIREFOX 19 Figura 2.1: Arquitectura de FirefoxCSS (Cascading Style Sheets): es el lenguaje utilizado para describir la pre-sentación de documentos HTML o XML. Esto incluye varios lenguajes basados en XMLcomo son XHTML o SVG. Además, es usado para modi�car la interfaz de usuario deaplicaciones y programas, este es el caso de los productos basados en XUL como sonFirefox, Seamonkey o Thunderbird.[Firefox, 2009c] [Firefox, 2009b]JavaScript: es un lenguaje de scripts, interpretado, multiplataforma y parcialmenteorientado a objetos. Fue creado por Netscape especí�camente para su uso en el desa-rrollo de sitios Web. Actualmente es un estándar mantenido por el ECMA. Para mayorinformación consultar el capítulo 3 contenido en el presente documento. [Firefox, 2009a][Firefox, 2009b]XUL (XML User Interface Language): es el lenguaje XML para interfaces deusuario de Mozilla. Permite crear potentes aplicaciones multiplataforma que puedenejecutarse con conexión a Internet o sin ella; así como permitir que las aplicacionespuedan ser personalizadas con facilidad con texto alternativo, grá�cos, y diseños; porlo que pueden ser fácilmente instaladas o traducidas. [Firefox, 2009f] [Firefox, 2009b]XPIDL (Cross Platform Interface Description Language): es un lenguajede descripción de interfaces usado para especi�car clases en la interfaz XPCOM.El lenguaje de descripción de interfaces (IDL, por Interface Description Language)es utilizado para describir interfaces independientemente del lenguaje y de la máquina. CAPÍTULO 2. FIREFOX 20Los IDLs permiten de�nir interfaces que luego puedan ser procesadas por herramien-tas para autogenerar especi�caciones de interface dependientes del lenguaje. [Firefox, 2009e]XPConnect: es la tecnología que funciona como puente entre JavaScript y XP-COM. Dicha tecnología permite el uso de componentes XPCOM dentro de códigoJavaScript, así como la interacción con objetos JavaScript dentro de componentes XP-COM. [Firefox, 2007a]XPCOM(Cross Platform Component Object Model): XPCOM no es unlenguaje de programación. Es un modelo multi-plataforma sencillo, basado en COMque proporciona un lenguaje e interfaces independientes de la plataforma, que otrosobjetos pueden utilizar para acceder a sus servicios sin conocer su implementación.[Firefox, 2008b]Gecko: es el nombre del motor de presentación desarrollado por Mozilla. En unprincipio se llamó NGLayout. La función de Gecko es leer el contenido de la Web, enHTML, CSS o JavaScript, y presentarlo en pantalla o imprimirlo. [Firefox, 2007c] 2.3. Extensión de FirefoxEs un pequeño add-on (complemento agregado) que añade o modi�ca funcionalida-des en una aplicación principal (aplicación host) como Firefox [Firefox, 2008a].La gama de funcionalidades que abarca una extensión están principalmente dirigidasa la personalización del sistema host. Ejemplos de extensión en Firefox son:1. Agregar una nueva barra de herramientas con nuevas funcionalidades.2. Cambiar completamente una característica del navegador.2.3.1. VentajasNo requiere realizar cambios en el código de la aplicación principal con lo cual noes necesaria la compilación de la misma.No hace más complejo el código principal de la aplicación.Facilidad de integrarse como un módulo adicional en la aplicación.Fácil de remover.Permite realizar una personalización de la interfaz de usuario.Se proporciona informaciósn adicional al usuario. CAPÍTULO 2. FIREFOX 212.3.2. DesventajasSe requiere de una API para establecer una comunicación con la aplicación host.Pueden in�uir negativamente en el rendimiento del sistema.Necesita de la reinicialización de la aplicación para completar la instalación. Capítulo 3JavaScript El presente capítulo describe los conceptos involucrados con el lenguaje de progra-mación interpretado JavaScript, iniciando con la de�nición, especi�caciones o�ciales yversiones del lenguaje.3.1. De�niciónEs un lenguaje de programación interpretado basado en guiones (scripts) utilizadoprincipalmente en la creación de páginas Web dinámicas. Una página Web dinámica esaquella que incorpora efectos tales como animaciones, acciones que se activan al pre-sionar elementos de interfaz grá�ca de una página Web como botones, despliegue deventanas con mensajes de aviso al usuario, entre otros.En constraste con un lenguaje de programación no interpretado (como Java), elcódigo fuente JavaScript no requiere de procesos intermedios como la compilación paraser ejecutado, por lo tanto, puede ser probado directamente (código JavaScript embe-bido en una página Web) en cualquier navegador Web que sea capaz de interpretar ellenguaje.Por otra parte, JavaScript no guarda ninguna relación directa con el lenguaje deprogramación Java. Java es un lenguaje de programación compilado de alto nivel.Legalmente, JavaScript es una marca registrada de la empresa Sun Microsystems.[Producciones, 2008] [librosweb.es, 2009] 3.2. Especi�caciones o�cialesECMA ha publicado varios estándares relacionados con ECMAScript. En Junio de1997 se publicó la primera edición del estándar ECMA-262. Un año después, en Junio de22 CAPÍTULO 3. JAVASCRIPT 231998 se realizaron pequeñas modi�caciones para adaptarlo al estándar ISO/IEC-16262y se creó la segunda edición.La tercera edición del estándar ECMA-262 (publicada en Diciembre de 1999) es laversión que utilizan los navegadores actuales y se puede consultar gratuitamente enhttp://www.ecma-international.org/publications/standards/Ecma-262.htm.Actualmente se encuentra en desarrollo la cuarta versión de ECMA-262, que podríaincluir novedades como paquetes, espacios de nombres, de�nición explícita de clases,etc. ECMA también ha de�nido varios estándares relacionados con ECMAScript, comoel estándar ECMA-357, que de�ne una extensión conocida como E4X y que permite laintegración de JavaScript y XML. [librosweb.es, 2009] 3.3. Motores de JavaScript disponiblesMozilla.org ofrece dos motores de JavaScript. El primero JavaScript fue creado porBrendan Eich en Netscape, y ha sido actualizado (la versión 1.5 de JavaScript) paraajustarse a la tercera edición de ECMA - 262 desde entonces. Este motor, cuyo nombreen código es SpiderMonkey, es implementado en C.Por otro lado, el segundo motor denominado Rhino, y creado principalmente porNorris Boyd (también en Netscape) es un interpretador de JavaScript en Java. De lamisma manera que SpiderMonkey, Rhino es compatible con la tercera edición de ECMA- 262. [librosweb.es, 2010]3.4. Versiones de navegadores y de JavaScriptEl lenguaje ha ido avanzando durante sus años de vida e incrementando sus capaci-dades. En un principio se podían realizar muchas funcionalidades en la página Web,pero se contaba con pocas instrucciones para poder crear efectos especiales. Con eltiempo también el HTML ha avanzado, y se han añadido nuevas características talescomo las capas, que permiten estructurar y manejar los documentos de distintas formas[Producciones, 2008].JavaScript también ha avanzado y para manejar todas estas nuevas característicasse han creado nuevas instrucciones y recursos.Para resumir vamos a comentar las distintas versiones de JavaScript:JavaScript 1.0: nació con el Netscape 2.0 y soportaba una gran cantidad deinstrucciones y funciones, casi todas las que existen ahora ya se introdujeron en CAPÍTULO 3. JAVASCRIPT 24el primer estándar [Firefox, 2009a].JavaScript 1.1: es la versión de JavaScript que se diseñó con la llegada delos navegadores 3.0. Implementaba poco más que su anterior versión, ejemplode ello es el tratamiento de imágenes dinámicamente y la creación de arreglos[Firefox, 2009a].JavaScript 1.2: que viene junto con la creación de los navegadores 4.0. Tienecomo desventaja, que es algo distinta en plataformas Microsoft y Netscape, yaque ambos navegadores crecieron de distinto modo y estaban en competencia porel mercado [Firefox, 2009a].JavaScript 1.3: versión que implementan los navegadores 5.0. En esta ver-sión se han limado algunas diferencias y asperezas entre los dos navegadores[Firefox, 2009a].JavaScript 1.5: versión actual que implementa Netscape 6 [Firefox, 2009a].JavaScript 1.6: presenta algunas características nuevas, tales como las especi-�cadas a continuación: E4X(ECMAScript for XML), inclusión de nuevas opera-ciones sobre arreglos como el indexOf() y lastOf(), y strings genéricos [Firefox, 2009a].JavaScript 1.7: es una actualización de la versión 1.6 de JavaScript, donde seincluyen generadores e iteradores sobre estructuras tales como las listas, senten-cias let. El soporte para JavaScript esta disponible a partir de Firefox 2, Beta 1[Firefox, 2009a].JavaScript 1.8: está plani�cado para integrarse como parte de Gecko 1.9 (in-corporado en Firefox 3). Es una actualización menos sustancial que la descritaen JavaScript 1.7, pero tiene algunas actualizaciones para comprobar el progre-so hacia ECMAScript 4/JavaScript 2 e incluirá todas las nuevas característicasespeci�cadas en JavaScript 1.6 y JavaScript 1.7 [Firefox, 2009a].Por su parte, Microsoft también ha evolucionado hasta presentar su versión 5.5de JScript. Capítulo 4XUL XUL son las siglas de Lenguaje XML de Interfaz de Usuario, (del inglés: XML UserInterface Language), y es un lenguaje desarrollado para las interfaces de usuario (IU) deNetscape y Mozilla. Es parte del navegador de Internet Mozilla Firefox y otras aplica-ciones relacionadas, así como de Gecko, que es el motor de renderizado del navegador.De hecho XUL es tan poderoso que la interfaz completa del navegador Mozilla estáimplementada en este lenguaje.De forma similar al HTML, en XUL es posible crear una interfaz usando un lenguaje demarcado, de�nir la apariencia de esta interfaz con hojas de estilo CSS y usar JavaScriptpara manipular su comportamiento; a diferencia del HTML, XUL tiene un conjuntoextenso de componentes grá�cos utilizados para crear menús, barras de herramientas,cajas de texto, entre otros.En otras palabras, XUL puede usarse para crear interfaces multiplataformas, multidis-positivos y de forma ligera; que pueden ejecutarse con conexión a Internet o sin ella.Estas aplicaciones son fácilmente personalizables con texto alternativo, grá�cos, y diseños, por lo que pueden ser fácilmente instaladas o traducidas para diversos mercados.[Firefox, 2009f] [WikiBooks, 2009a]Algunos elementos que pueden ser creados son:Controles de entrada como los cuadros de texto y cajas de chequeo o veri�cación.Barra de herramientas con botones u otros contenidos.Menú en barras de menú o menú emergente.Pestañas de diálogos.árbol de información jerárquica o tabulada.Teclas de accesos directos.Barras de progreso. [Scribd, 2008] 25 CAPÍTULO 4. XUL 26Las siguientes �guras ilustran ejemplos de algunos componentes creados en XUL.Consultar las �guras 4.1, 4.2, 4.3 y 4.4. Figura 4.1: árbol de información jerárquica en XUL Figura 4.2: Pestañas de diálogos en XUL CAPÍTULO 4. XUL 27 Figura 4.3: Cuadros de texto en XUL Figura 4.4: Barras de progreso en XUL4.1. Ventajas de usar XULLa mayoría de las aplicaciones necesitan ser creadas usando características deuna plataforma especí�ca, lo que hace que su conversión a otras plataformas seacostosa en términos monetarios y de tiempo.Algunos usuarios querrían usar una aplicación en herramientas diferentes a unacomputadora tradicional, por ejemplo, dispositivos de mano. El lenguaje Java fuecreado con ese propósito: ser multiplataforma y multidispositivo, pero la creaciónde interfaces de usuario en Java es una tarea difícil.XUL fue diseñado para crear interfaces de forma fácil y rápida, además estádisponible en todas las versiones de sistemas operativos como Windows, Macin-tosh, Linux y Unix, pero el mayor inconveniente hasta el momento es que no escompatible con Internet Explorer.Para ilustrar su potencial, en este capítulo se desarrollarán algunos ejemplos. Seresalta la palabra potencial, debido a que las completas capacidades del XUL so-brepasan el alcance de este capítulo. CAPÍTULO 4. XUL 284.2. Características fundamentales1. Poderoso lenguaje de marcado basado en componentes: el �n de XULes construir aplicaciones multiplataforma, en constraste con DHTML el cual estádirigido a la construcción de páginas Web. Por esta razón, XUL es orientado haciael desarrollo de artefactos de aplicación tales como ventanas, etiquetas, botonesy campos de texto en lugar de páginas, niveles de encabezado e hipervínculos. Dehecho, muchos desarrolladores invierten una gran cantidad de tiempo y esfuerzoen lograr buenos resultados en sus páginas web DHTML, pero a costa de lacomplejidad y el rendimiento, sin el soporte de ningún estándar [Firefox, 2007b].2. Basado en estándares existentes: XUL es un lenguaje basado en el estándarde la especi�cación 1.0 de XML de la W3C. Las aplicaciones escritas en XULestán basadas en estándares tecnológicos adicionales de la W3C, en las cuales seresaltan: HTML 4.0, versiones 1 y 2 de Cascading Style Sheets (CSS), nivel 1 y 2del Document Object Model (DOM), JavaScript 1.5, incluyendo la tercera ediciónde ECMA-262 (ECMAScript) y XML 1.0 [Firefox, 2007b].3. Plataforma portable: igual que en HTML, XUL está diseñado para ser unaplataforma neutral, haciendo que las aplicaciones sean fácilmente portables a to-dos los sistemas operativos en los cuales Mozilla se ejecuta. Desde que XUL proveeuna abstracción de componentes de interfaz de usuario, este se basa en la premisade çodifícalo y ejecútalo donde desees". La interfaz de usuario para todas las apli-caciones con núcleo Mozilla (en las que se incluye Mozilla Firefox) están escritasen XUL con un único código base soportado en todas las plataformas Mozilla[Firefox, 2007b].4. Separación de la presentación de la lógica de negocios: el mayor talón deaquiles de la mayoría de las aplicaciones web es el fuerte acoplamiento entre loselementos de interfaz de usuario y la lógica de la aplicación cliente. XUL proveeuna clara separación entre la de�nición de la aplicación cliente y la lógica de pro-gramación (contenido consistente de XUL, XBL, y JavaScript), la presentación(consiste de CSS e imágenes), y las etiquetas con textos especí�cos del idioma(consiste en DTDs y cadenas internacionalizadas de�nidas dentro de archivos.properties). El despliegue y la apariencia de las aplicaciones XUL puede ser alte-rada sin tomar en cuenta la de�nición y la lógica de la aplicación. Adicionalmente,la aplicación puede ser internacionalizada en diversos idiomas y regiones indepen-dientemente de su lógica o presentación. Este grado de separación conlleva a lacreación de aplicaciones que son más fáciles de mantener por los desarrolladores.El �ujo de trabajo resulta más fácil de coordinar que aplicaciones web basadas enHTML, con un menor impacto en la calidad y estabilidad del sistema.[Firefox, 2007b]5. Fácil personalización y localización:Además de la separación que XUL ofreceentre la lógica de la aplicación, presentación e idiomas, es fácil de personalizar paradiferentes vendedores o grupos de usuarios. Un desarrollador puede mantener una CAPÍTULO 4. XUL 29base primaria de códigos, a la vez de personalizar el logo de la aplicación y en-lazarlo con diferentes vistas para proporcionar diferentes interfaces a cada uno delos vendedores.Una aplicación que es escrita y desplegada con una interfaz de usuario en Ingléspuede ser traducida al Francés por el mismo vendedor. Mientras que la mayoríade los cambios son extensivos y afectan a la mayoria y no a toda la aplicación,estos están separados entre si permitiendo que el núcleo y la lógica de la aplicaciónpuedan ser compartidas. [Firefox, 2007b] 4.3. Desarrollo en XULA continuación se proporciona una breve explicación acerca de la estructura de unarchivo XUL y el manejo de eventos en el mencionado.4.3.1. Estructura del archivoXUL es XML, y como todos los archivos XML, debe empezar con la declaraciónestándar de XML. Actualmente XUL utiliza la versión 1.0.Un archivo XUL debe tener una extensión .xul. El navegador Mozilla Firefox lo re-conocerá automáticamente y sabrá qué hacer cuando el usuario lo ejecute.Como archivos XML, las interfaces XUL, deben estar bien formadas, es decir cadaelemento debe tener su etiqueta de apertura y cierre.En el caso de ventanas en XUL, el elemento raíz para su construcción debe ser unaetiqueta window.< window > < /window >.Los documentos XML, son codi�cados para ser extensibles, o ser capaces de incor-porar diferentes tipos de elementos, dependiendo de que tipo de información va a sercodi�cada en el documento.Los documentos XHTML poseen elementos que representan elementos de documentosHTML tales como body, head, div, entre otros.No existen hojas de estilo implícitas para XUL, debido a esto, siempre debe existiruna declaración de hoja de estilo asociada.Mozilla incluye una hoja de estilo estándar llamada "xul.css".Aún cuando sea posible cargar las hojas de estilo que se deseen, la mejor práctica esusar inicialmente "xul.css", ver �gura 4.5. CAPÍTULO 4. XUL 30Nótese la referencia a chrome. El chrome es la parte de la aplicación que está fueradel área de contenido de una ventana. Barras de herramientas, barras de menú, barrasde progreso y títulos de ventanas son ejemplos de elementos que son parte típica delchrome. Chrome es el término descriptivo para nombrar todos los elementos de unaaplicación XUL.Todos los documentos XML deben tener una declaración de espacio (único) denombres (namespace). Los desarrolladores de XUL crearon un espacio de nombres quemuestra el origen del nombre XUL.La �gura 4.5 muestra un ejemplo del archivo "xul.css". Figura 4.5: Estructura del archivo xul.cssEl siguiente elemento notorio es la etiqueta < window > (ventana).Esta etiqueta es análoga a la etiqueta < body > (cuerpo) del HTML.Todos los elementos estarán dentro de la etiqueta window. En la �gura anterior, laetiqueta window tiene tres atributos, que son muy importantes.id: el atributo id es importante debido a que es la manera de identi�car la ventana,para que el código (JavaScript) de la aplicación pueda hacer referencia a ella.title: aún cuando el atributo no es necesario, es una buena práctica dar un nombredescriptivo, el título se mostrará en la barra de título de la ventana.orient: le indica al navegador la dirección en la cual mostrar los elementos des-critos en el archivo XUL (horizontal o vertical). Vertical es el valor por omisión,así por lo tanto no se especi�ca el atributo "horizontal", lo que indican que loscomponentes aparecerán uno sobre otro.Existen otras reglas de sintaxis que es necesario tomar en cuenta:1. Todos los eventos y atributos deben escribirse en minúsculas. CAPÍTULO 4. XUL 312. Todas las cadenas de texto deben estar entre comillas dobles (").3. Todos los componentes interactivos deben tener etiquetas de apertura y cierre < etiqueta > < /etiqueta > para estar bien formados.4. Todos los atributos deben tener un valor. [WikiBooks, 2009a]Ejemplos de componentes XULXUL posee una gran librería de componentes grá�cos, entre los cuales se incluyen:Botones.Cajas de texto.Barras de progreso.Etiquetas.Listas desplegables.Menús contextuales.Barra de desplazamiento, entre otros.A continuación se explicara la construcción de algunos de los componentes anterior-mente mencionados:Ejemplo básicoLa �gura 4.6 muestra el código fuente de una aplicación que imprime la frase HolaMundo 3 veces. [WikiBooks, 2009b] Figura 4.6: Código fuente para imprimir Hola Mundo 3 veces CAPÍTULO 4. XUL 32En la �gura 4.6 se indicaron 3 maneras distintas de desplegar la frase Hola mundo,en el navegador y el resultado �nal puede ser visualizado en la �gura 4.7 Figura 4.7: Hola mundo en el navegadorCabe destacar las diferentes formas en las que la frase es mostrada: dos veces uti-lizando la etiqueta description y una vez utilizando la etiqueta label.Ejemplo de contenedoresPara de�nir un componente contenedor XUL, se de�ne una etiqueta similar a laetiqueta < body > de HTML, para insertar componentes grá�cos. La etiqueta < box >sirve para encapsular otros elementos. Existen varios tipos de etiquetas box.En el siguiente ejemplo se utilizarán las etiquetas < hbox > (caja horizontal), < vbox >(caja vertical), < toolbox > (caja de herramientas) y < tabbox > (caja con pestañas deselección). < hbox > y < vbox > son iguales a la etiqueta < window > pero con los atributos�orient� = �horizontal� y �orient� = �vertical� respectivamente. Estos dos elementospueden tener otros componentes y a su vez pueden estar anidados. < toolbox > puedeusarse para crear barras de herramientas arriba o abajo de la ventana. < tabbox >,puede establecer hojas con lenguetas en las ventanas.En la �gura 4.8 se muestra el uso de los diversos tipos de etiquetas box. CAPÍTULO 4. XUL 33 Figura 4.8: Usos de etiquetas boxEs indispensable brindar una explicación acerca del funcionamiento del atributo �ex(contracción de �exible), el cual constituye una forma de posicionar y asignar tamañoa los componentes grá�cos de manera dinámica.Este atributo puede tener valores entre 0 y 1 (por ejemplo 0.5). A mayor valor, elcomponente ocupará un mayor porcentaje de área cuando el contenedor donde se en-cuentra cambie de tamaño. Cabe mencionar que también existen los atributos ”width”y ”heigth”, que de�nen la preferencia de tamañ o del componente.Ejemplo de menúsPara el despliegue de componentes interactivos al estilo de tipo menú se utilizan lasetiquetas: < menubar > < /menubar > < menu > < /menu > < menupopup > < /menupopup > < menuitem > < /menuitem >En la �gura 4.9 se despliega una barra con los menús Archivo, Editar y Ver. Figura 4.9: Barra de menú en XULAl hacer click en cada una de las opciones anteriormente mencionadas a continua-ción:En la �gura 4.10 se despliega la opción Archivo. CAPÍTULO 4. XUL 34 Figura 4.10: Menú 1 desplegado en XULEn la �gura 4.11 se despliega la opción Editar. Figura 4.11: Menú 2 desplegado en XULEn la �gura 4.12 se despliega la opción Ver. Figura 4.12: Menú 3 desplegado en XULEjemplo de PestañasEn la �gura 4.13 se hace referencia a la creación de 3 pestañas con diversos compo-nentes interactivos. CAPÍTULO 4. XUL 35 Figura 4.13: Pestañas desplegadas en el navegador utilizando XULLas pestañas se de�nen con la etiqueta < tab > y se les da un identi�cador (id) y untexto. A continuación se crea un conjunto de paneles, cada uno con contenido diferente.La primera pestaña (visualizada en la siguiente �gura) muestra la aplicación de estilosdentro del código como en HTML.Las siguientes pestañas tienen componentes con funcionalidad como lo son la barrade desplazamiento y el medidor de progreso funcionan.En la �gura 4.14 se muestra la barra de desplazamiento contenida en Hoja02 Figura 4.14: Barra de desplazamiento en XULEn la �gura 4.15 se muestra la barra de desplazamiento contenida en Hoja03 Figura 4.15: Medidor de progreso en XULEn la siguiente sección se explica como enlazar la interfaz de usuario con la lógicade funcionamiento de la aplicación mediante el uso de manejadores de eventos. CAPÍTULO 4. XUL 36 En la �gura 4.16 se muestran algunas de las instrucciones de como enlazar la interfazde usuario con la lógica de funcionamiento de la aplicación. Figura 4.16: Manejo de eventos en XUL 4.3.2. Manejadores de eventosXUL utiliza un esquema similar al de HTML para el manejo de eventos, a objeto depoder establecer una relación entre la interfaz de usuario y el núcleo de la aplicación.En HTML, un manejador de evento se asocia con un elemento y se realiza algunaacción cuando se activa el manejador. La mayoría de los manejadores de HTML tam-bién están en XUL y hay algunos más que solo se encuentran en XUL.A continuación se muestran algunos manejadores de eventos que son válidos por lamayoría de los elementos XULBlur: Un elemento pierde el foco. Manejador: onblur.Focus: Un elemento pierde el foco. Manejador: onfocus.KeyDown: En un elemento que tiene el foco se presiona una tecla.Manejador: onkeydown.KeyUp: Una tecla deja de ser presionada sobre un elemento que posee el foco.Manejador: onkeyup.KeyPress: Se presiona y suelta una tecla o se mantiene presionada.Manejador: onkeypress.MouseDown: Se pulsa con un botón del mouse sobre un elemento.Manejador: onmousedown.MouseUp: Se deja de pulsar un botón del mouse sobre un elemento.Manejador: onmouseup. CAPÍTULO 4. XUL 37MouseMove: Se mueve el cursor del mouse sobre un elemento.Manejador: onmousemove.MouseOut:Se mueve el cursor fuera de un elemento. Manejador: onmouseout.MouseOver: Se mueve el cursor dentro de un elemento.Manejador: onmouseover.Click:Se presiona y suelta un botón del mouse sobre un elemento.Manejador: onclick.DblClick: Se realiza doble click con un botón del mouse sobre un elemento.Manejador: ondblclick.Command: Un elemento es activado. Existen diversas maneras en los elementosson activados. Por ejemplo, un botón es activado cuando se hace click sobre élo se presiona la tecla enter cuando tiene el foco; un menú es activado cuando seselecciona con el mouse o presionando la tecla de acceso directo. Manejador:oncommand.En la �gura 4.17 se visualiza un código XUL donde se muestra la utilización dediversos manejadores de eventos como: oncommand, onclick y ondblclick. Figura 4.17: Código fuente para manejo de eventos básicos en XULEl código anterior permite que al hacer clic o se presione la tecla enter sobre unbotón se muestre una etiqueta con el nombre del botón que se presionó. Además, alhacer doble clic sobre el mensaje mostrado por el botón aparece el texto "Doble clic".Este comportamiento puede ser visualizado en las �guras mostradas a coninuación:En la �gura 4.18 se muestra la ventana inicial, sobre la cual no se ha realizadoningún tipo de evento. CAPÍTULO 4. XUL 38 Figura 4.18: Botones XUL En la �gura 4.19 se muestra una etiqueta con el nombre del botón que se presionó. Figura 4.19: Visualización de la etiqueta con el nombre del botón presionadoEn la �gura 4.20 se muestra el texto �Doble clic� cuando se hace doble clic sobre elcomponente �label� ubicado debajo de los botones. Figura 4.20: Texto �Doble clic� mostrado al hacer doble clic Capítulo 5Servicios Web Son un conjunto de aplicaciones o tecnologías con capacidad para interoperar enla Web. Estas aplicaciones o tecnologías intercambian datos entre sí con el objetivode ofrecer unos servicios. Los proveedores ofrecen sus servicios como procedimientosremotos y los usuarios solicitan un servicio llamando a estos procedimientos a través dela Web.Los servicios Web son usados para establecer la comunicación entre dos aplicaciones,ya que estos son una colección de protocolos y estándares que sirven para intercambiardatos entre aplicaciones, las cuales pueden estar desarrolladas en lenguajes de progra-mación diferentes, y ejecutadas sobre cualquier plataforma.Para el desarrollo de los servicios web existen diversas arquitecturas cuyas carac-terísticas pueden ser visualizadas en el cuadro 5.1.Arquitectura simple Arquitectura complejaInteracción simple Interacción complejaOrientada al consumidor Orientada a negociosCortos procesos de ejecución Largos procesos de ejecuciónNo soporta procesos de negocios colabora-tivos Soporte para procesos de negocios colabo-rativosNo garantiza seguridad y con�abilidad Soporta seguridad y con�abilidadCuadro 5.1: Comparación de arquitecturas de servicios webEn particular se utilizará una arquitectura de servicios web simple.Hoy en día existen diversas tecnologías para el desarrollo de servicios web, en estecaso se hará énfasis en la tecnología REST, que será explicada con mayor detalle en lasiguiente sección. 39 CAPÍTULO 5. SERVICIOS WEB 405.1. RESTEs una técnica de arquitectura de software para sistemas hipermedia distribuidoscomo la World Wide Web. REST es un término empleado por Roy Fielding, uno delos principales autores de la especi�cación del protocolo HTTP, durante la escritura deuna tesis doctoral sobre la Web, en el año 2000.La primera versión de REST fue desarrollada entre Octubre de 1994 y Agosto de1995, principalmente como un medio para comunicar los conceptos de Web cuando seescribía la especi�cación de HTTP/1.0 y la propuesta de HTTP/1.1 inicial.REST de�ne un conjunto de principios arquitectónicos para diseñar servicios Webque están enfocados en la administración de recursos de un sistema, incluyendo la formaen que los recursos son direccionados y transferidos sobre HTTP por medio de una granvariedad de clientes escritos en diferentes lenguajes. REST ha emergido en los últimosaños y se ha convertido en un modelo de diseño de servicios web predominante. Dehecho, REST ha tenido un gran impacto en la Web hasta el punto de ir desplazando alos servicios web basados en la tecnología SOAP e interfaz WSDL, por ser más fácil deutilizar.Principios de diseño básicoUna implementación concreta de un servicio web en REST sigue cuatro principiosbásicos de diseño:Emplea explícitamente métodos HTTP.Es sin estado.Expone la estructura de directorios como URIs.Trans�ere archivos XML, JSON (JavaScript Object Notation), o ambos.A continuación se procederá a explicar los principios ya mencionados.Uso explícito de métodos HTTPUna de las características claves de los servicios web REST es el uso explícito demétodos HTTP de manera que se siga el protocolo de�nido por el RFC 2616. HTTPGET, por ejemplo, es de�nido como un método para la obtención de recursos por partede una aplicación cliente, o para ejecutar una consulta en el servidor y esperar unarespuesta que incluya los recursos que concuerdan con la consulta realizada. CAPÍTULO 5. SERVICIOS WEB 41El principio básico de diseño de REST establece una relación uno a uno entre lasoperaciones crear, recuperar, modi�car y eliminar (CRUD) y los métodos HTTP. Deacuerdo a estas operaciones las relaciones serían las siguientes:Para crear un recurso en el servidor se emplea el método POST.Para recuperar un recurso se emplea el método GET.Para cambiar el estado de un recurso o modi�carlo se utiliza el método PUT.Para quitar o eliminar un recurso en el servidor se emplea el método DELETE.Esquema de trabajo sin estadoLos servicios web en REST necesitan ser escalables con la �nalidad de mantenerun buen rendimiento al aumentar los niveles de demanda del mismo. Por ejemplo, losservidores de clústeres con capacidades de balanceo de carga son normalmente orga-nizados siguiendo una topología de servicios, lo cual permite que una solicitud puedaser redireccionada de un servidor a otro cuando se necesite disminuir la sobrecarga y eltiempo de respuesta en la llamada a un servicio web. El uso de servidores intermediospara mejorar la escalabilidad requiere de clientes de servicios web REST que incluyanla información completa en la solicitud que se realizará, es decir, enviar toda la in-formación necesaria con la solicitud de manera que los componentes de los servidoresintermedios puedan redireccionar, enrutar y realizar balanceo de carga sin necesidad dealmacenar localmente información de estado entre solicitudes.Un servicio web REST (aplicación o cliente) debe incluir dentro de la cabecera yel cuerpo HTTP todos los parámetros, información de contexto, y los datos requeridospor los componentes del lado del servidor para que puedan generar una respuesta. Altrabajar en un esquema sin estado en los servicios web se mejora el rendimiento de es-tos, adicionalmente se simpli�ca el diseño y la implementación de los componentes dellado del servidor debido a que la ausencia de estado en el mismo, elimina la necesidadde sincronizar datos de sesión con una aplicación externa.En la �gura 5.1 se ilustra el diseño de un servicio con estado, donde la aplicaciónpuede solicitar la información de la próxima página a mostrar, de un conjunto de re-sultados que han sido paginados. Asumiendo que el servicio mantiene almacenada lainformación de la página actual que está siendo mostrada, en este diseño con estado elservicio incrementa y almacena una variable 'siguientePag' con la cual puede responderla solicitud del cliente. CAPÍTULO 5. SERVICIOS WEB 42 Figura 5.1: Ejemplo de un servicio web con estadoEl esquema de trabajo visualizado en la �gura anterior es complicado debido a lanecesidad que tiene el servidor de almacenar y habilitar la sincronización de datos dela sesión. Además, la sincronización de la sesión añade sobrecarga al servidor, lo cualin�uye negativamente en su rendimiento.Por otra parte, el diseño y desarrollo de componentes del lado del servidor que seansin estado es menos complicado. En un servicio Web REST, el servidor es el responsablede generar la respuesta y de proveer una interfaz al cliente, de manera que le permitamantener el estado de la aplicación por si mismo. Por ejemplo, en una solicitud depágina para un conjunto de resultados paginados, el cliente pudiera incluir el númerode página actual como parámetro a la solicitud de la siguiente página. Figura 5.2: Ejemplo de un servicio web sin estadoEn la �gura 5.2 un servicio web sin estado genera una respuesta con el enlace a lasiguiente página de resultados y le brinda al cliente la información del número de lapágina actual con la �nalidad de que pueda almacenarla. CAPÍTULO 5. SERVICIOS WEB 43Exposición de la estructura de directorios como URIsDesde el punto de vista de que las aplicaciones cliente solicitan recursos, el URIdetermina la ubicación del mismo. El URI de un servicio web REST debe ser intuitivo,de manera que pueda ser fácil de adivinar. En �n, la estructura de un URI debería sersencilla, predecible y entendible.Transferencia de archivos XML, JSON, o ambosTípicamente la representación de un recurso re�eja el estado actual del recurso ysus atributos, al momento que una aplicación cliente lo solicite. En adición, los ob-jetos en el modelo de datos de una aplicación están relacionados de alguna manera,y las relaciones entre los objetos del modelo de datos (recursos) estaría re�ejada en lamanera en que ellos son representados a la hora de ser transferidos a la aplicación cliente.En la �gura 5.3 se ilustra un ejemplo del formato de respuesta XML de un servicioweb REST representando un objeto "discusion".<?xml version="1.0"?><discussion date="{date}" topic="{topic}"><comment>{comment}</comment><replies><reply from="joe@mail.com" href="/discussion/topics/{topic}/joe" /><reply from="bob@mail.com" href="/discussion/topics/{topic}/bob" /></replies></discussion>Figura 5.3: Ejemplo de una respuesta XML de un servicio web RESTNo obstante, para que el cliente puede reconocer el tipo de formato devuelto por elservicio web, este último debe añadir esta información MIME (Multiporpouse InternetMail Extension) en la cabecera HTTP de la respuesta. Los tipos MIME soportados porREST se muestran en el cuadro 5.2. [Alex, 2007] [Costello, 2002] [Shailesh K. Mishra, 2007]Tipo MIME Content-TypeJSON application/jsonXML application/xmlXHTML application/xml+xhtmlCuadro 5.2: Tipos MIME soportados por REST Capítulo 6Estadísticas en la Web Hoy en día, la utilización de la Internet como medio de comunicación global entrelos usuarios que circulan por la red es cada vez es mayor.No obstante, muchos sitios web carecen de mecanismos que les permitan obtener infor-mación acerca de los usuarios que se encuentran conectados. Es por ello que herramien-tas como los visores de estadisticas web, constituyen una solución para entes públicos,privados y particulares, que les permita obtener información de interés, ya sea paragenerar ventajas competitivas, incursionar en mercados internacionales, rediseñar unsitio web desde el punto de vista estático, funcional, e incluso su arquitectura, de formaautomatizada.Entre los visores de estadísticas web más conocidos en la red actualmente se puedenmencionar:Servicios gratuitosGoogle Analytics [maestros del web, 2007]Clicky [maestros del web, 2007]StatCounter [maestros del web, 2007]ShinyStat [maestros del web, 2007]phpMyVisites [maestros del web, 2007]BBClone [maestros del web, 2007]EstadisticasGratis [maestros del web, 2007]Weboscope [maestros del web, 2007]A continuación se explicarán algunos de dichos servicios:44 CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 45Google Analytics: Es un servicio de estadísticas para sitios web. Surge a raíz dela compra de la empresa Urchin (hasta entonces la mayor compañía de análisis estadís-tico de páginas web) de Google, y ofrece una gran variedad de funciones y ventajaspara cualquier tipo de usuarios, ya sean ejecutivos experimentados, profesionales delmarketing, publicidad, propietarios de sitios web, desarrolladores de contenidos, y web-masters; de las cuales podemos mencionar: [Analytics, 2009]Implementación rápida: Con sólo copiar el código de seguimiento de Google Ana-lytics en cada una de las páginas de su sitio web, el mismo se inicia de forma inmediata(ver �gura 6.1) [Analytics, 2009]. Figura 6.1: Implementación rápidaComparativa de campañas y palabras clave: Compare y supervise todos susanuncios, boletines informativos por correo electrónico, campañas de a�liados, referen-cias, vínculos de pago y palabras claves en Google y otros motores de búsqueda (ver�gura 6.2) [Analytics, 2009]. Figura 6.2: Comparativa de campañas y palabras clavesPaneles personalizados: No busque más en los informes. Coloque toda la infor-mación que necesita en un panel personalizado que podrá enviar a otros usuarios porcorreo electrónico (ver �gura 6.3) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 46 Figura 6.3: Paneles personalizados Integración con AdWords: Compre palabras clave de AdWords de Google y utiliceGoogle Analytics para averiguar cuáles son las más rentables para usted (ver �gura 6.4)[Analytics, 2009]. Figura 6.4: Integración con AdWordsBúsqueda interna en sitios:Descubra de que forma los usuarios realizan búsquedasen su sitio, qué buscan y dónde culminan dichas búsquedas (ver �gura 6.5) [Analytics, 2009]. Figura 6.5: Búsqueda interna en sitiosComparativas: Averigue si los indicadores de uso de su sitio son superiores o in-feriores a los de su sector. Las comparativas permiten equiparar sus indicadores clavescon indicadores de rendimiento global; además de respetar la con�dencialidad de susdatos (ver �gura 6.6) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 47 Figura 6.6: ComparativasBarra deslizante de tendencia y fecha: Compare diversas tendencias de su sitioweb por períodos de tiempo, y seleccione intervalos de fechas sin perder de vista lastendencias a largo plazo (ver �gura 6.7) [Analytics, 2009]. Figura 6.7: Barra deslizante de tendencia y fechaSeguimiento de comercio electrónico: Permite realizar un seguimiento de sustransacciones mediante el uso campañas y palabras claves; obtener cifras de laten-cia y �delización, así como el identiti�car sus fuentes de ingresos (ver �gura 6.8)[Analytics, 2009]. Figura 6.8: Seguimiento de comercio electrónicoVisualización de redireccionamiento:Averigue hacia dónde se dirigen sus clientespotenciales (ver �gura 6.9) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 48 Figura 6.9: Visualización de redireccionamientoSuperposición del sitio: Acceda a información sobre el trá�co y sobre las con-versiones de cada vínculo al visualizar su sitio (sin descarga previa) (ver �gura 6.10)[Analytics, 2009]. Figura 6.10: Superposición del sitioInformes por correo electrónico: Programe o envíe informes personalizados porcorreo electrónico que contengan exactamente la información que desee compartir (ver�gura 6.11) [Analytics, 2009]. Figura 6.11: Informes por correo electrónicoOrientación geográ�ca: Averigue la procedencia de los usuarios que visitan su sitioweb e identi�que los mercados geográ�cos más lucrativos (ver �gura 6.12) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 49 Figura 6.12: Orientación geográ�caTecnologías utilizadas: Código Javascript, que puede ser incluido en las páginasque se deseen analizar, y el cual permite cargar algunos archivos desde los servidores deGoogle para monitorizar y enviar información al servidor Google, que posteriormentees almacenada en la cuenta del usuario correspondiente [Analytics, 2009].Posee una interfaz de reportes grá�cos desarrollados en Adobe Flash.EstadisticasGratis: Es un servicio de estadísticas que le permite analizar en detallelas estadísticas de su página web (Análisis de trá�co, marketing, per�l de usuarios) alinstante y desde cualquier sitio [EstadisticasGratis, 2004b] .Entre las funcionalidades que posee podemos hacer énfasis en las siguientes: Figura 6.13: EstadisticasGratis - Tipos de ReportesDentro de las funcionalidades asociadas al Trá�co Horario [EstadisticasGratis, 2004d]podemos observar lo mostrado a continuación (ver �gura 6.14 y 6.15): CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 50 Figura 6.14: EstadisticasGratis - Páginas vistas por hora Figura 6.15: EstadisticasGratis - Visitas por hora CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 51Ahora visualizaremos lo que la opción Trá�co Diario [EstadisticasGratis, 2004c]ofrece (ver �gura 6.16 y 6.17): Figura 6.16: EstadisticasGratis - Páginas vistas por día Figura 6.17: EstadisticasGratis - Páginas visitadas por día CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 52Entre las funcionalidades contempladas en la opciónTrá�co Mensual [EstadisticasGratis, 2004c]podemos visualizar las mostradas en los grá�cos posteriores (ver �gura 6.18 y 6.19): Figura 6.18: EstadisticasGratis - Páginas visitadas por mes Figura 6.19: EstadisticasGratis - Páginas vistas por mes CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 53Haciendo click en la opciónCalidad del color de Per�les de Usuario, [EstadisticasGratis, 2004a]se puede observar lo siguiente (ver �gura 6.20): Figura 6.20: EstadisticasGratis - Calidad del Color Servicios pagosXiTi Web AnalyticsWeb-stat3DStatsA continuación se proporciona una breve explicación acerca del servicio 3DStats.3DStats es un portal web que ofrece un servicio para analizar patrones de trá�coy per�les de usuario en su sitio web, y visualizar información en tiempo real sin lanecesidad de instalar ningún software. [3DStats, 2004a]Permite realizar un seguimiento del número de visitantes, solicitudes y órdenes paracualquier campaña publicitaria en linea que usted dirija.Cada vez que un usuario accede a su sitio web, se recolecta información que seráutilizada para proveerle detalles estadísticos en tiempo real del mismo. Dicho código esfácil de añadir a la página web existente, sólo se trata de copiar y pegar código HTML,y el cual no afecta el rendimiento de la misma. 3DStats soporta SSL.Las estadísticas de su sitio web están disponibles en cualquier momento y son pro-tegidas por una contraseña ( la clave que 3DStats le proporciona).Si no tiene tiempo para instalar el código de 3DStats, en su sitio web, un experto en3DStats puede ayudarlo. El precio inicial por esto es de 69 dólares. [3DStats, 2004b] CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 54A continuación un ejemplo de lo que la herramienta ya mencionada ofrece (ver�guras 6.21, 6.22, 6.23, 6.24, 6.25, 6.26 y 6.27) [3DStats, 2004c]: Figura 6.21: 3dStats - Reporte general Figura 6.22: 3dStats - Búsqueda personalizada Figura 6.23: 3dStats - Reporte por visitas, número de páginas y visitantes CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 55 Figura 6.24: 3dStats - Reporte por Mejor día Figura 6.25: 3dStats - Evolución de visitas en el tiempo Figura 6.26: 3dStats - últimas 40 visitas CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 56 Figura 6.27: 3dStats - Reporte del día 6.1. Medidores estadísticosEn la presente sección se hará énfasis en algunos de los medidores empleados parala recolección de estadísticas en la Web, los cuales son enumerados a continuación:1. Trá�co web: corresponde a la recolección de la cantidad de visitas realizadas enuna página durante un período de tiempo especí�co, el cual puede ser clasi�cadoen meses, días, horas, etc [3DStats, 2004c].2. Tecnología de usuarios: se re�ere a la recolección de datos tales como: in-formación del sistema operativo del computador desde el cual una página esvisitada, software del navegador, calidad de color, resolución de pantalla, etc[3DStats, 2004c].3. Ubicación geográ�ca: hace referencia a la recolección de datos correspondientesal país de procedencia del visitante de una página, así como el idioma del mismo[3DStats, 2004c].4. Lugar de procedencia: constituye la recolección de datos haciendo referencia ala URL desde donde llegan las visitas a una página [3DStats, 2004c]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 576.2. Análisis de datos estadísticos en la WebEn esta sección se analizarán algunas causas del por qué muchos visores de estadís-ticas web arrojan resultados erróneos, así como el proporcionar elementos que permitandeterminar la �abilidad de un servicio de estadísticas web.La gran mayoría de servicios gratuitos de estadísticas de acceso web muestran unavisión distorsionada acerca de lo que realmente sucede en un sitio web. Sin embargoexiste la tecnología necesaria para realizar análisis de trá�co.No obstante, sólo suelen ser utilizadas por los servicios de estadísticas más costosos,por lo que muchos webmasters optan por los planes gratuitos, y quienes suelen con-tentarse con reportes y grá�cas que sólo re�ejan una parte de lo que en realidad estáocurriendo en su sitio web (en el mejor de los casos) ya que muchos servicios no reportancifras reales.6.2.1. Análisis de visitas de un sitio webLa mayoría de los sitios web están compuestos de varias páginas, y todas ellas tienenla posibilidad de recibir una visita sin necesidad de que el visitante ingrese en la páginade inicio. El tipo de visita directo (cuando el visitante ingresa en la página principalde la aplicación), tiende a incrementarse cuando las páginas han sido indexadas porbuscadores (que suelen mostrar subpáginas de diferentes sitios en los resultados de susbúsquedas). También es posible que desde otros sitios web existan enlaces hacia sub-páginas especí�cas de su sitio web, y ésta constituye otra fuente de visitas que no pasapor la página de inicio.Los sistemas de estadísticas que se basan en la inclusión de un botón en nuestrapágina de inicio sólo cuentan las visitas realizadas en la página principal, y por lo tantono proporcionan información de las actividades que se realizan en el resto de las páginasdel sitio web.6.2.2. Análisis de accesos o visitas a un sitio webEl acceso, es una apertura de página, no importa en qué condiciones: si se ingresaen un sitio web y se hace clic 9 veces en el botón �recargar� del navegador, esto genera10 accesos a la página (un acceso inicial al ingresar en la página, más 9 accesos quegenera recargándola). Posiblemente el webmaster vea el reporte y concluya: �Acaban deingresar diez personas�.La visita , se de�ne como la entrada de un usuario de forma individualizada a unapágina, independientemente de cuantas veces se abrió o recargó en el navegador. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 58Es muy común que una persona que visita un sitio web lo recorra abriendo variasveces determinadas páginas (para volver a acceder a un menú, o una lista de enlaces,por ejemplo).Cuando se maneja el concepto de �visita�, también debe manejarse el concepto detimeout de visita.El timeout de visita , es el tiempo de inactividad que debe transcurrir para que seconsidere que una visita ha concluído. Dicho timeout puede ser establecido por el web-master. Una vez transcurrido este tiempo de inactividad, si el visitante vuelve a abrirla página, esto se considera como una nueva visita. En �n, es posible que un usuarionos visite varias veces al día.Sólo se debe tener la precaución de determinar mediante el timeout si una nuevaapertura de página es parte de una visita en curso, o en cambio el usuario abandonala página, y después regresa generando una nueva visita. Para terminar de ilustrar elconcepto: imaginemos la situación que se generaría en una máquina instalada en uncibercafé, desde donde un usuario visitó nuestra página. Si al cabo de un rato esa mis-ma máquina es ocupada por un nuevo usuario que también abre nuestra página, no hayninguna razón para dejar de contabilizarlo como visita.6.2.3. Clientes detrás de proxys y routers NATUn servidor proxy es un dispositivo que permite acelerar la conexión a Internet desus clientes (las computadoras que están con�guradas para navegar haciendo uso desus servicios). El servidor proxy guarda en la memoria caché las páginas Web a las queacceden los sistemas clientes de la red durante un cierto tiempo.Cuando un sistema solicita la misma página web, el servidor proxy utiliza la informa-ción guardada en la memoria caché en lugar de recuperarla del proveedor de contenidos.De esta forma, se accede con más rapidez a las páginas Web. Adicionalmente consti-tuyen un mecanismo de seguridad implementado por los administradores de la red enun entorno de Intranet para desactivar el acceso o �ltrar las solicitudes de contenidopara ciertas sedes Web consideradas ofensivas o dañinas para la red y los usuarios.Por ejemplo: en una escuela un proxy permite que el administrador bloquee el accesoa páginas para adultos, logrando al mismo tiempo una gran calidad de navegación apesar de poseer una línea de baja velocidad para atender decenas de computadores enel aula de informática.El problema radica en que todas las peticiones a Internet parecen salir de unaúnica máquina (el proxy), que esconde la actividad individual de las máquinas que seencuentran detrás. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 59A su vez existen dos tipos de proxy:Los normales: este tipo de proxy añade en la cabecera HTTP información desu condición de proxy y qué máquina está llevando a cabo el acceso.Los anónimos: este tipo de proxy esconde a Internet su condición de proxy.Por otra parte, el NAT (Network Address Translation) es implementado medianterouters (complejos dispositivos encaminadores, que constituyen el soporte de las co-municaciones en Internet) y es una técnica que permite a un proveedor de acceso aInternet lograr que una gran cantidad de clientes naveguen usando una misma direc-ción IP (Internet Protocol). Para las empresas que cuentan con pocas direcciones IP esuna solución ideal: las direcciones IP son un recurso cada vez más escaso, por lo que latécnica NAT se usa cada vez más. Existen pequeñas ciudades y poblaciones enteras quese conectan a Internet mediante un NAT con�gurado por su compañía de telecomuni-caciones, usando unas pocas direcciones IP para la conexión de miles de clientes. Desdeel punto de vista de un sistema de estadísticas, todas esas máquinas son en realidadvistas como si se tratara de un solo cliente (lo que le lleva a tener reportes de trá�cocompletamente alejados de la realidad).Existe una tecnología capaz de individualizar los clientes que nos visitan desde atrásde un NAT o un proxy anónimo: el �client footprint�, que consiste en el análisis de unpaquete de características particulares de su máquina (la �huella� de la máquina), y quele permite saber qué máquinas distintas están generando actividad en su sitio web apesar de venir desde una misma IP. Esta técnica es usada por muy pocos sistemas deestadísticas web.6.2.4. Visitas desde .COM .NET .EDU y .ORGEn los reportes sobre el origen geográ�co de las visitas puede observar cuántos ac-cesos ha tenido desde España, México, Argentina, etc. Pero posiblemente verá entre lospaíses, que lo han visitado desde �EEUU Comercial (.com)�, o desde �.net y .org�.Di�cilmente las visitas que dicen ser de �EEUU Comercial(.com)� realmente proven-gan de Estados Unidos, ya que el dominio COM puede estar asociado a una máquinaen cualquier lugar del mundo. Lo mismo para NET, EDU y ORG.Entonces ¾por qué el sistema de estadísticas no le proporciona el lugar geográ�co realde la visita, en lugar de decirle que es desde una red COM?. Porque se está utilizandouna tecnología fácil pero inapropiada: la resolución DNS reversa.En la resolución DNS reversa, cuando llega una visita a un sitio web, se obtendrála IP de la máquina que realizó la petición (ejemplo: 200.96.85.14). Entonces el sistemade estadísticas hace una búsqueda DNS reversa para esa IP, con el �n de obtener el CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 60nombre de la máquina.Un método serio para determinar la situación geográ�ca de una dirección IP esmediante una base de datos de direcciones IP repartidas por países. Es el métodoque usan tecnologías tales como GeoIP (http://www.maxmind.com), o directorios deinternet como ip-to-country (http://ip-to-country.webhosting.info/) entre otros.6.2.5. Análisis de logsOtra herramienta para obtener datos estadísticos en los sitios web, es el análisis delogs del servidor web.Hoy en día, existen programas que analizan los archivos de registro de actividadgenerados por el propio servidor. Estos registros son sin duda la fuente de informaciónmás �el acerca de qué es lo que ocurre en un sitio web. Pero su uso resulta engorroso, y lainformación que se obtiene es incompleta, por ejemplo, no se especi�can las capacidadesdel navegador en cuanto a extensiones, y no pueden identi�car clientes detrás de proxyso NATs. Parte IIMarco Aplicativo 61 Capítulo 7Marco Aplicativo En el siguiente capítulo se describen los aspectos más importantes del proceso dedesarrollo Programación Extrema(XP) y la adaptación del proceso de implementación,para el desarrollo de la herramienta que se desea construir.7.1. Adaptación del proceso de desarrollo XPeXtremme Programming (XP)[xprogramming, 2001] es un proceso de desarrollo ágilbasado en la simplicidad del software, la comunicación directa entre los integrantes in-volucrados en el proceso, el seguimiento del desarrollo y la reutilización de código, noenfocandose en la documentación, sino en los requerimientos comunicados por el cliente.El proceso de desarrollo XP está basado en iteraciones que permiten ir desarrollan-do entregables del sistema hasta obtener el producto �nal. Inicialmente se realiza unanálisis de requerimientos y durante el resto del proceso de desarrollo se mantiene unaretroalimentación progresiva entre los actores involucrados con la �nalidad de monitore-ar el progreso del desarrollo de la aplicación, detectar cambios y realizar las correccionespertinentes; que los desarrolladores involucrados incrementen sus habilidades, y el ag-ilizar los procesos de construcción del software deseado. Durante el desarrollo de lapresente herramienta, las iteraciones estan basadas en lapsos de tiempo de cada par desemanas. A �n de no extender el presente documento cada iteración es agrupada enlapsos de 4 semanas.7.2. Actores y responsabilidadesExisten diferentes actores y responsabilidades en XP para diferentes actividadesy propósitos durante el proceso. Para el presente trabajo especial de grado los rolesexistentes son: 62 CAPÍTULO 7. MARCO APLICATIVO 63a)Programador: quien es el responsable de las decisiones técnicas y de construirel sistema teniendo como labores: Analizar, diseñar, implementar y realizar laspruebas del sistema ya mencionado.b)Cliente: quien es parte del equipo, y determina qué construir y cuando, elabo-ra pruebas funcionales para determinar cuando esta completo un requerimientodeterminado o no.En el cuadro 7.1 se muestran las personas encargadas para cada rol.Roles existentes durante el desarrolloRol NombreProgramador Br. Angel GilProgramador Br. José SanchezCliente Prof. Sergio RivasCuadro 7.1: Roles existentes durante el desarrollo 7.3. Metáfora del sistemaEs un lenguaje que se utiliza para describir la arquitectura de una aplicación, conla �nalidad de ayudar a facilitar la comunicación entre los desarrolladores y el cliente.A continuación se describen los módulos principales que conforman el software adesarrollar:7.3.1. Aplicación Clientea) Módulo Visor de estadísticas Web, creado para visualizar las diversas op-ciones de con�guración del visor de estadísticas web, e información acerca de losautores de la aplicación. Dicho módulo puede ser desplegado mediante el uso delclick derecho del mouse, o a través de la barra de herramientas del navegador, omediante el panel de extensiones que provee el navegador Mozilla Firefox.b) Módulo Parseo de datos, se encarga de obtener información básica acercade cada uno de los proyectos existentes en el servidor de la aplicación, y queposteriormente son cargados en la interfaz de opciones del visor de estadisticasweb.c) Módulo Recolección de estadisticas, analiza el comportamiento del usuarioen la web, mediante diversos parámetros ya establecidos en el servidor de la apli-cación. CAPÍTULO 7. MARCO APLICATIVO 64d) Módulo Envío de datos Encargado de enviar la información obtenida acercadel comportamiento del usuario en la web al servidor de la aplicación.7.3.2. Aplicación Servidora)Módulo Capa de acceso a datos: encargada de permitir un acceso transpa-rente a las capas superiores y a la fuente de datos del sistema, en nuestro casola base de datos (BD) desplegada en el Sistema Manejador de Base de Datos(SMBD) MySQL. Dicha capa esta conformada de los siguientes submódulos:� a.1) Submódulo Acceso/Gestión de entidades: es el conjunto de objetosque conforman las entidades de persistencia y permiten realizar las opera-ciones CRUD en las respectivas entidades de la BD. Lo anterior se implemen-ta empleando el patrón DAO y fáricas de objetos propuesta por Hibernate[Gavin king, 2009].� a.2) Submódulo Interfaz de conexión con BD: constituye el grupo deobjetos que permiten lograr una conexión transparente con la base de datos,esto se logra utilizando las tecnologías JPA y Hibernate.b)Módulo Capa de procesamiento de datos: encargada de permitir la car-ga/almacenamiento de estadísticas y de generar los objetos correpondientes paracada uno de los reportes del sistema. Se encuentra conformado por los sub-módulosespeci�cados a continuación:� b.1) Submódulo Carga de estadísticas: conformado por un conjunto deobjetos que permiten leer y validar los documentos XMLs con los datosestadísticos enviados por las extensiones clientes, a través de la tecnología decarga/validación y mapeo de datos XMLs a objetos de JAXB [Oracle, 2010].Por otra parte, dichos datos son cargados en las entidades de la BD pormedio de la capa de acceso a datos.� b.2) Submódulo Generación de reportes: constituido por clases de utili-dades, fábricas y pool de objetos que de�nen los diversos reportes que puedenser generados en el sistema. A través de las entidades mencionadas anterior-mente, se permite la generación de los datos de los reportes, utilizando elframework de colecciones (listas) de Java, permitiendo de esta manera quela capa web pueda utilizar el presente módulo para generar la presentaciónde los reportes por medio de ampliaciones a través del patrón Decorator[Erich Gamma, 1994].c)MóduloCapa de presentación y despliegue de servicios web: conformadopor los siguientes sub-módulos: CAPÍTULO 7. MARCO APLICATIVO 65� c.1) Submódulo Interfaz Grá�ca de Usuario Web: representa las clasesy objetos que de�nen las páginas visualizadas en el sistema y el conjuntode controladores y modelos de presentación de las diversas secciones para lagestión de los proyectos, sesiones de proyectos y visualización de los reportesestadísticos. Lo anteriormente expuesto es contruido utilizando el frameworkJavaServer Faces (JSF) [Chris Chalk, 2007].Adicionalmente diversos componentes del presente módulo emplean la libre-ría de componentes para JSF denominada PrimeFaces [PrimeFaces, 2009].� c.2) Submódulo Despliegue de servicios web REST: conformado porun conjunto de clases que representan los recursos (por implementación deservicios web REST) [Fielding, 2000] de�nidos en el sistema y conformar lainterfaz de comunicación entre la extensión cliente y el sistema servidor. Elconjunto de recursos es implementan a través de la tecnología de desplieguede servicios web REST, JAX-RS [Oracle, 2010].� c.3) Módulo Presentación de reportes: permite la generación y desplieguede los reportes de�nidos en la capa de procesamiento utilizando ampliacionesa dichos componentes a través del patrón de diseño de software Decorator[Erich Gamma, 1994]. Cabe destacar, que los componentes grá�cos de los re-portes emplean la librería OpenFlashChart 2 (OFC2) y una implementaciónajustada a dicho sistema del API de Java para OFC2 denominado JOFC2.En adición a lo anterior, la visualización de los grá�cos del lado del nave-gador se logra a través de la implementación de un componente para JSFgracias a su gran capacidad de extensión.� c.4) MóduloGeneración de bitácora: debido a la utilización de la metodo-logía XP y la realización de las pruebas al �nal de cada iteración, se incluyeel framework log4j [Apache Software, 2010] para la generación de mensajestipo log acerca de las actividades en el sistema e inclusive para las unidadesde pruebas asociadas a cada componente existente en las capas de proce-samiento y acceso a datos. Las unidades de pruebas utilizan la tecnologíaJUnit para pruebas unitarias de las clases y un conjunto de clases.A continuación se detalla la interacción de cada uno de los módulos de la aplicación: CAPÍTULO 7. MARCO APLICATIVO 66 Figura 7.1: Interacción - Módulos de la Aplicación 7.4. Adaptación de las actividades XPLa aplicación de las actividades XP busca lograr el éxito en la comunicación con elcliente y la agilidad en el proceso de desarrollo.Se describen cuatro actividades fundamentales durante las iteraciones, y las mismasson adaptadas como se describe a continuación:a)Objetivo: Se de�ne de forma general los requerimientos que se esperan cumpliren una iteración determinada. Dicha actividad no pertenece al método XP perose considera necesaria para el desarrollo de las iteraciones.b)Plani�cación: Se identi�can las actividades realizadas para alcanzar el obje-tivo descrito.d)Desarrollo: Se identi�can y proponen soluciones para llevar a cabo una deter-minada actividad, mediante el diseño de la solución y la elaboración de diagramas;aunado a esto, se realiza la implementación de las actividades propuestas en laplani�cación.e)Pruebas: Constituyen un conjunto de test de aceptación, en donde el usuarioo cliente pone a prueba la solución desarrollada, y veri�ca que los requerimientosplanteados han sido desarrollados correctamente. CAPÍTULO 7. MARCO APLICATIVO 67Existe la posibilidad de que en algunas iteraciones no se contemplen todas lasactividades descritas anteriormente. Lo antes expuesto esta condicionado a losrequerimientos a desarrollar en cada iteración.7.4.1. Estrategia de desarrolloCada iteración se realiza en un lapso estimado de 2 semanas y por cada 3 iteracionesse realiza una presentación al cliente para su aceptación. Cabe destacar, que a objeto deno hacer muy extenso el presente documento, cada iteración representa 4 semanas detrabajo, y en cada una de estas se resaltan los aspectos más importantes del desarrollo,por el motivo mencionado anteriormente.El esquema de trabajo se estructura como se plantea a continuación:7.4.2. Iteración 0Objetivo: Analizar y diseñar el modelo de datos del sistema en general así comoel proceso de interacción entre la aplicación cliente y la aplicación servidor.Plani�cación:1. Análisis y diseño de la aplicación cliente y servidor respectivamente.2. De�nición de la lógica de interacción entre la aplicación cliente y la aplicaciónservidor.3. Determinación de las tecnologías a utilizar en el lado del cliente y el lado delservidor, así como de las herramientas de desarrollo necesarias para construirla solución planteada.4. Investigación acerca de como crear una extensión para el navegador MozillaFirefox.5. Creación de ejemplos de interfaces de usuario en XUL ( XML User Interface).6. Creación de una extensión para el navegador Mozilla Firefox.7. Creación de la capa de persistencia para el modelo de datos de la aplicaciónutilizando la tecnología JPA(Java Persistence API).8. Creación de fábricas de objetos utilizando el Patron Abstract Factory. CAPÍTULO 7. MARCO APLICATIVO 68Desarrollo: En la �gura 7.2, se muestra la primera versión del Diagrama declases de la aplicación servidor. Figura 7.2: Diagrama de Clases de la aplicación Servidor - versión inicialPruebas: A los componentes de base de datos construidos utilizando la libreríaJPA se le de�nen y ejecutan casos de pruebas unitarios y de interacción contra labase de datos cargada en MySQL, por lo cual se obtiene un error especí�camenteen la clase DAOEstadisticaVisitaJPA, realizando las correcciones pertinentes yobteniendo luego resultados exitosos en todos los casos de pruebas.7.4.3. Iteración 1Objetivo:Crear el modelo inicial de las interfaces grá�cas de usuario para la extensiónde Mozilla Firefox e implementar los manejadores de datos de las entidades deproyectos y estadísticas del modelo de datos.Plani�cación:1. Creación de la interfaces: opcionesVisor.xul e infoOpcionesVisor.xul.2. Creación de las clases encargadas de manejar la información referente a losproyectos.3. Creación de una utilidad para el manejo de las preferencias de los proyectosy estadísticas. CAPÍTULO 7. MARCO APLICATIVO 694. Creación y actualización de DAOs (Data Access Object) para poder realizarlas operaciones CRUD(Create-Read-Update-Delete) sobre las entidades dela base de datos.Desarrollo: En la �gura 7.3 se puede visualizar el método encargado de cargarla lista de proyectos en el sistema. Figura 7.3: Método encargado de cargar la lista de proyectos en el sistemaPruebas: Al igual que en la iteración anterior se ejecutan los casos de pruebasunitarios utilizando JUnit en los DAOs de proyectos y estadísticas, logrando en-contrar un error en el identi�cador de la clase EstadisticaCampo. Adicionalmentese ejecutan pruebas de interacción de usuario con las interfaces grá�cas en XULde la extensión obteniendo resultados exitosos.7.4.4. Iteración 2Objetivo:Analizar e implementar el primer conjunto de estadísticas recolectadas por laaplicación cliente tales como información general del computador, datos de clics,desplazamiento en las páginas, visualización en pantalla completa, y la creación delos documentos XML que se intercambiarán entre las aplicaciones involucradas.Plani�cación:1. Investigación y desarrollo de la funcionalidad Número de visitas, Cantidadde acceso, Número de clics, Ubicación de los clics, Pantalla Completa, In-formación Cliente, Desplazamiento horizontal y Desplazamiento vertical, ySubmit. CAPÍTULO 7. MARCO APLICATIVO 702. Creación de algunas de las clases generadoras del documento XML y de lacon�guración de todos los proyectos habilitados a existir en la aplicación.3. Creación de una utilidad general con métodos de ayuda para el documentoXML.4. Actualización de la clase GeneradorXMLProyecto para generar el XML conla con�guración completa de los proyectos de estadísticas. En este puntola clase se encuentra en una fase de pruebas ya que su desarrollo está por�nalizar.Desarrollo: En la �gura 7.4, se puede visualizar la implementación del métodopantalla completa. En la �gura 7.5, puede apreciarse la implementación de lasfuncionalidades: Versión del Navegador y Dirección IP. Figura 7.4: Funcionalidad Pantalla Completa01 CAPÍTULO 7. MARCO APLICATIVO 71 Figura 7.5: Funcionalidades - Versión del Navegador , Dirección IPPruebas: Los casos de pruebas en la presente iteración se realizan comparandolos datos estadísticos generados por la aplicación cliente con respecto a la informa-ción del computador, contra los datos reales del computador donde se encuentrainstalada la extensión. Cabe destacar que se obtiene una falla relacionada con lafunción encargada de obtener la versión del navegador. Dicha falla es corregidapara dar �n a las pruebas de esta iteración. CAPÍTULO 7. MARCO APLICATIVO 727.4.5. Iteración 3Objetivo: Analizar e implementar el segundo conjunto de estadísticas capturadaspor la extensión cliente asociadas con los tiempos de cargas de las páginas web,los tiempos de interacción del usuario y el desarrollar los componentes encargadosde almacenar los datos enviados en formato XML por el cliente al servidor.Plani�cación:1. Investigar y desarrollar la funcionalidad Tiempo de Carga de una página.2. Investigar y desarrollar la funcionalidad Tiempo de Uso de una página; esdecir el tiempo de actividad e inactividad de un usuario en una página Web.3. Actualización de la clase de utilidad para el manejo de documentos XML:XMLUtil.4. Desarrollo del método encargado de la generación del archivo XML que con-tiene la con�guración de todos los proyectos habilitados en el sistema; en laclase ManejadorXML.5. Desarrollo del método para la carga de los datos estadísticos contenidosen un documento XML en las entidades de la base de datos, en la claseManejadorXML.6. Veri�cación y validación de datos contenidos en el documento XML; y cargaexitosa de los mismos a la base de datos. Aunado a esto, se realizan valida-ciones acerca del ingreso de datos no correctos objetivamente.7. Finalización de la validación objetiva de datos estadísticos contenidos en eldocumento XML; y �nalización de la carga de datos a las diversas entidadesde la base de datos.8. Creación de la clase ManejadorFabricasDAO; encargada del manejo e instan-ciación de las fábricas de DAOs, asociándolas a diversos hilos de ejecución.9. Actualización de las fábricas de DAOs, FabricaDAO y FabricaDAOJPA, aobjeto de añadir métodos para el manejo de transacciones; y de cierre de lafábrica.10. Ajustes sobre el archivo de con�guración de persistencia persistence.xml paratrabajar bajo un ambiente JTA.11. Ajustes sobre la fábrica general FabricaDAO para la inclusión de la transac-ción JTA (manejada por el servidor web).Desarrollo: En la �gura 7.6, se visualiza la manera en que es calculado el tiempoque tarda una página web en cargarse. Cabe destacar que el valor retornado esen milisegundos. CAPÍTULO 7. MARCO APLICATIVO 73 Figura 7.6: Funcionalidad - Tiempo de Carga de una páginaPruebas: El conjunto de pruebas de esta iteración se divide en dos secciones:cliente y servidor.En el lado del cliente, las pruebas se realizan con ayuda de la extensión HttpFox,midiendo los tiempos de cargas generados por la extensión cliente y comparán-dolos con los tiempos de cargas generados por la extensión HttpFox, los cualesfueron iguales con un margen de error de menos del 0.5%.Respecto a la aplicación servidor las pruebas se ejecutan enviando datos de unarchivo XML local bien de�nido (en total se arman 21 XMLs de prueba) y com-parando estos datos con los almacenados por el sistema en la base de datos.Posteriormente se obtienen problemas de validación de data del XML al momentode ser almacenado, procediendo a su corrección y �nalizando las pruebas de laiteración. CAPÍTULO 7. MARCO APLICATIVO 747.4.6. Iteración 4Objetivo:Terminar la implementación de la captura de estadísticas de información delusuario por parte de la extensión del navegador Mozilla Firefox así como diseñary desarrollar las interfaces grá�cas de usuario de inicio de sesión en la aplicaciónWeb.Plani�cación:1. Culminación del desarrollo de la funcionalidad País de procedencia del usuario.2. Implementación de la funcionalidad Cantidad de Colores de la Pantalla deComputador.3. Implementación de la funcionalidad Dirección IP del usuario.4. Creación de la páginas de inicio de sesión, registro de usuarios, AdministrarProyectos y Creación de proyectos en Java Server Faces 1.2.Desarrollo:: En la �gura 7.7 se pueden apreciar los componentes utilizados paraobtener la dirección IP del usuario, tales como: Resolución DNS, y la utilizacióndel servicio dns-service de Mozilla. Figura 7.7: Funcionalidad - Dirección IP del Usuario Pruebas: Los casos de pruebas se ejecutan construyendo primero las clases querealizan las veri�caciones utilizando la librería JUnit, que validan la correcta in-formación de autenticación del usuario por el componente de inicio de sesión. Al�nalizar el proceso de pruebas se obtienen resultados satisfactorios. CAPÍTULO 7. MARCO APLICATIVO 757.4.7. Iteración 5Objetivo: Diseñar e implementar las interfaces grá�cas de usuario para la apli-cación asociadas a la gestión de proyectos de estadísticas y �nalizar la construcciónde las interfaces grá�cas para las opciones de con�guración de la aplicación cliente.Plani�cación:1. Investigación y desarrollo de componentes de tipo Groupbox, PreferedPaney tabpanel de XUL.2. Inclusión de los métodos de habilitación y deshabilitación de los proyectosde estadísticas.3. Inclusión de los métodos de activación y desactivación de las sesiones de losproyectos de estadísticas.4. Realización de las pruebas correspondientes a los nuevos métodos.5. Ajustes en la página de creación y visualización de los detalles de cada unode los proyectos, aunado a la creación de clases java para la habilitación ydeshabilitación de proyectos.Desarrollo: En la �gura 7.8 se proporciona un ejemplo de uno de los componentestipo XUL, utilizados para la creación de las interfaces de usuario de la aplicacióncliente. Figura 7.8: Componente tipo groupbox Pruebas: Los casos de pruebas se construyen en base a la ejecución de �ujosde procesos para la creación de proyectos de estadísticas, comparando los datosingresados como entrada en la aplicación web con la información almacenadosen la base de datos, es decir, se ejecutan pruebas basadas en el estado �nal delsistema. Adicionalmente se implementan las clases para los casos de pruebas em-pleando JUnit. Luego de la ejecución de las pruebas se realizan cambios en los CAPÍTULO 7. MARCO APLICATIVO 76componentes de validación de datos de entrada y �naliza la fase de pruebas deesta iteración.7.4.8. Iteración 6Objetivo: Analizar y desarrollar el tercer conjunto de estadísticas recolectadaspor la extensión cliente relacionadas con el uso de los botones de navegacióndel navegador Mozilla Firefox e integrar los menús de acceso a las opciones decon�guración con el navegador.Plani�cación:1. Implementación y realización de pruebas de las funcionalidades de uso decomando del navegador: Atrás, Siguiente, Actualizar y Detener.2. Actualización visual de las diversas páginas de la aplicación Web para man-tener un patrón en el diseño de las mencionadas.3. Incorporación de los mensajes de con�rmación al eliminar elementos en lastablas de lista de proyectos y lista de sesiones de proyectos.Desarrollo: En la �gura 7.9 se muestra la invocación de los métodos Atrás,Adelante, Parar y Siguiente, encargados de contabilizar la cantidad de veces quela funcionalidad correspondiente es invocada. Figura 7.9: Funcionalidad - Atras - Adelante - Parar - Siguiente CAPÍTULO 7. MARCO APLICATIVO 77 Figura 7.10: Funcionalidad - Atras - Adelante - Parar - Siguiente02Pruebas: Para esta iteración las pruebas consisten en de�nir el �ujo de activaciónde los botones de navegación del navegador y comparar las estadísticas generadascon las reales de�nidas en el �ujo. Al generar los resultados de los casos de pruebasse observan errores en la captura debido a que se capturaban usos con el ratón,mas no el uso de métodos abreviados por teclado. Posteriormente se realizan lascorrecciones para dar �n a las actividades de prueba de forma exitosamente.7.4.9. Iteración 7Objetivo: Diseñar e implementar la comunicación realizada entre la aplicacióncliente y la aplicación servidor.Plani�cación:1. Investigación acerca de la creación de servicios Web en JavaScript.2. Desarrollo de servicios Web REST en JavaScript, tales como:� Obtener información completa acerca de los proyectos de estadísticasque se encuentran habilitados.� Obtener información acerca de si un proyecto de estadísticas en especí�coestá activo o no.� Obtener un nuevo ID de estadística de visita.� Cargar la infomación obtenida acerca de una estadística de visita.3. Pruebas sobre los servicios Web creados.4. Incorporación de las librerías y con�guración de las mencionadas para la ac-tivación de los servicios Web REST implementados con JAX-RS. Se modi�cael archivo web.xml y se incorpora un Servlet para el manejo de los serviciosweb JAX-RS. CAPÍTULO 7. MARCO APLICATIVO 785. Inclusión de las librerías de JAX-RS 1.0 y modi�cación de la librería deHibernate debido a inconsistencias de la misma con la librería de JAX-RS.6. Creación de clases que funcionan como recursos para los servicios Web REST:ProyectosResource, ProyectoResource, EstadisticasResource, EstadisticaRe-source. Se crea un único recurso principal (ProyectosResource) y el restoconstituyen sub-recursos localizados a través de parámetros en el URL.Desarrollo: En las �guras 7.11, 7.12 y 7.13, se muestra la invocación e imple-mentación de la obtención de cada uno de proyectos que han sido creados en laaplicación servidor. Figura 7.11: Método encargado de obtener los proyectos creados en la aplicación servidor Figura 7.12: Clase encargada de obtener los proyectos creados en el servidor CAPÍTULO 7. MARCO APLICATIVO 79 Figura 7.13: Método encargado de realizar la petición de los proyectos existentes en laaplicación servidor Pruebas: En la presente iteración los casos de pruebas se distribuyen en dosvertientes: pruebas de los servicios web REST y pruebas de los servicios invocadospor la extensión.Para los servicios web REST se crean clientes simulados que invocan a los serviciosde�nidos en el servidor y posteriormente se compara el resultado obtenido con elesperado, lo cual signi�ca que se realizan pruebas en base al estado �nal. Cabedestacar que dichas pruebas culminaron exitosamente.Por parte del cliente, las pruebas se realizan invocando a los servicios residentesen el servidor y comparando la respuesta obtenida por el cliente con la enviadapor el servidor. Cabe destacar que las fallas encontradas se producen debido almanejo erróneo de casos de excepción al realizar la invocación de los servicios, lascuales fueron corregidas concluyendo las pruebas.7.4.10. Iteración 8Objetivo: Investigar e implementar el cuarto conjunto de estadísticas capturadaspor la extensión para el navegador Mozilla Firefox, asociadas a los tiempos decarga de los recursos de las páginas web; además diseñar y desarrollar la faseinicial para la gestión de las estadísticas en la aplicación web.Plani�cación:1. Investigación acerca de como implementar la funcionalidad Tiempo de Cargapor Recurso.2. Revisión del código fuente de la extensión Firebug a objeto de determinarsu funcionamiento, para posteriormente localizar la implementación de lafuncionalidad comentada.3. Realización de pruebas acerca de la funcionalidad mencionada.4. Creación de la página inicial de administración de estadísticas (inicio.jspx).5. Creación de la página de selección del proyecto para visualizar las estadísticas(proyecto.jspx).6. Creación de la página de selección de sesión de proyecto, para visualizar lasestadísticas (sesion.jspx). CAPÍTULO 7. MARCO APLICATIVO 807. Creación básica de la página principal de visualización de las estadísticas deun proyecto y sesiones seleccionadas (datos.jspx).8. Ajuste del archivo menu.jpsf incluyendo la navegación a la página de admin-istración de estadísticas.Desarrollo: En las �guras 7.14 y 7.15, se visualiza la implementación de lostiempos de carga por recurso de una página Web. Figura 7.14: Implementación funcionalidad - Tiempo de Carga por recurso CAPÍTULO 7. MARCO APLICATIVO 81 Figura 7.15: Continuación funcionalidad Tiempo de Carga por recursoPruebas: Las pruebas realizadas en esta iteración se enfocan principalmente enla captura de estadísticas de tiempos de cargas de recursos. Al igual como sedescribe en la iteración 3, estas se realizan con ayuda de la extensión HttpFox, eneste caso en lugar de comparar los tiempos de cargas de las páginas se comparanlos tiempos de cargas de sus recursos. Las páginas utilizadas para estas pruebas sonla página de inicio de sesión y la página del menú principal del sistema CONESTEstudiantes. Cabe destacar que el resultado de estas pruebas es exitoso. CAPÍTULO 7. MARCO APLICATIVO 827.4.11. Iteración 9Objetivo: Diseñar y desarrollar el proceso inicial para la visualización de losreportes estadísticos en la capa de aplicación del servidor y analizar e implementarel quinto conjunto de estadísticas recolectadas por la aplicación cliente asociadasal uso de funcionalidades del navegador y captura de códigos de error de solicitudesHTTP.Plani�cación:1. Implementación de las funcionalidades Búsqueda de Texto, Tamaño de Vistay Errores HTTP.2. Realización de pruebas sobre las funcionalidades descritas anteriormente.3. Extensión de la librería de Open�ash Chart 2, incluyendo la capacidad devisualizar grá�cos en forma de imágen, para posteriormente ser incluída enla aplicación Web.Desarrollo: En las �guras 7.16 y 7.17 se muestra el código fuente de la funcio-nalidad Búsqueda. Figura 7.16: Implementación funcionalidad - Búsqueda CAPÍTULO 7. MARCO APLICATIVO 83 Figura 7.17: Continuación - Implementación funcionalidad - Búsqueda01Pruebas: En esta iteración los casos de pruebas se basan exclusivamente en lasestadísticas de usos de funciones del navegador para lo cual se de�nen casos paralas funciones de tamaño de vista, búsqueda de texto y capturas de errores HTTP.Para las dos primeras se de�nen casos de pruebas en base al estado �nal, es decir,se interactúa de manera prede�nida con la extensión y al �nal se valida que hayagenerado las estadísticas correctas. Para el último caso, se crea una página deprueba con errores de enlaces y de recursos preestablecidos y se prueba la exten-sión con la página creada, validando al �nal que haya generado las estadísticascorrectas.Al ejecutar las pruebas se hallan errores en la función de captura de búsqueda detexto, ya que el navegador busca el texto a medida que el usuario escribe en elcuadro de búsqueda, por lo tanto se realiza la corrección en la manera como laextensión captura la cadena buscada.7.4.12. Iteración 10Objetivo: Agregar capacidad de �ltrado en la interfaz grá�ca de usuario web paralos reportes estadísticos e implementar el sexto conjunto de estadísticas recolec-tadas por el cliente con respecto al uso de los enlaces de las páginas web.Plani�cación:1. Investigación y realización de pruebas de las funcionalidades: Uso Funciona-lidad, Forma Uso Funcionalidad, y Desplazamiento funcionalidad. CAPÍTULO 7. MARCO APLICATIVO 842. De�nición del esquema general de la página.3. Agregación de campos de �ltros de fecha y hora al backing bean de la página.4. Agregación de estilos adicionales en general.css que actuan sobre el esque-ma de la página.5. Ajustes a la página datos.jspx.6. Incorporación de cadenas de I18N en FireWeb.properties y en FireWebMsg.properties.7. Ajuste en el Backing Bean EstadisticasBean mediante la incorporación demétodos para aplicar y quitar �ltros, cambiar el proyecto y las sesiones.8. Ajuste del bean básico AbstractBean mediante la incorporación de la cadenade navegación por defecto hacia atrás.Desarrollo:En la �gura 7.18 se muestra el código fuente de la funcionalidad Uso Funcionali-dad. Figura 7.18: Implementación funcionalidad - Uso Funcionalidad Pruebas: Los casos de pruebas en esta iteración se enfocan en las funcionalidadesde la aplicación cliente, tal como se ha venido implementando las pruebas del ladodel cliente en las iteraciones anteriores, estos casos se basan en el estado �nal de CAPÍTULO 7. MARCO APLICATIVO 85la captura de estadísticas. Para este caso se emplea la página del menú principaldel sistema CONEST Estudiantes como ámbito de captura de estadísticas de laextensión y de manera establecida se activan los enlaces de la página, que al �nalde la captura, la extensión genera las estadísticas de usos de enlaces los cualesse comparan con los usos reales realizados y se arrojan los resultados que sontotalmente exitosos.7.4.13. Iteración 11Objetivo: Analizar e implementar el séptimo conjunto de estadísticas capturadaspor la extensión de Mozilla Firefox relacionadas con los tiempos de llenado de losformularios, y desarrollar los componentes para la generación de los datos de losreportes estadísticos.Plani�cación:1. Investigación y realización de pruebas de la funcionalidad Llenado del for-mulario.2. Creación de la interfaz pública Filtro, utilizada por el cliente (capa de pre-sentación), para establecer restricciones de datos a los resportes.3. Creación de la interfaz privada FiltroAplicable, utilizada por la capa delnúcleo para aplicar los �ltros a los reportes.4. Creación del �ltro general denominado FiltroGenerico, como base para losdiversos �ltros asociados los reportes.5. Creación de la fábrica (FabricaFiltro), para la obtención de �ltros prefabri-cados y de�nidos por la capa de núcleo que pueden ser utilizados por losclientes.6. Creación de la interfaz pública Filtrable, para permitir que a un componentese le puedan agregar o establecer �ltros. Dicha interfaz es implementada porlos reportes a objeto de que los mencionados puedan ser �ltrados.7. Creación de las clases de pruebas de JUnit para: FiltroGenerico y FabricaFil-tro.Desarrollo: En las �guras 7.19 y 7.20, se muestra la implementación del Tiempode llenado de un formulario. CAPÍTULO 7. MARCO APLICATIVO 86 Figura 7.19: Implementación funcionalidad - Tiempo de llenado de un formulario 01 Figura 7.20: Continuación funcionalidad - Tiempo de Llenado de un formulario 02 Pruebas: Para esta iteración los casos de pruebas unitarias se construyen uti-lizando la librería JUnit, implementando casos para los componentes de reportesestadísticos, especí�camente las clases FiltroGenerico y FabricaFiltro. En efecto,los casos se implementan en base al estado �nal de los valores de los atributos delas instancias de las clases. Al �nal de las pruebas los resultados son totalmenteexitosos. CAPÍTULO 7. MARCO APLICATIVO 877.4.14. Iteración 12Objetivo: Diseñar y construir los componentes de sistema para la creación de losdiversos reportes estadísticos generados por la aplicación servidor e investigar ydesarrollar las estadísticas de tiempo de respuesta de formularios capturadas porla aplicación cliente.Plani�cación:1. Investigación y desarrollo de la funcionalidad Tiempo de respuesta del for-mulario.2. Realización de pruebas sobre la funcionalidad desarrollada.3. Modi�cación de las interfaces de usuario de la aplicación cliente.4. Creación de la interfaz general de los reportes a ser generados en la aplicación.5. Creación de la interfaz GeneradorData, encargada de la generación de con-sultas y datos de los reportes. Se emplea el patrón de diseño Strategy parasu implementación.6. Creación de la clase DatoReporte, encargada de almacenar los datos acercadel detalle y resumen obtenidos por los generadores de los reportes.7. Creación de la clase GrupoConsulta, encargada de almacenar los datos acercade las consultas creadas por los generadores de los reportes.8. Creación de la clase encargada de la generación de reportes en la aplicación.Clase ReporteGenerico.9. Creación de la clase abstracta AbstractGeneradorData, que sirve como im-plementación base para las clases generadoras de datos para los reportes.Dicha clase junto a las clases GeneradorData.java y ReporteGenerico.java,forman parte del patrón Strategy.10. Creación de la clase GeneradorDataPool.java, que contiene los generadoresde reportes de la aplicación. Cabe destacar que a raíz de que los generadoresno almacenan información de estado entre llamadas a sus métodos, se empleael patrón Flyweight para almacenar referencias únicas a dichos generadoressobre el pool mencionado.11. Creación de la clase FabricaReporte.java, encargada de la generación de ins-tancias de los reportes disponibles en el sistema, y las estadísticas abarcadaspor los mencionados, junto con el generador de reportes correspondiente(dicha asociación se realiza a través del nombre del reporte).12. Creación de clases de prueba para: ReporteGenerico.java, GeneradorData-Pool.java y FabricaReporte.java.13. Pruebas sobre el servidor de aplicaciones para la creación de usuarios yproyectos de estadísticas. CAPÍTULO 7. MARCO APLICATIVO 88Desarrollo: En la �guras 7.21 se proporciona el Diagrama de Clases inicial parala construcción de los reportes del núcleo de la aplicación. Figura 7.21: Clases de los reportes para el núcleoPruebas: Al igual que en la iteración 11 los casos de pruebas unitarias y deinteracción se construyen utilizando la librería JUnit, implementando casos paralos componentes de generación de datos para los reportes, en especí�co las clasesAbstractGeneradorData, GeneradorData, ReporteGenerico, GeneradorDataPooly FabricaReporte. En efecto, los casos se implementan en base al estado �nal de losvalores de los atributos de las instancias de las clases. Al ejecutar las pruebas porparte del cliente se encuentra un comportamiento erróneo en el método isProyec-toAplicable de la clase ReporteGenerico, por lo tanto se realizan los cambios y laspruebas se ejecutan correctamente. CAPÍTULO 7. MARCO APLICATIVO 897.4.15. Iteración 13Objetivo: Analizar e implementar la estadística errores de llenados de formulariosrecolectada por la extensión cliente, y desarrollar los componentes de la capa depresentación para formatear los datos generados por los reportes estadísticos.Plani�cación:1. Investigación y desarrollo de la funcionalidad Errores Formulario.2. Realización de pruebas sobre la funcionalidad desarrollada.3. Creación del modelo básico para cada dato contenido en los diversos reportesdel núcleo. Clase DatoModel.4. Creación de la clase para el formateo de cada dato básico. Clase FormatoDa-to.5. Creación de generadores de textos para los diversos valores de datos. Sede�ne la interfaz global de un generador, denominada GeneradorTexto. Pos-teriormente se de�nen los diversos generadores para los enumerados: Ge-neradorFormaUso, GeneradorFormaAcceso, GeneradorComandoNavegador,GeneradorColoresPantalla.6. Creación del almacenador de los diversos conjuntos de formatos de detalley resumen para todos los reportes disponibles en el núcleo. Clase Forma-toDatoPool.7. Creación de clases de prueba sobre los módulos de reportes creados.Desarrollo: En la �gura 7.22 se proporciona el Diagrama de Clases inicial parala presentación de los reportes en la GUI Web. CAPÍTULO 7. MARCO APLICATIVO 90 Figura 7.22: Clases para la presentación de los reportes en la GUI WebPruebas: De la misma manera como se describe en la iteración 12 los casos depruebas unitarias se arman utilizando la librería JUnit, de�niendo casos para loscomponentes de formateo de datos asociados los reportes estadísticos, en concretopara las clases DatoModel, FormatoDato, FormatoDatoPool y GeneradorTexto.De hecho, los casos se implementan en base al estado �nal de los valores de losatributos de los objetos. Al �nal el resultado de las pruebas es exitoso.7.4.16. Iteración 14Objetivo: Finalizar la construcción del documento en formato XML con los datoscapturados por la aplicación cliente, y desarrollar los componentes para la gene-ración de reportes estadísticos en la interfaz grá�ca de usuario en la aplicaciónweb. CAPÍTULO 7. MARCO APLICATIVO 91Plani�cación:1. Construcción del segmento XML asociado a cada una de las funcionalidadesdesarrolladas.2. Construcción del XML que es enviado al servidor para su posterior proce-samiento.3. Realización de pruebas sobre los archivos XML creados a objeto de poderestablecer la comunicación entre la aplicación cliente y la aplicación servidor.4. Creación del modelo para el componente de los reportes en el GUI Web.Clase DatoReporteModelo.5. Creación del componente que decora un Reporte del núcleo y le añade fun-cionalidades al mencionado, a objeto de que pueda ser visualizado en la capaWeb (Clase ReporteComponent).6. Creación de la fábrica encargada de instanciar los reportes para su posteriorvisualización en la interfaz Web (Clase FabricaReporteComponent). Cabedestacar que existe una única instancia de dicha fábrica, por cada instanciade la aplicación Web. Lo mencionado se logra a través del patrón Singleton.7. Creación del componente MenuReporte, encargado de manejar la visualiza-ción del menú, y el acceso a los diversos reportes de estadísticas del sistema.8. Creación del componente ModeloReporte, que contiene la información delproyecto y el reporte actual seleccionado en la interfaz Web.9. Ajuste de la página web de estadísticas datos.jspx, a objeto de poder obtenerel modelo de la clase MenuReporte en lugar de crearlo manualmente. De estamanera el menú se crea dinámicamente.Desarrollo: En la �guras 7.23 se muestra como se construye el archivo XML,que es enviado a la aplicación servidor. CAPÍTULO 7. MARCO APLICATIVO 92 Figura 7.23: Implementación funcionalidad - XML que será enviado a la aplicaciónservidorPruebas: Al igual como se expone en la iteración 12 los casos de pruebas uni-tarias y de interacción se desarrollan utilizando la librería JUnit, de�niendo casospara los componentes de presentación de los reportes estadísticos en la interfazweb, en concreto para las clases DatoReporteModelo, ReporteComponent, Fabri-caReporteComponent, MenuReporte y ModeloReporte. En este caso, las pruebasse implementan en base al estado �nal y en base a la interacción entre clases. Alejecutar las pruebas por parte del cliente se obtiene un error de visualización delmenú de reportes estadísticos en la clase MenuReporte, el cual se corrige y se con-tinuan las pruebas culminando con esta iteración luego de obtener la aceptacióndel cliente.7.4.17. Iteración 15Objetivo: Incorporar el cifrado en los datos de cuentas de usuario y realizarajustes generales en las interfaces grá�cas de usuario tanto en la extensión comoen la aplicación web. CAPÍTULO 7. MARCO APLICATIVO 93Plani�cación:1. Realización de pruebas sobre las funcionalidades desarrolladas en la apli-cación cliente y de los archivos XML construidos.2. Modi�cación de la interfaz de usuario opcionesVisor.xul.3. Ajustes en la creación de una página para un proyecto determinado, de ma-nera que solo acepte URLs sin Schema.4. Modi�cación sobre el validador URL para que acepte los dos tipos de URLs(con schema y sin schema).5. Eliminación de la preferencia de modo de envío en la creación de un proyectode estadísticas, por defecto se selecciona el modo de envío por sesión.6. De�nición de la interfaz general para un cifrador (Cifrador) y se crea laclase abstracta AbstractCifrador, con la �nalidad de implementar contraseñascifradas en la aplicación.7. Agregación de clases para el manejo de diversos métodos de cifrado para laaplicación web, especí�camente para el área de manejo de contraseñas. Sede�nen tres cifradores/descifradores: CifradorNulo, CifradorDES y Cifrador-TripleDES.8. Ajustes de los nombres de las tablas de base de datos de minúscula a mayús-cula, durante la instalación de la base de datos en Linux (servidor Yagrumo),la cual es sensible a mayúsculas/minúsculas.Desarrollo: En la �guras 7.24 y 7.25 se muestran los diversos archivos de con-�guración de la aplicación cliente. Figura 7.24: Contenido archivo - chrome.manifest CAPÍTULO 7. MARCO APLICATIVO 94 Figura 7.25: Contenido archivo - install.rdfPruebas: El conjunto de casos de pruebas se enfoca en el componente de cifradode datos de contraseñas de cuentas de usuarios. Para este �n los casos se imple-mentan empleando la librería JUnit en particular para las clases: AbstractFactory,CifradorNulo, CifradorDES y CifradorTripleDES. Además, se especi�can pruebasbasadas en el estado �nal de los atributos de las clases. Por lo demás es impor-tante señalar que el resultado de las pruebas es completamente satisfactorio y seobtiene la aceptación del cliente.7.4.18. Iteración 16Objetivo: Con�gurar los componentes de la extensión y del servidor para preparary ejecutar el caso de estudio, y �nalizar el desarrollo de los reportes estadísticosdel sistema. CAPÍTULO 7. MARCO APLICATIVO 95Plani�cación:1. Instalación de la aplicación cliente en 12 máquinas de la División de Controlde Estudios de la Facultad de Ciencias de la Universidad Central de Venzuelapor el profesor Sergio Rivas.2. Monitoreo de la información recolectada por la aplicación cliente y de la dataalmacenada en la aplicación servidor.3. Respaldo de la data almacenada en la aplicación servidor.4. Pruebas sobre los reportes generados.Desarrollo: En la �gura 7.26 se proporciona el Diagrama de Clases asociado ala visualización de los grá�cos de los reportes en la GUI Web. Figura 7.26: Clases para la visualización de los grá�cos de los reportes en la GUI WebPruebas: Finalmente las pruebas de esta iteración corresponden a pruebas deintegración y de sistema como un todo. Para tal �n, se de�nen �ujos de procesos CAPÍTULO 7. MARCO APLICATIVO 96para las pruebas de manera tal que se contemplen la mayor parte de los com-ponentes del sistema. Los casos se dividen en dos grupos: pruebas del cliente ypruebas del servidor.Por una parte el cliente interactúa por completo con la extensión, instalándola,con�gurándola e iniciando la recolección de estadísticas. Luego de la ejecuciónexitosa de las pruebas se obtiene la aceptación del cliente con respecto a la apli-cación cliente.Por otra parte el cliente interactúa de manera general con todas las páginas de laaplicación web, creando proyectos, ajustando sesiones de proyectos y desplegandoreportes estadísticos. Cabe indicar que en este punto se detecta un error al mo-mento de realizar la carga del reporte de estadísticas globales, ya que se muestrade manera incompleta. Luego se procede a la corrección del error de visualización,y se ejecutan nuevamente las pruebas, las cuales resultaron exitosas y se obtienela aceptación del cliente de la aplicación en general. Capítulo 8Caso de Estudio En el presente capítulo se de�nen los parámetros de con�guración establecidos en laaplicación para iniciar el proceso de recolección de información. Para ello fue instaladauna extensión cliente en 12 computadores utilizados por el personal de la División deControl de Estudios, de la Facultad de Ciencias de la UCV. Dicha extensión fue ejecu-tada bajo las versiones 3.5 y 3.6 del navegador Mozilla Firefox.Para el presente caso, la recolección se realiza en el horario de trabajo establecidopor la División de Control de Estudios, en el cual el personal ejecuta una serie de ac-tividades, de Lunes a Viernes de 8:30am a 12:00 y de 1:30 pm a 4:30pm. Además elperiodo de recolección se inicia el viernes 22/10/2010, hasta el viernes 05/11/2010, esdecir, tuvo una duración de 2 semanas.Cabe destacar que dicha recolección fue aplicada sobre el sistema de Gestión Académi-ca módulo CONEST Administrativo, utilizado el personal de la División de Control deEstudios para operaciones de índole administrativa en el ámbito académico.Antes de inciar la recolección se realiza la con�guración del proyecto CONEST Ad-ministrativo en el Sistema Servidor, indicando la información básica acerca de dichoproyecto, y las estadísticas a ser recolectadas por la aplicación cliente, como se visuali-za en las �guras 8.1 y 8.2, expuestas a continuación : 97 CAPÍTULO 8. CASO DE ESTUDIO 98 Figura 8.1: Ingreso de información - Creación de Proyecto de Estadísticas Figura 8.2: De�nición de Preferencias y estadísticasPara iniciar el proceso de recolección de datos se procede a instalar la extensióncliente en cada una de los equipos mencionados, ejecutando el archivo con extensión.xpi. Una vez culminada dicha instalación, se visualiza lo mostrado a continuación enla �gura 8.3: CAPÍTULO 8. CASO DE ESTUDIO 99 Figura 8.3: Opciones de con�guraciónPosteriormente, se procede a la con�guración del proyecto CONEST Administrativo,para su posterior activación como se ilustra en las �guras 8.4 y 8.5: Figura 8.4: Opciones de Con�guración - Detalles del Proyecto CAPÍTULO 8. CASO DE ESTUDIO 100 Figura 8.5: Panel Con�guración - OpcionesNota: Para seleccionar el proyecto sobre el cual se realizara la recolección de es-tadísticas; veri�que que el proyecto haya sido seleccionado, y posteriormente presioneel botón Activar, en la pestaña Proyecto.Cabe destacar, que solo puede seleccionar un proyecto para la recolección.Finalmente se inicia la captura de datos estadísticos, acerca de la interacción delusuario con el sitio Web, en la aplicación cliente, que serán enviados a la aplicaciónservidor, quien procesa los datos obtenidos y genera un conjunto de reportes, tales co-mo los mostrados en la siguiente sección. 8.1. ResultadosA continuación se proporciona una explicación acerca de los resultados obtenidosen el proceso de recolección de estadísticas por parte de la aplicación y su posteriorvisualización en la aplicación Web. CAPÍTULO 8. CASO DE ESTUDIO 1018.2. Estadísticas Globales Figura 8.6: Reporte - Estadísticas Globales Promedio páginas vistas por visita: Probablemente sea el dato que más sepresta para la confrontación, ya que puede asumir distintos signi�cados según eltipo de sitio examinado. Por ejemplo, un alto número de páginas vistas por visitaasociado a un breve tiempo de permanencia en las páginas, tendrá un signi�cadodiferente según los contenidos de las páginas Web de las que se han detectadotales valores.En base a los resultados obtenidos es útil para determinar:� Si existe contenido duplicado en las páginas que se han visitado.� Existencia de enlaces rotos, mal redirigidos o no disponibles.� Claridad de los shortcuts establecidos; los cuales deben ser predictivos y queno induzcan a error de interpretación, es decir, que indiquen hacia donde elusuario va a dirigirse, cuando sea seleccionado, sin que el mismo tenga quere�exionar hacia dónde va a dirigirse o sobre su posible signi�cado.� La existencia de información relevante en el sitio Web, que sea original, yque le haga sentir al visitante, que está obteniendo algo que sea de utilidad.Se induce que en un promedio de 4 páginas vistas por visita, el usuario realizasus tareas dentro del sitio Web interactuando con pocas páginas. CAPÍTULO 8. CASO DE ESTUDIO 102Promedio clics por visita: Útil para determinar el grado de actividad o inac-tividad del usuario existente en la aplicación, o en determinadas páginas web,tiempos de permanencia, entre otros.Promedio tiempo de carga de páginas/visita: El tamaño y complejidad delos marcos o frames utilizados en las páginas Web, determina en la mayoría de loscasos, la velocidad de visualización inicial. Aquellas páginas web que poseen tablasanidadas, archivos CSS, código JavaScript, o imágenes asociadas en formatos norecomendados como el .PNG, retrasan el tiempo que tarda el contenido útil de lapágina en ser visualizado. Observando los tiempos de carga de una página Web,podremos determinar si el tiempo de respuesta es óptimo, así como el ayudar adeterminar un equilibrio entre apariencia y funcionalidad del sitio Web, utilizandotécnicas basadas en estándares para optimizar la velocidad de respuesta de lasaplicaciones. Entre algunos estándares de diseño podemos mencionar:� El posicionar el contenido CSS en la parte superior (cabeza) y el JavaScripten la parte inferior( cuerpo) del HTML permite un procesamiento progresivodel contenido de la misma.� El poseer múltiples CSS o JavaScripts que son invocados desde diversaspartes de la página puede retrasar el despliegue de contenidos.� La presencia de archivos de audio y/o video.� Existencia de enlaces construidos con JavaScript o no. En este caso, se re-comienda, evitar la construcción de enlaces con dicho lenguaje, ya que en unalto porcentaje de estos casos, es totalmente prescindible; pero, en caso deno ser posible, se debe garantizar su funcionamiento sin tener el Javascriptactivado.Del resultado obtenido anteriormente, podemos que un tiempo de carga de 1,33segundos, indica una velocidad óptima de carga, lo que cumple uno de los princi-pios básicos de Interacción-Humano-Computador [King, 2008].Tiempo promedio por visita: El tiempo promedio de duración de la visita deun usuario varía según el tipo de sitio o información que sea consultada por elusuario, por lo que no podemos tomar un valor general.Pero dicho valor es muy importante para determinar que tan bien estructurado seencuentra un sitio web y si este facilita su navegación, si el sitio posee contenidosy servicios de interés, así como un lenguaje directo, claro y comprensible parael usuario, algo vital para generar concurrencia por parte de los mencionados, osi por el contrario; ofrecen contenidos irrelevantes que no aportan nada más queruido visual y estructural a la página.Haciendo conjunción con el item especi�cado anteriormente, un tiempo de 560segundos, o 9 minutos con 33 segundos, indica un alto nivel de interactividad conel sitio Web. CAPÍTULO 8. CASO DE ESTUDIO 103Porcentaje promedio de inactividad por visita: Es asumido de formagenérica que la lectura por pantalla es bastante más lenta e incómoda que laejercida sobre el medio impreso, lo que conduce a una percepción no tan clara delcontenido. Es por ello, que el usuario no visualiza todo el contenido, sino escaneala página en busca de lo que le interesa y centra su atención en aquellos puntos quele llaman su atención y que cree a primera vista que será la opción más correctaen relación a lo que le interesa.El tiempo de inactividad puede indicar:� Si el usuario no es capaz de encontrar lo que busca de forma rápida, y porende tendrá una percepción negativa del sitio web.� Si el sitio web presenta problemas de trá�co, carga o de funcionamiento.El tomar en cuenta los valores mostrados en la presente métrica contribuye amejorar la experiencia y usabilidad del usuario, en el proceso de interacción conlos sitios Web. No se debe hacer pensar al usuario en su proceso de interaccióncon una página web, sino que ésta sea tan clara, obvia y fácil de entender, queimplique la acción directa y no la pérdida de tiempo en su intento de exploracióny comprensión de lo que se le ofrece por pantalla.Un porcentaje de 31,59% indica un alto grado de actividad por parte del usuariocon el sitio Web, lo cual de forma implícita indica que el usuario no debe esperaruna gran cantidad de tiempo, por la carga de recursos asociados a una páginaluego de que es mostrada inicialmente.Promedio errores HTTP por visita: Cada objeto único en una página webrequiere un viaje de ida y vuelta al servidor, es decir, una solicitud HTTP y unarespuesta. Cada objeto presenta retrasos indeterminados. Generalmente, cuandoel número de objetos es mayor que cuatro, son los objetos de la página los quetienden a determinar los tiempos de descarga.Para minimizar el número de peticiones HTTP, se recomienda minimizar el númerode objetos en sus páginas web, así como el combinar y convertir archivos grá�cosbasados con técnicas de CSS.El obtener 16 errores HTTP, en promedio por visita, puede indicar que seríarecomendable revisar los elementos asociados al sitio Web de CONEST Adminis-trativo, tales como: imágenes, enlaces, código javaScript, entre otros. CAPÍTULO 8. CASO DE ESTUDIO 1048.3. Resolución de Pantalla Figura 8.7: Reporte - Resolución de PantallaDe lo antes expuesto se deduce lo siguiente:1. 1024 x 768 vistas 310 veces, correspondiente al 22% de las vistas.2. 1152 x 864 vistas 417 veces, correspondiente al 29% de las vistas.3. 1280 x 1024 vistas 434 veces, correspondiente al 30% de las vistas.4. 1280 x 720 vistas 279 veces, correspondiente al 19% de las vistas.De lo que se concluye que la visualización de las páginas deben estén acorde a lassiguientes resoluciones: 1280 x 1024 y 1152 x 864, que constituyen las más empleadaspor los usuarios. CAPÍTULO 8. CASO DE ESTUDIO 1058.4. Textos buscados Figura 8.8: Reporte - Textos buscadosEn el presente grá�co, se visualizan los textos más buscados en la página de menúprincipal de CONEST Administrativo. Con los datos observados, se puede obtener:1. estado: Con la que se realizó una búsqueda de 30 veces, y la cual esta rela-cionada con el estado de la cali�cación o el estado de la inscripción del estudiante.2. foto: Con la que se realizó una búsqueda de 18 veces, de la cual puede concluirseque los usuarios intentan ubicar la opciones de Agregar y/o Administrar foto delestudiante.3. horario: Con la que se realizó una búsqueda de 14 veces, de lo que puedeinferirse que se realizan la búsqueda de opciones asociadas al horario, tales como:Consultar horarios por Semestre.4. tesis: Con la que se realizó una búsqueda de 10 veces, que está asociada a labúsqueda de opciones asociadas al trabajo especial de grado.5. requisito: Con la que se realizó una búsqueda de 8 veces, la cual suele estarasociada a las opciones de: Consultar requisitos académicos de un estudiante,consultar requisitos a todos los estudiantes inscritos en tesis y consultar requisitosde una materia para un estudiante.6. CALIFICAR es, cali�car estud: Con la que se realizó una búsqueda de 9veces, y que se encuentra asociada a la opción Cali�car estudiante. CAPÍTULO 8. CASO DE ESTUDIO 106Por lo antes expuesto, se recomienda ubicar las opciones asociadas a las palabrasmencionadas, en la parte superior de la página o del menú principal, a objeto de incre-mentar la interacción por parte del usuario, y por ende el obtener un acceso más rápidoa las opciones indicadas.8.5. Uso de Enlaces Figura 8.9: Reporte - Uso de EnlacesEl presente reporte (ver �gura 8.9), muestra el uso de los enlaces de la página delmenú principal de CONEST Administrativo, así como los desplazamientos realizadospara su ubicación, a través del uso de las barras de desplazamiento del navegador.Del grá�co expuesto, se concluye que el 62,32% de los enlaces requieren de un des-plazamiento vertical, lo que contradice uno de los principios de Interacción-Humano-Computador, que establece que los mencionados deben estar ubicados en la parte su-perior de la página; por lo que se sugiere tomar en cuenta dicho principio, para lare-ubicación de los enlaces asociados a la aplicación.Aunado a esto, se puede apreciar que los enlaces más utilizados que necesitaron deun desplazamiento vertical para su ubicación, se pueden mencionar:1. desbloquear solicitudes de constancias: 42 veces2. cali�car estudiante: 36 veces3. modi�car inscripción: 26 veces4. modi�car número de depósito bancario: 22 veces CAPÍTULO 8. CASO DE ESTUDIO 1075. solicitudes pendientes de trabajo especial de grado: 21 veces6. imprimir constancia de estudio: 15 veces7. imprimir constancia de culminación de estudios: 11 veces8.6. Usos Comandos del Navegador Figura 8.10: Reporte - Usos Comandos del NavegadorDel presente grá�co, se observa que de las 700 visitas realizadas al sitio de CONESTAdministrativo, solo se evidencian 75 usos de los botones principales del navegador Mo-zilla Firefox, tales como: Atrás, Adelante, Actualizar y Detener.El uso de los mencionados se resume de la siguiente manera:1. Atrás: 65 veces, correspondiente al 86,67% del total de usos.2. Adelante: 1 vez, correspondiente al 1,33% del total de usos.3. Actualizar: 9 veces, correspondiente al 12% del total de usos.4. Detener: 0 veces, correspondiente al 0% del total de usos.De lo antes expuesto, se concluye que en general el sitio de CONEST Administrativo,ofrece enlaces de navegabilidad entre páginas, que son muy utilizados por los usuarios,en lugar de los botones de navegabilidad asociados al navegador. Además se observa queel enlace que sustituye al botón Atrás del navegador, es el enlace denominadoRegresara Principal, como se visualiza en la �gura 8.11, expuesta a continuación: CAPÍTULO 8. CASO DE ESTUDIO 108 Figura 8.11: Estadísticas de usos de enlaces en páginasEn la �gura expuesta(ver �gura 8.11), se observa que el enlace Regresar a Prin-cipal, constituye el enlace más utilizado, con un total de 343 usos, seguido del enlace(Cambiar), lo que indica que el usuario debe regresar al menú principal de la apli-cación, si desea interactuar con alguna otra opción asociada al aplicativo.Por ello, se sugiere la creación de un menú que pueda ser utilizado en cualquierparte del aplicativo, para mejorar la navegabilidad del usuario en dicho sitio.Además se evidencia una interactividad continua del usuario con las páginas delaplicativo, de lo que se in�ere que existe interés por parte del usuario en navegar en elmismo.Esto es debido al poco uso de los botones de navegación ( menos de 80 usos) de las700 visitas realizadas al sitio. Capítulo 9Conclusiones La investigación realizada para establecer el marco teórico, la adaptación del métodoXP, y la posterior elaboración de una aplicación permiten en el presente trabajo especialde grado presentar como resultado un software para la visualización de estadísticas enla web, orientadas al usuario.Gracias a la investigación y a la ejecución de las actividades en la adaptación delmétodo XP, se logra cumplir con los objetivos propuestos, logrando crear una herra-mienta de Estadísticas Web que obtiene información acerca del interacción del usuariocon la página y el navegador.Por otra parte, se realizan adaptaciones sobre el método XP, pero durante la codi-�cación del sistema, se comienza a laborar durante 40 horas a la semana, dedicandode 2 a 3 horas diarias en promedio a la ejecución de las actividades propuestas, y enalgunas ocasiones no se labora durante algunas semanas, lo que trae como consecuenciaque el desarrollo del presente producto se extienda, más de lo previsto, obteniendo 17iteraciones en el marco aplicativo.Del método XP, se aplica el trabajo en parejas, el cual se realiza la mayor partedel tiempo, mas no en su totalidad, lo que permite el incremento de las habilidades delos programadores. Además se mantiene una comunicación directa con el cliente paradeterminar los requerimientos funcionales del sistema a desarrollar, logrando orientaren buen término el desarrollo del aplicativo. Al �nalizar cada iteración, se realizan en-tregas de versiones parciales del sistema, que son desarrolladas de forma incremental, yen las cuales se aplica la reutilización de código, lo que ayuda a agilizar la construcciónde la herramienta mencionada, no haciendo énfasis en la documentación, sino en sufuncionamiento; hasta obtener el producto �nal.Respecto al despliegue de los grá�cos de los reportes estadísticos, se tuvo que realizarla integración entre la librería de OpenFlashChart 2 y el framework para el desarrollo deaplicaciones Web Java Server Faces(JSF) 1.2, para lo cual se realizó una investigación109 CAPÍTULO 9. CONCLUSIONES 110acerca de la creación de componentes en JSF, de manera que pudiera ser incrustadoun grá�co OpenFlashChart 2. Posteriormente se pudo realizar la integración entre laslibrerías y el framework descrito de forma exitosa.Durante la construcción del producto se tuvo di�cultad en la obtención de infor-mación acerca del funcionamiento de las interfaces XPCOM, para poder establecer lacomunicación entre las funcionalidades del aplicativo y las funciones del núcleo del na-vegador Mozilla Firefox, que permiten la captura de información de datos estadísticosde interés, lo que trajo como consecuencia la realización de pruebas de ensayo y errora ciegas para tratar de entender como funcionaban las mencionadas.Aunado a lo antes expuesto, la mayor parte del aprendizaje acerca de la instalación,funcionamiento de una extensión, creación de interfaces de usuario, y el desarrollo delas funcionalidades contenidas en la aplicación cliente, fue producto de revisar el códigofuente de otras extensiones.En la recolección de datos estadísticos realizados, se puede apreciar que el sitio CO-NEST módulo Administrativo, ofrece enlaces de navegabilidad entre páginas, que sonmuy utilizados por los usuarios, en lugar de los botones de navegabilidad asociados alnavegador. Sin embargo, el enlace Regresar a Principal, constituye el enlace más uti-lizado, lo que indica que el usuario debe regresar al menú principal de la aplicación,si desea interactuar con alguna otra opción asociada al aplicativo. Por ello, se sugierela creación de un menú que pueda ser utilizado en cualquier parte del aplicativo, paramejorar la navegabilidad del usuario en dicho sitio.También se pueden apreciar altos tiempos de permanencia en el sitio y tiempos decarga óptimos, ya que no se debe esperar una gran cantidad de tiempo por la carga derecursos asociados a una página, luego de que es mostrada inicialmente. Sin embargo serecomienda revisar los recursos y enlaces asociados a cada una de las páginas del sitioWeb, debido al número de errores HTTP encontrados, que pueden estar asociados aelementos del sitio Web, tales como: imágenes, enlaces, código javascript, entre otros.Adicionalmente se observa que en la página del menú principal existen enlaces comopor ejemplo, "desboquear solicitudes de constancias", y çali�car estudiante", que seconsideran, deben estar ubicados en la parte superior de la página, debido a que sonmuy utilizados y los usuarios ubican los mencionados utilizando otros mecanismos talescomo: búsqueda de texto, o mediante el uso de barras de desplazamiento.Con el software desarrollado, se provee una solución de menor costo, de fácil ma-nipulación que no requiere de personal con entrenamiento especializado, y que permiterecolectar estadísticas enfocadas en el comportamiento del usuario, tales como: tiemposde carga de páginas y sus recursos, usos de enlaces, uso de las funciones de búsqueda detexto y navegación del navegador, tiempos de llenado de un formulario y de sus campos CAPÍTULO 9. CONCLUSIONES 111asociados, entre otras.Dicha aplicación puede ser utilizada en campos como: Estadística, Interacción-Humano-Computador (IHC), Ingeniería del Software, Publicidad y Mercadeo, Mineríade Datos (mediante el análisis e interpretación de la data obtenida), el campo de losnegocios, la Computación, entre otros; para contribuir a realizar mejoras relacionadasa la interacción del usuario, diseño, funcionalidad, y rendimiento de las aplicaciones, ala construcción de software de calidad; la predicción de patrones de comportamientopor parte de los usuarios mientras navega por la Web, el determinar hábitos de comprapor parte de los mencionados; para el análisis de los datos obtenidos, y proceder a lacreación de Sistemas Expertos.El T.E.G generó un conjunto de aprendizajes y experiencias que contribuirán al de-senvolvimiento profesional, entre las cuales cabe destacar: La interacción con un clientepara la de�nición formal de requerimientos y objetivos para la entrega de versiones delsoftware, la aplicación de un modelo de desarrollo, así como la utilización de diversospatrones de diseño tales como Observer, Prototype, Singleton, DAO, Filter, AbstractFactory, Factory Method, Flyweight, Decorator, Strategy, Template Method, Compo-site View; el uso de nuevas tecnologías; el rehacer código con la �nalidad de ajustar elmismo para cumplir con las espectativas del cliente, y el tener un período de pruebaspara la validación de cada una de las funcionalidades de la aplicación, entre otras. Capítulo 10Recomendaciones Respecto a la aplicación cliente se recomienda el permitir la recolección de estadísti-cas de varios proyectos, el implementar la extensión cliente en otros navegadores comoInternet Explorer y Google Chrome, y mantener al día las actualizaciones de la exten-sión con respecto a la versión del navegador.Respecto a la aplicación servidor se recomienda el permitir la modi�cación de proyec-tos en la aplicación Web, y el almacenamiento de los grá�cos estadísticos visualizados,en formato Word y PDF. 112 Bibliografía[3DStats, 2004a] 3DStats (2004a). ¾ What are your visitors doing while they are there? http://www.3dstats.com/. [citado en p. 53][3DStats, 2004b] 3DStats (2004b). ¾How Does It Work? http://www.3dstats.com/.[citado en p. 53][3DStats, 2004c] 3DStats (2004c). Live Demo. http://www.3dstats.com/cgi-bin/showuni1.cgi?usr=00000001P000. [citado en p. 54, 56][Alex, 2007] Alex, R. (2007). RESTful Web services: The basics.Copyright IBM Corporation 1994,2007. e-mail: arodrigu@us.ibm.com. [citado en p. 43][Analytics, 2009] Analytics, G. (2009). Google Analytics. http://www.google.com/analytics/es-ES/. [citado en p. 45, 46, 47, 48, 49][Apache Software, 2010] Apache Software, F. (2010). Logging Services. http://logging.apache.org/log4j/1.2/. [citado en p. 65][Chris Chalk, 2007] Chris Chalk, Ed Burns, J. H. (2007). JavaServerFaces: The Com-plete Reference. http://www.amazon.com/JavaServer-Faces-Complete-Reference/dp/0072262400/. [citado en p. 65][Costello, 2002] Costello, R. L. (2002). Building Web Services the REST Way.http://www.xfront.com/REST-Web-Services.html.roger.costello@gmail.com. [citado en p. 43][Erich Gamma, 1994] Erich Gamma, Richard Helm, R. J. J. V. (1994). Design Patterns:Elements of reusable object-oriented software. http://amzn.to/dnn9Lt. [citado en p. 64, 65][EstadisticasGratis, 2004a] EstadisticasGratis (2004a). Calidad del Color. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=Browsers#color.[citado en p. 53][EstadisticasGratis, 2004b] EstadisticasGratis (2004b). Estadísticas y contadores gratis paratu web. http://www.estadisticasgratis.com/. [citado en p. 49][EstadisticasGratis, 2004c] EstadisticasGratis (2004c). Trá�co Diario. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=TraficDay.[citado en p. 51, 52] 113 BIBLIOGRAFÍA 114[EstadisticasGratis, 2004d] EstadisticasGratis (2004d). Trá�co Horario. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=TraficHour.[citado en p. 49][Feldt, 2007] Feldt, K. C. (2007). Programming Firefox : Building Applications in the Browser.http://www.amazon.com/Programming-Firefox-Building-Internet-Applications/dp/0596102437//ref=sr_1_1?ie=UTF8&s=books&qid=1289316386&sr=1-1#_.[citado en p. 17][Fielding, 2000] Fielding, R. T. (2000). Architectural Styles and the Design of Network-basedSoftware Architectures. http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm. [citado en p. 65][Firefox, 2007a] Firefox, M. (2007a). MDN XPConnect. https://developer.mozilla.org/en/XPConnect. [citado en p. 20][Firefox, 2007b] Firefox, M. (2007b). Mozilla Developer Center. The Joy of XUL. https://developer.mozilla.org/en/About_JavaScript. [citado en p. 28, 29][Firefox, 2007c] Firefox, M. (2007c). Mozilla Developer Center. XUL. Gecko. https://developer.mozilla.org/es/Gecko. [citado en p. 20][Firefox, 2008a] Firefox, M. (2008a). Extensiones. https://developer.mozilla.org/es/Extensiones. [citado en p. 20][Firefox, 2008b] Firefox, M. (2008b). Mozilla Developer Center. Uso de Componentesxpcom. https://developer.mozilla.org/index.php?title=Es/Creacinentes_XPCOM/Uso_de_Componentes_XPCOM. [citado en p. 20][Firefox, 2009a] Firefox, M. (2009a). Mozilla Developer Center. JavaScript.https://developer.mozilla.org/es/JavaScript. [citado en p. 19, 24][Firefox, 2009b] Firefox, M. (2009b). Firefox architecture is very similar to web pages thatuse dynamic HTML. http://www.soi.wide.ad.jp/class/20070050/slides/01/index_15.html. [citado en p. 17, 18, 19][Firefox, 2009c] Firefox, M. (2009c). Mozilla Developer Center. CSS.https://developer.mozilla.org/es/CSS. [citado en p. 19][Firefox, 2009d] Firefox, M. (2009d). Mozilla Firefox Extension Development Tutorial.http://www.soi.wide.ad.jp/class/20070050/slides/01/index_10.html.[citado en p. 18][Firefox, 2009e] Firefox, M. (2009e). XPIDL. https://developer.mozilla.org/en/XPIDL.[citado en p. 20][Firefox, 2009f] Firefox, M. (2009f). XUL. https://developer.mozilla.org/es/XUL.[citado en p. 19, 25] BIBLIOGRAFÍA 115[Gavin king, 2009] Gavin king, Christian Bauer, M. R. A. E. B. S. E. (2009). Hibernate Refe-rence Documentation. http://docs.jboss.org/hibernate/core/3.5/reference/en-US/pdf/hibernate_reference.pdf. [citado en p. 64][King, 2008] King, A. B. (2008). Website Optimization.http://my.safaribooksonline.com/book/web-development/9780596515089/firstchapter. [citado en p. 102][librosweb.es, 2009] librosweb.es (2009). Especi�caciones o�ciales. http://www.librosweb.es/javascript/capitulo1/especificaciones_oficiales.html. [citado en p. 22, 23][librosweb.es, 2010] librosweb.es (2010). Mozilla Firefox. https://developer.mozilla.org/en/About_JavaScript. [citado en p. 23][maestros del web, 2007] maestros del web (2007). Herramientas para medirlas estadisticas de tu web. http://www.maestrosdelweb.com/editorial/herramientas-para-medir-las-estadisticas-de-tu-web/. [citado en p. 44][Oracle, 2010] Oracle (2010). The Java EE 6 Tutorial. http://download.oracle.com/javaee/6/tutorial/doc/javaeetutorial6.pdf. [citado en p. 64, 65][PrimeFaces, 2009] PrimeFaces (2009). Primefaces. http://www.primefaces.org/.[citado en p. 65][Producciones, 2008] Producciones, C. (2008). JavaScript-DHTML. Creación de Páginas WebDinámicas. http://www.ceneac.com.ve/. [citado en p. 22, 23][Scribd, 2008] Scribd (2008). PRESENTACION XUL.http://www.scribd.com/doc/37886018/PRESENTACION-XUL. [citado en p. 25][Shailesh K. Mishra, 2007] Shailesh K. Mishra, S. E. I. (2007). RESTful Web services andtheir Ajax-based clients. http://www.ibm.com/developerworks/webservices/library/ws-restajax/. [citado en p. 43][WikiBooks, 2009a] WikiBooks (2009a). XUL/Introducción. http://es.wikibooks.org/wiki/XUL/Introduccion. [citado en p. 25, 31][WikiBooks, 2009b] WikiBooks (2009b). XUL/Primer ejemplo. http://es.wikibooks.org/wiki/XUL/Primer_ejemplo. [citado en p. 31][xprogramming, 2001] xprogramming (2001). What is Extreme Programming? http://xprogramming.com/xpmag/whatisxp. [citado en p. 62]tesis.dvi Universidad Central de VenezuelaFacultad de CienciasEscuela de ComputaciónAplicaciones con Tecnología Internet Trabajo Especial de GradoSistema de Recolección de Estadísticas yGeneración de Reportes Web como unaextensión del navegador Mozilla Firefox Trabajo Especial de Gradopresentado ante la ilustreUniversidad Central de Venezuelapor los BachilleresJosé J. Sanchez P., C.I: 16.179.270yAngel D. Gil R., C.I: 17.977.347para optar por el título deLicenciado en Computación TutorProf. Sergio Rivas Caracas, Mayo del 2011 Acta Quienes suscriben miembros del Jurado, designados por el Consejo de Escuela deComputación, para examinar el Trabajo Especial de Grado presentado por los Bachi-lleres José Javier Sanchez Ponte, C.I. 16.179.270 y Angel David Gil Ramirez,C.I. 17.977.347, con el título Sistema de Recolección de Estadisticas y Genera-ción de Reportes Web como una extensión del navegador Mozilla Firefox, alos �nes de optar al título de Licenciado en Computación, dejan constancia lo siguiente:Leído como fue, dicho trabajo por cada uno de los miembros del Jurado, se �jóel 17 de Mayo de 2011, para que sus autores lo defendieran en forma pública, se hizoen la Escuela de Computación de la Facultad de Ciencias de la Universidad Centralde Venezuela, mediante una presentación oral de su contenido. Finalizada la defensapública del Trabajo Especial de Grado, el Jurado decidió aprobarlo con una nota depuntos, en fe de lo cual se levanta la presente Acta, en Caracas a los diecisiete días delmes de mayo del año dos mil once, dejándose también constancia de que actuó comoCoordinador del Jurado el profesor Sergio Rivas. Prof. Sergio RivasTutor Prof. Andrés Sanoja Prof. Jossie ZambranoJurado Jurado 1 Agradecimientos y Dedicatoria A la Universidad Central de Venezuela, alma mater y fuente de conocimientos"La Casa que vence las sombras", por darme la oportunidad de estudiar en tanprestigiosa institución.A mi tutor académico, el profesor Sergio Rivas por con�ar en nosotros, por sugran ayuda, colaboración, orientación y �exibilidad a lo largo del desarrollo deeste proyecto.A todos mis amigos con lo que compartí alegrías y penas; y me ayudaron a creceracadémica, mental y espiritualmente a lo largo de la carrera.Quisiera agradecer a toda mi familia por el apoyo brindado durante el desarrollode mis estudios universitarios, a mis compañeros y profesores por la ayuda recibi-da y �nalmente a la Universidad Central de Venezuela, como institución, que consus grandes virtudes y defectos me brindó la oportunidad de culminar exitosa-mente mis estudios y poder obtener el título de Licenciado en Computación.José J. Sanchez PA mi padre Angel Gil, por haberme orientado y ayudado durante mi formaciónprofesional.A mi madre Elisaira Ramirez, quien ha sido un pilar de fortaleza y estimulo paraseguir hacia adelante.A la Universidad Central de Venezuela, por haberme permitido estudiar en susprestigiosas aulas.A mi tutor académico, el profesor Sergio Rivas por con�ar en nosotros, por sugran ayuda, colaboración, orientación y �exibilidad a lo largo del desarrollo deeste proyecto. Angel D. Gil R.2 Dedicatorias La realización de este proyecto está dedicado especialmente:A mis padres, por su ayuda incondicional en los buenos y malos momentos, yapoyo en todo momento, quienes con sus sabios consejos y todos sus sacri�cioshicieron posible este proyecto.A mi abuelo Manuel Salvador Ponte Betancourt, y a mi abuela Maria Luisa PonteGarcía, que ya partieron de esta tierra, y que desde el cielo me bendicen con suamor, sabiduria y protección.A dios quien me dió la fuerza, paciencia, constancia y espíritu de lucha parasuperar las adversidades a lo largo de la carrera. José J. Sanchez PA mi padre Angel Gil y a mi madre Elisaira de Gil por siempre estar a mi lado ydandome las fuerzas para continuar con este objetivo y lograr alcanzarlo.A mi tía Margarita Bastardo por su ayuda durante toda la carrera e inclusive enel desarrollo de este trabajo.A los compañeros de trabajo en especial Esteban Soto, y Jean Carlos por icenti-varme y apoyarme en los momentos di�ciles del desarrollo de este trabajo.Angel D. Gil R. 3 Resumen Hoy en día, muchos sitios Web carecen de mecanismos que les permitan obtener in-formación acerca del comportamiento de los usuarios que navegan por la red. La mayoríade los servicios de estadísticas ofrecidos, realizan un análisis del comportamiento de losusuarios que acceden a un sitio Web, de manera global, ya que tienen la necesidad deabarcar la mayor cantidad de sitios Web posibles a quienes puedan ofrecer sus servicios.Sin embargo, dichos sistemas no proporcionan información de un usuario en especí�co,ni el comportamiento que estos presentan en aspectos relacionados a la navegabilidad,funciones utilizadas, tiempo de respuesta del usuario para completar una tarea especí-�ca en un sitio Web, tipos de interacción, etc.Dada esta situación, en el presente trabajo se desarrolla un sistema de estadísti-cas basado en la arquitectura Cliente-Servidor encargado de recolectar estadísticas ymostrar la información acerca del comportamiento del usuario mientras navega por laWeb, brindando reportes que pueden ser analizados por un ente interesado y lograrmejoras relacionadas a la usabilidad del sitio Web.Palabras Clave: XUL, XPCOM, JavaScript, XPConnect, JSF,extensión, estadísticas.ContactosJosé Javier Sanchez Ponte nirvana01@gmail.comAngel David Gil Ramirez angelgil87@gmail.comSergio Jose Rivas Atanacio ( Tutor) sergiorivas@gmail.com 4 Índice general Índice general 1Índice de �guras 4Índice de cuadros 71 Introducción y Problema 81.1. Situación actual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81.1.1. Analizadores de logs de servidores web . . . . . . . . . . . . . . 91.1.2. Servicios de estadísticas . . . . . . . . . . . . . . . . . . . . . . 91.2. Propuesta tecnológica . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111.2.1. Explicación de la arquitectura propuesta . . . . . . . . . . . . . 111.2.2. Sistema Cliente . . . . . . . . . . . . . . . . . . . . . . . . . . . 121.2.3. Sistema Servidor . . . . . . . . . . . . . . . . . . . . . . . . . . 121.2.4. Funcionamiento . . . . . . . . . . . . . . . . . . . . . . . . . . . 131.3. Objetivo general . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131.4. Objetivos especí�cos . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141.5. Proceso de desarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14I Marco Teórico 162 Firefox 172.1. De�nición . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172.2. Arquitectura multiplataforma de Mozilla Firefox . . . . . . . . . . . . . 172.3. Extensión de Firefox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202.3.1. Ventajas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202.3.2. Desventajas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213 JavaScript 223.1. De�nición . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223.2. Especi�caciones o�ciales . . . . . . . . . . . . . . . . . . . . . . . . . . 223.3. Motores de JavaScript disponibles . . . . . . . . . . . . . . . . . . . . . 233.4. Versiones de navegadores y de JavaScript . . . . . . . . . . . . . . . . . 231 ÍNDICE GENERAL 24 XUL 254.1. Ventajas de usar XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 274.2. Características fundamentales . . . . . . . . . . . . . . . . . . . . . . . 284.3. Desarrollo en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294.3.1. Estructura del archivo . . . . . . . . . . . . . . . . . . . . . . . 294.3.2. Manejadores de eventos . . . . . . . . . . . . . . . . . . . . . . 365 Servicios Web 395.1. REST . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406 Estadísticas en la Web 446.1. Medidores estadísticos . . . . . . . . . . . . . . . . . . . . . . . . . . . 566.2. Análisis de datos estadísticos en la Web . . . . . . . . . . . . . . . . . . 576.2.1. Análisis de visitas de un sitio web . . . . . . . . . . . . . . . . . 576.2.2. Análisis de accesos o visitas a un sitio web . . . . . . . . . . . . 576.2.3. Clientes detrás de proxys y routers NAT . . . . . . . . . . . . . 586.2.4. Visitas desde .COM .NET .EDU y .ORG . . . . . . . . . . . . . 596.2.5. Análisis de logs . . . . . . . . . . . . . . . . . . . . . . . . . . . 60II Marco Aplicativo 617 Marco Aplicativo 627.1. Adaptación del proceso de desarrollo XP . . . . . . . . . . . . . . . . . 627.2. Actores y responsabilidades . . . . . . . . . . . . . . . . . . . . . . . . 627.3. Metáfora del sistema . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637.3.1. Aplicación Cliente . . . . . . . . . . . . . . . . . . . . . . . . . 637.3.2. Aplicación Servidor . . . . . . . . . . . . . . . . . . . . . . . . . 647.4. Adaptación de las actividades XP . . . . . . . . . . . . . . . . . . . . . 667.4.1. Estrategia de desarrollo . . . . . . . . . . . . . . . . . . . . . . 677.4.2. Iteración 0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677.4.3. Iteración 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 687.4.4. Iteración 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697.4.5. Iteración 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 727.4.6. Iteración 4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747.4.7. Iteración 5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 757.4.8. Iteración 6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 767.4.9. Iteración 7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777.4.10. Iteración 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797.4.11. Iteración 9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827.4.12. Iteración 10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 837.4.13. Iteración 11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 857.4.14. Iteración 12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 ÍNDICE GENERAL 37.4.15. Iteración 13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 897.4.16. Iteración 14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 907.4.17. Iteración 15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927.4.18. Iteración 16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948 Caso de Estudio 978.1. Resultados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008.2. Estadísticas Globales . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1018.3. Resolución de Pantalla . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048.4. Textos buscados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058.5. Uso de Enlaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068.6. Usos Comandos del Navegador . . . . . . . . . . . . . . . . . . . . . . . 1079 Conclusiones 10910 Recomendaciones 112Bibliografía 113 Índice de �guras 1.1. Arquitectura propuesta para el TEG . . . . . . . . . . . . . . . . . . . . . 112.1. Arquitectura de Firefox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194.1. árbol de información jerárquica en XUL . . . . . . . . . . . . . . . . . . . 264.2. Pestañas de diálogos en XUL . . . . . . . . . . . . . . . . . . . . . . . . . 264.3. Cuadros de texto en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 274.4. Barras de progreso en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 274.5. Estructura del archivo xul.css . . . . . . . . . . . . . . . . . . . . . . . . . 304.6. Código fuente para imprimir Hola Mundo 3 veces . . . . . . . . . . . . . . 314.7. Hola mundo en el navegador . . . . . . . . . . . . . . . . . . . . . . . . . . 324.8. Usos de etiquetas box . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334.9. Barra de menú en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334.10. Menú 1 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.11. Menú 2 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.12. Menú 3 desplegado en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . 344.13. Pestañas desplegadas en el navegador utilizando XUL . . . . . . . . . . . . 354.14. Barra de desplazamiento en XUL . . . . . . . . . . . . . . . . . . . . . . . 354.15. Medidor de progreso en XUL . . . . . . . . . . . . . . . . . . . . . . . . . 354.16. Manejo de eventos en XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . 364.17. Código fuente para manejo de eventos básicos en XUL . . . . . . . . . . . 374.18. Botones XUL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384.19. Visualización de la etiqueta con el nombre del botón presionado . . . . . . 384.20. Texto �Doble clic� mostrado al hacer doble clic . . . . . . . . . . . . . . . . 385.1. Ejemplo de un servicio web con estado . . . . . . . . . . . . . . . . . . . . 425.2. Ejemplo de un servicio web sin estado . . . . . . . . . . . . . . . . . . . . 425.3. Ejemplo de una respuesta XML de un servicio web REST . . . . . . . . . 436.1. Implementación rápida . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 456.2. Comparativa de campañas y palabras claves . . . . . . . . . . . . . . . . . 456.3. Paneles personalizados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466.4. Integración con AdWords . . . . . . . . . . . . . . . . . . . . . . . . . . . 466.5. Búsqueda interna en sitios . . . . . . . . . . . . . . . . . . . . . . . . . . . 464 ÍNDICE DE FIGURAS 56.6. Comparativas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476.7. Barra deslizante de tendencia y fecha . . . . . . . . . . . . . . . . . . . . . 476.8. Seguimiento de comercio electrónico . . . . . . . . . . . . . . . . . . . . . . 476.9. Visualización de redireccionamiento . . . . . . . . . . . . . . . . . . . . . . 486.10. Superposición del sitio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486.11. Informes por correo electrónico . . . . . . . . . . . . . . . . . . . . . . . . 486.12. Orientación geográ�ca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496.13. EstadisticasGratis - Tipos de Reportes . . . . . . . . . . . . . . . . . . . . 496.14. EstadisticasGratis - Páginas vistas por hora . . . . . . . . . . . . . . . . . 506.15. EstadisticasGratis - Visitas por hora . . . . . . . . . . . . . . . . . . . . . 506.16. EstadisticasGratis - Páginas vistas por día . . . . . . . . . . . . . . . . . . 516.17. EstadisticasGratis - Páginas visitadas por día . . . . . . . . . . . . . . . . 516.18. EstadisticasGratis - Páginas visitadas por mes . . . . . . . . . . . . . . . . 526.19. EstadisticasGratis - Páginas vistas por mes . . . . . . . . . . . . . . . . . . 526.20. EstadisticasGratis - Calidad del Color . . . . . . . . . . . . . . . . . . . . 536.21. 3dStats - Reporte general . . . . . . . . . . . . . . . . . . . . . . . . . . . 546.22. 3dStats - Búsqueda personalizada . . . . . . . . . . . . . . . . . . . . . . . 546.23. 3dStats - Reporte por visitas, número de páginas y visitantes . . . . . . . . 546.24. 3dStats - Reporte por Mejor día . . . . . . . . . . . . . . . . . . . . . . . . 556.25. 3dStats - Evolución de visitas en el tiempo . . . . . . . . . . . . . . . . . . 556.26. 3dStats - últimas 40 visitas . . . . . . . . . . . . . . . . . . . . . . . . . . 556.27. 3dStats - Reporte del día . . . . . . . . . . . . . . . . . . . . . . . . . . . . 567.1. Interacción - Módulos de la Aplicación . . . . . . . . . . . . . . . . . . . . 667.2. Diagrama de Clases de la aplicación Servidor - versión inicial . . . . . . . . 687.3. Método encargado de cargar la lista de proyectos en el sistema . . . . . . . 697.4. Funcionalidad Pantalla Completa01 . . . . . . . . . . . . . . . . . . . . . . 707.5. Funcionalidades - Versión del Navegador , Dirección IP . . . . . . . . . . . 717.6. Funcionalidad - Tiempo de Carga de una página . . . . . . . . . . . . . . . 737.7. Funcionalidad - Dirección IP del Usuario . . . . . . . . . . . . . . . . . . . 747.8. Componente tipo groupbox . . . . . . . . . . . . . . . . . . . . . . . . . . 757.9. Funcionalidad - Atras - Adelante - Parar - Siguiente . . . . . . . . . . . . . 767.10. Funcionalidad - Atras - Adelante - Parar - Siguiente02 . . . . . . . . . . . 777.11. Método encargado de obtener los proyectos creados en la aplicación servidor 787.12. Clase encargada de obtener los proyectos creados en el servidor . . . . . . 787.13. Método encargado de realizar la petición de los proyectos existentes en laaplicación servidor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797.14. Implementación funcionalidad - Tiempo de Carga por recurso . . . . . . . 807.15. Continuación funcionalidad Tiempo de Carga por recurso . . . . . . . . . . 817.16. Implementación funcionalidad - Búsqueda . . . . . . . . . . . . . . . . . . 827.17. Continuación - Implementación funcionalidad - Búsqueda01 . . . . . . . . 837.18. Implementación funcionalidad - Uso Funcionalidad . . . . . . . . . . . . . 847.19. Implementación funcionalidad - Tiempo de llenado de un formulario 01 . . 86 ÍNDICE DE FIGURAS 67.20. Continuación funcionalidad - Tiempo de Llenado de un formulario 02 . . . 867.21. Clases de los reportes para el núcleo . . . . . . . . . . . . . . . . . . . . . 887.22. Clases para la presentación de los reportes en la GUI Web . . . . . . . . . 907.23. Implementación funcionalidad - XML que será enviado a la aplicación servidor 927.24. Contenido archivo - chrome.manifest . . . . . . . . . . . . . . . . . . . . . 937.25. Contenido archivo - install.rdf . . . . . . . . . . . . . . . . . . . . . . . . . 947.26. Clases para la visualización de los grá�cos de los reportes en la GUI Web . 958.1. Ingreso de información - Creación de Proyecto de Estadísticas . . . . . . . 988.2. De�nición de Preferencias y estadísticas . . . . . . . . . . . . . . . . . . . 988.3. Opciones de con�guración . . . . . . . . . . . . . . . . . . . . . . . . . . . 998.4. Opciones de Con�guración - Detalles del Proyecto . . . . . . . . . . . . . . 998.5. Panel Con�guración - Opciones . . . . . . . . . . . . . . . . . . . . . . . . 1008.6. Reporte - Estadísticas Globales . . . . . . . . . . . . . . . . . . . . . . . . 1018.7. Reporte - Resolución de Pantalla . . . . . . . . . . . . . . . . . . . . . . . 1048.8. Reporte - Textos buscados . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058.9. Reporte - Uso de Enlaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068.10. Reporte - Usos Comandos del Navegador . . . . . . . . . . . . . . . . . . . 1078.11. Estadísticas de usos de enlaces en páginas . . . . . . . . . . . . . . . . . . 108 Índice de cuadros 5.1. Comparación de arquitecturas de servicios web . . . . . . . . . . . . . . . . 395.2. Tipos MIME soportados por REST . . . . . . . . . . . . . . . . . . . . . . 437.1. Roles existentes durante el desarrollo . . . . . . . . . . . . . . . . . . . . . 63 7 Capítulo 1Introducción y Problema En el presente capítulo se proporciona una explicación acerca de la situación actualde los servicios de estadísticas. Posteriormente se hace referencia a los diversos Ana-lizadores de información tales como los Analizadores de logs de servidores Web y losServicios de Estadísticas, explicando a groso modo su propósito y las desventajas de suutilización; y la solución propuesta en el presente trabajo especial de grado.1.1. Situación actualCada vez más Internet es el canal de comunicación global por excelencia. El inter-cambio de cualquier tipo de información por vía electrónica dejó de ser �cción paraconvertirse en realidad.En muchos países del mundo se ha denotado una fuerte tendencia hacia el aumen-to de usuarios en la red y gracias a esto, existen una gran variedad de sistemas queofrecen sus servicios para la recolección de datos en la Web cuyo diseño, interacción yprocesamiento de información parecen no estar dirigidos en pro de las necesidades y/oexpectativas de los usuarios, debido a que la información recolectada por los mismostratan de englobar la mayor cantidad de mercados posibles; en base a un conjunto deestudios realizados por dichos servicios para determinar que productos ofrecer, y asítratar de generar ventajas competitivas para sus clientes, de forma gratuita o mediantealguna forma de pago; pero generalmente no suelen estar centrados en la interaccióndel usuario.Entre los servicios más comunes ofrecidos podemos mencionar el análisis de trá�coexistente en la Web, sistema operativo empleado por el usuario, número de visitas enuna página Web determinada, y lugar de procedencia del usuario. Respecto a estos dosúltimos aspectos, se contemplan una serie de limitantes que serán descritas a lo largodel presente trabajo de grado. 8 CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 9Además suelen utilizar una gran variedad de analizadores de información, entre loscuales cabe mencionar: los analizadores de logs de servidores web y los servicios deestadísticas.A continuación, una explicación acerca de los analizadores mencionados:1.1.1. Analizadores de logs de servidores webDichos analizadores de logs generan información acerca del uso de un sitio web.Estos a su vez, constituyen una de las herramientas más con�ables, pero tienen comoinconveniente, que dichos logs muestran la información de manera engorrosa, poco le-gible, y de forma genérica.Otra forma de poder realizar un análisis de la información de un sitio web son losproxys. Estos presentan información básica sobre el acceso a determinados sitios web,pero los mismos no incluyen aspectos relacionados a la interacción del usuario con lapágina a través de un navegador.1.1.2. Servicios de estadísticasComo fuente de información adicional existen los llamados servicios de estadísticasen la web, que generan una gran variedad de reportes estadísticos para los sitios webque incluyen sus servicios, y los cuales ofrecen indicadores generales que pueden servisualizados, pero no muestran detalles especí�cos como por ejemplo, la navegabilidadde un usuario en un sitio web, además de otros indicadores relacionados a la interaccióndel usuario y la página.Además muchos de estos servicios de estadísticas generan código JavaScript, quedebe ser incorporado a cada una de las páginas de los sitios web que son monitorizadasutilizando las funcionalidades creadas por estos, lo cual puede resultar engorroso si elsitio web, no presenta un diseño bien estructurado, e inclusive el código JavaScriptpuede no ser compatible con algunos navegadores.Cabe agregar que, el código JavaScript disminuye el rendimiento de las páginas, yaque debe ser ejecutado internamente en la página para que pueda ser monitorizado.Por lo expuesto anteriormente podemos deducir que existen grandes brechas en losservicios ofrecidos por los generadores de estadísticas existentes en la Web, además delos bajos medidores que se obtienen de los analizadores de logs.En general, los servicios y analizadores de información expuestos permiten realizarun análisis del comportamiento de los usuarios que acceden a un sitio web, de mane-ra global. Esto es debido a que la mayoría de los sistemas que utilizan los servicios CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 10y/o analizadores mencionados, tienen la necesidad de abarcar la mayor cantidad desitios web posibles a quienes puedan ofrecer sus servicios, y por ello la informaciónpresentada por los mismos trata de dar a conocer servicios que sean de interés parala mayoría de los usuarios; sin embargo muchas veces no satisfacen las expectativas onecesidades de un usuario en particular que necesite recolectar otro tipo de informa-ción; a diferencia de un sistema de estadísticas con�gurable que muestre informaciónde un usuario en especí�co, que permita clasi�car o categorizar a los usuarios según susnecesidades, obtener información acerca del comportamiento que estos presentan en as-pectos relacionados a la navegabilidad, funcionalidades utilizadas, tiempo de respuestadel usuario para completar una tarea especí�ca en el sitio web, tipos de interacción, etc.Lo cual constituye una especie de guía de diseño, que le muestre al ente interesado,ya sea el administrador, o un ente externo del sitio web, de que forma puede lograrmejoras relacionadas a la usabilidad del mencionado.De acuerdo a lo expuesto anteriormente, se propone la implementación de una he-rramienta de estadísticas que permita obtener información de interés de uno o variossitios web, conformada por una aplicación cliente (recolector de datos) y una aplicaciónservidor (almacenador y encargado de mostrar la información obtenida de manera grá-�ca), quienes establecerán comunicación entre sí mediante servicios web.La aplicación cliente reside como una extensión del navegador Mozilla Firefox, ycuya función principal es la recolección con�gurable de datos, mediante la interaccióndel usuario con el navegador, a través de una página web.Dichos datos posteriormente son analizados por la aplicación servidor quien se en-carga de capturar la información proporcionada por la aplicación cliente, y almacenarlautilizando un sistema de manejador de bases de datos. Además de poder analizar ygenerar información estadística, que pueda ser visualizada en un sitio web residente enel servidor.La recolección de información por parte de la aplicación cliente, y la visualizaciónde la información de forma grá�ca obtenida del mismo, por parte de la aplicación servi-dor, permite conocer más a fondo al usuario, y a su vez contribuye a una mejor tomade decisiones en aspectos relacionados al análisis, diseño, desarrollo, mantenimiento einnovación de sitios web.Además de resolver los inconvenientes de generar código JavaScript, que debe serincorporado a cada una de las páginas de los sitios web que van a ser monitorizados,como es el caso de los servicios de estadísticas, debido a que este funciona como unaextensión del navegador Mozilla Firefox, con lo cual no es necesario agregar código alas páginas que serán estudiadas y a su vez se evita una disminución del rendimientode las mismas, ya que dicho codigo debe ser ejecutado internamente en la página para CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 11que pueda ser monitorizado, en contraposición al sistema anterior, donde el códigoJavascript se ejecuta como extensión del navegador y no internamente en la página.1.2. Propuesta tecnológicaA continuación se muestra un grá�co de la tecnología propuesta para la realizacióndel sistema de estadísticas anteriormente mencionado: Figura 1.1: Arquitectura propuesta para el TEG 1.2.1. Explicación de la arquitectura propuestaEn la presente sección se proporciona una síntesis de la arquitectura propuesta.Dichaarquitectura, se encuentra dividida en dos componentes: Sistema Cliente y SistemaServidor. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 121.2.2. Sistema ClienteEs el encargado de recolectar información acerca del comportamiento del usuariomientras navega por la Web. Dicho sistema está conformado por 3 componentes:Extensión del navegador Web: Representa la capa de presentación de la apli-cación, que fue creada utilizando el lenguaje de interfaces de usuario XUL ( XMLUser Interface).Comunicación con el núcleo: Encargado de capturar información acerca delos eventos realizados por el usuario mientras navega, ya sea sobre una páginaWeb determinada o sobre la capa de presentación de la extensión, tales como, elinvocar una interfaz de usuario, haciendo click en algunas sus opciones. El com-ponente Comunicación con el núcleo, dependiendo de los eventos acaecidos enlos escenarios ya descritos, establece o no una comunicación con el componentedenominado Componentes de la arquitectura de Mozilla Firefox, para obtener in-formación acerca de un determinado evento.Componentes de la arquitectura del navegador Mozilla Firefox: Con-formada por un componente multiplataforma que posee un modelo de objetossimilar al Microsoft COM, denominado XPCOM, que permite que los compo-nentes u objetos XPCOM, puedan ser utilizados o implementados por lenguajesde programación tales como: JavaScript, Java, Python, o C++; y la tecnologíaXPConnect, que permite la interoperabilidad entre componentes XPCOM y pro-cedimientos implementados en JavaScript.1.2.3. Sistema ServidorSe encarga de recibir la información recolectada por la aplicación cliente, y lacual es enviada por el mencionado, utilizando servicios Web REST implementados enJavaScript. El sistema servidor está conformado por los siguientes componentes:Manejador de la interfaz de servicios Web: Es el conjunto de componentesimplementados por medio de JAX-WS para el despliegue de servicios web REST,a objeto de que el cliente pueda enviar las estadísticas y obtener la con�guraciónde los proyectos de�nidos en el servidor.Gestor de estadísticas: Constituyen los componentes invocados por la interfazde servicios web para cargar las estadísticas de un documento XML en la base dedatos, o generar el XML de los proyectos con�gurados en el sistema.Núcleo del sistema: Conformado por los componentes que permiten la creacióny generación de los reportes en el sistema Web y ofrecen la comunicación de lacapa web con la capa de persistencia. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 13Controlador de datos: Tiene como función ofrecer una comunicación trans-parente entre el núcleo y la interfaz web con la base de datos del sistema. Estáconstituida por el conjunto de entidades de persistencia.1.2.4. FuncionamientoInicialmente el usuario debe crear un proyecto de estadísticas en el Sistema Servidor,a través de un sitio Web implementado en JSF (Java Server Faces) 1.2. Una vez creadoel proyecto, se instala la aplicación cliente en el navegador Mozilla Firefox y se realizanlas con�guraciones necesarias para iniciar el proceso de recolección.Dicho proceso se realiza de la siguiente manera:El Sistema Cliente solicita un id de visita al Sistema Servidor a través de un servicioWeb REST implementado en JavaScript. Si el Sistema Servidor no se encuentra activo,o no esta disponible, no se inicia la recolección de estadísticas en el Sistema Cliente. Encaso contrario, el Sistema Servidor, envía como respuesta un id de visita a la aplicacióncliente, utilizando un servicio Web implementado en JAX-RS ( Java API for RESTfulWeb Services).Posteriormente cuando un usuario ingresa a un dominio en la web; y dicho dominiopertenece al proyecto sobre el que se desea realizar la recolección de estadísticas; sinoexiste una visita activa, se inicia una nueva visita en la aplicación cliente. La aplicacióncliente inicia la recolección de información. Si el timeout de visita seleccionado por elusuario (el del Sistema Cliente o el del Sistema Servidor) expira, o el usuario decidecerrar el navegador, el Sistema Cliente envía la información recolectada hasta los mo-mentos al Sistema Servidor en forma de un archivo XML, utilizando un servicio WebREST implementado en JavaScript. Luego de enviar las estadísticas, el ciclo se inicianuevamente.Una vez �nalizada la recolección de datos estadísticos, el Sistema Servidor obtiene lainformación recolectada por el cliente, mediante un archivo XML enviado por el SistemaCliente. Dicha información es almacenada en la base de datos del Sistema Servidor, ya partir de su contenido se procede a la construcción de diversos reportes, en base a laspreferencias de con�guración del proyecto seleccionadas por el usuario, en el presentesistema, al momento de crear el proyecto de su preferencia.1.3. Objetivo generalDiseñar e implementar un Sistema de Recolección de estadísticas Web que obtengainformación acerca del comportamiento del usuario mientras navega por la red, paraque posteriormente, dicha información sea almacenada y visualizada de manera grá�ca. CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 141.4. Objetivos especí�cosDiseñar e implementar una aplicación del lado del cliente encargada de realizar elproceso de extracción de los datos, como una extensión para el navegador MozillaFirefox.Diseñar las interfaces de usuario correspondientes a la aplicación cliente para larecolección de datos del Sistema de Visualización y generación de estadísticas webcon�gurables.Desarrollar los módulos encargados de medir la interacción del usuario con lapágina web.Implementar el núcleo de la aplicación cliente encargado de la invocación de losservicios web residentes en la aplicación servidor.Implementar el núcleo de la aplicación servidor, que permita la creación de proyec-tos de estadísticas.Diseñar e implementar la base de datos residente de la aplicación servidor quepermita almacenar la información relacionada a los parámetros de interaccióndel usuario y la pagina, e integrarla al modelo de datos existente del Sistema deVisualización y generación de estadísticas Web.Desarrollar los módulos de la aplicación servidor encargados de generar los re-portes estadísticos que serán mostrados.Integrar la aplicación cliente con la aplicación servidor para formar el sistema devisualización y generación de estadísticas web.Aplicar pruebas a las funcionalidades desarrolladas en la aplicación cliente y enla aplicación servidor, para veri�car su correcto funcionamiento y comunicación,una vez integradas con el Sistema de Visualización y generación de estadísticasWeb.Utilizar un proceso de desarrollo ligero, enfocando el desarrollo de la aplicaciónen función de los requerimientos comunicados por el cliente.1.5. Proceso de desarrolloLa metodología a utilizar será eXtremme Programming (XP) o Programación Ex-trema, la cual constituye un proceso de desarrollo ligero, que intenta reducir la comple-jidad del software por medio del trabajo en equipo; generalmente en parejas; a objetode desarrollar la mayor cantidad de código en el menor tiempo posible, la transmisiónde conocimientos entre los diversos integrantes de un proyecto de desarrollo; a objetode que los programadores incrementen sus habilidades y por ende; el desarrollo de las CAPÍTULO 1. INTRODUCCIÓN Y PROBLEMA 15aplicaciones sea agilizado; y el desarrollar código de calidad, con la menor cantidad dedocumentación posible. Parte IMarco Teórico 16 Capítulo 2Firefox En el presente capítulo se explican los conceptos manejados en la arquitectura delnavegador Web Mozilla Firefox, de igual manera se exponen el conjunto de tecnologíasy lenguajes que hacen posible el funcionamiento del mismo. Adicionalmente se de�neel término extensión en el contexto del navegador Web y se presentan las ventajas ydesventajas de una extensión.2.1. De�niciónEs un navegador Web de código abierto desarrollado en el lenguaje de programaciónC++ que tiene la capacidad de incorporar cualquier número de aplicaciones comple-mentarias que pueden ejecutarse en máquinas que utilicen la mayoría de los sistemasoperativos de escritorios existentes, tales como: Microsoft Windows, OS X, Linux, Ma-cOS, entre otros [Feldt, 2007].2.2. Arquitectura multiplataforma de Mozilla FirefoxMozilla Firefox no es solo una aplicación convencional, su arquitectura está rela-cionada con aplicaciones Web que emplean HTML dinámico. Está constituída porplataformas basadas en estándares que permiten el manejo de eventos codi�cados enlenguaje JavaScript, y que residen en la interfaz XUL, que será explicada en el capítulo4. Por otra parte, el funcionamiento de la arquitectura del navegador Web radica encombinar lo que el usuario visualiza (a través del contenido Web) y las tecnologías fun-damentales usadas para accesar a la información, decodi�car, desplegar y estilizar elcontenido. Las tecnologías que hacen esto posible son quizás las menos comprendidasdel conglomerado de innovaciones de Mozilla [Firefox, 2009b]. 17 CAPÍTULO 2. FIREFOX 18En si la arquitectura del navegador web está basada en las siguientes tecnologías ylenguajes [Firefox, 2009d]:CSSJavaScriptXULXPIDLXPConnectXPCOMGeckoC++Las tecnologías y lenguajes anteriormente listados están asociados a los siguientescomponentes que conforman la arquitectura:Interfaz Grá�ca de Usuario (GUI): corresponde a toda la capa de pre-sentación de la aplicación al usuario �nal y está estructurada y basada en ellenguaje XUL. Adicionalmente la presentación del GUI es de�nida a través dearchivos CSS [Firefox, 2009d].Lógica de control: conforma todos los procesos de manejo de eventos entre lainterfaz de usuario y el núcleo del sistema. Esta lógica es manejada por medio dellenguaje JavaScript [Firefox, 2009d].Modelo de componentes: se encarga de establecer la comunicación entre lacapa de control y el núcleo a través de un sistema de objetos multiplataforma.Este modelo es manejado por medio de las tecnologías XPConnect y XPCOM[Firefox, 2009d].Núcleo del sistema: contiene toda la lógica de funcionamiento básica de laaplicación y el análisis del contenido Web para que pueda ser desplegado. Elnúcleo se encuentra desarrollado en C++ y utiliza como plataforma de renderizadoa Gecko [Firefox, 2009d] .La �gura 2.1 muestra la arquitectura del navegador Mozilla Firefox [Firefox, 2009b]. CAPÍTULO 2. FIREFOX 19 Figura 2.1: Arquitectura de FirefoxCSS (Cascading Style Sheets): es el lenguaje utilizado para describir la pre-sentación de documentos HTML o XML. Esto incluye varios lenguajes basados en XMLcomo son XHTML o SVG. Además, es usado para modi�car la interfaz de usuario deaplicaciones y programas, este es el caso de los productos basados en XUL como sonFirefox, Seamonkey o Thunderbird.[Firefox, 2009c] [Firefox, 2009b]JavaScript: es un lenguaje de scripts, interpretado, multiplataforma y parcialmenteorientado a objetos. Fue creado por Netscape especí�camente para su uso en el desa-rrollo de sitios Web. Actualmente es un estándar mantenido por el ECMA. Para mayorinformación consultar el capítulo 3 contenido en el presente documento. [Firefox, 2009a][Firefox, 2009b]XUL (XML User Interface Language): es el lenguaje XML para interfaces deusuario de Mozilla. Permite crear potentes aplicaciones multiplataforma que puedenejecutarse con conexión a Internet o sin ella; así como permitir que las aplicacionespuedan ser personalizadas con facilidad con texto alternativo, grá�cos, y diseños; porlo que pueden ser fácilmente instaladas o traducidas. [Firefox, 2009f] [Firefox, 2009b]XPIDL (Cross Platform Interface Description Language): es un lenguajede descripción de interfaces usado para especi�car clases en la interfaz XPCOM.El lenguaje de descripción de interfaces (IDL, por Interface Description Language)es utilizado para describir interfaces independientemente del lenguaje y de la máquina. CAPÍTULO 2. FIREFOX 20Los IDLs permiten de�nir interfaces que luego puedan ser procesadas por herramien-tas para autogenerar especi�caciones de interface dependientes del lenguaje. [Firefox, 2009e]XPConnect: es la tecnología que funciona como puente entre JavaScript y XP-COM. Dicha tecnología permite el uso de componentes XPCOM dentro de códigoJavaScript, así como la interacción con objetos JavaScript dentro de componentes XP-COM. [Firefox, 2007a]XPCOM(Cross Platform Component Object Model): XPCOM no es unlenguaje de programación. Es un modelo multi-plataforma sencillo, basado en COMque proporciona un lenguaje e interfaces independientes de la plataforma, que otrosobjetos pueden utilizar para acceder a sus servicios sin conocer su implementación.[Firefox, 2008b]Gecko: es el nombre del motor de presentación desarrollado por Mozilla. En unprincipio se llamó NGLayout. La función de Gecko es leer el contenido de la Web, enHTML, CSS o JavaScript, y presentarlo en pantalla o imprimirlo. [Firefox, 2007c] 2.3. Extensión de FirefoxEs un pequeño add-on (complemento agregado) que añade o modi�ca funcionalida-des en una aplicación principal (aplicación host) como Firefox [Firefox, 2008a].La gama de funcionalidades que abarca una extensión están principalmente dirigidasa la personalización del sistema host. Ejemplos de extensión en Firefox son:1. Agregar una nueva barra de herramientas con nuevas funcionalidades.2. Cambiar completamente una característica del navegador.2.3.1. VentajasNo requiere realizar cambios en el código de la aplicación principal con lo cual noes necesaria la compilación de la misma.No hace más complejo el código principal de la aplicación.Facilidad de integrarse como un módulo adicional en la aplicación.Fácil de remover.Permite realizar una personalización de la interfaz de usuario.Se proporciona informaciósn adicional al usuario. CAPÍTULO 2. FIREFOX 212.3.2. DesventajasSe requiere de una API para establecer una comunicación con la aplicación host.Pueden in�uir negativamente en el rendimiento del sistema.Necesita de la reinicialización de la aplicación para completar la instalación. Capítulo 3JavaScript El presente capítulo describe los conceptos involucrados con el lenguaje de progra-mación interpretado JavaScript, iniciando con la de�nición, especi�caciones o�ciales yversiones del lenguaje.3.1. De�niciónEs un lenguaje de programación interpretado basado en guiones (scripts) utilizadoprincipalmente en la creación de páginas Web dinámicas. Una página Web dinámica esaquella que incorpora efectos tales como animaciones, acciones que se activan al pre-sionar elementos de interfaz grá�ca de una página Web como botones, despliegue deventanas con mensajes de aviso al usuario, entre otros.En constraste con un lenguaje de programación no interpretado (como Java), elcódigo fuente JavaScript no requiere de procesos intermedios como la compilación paraser ejecutado, por lo tanto, puede ser probado directamente (código JavaScript embe-bido en una página Web) en cualquier navegador Web que sea capaz de interpretar ellenguaje.Por otra parte, JavaScript no guarda ninguna relación directa con el lenguaje deprogramación Java. Java es un lenguaje de programación compilado de alto nivel.Legalmente, JavaScript es una marca registrada de la empresa Sun Microsystems.[Producciones, 2008] [librosweb.es, 2009] 3.2. Especi�caciones o�cialesECMA ha publicado varios estándares relacionados con ECMAScript. En Junio de1997 se publicó la primera edición del estándar ECMA-262. Un año después, en Junio de22 CAPÍTULO 3. JAVASCRIPT 231998 se realizaron pequeñas modi�caciones para adaptarlo al estándar ISO/IEC-16262y se creó la segunda edición.La tercera edición del estándar ECMA-262 (publicada en Diciembre de 1999) es laversión que utilizan los navegadores actuales y se puede consultar gratuitamente enhttp://www.ecma-international.org/publications/standards/Ecma-262.htm.Actualmente se encuentra en desarrollo la cuarta versión de ECMA-262, que podríaincluir novedades como paquetes, espacios de nombres, de�nición explícita de clases,etc. ECMA también ha de�nido varios estándares relacionados con ECMAScript, comoel estándar ECMA-357, que de�ne una extensión conocida como E4X y que permite laintegración de JavaScript y XML. [librosweb.es, 2009] 3.3. Motores de JavaScript disponiblesMozilla.org ofrece dos motores de JavaScript. El primero JavaScript fue creado porBrendan Eich en Netscape, y ha sido actualizado (la versión 1.5 de JavaScript) paraajustarse a la tercera edición de ECMA - 262 desde entonces. Este motor, cuyo nombreen código es SpiderMonkey, es implementado en C.Por otro lado, el segundo motor denominado Rhino, y creado principalmente porNorris Boyd (también en Netscape) es un interpretador de JavaScript en Java. De lamisma manera que SpiderMonkey, Rhino es compatible con la tercera edición de ECMA- 262. [librosweb.es, 2010]3.4. Versiones de navegadores y de JavaScriptEl lenguaje ha ido avanzando durante sus años de vida e incrementando sus capaci-dades. En un principio se podían realizar muchas funcionalidades en la página Web,pero se contaba con pocas instrucciones para poder crear efectos especiales. Con eltiempo también el HTML ha avanzado, y se han añadido nuevas características talescomo las capas, que permiten estructurar y manejar los documentos de distintas formas[Producciones, 2008].JavaScript también ha avanzado y para manejar todas estas nuevas característicasse han creado nuevas instrucciones y recursos.Para resumir vamos a comentar las distintas versiones de JavaScript:JavaScript 1.0: nació con el Netscape 2.0 y soportaba una gran cantidad deinstrucciones y funciones, casi todas las que existen ahora ya se introdujeron en CAPÍTULO 3. JAVASCRIPT 24el primer estándar [Firefox, 2009a].JavaScript 1.1: es la versión de JavaScript que se diseñó con la llegada delos navegadores 3.0. Implementaba poco más que su anterior versión, ejemplode ello es el tratamiento de imágenes dinámicamente y la creación de arreglos[Firefox, 2009a].JavaScript 1.2: que viene junto con la creación de los navegadores 4.0. Tienecomo desventaja, que es algo distinta en plataformas Microsoft y Netscape, yaque ambos navegadores crecieron de distinto modo y estaban en competencia porel mercado [Firefox, 2009a].JavaScript 1.3: versión que implementan los navegadores 5.0. En esta ver-sión se han limado algunas diferencias y asperezas entre los dos navegadores[Firefox, 2009a].JavaScript 1.5: versión actual que implementa Netscape 6 [Firefox, 2009a].JavaScript 1.6: presenta algunas características nuevas, tales como las especi-�cadas a continuación: E4X(ECMAScript for XML), inclusión de nuevas opera-ciones sobre arreglos como el indexOf() y lastOf(), y strings genéricos [Firefox, 2009a].JavaScript 1.7: es una actualización de la versión 1.6 de JavaScript, donde seincluyen generadores e iteradores sobre estructuras tales como las listas, senten-cias let. El soporte para JavaScript esta disponible a partir de Firefox 2, Beta 1[Firefox, 2009a].JavaScript 1.8: está plani�cado para integrarse como parte de Gecko 1.9 (in-corporado en Firefox 3). Es una actualización menos sustancial que la descritaen JavaScript 1.7, pero tiene algunas actualizaciones para comprobar el progre-so hacia ECMAScript 4/JavaScript 2 e incluirá todas las nuevas característicasespeci�cadas en JavaScript 1.6 y JavaScript 1.7 [Firefox, 2009a].Por su parte, Microsoft también ha evolucionado hasta presentar su versión 5.5de JScript. Capítulo 4XUL XUL son las siglas de Lenguaje XML de Interfaz de Usuario, (del inglés: XML UserInterface Language), y es un lenguaje desarrollado para las interfaces de usuario (IU) deNetscape y Mozilla. Es parte del navegador de Internet Mozilla Firefox y otras aplica-ciones relacionadas, así como de Gecko, que es el motor de renderizado del navegador.De hecho XUL es tan poderoso que la interfaz completa del navegador Mozilla estáimplementada en este lenguaje.De forma similar al HTML, en XUL es posible crear una interfaz usando un lenguaje demarcado, de�nir la apariencia de esta interfaz con hojas de estilo CSS y usar JavaScriptpara manipular su comportamiento; a diferencia del HTML, XUL tiene un conjuntoextenso de componentes grá�cos utilizados para crear menús, barras de herramientas,cajas de texto, entre otros.En otras palabras, XUL puede usarse para crear interfaces multiplataformas, multidis-positivos y de forma ligera; que pueden ejecutarse con conexión a Internet o sin ella.Estas aplicaciones son fácilmente personalizables con texto alternativo, grá�cos, y diseños, por lo que pueden ser fácilmente instaladas o traducidas para diversos mercados.[Firefox, 2009f] [WikiBooks, 2009a]Algunos elementos que pueden ser creados son:Controles de entrada como los cuadros de texto y cajas de chequeo o veri�cación.Barra de herramientas con botones u otros contenidos.Menú en barras de menú o menú emergente.Pestañas de diálogos.árbol de información jerárquica o tabulada.Teclas de accesos directos.Barras de progreso. [Scribd, 2008] 25 CAPÍTULO 4. XUL 26Las siguientes �guras ilustran ejemplos de algunos componentes creados en XUL.Consultar las �guras 4.1, 4.2, 4.3 y 4.4. Figura 4.1: árbol de información jerárquica en XUL Figura 4.2: Pestañas de diálogos en XUL CAPÍTULO 4. XUL 27 Figura 4.3: Cuadros de texto en XUL Figura 4.4: Barras de progreso en XUL4.1. Ventajas de usar XULLa mayoría de las aplicaciones necesitan ser creadas usando características deuna plataforma especí�ca, lo que hace que su conversión a otras plataformas seacostosa en términos monetarios y de tiempo.Algunos usuarios querrían usar una aplicación en herramientas diferentes a unacomputadora tradicional, por ejemplo, dispositivos de mano. El lenguaje Java fuecreado con ese propósito: ser multiplataforma y multidispositivo, pero la creaciónde interfaces de usuario en Java es una tarea difícil.XUL fue diseñado para crear interfaces de forma fácil y rápida, además estádisponible en todas las versiones de sistemas operativos como Windows, Macin-tosh, Linux y Unix, pero el mayor inconveniente hasta el momento es que no escompatible con Internet Explorer.Para ilustrar su potencial, en este capítulo se desarrollarán algunos ejemplos. Seresalta la palabra potencial, debido a que las completas capacidades del XUL so-brepasan el alcance de este capítulo. CAPÍTULO 4. XUL 284.2. Características fundamentales1. Poderoso lenguaje de marcado basado en componentes: el �n de XULes construir aplicaciones multiplataforma, en constraste con DHTML el cual estádirigido a la construcción de páginas Web. Por esta razón, XUL es orientado haciael desarrollo de artefactos de aplicación tales como ventanas, etiquetas, botonesy campos de texto en lugar de páginas, niveles de encabezado e hipervínculos. Dehecho, muchos desarrolladores invierten una gran cantidad de tiempo y esfuerzoen lograr buenos resultados en sus páginas web DHTML, pero a costa de lacomplejidad y el rendimiento, sin el soporte de ningún estándar [Firefox, 2007b].2. Basado en estándares existentes: XUL es un lenguaje basado en el estándarde la especi�cación 1.0 de XML de la W3C. Las aplicaciones escritas en XULestán basadas en estándares tecnológicos adicionales de la W3C, en las cuales seresaltan: HTML 4.0, versiones 1 y 2 de Cascading Style Sheets (CSS), nivel 1 y 2del Document Object Model (DOM), JavaScript 1.5, incluyendo la tercera ediciónde ECMA-262 (ECMAScript) y XML 1.0 [Firefox, 2007b].3. Plataforma portable: igual que en HTML, XUL está diseñado para ser unaplataforma neutral, haciendo que las aplicaciones sean fácilmente portables a to-dos los sistemas operativos en los cuales Mozilla se ejecuta. Desde que XUL proveeuna abstracción de componentes de interfaz de usuario, este se basa en la premisade çodifícalo y ejecútalo donde desees". La interfaz de usuario para todas las apli-caciones con núcleo Mozilla (en las que se incluye Mozilla Firefox) están escritasen XUL con un único código base soportado en todas las plataformas Mozilla[Firefox, 2007b].4. Separación de la presentación de la lógica de negocios: el mayor talón deaquiles de la mayoría de las aplicaciones web es el fuerte acoplamiento entre loselementos de interfaz de usuario y la lógica de la aplicación cliente. XUL proveeuna clara separación entre la de�nición de la aplicación cliente y la lógica de pro-gramación (contenido consistente de XUL, XBL, y JavaScript), la presentación(consiste de CSS e imágenes), y las etiquetas con textos especí�cos del idioma(consiste en DTDs y cadenas internacionalizadas de�nidas dentro de archivos.properties). El despliegue y la apariencia de las aplicaciones XUL puede ser alte-rada sin tomar en cuenta la de�nición y la lógica de la aplicación. Adicionalmente,la aplicación puede ser internacionalizada en diversos idiomas y regiones indepen-dientemente de su lógica o presentación. Este grado de separación conlleva a lacreación de aplicaciones que son más fáciles de mantener por los desarrolladores.El �ujo de trabajo resulta más fácil de coordinar que aplicaciones web basadas enHTML, con un menor impacto en la calidad y estabilidad del sistema.[Firefox, 2007b]5. Fácil personalización y localización:Además de la separación que XUL ofreceentre la lógica de la aplicación, presentación e idiomas, es fácil de personalizar paradiferentes vendedores o grupos de usuarios. Un desarrollador puede mantener una CAPÍTULO 4. XUL 29base primaria de códigos, a la vez de personalizar el logo de la aplicación y en-lazarlo con diferentes vistas para proporcionar diferentes interfaces a cada uno delos vendedores.Una aplicación que es escrita y desplegada con una interfaz de usuario en Ingléspuede ser traducida al Francés por el mismo vendedor. Mientras que la mayoríade los cambios son extensivos y afectan a la mayoria y no a toda la aplicación,estos están separados entre si permitiendo que el núcleo y la lógica de la aplicaciónpuedan ser compartidas. [Firefox, 2007b] 4.3. Desarrollo en XULA continuación se proporciona una breve explicación acerca de la estructura de unarchivo XUL y el manejo de eventos en el mencionado.4.3.1. Estructura del archivoXUL es XML, y como todos los archivos XML, debe empezar con la declaraciónestándar de XML. Actualmente XUL utiliza la versión 1.0.Un archivo XUL debe tener una extensión .xul. El navegador Mozilla Firefox lo re-conocerá automáticamente y sabrá qué hacer cuando el usuario lo ejecute.Como archivos XML, las interfaces XUL, deben estar bien formadas, es decir cadaelemento debe tener su etiqueta de apertura y cierre.En el caso de ventanas en XUL, el elemento raíz para su construcción debe ser unaetiqueta window.< window > < /window >.Los documentos XML, son codi�cados para ser extensibles, o ser capaces de incor-porar diferentes tipos de elementos, dependiendo de que tipo de información va a sercodi�cada en el documento.Los documentos XHTML poseen elementos que representan elementos de documentosHTML tales como body, head, div, entre otros.No existen hojas de estilo implícitas para XUL, debido a esto, siempre debe existiruna declaración de hoja de estilo asociada.Mozilla incluye una hoja de estilo estándar llamada "xul.css".Aún cuando sea posible cargar las hojas de estilo que se deseen, la mejor práctica esusar inicialmente "xul.css", ver �gura 4.5. CAPÍTULO 4. XUL 30Nótese la referencia a chrome. El chrome es la parte de la aplicación que está fueradel área de contenido de una ventana. Barras de herramientas, barras de menú, barrasde progreso y títulos de ventanas son ejemplos de elementos que son parte típica delchrome. Chrome es el término descriptivo para nombrar todos los elementos de unaaplicación XUL.Todos los documentos XML deben tener una declaración de espacio (único) denombres (namespace). Los desarrolladores de XUL crearon un espacio de nombres quemuestra el origen del nombre XUL.La �gura 4.5 muestra un ejemplo del archivo "xul.css". Figura 4.5: Estructura del archivo xul.cssEl siguiente elemento notorio es la etiqueta < window > (ventana).Esta etiqueta es análoga a la etiqueta < body > (cuerpo) del HTML.Todos los elementos estarán dentro de la etiqueta window. En la �gura anterior, laetiqueta window tiene tres atributos, que son muy importantes.id: el atributo id es importante debido a que es la manera de identi�car la ventana,para que el código (JavaScript) de la aplicación pueda hacer referencia a ella.title: aún cuando el atributo no es necesario, es una buena práctica dar un nombredescriptivo, el título se mostrará en la barra de título de la ventana.orient: le indica al navegador la dirección en la cual mostrar los elementos des-critos en el archivo XUL (horizontal o vertical). Vertical es el valor por omisión,así por lo tanto no se especi�ca el atributo "horizontal", lo que indican que loscomponentes aparecerán uno sobre otro.Existen otras reglas de sintaxis que es necesario tomar en cuenta:1. Todos los eventos y atributos deben escribirse en minúsculas. CAPÍTULO 4. XUL 312. Todas las cadenas de texto deben estar entre comillas dobles (").3. Todos los componentes interactivos deben tener etiquetas de apertura y cierre < etiqueta > < /etiqueta > para estar bien formados.4. Todos los atributos deben tener un valor. [WikiBooks, 2009a]Ejemplos de componentes XULXUL posee una gran librería de componentes grá�cos, entre los cuales se incluyen:Botones.Cajas de texto.Barras de progreso.Etiquetas.Listas desplegables.Menús contextuales.Barra de desplazamiento, entre otros.A continuación se explicara la construcción de algunos de los componentes anterior-mente mencionados:Ejemplo básicoLa �gura 4.6 muestra el código fuente de una aplicación que imprime la frase HolaMundo 3 veces. [WikiBooks, 2009b] Figura 4.6: Código fuente para imprimir Hola Mundo 3 veces CAPÍTULO 4. XUL 32En la �gura 4.6 se indicaron 3 maneras distintas de desplegar la frase Hola mundo,en el navegador y el resultado �nal puede ser visualizado en la �gura 4.7 Figura 4.7: Hola mundo en el navegadorCabe destacar las diferentes formas en las que la frase es mostrada: dos veces uti-lizando la etiqueta description y una vez utilizando la etiqueta label.Ejemplo de contenedoresPara de�nir un componente contenedor XUL, se de�ne una etiqueta similar a laetiqueta < body > de HTML, para insertar componentes grá�cos. La etiqueta < box >sirve para encapsular otros elementos. Existen varios tipos de etiquetas box.En el siguiente ejemplo se utilizarán las etiquetas < hbox > (caja horizontal), < vbox >(caja vertical), < toolbox > (caja de herramientas) y < tabbox > (caja con pestañas deselección). < hbox > y < vbox > son iguales a la etiqueta < window > pero con los atributos�orient� = �horizontal� y �orient� = �vertical� respectivamente. Estos dos elementospueden tener otros componentes y a su vez pueden estar anidados. < toolbox > puedeusarse para crear barras de herramientas arriba o abajo de la ventana. < tabbox >,puede establecer hojas con lenguetas en las ventanas.En la �gura 4.8 se muestra el uso de los diversos tipos de etiquetas box. CAPÍTULO 4. XUL 33 Figura 4.8: Usos de etiquetas boxEs indispensable brindar una explicación acerca del funcionamiento del atributo �ex(contracción de �exible), el cual constituye una forma de posicionar y asignar tamañoa los componentes grá�cos de manera dinámica.Este atributo puede tener valores entre 0 y 1 (por ejemplo 0.5). A mayor valor, elcomponente ocupará un mayor porcentaje de área cuando el contenedor donde se en-cuentra cambie de tamaño. Cabe mencionar que también existen los atributos ”width”y ”heigth”, que de�nen la preferencia de tamañ o del componente.Ejemplo de menúsPara el despliegue de componentes interactivos al estilo de tipo menú se utilizan lasetiquetas: < menubar > < /menubar > < menu > < /menu > < menupopup > < /menupopup > < menuitem > < /menuitem >En la �gura 4.9 se despliega una barra con los menús Archivo, Editar y Ver. Figura 4.9: Barra de menú en XULAl hacer click en cada una de las opciones anteriormente mencionadas a continua-ción:En la �gura 4.10 se despliega la opción Archivo. CAPÍTULO 4. XUL 34 Figura 4.10: Menú 1 desplegado en XULEn la �gura 4.11 se despliega la opción Editar. Figura 4.11: Menú 2 desplegado en XULEn la �gura 4.12 se despliega la opción Ver. Figura 4.12: Menú 3 desplegado en XULEjemplo de PestañasEn la �gura 4.13 se hace referencia a la creación de 3 pestañas con diversos compo-nentes interactivos. CAPÍTULO 4. XUL 35 Figura 4.13: Pestañas desplegadas en el navegador utilizando XULLas pestañas se de�nen con la etiqueta < tab > y se les da un identi�cador (id) y untexto. A continuación se crea un conjunto de paneles, cada uno con contenido diferente.La primera pestaña (visualizada en la siguiente �gura) muestra la aplicación de estilosdentro del código como en HTML.Las siguientes pestañas tienen componentes con funcionalidad como lo son la barrade desplazamiento y el medidor de progreso funcionan.En la �gura 4.14 se muestra la barra de desplazamiento contenida en Hoja02 Figura 4.14: Barra de desplazamiento en XULEn la �gura 4.15 se muestra la barra de desplazamiento contenida en Hoja03 Figura 4.15: Medidor de progreso en XULEn la siguiente sección se explica como enlazar la interfaz de usuario con la lógicade funcionamiento de la aplicación mediante el uso de manejadores de eventos. CAPÍTULO 4. XUL 36 En la �gura 4.16 se muestran algunas de las instrucciones de como enlazar la interfazde usuario con la lógica de funcionamiento de la aplicación. Figura 4.16: Manejo de eventos en XUL 4.3.2. Manejadores de eventosXUL utiliza un esquema similar al de HTML para el manejo de eventos, a objeto depoder establecer una relación entre la interfaz de usuario y el núcleo de la aplicación.En HTML, un manejador de evento se asocia con un elemento y se realiza algunaacción cuando se activa el manejador. La mayoría de los manejadores de HTML tam-bién están en XUL y hay algunos más que solo se encuentran en XUL.A continuación se muestran algunos manejadores de eventos que son válidos por lamayoría de los elementos XULBlur: Un elemento pierde el foco. Manejador: onblur.Focus: Un elemento pierde el foco. Manejador: onfocus.KeyDown: En un elemento que tiene el foco se presiona una tecla.Manejador: onkeydown.KeyUp: Una tecla deja de ser presionada sobre un elemento que posee el foco.Manejador: onkeyup.KeyPress: Se presiona y suelta una tecla o se mantiene presionada.Manejador: onkeypress.MouseDown: Se pulsa con un botón del mouse sobre un elemento.Manejador: onmousedown.MouseUp: Se deja de pulsar un botón del mouse sobre un elemento.Manejador: onmouseup. CAPÍTULO 4. XUL 37MouseMove: Se mueve el cursor del mouse sobre un elemento.Manejador: onmousemove.MouseOut:Se mueve el cursor fuera de un elemento. Manejador: onmouseout.MouseOver: Se mueve el cursor dentro de un elemento.Manejador: onmouseover.Click:Se presiona y suelta un botón del mouse sobre un elemento.Manejador: onclick.DblClick: Se realiza doble click con un botón del mouse sobre un elemento.Manejador: ondblclick.Command: Un elemento es activado. Existen diversas maneras en los elementosson activados. Por ejemplo, un botón es activado cuando se hace click sobre élo se presiona la tecla enter cuando tiene el foco; un menú es activado cuando seselecciona con el mouse o presionando la tecla de acceso directo. Manejador:oncommand.En la �gura 4.17 se visualiza un código XUL donde se muestra la utilización dediversos manejadores de eventos como: oncommand, onclick y ondblclick. Figura 4.17: Código fuente para manejo de eventos básicos en XULEl código anterior permite que al hacer clic o se presione la tecla enter sobre unbotón se muestre una etiqueta con el nombre del botón que se presionó. Además, alhacer doble clic sobre el mensaje mostrado por el botón aparece el texto "Doble clic".Este comportamiento puede ser visualizado en las �guras mostradas a coninuación:En la �gura 4.18 se muestra la ventana inicial, sobre la cual no se ha realizadoningún tipo de evento. CAPÍTULO 4. XUL 38 Figura 4.18: Botones XUL En la �gura 4.19 se muestra una etiqueta con el nombre del botón que se presionó. Figura 4.19: Visualización de la etiqueta con el nombre del botón presionadoEn la �gura 4.20 se muestra el texto �Doble clic� cuando se hace doble clic sobre elcomponente �label� ubicado debajo de los botones. Figura 4.20: Texto �Doble clic� mostrado al hacer doble clic Capítulo 5Servicios Web Son un conjunto de aplicaciones o tecnologías con capacidad para interoperar enla Web. Estas aplicaciones o tecnologías intercambian datos entre sí con el objetivode ofrecer unos servicios. Los proveedores ofrecen sus servicios como procedimientosremotos y los usuarios solicitan un servicio llamando a estos procedimientos a través dela Web.Los servicios Web son usados para establecer la comunicación entre dos aplicaciones,ya que estos son una colección de protocolos y estándares que sirven para intercambiardatos entre aplicaciones, las cuales pueden estar desarrolladas en lenguajes de progra-mación diferentes, y ejecutadas sobre cualquier plataforma.Para el desarrollo de los servicios web existen diversas arquitecturas cuyas carac-terísticas pueden ser visualizadas en el cuadro 5.1.Arquitectura simple Arquitectura complejaInteracción simple Interacción complejaOrientada al consumidor Orientada a negociosCortos procesos de ejecución Largos procesos de ejecuciónNo soporta procesos de negocios colabora-tivos Soporte para procesos de negocios colabo-rativosNo garantiza seguridad y con�abilidad Soporta seguridad y con�abilidadCuadro 5.1: Comparación de arquitecturas de servicios webEn particular se utilizará una arquitectura de servicios web simple.Hoy en día existen diversas tecnologías para el desarrollo de servicios web, en estecaso se hará énfasis en la tecnología REST, que será explicada con mayor detalle en lasiguiente sección. 39 CAPÍTULO 5. SERVICIOS WEB 405.1. RESTEs una técnica de arquitectura de software para sistemas hipermedia distribuidoscomo la World Wide Web. REST es un término empleado por Roy Fielding, uno delos principales autores de la especi�cación del protocolo HTTP, durante la escritura deuna tesis doctoral sobre la Web, en el año 2000.La primera versión de REST fue desarrollada entre Octubre de 1994 y Agosto de1995, principalmente como un medio para comunicar los conceptos de Web cuando seescribía la especi�cación de HTTP/1.0 y la propuesta de HTTP/1.1 inicial.REST de�ne un conjunto de principios arquitectónicos para diseñar servicios Webque están enfocados en la administración de recursos de un sistema, incluyendo la formaen que los recursos son direccionados y transferidos sobre HTTP por medio de una granvariedad de clientes escritos en diferentes lenguajes. REST ha emergido en los últimosaños y se ha convertido en un modelo de diseño de servicios web predominante. Dehecho, REST ha tenido un gran impacto en la Web hasta el punto de ir desplazando alos servicios web basados en la tecnología SOAP e interfaz WSDL, por ser más fácil deutilizar.Principios de diseño básicoUna implementación concreta de un servicio web en REST sigue cuatro principiosbásicos de diseño:Emplea explícitamente métodos HTTP.Es sin estado.Expone la estructura de directorios como URIs.Trans�ere archivos XML, JSON (JavaScript Object Notation), o ambos.A continuación se procederá a explicar los principios ya mencionados.Uso explícito de métodos HTTPUna de las características claves de los servicios web REST es el uso explícito demétodos HTTP de manera que se siga el protocolo de�nido por el RFC 2616. HTTPGET, por ejemplo, es de�nido como un método para la obtención de recursos por partede una aplicación cliente, o para ejecutar una consulta en el servidor y esperar unarespuesta que incluya los recursos que concuerdan con la consulta realizada. CAPÍTULO 5. SERVICIOS WEB 41El principio básico de diseño de REST establece una relación uno a uno entre lasoperaciones crear, recuperar, modi�car y eliminar (CRUD) y los métodos HTTP. Deacuerdo a estas operaciones las relaciones serían las siguientes:Para crear un recurso en el servidor se emplea el método POST.Para recuperar un recurso se emplea el método GET.Para cambiar el estado de un recurso o modi�carlo se utiliza el método PUT.Para quitar o eliminar un recurso en el servidor se emplea el método DELETE.Esquema de trabajo sin estadoLos servicios web en REST necesitan ser escalables con la �nalidad de mantenerun buen rendimiento al aumentar los niveles de demanda del mismo. Por ejemplo, losservidores de clústeres con capacidades de balanceo de carga son normalmente orga-nizados siguiendo una topología de servicios, lo cual permite que una solicitud puedaser redireccionada de un servidor a otro cuando se necesite disminuir la sobrecarga y eltiempo de respuesta en la llamada a un servicio web. El uso de servidores intermediospara mejorar la escalabilidad requiere de clientes de servicios web REST que incluyanla información completa en la solicitud que se realizará, es decir, enviar toda la in-formación necesaria con la solicitud de manera que los componentes de los servidoresintermedios puedan redireccionar, enrutar y realizar balanceo de carga sin necesidad dealmacenar localmente información de estado entre solicitudes.Un servicio web REST (aplicación o cliente) debe incluir dentro de la cabecera yel cuerpo HTTP todos los parámetros, información de contexto, y los datos requeridospor los componentes del lado del servidor para que puedan generar una respuesta. Altrabajar en un esquema sin estado en los servicios web se mejora el rendimiento de es-tos, adicionalmente se simpli�ca el diseño y la implementación de los componentes dellado del servidor debido a que la ausencia de estado en el mismo, elimina la necesidadde sincronizar datos de sesión con una aplicación externa.En la �gura 5.1 se ilustra el diseño de un servicio con estado, donde la aplicaciónpuede solicitar la información de la próxima página a mostrar, de un conjunto de re-sultados que han sido paginados. Asumiendo que el servicio mantiene almacenada lainformación de la página actual que está siendo mostrada, en este diseño con estado elservicio incrementa y almacena una variable 'siguientePag' con la cual puede responderla solicitud del cliente. CAPÍTULO 5. SERVICIOS WEB 42 Figura 5.1: Ejemplo de un servicio web con estadoEl esquema de trabajo visualizado en la �gura anterior es complicado debido a lanecesidad que tiene el servidor de almacenar y habilitar la sincronización de datos dela sesión. Además, la sincronización de la sesión añade sobrecarga al servidor, lo cualin�uye negativamente en su rendimiento.Por otra parte, el diseño y desarrollo de componentes del lado del servidor que seansin estado es menos complicado. En un servicio Web REST, el servidor es el responsablede generar la respuesta y de proveer una interfaz al cliente, de manera que le permitamantener el estado de la aplicación por si mismo. Por ejemplo, en una solicitud depágina para un conjunto de resultados paginados, el cliente pudiera incluir el númerode página actual como parámetro a la solicitud de la siguiente página. Figura 5.2: Ejemplo de un servicio web sin estadoEn la �gura 5.2 un servicio web sin estado genera una respuesta con el enlace a lasiguiente página de resultados y le brinda al cliente la información del número de lapágina actual con la �nalidad de que pueda almacenarla. CAPÍTULO 5. SERVICIOS WEB 43Exposición de la estructura de directorios como URIsDesde el punto de vista de que las aplicaciones cliente solicitan recursos, el URIdetermina la ubicación del mismo. El URI de un servicio web REST debe ser intuitivo,de manera que pueda ser fácil de adivinar. En �n, la estructura de un URI debería sersencilla, predecible y entendible.Transferencia de archivos XML, JSON, o ambosTípicamente la representación de un recurso re�eja el estado actual del recurso ysus atributos, al momento que una aplicación cliente lo solicite. En adición, los ob-jetos en el modelo de datos de una aplicación están relacionados de alguna manera,y las relaciones entre los objetos del modelo de datos (recursos) estaría re�ejada en lamanera en que ellos son representados a la hora de ser transferidos a la aplicación cliente.En la �gura 5.3 se ilustra un ejemplo del formato de respuesta XML de un servicioweb REST representando un objeto "discusion".<?xml version="1.0"?><discussion date="{date}" topic="{topic}"><comment>{comment}</comment><replies><reply from="joe@mail.com" href="/discussion/topics/{topic}/joe" /><reply from="bob@mail.com" href="/discussion/topics/{topic}/bob" /></replies></discussion>Figura 5.3: Ejemplo de una respuesta XML de un servicio web RESTNo obstante, para que el cliente puede reconocer el tipo de formato devuelto por elservicio web, este último debe añadir esta información MIME (Multiporpouse InternetMail Extension) en la cabecera HTTP de la respuesta. Los tipos MIME soportados porREST se muestran en el cuadro 5.2. [Alex, 2007] [Costello, 2002] [Shailesh K. Mishra, 2007]Tipo MIME Content-TypeJSON application/jsonXML application/xmlXHTML application/xml+xhtmlCuadro 5.2: Tipos MIME soportados por REST Capítulo 6Estadísticas en la Web Hoy en día, la utilización de la Internet como medio de comunicación global entrelos usuarios que circulan por la red es cada vez es mayor.No obstante, muchos sitios web carecen de mecanismos que les permitan obtener infor-mación acerca de los usuarios que se encuentran conectados. Es por ello que herramien-tas como los visores de estadisticas web, constituyen una solución para entes públicos,privados y particulares, que les permita obtener información de interés, ya sea paragenerar ventajas competitivas, incursionar en mercados internacionales, rediseñar unsitio web desde el punto de vista estático, funcional, e incluso su arquitectura, de formaautomatizada.Entre los visores de estadísticas web más conocidos en la red actualmente se puedenmencionar:Servicios gratuitosGoogle Analytics [maestros del web, 2007]Clicky [maestros del web, 2007]StatCounter [maestros del web, 2007]ShinyStat [maestros del web, 2007]phpMyVisites [maestros del web, 2007]BBClone [maestros del web, 2007]EstadisticasGratis [maestros del web, 2007]Weboscope [maestros del web, 2007]A continuación se explicarán algunos de dichos servicios:44 CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 45Google Analytics: Es un servicio de estadísticas para sitios web. Surge a raíz dela compra de la empresa Urchin (hasta entonces la mayor compañía de análisis estadís-tico de páginas web) de Google, y ofrece una gran variedad de funciones y ventajaspara cualquier tipo de usuarios, ya sean ejecutivos experimentados, profesionales delmarketing, publicidad, propietarios de sitios web, desarrolladores de contenidos, y web-masters; de las cuales podemos mencionar: [Analytics, 2009]Implementación rápida: Con sólo copiar el código de seguimiento de Google Ana-lytics en cada una de las páginas de su sitio web, el mismo se inicia de forma inmediata(ver �gura 6.1) [Analytics, 2009]. Figura 6.1: Implementación rápidaComparativa de campañas y palabras clave: Compare y supervise todos susanuncios, boletines informativos por correo electrónico, campañas de a�liados, referen-cias, vínculos de pago y palabras claves en Google y otros motores de búsqueda (ver�gura 6.2) [Analytics, 2009]. Figura 6.2: Comparativa de campañas y palabras clavesPaneles personalizados: No busque más en los informes. Coloque toda la infor-mación que necesita en un panel personalizado que podrá enviar a otros usuarios porcorreo electrónico (ver �gura 6.3) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 46 Figura 6.3: Paneles personalizados Integración con AdWords: Compre palabras clave de AdWords de Google y utiliceGoogle Analytics para averiguar cuáles son las más rentables para usted (ver �gura 6.4)[Analytics, 2009]. Figura 6.4: Integración con AdWordsBúsqueda interna en sitios:Descubra de que forma los usuarios realizan búsquedasen su sitio, qué buscan y dónde culminan dichas búsquedas (ver �gura 6.5) [Analytics, 2009]. Figura 6.5: Búsqueda interna en sitiosComparativas: Averigue si los indicadores de uso de su sitio son superiores o in-feriores a los de su sector. Las comparativas permiten equiparar sus indicadores clavescon indicadores de rendimiento global; además de respetar la con�dencialidad de susdatos (ver �gura 6.6) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 47 Figura 6.6: ComparativasBarra deslizante de tendencia y fecha: Compare diversas tendencias de su sitioweb por períodos de tiempo, y seleccione intervalos de fechas sin perder de vista lastendencias a largo plazo (ver �gura 6.7) [Analytics, 2009]. Figura 6.7: Barra deslizante de tendencia y fechaSeguimiento de comercio electrónico: Permite realizar un seguimiento de sustransacciones mediante el uso campañas y palabras claves; obtener cifras de laten-cia y �delización, así como el identiti�car sus fuentes de ingresos (ver �gura 6.8)[Analytics, 2009]. Figura 6.8: Seguimiento de comercio electrónicoVisualización de redireccionamiento:Averigue hacia dónde se dirigen sus clientespotenciales (ver �gura 6.9) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 48 Figura 6.9: Visualización de redireccionamientoSuperposición del sitio: Acceda a información sobre el trá�co y sobre las con-versiones de cada vínculo al visualizar su sitio (sin descarga previa) (ver �gura 6.10)[Analytics, 2009]. Figura 6.10: Superposición del sitioInformes por correo electrónico: Programe o envíe informes personalizados porcorreo electrónico que contengan exactamente la información que desee compartir (ver�gura 6.11) [Analytics, 2009]. Figura 6.11: Informes por correo electrónicoOrientación geográ�ca: Averigue la procedencia de los usuarios que visitan su sitioweb e identi�que los mercados geográ�cos más lucrativos (ver �gura 6.12) [Analytics, 2009]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 49 Figura 6.12: Orientación geográ�caTecnologías utilizadas: Código Javascript, que puede ser incluido en las páginasque se deseen analizar, y el cual permite cargar algunos archivos desde los servidores deGoogle para monitorizar y enviar información al servidor Google, que posteriormentees almacenada en la cuenta del usuario correspondiente [Analytics, 2009].Posee una interfaz de reportes grá�cos desarrollados en Adobe Flash.EstadisticasGratis: Es un servicio de estadísticas que le permite analizar en detallelas estadísticas de su página web (Análisis de trá�co, marketing, per�l de usuarios) alinstante y desde cualquier sitio [EstadisticasGratis, 2004b] .Entre las funcionalidades que posee podemos hacer énfasis en las siguientes: Figura 6.13: EstadisticasGratis - Tipos de ReportesDentro de las funcionalidades asociadas al Trá�co Horario [EstadisticasGratis, 2004d]podemos observar lo mostrado a continuación (ver �gura 6.14 y 6.15): CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 50 Figura 6.14: EstadisticasGratis - Páginas vistas por hora Figura 6.15: EstadisticasGratis - Visitas por hora CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 51Ahora visualizaremos lo que la opción Trá�co Diario [EstadisticasGratis, 2004c]ofrece (ver �gura 6.16 y 6.17): Figura 6.16: EstadisticasGratis - Páginas vistas por día Figura 6.17: EstadisticasGratis - Páginas visitadas por día CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 52Entre las funcionalidades contempladas en la opciónTrá�co Mensual [EstadisticasGratis, 2004c]podemos visualizar las mostradas en los grá�cos posteriores (ver �gura 6.18 y 6.19): Figura 6.18: EstadisticasGratis - Páginas visitadas por mes Figura 6.19: EstadisticasGratis - Páginas vistas por mes CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 53Haciendo click en la opciónCalidad del color de Per�les de Usuario, [EstadisticasGratis, 2004a]se puede observar lo siguiente (ver �gura 6.20): Figura 6.20: EstadisticasGratis - Calidad del Color Servicios pagosXiTi Web AnalyticsWeb-stat3DStatsA continuación se proporciona una breve explicación acerca del servicio 3DStats.3DStats es un portal web que ofrece un servicio para analizar patrones de trá�coy per�les de usuario en su sitio web, y visualizar información en tiempo real sin lanecesidad de instalar ningún software. [3DStats, 2004a]Permite realizar un seguimiento del número de visitantes, solicitudes y órdenes paracualquier campaña publicitaria en linea que usted dirija.Cada vez que un usuario accede a su sitio web, se recolecta información que seráutilizada para proveerle detalles estadísticos en tiempo real del mismo. Dicho código esfácil de añadir a la página web existente, sólo se trata de copiar y pegar código HTML,y el cual no afecta el rendimiento de la misma. 3DStats soporta SSL.Las estadísticas de su sitio web están disponibles en cualquier momento y son pro-tegidas por una contraseña ( la clave que 3DStats le proporciona).Si no tiene tiempo para instalar el código de 3DStats, en su sitio web, un experto en3DStats puede ayudarlo. El precio inicial por esto es de 69 dólares. [3DStats, 2004b] CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 54A continuación un ejemplo de lo que la herramienta ya mencionada ofrece (ver�guras 6.21, 6.22, 6.23, 6.24, 6.25, 6.26 y 6.27) [3DStats, 2004c]: Figura 6.21: 3dStats - Reporte general Figura 6.22: 3dStats - Búsqueda personalizada Figura 6.23: 3dStats - Reporte por visitas, número de páginas y visitantes CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 55 Figura 6.24: 3dStats - Reporte por Mejor día Figura 6.25: 3dStats - Evolución de visitas en el tiempo Figura 6.26: 3dStats - últimas 40 visitas CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 56 Figura 6.27: 3dStats - Reporte del día 6.1. Medidores estadísticosEn la presente sección se hará énfasis en algunos de los medidores empleados parala recolección de estadísticas en la Web, los cuales son enumerados a continuación:1. Trá�co web: corresponde a la recolección de la cantidad de visitas realizadas enuna página durante un período de tiempo especí�co, el cual puede ser clasi�cadoen meses, días, horas, etc [3DStats, 2004c].2. Tecnología de usuarios: se re�ere a la recolección de datos tales como: in-formación del sistema operativo del computador desde el cual una página esvisitada, software del navegador, calidad de color, resolución de pantalla, etc[3DStats, 2004c].3. Ubicación geográ�ca: hace referencia a la recolección de datos correspondientesal país de procedencia del visitante de una página, así como el idioma del mismo[3DStats, 2004c].4. Lugar de procedencia: constituye la recolección de datos haciendo referencia ala URL desde donde llegan las visitas a una página [3DStats, 2004c]. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 576.2. Análisis de datos estadísticos en la WebEn esta sección se analizarán algunas causas del por qué muchos visores de estadís-ticas web arrojan resultados erróneos, así como el proporcionar elementos que permitandeterminar la �abilidad de un servicio de estadísticas web.La gran mayoría de servicios gratuitos de estadísticas de acceso web muestran unavisión distorsionada acerca de lo que realmente sucede en un sitio web. Sin embargoexiste la tecnología necesaria para realizar análisis de trá�co.No obstante, sólo suelen ser utilizadas por los servicios de estadísticas más costosos,por lo que muchos webmasters optan por los planes gratuitos, y quienes suelen con-tentarse con reportes y grá�cas que sólo re�ejan una parte de lo que en realidad estáocurriendo en su sitio web (en el mejor de los casos) ya que muchos servicios no reportancifras reales.6.2.1. Análisis de visitas de un sitio webLa mayoría de los sitios web están compuestos de varias páginas, y todas ellas tienenla posibilidad de recibir una visita sin necesidad de que el visitante ingrese en la páginade inicio. El tipo de visita directo (cuando el visitante ingresa en la página principalde la aplicación), tiende a incrementarse cuando las páginas han sido indexadas porbuscadores (que suelen mostrar subpáginas de diferentes sitios en los resultados de susbúsquedas). También es posible que desde otros sitios web existan enlaces hacia sub-páginas especí�cas de su sitio web, y ésta constituye otra fuente de visitas que no pasapor la página de inicio.Los sistemas de estadísticas que se basan en la inclusión de un botón en nuestrapágina de inicio sólo cuentan las visitas realizadas en la página principal, y por lo tantono proporcionan información de las actividades que se realizan en el resto de las páginasdel sitio web.6.2.2. Análisis de accesos o visitas a un sitio webEl acceso, es una apertura de página, no importa en qué condiciones: si se ingresaen un sitio web y se hace clic 9 veces en el botón �recargar� del navegador, esto genera10 accesos a la página (un acceso inicial al ingresar en la página, más 9 accesos quegenera recargándola). Posiblemente el webmaster vea el reporte y concluya: �Acaban deingresar diez personas�.La visita , se de�ne como la entrada de un usuario de forma individualizada a unapágina, independientemente de cuantas veces se abrió o recargó en el navegador. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 58Es muy común que una persona que visita un sitio web lo recorra abriendo variasveces determinadas páginas (para volver a acceder a un menú, o una lista de enlaces,por ejemplo).Cuando se maneja el concepto de �visita�, también debe manejarse el concepto detimeout de visita.El timeout de visita , es el tiempo de inactividad que debe transcurrir para que seconsidere que una visita ha concluído. Dicho timeout puede ser establecido por el web-master. Una vez transcurrido este tiempo de inactividad, si el visitante vuelve a abrirla página, esto se considera como una nueva visita. En �n, es posible que un usuarionos visite varias veces al día.Sólo se debe tener la precaución de determinar mediante el timeout si una nuevaapertura de página es parte de una visita en curso, o en cambio el usuario abandonala página, y después regresa generando una nueva visita. Para terminar de ilustrar elconcepto: imaginemos la situación que se generaría en una máquina instalada en uncibercafé, desde donde un usuario visitó nuestra página. Si al cabo de un rato esa mis-ma máquina es ocupada por un nuevo usuario que también abre nuestra página, no hayninguna razón para dejar de contabilizarlo como visita.6.2.3. Clientes detrás de proxys y routers NATUn servidor proxy es un dispositivo que permite acelerar la conexión a Internet desus clientes (las computadoras que están con�guradas para navegar haciendo uso desus servicios). El servidor proxy guarda en la memoria caché las páginas Web a las queacceden los sistemas clientes de la red durante un cierto tiempo.Cuando un sistema solicita la misma página web, el servidor proxy utiliza la informa-ción guardada en la memoria caché en lugar de recuperarla del proveedor de contenidos.De esta forma, se accede con más rapidez a las páginas Web. Adicionalmente consti-tuyen un mecanismo de seguridad implementado por los administradores de la red enun entorno de Intranet para desactivar el acceso o �ltrar las solicitudes de contenidopara ciertas sedes Web consideradas ofensivas o dañinas para la red y los usuarios.Por ejemplo: en una escuela un proxy permite que el administrador bloquee el accesoa páginas para adultos, logrando al mismo tiempo una gran calidad de navegación apesar de poseer una línea de baja velocidad para atender decenas de computadores enel aula de informática.El problema radica en que todas las peticiones a Internet parecen salir de unaúnica máquina (el proxy), que esconde la actividad individual de las máquinas que seencuentran detrás. CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 59A su vez existen dos tipos de proxy:Los normales: este tipo de proxy añade en la cabecera HTTP información desu condición de proxy y qué máquina está llevando a cabo el acceso.Los anónimos: este tipo de proxy esconde a Internet su condición de proxy.Por otra parte, el NAT (Network Address Translation) es implementado medianterouters (complejos dispositivos encaminadores, que constituyen el soporte de las co-municaciones en Internet) y es una técnica que permite a un proveedor de acceso aInternet lograr que una gran cantidad de clientes naveguen usando una misma direc-ción IP (Internet Protocol). Para las empresas que cuentan con pocas direcciones IP esuna solución ideal: las direcciones IP son un recurso cada vez más escaso, por lo que latécnica NAT se usa cada vez más. Existen pequeñas ciudades y poblaciones enteras quese conectan a Internet mediante un NAT con�gurado por su compañía de telecomuni-caciones, usando unas pocas direcciones IP para la conexión de miles de clientes. Desdeel punto de vista de un sistema de estadísticas, todas esas máquinas son en realidadvistas como si se tratara de un solo cliente (lo que le lleva a tener reportes de trá�cocompletamente alejados de la realidad).Existe una tecnología capaz de individualizar los clientes que nos visitan desde atrásde un NAT o un proxy anónimo: el �client footprint�, que consiste en el análisis de unpaquete de características particulares de su máquina (la �huella� de la máquina), y quele permite saber qué máquinas distintas están generando actividad en su sitio web apesar de venir desde una misma IP. Esta técnica es usada por muy pocos sistemas deestadísticas web.6.2.4. Visitas desde .COM .NET .EDU y .ORGEn los reportes sobre el origen geográ�co de las visitas puede observar cuántos ac-cesos ha tenido desde España, México, Argentina, etc. Pero posiblemente verá entre lospaíses, que lo han visitado desde �EEUU Comercial (.com)�, o desde �.net y .org�.Di�cilmente las visitas que dicen ser de �EEUU Comercial(.com)� realmente proven-gan de Estados Unidos, ya que el dominio COM puede estar asociado a una máquinaen cualquier lugar del mundo. Lo mismo para NET, EDU y ORG.Entonces ¾por qué el sistema de estadísticas no le proporciona el lugar geográ�co realde la visita, en lugar de decirle que es desde una red COM?. Porque se está utilizandouna tecnología fácil pero inapropiada: la resolución DNS reversa.En la resolución DNS reversa, cuando llega una visita a un sitio web, se obtendrála IP de la máquina que realizó la petición (ejemplo: 200.96.85.14). Entonces el sistemade estadísticas hace una búsqueda DNS reversa para esa IP, con el �n de obtener el CAPÍTULO 6. ESTADÍSTICAS EN LA WEB 60nombre de la máquina.Un método serio para determinar la situación geográ�ca de una dirección IP esmediante una base de datos de direcciones IP repartidas por países. Es el métodoque usan tecnologías tales como GeoIP (http://www.maxmind.com), o directorios deinternet como ip-to-country (http://ip-to-country.webhosting.info/) entre otros.6.2.5. Análisis de logsOtra herramienta para obtener datos estadísticos en los sitios web, es el análisis delogs del servidor web.Hoy en día, existen programas que analizan los archivos de registro de actividadgenerados por el propio servidor. Estos registros son sin duda la fuente de informaciónmás �el acerca de qué es lo que ocurre en un sitio web. Pero su uso resulta engorroso, y lainformación que se obtiene es incompleta, por ejemplo, no se especi�can las capacidadesdel navegador en cuanto a extensiones, y no pueden identi�car clientes detrás de proxyso NATs. Parte IIMarco Aplicativo 61 Capítulo 7Marco Aplicativo En el siguiente capítulo se describen los aspectos más importantes del proceso dedesarrollo Programación Extrema(XP) y la adaptación del proceso de implementación,para el desarrollo de la herramienta que se desea construir.7.1. Adaptación del proceso de desarrollo XPeXtremme Programming (XP)[xprogramming, 2001] es un proceso de desarrollo ágilbasado en la simplicidad del software, la comunicación directa entre los integrantes in-volucrados en el proceso, el seguimiento del desarrollo y la reutilización de código, noenfocandose en la documentación, sino en los requerimientos comunicados por el cliente.El proceso de desarrollo XP está basado en iteraciones que permiten ir desarrollan-do entregables del sistema hasta obtener el producto �nal. Inicialmente se realiza unanálisis de requerimientos y durante el resto del proceso de desarrollo se mantiene unaretroalimentación progresiva entre los actores involucrados con la �nalidad de monitore-ar el progreso del desarrollo de la aplicación, detectar cambios y realizar las correccionespertinentes; que los desarrolladores involucrados incrementen sus habilidades, y el ag-ilizar los procesos de construcción del software deseado. Durante el desarrollo de lapresente herramienta, las iteraciones estan basadas en lapsos de tiempo de cada par desemanas. A �n de no extender el presente documento cada iteración es agrupada enlapsos de 4 semanas.7.2. Actores y responsabilidadesExisten diferentes actores y responsabilidades en XP para diferentes actividadesy propósitos durante el proceso. Para el presente trabajo especial de grado los rolesexistentes son: 62 CAPÍTULO 7. MARCO APLICATIVO 63a)Programador: quien es el responsable de las decisiones técnicas y de construirel sistema teniendo como labores: Analizar, diseñar, implementar y realizar laspruebas del sistema ya mencionado.b)Cliente: quien es parte del equipo, y determina qué construir y cuando, elabo-ra pruebas funcionales para determinar cuando esta completo un requerimientodeterminado o no.En el cuadro 7.1 se muestran las personas encargadas para cada rol.Roles existentes durante el desarrolloRol NombreProgramador Br. Angel GilProgramador Br. José SanchezCliente Prof. Sergio RivasCuadro 7.1: Roles existentes durante el desarrollo 7.3. Metáfora del sistemaEs un lenguaje que se utiliza para describir la arquitectura de una aplicación, conla �nalidad de ayudar a facilitar la comunicación entre los desarrolladores y el cliente.A continuación se describen los módulos principales que conforman el software adesarrollar:7.3.1. Aplicación Clientea) Módulo Visor de estadísticas Web, creado para visualizar las diversas op-ciones de con�guración del visor de estadísticas web, e información acerca de losautores de la aplicación. Dicho módulo puede ser desplegado mediante el uso delclick derecho del mouse, o a través de la barra de herramientas del navegador, omediante el panel de extensiones que provee el navegador Mozilla Firefox.b) Módulo Parseo de datos, se encarga de obtener información básica acercade cada uno de los proyectos existentes en el servidor de la aplicación, y queposteriormente son cargados en la interfaz de opciones del visor de estadisticasweb.c) Módulo Recolección de estadisticas, analiza el comportamiento del usuarioen la web, mediante diversos parámetros ya establecidos en el servidor de la apli-cación. CAPÍTULO 7. MARCO APLICATIVO 64d) Módulo Envío de datos Encargado de enviar la información obtenida acercadel comportamiento del usuario en la web al servidor de la aplicación.7.3.2. Aplicación Servidora)Módulo Capa de acceso a datos: encargada de permitir un acceso transpa-rente a las capas superiores y a la fuente de datos del sistema, en nuestro casola base de datos (BD) desplegada en el Sistema Manejador de Base de Datos(SMBD) MySQL. Dicha capa esta conformada de los siguientes submódulos:� a.1) Submódulo Acceso/Gestión de entidades: es el conjunto de objetosque conforman las entidades de persistencia y permiten realizar las opera-ciones CRUD en las respectivas entidades de la BD. Lo anterior se implemen-ta empleando el patrón DAO y fáricas de objetos propuesta por Hibernate[Gavin king, 2009].� a.2) Submódulo Interfaz de conexión con BD: constituye el grupo deobjetos que permiten lograr una conexión transparente con la base de datos,esto se logra utilizando las tecnologías JPA y Hibernate.b)Módulo Capa de procesamiento de datos: encargada de permitir la car-ga/almacenamiento de estadísticas y de generar los objetos correpondientes paracada uno de los reportes del sistema. Se encuentra conformado por los sub-módulosespeci�cados a continuación:� b.1) Submódulo Carga de estadísticas: conformado por un conjunto deobjetos que permiten leer y validar los documentos XMLs con los datosestadísticos enviados por las extensiones clientes, a través de la tecnología decarga/validación y mapeo de datos XMLs a objetos de JAXB [Oracle, 2010].Por otra parte, dichos datos son cargados en las entidades de la BD pormedio de la capa de acceso a datos.� b.2) Submódulo Generación de reportes: constituido por clases de utili-dades, fábricas y pool de objetos que de�nen los diversos reportes que puedenser generados en el sistema. A través de las entidades mencionadas anterior-mente, se permite la generación de los datos de los reportes, utilizando elframework de colecciones (listas) de Java, permitiendo de esta manera quela capa web pueda utilizar el presente módulo para generar la presentaciónde los reportes por medio de ampliaciones a través del patrón Decorator[Erich Gamma, 1994].c)MóduloCapa de presentación y despliegue de servicios web: conformadopor los siguientes sub-módulos: CAPÍTULO 7. MARCO APLICATIVO 65� c.1) Submódulo Interfaz Grá�ca de Usuario Web: representa las clasesy objetos que de�nen las páginas visualizadas en el sistema y el conjuntode controladores y modelos de presentación de las diversas secciones para lagestión de los proyectos, sesiones de proyectos y visualización de los reportesestadísticos. Lo anteriormente expuesto es contruido utilizando el frameworkJavaServer Faces (JSF) [Chris Chalk, 2007].Adicionalmente diversos componentes del presente módulo emplean la libre-ría de componentes para JSF denominada PrimeFaces [PrimeFaces, 2009].� c.2) Submódulo Despliegue de servicios web REST: conformado porun conjunto de clases que representan los recursos (por implementación deservicios web REST) [Fielding, 2000] de�nidos en el sistema y conformar lainterfaz de comunicación entre la extensión cliente y el sistema servidor. Elconjunto de recursos es implementan a través de la tecnología de desplieguede servicios web REST, JAX-RS [Oracle, 2010].� c.3) Módulo Presentación de reportes: permite la generación y desplieguede los reportes de�nidos en la capa de procesamiento utilizando ampliacionesa dichos componentes a través del patrón de diseño de software Decorator[Erich Gamma, 1994]. Cabe destacar, que los componentes grá�cos de los re-portes emplean la librería OpenFlashChart 2 (OFC2) y una implementaciónajustada a dicho sistema del API de Java para OFC2 denominado JOFC2.En adición a lo anterior, la visualización de los grá�cos del lado del nave-gador se logra a través de la implementación de un componente para JSFgracias a su gran capacidad de extensión.� c.4) MóduloGeneración de bitácora: debido a la utilización de la metodo-logía XP y la realización de las pruebas al �nal de cada iteración, se incluyeel framework log4j [Apache Software, 2010] para la generación de mensajestipo log acerca de las actividades en el sistema e inclusive para las unidadesde pruebas asociadas a cada componente existente en las capas de proce-samiento y acceso a datos. Las unidades de pruebas utilizan la tecnologíaJUnit para pruebas unitarias de las clases y un conjunto de clases.A continuación se detalla la interacción de cada uno de los módulos de la aplicación: CAPÍTULO 7. MARCO APLICATIVO 66 Figura 7.1: Interacción - Módulos de la Aplicación 7.4. Adaptación de las actividades XPLa aplicación de las actividades XP busca lograr el éxito en la comunicación con elcliente y la agilidad en el proceso de desarrollo.Se describen cuatro actividades fundamentales durante las iteraciones, y las mismasson adaptadas como se describe a continuación:a)Objetivo: Se de�ne de forma general los requerimientos que se esperan cumpliren una iteración determinada. Dicha actividad no pertenece al método XP perose considera necesaria para el desarrollo de las iteraciones.b)Plani�cación: Se identi�can las actividades realizadas para alcanzar el obje-tivo descrito.d)Desarrollo: Se identi�can y proponen soluciones para llevar a cabo una deter-minada actividad, mediante el diseño de la solución y la elaboración de diagramas;aunado a esto, se realiza la implementación de las actividades propuestas en laplani�cación.e)Pruebas: Constituyen un conjunto de test de aceptación, en donde el usuarioo cliente pone a prueba la solución desarrollada, y veri�ca que los requerimientosplanteados han sido desarrollados correctamente. CAPÍTULO 7. MARCO APLICATIVO 67Existe la posibilidad de que en algunas iteraciones no se contemplen todas lasactividades descritas anteriormente. Lo antes expuesto esta condicionado a losrequerimientos a desarrollar en cada iteración.7.4.1. Estrategia de desarrolloCada iteración se realiza en un lapso estimado de 2 semanas y por cada 3 iteracionesse realiza una presentación al cliente para su aceptación. Cabe destacar, que a objeto deno hacer muy extenso el presente documento, cada iteración representa 4 semanas detrabajo, y en cada una de estas se resaltan los aspectos más importantes del desarrollo,por el motivo mencionado anteriormente.El esquema de trabajo se estructura como se plantea a continuación:7.4.2. Iteración 0Objetivo: Analizar y diseñar el modelo de datos del sistema en general así comoel proceso de interacción entre la aplicación cliente y la aplicación servidor.Plani�cación:1. Análisis y diseño de la aplicación cliente y servidor respectivamente.2. De�nición de la lógica de interacción entre la aplicación cliente y la aplicaciónservidor.3. Determinación de las tecnologías a utilizar en el lado del cliente y el lado delservidor, así como de las herramientas de desarrollo necesarias para construirla solución planteada.4. Investigación acerca de como crear una extensión para el navegador MozillaFirefox.5. Creación de ejemplos de interfaces de usuario en XUL ( XML User Interface).6. Creación de una extensión para el navegador Mozilla Firefox.7. Creación de la capa de persistencia para el modelo de datos de la aplicaciónutilizando la tecnología JPA(Java Persistence API).8. Creación de fábricas de objetos utilizando el Patron Abstract Factory. CAPÍTULO 7. MARCO APLICATIVO 68Desarrollo: En la �gura 7.2, se muestra la primera versión del Diagrama declases de la aplicación servidor. Figura 7.2: Diagrama de Clases de la aplicación Servidor - versión inicialPruebas: A los componentes de base de datos construidos utilizando la libreríaJPA se le de�nen y ejecutan casos de pruebas unitarios y de interacción contra labase de datos cargada en MySQL, por lo cual se obtiene un error especí�camenteen la clase DAOEstadisticaVisitaJPA, realizando las correcciones pertinentes yobteniendo luego resultados exitosos en todos los casos de pruebas.7.4.3. Iteración 1Objetivo:Crear el modelo inicial de las interfaces grá�cas de usuario para la extensiónde Mozilla Firefox e implementar los manejadores de datos de las entidades deproyectos y estadísticas del modelo de datos.Plani�cación:1. Creación de la interfaces: opcionesVisor.xul e infoOpcionesVisor.xul.2. Creación de las clases encargadas de manejar la información referente a losproyectos.3. Creación de una utilidad para el manejo de las preferencias de los proyectosy estadísticas. CAPÍTULO 7. MARCO APLICATIVO 694. Creación y actualización de DAOs (Data Access Object) para poder realizarlas operaciones CRUD(Create-Read-Update-Delete) sobre las entidades dela base de datos.Desarrollo: En la �gura 7.3 se puede visualizar el método encargado de cargarla lista de proyectos en el sistema. Figura 7.3: Método encargado de cargar la lista de proyectos en el sistemaPruebas: Al igual que en la iteración anterior se ejecutan los casos de pruebasunitarios utilizando JUnit en los DAOs de proyectos y estadísticas, logrando en-contrar un error en el identi�cador de la clase EstadisticaCampo. Adicionalmentese ejecutan pruebas de interacción de usuario con las interfaces grá�cas en XULde la extensión obteniendo resultados exitosos.7.4.4. Iteración 2Objetivo:Analizar e implementar el primer conjunto de estadísticas recolectadas por laaplicación cliente tales como información general del computador, datos de clics,desplazamiento en las páginas, visualización en pantalla completa, y la creación delos documentos XML que se intercambiarán entre las aplicaciones involucradas.Plani�cación:1. Investigación y desarrollo de la funcionalidad Número de visitas, Cantidadde acceso, Número de clics, Ubicación de los clics, Pantalla Completa, In-formación Cliente, Desplazamiento horizontal y Desplazamiento vertical, ySubmit. CAPÍTULO 7. MARCO APLICATIVO 702. Creación de algunas de las clases generadoras del documento XML y de lacon�guración de todos los proyectos habilitados a existir en la aplicación.3. Creación de una utilidad general con métodos de ayuda para el documentoXML.4. Actualización de la clase GeneradorXMLProyecto para generar el XML conla con�guración completa de los proyectos de estadísticas. En este puntola clase se encuentra en una fase de pruebas ya que su desarrollo está por�nalizar.Desarrollo: En la �gura 7.4, se puede visualizar la implementación del métodopantalla completa. En la �gura 7.5, puede apreciarse la implementación de lasfuncionalidades: Versión del Navegador y Dirección IP. Figura 7.4: Funcionalidad Pantalla Completa01 CAPÍTULO 7. MARCO APLICATIVO 71 Figura 7.5: Funcionalidades - Versión del Navegador , Dirección IPPruebas: Los casos de pruebas en la presente iteración se realizan comparandolos datos estadísticos generados por la aplicación cliente con respecto a la informa-ción del computador, contra los datos reales del computador donde se encuentrainstalada la extensión. Cabe destacar que se obtiene una falla relacionada con lafunción encargada de obtener la versión del navegador. Dicha falla es corregidapara dar �n a las pruebas de esta iteración. CAPÍTULO 7. MARCO APLICATIVO 727.4.5. Iteración 3Objetivo: Analizar e implementar el segundo conjunto de estadísticas capturadaspor la extensión cliente asociadas con los tiempos de cargas de las páginas web,los tiempos de interacción del usuario y el desarrollar los componentes encargadosde almacenar los datos enviados en formato XML por el cliente al servidor.Plani�cación:1. Investigar y desarrollar la funcionalidad Tiempo de Carga de una página.2. Investigar y desarrollar la funcionalidad Tiempo de Uso de una página; esdecir el tiempo de actividad e inactividad de un usuario en una página Web.3. Actualización de la clase de utilidad para el manejo de documentos XML:XMLUtil.4. Desarrollo del método encargado de la generación del archivo XML que con-tiene la con�guración de todos los proyectos habilitados en el sistema; en laclase ManejadorXML.5. Desarrollo del método para la carga de los datos estadísticos contenidosen un documento XML en las entidades de la base de datos, en la claseManejadorXML.6. Veri�cación y validación de datos contenidos en el documento XML; y cargaexitosa de los mismos a la base de datos. Aunado a esto, se realizan valida-ciones acerca del ingreso de datos no correctos objetivamente.7. Finalización de la validación objetiva de datos estadísticos contenidos en eldocumento XML; y �nalización de la carga de datos a las diversas entidadesde la base de datos.8. Creación de la clase ManejadorFabricasDAO; encargada del manejo e instan-ciación de las fábricas de DAOs, asociándolas a diversos hilos de ejecución.9. Actualización de las fábricas de DAOs, FabricaDAO y FabricaDAOJPA, aobjeto de añadir métodos para el manejo de transacciones; y de cierre de lafábrica.10. Ajustes sobre el archivo de con�guración de persistencia persistence.xml paratrabajar bajo un ambiente JTA.11. Ajustes sobre la fábrica general FabricaDAO para la inclusión de la transac-ción JTA (manejada por el servidor web).Desarrollo: En la �gura 7.6, se visualiza la manera en que es calculado el tiempoque tarda una página web en cargarse. Cabe destacar que el valor retornado esen milisegundos. CAPÍTULO 7. MARCO APLICATIVO 73 Figura 7.6: Funcionalidad - Tiempo de Carga de una páginaPruebas: El conjunto de pruebas de esta iteración se divide en dos secciones:cliente y servidor.En el lado del cliente, las pruebas se realizan con ayuda de la extensión HttpFox,midiendo los tiempos de cargas generados por la extensión cliente y comparán-dolos con los tiempos de cargas generados por la extensión HttpFox, los cualesfueron iguales con un margen de error de menos del 0.5%.Respecto a la aplicación servidor las pruebas se ejecutan enviando datos de unarchivo XML local bien de�nido (en total se arman 21 XMLs de prueba) y com-parando estos datos con los almacenados por el sistema en la base de datos.Posteriormente se obtienen problemas de validación de data del XML al momentode ser almacenado, procediendo a su corrección y �nalizando las pruebas de laiteración. CAPÍTULO 7. MARCO APLICATIVO 747.4.6. Iteración 4Objetivo:Terminar la implementación de la captura de estadísticas de información delusuario por parte de la extensión del navegador Mozilla Firefox así como diseñary desarrollar las interfaces grá�cas de usuario de inicio de sesión en la aplicaciónWeb.Plani�cación:1. Culminación del desarrollo de la funcionalidad País de procedencia del usuario.2. Implementación de la funcionalidad Cantidad de Colores de la Pantalla deComputador.3. Implementación de la funcionalidad Dirección IP del usuario.4. Creación de la páginas de inicio de sesión, registro de usuarios, AdministrarProyectos y Creación de proyectos en Java Server Faces 1.2.Desarrollo:: En la �gura 7.7 se pueden apreciar los componentes utilizados paraobtener la dirección IP del usuario, tales como: Resolución DNS, y la utilizacióndel servicio dns-service de Mozilla. Figura 7.7: Funcionalidad - Dirección IP del Usuario Pruebas: Los casos de pruebas se ejecutan construyendo primero las clases querealizan las veri�caciones utilizando la librería JUnit, que validan la correcta in-formación de autenticación del usuario por el componente de inicio de sesión. Al�nalizar el proceso de pruebas se obtienen resultados satisfactorios. CAPÍTULO 7. MARCO APLICATIVO 757.4.7. Iteración 5Objetivo: Diseñar e implementar las interfaces grá�cas de usuario para la apli-cación asociadas a la gestión de proyectos de estadísticas y �nalizar la construcciónde las interfaces grá�cas para las opciones de con�guración de la aplicación cliente.Plani�cación:1. Investigación y desarrollo de componentes de tipo Groupbox, PreferedPaney tabpanel de XUL.2. Inclusión de los métodos de habilitación y deshabilitación de los proyectosde estadísticas.3. Inclusión de los métodos de activación y desactivación de las sesiones de losproyectos de estadísticas.4. Realización de las pruebas correspondientes a los nuevos métodos.5. Ajustes en la página de creación y visualización de los detalles de cada unode los proyectos, aunado a la creación de clases java para la habilitación ydeshabilitación de proyectos.Desarrollo: En la �gura 7.8 se proporciona un ejemplo de uno de los componentestipo XUL, utilizados para la creación de las interfaces de usuario de la aplicacióncliente. Figura 7.8: Componente tipo groupbox Pruebas: Los casos de pruebas se construyen en base a la ejecución de �ujosde procesos para la creación de proyectos de estadísticas, comparando los datosingresados como entrada en la aplicación web con la información almacenadosen la base de datos, es decir, se ejecutan pruebas basadas en el estado �nal delsistema. Adicionalmente se implementan las clases para los casos de pruebas em-pleando JUnit. Luego de la ejecución de las pruebas se realizan cambios en los CAPÍTULO 7. MARCO APLICATIVO 76componentes de validación de datos de entrada y �naliza la fase de pruebas deesta iteración.7.4.8. Iteración 6Objetivo: Analizar y desarrollar el tercer conjunto de estadísticas recolectadaspor la extensión cliente relacionadas con el uso de los botones de navegacióndel navegador Mozilla Firefox e integrar los menús de acceso a las opciones decon�guración con el navegador.Plani�cación:1. Implementación y realización de pruebas de las funcionalidades de uso decomando del navegador: Atrás, Siguiente, Actualizar y Detener.2. Actualización visual de las diversas páginas de la aplicación Web para man-tener un patrón en el diseño de las mencionadas.3. Incorporación de los mensajes de con�rmación al eliminar elementos en lastablas de lista de proyectos y lista de sesiones de proyectos.Desarrollo: En la �gura 7.9 se muestra la invocación de los métodos Atrás,Adelante, Parar y Siguiente, encargados de contabilizar la cantidad de veces quela funcionalidad correspondiente es invocada. Figura 7.9: Funcionalidad - Atras - Adelante - Parar - Siguiente CAPÍTULO 7. MARCO APLICATIVO 77 Figura 7.10: Funcionalidad - Atras - Adelante - Parar - Siguiente02Pruebas: Para esta iteración las pruebas consisten en de�nir el �ujo de activaciónde los botones de navegación del navegador y comparar las estadísticas generadascon las reales de�nidas en el �ujo. Al generar los resultados de los casos de pruebasse observan errores en la captura debido a que se capturaban usos con el ratón,mas no el uso de métodos abreviados por teclado. Posteriormente se realizan lascorrecciones para dar �n a las actividades de prueba de forma exitosamente.7.4.9. Iteración 7Objetivo: Diseñar e implementar la comunicación realizada entre la aplicacióncliente y la aplicación servidor.Plani�cación:1. Investigación acerca de la creación de servicios Web en JavaScript.2. Desarrollo de servicios Web REST en JavaScript, tales como:� Obtener información completa acerca de los proyectos de estadísticasque se encuentran habilitados.� Obtener información acerca de si un proyecto de estadísticas en especí�coestá activo o no.� Obtener un nuevo ID de estadística de visita.� Cargar la infomación obtenida acerca de una estadística de visita.3. Pruebas sobre los servicios Web creados.4. Incorporación de las librerías y con�guración de las mencionadas para la ac-tivación de los servicios Web REST implementados con JAX-RS. Se modi�cael archivo web.xml y se incorpora un Servlet para el manejo de los serviciosweb JAX-RS. CAPÍTULO 7. MARCO APLICATIVO 785. Inclusión de las librerías de JAX-RS 1.0 y modi�cación de la librería deHibernate debido a inconsistencias de la misma con la librería de JAX-RS.6. Creación de clases que funcionan como recursos para los servicios Web REST:ProyectosResource, ProyectoResource, EstadisticasResource, EstadisticaRe-source. Se crea un único recurso principal (ProyectosResource) y el restoconstituyen sub-recursos localizados a través de parámetros en el URL.Desarrollo: En las �guras 7.11, 7.12 y 7.13, se muestra la invocación e imple-mentación de la obtención de cada uno de proyectos que han sido creados en laaplicación servidor. Figura 7.11: Método encargado de obtener los proyectos creados en la aplicación servidor Figura 7.12: Clase encargada de obtener los proyectos creados en el servidor CAPÍTULO 7. MARCO APLICATIVO 79 Figura 7.13: Método encargado de realizar la petición de los proyectos existentes en laaplicación servidor Pruebas: En la presente iteración los casos de pruebas se distribuyen en dosvertientes: pruebas de los servicios web REST y pruebas de los servicios invocadospor la extensión.Para los servicios web REST se crean clientes simulados que invocan a los serviciosde�nidos en el servidor y posteriormente se compara el resultado obtenido con elesperado, lo cual signi�ca que se realizan pruebas en base al estado �nal. Cabedestacar que dichas pruebas culminaron exitosamente.Por parte del cliente, las pruebas se realizan invocando a los servicios residentesen el servidor y comparando la respuesta obtenida por el cliente con la enviadapor el servidor. Cabe destacar que las fallas encontradas se producen debido almanejo erróneo de casos de excepción al realizar la invocación de los servicios, lascuales fueron corregidas concluyendo las pruebas.7.4.10. Iteración 8Objetivo: Investigar e implementar el cuarto conjunto de estadísticas capturadaspor la extensión para el navegador Mozilla Firefox, asociadas a los tiempos decarga de los recursos de las páginas web; además diseñar y desarrollar la faseinicial para la gestión de las estadísticas en la aplicación web.Plani�cación:1. Investigación acerca de como implementar la funcionalidad Tiempo de Cargapor Recurso.2. Revisión del código fuente de la extensión Firebug a objeto de determinarsu funcionamiento, para posteriormente localizar la implementación de lafuncionalidad comentada.3. Realización de pruebas acerca de la funcionalidad mencionada.4. Creación de la página inicial de administración de estadísticas (inicio.jspx).5. Creación de la página de selección del proyecto para visualizar las estadísticas(proyecto.jspx).6. Creación de la página de selección de sesión de proyecto, para visualizar lasestadísticas (sesion.jspx). CAPÍTULO 7. MARCO APLICATIVO 807. Creación básica de la página principal de visualización de las estadísticas deun proyecto y sesiones seleccionadas (datos.jspx).8. Ajuste del archivo menu.jpsf incluyendo la navegación a la página de admin-istración de estadísticas.Desarrollo: En las �guras 7.14 y 7.15, se visualiza la implementación de lostiempos de carga por recurso de una página Web. Figura 7.14: Implementación funcionalidad - Tiempo de Carga por recurso CAPÍTULO 7. MARCO APLICATIVO 81 Figura 7.15: Continuación funcionalidad Tiempo de Carga por recursoPruebas: Las pruebas realizadas en esta iteración se enfocan principalmente enla captura de estadísticas de tiempos de cargas de recursos. Al igual como sedescribe en la iteración 3, estas se realizan con ayuda de la extensión HttpFox, eneste caso en lugar de comparar los tiempos de cargas de las páginas se comparanlos tiempos de cargas de sus recursos. Las páginas utilizadas para estas pruebas sonla página de inicio de sesión y la página del menú principal del sistema CONESTEstudiantes. Cabe destacar que el resultado de estas pruebas es exitoso. CAPÍTULO 7. MARCO APLICATIVO 827.4.11. Iteración 9Objetivo: Diseñar y desarrollar el proceso inicial para la visualización de losreportes estadísticos en la capa de aplicación del servidor y analizar e implementarel quinto conjunto de estadísticas recolectadas por la aplicación cliente asociadasal uso de funcionalidades del navegador y captura de códigos de error de solicitudesHTTP.Plani�cación:1. Implementación de las funcionalidades Búsqueda de Texto, Tamaño de Vistay Errores HTTP.2. Realización de pruebas sobre las funcionalidades descritas anteriormente.3. Extensión de la librería de Open�ash Chart 2, incluyendo la capacidad devisualizar grá�cos en forma de imágen, para posteriormente ser incluída enla aplicación Web.Desarrollo: En las �guras 7.16 y 7.17 se muestra el código fuente de la funcio-nalidad Búsqueda. Figura 7.16: Implementación funcionalidad - Búsqueda CAPÍTULO 7. MARCO APLICATIVO 83 Figura 7.17: Continuación - Implementación funcionalidad - Búsqueda01Pruebas: En esta iteración los casos de pruebas se basan exclusivamente en lasestadísticas de usos de funciones del navegador para lo cual se de�nen casos paralas funciones de tamaño de vista, búsqueda de texto y capturas de errores HTTP.Para las dos primeras se de�nen casos de pruebas en base al estado �nal, es decir,se interactúa de manera prede�nida con la extensión y al �nal se valida que hayagenerado las estadísticas correctas. Para el último caso, se crea una página deprueba con errores de enlaces y de recursos preestablecidos y se prueba la exten-sión con la página creada, validando al �nal que haya generado las estadísticascorrectas.Al ejecutar las pruebas se hallan errores en la función de captura de búsqueda detexto, ya que el navegador busca el texto a medida que el usuario escribe en elcuadro de búsqueda, por lo tanto se realiza la corrección en la manera como laextensión captura la cadena buscada.7.4.12. Iteración 10Objetivo: Agregar capacidad de �ltrado en la interfaz grá�ca de usuario web paralos reportes estadísticos e implementar el sexto conjunto de estadísticas recolec-tadas por el cliente con respecto al uso de los enlaces de las páginas web.Plani�cación:1. Investigación y realización de pruebas de las funcionalidades: Uso Funciona-lidad, Forma Uso Funcionalidad, y Desplazamiento funcionalidad. CAPÍTULO 7. MARCO APLICATIVO 842. De�nición del esquema general de la página.3. Agregación de campos de �ltros de fecha y hora al backing bean de la página.4. Agregación de estilos adicionales en general.css que actuan sobre el esque-ma de la página.5. Ajustes a la página datos.jspx.6. Incorporación de cadenas de I18N en FireWeb.properties y en FireWebMsg.properties.7. Ajuste en el Backing Bean EstadisticasBean mediante la incorporación demétodos para aplicar y quitar �ltros, cambiar el proyecto y las sesiones.8. Ajuste del bean básico AbstractBean mediante la incorporación de la cadenade navegación por defecto hacia atrás.Desarrollo:En la �gura 7.18 se muestra el código fuente de la funcionalidad Uso Funcionali-dad. Figura 7.18: Implementación funcionalidad - Uso Funcionalidad Pruebas: Los casos de pruebas en esta iteración se enfocan en las funcionalidadesde la aplicación cliente, tal como se ha venido implementando las pruebas del ladodel cliente en las iteraciones anteriores, estos casos se basan en el estado �nal de CAPÍTULO 7. MARCO APLICATIVO 85la captura de estadísticas. Para este caso se emplea la página del menú principaldel sistema CONEST Estudiantes como ámbito de captura de estadísticas de laextensión y de manera establecida se activan los enlaces de la página, que al �nalde la captura, la extensión genera las estadísticas de usos de enlaces los cualesse comparan con los usos reales realizados y se arrojan los resultados que sontotalmente exitosos.7.4.13. Iteración 11Objetivo: Analizar e implementar el séptimo conjunto de estadísticas capturadaspor la extensión de Mozilla Firefox relacionadas con los tiempos de llenado de losformularios, y desarrollar los componentes para la generación de los datos de losreportes estadísticos.Plani�cación:1. Investigación y realización de pruebas de la funcionalidad Llenado del for-mulario.2. Creación de la interfaz pública Filtro, utilizada por el cliente (capa de pre-sentación), para establecer restricciones de datos a los resportes.3. Creación de la interfaz privada FiltroAplicable, utilizada por la capa delnúcleo para aplicar los �ltros a los reportes.4. Creación del �ltro general denominado FiltroGenerico, como base para losdiversos �ltros asociados los reportes.5. Creación de la fábrica (FabricaFiltro), para la obtención de �ltros prefabri-cados y de�nidos por la capa de núcleo que pueden ser utilizados por losclientes.6. Creación de la interfaz pública Filtrable, para permitir que a un componentese le puedan agregar o establecer �ltros. Dicha interfaz es implementada porlos reportes a objeto de que los mencionados puedan ser �ltrados.7. Creación de las clases de pruebas de JUnit para: FiltroGenerico y FabricaFil-tro.Desarrollo: En las �guras 7.19 y 7.20, se muestra la implementación del Tiempode llenado de un formulario. CAPÍTULO 7. MARCO APLICATIVO 86 Figura 7.19: Implementación funcionalidad - Tiempo de llenado de un formulario 01 Figura 7.20: Continuación funcionalidad - Tiempo de Llenado de un formulario 02 Pruebas: Para esta iteración los casos de pruebas unitarias se construyen uti-lizando la librería JUnit, implementando casos para los componentes de reportesestadísticos, especí�camente las clases FiltroGenerico y FabricaFiltro. En efecto,los casos se implementan en base al estado �nal de los valores de los atributos delas instancias de las clases. Al �nal de las pruebas los resultados son totalmenteexitosos. CAPÍTULO 7. MARCO APLICATIVO 877.4.14. Iteración 12Objetivo: Diseñar y construir los componentes de sistema para la creación de losdiversos reportes estadísticos generados por la aplicación servidor e investigar ydesarrollar las estadísticas de tiempo de respuesta de formularios capturadas porla aplicación cliente.Plani�cación:1. Investigación y desarrollo de la funcionalidad Tiempo de respuesta del for-mulario.2. Realización de pruebas sobre la funcionalidad desarrollada.3. Modi�cación de las interfaces de usuario de la aplicación cliente.4. Creación de la interfaz general de los reportes a ser generados en la aplicación.5. Creación de la interfaz GeneradorData, encargada de la generación de con-sultas y datos de los reportes. Se emplea el patrón de diseño Strategy parasu implementación.6. Creación de la clase DatoReporte, encargada de almacenar los datos acercadel detalle y resumen obtenidos por los generadores de los reportes.7. Creación de la clase GrupoConsulta, encargada de almacenar los datos acercade las consultas creadas por los generadores de los reportes.8. Creación de la clase encargada de la generación de reportes en la aplicación.Clase ReporteGenerico.9. Creación de la clase abstracta AbstractGeneradorData, que sirve como im-plementación base para las clases generadoras de datos para los reportes.Dicha clase junto a las clases GeneradorData.java y ReporteGenerico.java,forman parte del patrón Strategy.10. Creación de la clase GeneradorDataPool.java, que contiene los generadoresde reportes de la aplicación. Cabe destacar que a raíz de que los generadoresno almacenan información de estado entre llamadas a sus métodos, se empleael patrón Flyweight para almacenar referencias únicas a dichos generadoressobre el pool mencionado.11. Creación de la clase FabricaReporte.java, encargada de la generación de ins-tancias de los reportes disponibles en el sistema, y las estadísticas abarcadaspor los mencionados, junto con el generador de reportes correspondiente(dicha asociación se realiza a través del nombre del reporte).12. Creación de clases de prueba para: ReporteGenerico.java, GeneradorData-Pool.java y FabricaReporte.java.13. Pruebas sobre el servidor de aplicaciones para la creación de usuarios yproyectos de estadísticas. CAPÍTULO 7. MARCO APLICATIVO 88Desarrollo: En la �guras 7.21 se proporciona el Diagrama de Clases inicial parala construcción de los reportes del núcleo de la aplicación. Figura 7.21: Clases de los reportes para el núcleoPruebas: Al igual que en la iteración 11 los casos de pruebas unitarias y deinteracción se construyen utilizando la librería JUnit, implementando casos paralos componentes de generación de datos para los reportes, en especí�co las clasesAbstractGeneradorData, GeneradorData, ReporteGenerico, GeneradorDataPooly FabricaReporte. En efecto, los casos se implementan en base al estado �nal de losvalores de los atributos de las instancias de las clases. Al ejecutar las pruebas porparte del cliente se encuentra un comportamiento erróneo en el método isProyec-toAplicable de la clase ReporteGenerico, por lo tanto se realizan los cambios y laspruebas se ejecutan correctamente. CAPÍTULO 7. MARCO APLICATIVO 897.4.15. Iteración 13Objetivo: Analizar e implementar la estadística errores de llenados de formulariosrecolectada por la extensión cliente, y desarrollar los componentes de la capa depresentación para formatear los datos generados por los reportes estadísticos.Plani�cación:1. Investigación y desarrollo de la funcionalidad Errores Formulario.2. Realización de pruebas sobre la funcionalidad desarrollada.3. Creación del modelo básico para cada dato contenido en los diversos reportesdel núcleo. Clase DatoModel.4. Creación de la clase para el formateo de cada dato básico. Clase FormatoDa-to.5. Creación de generadores de textos para los diversos valores de datos. Sede�ne la interfaz global de un generador, denominada GeneradorTexto. Pos-teriormente se de�nen los diversos generadores para los enumerados: Ge-neradorFormaUso, GeneradorFormaAcceso, GeneradorComandoNavegador,GeneradorColoresPantalla.6. Creación del almacenador de los diversos conjuntos de formatos de detalley resumen para todos los reportes disponibles en el núcleo. Clase Forma-toDatoPool.7. Creación de clases de prueba sobre los módulos de reportes creados.Desarrollo: En la �gura 7.22 se proporciona el Diagrama de Clases inicial parala presentación de los reportes en la GUI Web. CAPÍTULO 7. MARCO APLICATIVO 90 Figura 7.22: Clases para la presentación de los reportes en la GUI WebPruebas: De la misma manera como se describe en la iteración 12 los casos depruebas unitarias se arman utilizando la librería JUnit, de�niendo casos para loscomponentes de formateo de datos asociados los reportes estadísticos, en concretopara las clases DatoModel, FormatoDato, FormatoDatoPool y GeneradorTexto.De hecho, los casos se implementan en base al estado �nal de los valores de losatributos de los objetos. Al �nal el resultado de las pruebas es exitoso.7.4.16. Iteración 14Objetivo: Finalizar la construcción del documento en formato XML con los datoscapturados por la aplicación cliente, y desarrollar los componentes para la gene-ración de reportes estadísticos en la interfaz grá�ca de usuario en la aplicaciónweb. CAPÍTULO 7. MARCO APLICATIVO 91Plani�cación:1. Construcción del segmento XML asociado a cada una de las funcionalidadesdesarrolladas.2. Construcción del XML que es enviado al servidor para su posterior proce-samiento.3. Realización de pruebas sobre los archivos XML creados a objeto de poderestablecer la comunicación entre la aplicación cliente y la aplicación servidor.4. Creación del modelo para el componente de los reportes en el GUI Web.Clase DatoReporteModelo.5. Creación del componente que decora un Reporte del núcleo y le añade fun-cionalidades al mencionado, a objeto de que pueda ser visualizado en la capaWeb (Clase ReporteComponent).6. Creación de la fábrica encargada de instanciar los reportes para su posteriorvisualización en la interfaz Web (Clase FabricaReporteComponent). Cabedestacar que existe una única instancia de dicha fábrica, por cada instanciade la aplicación Web. Lo mencionado se logra a través del patrón Singleton.7. Creación del componente MenuReporte, encargado de manejar la visualiza-ción del menú, y el acceso a los diversos reportes de estadísticas del sistema.8. Creación del componente ModeloReporte, que contiene la información delproyecto y el reporte actual seleccionado en la interfaz Web.9. Ajuste de la página web de estadísticas datos.jspx, a objeto de poder obtenerel modelo de la clase MenuReporte en lugar de crearlo manualmente. De estamanera el menú se crea dinámicamente.Desarrollo: En la �guras 7.23 se muestra como se construye el archivo XML,que es enviado a la aplicación servidor. CAPÍTULO 7. MARCO APLICATIVO 92 Figura 7.23: Implementación funcionalidad - XML que será enviado a la aplicaciónservidorPruebas: Al igual como se expone en la iteración 12 los casos de pruebas uni-tarias y de interacción se desarrollan utilizando la librería JUnit, de�niendo casospara los componentes de presentación de los reportes estadísticos en la interfazweb, en concreto para las clases DatoReporteModelo, ReporteComponent, Fabri-caReporteComponent, MenuReporte y ModeloReporte. En este caso, las pruebasse implementan en base al estado �nal y en base a la interacción entre clases. Alejecutar las pruebas por parte del cliente se obtiene un error de visualización delmenú de reportes estadísticos en la clase MenuReporte, el cual se corrige y se con-tinuan las pruebas culminando con esta iteración luego de obtener la aceptacióndel cliente.7.4.17. Iteración 15Objetivo: Incorporar el cifrado en los datos de cuentas de usuario y realizarajustes generales en las interfaces grá�cas de usuario tanto en la extensión comoen la aplicación web. CAPÍTULO 7. MARCO APLICATIVO 93Plani�cación:1. Realización de pruebas sobre las funcionalidades desarrolladas en la apli-cación cliente y de los archivos XML construidos.2. Modi�cación de la interfaz de usuario opcionesVisor.xul.3. Ajustes en la creación de una página para un proyecto determinado, de ma-nera que solo acepte URLs sin Schema.4. Modi�cación sobre el validador URL para que acepte los dos tipos de URLs(con schema y sin schema).5. Eliminación de la preferencia de modo de envío en la creación de un proyectode estadísticas, por defecto se selecciona el modo de envío por sesión.6. De�nición de la interfaz general para un cifrador (Cifrador) y se crea laclase abstracta AbstractCifrador, con la �nalidad de implementar contraseñascifradas en la aplicación.7. Agregación de clases para el manejo de diversos métodos de cifrado para laaplicación web, especí�camente para el área de manejo de contraseñas. Sede�nen tres cifradores/descifradores: CifradorNulo, CifradorDES y Cifrador-TripleDES.8. Ajustes de los nombres de las tablas de base de datos de minúscula a mayús-cula, durante la instalación de la base de datos en Linux (servidor Yagrumo),la cual es sensible a mayúsculas/minúsculas.Desarrollo: En la �guras 7.24 y 7.25 se muestran los diversos archivos de con-�guración de la aplicación cliente. Figura 7.24: Contenido archivo - chrome.manifest CAPÍTULO 7. MARCO APLICATIVO 94 Figura 7.25: Contenido archivo - install.rdfPruebas: El conjunto de casos de pruebas se enfoca en el componente de cifradode datos de contraseñas de cuentas de usuarios. Para este �n los casos se imple-mentan empleando la librería JUnit en particular para las clases: AbstractFactory,CifradorNulo, CifradorDES y CifradorTripleDES. Además, se especi�can pruebasbasadas en el estado �nal de los atributos de las clases. Por lo demás es impor-tante señalar que el resultado de las pruebas es completamente satisfactorio y seobtiene la aceptación del cliente.7.4.18. Iteración 16Objetivo: Con�gurar los componentes de la extensión y del servidor para preparary ejecutar el caso de estudio, y �nalizar el desarrollo de los reportes estadísticosdel sistema. CAPÍTULO 7. MARCO APLICATIVO 95Plani�cación:1. Instalación de la aplicación cliente en 12 máquinas de la División de Controlde Estudios de la Facultad de Ciencias de la Universidad Central de Venzuelapor el profesor Sergio Rivas.2. Monitoreo de la información recolectada por la aplicación cliente y de la dataalmacenada en la aplicación servidor.3. Respaldo de la data almacenada en la aplicación servidor.4. Pruebas sobre los reportes generados.Desarrollo: En la �gura 7.26 se proporciona el Diagrama de Clases asociado ala visualización de los grá�cos de los reportes en la GUI Web. Figura 7.26: Clases para la visualización de los grá�cos de los reportes en la GUI WebPruebas: Finalmente las pruebas de esta iteración corresponden a pruebas deintegración y de sistema como un todo. Para tal �n, se de�nen �ujos de procesos CAPÍTULO 7. MARCO APLICATIVO 96para las pruebas de manera tal que se contemplen la mayor parte de los com-ponentes del sistema. Los casos se dividen en dos grupos: pruebas del cliente ypruebas del servidor.Por una parte el cliente interactúa por completo con la extensión, instalándola,con�gurándola e iniciando la recolección de estadísticas. Luego de la ejecuciónexitosa de las pruebas se obtiene la aceptación del cliente con respecto a la apli-cación cliente.Por otra parte el cliente interactúa de manera general con todas las páginas de laaplicación web, creando proyectos, ajustando sesiones de proyectos y desplegandoreportes estadísticos. Cabe indicar que en este punto se detecta un error al mo-mento de realizar la carga del reporte de estadísticas globales, ya que se muestrade manera incompleta. Luego se procede a la corrección del error de visualización,y se ejecutan nuevamente las pruebas, las cuales resultaron exitosas y se obtienela aceptación del cliente de la aplicación en general. Capítulo 8Caso de Estudio En el presente capítulo se de�nen los parámetros de con�guración establecidos en laaplicación para iniciar el proceso de recolección de información. Para ello fue instaladauna extensión cliente en 12 computadores utilizados por el personal de la División deControl de Estudios, de la Facultad de Ciencias de la UCV. Dicha extensión fue ejecu-tada bajo las versiones 3.5 y 3.6 del navegador Mozilla Firefox.Para el presente caso, la recolección se realiza en el horario de trabajo establecidopor la División de Control de Estudios, en el cual el personal ejecuta una serie de ac-tividades, de Lunes a Viernes de 8:30am a 12:00 y de 1:30 pm a 4:30pm. Además elperiodo de recolección se inicia el viernes 22/10/2010, hasta el viernes 05/11/2010, esdecir, tuvo una duración de 2 semanas.Cabe destacar que dicha recolección fue aplicada sobre el sistema de Gestión Académi-ca módulo CONEST Administrativo, utilizado el personal de la División de Control deEstudios para operaciones de índole administrativa en el ámbito académico.Antes de inciar la recolección se realiza la con�guración del proyecto CONEST Ad-ministrativo en el Sistema Servidor, indicando la información básica acerca de dichoproyecto, y las estadísticas a ser recolectadas por la aplicación cliente, como se visuali-za en las �guras 8.1 y 8.2, expuestas a continuación : 97 CAPÍTULO 8. CASO DE ESTUDIO 98 Figura 8.1: Ingreso de información - Creación de Proyecto de Estadísticas Figura 8.2: De�nición de Preferencias y estadísticasPara iniciar el proceso de recolección de datos se procede a instalar la extensióncliente en cada una de los equipos mencionados, ejecutando el archivo con extensión.xpi. Una vez culminada dicha instalación, se visualiza lo mostrado a continuación enla �gura 8.3: CAPÍTULO 8. CASO DE ESTUDIO 99 Figura 8.3: Opciones de con�guraciónPosteriormente, se procede a la con�guración del proyecto CONEST Administrativo,para su posterior activación como se ilustra en las �guras 8.4 y 8.5: Figura 8.4: Opciones de Con�guración - Detalles del Proyecto CAPÍTULO 8. CASO DE ESTUDIO 100 Figura 8.5: Panel Con�guración - OpcionesNota: Para seleccionar el proyecto sobre el cual se realizara la recolección de es-tadísticas; veri�que que el proyecto haya sido seleccionado, y posteriormente presioneel botón Activar, en la pestaña Proyecto.Cabe destacar, que solo puede seleccionar un proyecto para la recolección.Finalmente se inicia la captura de datos estadísticos, acerca de la interacción delusuario con el sitio Web, en la aplicación cliente, que serán enviados a la aplicaciónservidor, quien procesa los datos obtenidos y genera un conjunto de reportes, tales co-mo los mostrados en la siguiente sección. 8.1. ResultadosA continuación se proporciona una explicación acerca de los resultados obtenidosen el proceso de recolección de estadísticas por parte de la aplicación y su posteriorvisualización en la aplicación Web. CAPÍTULO 8. CASO DE ESTUDIO 1018.2. Estadísticas Globales Figura 8.6: Reporte - Estadísticas Globales Promedio páginas vistas por visita: Probablemente sea el dato que más sepresta para la confrontación, ya que puede asumir distintos signi�cados según eltipo de sitio examinado. Por ejemplo, un alto número de páginas vistas por visitaasociado a un breve tiempo de permanencia en las páginas, tendrá un signi�cadodiferente según los contenidos de las páginas Web de las que se han detectadotales valores.En base a los resultados obtenidos es útil para determinar:� Si existe contenido duplicado en las páginas que se han visitado.� Existencia de enlaces rotos, mal redirigidos o no disponibles.� Claridad de los shortcuts establecidos; los cuales deben ser predictivos y queno induzcan a error de interpretación, es decir, que indiquen hacia donde elusuario va a dirigirse, cuando sea seleccionado, sin que el mismo tenga quere�exionar hacia dónde va a dirigirse o sobre su posible signi�cado.� La existencia de información relevante en el sitio Web, que sea original, yque le haga sentir al visitante, que está obteniendo algo que sea de utilidad.Se induce que en un promedio de 4 páginas vistas por visita, el usuario realizasus tareas dentro del sitio Web interactuando con pocas páginas. CAPÍTULO 8. CASO DE ESTUDIO 102Promedio clics por visita: Útil para determinar el grado de actividad o inac-tividad del usuario existente en la aplicación, o en determinadas páginas web,tiempos de permanencia, entre otros.Promedio tiempo de carga de páginas/visita: El tamaño y complejidad delos marcos o frames utilizados en las páginas Web, determina en la mayoría de loscasos, la velocidad de visualización inicial. Aquellas páginas web que poseen tablasanidadas, archivos CSS, código JavaScript, o imágenes asociadas en formatos norecomendados como el .PNG, retrasan el tiempo que tarda el contenido útil de lapágina en ser visualizado. Observando los tiempos de carga de una página Web,podremos determinar si el tiempo de respuesta es óptimo, así como el ayudar adeterminar un equilibrio entre apariencia y funcionalidad del sitio Web, utilizandotécnicas basadas en estándares para optimizar la velocidad de respuesta de lasaplicaciones. Entre algunos estándares de diseño podemos mencionar:� El posicionar el contenido CSS en la parte superior (cabeza) y el JavaScripten la parte inferior( cuerpo) del HTML permite un procesamiento progresivodel contenido de la misma.� El poseer múltiples CSS o JavaScripts que son invocados desde diversaspartes de la página puede retrasar el despliegue de contenidos.� La presencia de archivos de audio y/o video.� Existencia de enlaces construidos con JavaScript o no. En este caso, se re-comienda, evitar la construcción de enlaces con dicho lenguaje, ya que en unalto porcentaje de estos casos, es totalmente prescindible; pero, en caso deno ser posible, se debe garantizar su funcionamiento sin tener el Javascriptactivado.Del resultado obtenido anteriormente, podemos que un tiempo de carga de 1,33segundos, indica una velocidad óptima de carga, lo que cumple uno de los princi-pios básicos de Interacción-Humano-Computador [King, 2008].Tiempo promedio por visita: El tiempo promedio de duración de la visita deun usuario varía según el tipo de sitio o información que sea consultada por elusuario, por lo que no podemos tomar un valor general.Pero dicho valor es muy importante para determinar que tan bien estructurado seencuentra un sitio web y si este facilita su navegación, si el sitio posee contenidosy servicios de interés, así como un lenguaje directo, claro y comprensible parael usuario, algo vital para generar concurrencia por parte de los mencionados, osi por el contrario; ofrecen contenidos irrelevantes que no aportan nada más queruido visual y estructural a la página.Haciendo conjunción con el item especi�cado anteriormente, un tiempo de 560segundos, o 9 minutos con 33 segundos, indica un alto nivel de interactividad conel sitio Web. CAPÍTULO 8. CASO DE ESTUDIO 103Porcentaje promedio de inactividad por visita: Es asumido de formagenérica que la lectura por pantalla es bastante más lenta e incómoda que laejercida sobre el medio impreso, lo que conduce a una percepción no tan clara delcontenido. Es por ello, que el usuario no visualiza todo el contenido, sino escaneala página en busca de lo que le interesa y centra su atención en aquellos puntos quele llaman su atención y que cree a primera vista que será la opción más correctaen relación a lo que le interesa.El tiempo de inactividad puede indicar:� Si el usuario no es capaz de encontrar lo que busca de forma rápida, y porende tendrá una percepción negativa del sitio web.� Si el sitio web presenta problemas de trá�co, carga o de funcionamiento.El tomar en cuenta los valores mostrados en la presente métrica contribuye amejorar la experiencia y usabilidad del usuario, en el proceso de interacción conlos sitios Web. No se debe hacer pensar al usuario en su proceso de interaccióncon una página web, sino que ésta sea tan clara, obvia y fácil de entender, queimplique la acción directa y no la pérdida de tiempo en su intento de exploracióny comprensión de lo que se le ofrece por pantalla.Un porcentaje de 31,59% indica un alto grado de actividad por parte del usuariocon el sitio Web, lo cual de forma implícita indica que el usuario no debe esperaruna gran cantidad de tiempo, por la carga de recursos asociados a una páginaluego de que es mostrada inicialmente.Promedio errores HTTP por visita: Cada objeto único en una página webrequiere un viaje de ida y vuelta al servidor, es decir, una solicitud HTTP y unarespuesta. Cada objeto presenta retrasos indeterminados. Generalmente, cuandoel número de objetos es mayor que cuatro, son los objetos de la página los quetienden a determinar los tiempos de descarga.Para minimizar el número de peticiones HTTP, se recomienda minimizar el númerode objetos en sus páginas web, así como el combinar y convertir archivos grá�cosbasados con técnicas de CSS.El obtener 16 errores HTTP, en promedio por visita, puede indicar que seríarecomendable revisar los elementos asociados al sitio Web de CONEST Adminis-trativo, tales como: imágenes, enlaces, código javaScript, entre otros. CAPÍTULO 8. CASO DE ESTUDIO 1048.3. Resolución de Pantalla Figura 8.7: Reporte - Resolución de PantallaDe lo antes expuesto se deduce lo siguiente:1. 1024 x 768 vistas 310 veces, correspondiente al 22% de las vistas.2. 1152 x 864 vistas 417 veces, correspondiente al 29% de las vistas.3. 1280 x 1024 vistas 434 veces, correspondiente al 30% de las vistas.4. 1280 x 720 vistas 279 veces, correspondiente al 19% de las vistas.De lo que se concluye que la visualización de las páginas deben estén acorde a lassiguientes resoluciones: 1280 x 1024 y 1152 x 864, que constituyen las más empleadaspor los usuarios. CAPÍTULO 8. CASO DE ESTUDIO 1058.4. Textos buscados Figura 8.8: Reporte - Textos buscadosEn el presente grá�co, se visualizan los textos más buscados en la página de menúprincipal de CONEST Administrativo. Con los datos observados, se puede obtener:1. estado: Con la que se realizó una búsqueda de 30 veces, y la cual esta rela-cionada con el estado de la cali�cación o el estado de la inscripción del estudiante.2. foto: Con la que se realizó una búsqueda de 18 veces, de la cual puede concluirseque los usuarios intentan ubicar la opciones de Agregar y/o Administrar foto delestudiante.3. horario: Con la que se realizó una búsqueda de 14 veces, de lo que puedeinferirse que se realizan la búsqueda de opciones asociadas al horario, tales como:Consultar horarios por Semestre.4. tesis: Con la que se realizó una búsqueda de 10 veces, que está asociada a labúsqueda de opciones asociadas al trabajo especial de grado.5. requisito: Con la que se realizó una búsqueda de 8 veces, la cual suele estarasociada a las opciones de: Consultar requisitos académicos de un estudiante,consultar requisitos a todos los estudiantes inscritos en tesis y consultar requisitosde una materia para un estudiante.6. CALIFICAR es, cali�car estud: Con la que se realizó una búsqueda de 9veces, y que se encuentra asociada a la opción Cali�car estudiante. CAPÍTULO 8. CASO DE ESTUDIO 106Por lo antes expuesto, se recomienda ubicar las opciones asociadas a las palabrasmencionadas, en la parte superior de la página o del menú principal, a objeto de incre-mentar la interacción por parte del usuario, y por ende el obtener un acceso más rápidoa las opciones indicadas.8.5. Uso de Enlaces Figura 8.9: Reporte - Uso de EnlacesEl presente reporte (ver �gura 8.9), muestra el uso de los enlaces de la página delmenú principal de CONEST Administrativo, así como los desplazamientos realizadospara su ubicación, a través del uso de las barras de desplazamiento del navegador.Del grá�co expuesto, se concluye que el 62,32% de los enlaces requieren de un des-plazamiento vertical, lo que contradice uno de los principios de Interacción-Humano-Computador, que establece que los mencionados deben estar ubicados en la parte su-perior de la página; por lo que se sugiere tomar en cuenta dicho principio, para lare-ubicación de los enlaces asociados a la aplicación.Aunado a esto, se puede apreciar que los enlaces más utilizados que necesitaron deun desplazamiento vertical para su ubicación, se pueden mencionar:1. desbloquear solicitudes de constancias: 42 veces2. cali�car estudiante: 36 veces3. modi�car inscripción: 26 veces4. modi�car número de depósito bancario: 22 veces CAPÍTULO 8. CASO DE ESTUDIO 1075. solicitudes pendientes de trabajo especial de grado: 21 veces6. imprimir constancia de estudio: 15 veces7. imprimir constancia de culminación de estudios: 11 veces8.6. Usos Comandos del Navegador Figura 8.10: Reporte - Usos Comandos del NavegadorDel presente grá�co, se observa que de las 700 visitas realizadas al sitio de CONESTAdministrativo, solo se evidencian 75 usos de los botones principales del navegador Mo-zilla Firefox, tales como: Atrás, Adelante, Actualizar y Detener.El uso de los mencionados se resume de la siguiente manera:1. Atrás: 65 veces, correspondiente al 86,67% del total de usos.2. Adelante: 1 vez, correspondiente al 1,33% del total de usos.3. Actualizar: 9 veces, correspondiente al 12% del total de usos.4. Detener: 0 veces, correspondiente al 0% del total de usos.De lo antes expuesto, se concluye que en general el sitio de CONEST Administrativo,ofrece enlaces de navegabilidad entre páginas, que son muy utilizados por los usuarios,en lugar de los botones de navegabilidad asociados al navegador. Además se observa queel enlace que sustituye al botón Atrás del navegador, es el enlace denominadoRegresara Principal, como se visualiza en la �gura 8.11, expuesta a continuación: CAPÍTULO 8. CASO DE ESTUDIO 108 Figura 8.11: Estadísticas de usos de enlaces en páginasEn la �gura expuesta(ver �gura 8.11), se observa que el enlace Regresar a Prin-cipal, constituye el enlace más utilizado, con un total de 343 usos, seguido del enlace(Cambiar), lo que indica que el usuario debe regresar al menú principal de la apli-cación, si desea interactuar con alguna otra opción asociada al aplicativo.Por ello, se sugiere la creación de un menú que pueda ser utilizado en cualquierparte del aplicativo, para mejorar la navegabilidad del usuario en dicho sitio.Además se evidencia una interactividad continua del usuario con las páginas delaplicativo, de lo que se in�ere que existe interés por parte del usuario en navegar en elmismo.Esto es debido al poco uso de los botones de navegación ( menos de 80 usos) de las700 visitas realizadas al sitio. Capítulo 9Conclusiones La investigación realizada para establecer el marco teórico, la adaptación del métodoXP, y la posterior elaboración de una aplicación permiten en el presente trabajo especialde grado presentar como resultado un software para la visualización de estadísticas enla web, orientadas al usuario.Gracias a la investigación y a la ejecución de las actividades en la adaptación delmétodo XP, se logra cumplir con los objetivos propuestos, logrando crear una herra-mienta de Estadísticas Web que obtiene información acerca del interacción del usuariocon la página y el navegador.Por otra parte, se realizan adaptaciones sobre el método XP, pero durante la codi-�cación del sistema, se comienza a laborar durante 40 horas a la semana, dedicandode 2 a 3 horas diarias en promedio a la ejecución de las actividades propuestas, y enalgunas ocasiones no se labora durante algunas semanas, lo que trae como consecuenciaque el desarrollo del presente producto se extienda, más de lo previsto, obteniendo 17iteraciones en el marco aplicativo.Del método XP, se aplica el trabajo en parejas, el cual se realiza la mayor partedel tiempo, mas no en su totalidad, lo que permite el incremento de las habilidades delos programadores. Además se mantiene una comunicación directa con el cliente paradeterminar los requerimientos funcionales del sistema a desarrollar, logrando orientaren buen término el desarrollo del aplicativo. Al �nalizar cada iteración, se realizan en-tregas de versiones parciales del sistema, que son desarrolladas de forma incremental, yen las cuales se aplica la reutilización de código, lo que ayuda a agilizar la construcciónde la herramienta mencionada, no haciendo énfasis en la documentación, sino en sufuncionamiento; hasta obtener el producto �nal.Respecto al despliegue de los grá�cos de los reportes estadísticos, se tuvo que realizarla integración entre la librería de OpenFlashChart 2 y el framework para el desarrollo deaplicaciones Web Java Server Faces(JSF) 1.2, para lo cual se realizó una investigación109 CAPÍTULO 9. CONCLUSIONES 110acerca de la creación de componentes en JSF, de manera que pudiera ser incrustadoun grá�co OpenFlashChart 2. Posteriormente se pudo realizar la integración entre laslibrerías y el framework descrito de forma exitosa.Durante la construcción del producto se tuvo di�cultad en la obtención de infor-mación acerca del funcionamiento de las interfaces XPCOM, para poder establecer lacomunicación entre las funcionalidades del aplicativo y las funciones del núcleo del na-vegador Mozilla Firefox, que permiten la captura de información de datos estadísticosde interés, lo que trajo como consecuencia la realización de pruebas de ensayo y errora ciegas para tratar de entender como funcionaban las mencionadas.Aunado a lo antes expuesto, la mayor parte del aprendizaje acerca de la instalación,funcionamiento de una extensión, creación de interfaces de usuario, y el desarrollo delas funcionalidades contenidas en la aplicación cliente, fue producto de revisar el códigofuente de otras extensiones.En la recolección de datos estadísticos realizados, se puede apreciar que el sitio CO-NEST módulo Administrativo, ofrece enlaces de navegabilidad entre páginas, que sonmuy utilizados por los usuarios, en lugar de los botones de navegabilidad asociados alnavegador. Sin embargo, el enlace Regresar a Principal, constituye el enlace más uti-lizado, lo que indica que el usuario debe regresar al menú principal de la aplicación,si desea interactuar con alguna otra opción asociada al aplicativo. Por ello, se sugierela creación de un menú que pueda ser utilizado en cualquier parte del aplicativo, paramejorar la navegabilidad del usuario en dicho sitio.También se pueden apreciar altos tiempos de permanencia en el sitio y tiempos decarga óptimos, ya que no se debe esperar una gran cantidad de tiempo por la carga derecursos asociados a una página, luego de que es mostrada inicialmente. Sin embargo serecomienda revisar los recursos y enlaces asociados a cada una de las páginas del sitioWeb, debido al número de errores HTTP encontrados, que pueden estar asociados aelementos del sitio Web, tales como: imágenes, enlaces, código javascript, entre otros.Adicionalmente se observa que en la página del menú principal existen enlaces comopor ejemplo, "desboquear solicitudes de constancias", y çali�car estudiante", que seconsideran, deben estar ubicados en la parte superior de la página, debido a que sonmuy utilizados y los usuarios ubican los mencionados utilizando otros mecanismos talescomo: búsqueda de texto, o mediante el uso de barras de desplazamiento.Con el software desarrollado, se provee una solución de menor costo, de fácil ma-nipulación que no requiere de personal con entrenamiento especializado, y que permiterecolectar estadísticas enfocadas en el comportamiento del usuario, tales como: tiemposde carga de páginas y sus recursos, usos de enlaces, uso de las funciones de búsqueda detexto y navegación del navegador, tiempos de llenado de un formulario y de sus campos CAPÍTULO 9. CONCLUSIONES 111asociados, entre otras.Dicha aplicación puede ser utilizada en campos como: Estadística, Interacción-Humano-Computador (IHC), Ingeniería del Software, Publicidad y Mercadeo, Mineríade Datos (mediante el análisis e interpretación de la data obtenida), el campo de losnegocios, la Computación, entre otros; para contribuir a realizar mejoras relacionadasa la interacción del usuario, diseño, funcionalidad, y rendimiento de las aplicaciones, ala construcción de software de calidad; la predicción de patrones de comportamientopor parte de los usuarios mientras navega por la Web, el determinar hábitos de comprapor parte de los mencionados; para el análisis de los datos obtenidos, y proceder a lacreación de Sistemas Expertos.El T.E.G generó un conjunto de aprendizajes y experiencias que contribuirán al de-senvolvimiento profesional, entre las cuales cabe destacar: La interacción con un clientepara la de�nición formal de requerimientos y objetivos para la entrega de versiones delsoftware, la aplicación de un modelo de desarrollo, así como la utilización de diversospatrones de diseño tales como Observer, Prototype, Singleton, DAO, Filter, AbstractFactory, Factory Method, Flyweight, Decorator, Strategy, Template Method, Compo-site View; el uso de nuevas tecnologías; el rehacer código con la �nalidad de ajustar elmismo para cumplir con las espectativas del cliente, y el tener un período de pruebaspara la validación de cada una de las funcionalidades de la aplicación, entre otras. Capítulo 10Recomendaciones Respecto a la aplicación cliente se recomienda el permitir la recolección de estadísti-cas de varios proyectos, el implementar la extensión cliente en otros navegadores comoInternet Explorer y Google Chrome, y mantener al día las actualizaciones de la exten-sión con respecto a la versión del navegador.Respecto a la aplicación servidor se recomienda el permitir la modi�cación de proyec-tos en la aplicación Web, y el almacenamiento de los grá�cos estadísticos visualizados,en formato Word y PDF. 112 Bibliografía[3DStats, 2004a] 3DStats (2004a). ¾ What are your visitors doing while they are there? http://www.3dstats.com/. [citado en p. 53][3DStats, 2004b] 3DStats (2004b). ¾How Does It Work? http://www.3dstats.com/.[citado en p. 53][3DStats, 2004c] 3DStats (2004c). Live Demo. http://www.3dstats.com/cgi-bin/showuni1.cgi?usr=00000001P000. [citado en p. 54, 56][Alex, 2007] Alex, R. (2007). RESTful Web services: The basics.Copyright IBM Corporation 1994,2007. e-mail: arodrigu@us.ibm.com. [citado en p. 43][Analytics, 2009] Analytics, G. (2009). Google Analytics. http://www.google.com/analytics/es-ES/. [citado en p. 45, 46, 47, 48, 49][Apache Software, 2010] Apache Software, F. (2010). Logging Services. http://logging.apache.org/log4j/1.2/. [citado en p. 65][Chris Chalk, 2007] Chris Chalk, Ed Burns, J. H. (2007). JavaServerFaces: The Com-plete Reference. http://www.amazon.com/JavaServer-Faces-Complete-Reference/dp/0072262400/. [citado en p. 65][Costello, 2002] Costello, R. L. (2002). Building Web Services the REST Way.http://www.xfront.com/REST-Web-Services.html.roger.costello@gmail.com. [citado en p. 43][Erich Gamma, 1994] Erich Gamma, Richard Helm, R. J. J. V. (1994). Design Patterns:Elements of reusable object-oriented software. http://amzn.to/dnn9Lt. [citado en p. 64, 65][EstadisticasGratis, 2004a] EstadisticasGratis (2004a). Calidad del Color. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=Browsers#color.[citado en p. 53][EstadisticasGratis, 2004b] EstadisticasGratis (2004b). Estadísticas y contadores gratis paratu web. http://www.estadisticasgratis.com/. [citado en p. 49][EstadisticasGratis, 2004c] EstadisticasGratis (2004c). Trá�co Diario. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=TraficDay.[citado en p. 51, 52] 113 BIBLIOGRAFÍA 114[EstadisticasGratis, 2004d] EstadisticasGratis (2004d). Trá�co Horario. http://www.estadisticasgratis.com/stats.php?id_project=39&report_name=TraficHour.[citado en p. 49][Feldt, 2007] Feldt, K. C. (2007). Programming Firefox : Building Applications in the Browser.http://www.amazon.com/Programming-Firefox-Building-Internet-Applications/dp/0596102437//ref=sr_1_1?ie=UTF8&s=books&qid=1289316386&sr=1-1#_.[citado en p. 17][Fielding, 2000] Fielding, R. T. (2000). Architectural Styles and the Design of Network-basedSoftware Architectures. http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm. [citado en p. 65][Firefox, 2007a] Firefox, M. (2007a). MDN XPConnect. https://developer.mozilla.org/en/XPConnect. [citado en p. 20][Firefox, 2007b] Firefox, M. (2007b). Mozilla Developer Center. The Joy of XUL. https://developer.mozilla.org/en/About_JavaScript. [citado en p. 28, 29][Firefox, 2007c] Firefox, M. (2007c). Mozilla Developer Center. XUL. Gecko. https://developer.mozilla.org/es/Gecko. [citado en p. 20][Firefox, 2008a] Firefox, M. (2008a). Extensiones. https://developer.mozilla.org/es/Extensiones. [citado en p. 20][Firefox, 2008b] Firefox, M. (2008b). Mozilla Developer Center. Uso de Componentesxpcom. https://developer.mozilla.org/index.php?title=Es/Creacinentes_XPCOM/Uso_de_Componentes_XPCOM. [citado en p. 20][Firefox, 2009a] Firefox, M. (2009a). Mozilla Developer Center. JavaScript.https://developer.mozilla.org/es/JavaScript. [citado en p. 19, 24][Firefox, 2009b] Firefox, M. (2009b). Firefox architecture is very similar to web pages thatuse dynamic HTML. http://www.soi.wide.ad.jp/class/20070050/slides/01/index_15.html. [citado en p. 17, 18, 19][Firefox, 2009c] Firefox, M. (2009c). Mozilla Developer Center. CSS.https://developer.mozilla.org/es/CSS. [citado en p. 19][Firefox, 2009d] Firefox, M. (2009d). Mozilla Firefox Extension Development Tutorial.http://www.soi.wide.ad.jp/class/20070050/slides/01/index_10.html.[citado en p. 18][Firefox, 2009e] Firefox, M. (2009e). XPIDL. https://developer.mozilla.org/en/XPIDL.[citado en p. 20][Firefox, 2009f] Firefox, M. (2009f). XUL. https://developer.mozilla.org/es/XUL.[citado en p. 19, 25] BIBLIOGRAFÍA 115[Gavin king, 2009] Gavin king, Christian Bauer, M. R. A. E. B. S. E. (2009). Hibernate Refe-rence Documentation. http://docs.jboss.org/hibernate/core/3.5/reference/en-US/pdf/hibernate_reference.pdf. [citado en p. 64][King, 2008] King, A. B. (2008). Website Optimization.http://my.safaribooksonline.com/book/web-development/9780596515089/firstchapter. [citado en p. 102][librosweb.es, 2009] librosweb.es (2009). Especi�caciones o�ciales. http://www.librosweb.es/javascript/capitulo1/especificaciones_oficiales.html. [citado en p. 22, 23][librosweb.es, 2010] librosweb.es (2010). Mozilla Firefox. https://developer.mozilla.org/en/About_JavaScript. [citado en p. 23][maestros del web, 2007] maestros del web (2007). Herramientas para medirlas estadisticas de tu web. http://www.maestrosdelweb.com/editorial/herramientas-para-medir-las-estadisticas-de-tu-web/. [citado en p. 44][Oracle, 2010] Oracle (2010). The Java EE 6 Tutorial. http://download.oracle.com/javaee/6/tutorial/doc/javaeetutorial6.pdf. [citado en p. 64, 65][PrimeFaces, 2009] PrimeFaces (2009). Primefaces. http://www.primefaces.org/.[citado en p. 65][Producciones, 2008] Producciones, C. (2008). JavaScript-DHTML. Creación de Páginas WebDinámicas. http://www.ceneac.com.ve/. [citado en p. 22, 23][Scribd, 2008] Scribd (2008). PRESENTACION XUL.http://www.scribd.com/doc/37886018/PRESENTACION-XUL. [citado en p. 25][Shailesh K. Mishra, 2007] Shailesh K. Mishra, S. E. I. (2007). RESTful Web services andtheir Ajax-based clients. http://www.ibm.com/developerworks/webservices/library/ws-restajax/. [citado en p. 43][WikiBooks, 2009a] WikiBooks (2009a). XUL/Introducción. http://es.wikibooks.org/wiki/XUL/Introduccion. [citado en p. 25, 31][WikiBooks, 2009b] WikiBooks (2009b). XUL/Primer ejemplo. http://es.wikibooks.org/wiki/XUL/Primer_ejemplo. [citado en p. 31][xprogramming, 2001] xprogramming (2001). What is Extreme Programming? http://xprogramming.com/xpmag/whatisxp. [citado en p. 62]