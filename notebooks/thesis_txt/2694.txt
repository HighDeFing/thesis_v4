1 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación SISTEMA DE GESTIÓN DE PREPARADORES PARA LA FACULTAD DE CIENCIAS DE LA UCV Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela, por las bachilleres: Jessica Mariana Martínez L. - C.I.: 18.110.822 Josimar Alejandra Córdova A.- C.I.: 18.760.512 Para optar por el título de Licenciado en Computación Tutor Académico: Prof. Robinson Rivas Caracas, Octubre de 2009 2 Agradecimientos Primeramente a mi Buen Dios y Señor Jesucristo, “Digno eres, Señor y Dios nues- tro, de recibir la gloria, la honra y el poder, porque tú creaste todas las cosas” Apocalipsis 4:11. A mis padres Sergio Martínez y Mariana de Martínez y a mi hermana Jocabed Martínez por su amor, dedicación, colaboración y comprensión durante todo este tiempo de estudio y vida, les agradezco mucho. A mi amiga y compañera de tesis Josimar Córdova, quien es un complemento para mí tanto en este trabajo que realizamos como en muchas etapas de la carrera, en las cuales sobrepasa el valor de su amistad. A mi tutor Robinson Rivas por su apoyo y darnos la oportunidad de trabajar con él en este proyecto. A mis profesores de los cuales he tenido el privilegio de aprender, entre ellos muy especialmente a Luis Manuel Hernández y quien también es mi tutor Robinson Rivas. A Efraín Gatuzz quien es mi novio y amigo, por su amor y su cooperación, además de que su presencia en todo momento es muy valiosa para mí. A algunos amigos que han prestado su ayuda incondicionalmente: David Molina, Daniel Espinoza, Angel Díaz, entre otros amigos que han estado pendiente. Finalmente a todos los que de una u otra manera no sólo han colaborado con la realización de este Trabajo Especial de Grado sino que han estado en buenas y malas durante toda la carrera de computación en estos 5 años, Gracias!!! Jessica Martínez 3 Esta tesis, ha requerido de mucho esfuerzo y mucha dedicación, no hubiese sido posible su finalización sin la cooperación desinteresada de todas y cada una de las personas que a continuación citaré y muchas de las cuales han sido un soporte muy fuerte para mí en momentos de angustia. En primer lugar quiero dar gracias a Dios, mi Guía, por estar conmigo en cada paso que doy, por enseñarme que no hay nada imposible, por fortalecer mi corazón e iluminar mi mente en momentos en que lo necesitaba, por haber puesto en mi camino a aquellas personas que han sido mi soporte y compañía durante todo el período de estudio y por darme la oportunidad de experimentar una vida de estudios feliz con las personas ideales en mi vida, con profesores únicos y estudiar en una Universidad Excelente como lo es la Universidad Central de Venezuela. Quiero agradecer hoy y siempre a mi familia que siempre están al tanto del éxito de mi trabajo especial de grado y me brindan la fortaleza necesaria para seguir adelante, a mis padres por criarme de la manera en que lo hicieron para así hacerme una persona buena y noble de corazón, en especial a mi madre Coralia la mujer más luchadora que conozco, gracias a ella es que soy lo que soy, mami gracias por todo el amor que me has dado y que me das todos y cada uno de mis días, éste logro te lo dedico a tí. A mis hermanos que son mi fuente de energía y de amor, a mi hermana Betzimar por seguirme en todo el trayecto de mi tesis, por darme el ánimo que necesito para llevar el triunfo de una graduación juntas, Y a mi hermanito Arthur por toda la alegría que me transmite en todo momento. A mi tía Rosita por estar siempre pendiente de mi bienestar y por desear tanto como yo la culminación de la tesis y a mi tío Alberto por ser como un padre para mí y un ejemplo a seguir en mis estudios. A mis amigos de estudio, con los que comparto las mismas experiencias y nos ponemos el hombro cada vez que se necesita, con los que compartí momentos inolvidables 4 en toda mi carrera, estudios en la biblioteca, transnochos de programación, viajes, congreso, entre muchas otras cosas. Gracias a ellos mi vida universitaria fue única, amena y divertida. Un agradecimiento especial a mi gran amiga y compañera de tesis Jessica Martínez y a su linda familia, a Jessi por todo su paciencia, por confiar y creer en mí, ser como una hermana, guiarme siempre por el camino de Dios y sobre todo por su valiosa amistad, se que siempre podré contar con ella y a su familia por toda la hospitalidad y el cariño que me ofrecen. A mis amigos que estuvieron muy pendientes y en continua colaboración con el desarrollo de esta tesis, ya que dentro de los ámbitos que a cada uno le competen me han colaborado sin ponerme ningún impedimento, al contrario, me han brindado siempre una sonrisa, gracias a David Molina, Daniel Espinoza, Isaura Ruiz, Angel Díaz, Eliezer Robles y Aurimar Rodriguez. A Jick, por ser la persona que ha compartido el mayor tiempo de la tesis a mi lado, porque en su compañía las cosas malas se convierten en buenas y porque simplemente me alegra su compañía. A mi tutor Robinson Rivas por apoyarnos en todo momento no sólo en la tesis sino en toda la carrera de Computación, por ser la persona más positiva en el desarrollo de la tesis, por ser un profesor muy ejemplar y significativo en la Universidad y al Profesor Mar- cel Castro por su colaboración, empatía y apoyo para con nosotras en estos momentos. En general quiero agradecer a todas y cada una de las personas que han vivido con- migo el desarrollo de esta tesis, con sus altos y bajos y que no necesito nombrar porque tanto ellas como yo sabemos que desde los más profundo de mi corazón les agradezco el 5 brindarme todo el apoyo, colaboración, ánimo y sobre todo cariño y amistad. A todos ustedes.. GRACIAS! Josimar Córdova Resumen La gestión de preparadores no está automatizada en la Universidad Central de Venezuela, por lo que los trámites se hacen lentos y propensos a frecuentes errores. Es- to trae como consecuencia retardos e inconvenientes administrativos en la contratación del personal docente de preparadurías. En este trabajo se diseñó y construyó una aplicación basada en tecnologías web que permiten automatizar y agilizar los procesos administrativos referentes a la contratación, seguimiento y control del personal de preparadurías. El sistema está diseñado para atender las demandas de la Facultad de Ciencias de la UCV. El diseño se basa en la metodología de flujos de trabajo (workflows) lo que lo hace flexible y fácil de extender a nuevos reque- rimientos. El sistema ha sido desarrollado en Ruby usando el framework de desarrollo Rails y una arquitectura basada en Servicios Web que permite integrar este sistema con otros ya previamente desarrollados o en desarrollo, especialmente el sistema de Control de Estudios CONEST y con el sistema de gestión de personal de la UCV. Índice general 1. Introducción 13 1.1. Antecedentes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 1.2. Organización del Trabajo . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 2. Propuesta 17 2.1. Problema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 2.2. Objetivos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 2.2.1. Objetivo General . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.2.2. Objetivos Específicos . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.3. Alcance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 2.4. Justificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 3. Marco Teórico 22 3.1. Documentos Administrativos . . . . . . . . . . . . . . . . . . . . . . . . . 22 3.2. Administración de Preparadores . . . . . . . . . . . . . . . . . . . . . . . 27 3.3. Flujo de Trabajo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 3.3.1. Diagrama de Flujo . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.3.2. Sistemas de Flujo de Trabajo . . . . . . . . . . . . . . . . . . . . . 32 3.3.3. Objetivos de un Sistema de Flujo de Trabajo . . . . . . . . . . . . 32 3.4. Proceso Administrativo de los Preparadores . . . . . . . . . . . . . . . . . 33 7 8 3.4.1. Actores del Proceso Administrativo de los Preparadores . . . . . . 33 3.4.2. Funcionamiento del Proceso Administrativo de los Preparadores . . 34 3.5. Aplicaciones Colaborativas . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.1. Elementos de un Trabajo Colaborativo . . . . . . . . . . . . . . . . 40 3.6. Aplicaciones usadas en el Sistema Actual . . . . . . . . . . . . . . . . . . 41 3.6.1. Microsoft Office Excel . . . . . . . . . . . . . . . . . . . . . . . . 41 3.6.2. SicMov . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7. Programación Extrema - XP . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7.1. Principios de XP . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7.2. Características Fundamentales del Método XP . . . . . . . . . . . 45 3.8. Definiciones de Tecnologías . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.8.1. Ruby . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.8.2. Ruby on Rails . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 3.8.3. RubyGems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 3.9. Patron de Diseño MVC (Modelo - Vista - Controlador) . . . . . . . . . . . 49 3.9.1. Utilización del Patrón MVC . . . . . . . . . . . . . . . . . . . . . 50 3.9.2. Beneficios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 3.10. Servicios Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3.10.1. Protocolos de Servicios Web . . . . . . . . . . . . . . . . . . . . . 52 3.11. Base de Datos del Sistema actual . . . . . . . . . . . . . . . . . . . . . . . 53 3.12. Estructura del Sistema Actual . . . . . . . . . . . . . . . . . . . . . . . . . 54 4. Metodología de Desarrollo 57 4.1. Análisis de Requerimientos y Diagnóstico . . . . . . . . . . . . . . . . . . 57 4.1.1. Requerimientos Generales . . . . . . . . . . . . . . . . . . . . . . 57 4.1.2. Requerimientos Funcionales . . . . . . . . . . . . . . . . . . . . . 57 4.1.3. Requerimientos No Funcionales . . . . . . . . . . . . . . . . . . . 59 9 4.1.4. Casos de Uso . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 4.2. Tipo de Investigación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 4.3. Instrumentos de Recolección de Información . . . . . . . . . . . . . . . . 67 4.4. Diagnóstico de Necesidades . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.4.1. Recursos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.5. Base de Datos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.6. Arquitectura de Ruby on Rails adaptada a SystemPAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 4.6.1. Descripción de algunos directorios del proyecto . . . . . . . . . . . 72 4.7. Estructura del Nuevo Sistema . . . . . . . . . . . . . . . . . . . . . . . . . 73 4.8. Desarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 4.8.1. Iteración 0: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 4.8.2. Iteración 1: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.8.3. Iteración 2: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.8.4. Iteración 3: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 4.8.5. Iteración 4: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 4.8.6. Iteración 5: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 4.8.7. Iteración 6: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 4.8.8. Iteración 7: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 4.8.9. Iteración 8: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 4.8.10. Iteración 9: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 4.8.11. Iteración 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 4.8.12. Iteración 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 4.8.13. Iteración 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 4.8.14. Iteración 13: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 4.8.15. Iteración 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 4.9. Interfaz de la Aplicación . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 10 4.9.1. Autenticación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 4.9.2. Módulo de Planificación y Presupuesto . . . . . . . . . . . . . . . 88 4.9.3. Módulo de Recursos Humanos . . . . . . . . . . . . . . . . . . . . 96 4.9.4. Módulo de Consejo de Facultad . . . . . . . . . . . . . . . . . . . 98 5. Conclusión 100 5.1. Conclusiones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 5.2. Recomendaciones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 5.3. Contribuciones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 5.4. Trabajos Futuros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 Apéndice A Código de uso de Sesión 103 Apéndice B Método Analizador Sintáctico Hash 104 Apéndice C Método Analizador Sintáctico REXML 106 Apéndice D Servicio Web - XML 109 Apéndice E PDF 112 Índice de figuras 3.1. Oficio - Tipo de Trámite de Nombramiento. . . . . . . . . . . . . . . . . . 25 3.2. Planilla de Movimiento. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 3.3. Minuta. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 3.4. Oficio - Tipo de Trámite de Aumento de horas. . . . . . . . . . . . . . . . 29 3.5. Oficio - Tipo de Trámite de Retiro de Preparador. . . . . . . . . . . . . . . 30 3.6. Diagrama de Flujo de los procesos administrativos de los preparadores. . . 37 3.7. Continuación del Diagrama de Flujo de los procesos administrativos de los preparadores. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.8. Patrón de Diseño MVC [14]. . . . . . . . . . . . . . . . . . . . . . . . . . 49 3.9. Vista de los Presupuestos almacenados en una Hoja de Excel. . . . . . . . . 55 3.10. Dependencias que utilizan el sistema actual. . . . . . . . . . . . . . . . . . 56 4.1. Caso de Uso - Nivel 0. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.2. Caso de Uso - Nivel 1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 4.3. Arquitectura de los componentes de base de Datos. . . . . . . . . . . . . . 70 4.4. Arquitectura MVC en Ruby on Rails. . . . . . . . . . . . . . . . . . . . . 71 4.5. Gráfico con la estructura del nuevo sistema. . . . . . . . . . . . . . . . . . 73 4.6. Vista de la Aplicación - Autenticación. . . . . . . . . . . . . . . . . . . . . 88 4.7. Vista de la Aplicación - Página principal de Presupuesto . . . . . . . . . . 90 4.8. Vista de la Aplicación - Oficios Pendientes. . . . . . . . . . . . . . . . . . 91 11 12 4.9. Vista de la Aplicación - Oficios Aceptados. . . . . . . . . . . . . . . . . . 92 4.10. Vista de la Aplicación - Oficios Rechazados. . . . . . . . . . . . . . . . . . 93 4.11. Vista de la Aplicación - Detalle Oficio. . . . . . . . . . . . . . . . . . . . . 94 4.12. Vista de la Aplicación - Detalle Oficio con error. . . . . . . . . . . . . . . . 95 4.13. Vista de la Aplicación - Detalle Modificar Planilla de Movimiento de Per- sonal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 4.14. Vista de la Aplicación - Planilla SicMov. . . . . . . . . . . . . . . . . . . . 98 4.15. Vista de la Aplicación - Consejo de Facultad. . . . . . . . . . . . . . . . . 99 Capítulo 1 Introducción Uno de los procesos administrativos más importantes de la Facultad de Ciencias es el referente al concurso, contratación, control y retiro de los preparadores. La automa- tización de estos procesos se ha vuelto una gran necesidad, debido al incremento de la población estudiantil y a las exigencias de más plazas para preparadores en diferentes ma- terias y la gran movilidad que estos cargos tienen, ya que éstos comúnmente cambian cada semestre. A pesar de su importancia, el sistema de administración de los preparadores no es un sistema único sino un conjunto de programas que trabajan de forma totalmente indepen- diente, unidos por la comunicación del personal que lo maneja. Esta situación produce comúnmente que la información no sea integral, ya que los mismos datos de las personas registradas en los programas se transcriben más de una vez, por lo que se puede generar el error humano. Ejemplos comunes de estos errores son equi- vocarse en un número de la cédula, equivocarse en los nombres, etc. La automatización que se desea implementar en la Facultad de Ciencias, permitirá establecer de forma precisa y coordinada el control de los preparadores, tanto en el aspecto 13 14 académico como administrativo, permitiéndole conocer en cualquier momento el estado de cada uno de los aspectos de la operación, para una toma de decisiones objetiva y acerta- da a los niveles tácticos, operativos y estratégicos. Para esto se realizó la aplicación web SystemPAP (Sistema para la gestión de Procesos Administrativos de Preparadores), con la cual se tienen los siguientes beneficios: Establecer y controlar la entrega de la documentación por parte de los preparadores para tener su registro en regla. Conocer los adeudos de documentación para prever y aplicar medidas correctivas. Establecer las políticas académicas necesarias para el ingreso de los preparadores, eliminando errores al registrar los trámites de los preparadores. Establecer un Flujo de Trabajo entre diferentes entes del personal administrativo de la Facultad de Ciencias. Como por ejemplo: el personal de Recursos Humanos, el personal de Presupuesto y el personal de cada Escuela perteneciente a la Facultad de Ciencias, para poder manejar así los mismos datos con un orden específico, y mantener la armonía en el proceso administrativo. Automatizar los procesos identificados. Centralizar los procesos de gestión administrativa de los preparadores a un solo sis- tema Web en el que se trabaje con múltiples usuarios desde diferentes localidades específicas. Ahorrar tiempo al asignar un preparador a una materia. Los usuarios podrán obtener reportes acerca de los resultados y estados en el sistema administrativo y académico. Consolidar la información. 15 Tomando en cuenta la importancia de cada una de las funcionalidades identificadas se aplicó un método de desarrollo ágil en un contexto de trabajo real, para el desarrollo de una aplicación Web cliente-servidor, que sea accesible y fácil de usar; de manera tal que pueda implantarse en cada una de las oficinas de la facultad que estén encargados de esta gestión administrativa, y que permita agilizar diferentes operaciones con los preparadores. 1.1. Antecedentes Actualmente se realiza este trabajo de manera manual haciéndose modificaciones de la información en cualquiera de los puntos del flujo de trabajo, ocasionando inconsis- tencia en los datos. Hay otras aplicaciones que se realizaron con el fin de mejorar la gestión de los estu- diantes, procesos administrativos y académicos como lo son Conest y Sicmov, donde tanto profesores como alumnos han colaborado para su desarrollo. CONEST: Como explica Y. Boyer y N. Méndez en su Trabajo Especial de Grado Automatización de procesos relacionados con las solicitudes estudiantiles y actividades administrativas y de docencia de la Facultad de Ciencias [1], “La División de Control de Estudios se encuentra automatizando sus procesos con el fin de ofrecer mejor servicio a sus usuarios. Realizaron la aplicación por docentes y estudiantes en calidad de desarrolladores de sistemas basados en plataforma de software libre”, y su objetivo general fue “Desarrollar una aplicación web que automatice el conjunto de procesos relacionados a las diversas so- licitudes estudiantiles y actividades que realizan las escuelas y dependencias de la Facultad de Ciencias, en relación a la División de Control de Estudios, dando soporte de personal involucrado aumentando así su satisfacción y al mismo tiempo contribuir en la disminución de los costos y los tiempos de respuesta”. 16 SicMov: como expresó R. Cáceres en su Trabajo Especial de PostGrado Diseño de una herramienta de automatización y sequimiento de las solicitudes de beneficios socioe- conómicas de los empleados de la Universidad Central de Venezuela, su trabajo “presenta el diseño de una aplicación web que simplifica y automatiza los procedimientos para la tramitación de los beneficios socioeconómicos de los empleados que laboran en la UCV”. Este Trabajo es un módulo complementario de la Aplicación SicMov [2]. 1.2. Organización del Trabajo Este trabajo se divide en: Propuesta: esta sección contiene la explicación del problema estudiado y tratado, los objetivos planteados, el alcance del trabajo y su justificación. Marco Teórico: contiene los conceptos de los términos más utilizados y explica- ciones tanto de la metodología usada como de la tecnología con que se desarrolló el trabajo. Metodología de Desarrollo: en esta sección se explica el desarrollo del trabajo, aplicándo la metodología de Programación Extrema (XP). Conclusiones: finalmente las conclusiones y las recomendaciones, las contribuciones del trabajo realizado y una breve explicación de los trabajos futuros que se puedan hacer. Capítulo 2 Propuesta 2.1. Problema La administración de todos los procesos que tienen relación con los preparadores es un trabajo largo y delicado, que toma mucho tiempo en revisiones y verificaciones de los datos, este trabajo se hace de forma manual y ocasiona que se retrasen en general los procesos a realizar. A medida que el tiempo avanza, la cantidad de preparadores a los que se tiene que hacer sus contratos, retiros, aumento o disminución de cargo, se hace mayor. Debido a es- ta demanda, el trabajo que se hace a diario en las oficinas de administración es cada día más engorroso por la cantidad de transcripciones a mano que se deben realizar, además de papeles en cantidades que son difíciles de almacenar y trasladar en estas oficinas. Además la espera para que estos documentos sean enviados a todas las oficinas perninentes para su procesamiento es mucha, en comparación con la comunicación a través de las redes de computadoras en las que sería cuestión de segundos que la información contenida en ellos pase de un lado a otro con menos probabilidad de errores y complicaciones. En el sistema actual hay ciertos cambios que se deben hacer y que a su vez se pre- 17 18 sentan en los puntos que siguen para describir con mayor detalle las limitaciones y alcances del mismo que se deben fortalecer y completar. Limitaciones y Alcances del sistema actual: Existe mucha limitación en cuanto a las operaciones que se requieran, como por ejemplo las búsquedas que se quieran consultar o las modificaciones que se necesiten para un instante determinado. Los períodos de tiempo para completar una operación con los preparadores es muy largo, a veces puede tardar de uno a tres meses pero hay casos críticos que llega a ser un período de espera de dos años. Hay alta probabilidad de errores de transcripción, por ejemplo los presentados más adelante en la sección de la Justificación. El manejo de cambios en la base de datos es engorroso y redundante. CONEST es un sistema independiente y si se quieren acceder a los datos se puede hacer de forma manual, a través del personal encargado o por los mismos estudiantes. El sistema SicMov se alimenta de los datos ingresados por transcripción. 2.2. Objetivos En vista de este panorama, se han propuesto los siguientes Objetivos Generales y Específicos. 19 2.2.1. Objetivo General Automatizar los procesos administrativos de los preparadores en los Departamen- tos de Presupuesto, Recursos Humanos y Consejo de Facultad de la Facultad de Ciencias de la Universidad Central de Venezuela, a través de un sistema Web que gestione dichos procesos. 2.2.2. Objetivos Específicos Investigar el funcionamiento del sistema actual que administra los retiros, nom- bramientos, aumento y disminución de horas de los preparadores. Desarrollar un flujo de trabajo que describa los procesos que afectan la adminis- tración de los preparadores de la Facultad de Ciencias de la U.C.V. Evaluar las posibilidades de mejoras del sistema actual en comparación con la tec- nología que se quiere implantar. Implantar una metodología de desarrollo para implementar un sistema web operable que cumpla con todos los requerimientos necesarios para gestionar a los preparadores y todas las actividades administrativas correspondientes. Desarrollar una interfaz usable en la que se realicen las diferentes actividades para la administración de preparadores para los módulos de Presupuesto, Recursos Humanos y Consejo de Facultad de la Facultad de Ciencias. Diseñar el proceso de integración con Sicmov y CONEST. 20 2.3. Alcance Este trabajo de grado permite la comunicación por medio de la web de los diferentes módulos que manejan los procesos administrativos de los preparadores hasta el momento en que se migran los datos al sistema SicMov, el cual es el encargado de hacer un seguimiento del movimiento de personal hasta llegar al rectorado donde se hace efectivo. Se aplicará específicamente a la Facultad de Ciencias de la UCV pero podría ser migrado para satisfacer las necesidades similares de otras facultades. 2.4. Justificación Este trabajo ayudará en gran manera a simplificar el trabajo administrativo que se lleva a cabo día a día en la Facultad de Ciencias de la U.C.V., se comunicará con bases de datos que tienen diferentes funcionalidades pero que mantendrán la información de forma central para el sistema, de esta manera se va a evitar ciertos errores como: Acceso a datos defasados, o datos fantasma, generalmente por la redundancia o tam- bién causados por múltiples archivos que actúan como BD, si por ejemplo se ac- tualiza en CONEST el nombre de un estudiante que inicialmente estaba guardado mal, el problema continúa estando en los demás lugares en donde está registrado el estudiante. Se podrá no sólo simplificar este tipo de errores sino que el tiempo que tardaría en realizarse cualquier operación mejoraría notablemente. Es muy importante que en cuanto a la eficiencia de estos procesos administrativos, se haga todo de la mejor forma posible, y con el avance de la tecnología es necesaria la actualización de los sistemas tradicionales y hacer cambios, aunque pueda acarrear un repudio inicial, es cuestión de tiempo hacer un 21 plan de introducción al nuevo sistema para el personal que lo va a operar, el hecho es que en ocasiones los cambios son una necesidad y este caso lo amerita. El desarrollo de un sistema que automatice los procesos para la administración de los preparadores de toda la Facultad de Ciencias, que hasta ahora se han llevado a cabo de manera tradicional, con ayuda de algunas aplicaciones, es muy factible, debido a que se cuenta tanto con la información necesaria, como con la disponibilidad del personal de desarrollo del nuevo sistema y del personal que lo va a operar en un futuro cuando esté en funcionamiento. En vista de que están disponibles los recursos necesarios para la realiza- ción del estudio, será cuestión de tiempo para poder ser operable y quede en funcionamiento cumpliendo con los propósitos planteados para el mismo. Capítulo 3 Marco Teórico 3.1. Documentos Administrativos Oficio: El oficio es un tipo de documento que sirve para comunicar disposiciones, consultas, órdenes, informes, o también para llevar a cabo gestiones de acuerdos, de co- laboración, entre otros. Estas redacciones se utilizan en instituciones como: universidades, ministerios, embajadas, municipios, sindicatos y oficinas de gobierno, entre otras [3]. Oficio aplicado en la Facultad de Ciencias: Es la planilla generada por la Escuela correspondiente dirigida al Consejo de Facultad, donde se lleva el trámite de nombramien- to, retiro, aumento o disminución de horas de los preparadores; contiene todos los datos necesarios para realizar la operación, tales como: el asunto (si es retiro, nombramiento o modificación en la cantidad de horas laborales), nombres y apellidos del bachiller al que se refiere el trámite, su cédula, el cargo que ocupa, dedicación (especifica el número de horas que se trabaja en el cargo), la fecha de ingreso, fecha efectiva, unidad ejecutora, pro- grama, disponibilidad presupuestaria, además en otra sección del documento se especifíca los documentos anexos que se requieren para llevar a cabo el proceso completo. También están los sellos y firmas correspondientes a las oficinas por donde pasan todos estos pape- les (incluyendo al Decano). Al final del documento hay una sección para la Resolución del 22 23 trámite, en el cual se coloca si fue aprobado o no, con la fecha del día correspondiente. Se puede observar un ejemplo de oficio en la Figura 3.1. Planilla de Movimiento: Es un documento generado por el sistema SICMOV, en la figura 3.2 se puede ver como es una planilla de movimiento; que contiene la siguiente información: Datos de la Planilla: contiene el número identificador de la planilla, la fecha de elaboración de la misma, el tipo de movimiento y el nombre y apellido de la persona a quien pertenece el trámite. Datos Personales: en esta sección están la cédula, fecha de nacimiento, país de ori- gen, ciudad de origen, estado civil, sexo, carga familiar, grado de instrucción, direc- ción de habitación, e-mail y telefono. Datos del Cargo: tipo de nómina, facultad o dependencia, fecha ingreso, fecha efec- tiva, fecha fin contrato, unidad ejecutora, dedicación, categoría docente, cargo, cargo vigente, grado, tab OPSU, tipo de personal, jornada, tipo de contrato, variación de sueldo, sueldo mensual, motivo del movimiento de personal. Modificaciones: los campos de modificaciones de apellido, nombre, cédula, Facultad o Dependencia Central, unidad ejecutora, tipo de nómina, tipo de personal, nuevo cargo, nueva dedicación y nueva categoría. Cuerpo de Remuneraciones Adicionales: contiene la comparación o diferencia de sueldo en Bolívares, gastos representados en Bolívares, prima A, monto prima rango B, monto en Bolívares, prima B, homologación en Bolívares. Datos Presupuestarios: contiene el código de presupuesto, cuenta de egreso, unidad ejecutora, tipo de personal y el id de detalle. 24 Firmas Autorizadas de la Solicitud: ejemplo de estas firmas son: Elaborado por o Aprobado por. Observaciones: información adicional para explicar algún punto del trámite que se considere importante. Anexos: Para realizar el proceso administrativo de un preparador, sea nombramien- to, retiro, aumento o disminución de horas se necesitan unos documentos específicos. Es- tos documentos son: el acta de concurso del preparador, constancia de No-Pasante, No- Becario, Kardex, Copia de la cédula de identidad, planillas de empleo, y por último la planilla de datos personales. Minuta: Lista detallada que se realiza por escrito y se genera en una reunión y presenta los puntos tratados en la misma y queda expresado como un Acta de Consejo de Facultad, en la Figura 3.3, se puede ver una minuta de la Facultad de Ciencias. 25 Figura 3.1: Oficio - Tipo de Trámite de Nombramiento. 26 Figura 3.2: Planilla de Movimiento. 27 Figura 3.3: Minuta. 3.2. Administración de Preparadores El Preparador es un estudiante de la Facultad de Ciencias que se dedica a enseñar, preparar y dar clases o lecciones a otros estudiantes sobre una determinada materia, super- visado por el profesor de la cátedra. Los preparadores se clasifican de la siguiente manera: Preparador I: Es un tipo de preparador en el cual su desempeño en labor equivale a 6 horas académicas. Preparador II: Es un tipo de preparador en el cual su desempeño en labor equivale a 12 horas académicas. Los tipos de trámites que se realizan para los preparadores son los siguientes: 28 Nombramiento: Consiste en agregar un preparador al sistema con un cargo que puede ser preparador I o preparador II, por ejemplo en la Figura 3.1, se puede obser- var un ejemplo de un oficio con asunto nombramiento de preparador I. Aumento o Disminución de Horas: El preparador en el período que transcurre en- tre un semestre y otro, puede aumentar su cargo de preparador I a preparador II, o disminuir de cargo de preparador II a preparador I, se puede observar un oficio de aumento de horas de preparador I a preparador II en la Figura 3.4. Retiro: Un preparador que después de cumplir su período de trabajo durante un semestre y no va a seguir ejerciendo la labor que hasta ese momento llevó, entonces es retirado de su cargo, en esos casos el cargo queda disponible para otro estudiante. En la Figura 3.5, se puede ver un ejemplo de este tipo de trámite. Una vez elaborado por la escuela correspondiente, un oficio o trámite de personal, aprobado por el Consejo de Escuela, el trámite ya sea de nombramiento, de retiro, de au- mento o disminución de horas, se remite al departamento de Presupuesto de la Facultad para verificación de los datos del cargo. Posteriormente el trámite pasa al departamento de Recursos Humanos de la Facultad para verificación nuevamente de los datos y soportes del trámite, que son todos los documentos anexos al mismo. Luego se envía al Consejo de Facultad para su aprobación, y una vez aprobado, el consejo de Facultad lo devuelve al departamento de Recursos Humanos para la elaboración del movimiento de personal. Esta información fue extraida de las continuas entrevistas a las personas encargadas de los Departamentos de Recursos Humanos y Presupuesto. 29 Figura 3.4: Oficio - Tipo de Trámite de Aumento de horas. 30 Figura 3.5: Oficio - Tipo de Trámite de Retiro de Preparador. 31 3.3. Flujo de Trabajo Flujo de Trabajo: (workflow en inglés) Es el estudio de los aspectos operacionales de una actividad de trabajo: cómo se estructuran las tareas, cómo se realizan, cuál es su orden correlativo, cómo se sincronizan, cómo fluye la información que soporta las tareas y cómo se le hace seguimiento al cumplimiento de las tareas. Si bien el concepto de flujo de trabajo no es específico a la tecnología de la información, una parte esencial del software para trabajo colaborativo (groupware) es justamente el flujo de trabajo [5]. El Flujo de Tra- bajo de los procesos para la administración de los preparadores de la Facultad de Ciencias se puede detallar en la Figura 3.6 y 3.7. Una aplicación de Flujos de Trabajo automatiza la secuencia de acciones, activi- dades o tareas, utilizadas para la ejecución del proceso, incluyendo el seguimiento del esta- do de cada una de sus etapas y la aportación de las herramientas necesarias para gestionarlo. Se pueden distinguir tres tipos de actividades [4]: Actividades Colaborativas: Un conjunto de usuarios trabajan sobre un mismo re- positorio de datos para obtener un resultado común. Actividades Cooperativas: Un conjunto de usuarios trabajan sobre su propio con- junto particular, estableciendo los mecanismos de cooperación entre ellos. Actividades de Coordinación: son las actividades en las que se divide el trabajo per- mitiendo así reducir complejidad y los problemas a unidades menores, a subsistemas especializados. 32 3.3.1. Diagrama de Flujo Es una forma más tradicional de especificar los detalles algorítmicos de un proceso y constituye la representación gráfica de un proceso multifactorial [5]. Se utiliza princi- palmente en programación, economía y procesos industriales, pasando también a partir de estas disciplinas a formar parte fundamental de otras, como la psicología cognitiva; estos diagramas utilizan una serie de símbolos con significados especiales. Son la representación gráfica de los pasos de un proceso, que se realiza para entenderlo mejor. 3.3.2. Sistemas de Flujo de Trabajo El propósito de los sistemas de workflow, o BPMS (Business Process Management Systems - Sistemas de Gestión de Procesos de Negocio), es acercar personas, procesos y máquinas, con el objeto de reducir tiempo y acelerar la realización de un trabajo. Estos sistemas permiten trabajar en equipo desde diferentes lugares físicos. Los sistemas de workflow facilitan la automatización de los flujos de trabajo entre procesos y permiten integrar los procesos de la empresa, rediseñados de acuerdo con ayuda de nuevas estrategias [5]. 3.3.3. Objetivos de un Sistema de Flujo de Trabajo Los objetivos de un Sistema de Flujo de Trabajo son [5]: Reflejar, mecanizar y automatizar los métodos y organización en el sistema de infor- mación. Establecer los mecanismos de control y seguimiento de los procedimientos organi- zativos. 33 Independizar el método y flujo de trabajo de las personas que lo ejecutan. Facilitar la movilidad del personal. Soportar procesos de reingeniería de negocio. Agilizar el proceso de intercambio de información y agilizar la toma de decisiones de una organización, empresa o institución. 3.4. Proceso Administrativo de los Preparadores En esta sección se explican los actores que intervienen en el Proceso Administrativo de los preparadores, el flujo de trabajo y la explicación detallada del mismo. 3.4.1. Actores del Proceso Administrativo de los Preparadores Escuela: Divisiones de las diferentes áreas académicas pertenecientes a la Facultad de Ciencias, La escuela es una unidad académico administrativa, encargada de coor- dinar y velar por el buen desarrollo de la Docencia de las materias de la misma, tanto básicas, electivas como del componente profesional. Fundamenta sus actividades en la Comisión de Docencia. Las Escuelas que participan en este flujo de trabajo son 6: Escuela de Biología, Escuela de Computación, Escuela de Física, Escuela de Geoquímica, Escuela de Matemáticas y Escuela de Química. La escuela se encarga de gestionar las plazas de los preparadores elegidos para así generar el trámite de Personal. Departamento de Presupuesto: Ente que se encarga de dirigir la administración del presupuesto de la Facultad de Ciencias de acuerdo a las necesidades y prioridades del Órgano Judicial con bases en las directrices emanadas en la Ley de Presupuesto 34 y el Ministerio de Economía y Finanzas. Este departamento se encarga de verificar los Datos de los preparadores y verificar la disponibilidad de presupuesto. Departamento de Recursos Humanos: La función de Recursos Humanos está com- puesta por áreas tales como Reclutamiento y Selección, Compensaciones y Benefi- cios, Formación y Desarrollo, y Operaciones. Para poder ejecutar la estrategia de la organización es fundamental la administración de los Recursos Humanos. En el flujo de trabajo el Departamento de Recursos Humanos se encarga de Verificar anexos de los datos de los preparadores, gestionar la minuta que genera el Consejo de Facultad para generar así la planilla de movimiento de Personal. Consejo de Facultad: Debe velar por el funcionamiento normal de la Facultad y el cumplimiento cabal de sus fines, coordinando las actividades académicas, planes de estudio y aspectos administrativos relacionados con el personal. Está integrado por el Decano, siete representantes de los profesores, un representante de los egresados y dos representantes estudiantiles. Los Coordinadores y Directores asisten con derecho a voz. Su responsabilidad en el flujo de trabajo es generar la minuta que se gestiona a lo largo del procedimiento y la aprobación de los trámites del preparador en cuestión. Se puede comtemplar el funcionamiento actual del Proceso Administrativo de los Preparadores con el diagrama que se muestra en las Figuras 3.6 y 3.7: 3.4.2. Funcionamiento del Proceso Administrativo de los Preparadores A continuación se explican las Figuras 3.6 y 3.7 de forma detallada cada uno de los pasos del Flujo de Trabajo: 1. La Escuela pregunta por la disponibilidad de presupuesto en el Departamento de Presupuesto para tener conocimiento de las plazas vacantes para los preparadores. 35 2. El Departamento de Presupuesto verifica la disponibilidad de Presupuesto y si hay cargos disponibles. Pueden darse dos casos: 2.1. Si no hay cargos disponibles En este punto termina el Flujo de trabajo, ya que no hay cargos de preparadores para gestionar. 2.2. Si hay cargos disponibles el Departamento de Presupuesto envía las plazas va- cantes u ocupadas para los preparadores. 3. La Escuela recibe las plazas vacantes u ocupadas de sus preparadores. 4. La Escuela realiza todos los pasos para elegir preparadores y se lleva a cabo el pro- ceso de selección. 5. Una vez que se eligieron los preparadores para ocupar las plazas vacantes la escuela realiza los trámites administrativos para gestionar a los preparadores con sus datos personales y sus documentos académicos. 6. El Departamento de Presupuesto verifica los datos. Puede ocurrir lo siguiente: 6.1. En caso de que los datos no sean correctos el Departamento de Presupuesto especifica los errores y regresan el trámite a la Escuela respectiva que emitió la in- formación de manera que la corrija y se vuelvan a verificar los datos (Paso 6). 6.2. En caso de que los datos sean correctos el trámite es llevado a Recursos Hu- manos. 7. El departamento de Recursos Humanos verifica los datos y los anexos del preparador, cabe destacar que en estos anexos está incluida el Acta de la escuela respectiva. Puede ocurrir lo siguiente: 7.1. En caso que alguno de los anexos no sea correcto los documentos son retornados a la escuela respectiva para que se vuelva a generar el trámite del preparador en cuestión. 7.2. En caso que los anexos sean correctos el trámite se lleva a Consejo de Facultad. 36 8. El Consejo de Facultad genera la minuta donde se consideran los puntos de discusión de la aceptación de cada trámite de preparador. 9. El Consejo de Facultad aprueba o no al trámite. 10. El Departamento de Recursos Humanos recibe la minuta original por parte del Con- sejo de Facultad y la archiva. 11. La Escuela correspondiente recibe la parte de la minuta que contiene a los preparadores. 12. El Departamento de Recursos Humanos genera la planilla de movimiento de perso- nal. 37 Figura 3.6: Diagrama de Flujo de los procesos administrativos de los preparadores. 38 Figura 3.7: Continuación del Diagrama de Flujo de los procesos administrativos de los preparadores. 39 3.5. Aplicaciones Colaborativas Trabajo Colaborativo: se define como procesos intencionales de un grupo para alcanzar objetivos específicos, más herramientas diseñadas para dar soporte y facilitar el trabajo.[6] En el marco de una organización, el trabajo en grupo con soporte tecnológico se presenta como un conjunto de estrategias que tienden a maximizar los resultados y mini- mizar la pérdida de tiempo e información, en beneficio de los objetivos organizacionales. El mayor desafío es lograr la motivación y participación activa del recurso humano. Además deben tenerse en cuenta los aspectos tecnológicos, económicos y las políticas de la organización. Trabajo colaborativo o groupware son palabras para designar el entorno en el cual todos los participantes del proyecto trabajan, colaboran y se ayudan para la realización del proyecto. El trabajo cooperativo mediado por el computador CSCW (Computer Supported Cooperative Work) fue utilizado por primera vez en 1984 por Irene Greif, del Massachus- sets Institute of Technology, y Paul Cashman, de la Digital Equipment Corporation. En ese año tuvo lugar en Estados Unidos el primer taller de CSCW, cuyo objetivo fue reunir a personas de diferentes disciplinas para analizar las características de comunicación y coor- dinación en grupos de trabajo [7]. Pero en la automatización de oficinas no había conocimiento necesario para enten- der cómo es que la gente trabaja en grupos y organizaciones y cómo la tecnología afecta su trabajo. Lo que trajo consigo un interés hacia el estudio de CSCW por parte de economis- tas, psicólogos sociales, antropólogos teóricos y organizacionales, educadores y muchos 40 otros que pudiesen aportar un mejor entendimiento de las actividades de grupo. A partir de todos estos antecedentes y definiciones M. Roseman lo definió como: CSCW es un campo encargado de la investigación, desarrollo de principios, herramientas y técnicas que sirvan de apoyo al trabajo cooperativo mediante el uso del computador, por parte de un grupo de trabajo previamente etablecido los cuales pueden mantener la comu- nicación, cooperación y coordinación gracias al uso de la combinación de las diferentes tecnologías de redes, hardware, software y aplicaciones que presten los servicios necesa- rios para conseguir un objetivo común que beneficie a todos sus miembros [8]. Las Aplicaciones Colaborativas deben estar orientadas a: Proveer un ambiente de colaboración, en el que realmente se perciba que el trabajo en grupo se lleva a cabo. Mantener la información en un solo sitio común para todos los miembros. Interactuar con otros usuarios, de forma escrita, voz o video. 3.5.1. Elementos de un Trabajo Colaborativo Los principales elementos de un Trabajo Colaborativo son: Objetivos: los mismos de la organización; particulares, bien definidos y mesurables Ambiente: controlado y cerrado. Motivación: la persona es convencida por la organización. Tipo de proceso: se formaliza el proceso grupal. 41 Aporte individual: conocimiento y experiencia personal al servicio de los intere- sares organizacionales. Pasos del proceso grupal: se deben definir claramente y previamente. Es necesario un control del proceso de aprendizaje por parte del profesorado. Reglas: rígidas, definidas previamente. Desarrollo personal: supeditado a los objetivos organizacionales. Productividad: es su fin. Preocupación: la experiencia en función de los resultados; la motivación es extrínse- ca. Software: contiene todo lo que se puede y no se puede hacer. 3.6. Aplicaciones usadas en el Sistema Actual En esta sección se describen el conjunto de aplicaciones que se usan en el sistema actual: 3.6.1. Microsoft Office Excel Es una de las herramientas de la empresa Microsoft, que consiste en una aplicación para manejar hojas de cálculos. Es utilizado normalmente en tareas financieras y contables [9]. El personal de Presupuesto, por ejemplo, utiliza esta herramienta para almacenar la información de los presupuestos de los preparadores de todas las escuelas; para buscar la información requerida en un instante de tiempo, como el presupuesto de la plaza de un preparador específico, se recurre al buscador de la aplicación que va a realizar la búsqueda 42 por el documento, y así se obtiene el resultado, cuando se ubica en el espacio del docu- mento que tiene la información requerida. Cabe destacar que la información se carga en la aplicación de forma manual por el personal encargado de realizar dicha tarea. 3.6.2. SicMov En el módulo de Recursos Humanos se utiliza la aplicación web “SicMov”, sus siglas significan Sistema de Control de Movimientos de Personal, la cual se encarga, entre otras tareas, de crear la planilla de movimiento de personal. Esta pasa junto con el oficio por el Departamento de Presupuesto, para verificación de los datos. Una vez aprobada allí y devuelta a Recursos Humanos es enviada al Decano para ser aprobada [2]. 3.7. Programación Extrema - XP Programación Extrema o eXtreme Programming (XP) es un enfoque de la inge- niería de software formulado por Kent Beck, autor del primer libro sobre la materia, Ex- treme Programming Explained: Embrace Change (1999)[10]. 3.7.1. Principios de XP Los principios originales de la programación extrema son: simplicidad, comuni- cación, retroalimentación (feedback) y coraje. Un quinto principio, respeto, fue añadido en la segunda edición de Extreme Programming Explained. Los cinco principios se detallan a continuación: Simplicidad: La simplicidad: es la base de la programación extrema. Se simplifica el diseño para agilizar el desarrollo y facilitar el mantenimiento. Un diseño complejo del código junto a sucesivas modificaciones por parte de diferentes desarrolladores hacen que 43 la complejidad aumente exponencialmente. Para mantener la simplicidad es nece- saria la refactorización del código, ésta es la manera de mantener el código simple a medida que crece. También se aplica la simplicidad en la documentación, de es- ta manera el código debe comentarse en su justa medida, intentando eso sí que el código esté autodocumentado. Para ello se deben elegir adecuadamente los nombres de las variables, métodos y clases. Los nombres largos no decrementan la eficiencia del código ni el tiempo de desarrollo gracias a las herramientas de autocompletado y refactorización que existen actualmente. Aplicando la simplicidad junto con la au- toría colectiva del código y la programación por parejas se asegura que cuanto más grande se haga el proyecto, todo el equipo conocerá más y mejor el sistema completo. Comunicación: La comunicación se realiza de diferentes formas. Para los progra- madores el código comunica mejor cuanto más simple sea. Si el código es complejo hay que esforzarse para hacerlo inteligible. El código autodocumentado es más fiable que los comentarios ya que éstos últimos pronto quedan desfasados con el código a medida que es modificado. Debe comentarse sólo aquello que no va a variar, por ejemplo el objetivo de una clase o la funcionalidad de un método. Las pruebas uni- tarias son otra forma de comunicación ya que describen el diseño de las clases y los métodos al mostrar ejemplos concretos de como utilizar su funcionalidad. Los programadores se comunican constantemente gracias a la programación por parejas. La comunicación con el cliente es fluida ya que el cliente forma parte del equipo de desarrollo. El cliente decide que características tienen prioridad y siempre debe estar disponible para solucionar dudas. Retroalimentación (feedback): Al estar el cliente integrado en el proyecto, su opinión sobre el estado del proyecto se conoce en tiempo real. Al realizarse ciclos muy cortos tras los cuales se muestran resultados, se minimiza el tener que rehacer partes que no cumplen con los requisitos y ayuda a los programadores a centrarse en lo que es 44 más importante. Considérense los problemas que derivan de tener ciclos muy largos. Meses de trabajo pueden tirarse por la borda debido a cambios en los criterios del cliente o malentendidos por parte del equipo de desarrollo. El código también es una fuente de retroalimentación gracias a las herramientas de desarrollo. Por ejemplo, las pruebas unitarias informan sobre el estado de salud del código. Ejecutar las pruebas unitarias frecuentemente permite descubrir fallos debidos a cambios recientes en el código. Coraje o valentía: Los puntos anteriores parecen tener sentido común, entonces, ¿por qué coraje?. Para los gerentes la programación en parejas puede ser difícil de aceptar, porque les parece como si la productividad se fuese a reducir a la mitad ya que solo la mitad de los programadores está escribiendo código. Hay que ser valiente para confiar en que la programación por parejas beneficia la calidad del código sin repercutir negativamente en la productividad. La simplicidad es uno de los principios más difíciles de adoptar. Se requiere coraje para implementar las características que el cliente quiere ahora sin caer en la tentación de optar por un enfoque más flexible que permita futuras modificaciones. No se debe emprender el desarrollo de grandes marcos de trabajo (frameworks) mientra el cliente espera. En ese tiempo el cliente no recibe noticias sobre los avances del proyecto y el equipo de desarrollo no recibe retroalimentación para saber si va en la dirección correcta. La forma de construir marcos de trabajo es mediante la refactorización del código en sucesivas aproxima- ciones. Respeto: El respeto se manifiesta de varias formas. Los miembros del equipo se res- petan los unos a otros, porque los programadores no pueden realizar cambios que hacen que las pruebas existentes fallen o que demore el trabajo de sus compañeros. Los miembros se respetan su trabajo porque siempre están luchando por la alta ca- lidad en el producto y buscando el diseño óptimo o más eficiente para la solución a 45 través de la refactorización del código. 3.7.2. Características Fundamentales del Método XP Las principales características del Método XP [10] son: Desarrollo iterativo e incremental: pequeñas mejoras, unas tras otras. Pruebas unitarias continuas: frecuentemente repetidas y automatizadas, incluyen- do pruebas de regresión. Se aconseja escribir el código de la prueba antes de la codifi- cación. Como por ejemplo, las herramientas de prueba JUnit orientada a Java, DUnit orientada a Delphi y NUnit para la plataforma.NET. Estas dos últimas inspiradas en JUnit. Programación en parejas: se recomienda que las tareas de desarrollo se lleven a cabo por dos personas en un mismo puesto. Se supone que la mayor calidad del códi- go escrito de esta manera es más importante que la posible pérdida de productividad inmediata. Frecuente integración: del equipo de programación con el cliente o usuario. Se recomienda que un representante del cliente trabaje junto al equipo de desarrollo. Corrección: de todos los errores antes de añadir nueva funcionalidad. Hacer entregas frecuentes. Refactorización del código: reescribir ciertas partes del código para aumentar su legibilidad y mantenibilidad pero sin modificar su comportamiento. Las pruebas han de garantizar que en la refactorización no se ha introducido ningún fallo. Propiedad del código compartida: en vez de dividir la responsabilidad en el de- sarrollo de cada módulo en grupos de trabajo distintos, este método promueve el 46 que todo el personal pueda corregir y extender cualquier parte del proyecto. Las frecuentes pruebas de regresión garantizan que los posibles errores serán detectados. Simplicidad en el código: es la mejor manera de que las cosas funcionen. Cuando todo funcione se podrá añadir funcionalidad si es necesario. La programación ex- trema apuesta que es más sencillo hacer algo simple y tener un poco de trabajo extra para cambiarlo si se requiere, que realizar algo complicado y quizás nunca utilizarlo. La simplicidad y la comunicación:son extraordinariamente complementarias. Con más comunicación resulta más fácil identificar qué se debe y qué no se debe hacer. Cuanto más simple es el sistema, menos tendrá que comunicar sobre éste, lo que lleva a una comunicación más completa, especialmente si se puede reducir el equipo de programadores. 3.8. Definiciones de Tecnologías A continuación se presenta la explicación de las diferentes tecnologías utilizadas para la realización de este trabajo. 3.8.1. Ruby Ruby es un lenguaje de programación interpretado, reflexivo y orientado a objetos, creado por el programador japonés Yukihiro “Matz” Matsumoto, quien comenzó a trabajar en Ruby en 1993, y lo presentó públicamente en 1995. Combina una sintaxis inspirada en Python, Perl con características de programación orientada a objetos similares a Smalltalk. Comparte también funcionalidad con otros lenguajes de programación como Lisp, Lua, Dylan y CLU. Ruby es un lenguaje de programación interpretado en una sola pasada y su implementación oficial es distribuida bajo una licencia de software libre [11]. 47 3.8.2. Ruby on Rails Es un entorno de desarrollo web de código abierto que está optimizado para sa- tisfacción de los programadores y de la productividad. Permite escribir un buen código favoreciendo la convención antes que la configuración [11]. Es la nueva generación en desarrollo de aplicaciones Web, y está creando una revolución en la industria del desarrollo de software de web. Principios de Ruby on Rails Ruby on Rails, se basa en dos principios fundamentales “No te repitas” y “Conven- ción sobre configuración”. No te repitas (Don’t Repeat Yourself, DRY): se refiere a que las definiciones deberían hacerse sólo una vez, pues los componentes están integrados de manera que no hace falta establecer puentes entre ellos. Cada pieza de econocimiento en un sistema, deberá ser expresada en un sólo lugar. Este principio se basa en escribir menos líneas de código para implementar la aplicación. Si el código es pequeño quiere decir que el desarrollo es más rápido y con menos errores, lo que hará que el codigo sea más facil de entender, mantener y mejorar. Por ejemplo, en Active Record, las definiciones de las clases no necesitan especificar los nombres de las columnas; Ruby puede averiguarlos a partir de la propia base de datos, de forma que definirlos tanto en el código como en el programa sería redundante. Convención sobre configuración (Convention Over Configuration): significa que el programador sólo necesita definir aquella configuración que no es convencional. En lugar de archivos de configuración, utilizamos una serie de convenciones simples que permiten averiguarlo todo. 48 3.8.3. RubyGems Es un gestor de paquetes que provee de una aplicación llamada “gem” que nos va a permitir tanto instalar, desinstalar y consultar “gemas” o programas listos para emplearlos en el desarrollo de software [12], es muy fácil, y rápido de usar, primero se descarga el pa- quete rubygems de SourceForge ya sea manualmente o por cónsola y se procede a ejecutar el setup.rb, una vez instalado se pueden buscar las gemas de la siguiente manera: 1 gem search dns --remote O también se puede instalar las gemas: 1 gem install <nombre de la gema> De la misma manera para desinstalar: 1 gem uninstall <nombre de la gema> Características de RubyGems Posee un servidor para la distribución de los paquetes Fácil de instalar y desinstalar los paquetes con la posibilidad de resolver las depen- dencias. Gestión y control local de paquetes. Consulta, búsqueda tanto local como remota de los paquetes. Múltiples versiones de apoyo para los paquetes instalados. 49 Interfaz basada en web para ver las gemas o paquetes instalados. Interfaz fácil de usar para la construcción de gemas. 3.9. Patron de Diseño MVC (Modelo - Vista - Controlador) El patrón MVC está compuesto de tres módulos diferentes, llamados Modelo, Vista y Controlador. El Modelo está compuesto por el estado y los datos que la aplicación repre- senta. La Vista es la interfaz de usuario que muestra información sobre el modelo y que representa el dispositivo de entrada que se usa para modificarlo. Finalmente, el Contro- lador es lo que une a los dos anteriores. Hace corresponder las peticiones que llegan del cliente con las acciones correspondientes y dirige las respuestas a las vistas adecuadas [13]. Figura 3.8: Patrón de Diseño MVC [14]. El Controlador interpreta las acciones del usuario, accediendo a las operaciones de negocio de la aplicación y modificando a partir de sus resultados el estado del modelo y la navegación entre vistas. El Controlador recibe todas las peticiones realizadas a la apli- cación. Cada petición se identifica mediante un parámetro. En base a esta identificación, el 50 Controlador decide qué objeto u objetos de negocio (Modelo) debe ejecutar para resolver la petición. Tras la ejecución de los objetos de negocio, y en función del resultado devuelto por estos, el Controlador determina qué vista se usará para visualizar el resultado, generan- do una redirección que concluirá con la generación del código HTML de la página. El Modelo es la lógica del negocio, representa las operaciones que se efectúan sobre los datos que se reciben o las consultas a base de datos que se hacen, su objetivo es preparar los datos para que la vista sólo se tenga que preocupar de mostrarlos, así si hay que realizar cambios en la estructura de la base de datos o cambiar las operaciones que se hacen con los datos lo tendríamos que hacer sólo en el modelo, evitando que un cambio se tenga que realizar en todas las vistas que utilicen unos determinados datos. La Vista presenta el modelo en un formato adecuado para interactuar, usualmente un elemento de interfaz de usuario. En este componente se puede detectar que tipo de cliente esta accediendo a los datos para personalizar su presentación dando lugar a versiones en distintos idiomas o bien a versiones para distintos canales como PDAs, SMS, WAP, etc [15]. 3.9.1. Utilización del Patrón MVC El patrón de diseño MVC se utiliza para separar la información, la salida y el proce- samiento de los datos de la aplicación. Uno de los motivos de peso para utilizar el patrón MVC es la necesidad de separar los datos y la lógica de la interfaz de usuario. Al separar estas partes del proceso, es posi- ble disponer de varias interfaces gráficas distintas que utilicen el mismo modelo y datos sin formato. Al separar los datos del resto de la aplicación se reduce significativamente 51 el tiempo de desarrollo, de prueba e incluso de actualización de más de una interfaz del cliente. De forma similar, añadir nuevos procesadores principales para la misma aplicación es más sencillo si se dispone de un modelo existente [16]. 3.9.2. Beneficios La aplicación del modelo-vista-controlador para del desarrollo de aplicaciones Web tiene varios beneficios[17]: Menor acoplamiento. Desacopla las vistas de los modelos y se desacopla los modelos de la forma en que se muestran y se capturan los datos. Mayor cohesión. Cada elemento del patrón está altamente especializado en su tarea (la vista en mostrar datos al usuario, el controlador en las entradas y el modelo en su objetivo de negocio). Las vistas proveen mayor flexibilidad y agilidad. Se puede crear múltiples vistas de un modelo y se pueden crear, añadir, modificar y eliminar nuevas vistas dinámi- camente. Las vistas pueden anidarse. Se puede cambiar el modo en que una vista responde al usuario sin cambiar su representación visual. Se pueden sincronizar las vistas. Mayor facilidad para el desarrollo de clientes ricos en múltiples dispositivos y canales. Es posible crear una vista para cada dispositivo que puede variar según sus capaci- dades. Además de que se puede tener una vista para el entorno Web y otra para aplicaciones de escritorio. Más claridad en el diseño. Facilita el mantenimiento de las aplicaciones. 52 3.10. Servicios Web La W3C define “Servicio web” como un sistema de software diseñado para permitir interoperatibilidad máquina a máquina en una red. En general, los servicios web son sólo APIs Web que pueden ser accedidas en una red, como internet, y ejecutadas en un sistema de hosting remoto [18]. En términos sencillos, un servicio web es cualquier sistema de software diseñado para soportar interacción máquina a máquina sobre una red y utilizando protocolos de la web. Esta amplia definición abarca múltiples y diferentes sistemas, pero en general “ser- vicio web” suele referir a clientes y servidores que se comunican usando mensajes XML que siguen el estándar SOAP o mediente REST y en este trabajo se utilizó el estándar SOAP. Los servicios web que se basan en XML permiten que las aplicaciones compartan información y que además invoquen funciones de otras aplicaciones independientemente de cómo se hayan creado dichas aplicaciones e independientemente del sistemas operativo o plataforma en que se ejecuten y de los dispositivos utilizados en el acceso. Los servicios Web XML, aunque sean independientes entre sí, pueden vincularse para realizar una tarea [18]. 3.10.1. Protocolos de Servicios Web SOA se puede construir sobre servicios Web estándares (por ejemplo SOAP) los cuales gozan de gran aceptación industrial. Estos estándares también proveen gran intero- peratividad y protección contra vendedores de software propietario. Sin embargo es posible 53 implementar SOA utilizando cualquier tecnología basada en servicios. Las tecnologías relevantes para SOA son los siguientes: XML (Extensible Markup Language): Un lenguaje de marcado para describir datos en mensajes en formato de documento. HTTP (Hypertext Transfer Protocol) o HTTPS (Hypertext Transfer Protocol Secure): Protocolo para solicitar o responder mensajes entre clientes y servicios. Protocolo estándar Web. SOAP (Simple Object Access Protocol): Protocolo para intercambiar mensajes basados en XML en una red de computadores, usualmente usando HTTP. WSDL (Web Services Description Language) o Lenguaje de descripción de ser- vicios Web: Servicio basado en XML que describe las interfaces públicas, protocolos y formato de mensajes, requeridos para interactuar con un servicio Web. UDDI (Universal Description, Discovery and Integration) o Descripción, des- cubrimiento e Integración Universal: Registro basado en XML para publicar de- scripciones de servicios (WSDL) y permitir su descubrimiento. 3.11. Base de Datos del Sistema actual La base de datos del sistema actual en funcionamiento, consta de una serie de tablas que no están relacionadas por claves foráneas, debido a que esta diseñada en hojas de Excel de las cuales presentamos una vista en la Figura 3.9: 54 3.12. Estructura del Sistema Actual Los procesos administrativos de los preparadores se generan en la respectiva escuela del preparador (Computación, Química, Física, Matemática, Biología o Geoquímica), allí pasa por una cantidad de pasos para ser aprobado, una vez que el trámite sale de la escuela va al departamento de Presupuesto en donde es revisado, luego es mandado al Departa- mento de Recursos Humanos para otras verificaciones, de allí el trámite es discutido en Consejo de Facultad y son retornados al departamento de Recursos Humanos, si el trámite es aprobado por el Consejo de Facultad debe ser enviado para que sea firmado por el decano y una vez aprobado allí pasa nuevamente al Departamento de Recursos Humanos en donde se procede a pasar la información del trámite a un sistema web llamado Sicmov, el cual se encarga entre otras actividades de generar la planilla de movimiento de dicho trámite. A continuación se presenta en la Figura 3.10 un gráfico representativo de los agentes de la Facultad que están involucrados en el proceso mencionado: 55 Figura 3.9: Vista de los Presupuestos almacenados en una Hoja de Excel. 56 Figura 3.10: Dependencias que utilizan el sistema actual. Capítulo 4 Metodología de Desarrollo 4.1. Análisis de Requerimientos y Diagnóstico 4.1.1. Requerimientos Generales Esta plataforma de software colaborativo debe manejar el ingreso de nuevos prepa- radores, el retiro de los mismos, y en el caso de ser reiterado un preparador en su cargo, quedará con la misma cantidad de horas, aumentará o disminuirá las horas laborales del preparador. Se debe registrar las fechas en que se realizan todas las modificaciones de los oficios y las planillas de movimiento de personal de los preparadores para llevar el control y seguimiento de estos procesos a lo largo del flujo de trabajo. Enviar correos a los entes nece- sarios de algunos procesos específicos del sistema. Adicionalmente, esta plataforma debe poseer todas las herramientas orientadas a integrar y desarrollar módulos que se adecuen a los requerimientos de las escuelas o departamentos de la Facultad de Ciencias, siguiendo unos lineamientos de interfaz y desarrollo de software. 4.1.2. Requerimientos Funcionales Los requerimientos funcionales de la plataforma están determinados por los com- ponentes o módulos que la integrarán: 57 58 1. Diseñar un módulo de recursos humanos donde se podrán gestionar los oficios y las planillas de movimiento de personal de los preparadores para luego enviar a otra aplicación el producto final de dichas planillas. 2. Crear un módulo de planificación y presupuesto donde se gestionen los registros internos de presupuesto y administren los oficios de los preparadores de la Facultad de Ciencias. 3. Crear un módulo de consejo de facultad que permita administrar oficios y generar dos tipos de documentos: el primero es el resumen de los oficios a tratar en la reunión y el otro es el resumen de los trámites de personal aprobados o desaprobados en el consejo de facultad. 4. Generar la interacción entre los distintos módulos del sistema que pertenecen al flujo de trabajo. 5. Manejar el ingreso de nuevos preparadores, el retiro de los mismos, y en el caso de ser ratificado un preparador en su cargo, quedará con la misma cantidad de horas, aumentará o disminuirá las horas laborales del preparador. 6. Registrar en el sistema las fechas en que se realizan todas las operaciones de los preparadores, con el fin de que se puedan verificar los tiempos en que se tardan los trámites solicitados en completar todo el proceso. 7. Realizar las respectivas validaciones de todos los documentos que se manejan en el sistema. 8. Controlar un constante flujo de trámites que se envían de una entidad a otra de forma digital a través del sistema Web. 59 4.1.3. Requerimientos No Funcionales Las tecnologías seleccionadas para la implementación del sistema permitirán re- querimientos adicionales para darle valor agregado al producto final. La idea es ofrecer un sistema que pueda ser de fácil uso, robusto y escalable. Para esto se pueden notar los siguientes requerimientos no funcionales: 1. Proporcionar soporte multi-plataforma. 2. Ofrecer un sistema Web soportado por múltiples navegadores. 3. Propiciar los mecanismos adecuados para que el sistema pueda ser escalable. 4. Brindar una interfaz usable para el cliente final del sistema. 4.1.4. Casos de Uso El diagrama de Caso de Uso es presentado en las figuras 4.1 y 4.2, usado principal- mente para reflejar la forma en que los actores interactuán con el sistema, conociendo así un poco de las funcionalidades del sistema de acuerdo con el respectivo rol que interpreta cada actor. 60 Figura 4.1: Caso de Uso - Nivel 0. 61 Figura 4.2: Caso de Uso - Nivel 1. 62 Actores Identificados Los actores que de alguna manera tendrán una interacción con el sistema o que simplemente están dentro del flujo normal de actividades para gestionar los procesos ad- ministrativos de los preparadores, están a continuación: Departamento de Presupuesto. Recursos Humanos. Consejo de Facultad. Descripción de los Casos de Uso A continuación la especificación de los casos de uso descritos anteriormente: 1. Primer Caso de Uso Nombre: Gestionar Oficios. Descripción:Permite consultar, visualizar, buscar y cambiar el estado de los trámites de personal de los preparadores de la Facultad de Ciencias . Actores: Consejo de Facultad, Recursos Humanos y Presupuesto. Precondición: Haberse autenticado en el sistema. Flujo Normal: 1. El actor se dirige al menú de Oficios. 2. Selecciona la opción que desea realizar entre consultar y buscar algún oficio en específico, y en el detalle del oficio si se desea y se puede cambiatr el estado del trámite se realiza, y si se devuelve un oficio llenar un campo llamado memo explicando porque se devuelve el oficio. 63 3. Consejo de Facultad. Flujo Alternativo: 1. Si el actor devuelve el oficio sin llenar el campo memo, el sistema redirecciona a la misma página indicandole al usuario que debe llenar obligatoriamente ese campo. Postcondición:Ninguna. 2. Segundo Caso de Uso Nombre: 2. Generar Planilla de Movimiento de Personal. Descripción:Genera la Planilla de Movimiento de Personal de un preparador a partir de un oficio aceptado por todos los actores correspondientes. Actores: Recursos Humanos. Precondición: 1. Haberse autenticado en el sistema. 2. Que el oficio de dicha planilla pase por todas las entidades correspondientes para su respectiva aprobación. Flujo Normal: 1. El actor se dirige al menú de oficios aceptados, y selecciona una planilla que no haya sido enviada aún a la aplicación de SicMov, la completa y la envia o el actor se direge al menu de planillas pendientes, elije una planilla, completa la información en caso de ser necesario y la envía a la aplicación externa SicMov. Flujo Alternativo: 64 1. El sistema comprueba que no exista ningún campo vacío en el formulario, si existen campos vacíos, se muestra un mensaje con el error para darle oportu- nidad al usuario de llenar estos campos. Postcondición:Ninguna. 3. Tercer Caso de Uso Nombre: 3. Administrar los registros de presupuesto. Descripción:Se pueden crear, modificar, eliminar y consultar los registros de pre- supuestos que se encuentran estrechamente vinculados con el oficio de un preparador en especial. Actores: Presupesto. Precondición: 1. Haberse autenticado en el sistema. Flujo Normal: 1. Ingresar al menú de los oficios y presionando el link de presupuestos asociados o buscando un presupuesto en específico. Flujo Alternativo: 1. El sistema comprueba que no exista ningún campo vacío en el formulario al agregar algún registro de presupuesto, si existen campos vacíos, se muestra un mensaje con el error para darle oportunidad al usuario de llenar estos campos. Postcondición:Ninguna. 4. Cuarto Caso de Uso 65 Nombre: 4. Generar documento antes de reunión de consejo de facultad. Descripción:Se genera un documento en formato pdf con el resumen de los trámites de los preparadores que están en espera por la aprobación del consejo de facultad. Actores: Consejo de facultad. Precondición: 1. Haberse autenticado en el sistema. 2. Que los oficios se encuentren en estado .Enviado a Consejo de Facultad". Flujo Normal: 1. Ingresar al menú de los oficios y seleccionar los oficios que se desean discutir en la reunion de consejo de facultad. 2. Presionar el botón de generar pdf. Flujo Alternativo:Ninguno Postcondición:Ninguna. 5. Quinto Caso de Uso Nombre: 5. Generar documento después de reunión de consejo de facultad. Descripción:Se genera un documento en formato pdf con el resumen del resultado de los trámites de los preparadores que fueron aprobados y desaprobados en la reunión. Actores: Consejo de facultad. Precondición: 1. Haberse autenticado en el sistema. 66 2. Que los oficios hayan pasado por el estado de “Enviado a Consejo de Faculta”. 3. Que en el sistema se encuentren cargados los oficios que fueron discutidos". Flujo Normal: 1. Ingresar al menú de los oficios y seleccionar los oficios que se desean discutir en la reunion de consejo de facultad. 2. Presionar el botón de generar pdf. Flujo Alternativo:Ninguno Postcondición:Ninguna. 4.2. Tipo de Investigación La investigación realizada es de tipo estudio exploratorio y productivo, en donde se aplicaron técnicas de conocimiento para realizar un sistema web con la finalidad de mejorar la gestión de los procesos administrativos de los preparadores de la Facultad de Ciencias, en esta investigación se exploraron todas las tareas administrativas y de control que se realizan en el Departamento de Presupuesto y de Recursos Humanos, también se estudiaron todos los documentos que se manejan durante el proceso administrativo del trámite de personal, incluyendo la elaboración de diagramas que reflejen de forma clara el comportamiento y estados en diferentes circuntancias del sistema actual y del sistema web que es el motivo de este trabajo. Para el desarrollo de la aplicación se escogió la metodología de desarrollo de soft- ware Programación Extrema (Extreme Programing - XP), la cual es muy óptima y práctica para llevar a cabo proyectos para grupos pequeños. 67 4.3. Instrumentos de Recolección de Información Con el fin de adquirir conocimientos acerca de la administración de preparadores y la forma en que deben manejarse todos los procesos que requiere, fue recopilada infor- mación formal e informal, delimitando los alcances de este trabajo y abarcando los puntos más importantes, que ayuden a establecer con claridad las metas que se quieren lograr con dicha investigación, también fue necesario el uso de la red informática como fuente de información relacionada con el tema. Además para conocer los procesos administrativos que se efectúan específicamente en la Facultad de Ciencias de la Universidad Central de Venezuela, la transmisión oral de parte de los empleados de las oficinas encargadas de las diferentes labores relacionadas a estos procesos, fue de vital importancia para considerar los puntos débiles y fuertes del sistema actual, el flujo de trabajo y la forma en que se puede diseñar la mejora del sistema de administración de los preparadores. Para el levantamiento de información se realizaron visitas a las oficinas de recursos humanos así como también, al personal administrativo y al personal de cada escuela de la Facultad de Ciencias, lo cual permitió conocer como se realiza el proceso de gestión de la administración del personal preparador; gracias a esto y a la colaboración del personal, se identificaron las funcionalidades más importantes que deberán ser consideradas a la hora de desarrollar la nueva aplicación. 68 4.4. Diagnóstico de Necesidades 4.4.1. Recursos Para que el sistema se encuentre funcional se necesita un servidor Web, la tec- nología que se va a usar es Ruby on Rails debido a que ofrece al desarrollador la facilidad de programación a un lenguaje de alto nivel, además se necesita un espacio físico para este servidor, por lo tanto el lugar más propicio para llevar a cabo esto es en el Centro de Com- putación de la Facultad de Ciencias, en donde ya están servidiores web y en cualquiera de ellos se puede alojar este sistema. Es imprescindible que la base de datos esté terminada y operativa para que el sis- tema esté en producción. A través de los servicios Web se realizará la comunicación con la base de datos que está integrada a este sistema. Para este prototipo se simuló dicha co- municación con la elaboración de los servicios web que requiere el sistema a través de una aplicacion hecha en Java para que responda a las peticiones del sistema, pero llegado el momento de que la base de datos y sus servicios estén realizados se podrá usar el sistema con los datos reales. 4.5. Base de Datos En este sistema se utilizarán bases de datos sociodemográficas y servicios Web, la base de datos sociodemográfica es un sistema formado por un conjunto de datos almace- nados en discos que permiten el acceso directo a ellos y un conjunto de programas que manipulan esos datos, dichos datos contienen la información básica de un preparador de manera íntegra, tales como: Nombre, Apellido y Cédula, los datos estrictamente académi- cos del preparador se encuentran almacenados en la base de datos del sistema CONEST 69 (Sistema de la División de Control de Estudios de la Facultad de Ciencias de la U.C.V., [19]), que contiene módulos para estudiantes, docentes y administradores y se encarga de toda la gestión de los asuntos académicos de la Facultad de forma virtual, de allí se extraen los datos de los preparadores por medio de un Servicio Web para intercambiar información entre las dos aplicaciones sin importar el lenguaje en el que estén desarrolladas. Así se complementaría toda la información que se necesita del preparador sin necesidad de repetir los datos a través de una base de datos local al sistema, asegurando la integridad y la poca redundancia en los datos. En la figura 4.3, se puede observar una arquitectura general de los componentes de Base de Datos que interactúan en la aplicación a implementar. 70 Figura 4.3: Arquitectura de los componentes de base de Datos. 4.6. Arquitectura de Ruby on Rails adaptada a SystemPAP La Arquitectura a utilizar para el desarrollo de esta aplicación es Modelo-Vista- Controlador(MVC) como se mencionó en las metodologías a utilizar, además la arquitec- tura de Ruby on Rails es completamente basado en MVC, lo que obliga a los desarrollado- 71 res a trabajar de una manera mucho más organizada, separando la lógica en los modelos, las vistas y los controladores. En la figura 4.4 se refleja el cuerpo del Trabajo Especial de Grado siguiendo el patrón MVC, en el cual se encuentran una serie de directorios con funcionalidades específicas. Figura 4.4: Arquitectura MVC en Ruby on Rails. 72 4.6.1. Descripción de algunos directorios del proyecto Cada directorio del proyecto cumple una función. A continuación se describen brevemente algunos [20]: app: almacena los componentes de la aplicación: vistas y helpers, controladores y modelos. config: contiene la configuración de la aplicación: configuración de la base de datos (database.yml), estructura del entorno de Rails (environment.rb) y el enrutador de peticiones Web (routes.rb). public: es un servidor Web que contiene los archivos con código de funciones es- critas en JavaScript, imágenes, hojas de estilo y códigos HTML común para las in- terfaces. script: este directorio contiene scripts que inician y administran las diversas herra- mientas que se pueden utilizar en Rails; por ejemplo, se tienen los scripts que generan código (generate) e inician un servidor Web (server). 73 4.7. Estructura del Nuevo Sistema Figura 4.5: Gráfico con la estructura del nuevo sistema. 74 4.8. Desarrollo Las siguientes iteraciones están delimitadas por un lapso de tiempo en el cual el equipo de trabajo desarrolló la actividad descrita en dicha iteración: 4.8.1. Iteración 0: Del 02 - Marzo - 2.009 al 13 - Marzo - 2.009 En la primera etapa de este trabajo se hicieron reuniones con los Departamentos de Recursos Humanos, y Presupuesto, para definir las funcionalidades que tendría el sistema, conocer los datos que se manejan para la realización de los diferentes módulos de la apli- cación, se recolectaron documentos tanto físicos como digitales que contienen información acerca de los preparadores, sean tablas, oficios, planillas, etc. Además se elaboró el flujo de trabajo que resume las actividades realizadas por los módulos mencionados anteriormente. El equipo de trabajo estudió los pros y contras de las diferentes tecnologías en que se puede desarrollar el sistema, y procedió a escoger la tecnología a usar y el entorno que se utilizaría para trabajar en la aplicación. Resultado: Se escogió la tecnología de Ruby on Rails, la versión de Ruby 1.8.6, Rails 2.2.2, RubyGems 1.3.3 y Netbeans 6.5.1 como herramienta de desarrollo, tanto para la aplicación Web en Ruby, como para el servicio web en Java. También se eligió el editor de texto Notepad++ para la edición de los XML necesarios, Macromedia Dreamweaver 8 para el diseño de las interfaces, Macromedia Fireworks MX 2004 para la edición de imágenes y Flash 8 para las animaciones. 75 4.8.2. Iteración 1: Del 16 - Marzo - 2.009 al 27 - Marzo - 2.009 Una vez definida la tecnología que se usaría para el desarrollo del sistema, se lleva a cabo la instalación de la misma en las estaciones de trabajo, lo que incluye la instalación de: Ruby versión 1.8.6 (i386-mswin32). Rails versión 2.2.2. RubyGems versión 1.3.3. Netbeans 6.5.1. Notepad++. Macromedia Dreamweaver 8. Macromedia Fireworks MX 2004. Flash 8. Resultado: Se obtuvo dos estaciones de trabajo con todo lo requerido para el de- sarrollo del sistema. 4.8.3. Iteración 2: Del 30 - Marzo - 2.009 al 10 - Abril - 2.009 En resumen para esta etapa se planificó como meta definir la interfaz a utilizar. Se acordó que las interfaces serían estandarizadas con el diseño que tiene el sitio web de 76 la Escuela de Computación, se creó un proyecto en Ruby y a éste se le colocó el diseño acordado, junto con su código Javascript para las funciones del menú, entonces durante este período se adaptó las necesidades del sistema a dicho diseño, personalizándolo. Se eligió el nombre systemPAP para el sitema por las siglas Sistema para la gestión de Procesos Administrativos de Preparadores. Se elaboró un logo para el banner del sistema, también se agregó al banner una imagen en flash para animarlo y sustituir las imágenes de la Escuela de Computación, además se eliminaron secciones de dicha interfaz que no son necesarias para el sistema. Así se logro tener una base en donde poder elaborar la aplicación. 4.8.4. Iteración 3: Del 13 - Abril - 2.009 al 24 - Abril - 2.009 Se crearon las vistas fundamentales que especifican las funciones principales de los módulos de Presupuesto y Recursos Humanos, para ello se utilizó toda la información recolectada en la Iteración 0, estas vistas que se crearon son: Para el Departamento de Planificación de Presupuesto: Plantilla para el Departamento de Presupuesto. Principal de Presupuesto. En la Figura 4.7 se puede observar la vista principal del Departamento de Presupuesto. Presupuestos. Detalle de Presupuesto. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. 77 Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. Buscar Oficio. Buscar Presupuesto. Para el Departamento de Recursos Humanos: Plantilla para el Departamento de Recursos Humanos. Principal de Recursos Humanos. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio. Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Buscar Oficio. Planillas Pendientes. Planillas Aceptadas. 78 4.8.5. Iteración 4: Del 27 - Abril - 2.009 al 08 - Mayo - 2.009 Se definió para esta etapa completar las interfaces que se requerían en el sistema, estas son: Para el Módulo del Consejo de Facultad: Plantilla para el Consejo de Facultad. Esta vista se puede observar en la Figura 4.15. Principal de Consejo de Facultad. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio. Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Buscar Oficio. Para todos los usuarios incluyendo los que no estén autenticados en el sistema: Plantilla para Visitante. Principal de Visitante. Contáctanos. Noticias. 79 4.8.6. Iteración 5: Del 11 - Mayo - 2.009 al 22 - Mayo - 2.009 La principal necesidad de los usuarios que se implementó en el sistema es la de autenticación para separar y diferenciar a los usuarios y las actividades que pueden realizar cada uno dentro del sistema. En la Figura 4.6 se puede apreciar el resultado de la vista de este módulo. Para ello se creó un servicio web para verificar que los datos que introduzca el usuario concuerden con los del usuario en la base de datos, también se creó una vista que contenga el formulario correspondiente a los datos que se solicitan para identificar al usuario, estos son cédula, login y password; mientras el usuario esté trabajando en el sis- tema se mantendrán sus datos en sesión, se puede ver el código del uso de las sesiones en el Apéndice A, se usaron en primer lugar para controlar que el usuario no pueda acceder a sitios del sistema que no le estén permitidos sino que se mantenga en la parte que le corres- ponde, y la segunda razón es para que agentes externos tampoco puedan acceder al sistema desde afuera, así mantener los datos seguros, y resguardados de saboteos o modificaciones no deseadas. Para la realización de esta iteración fue necesaria la instalación de la gema que se presenta a continuación: 1 gem install datanoise-actionwebservice --source http://gems.github.com Uso: esta gema facilita el uso de los servicios web. 80 4.8.7. Iteración 6: Del 25 - Mayo - 2.009 al 05 - Junio - 2.009 Para completar las funcionalidades de los módulos se decidió agregar en esta i- teración las funcionalidades de modificar presupuestos, modificar planilla de movimiento, opción de aceptar o devolver el trámite de personal, en caso de que sea la opción de devolver el trámite, se validó que se especificara la razón por la cual se hace la devolución a través de un campo de formulario llamado memo. Las funcionalidades de los formularios que se agregaron en esta iteración son: Agregar Presupuesto Nuevo (Presupuesto). Aceptar o Rechazar Oficios (Consejo de Facultad). Modificar Presupuesto (Presupuesto). Modificar Planilla (Recursos Humanos). En la Figura 4.13 se puede observar el re- sultado de esta vista. Como algunos de estos formularios contienen el campo fecha, fue necesaria la ins- talación de la siguiente gema para el calendario: 1 gem install calendar\_date\_select 4.8.8. Iteración 7: Del 08 - Junio - 2.009 al 19 - Junio - 2.009 81 Se elaboró una aplicación Java para implementar las funciones que respondan a las llamadas de los servicios web, este programa se diseñó únicamente para tener las funciones de los servicios web que se llamarán desde los controladores. Se hicieron pruebas de co- municación entre el sistema y esta aplicación, para realizar la prueba se realizó el servicio web de autenticación tanto el XML con la validación de los diferentes usuarios permiti- dos en el sistema, como la llamada al servicio desde el controlador “login” y sus debidas validaciones por medio del método hash para analizar sintácticamente el XML, como se puede observar en el fragmento de código que está en el Apéndice B, este es un método para analizar sintácticamente XML simples, es decir, con pocos registros. 4.8.9. Iteración 8: Del 22 - Junio - 2.009 al 03 - Julio - 2.009 Al ser satisfactorio el resultado de la comunicación con el servicio web se hicieron pruebas de comunicación con un XML más complejo, para analizar sintácticamente di- cho XML se necesitó utilizar el método analizador sintáctico REXML, para que se pueda obtener desde el controlador los datos contenidos en el XML que envía el servicio web como respuesta. Además en esta iteración se agregó el calendario a las vistas y a los controladores para que se pudiera tener el calendario completo desplegado en la vista y además usarlo en los formularios, como ya se tenía la gema instalada lo que se hizo fue usarla para todas las partes que se omitieron antes, esto es necesario para evitar errores de tipeo de la fecha, por el formato utilizado. 82 4.8.10. Iteración 9: Del 06 - Julio - 2.009 al 17 - Julio - 2.009 Para esta etapa se elaboraron tanto los XML que hacen falta para mostrar el fun- cionamiento del sistema, como el parseo correspondiente en el controlador que lo usa. Por ejemplo en el Apéndice C se presenta el modo en que se analiza sintácticamente con el método REXML el XML del detalle de un oficio, solicitado en el módulo de Recursos Hu- manos, el método que se llama es “oficio_detalle”. También se puede observar en el Apéndice D el fragmento de código que contiene la función del servicio web que responde a la llamada anterior y se puede apreciar la es- tructura del XML que corresponde al detalle del oficio: Así como se presentó anteriormente se hizo con los siguientes servicios: Consultar Presupuestos. Consultar Detalle de Presupuesto. Crear Nuevo Presupuesto. Borrar Presupuesto. Actualizar Presupuesto. Buscar Presupuesto. Consultar Oficios Pendientes. Consultar Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio, en el Apéndice C se puede aprecar el método en el controlador de esta vista y en el Apéndice D el servicio web correspondiente. 83 Buscar Oficio. 4.8.11. Iteración 10: Del 20 - Julio - 2.009 al 31 - Julio - 2.009 Al igual que en la etapa anterior se hicieron estos otros servicios web, tanto el XML, como la llamada y parseo del mismo: Consultar Oficios Aceptados. Consultar Oficios Rechazados. Consultar Planillas. Consultar Detalle de Planilla. Actualizar Planilla. Buscar Planilla. Consultar Sueldo. Consultar Cédula y Correo. Consultar Planillas Aceptadas. Consultar Planillas Rechazadas. 4.8.12. Iteración 11: Del 03 - Agosto - 2.009 al 14 - Agosto - 2.009 84 Realizar todas las conexiones de las páginas y datos correspondientes a las mismas para que la estructura y navegabilidad del sistema este completamente usable, además de no permitir la modificación de datos por parte de entes que no estén autorizados sino que la persona que se autentique solamente pueda tener acceso y permisos de todo tipo con los datos que corresponden a su módulo. 4.8.13. Iteración 12: Del 17 - Agosto - 2.009 al 28 - Agosto - 2.009 En esta iteración se definió la meta de agregar al sistema las funcionalidades de mandar correo electrónico, para el momento en que el usuario devuelva un trámite de per- sonal se notifica la razón por la cual se regresa el trámite, por medio de un campo memo, al ingresar el motivo de la devolución se le mandará un correo automáticamente a la persona que mandó dicho trámite, esto es consultando por medio de un servicio web, la cédula de la persona encargada y su correo para enviarle a su bandeja de entrada un mensaje con asunto “Devolución de Trámite de Personal” y en el contenido se muestre el número del trámite con la especificación del error. Se creó el controlador para envios de correo, y una plantilla en la que se colocan los datos que se quieren mostrar en el correo incluyendo el asunto, saludo, información que se quiere transmitir. Para que funcione este controlador fue necesario crear la cuenta de correo system- pap@gmail.com, realizar una serie de pasos e instalar la siguiente gema: 1 gem install tlsmail Además se debe ejecutar el siguiente comando en la consola una vez que se este ubicado en la dirección del proyecto: 85 1 ruby script/plugin install http://svn.douglasfshearer.com/rails/plugins /action\_mailer\_optional\_tls Una vez que se haya realizado esto se agrega la configuración del servidor de correo de gmail en el archivo de configuración environment.rb: 1 config.action_mailer.smtp_settings = 2 { 3 :tls => true, 4 :address => "smtp.gmail.com", 5 :port => 587, 6 :authentication => :plain, 7 :user_name => ’systempap@gmail.com’, 8 :password => ’<password de usuario>’ 9 } 4.8.14. Iteración 13: Del 31 - Agosto - 2.009 al 11 - Septiembre - 2.009 Para esta iteración se planificó como meta presentar en formato pdf dos documen- tos: el resumen de los trámites de los preparadores que están en espera por la aprobación del Consejo de Facultad, y el resultado de la reunión, presentando los trámites aprobados y desaprobados resumidos en una tabla. Se creó el controlador generar-pdf para separar las funcionalidades del resto del sistema, creando estas dos vistas señaladas anteriormente en 86 pdf con los datos correpondientes para cada una. Para la realización de esta iteración fue necesaria la instalación de la siguiente gema: 1 gem install pdf-writer (1.1.3) En el Apéndice E se presenta un fragmento del código que se usó para generar el pdf. 4.8.15. Iteración 14: Del 14 - Septiembre - 2.009 al 25 - Septiembre - 2.009 En esta etapa se hicieron las correcciones y pruebas finales tanto para comprobar la navegavilidad del sistema como para verificar detalles de términos usados en la inter- faz, mensajes de error, etc. También se hizo una verificación de operabilidad del sistema completo. 4.9. Interfaz de la Aplicación Los procesos que se manejan en el nuevo sistema tienen las funcionalidades que se encuentran en el sistema que se utiliza actualmente, añadiendo la automatización de al- gunos procesos de verificación, proceso de autenticación, administración de preparadores, entre otros. En la página principal de SystemPap se muestra un breve resumen de la fun- cionalidades que ofrece cada módulo de la aplicación, es decir, el módulo de recursos hu- manos, el módulo de presupuesto y el módulo de consejo de facultad. En el pie de página de toda la aplicación se muestra la información correspondiente a la Universidad Central 87 de Venezuela, teléfonos, ubicación y además la resolución con la que se debería ver la aplicación y los navegadores para los que se ha probado el sistema. 4.9.1. Autenticación La vista de la autenticación se presenta en la Figura 4.6, tiene la finalidad de que los diferentes actores del sistema estén registrados en el mismo, presentándose de forma amigable y despejada al usuario, donde se observa un acceso a los contactos necesarios para localizar a los encargados de la administración del sistema. En el módulo de autenticación se llenan los campos de cédula, login y clave y al autenticarse el sistema les presenta las funcionalidades que ese determinado actor puede gestionar. 88 Figura 4.6: Vista de la Aplicación - Autenticación. Al colocar los datos de autenticación en el sistema y enviarlos para la verificación, dichos datos se corroboran en un servicio web de autenticación, una vez verificado el usuario sus datos se guardan en sesión y se muestran las vistas y funcionalidades corres- pondientes a su rol. 4.9.2. Módulo de Planificación y Presupuesto Dependiendo del actor que se haya autenticado, se le presentará un menú diferente, por ejemplo en la figura 4.7, ésta es la vista de la aplicación cuando se autentica un tra- bajador de el Departamento de Planificación y Presupuesto, en cuyo menú se encuentra 89 las funcionalidades de dicho departamento, como por ejemplo ver los oficios que las Es- cuelas han enviado para su posterior aprobación, gestionar las actividades para iniciar el Movimiento de Personal de los preparadores, establecer y controlar la entrega de la docu- mentación por parte de los preparadores para tener su registro en debida regla, gestionar y aprobar el trámite de personal, verificar disponibilidad de presupuesto, consultar y admi- nistrar los registros de presupuesto, de hecho cuando se observa el detalle de un oficio pen- diente se puede observar directamente el presupuesto asociado a través de un link, además se pueden desplegar los presupuesto que tenga relación con el trámite, ver los trámites de personal pendientes, rechazados y aceptados con sus detalles como se muestran en las Fi- guras 4.8, 4.9, 4.10, 4.11, aprobar los oficios pendientes por presupuesto y notificar en caso de que sea necesario algún error en el trámite del personal. 90 Figura 4.7: Vista de la Aplicación - Página principal de Presupuesto 91 Figura 4.8: Vista de la Aplicación - Oficios Pendientes. 92 Figura 4.9: Vista de la Aplicación - Oficios Aceptados. 93 Figura 4.10: Vista de la Aplicación - Oficios Rechazados. 94 Figura 4.11: Vista de la Aplicación - Detalle Oficio. En la Figura 4.12 se muestra el detalle de un oficio con derecho a la aprobación por parte del usuario, es decir, el oficio actual está en un estatus en el cual es permitido que el departamento de planificación y presupuesto lo apruebe o lo desapruebe, dicho oficio fue desaprobado por algún tipo de error, pero no se llenó el campo del memo, por lo cual muestra un mensaje de error. 95 Figura 4.12: Vista de la Aplicación - Detalle Oficio con error. Y en caso contrario, es decir, en caso de que se presione el botón de “devolver oficio” con el campo de memo con su respectiva información, automáticamente se envía un correo desde la aplicación al personal autorizado y correspondiente de la escuela a la cual pertenezca el preparador del trámite a procesar y el oficio cambia de estatus a oficio rechazado hasta que se corrija el error del trámite, para iniciar el ciclo de aprobación de oficios. 96 4.9.3. Módulo de Recursos Humanos En el módulo de recursos humanos al igual que en el módulo de Planificación y Presupuesto y en el módulo de Consejo de Facultad se administran los oficios de los preparadores y se aprueban según el estatus correspondiente, se establece y controla la en- trega de la documentación por parte de los preparadores para tener su registro en debida regla, pero además se inicia el movimiento de personal a partir de un oficio aceptado y se completa cierta información requerida por la planilla de movimiento de personal de los preparadores como se muestra en la Figura 4.13, luego de completados los campos corres- pondientes correctamente se envían los datos de la Planilla de Movimiento de Personal y se cargan a SicMov que es la aplicación encargada de gestionar dichas planillas. Los campos de la planilla de movimiento de personal y la interfaz de SicMov se muestra a continuación en la Figura 4.14 97 Figura 4.13: Vista de la Aplicación - Detalle Modificar Planilla de Movimiento de Personal. 98 Figura 4.14: Vista de la Aplicación - Planilla SicMov. 4.9.4. Módulo de Consejo de Facultad El módulo de Consejo de Facultad fue desarrollado para ofrecer la gestión y apro- bación indicada del trámite de personal de los preparadores, luego de realizada la reunión de Consejo de Escuela. A continuación se muestra su página principal en la Figura 4.15. 99 Figura 4.15: Vista de la Aplicación - Consejo de Facultad. Los oficios pendientes tienen la opción de presentar un documento en formato PDF con el resumen de los trámites de los preparadores que están en espera por la aprobación del consejo de facultad. Después de haber discutido los trámites de los preparadores y de haber indicado en el sistema cuales están aprobados y cuales no, se puede generar un resumen del resultado de la discusión a través de un documento en formato PDF igualmente y así es como los mó- dulos de planificación y presupuesto y recursos humanos pueden gestionar las actividades para el trámite de personal de los preparadores. Capítulo 5 Conclusión 5.1. Conclusiones Después de discutir todos los procedimientos que se llevan a cabo para llevar la administración de los preparadores, y ver como se puede mejorar el sistema actual, final- mente se puede apreciar como se pueden disminuir los errores causados por la transcripción repetitiva de datos, a través de la automatización de los mismos, también el tiempo sería óptimo o por lo menos en comparación con lo que se ha llevado a cabo hasta el momento. Es importante que cada módulo que interactúa en el sistema esté consciente de que sus interacciones con el mismo están entrelazadas y dependen unas acciones de otras que eje- cutan otros actores y así el resultado es que todo el flujo de trabajo funciona, se puede ver que el comportamiento general de todo el sistema conlleva a un seguimiento del trámite hasta su aprobación final. Se llegó a la conclusión de que al implementar el sistema descrito anteriormente: El tiempo de aprobación del trámite de personal será reducido y más efectivo. 100 101 Se tendrá menos pérdida de información y datos importantes junto con sus correc- ciones, por lo tanto la rentabilidad de la gestión administrativa de los preparadores será mucho más eficiente. Se mejorarán los procesos de búsqueda de información y comunicación entre los di- ferentes módulos, bien sea por medio de la base de datos que tienen en común o por los correos electrónicos. Para lograr la automatización de los procesos administrativos de los preparadores es necesario que el personal de la Facultad de Ciencias esté de acuerdo en que se sistematice el área administrativa de los preparadores y deben colaborar en la puesta en producción del sistema. 5.2. Recomendaciones El personal del departamento de Presupuesto, departamento de Recursos Humanos y la Escuela respectiva (Administradores y Secretarias) que van a utilizar el sistema deberán recibir una pequeña orientación sobre el manejo del mismo para su debido funcionamiento. Con este sistema se incrementa la seguridad de los datos, se manejan todos los datos con cierto grado de cuidado, ya que solamente el personal administrativo son los que tienen el acceso permitido para visuailzar y modificar los estados de los preparadores, logrando así, privacidad y confidencialidad de los datos, además con el uso de la Base de Datos cen- tralizada con usuarios que tengan el permiso respectivo como administrador de las mismas se garantiza la integridad de los datos. Es muy importante que se encuentren disponibles los administradores para la implantación del nuevo sistema. 102 5.3. Contribuciones Este trabajo aporta especialmente a la Facultad de Ciencias un sistema con el que se pueda mejorar la forma en que se llevan los procesos administrativos de los preparadores y un modelo para que en un futuro se pueda implantar este sistema para otros tipos de personal. 5.4. Trabajos Futuros Una de las ventajas del Sistema Web presentado en este trabajo es que puede ser perfectamente escalable para el resto del personal de la facultad como por ejemplo para los auxiliares docentes, los docentes, entre otros; en la estructura de la aplicación se pueden agregar los campos que difieren del preparador con respecto al resto del personal, e in- cluirlos en la base de datos, por consiguiente también se deberán agregar los servicios web correspondientes a todos los datos y procedimientos que se necesiten para los otros tipos de personal. Además si en otras facultades o universidades se aplican procesos similares, al que se aplica en la facultad de ciencias para administrar a sus preparadores, se podría migrar el sistema con el respectivo trabajo que esto incluye. Apéndice A Código de uso de Sesión 1 usr=params[’usuario’] 2 session[:login]=usr[’login’] 3 session[:clave]=usr[’clave’] 4 session[:cedula]=usr[’cedula’] 5 session[:entidad]=usr[’entidad’] 103 Apéndice B Método Analizador Sintáctico Hash 1 wsdl="http://localhost:8084/WS_TESIS/Tesis?wsdl"; 2 driver = SOAP::WSDLDriverFactory.new(wsdl).create_rpc_driver 3 ret=driver.tesis_autenticar({:login => login, :password => clave, : cedula =>cedula}).inspect; 4 xs,xml_respuesta=ret.split(/"/) 5 hash=Hash.from_xml(xml_respuesta) 6 acuse=hash["respuesta"]["acuse"] 7 if (acuse=="1") 8 flash[:mensaje_error_inicio]=’Datos invalidos’ 9 return false 10 else 11 nombre=hash["respuesta"]["filas"]["fila"]["nombre"] 12 apellido=hash["respuesta"]["filas"]["fila"]["apellido"] 13 entidad=hash["respuesta"]["filas"]["fila"]["entidad"] 14 correo=hash["respuesta"]["filas"]["fila"]["correo"] 15 session[:nombre]=nombre 104 105 16 session[:apellido]=apellido 17 session[:entidad]=entidad 18 session[:correo]=correo 19 if (entidad=="rrhh") 20 session[:login]=login 21 session[:clave]=clave 22 session[:cedula]=cedula 23 session[:entidad]=entidad 24 return true 25 ... 26 else 27 flash[:mensaje_error_inicio]=’Datos invalidos’ 28 return false 29 end Apéndice C Método Analizador Sintáctico REXML 1 wsdl="http://localhost:8084/WS_TESIS/Tesis?wsdl"; 2 driver = SOAP::WSDLDriverFactory.new(wsdl).create_rpc_driver 3 ret=driver.oficio_detalle({:id => @id_oficio}).inspect; 4 xs,parametro_xml=ret.split(/"/) 5 k=0; 6 xml = REXML::Document.new(parametro_xml) 7 sub_xml=xml.root.get_elements("//respuesta") 8 definitivo = sub_xml[0] 9 acuse=definitivo.get_elements("//acuse")[0].get_text() 10 if(acuse==0) 11 definitivo.each do |i| 12 i.elements.each do |m| 13 if definitivo.get_elements("fila") 14 @nro_oficio[k]=m.get_elements("//numoficioprepa")[k].get_text() 15 @cedula[k]=m.get_elements("//cedulapreparador")[k].get_text() 16 @nombre[k]= m.get_elements("//nombre")[k].get_text().to_s 106 107 17 @apellido[k]=m.get_elements("//apellido")[k].get_text().to_s 18 @nombre_apellido[k]=@nombre[k]+" "+@apellido[k] 19 @escuela[k]=m.get_elements("//nombreescuela")[k].get_text() 20 @tipo_oficio[k]=m.get_elements("//idtipomovimiento_con_descripcion ")[k].get_text() 21 if(@tipo_oficio=="16") 22 @asunto="Aumento de horas de Preparador I a Preparador II" 23 elsif(@tipo_oficio=="17") 24 @asunto="Disminuci&oacute;n de horas de Preparador II a Preparador I" 25 elsif(@tipo_oficio=="46") 26 @asunto="Retiro de Preparador" 27 elsif(@tipo_oficio=="05") 28 @asunto="Nombramiento de Preparador" 29 end 30 @estado_oficio[k]=m.get_elements("//idestatusoficio_con_descripcion ")[k].get_text() 31 @fecha_elaboracion[k]=m.get_elements("//fechaelaboracion")[k]. get_text() 32 @cargo[k]=m.get_elements("//cargo")[k].get_text() 33 @dedicacion[k]=m.get_elements("//dedicacion")[k].get_text() 34 @fecha_ingreso[k]=m.get_elements("//fechaingreso")[k].get_text() 35 @fecha_efectiva[k]=m.get_elements("//fechaefectiva")[k].get_text() 36 @proyecto[k]=m.get_elements("//proyecto")[k].get_text() 37 @nota[k]=m.get_elements("//nota")[k].get_text() 108 38 @disponibilidad_presupuestaria[k]=m.get_elements("// disponibilidadpresupuestaria")[k].get_text() 39 @idd[k]=m.get_elements("//idd")[k].get_text() 40 @resolucion[k]=m.get_elements("//resolucion")[k].get_text() 41 @fecha_re_dpp[k]=m.get_elements("//fecha_re_dpp")[k].get_text() 42 @fecha_ap_dpp[k]=m.get_elements("//fecha_ap_dpp")[k].get_text() 43 @fecha_re_p_rrhh[k]=m.get_elements("//fecha_re_p_rrhh")[k].get_text () 44 @fecha_ap_p_rrhh[k]=m.get_elements("//fecha_ap_p_rrhh")[k].get_text () 45 @fecha_re_cf[k]=m.get_elements("//fecha_re_cf")[k].get_text() 46 @fecha_ap_cf[k]=m.get_elements("//fecha_ap_cf")[k].get_text() 47 @fecha_re_cf_rrhh[k]=m.get_elements("//fecha_re_cf_rrhh")[k]. get_text() 48 @fecha_ap_cf_rrhh[k]=m.get_elements("//fecha_ap_cf_rrhh")[k]. get_text() 49 k=k+1 50 end 51 end if definitivo.get_elements("//filas") 52 end 53 end Apéndice D Servicio Web - XML 1 @WebMethod(operationName="oficio_detalle") 2 public String oficio_detalle(@WebParam(name = "id") 3 String id) { 4 System.out.println("+ este es id: "+id); 5 String respuesta = null; 6 int id1=Integer.parseInt(id.trim()); 7 switch(id1) 8 { 9 case 1: 10 respuesta="<respuesta><acuse>0</acuse><filas>" + 11 "<fila>" + 12 "<numoficioprepa>1</numoficioprepa>" + 13 "<nombre>Betzimar</nombre>" + 14 "<apellido>Cordova</apellido>" + 15 "<cedulapreparador>16952676</cedulapreparador>" + 16 "<nombreescuela>Biologia</nombreescuela>" + 109 110 17 "<idtipomovimiento_con_descripcion>16:Aumento</ idtipomovimiento_con_descripcion>" + 18 "<idestatusoficio_con_descripcion>Enviado a Consejo de Facultad </idestatusoficio_con_descripcion>" + 19 "<fechaelaboracion>30/03/09</fechaelaboracion>" + 20 "<asunto>Aumento de cargo</asunto>" + 21 "<cargo>Preparador I</cargo>" + 22 "<dedicacion>Convencional (12h)</dedicacion>" + 23 "<proyecto></proyecto>" + 24 "<fechaingreso>05/07/09</fechaingreso>" + 25 "<fechaefectiva>25/10/09</fechaefectiva>" + 26 "<disponibilidadpresupuestaria>1</disponibilidadpresupuestaria>" + 27 "<idd>56657</idd>" + 28 "<nota>Aumento de cargo</nota>" + 29 "<requisitosfisicos>0</requisitosfisicos>" + 30 "<fecha_re_dpp>01/06/08</fecha_re_dpp>" + 31 "<fecha_ap_dpp>01/05/07</fecha_ap_dpp>" + 32 "<fecha_re_p_rrhh>01/05/07</fecha_re_p_rrhh>" + 33 "<fecha_ap_p_rrhh>01/06/08</fecha_ap_p_rrhh>" + 34 "<fecha_re_cf>01/05/07</fecha_re_cf>" + 35 "<fecha_ap_cf>01/05/07</fecha_ap_cf>" + 36 "<fecha_re_cf_rrhh>01/06/08</fecha_re_cf_rrhh>" + 37 "<fecha_ap_cf_rrhh>01/05/07</fecha_ap_cf_rrhh>" + 38 "<resolucion></resolucion>" + 39 "</fila>" + 111 40 "</filas>" + 41 "</respuesta>"; 42 break; 43 ... 44 } 45 return respuesta; 46 } Apéndice E PDF 1 require ’pdf/writer’ 2 class GenerarPdfController < ApplicationController 3 4 def pdf 5 fecha=Time.now.strftime("%d-%m-%Y") 6 titulo="Resumen_Tramites_Preparadores_fecha:#{fecha}.pdf" 7 pdf=PDF::Writer.new 8 pdf.margins_pt(35,20,20,20) 9 pdf.select_font(’Times-Roman’) 10 tabla=PDF::SimpleTable.new 11 pdf.start_page_numbering(500, 760, size=9, pos = nil, pattern = "PAG. < PAGENUM> DE <TOTALPAGENUM>", starting = nil) 12 pdf.text "\n", :font_size => 10, :justification => :left 13 pdf.text "UNIVERSIDAD CENTRAL DE VENEZUELA", :justification => :left 14 pdf.text "FACULTAD DE CIENCIAS", :justification => :left 112 113 15 pdf.text "RESUMEN DE LOS TRÁMITES PENDIENTES DE LOS PREPARADORES", : justification => :left 16 pdf.add_text 450, 735,"FECHA: " + Time.now.strftime("%d-%m-%Y") 17 pdf.text "\n\nTRAMITES DE LOS PREPARADORES\n\n\n", :justification => : center 18 ... Bibliografía [1] Yurbelis Boyer; Néstor Méndez, Automatización de procesos relacionados con las solicitudes estudiantiles y actividades administrativas y de docencia de la Facultad de Ciencias, Tesis de Grado 17165, Facultad de Ciencias, UCV, Mayo 2008. [2] Cáceres Rosa, Diseño de una herramienta de automatización y sequimiento de las so- licitudes de beneficios socioeconómicas de los empleados de la Universidad Central de Venezuela, Trabajo Especial de Postgrado, Febrero 2008. [3] Wikipedia, Oficio (documento), http://es.wikipedia.org/wiki/Oficio_(documento), artículo publicado diciembre 2006. [4] Dr. José Rodríguez de Rivera, jrivera[en]campus.cepade.es, Univ. Católica Boliviana San Pablo Univ.Católica de Salta, Argentina, CEPADE, Univ. Politécnica de Madrid, Dpto. Ciencias Empresariales, Univ. de Alcalá de Henares, 1993. [5] Gómez Guillermo, SISTEMAS ADMINISTRATIVOS, Análisis y Diseños, Editorial Mc Graw Gil. Año 1.997. [6] Barkley, E. F.; Croos, P. Y MA, Editorial: Morata Ediciones, Año: 2007. [7] Schlichter, Johann H., Springer-verlag Berlin And Heidelbe, Computer-Supported Cooperative Work, 2005. 114 115 [8] Roseman, M.; Greenberg, S.; “GROUPKIT: a groupware toolkit for building real- time conferencing application”. Proceedings of the 1992 ACM conference on Computer-supported cooperative work. ACM Press New York, NY, USA, 1992. [9] Alternativas para Microsoft Excel, Sitio web oficial de Microsoft Office. [10] Wikipedia, http://es.wikipedia.org/wiki/Programación_extrema. [11] Pagina oficial de Ruby on Rails, http://www.rubyonrails.org.es/ [12] Introducción a RubyGems, Daniel M. Maldonado (danyx@elcodigok.com.ar), Luis Chavez (lchavez@larepaweb.com.ar), Viernes, 28 de agosto de 2009, http://www.larepaweb.com.ar/, http://www.elcodigok.com.ar/ [13] Wikipedia, http://es.wikipedia.org/wiki/Modelo_Vista_Controlador. [14] W3 MVC Device Independent View Design in MVC based applications http://www.w3.org/2002/02/DIWS/submission/CovigoPositionPaperOnW3C- DIA.htm. [15] Proyecto Ciclope, Modelo MVC, http://www.ciclope.info/doc/mvc/index.php?action=model. [16] Adobe, Flash CS3, Centro de Recursos de ayuda, Utilización del patrón de diseño MVC, http://livedocs.adobe.com/flash/9.0_es/UsingFlash/help.html?content=WSd60f23110762d6b883b18f10cb1fe1af6- 7b36.html. [17] Beneficios del Modelo MVC, http://www.microsoft.com/spanish/msdn/comunidad/mtj.net/voices/mtj3317.asp. [18] W3C. Guía breve de Servicios Web. http://www.w3c.es/Divulgacion/Guiasbreves/ServiciosWeb. 116 [19] Módulo de Servicio al Docente - Módulo de Servicio del Estudiante, https://docentes.ciens.ucv.ve/ - https://estudiantes.ciens.ucv.ve/. [20] Ruby on Rails, RibosoMatic, Desarrollo Web, Aplicaciones, Software,etc, publicado 13-Abril-2007, http://www.ribosomatic.com/articulos/ruby-on-rails-en-accion-1/.1 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación SISTEMA DE GESTIÓN DE PREPARADORES PARA LA FACULTAD DE CIENCIAS DE LA UCV Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela, por las bachilleres: Jessica Mariana Martínez L. - C.I.: 18.110.822 Josimar Alejandra Córdova A.- C.I.: 18.760.512 Para optar por el título de Licenciado en Computación Tutor Académico: Prof. Robinson Rivas Caracas, Octubre de 2009 2 Agradecimientos Primeramente a mi Buen Dios y Señor Jesucristo, “Digno eres, Señor y Dios nues- tro, de recibir la gloria, la honra y el poder, porque tú creaste todas las cosas” Apocalipsis 4:11. A mis padres Sergio Martínez y Mariana de Martínez y a mi hermana Jocabed Martínez por su amor, dedicación, colaboración y comprensión durante todo este tiempo de estudio y vida, les agradezco mucho. A mi amiga y compañera de tesis Josimar Córdova, quien es un complemento para mí tanto en este trabajo que realizamos como en muchas etapas de la carrera, en las cuales sobrepasa el valor de su amistad. A mi tutor Robinson Rivas por su apoyo y darnos la oportunidad de trabajar con él en este proyecto. A mis profesores de los cuales he tenido el privilegio de aprender, entre ellos muy especialmente a Luis Manuel Hernández y quien también es mi tutor Robinson Rivas. A Efraín Gatuzz quien es mi novio y amigo, por su amor y su cooperación, además de que su presencia en todo momento es muy valiosa para mí. A algunos amigos que han prestado su ayuda incondicionalmente: David Molina, Daniel Espinoza, Angel Díaz, entre otros amigos que han estado pendiente. Finalmente a todos los que de una u otra manera no sólo han colaborado con la realización de este Trabajo Especial de Grado sino que han estado en buenas y malas durante toda la carrera de computación en estos 5 años, Gracias!!! Jessica Martínez 3 Esta tesis, ha requerido de mucho esfuerzo y mucha dedicación, no hubiese sido posible su finalización sin la cooperación desinteresada de todas y cada una de las personas que a continuación citaré y muchas de las cuales han sido un soporte muy fuerte para mí en momentos de angustia. En primer lugar quiero dar gracias a Dios, mi Guía, por estar conmigo en cada paso que doy, por enseñarme que no hay nada imposible, por fortalecer mi corazón e iluminar mi mente en momentos en que lo necesitaba, por haber puesto en mi camino a aquellas personas que han sido mi soporte y compañía durante todo el período de estudio y por darme la oportunidad de experimentar una vida de estudios feliz con las personas ideales en mi vida, con profesores únicos y estudiar en una Universidad Excelente como lo es la Universidad Central de Venezuela. Quiero agradecer hoy y siempre a mi familia que siempre están al tanto del éxito de mi trabajo especial de grado y me brindan la fortaleza necesaria para seguir adelante, a mis padres por criarme de la manera en que lo hicieron para así hacerme una persona buena y noble de corazón, en especial a mi madre Coralia la mujer más luchadora que conozco, gracias a ella es que soy lo que soy, mami gracias por todo el amor que me has dado y que me das todos y cada uno de mis días, éste logro te lo dedico a tí. A mis hermanos que son mi fuente de energía y de amor, a mi hermana Betzimar por seguirme en todo el trayecto de mi tesis, por darme el ánimo que necesito para llevar el triunfo de una graduación juntas, Y a mi hermanito Arthur por toda la alegría que me transmite en todo momento. A mi tía Rosita por estar siempre pendiente de mi bienestar y por desear tanto como yo la culminación de la tesis y a mi tío Alberto por ser como un padre para mí y un ejemplo a seguir en mis estudios. A mis amigos de estudio, con los que comparto las mismas experiencias y nos ponemos el hombro cada vez que se necesita, con los que compartí momentos inolvidables 4 en toda mi carrera, estudios en la biblioteca, transnochos de programación, viajes, congreso, entre muchas otras cosas. Gracias a ellos mi vida universitaria fue única, amena y divertida. Un agradecimiento especial a mi gran amiga y compañera de tesis Jessica Martínez y a su linda familia, a Jessi por todo su paciencia, por confiar y creer en mí, ser como una hermana, guiarme siempre por el camino de Dios y sobre todo por su valiosa amistad, se que siempre podré contar con ella y a su familia por toda la hospitalidad y el cariño que me ofrecen. A mis amigos que estuvieron muy pendientes y en continua colaboración con el desarrollo de esta tesis, ya que dentro de los ámbitos que a cada uno le competen me han colaborado sin ponerme ningún impedimento, al contrario, me han brindado siempre una sonrisa, gracias a David Molina, Daniel Espinoza, Isaura Ruiz, Angel Díaz, Eliezer Robles y Aurimar Rodriguez. A Jick, por ser la persona que ha compartido el mayor tiempo de la tesis a mi lado, porque en su compañía las cosas malas se convierten en buenas y porque simplemente me alegra su compañía. A mi tutor Robinson Rivas por apoyarnos en todo momento no sólo en la tesis sino en toda la carrera de Computación, por ser la persona más positiva en el desarrollo de la tesis, por ser un profesor muy ejemplar y significativo en la Universidad y al Profesor Mar- cel Castro por su colaboración, empatía y apoyo para con nosotras en estos momentos. En general quiero agradecer a todas y cada una de las personas que han vivido con- migo el desarrollo de esta tesis, con sus altos y bajos y que no necesito nombrar porque tanto ellas como yo sabemos que desde los más profundo de mi corazón les agradezco el 5 brindarme todo el apoyo, colaboración, ánimo y sobre todo cariño y amistad. A todos ustedes.. GRACIAS! Josimar Córdova Resumen La gestión de preparadores no está automatizada en la Universidad Central de Venezuela, por lo que los trámites se hacen lentos y propensos a frecuentes errores. Es- to trae como consecuencia retardos e inconvenientes administrativos en la contratación del personal docente de preparadurías. En este trabajo se diseñó y construyó una aplicación basada en tecnologías web que permiten automatizar y agilizar los procesos administrativos referentes a la contratación, seguimiento y control del personal de preparadurías. El sistema está diseñado para atender las demandas de la Facultad de Ciencias de la UCV. El diseño se basa en la metodología de flujos de trabajo (workflows) lo que lo hace flexible y fácil de extender a nuevos reque- rimientos. El sistema ha sido desarrollado en Ruby usando el framework de desarrollo Rails y una arquitectura basada en Servicios Web que permite integrar este sistema con otros ya previamente desarrollados o en desarrollo, especialmente el sistema de Control de Estudios CONEST y con el sistema de gestión de personal de la UCV. Índice general 1. Introducción 13 1.1. Antecedentes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 1.2. Organización del Trabajo . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 2. Propuesta 17 2.1. Problema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 2.2. Objetivos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 2.2.1. Objetivo General . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.2.2. Objetivos Específicos . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.3. Alcance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 2.4. Justificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 3. Marco Teórico 22 3.1. Documentos Administrativos . . . . . . . . . . . . . . . . . . . . . . . . . 22 3.2. Administración de Preparadores . . . . . . . . . . . . . . . . . . . . . . . 27 3.3. Flujo de Trabajo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 3.3.1. Diagrama de Flujo . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.3.2. Sistemas de Flujo de Trabajo . . . . . . . . . . . . . . . . . . . . . 32 3.3.3. Objetivos de un Sistema de Flujo de Trabajo . . . . . . . . . . . . 32 3.4. Proceso Administrativo de los Preparadores . . . . . . . . . . . . . . . . . 33 7 8 3.4.1. Actores del Proceso Administrativo de los Preparadores . . . . . . 33 3.4.2. Funcionamiento del Proceso Administrativo de los Preparadores . . 34 3.5. Aplicaciones Colaborativas . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.1. Elementos de un Trabajo Colaborativo . . . . . . . . . . . . . . . . 40 3.6. Aplicaciones usadas en el Sistema Actual . . . . . . . . . . . . . . . . . . 41 3.6.1. Microsoft Office Excel . . . . . . . . . . . . . . . . . . . . . . . . 41 3.6.2. SicMov . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7. Programación Extrema - XP . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7.1. Principios de XP . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.7.2. Características Fundamentales del Método XP . . . . . . . . . . . 45 3.8. Definiciones de Tecnologías . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.8.1. Ruby . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.8.2. Ruby on Rails . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 3.8.3. RubyGems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 3.9. Patron de Diseño MVC (Modelo - Vista - Controlador) . . . . . . . . . . . 49 3.9.1. Utilización del Patrón MVC . . . . . . . . . . . . . . . . . . . . . 50 3.9.2. Beneficios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 3.10. Servicios Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3.10.1. Protocolos de Servicios Web . . . . . . . . . . . . . . . . . . . . . 52 3.11. Base de Datos del Sistema actual . . . . . . . . . . . . . . . . . . . . . . . 53 3.12. Estructura del Sistema Actual . . . . . . . . . . . . . . . . . . . . . . . . . 54 4. Metodología de Desarrollo 57 4.1. Análisis de Requerimientos y Diagnóstico . . . . . . . . . . . . . . . . . . 57 4.1.1. Requerimientos Generales . . . . . . . . . . . . . . . . . . . . . . 57 4.1.2. Requerimientos Funcionales . . . . . . . . . . . . . . . . . . . . . 57 4.1.3. Requerimientos No Funcionales . . . . . . . . . . . . . . . . . . . 59 9 4.1.4. Casos de Uso . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 4.2. Tipo de Investigación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 4.3. Instrumentos de Recolección de Información . . . . . . . . . . . . . . . . 67 4.4. Diagnóstico de Necesidades . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.4.1. Recursos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.5. Base de Datos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.6. Arquitectura de Ruby on Rails adaptada a SystemPAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 4.6.1. Descripción de algunos directorios del proyecto . . . . . . . . . . . 72 4.7. Estructura del Nuevo Sistema . . . . . . . . . . . . . . . . . . . . . . . . . 73 4.8. Desarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 4.8.1. Iteración 0: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 4.8.2. Iteración 1: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.8.3. Iteración 2: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.8.4. Iteración 3: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 4.8.5. Iteración 4: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 4.8.6. Iteración 5: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 4.8.7. Iteración 6: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 4.8.8. Iteración 7: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 4.8.9. Iteración 8: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 4.8.10. Iteración 9: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 4.8.11. Iteración 10: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 4.8.12. Iteración 11: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 4.8.13. Iteración 12: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 4.8.14. Iteración 13: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 4.8.15. Iteración 14: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 4.9. Interfaz de la Aplicación . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 10 4.9.1. Autenticación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 4.9.2. Módulo de Planificación y Presupuesto . . . . . . . . . . . . . . . 88 4.9.3. Módulo de Recursos Humanos . . . . . . . . . . . . . . . . . . . . 96 4.9.4. Módulo de Consejo de Facultad . . . . . . . . . . . . . . . . . . . 98 5. Conclusión 100 5.1. Conclusiones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 5.2. Recomendaciones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 5.3. Contribuciones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 5.4. Trabajos Futuros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 Apéndice A Código de uso de Sesión 103 Apéndice B Método Analizador Sintáctico Hash 104 Apéndice C Método Analizador Sintáctico REXML 106 Apéndice D Servicio Web - XML 109 Apéndice E PDF 112 Índice de figuras 3.1. Oficio - Tipo de Trámite de Nombramiento. . . . . . . . . . . . . . . . . . 25 3.2. Planilla de Movimiento. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 3.3. Minuta. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 3.4. Oficio - Tipo de Trámite de Aumento de horas. . . . . . . . . . . . . . . . 29 3.5. Oficio - Tipo de Trámite de Retiro de Preparador. . . . . . . . . . . . . . . 30 3.6. Diagrama de Flujo de los procesos administrativos de los preparadores. . . 37 3.7. Continuación del Diagrama de Flujo de los procesos administrativos de los preparadores. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.8. Patrón de Diseño MVC [14]. . . . . . . . . . . . . . . . . . . . . . . . . . 49 3.9. Vista de los Presupuestos almacenados en una Hoja de Excel. . . . . . . . . 55 3.10. Dependencias que utilizan el sistema actual. . . . . . . . . . . . . . . . . . 56 4.1. Caso de Uso - Nivel 0. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.2. Caso de Uso - Nivel 1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 4.3. Arquitectura de los componentes de base de Datos. . . . . . . . . . . . . . 70 4.4. Arquitectura MVC en Ruby on Rails. . . . . . . . . . . . . . . . . . . . . 71 4.5. Gráfico con la estructura del nuevo sistema. . . . . . . . . . . . . . . . . . 73 4.6. Vista de la Aplicación - Autenticación. . . . . . . . . . . . . . . . . . . . . 88 4.7. Vista de la Aplicación - Página principal de Presupuesto . . . . . . . . . . 90 4.8. Vista de la Aplicación - Oficios Pendientes. . . . . . . . . . . . . . . . . . 91 11 12 4.9. Vista de la Aplicación - Oficios Aceptados. . . . . . . . . . . . . . . . . . 92 4.10. Vista de la Aplicación - Oficios Rechazados. . . . . . . . . . . . . . . . . . 93 4.11. Vista de la Aplicación - Detalle Oficio. . . . . . . . . . . . . . . . . . . . . 94 4.12. Vista de la Aplicación - Detalle Oficio con error. . . . . . . . . . . . . . . . 95 4.13. Vista de la Aplicación - Detalle Modificar Planilla de Movimiento de Per- sonal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 4.14. Vista de la Aplicación - Planilla SicMov. . . . . . . . . . . . . . . . . . . . 98 4.15. Vista de la Aplicación - Consejo de Facultad. . . . . . . . . . . . . . . . . 99 Capítulo 1 Introducción Uno de los procesos administrativos más importantes de la Facultad de Ciencias es el referente al concurso, contratación, control y retiro de los preparadores. La automa- tización de estos procesos se ha vuelto una gran necesidad, debido al incremento de la población estudiantil y a las exigencias de más plazas para preparadores en diferentes ma- terias y la gran movilidad que estos cargos tienen, ya que éstos comúnmente cambian cada semestre. A pesar de su importancia, el sistema de administración de los preparadores no es un sistema único sino un conjunto de programas que trabajan de forma totalmente indepen- diente, unidos por la comunicación del personal que lo maneja. Esta situación produce comúnmente que la información no sea integral, ya que los mismos datos de las personas registradas en los programas se transcriben más de una vez, por lo que se puede generar el error humano. Ejemplos comunes de estos errores son equi- vocarse en un número de la cédula, equivocarse en los nombres, etc. La automatización que se desea implementar en la Facultad de Ciencias, permitirá establecer de forma precisa y coordinada el control de los preparadores, tanto en el aspecto 13 14 académico como administrativo, permitiéndole conocer en cualquier momento el estado de cada uno de los aspectos de la operación, para una toma de decisiones objetiva y acerta- da a los niveles tácticos, operativos y estratégicos. Para esto se realizó la aplicación web SystemPAP (Sistema para la gestión de Procesos Administrativos de Preparadores), con la cual se tienen los siguientes beneficios: Establecer y controlar la entrega de la documentación por parte de los preparadores para tener su registro en regla. Conocer los adeudos de documentación para prever y aplicar medidas correctivas. Establecer las políticas académicas necesarias para el ingreso de los preparadores, eliminando errores al registrar los trámites de los preparadores. Establecer un Flujo de Trabajo entre diferentes entes del personal administrativo de la Facultad de Ciencias. Como por ejemplo: el personal de Recursos Humanos, el personal de Presupuesto y el personal de cada Escuela perteneciente a la Facultad de Ciencias, para poder manejar así los mismos datos con un orden específico, y mantener la armonía en el proceso administrativo. Automatizar los procesos identificados. Centralizar los procesos de gestión administrativa de los preparadores a un solo sis- tema Web en el que se trabaje con múltiples usuarios desde diferentes localidades específicas. Ahorrar tiempo al asignar un preparador a una materia. Los usuarios podrán obtener reportes acerca de los resultados y estados en el sistema administrativo y académico. Consolidar la información. 15 Tomando en cuenta la importancia de cada una de las funcionalidades identificadas se aplicó un método de desarrollo ágil en un contexto de trabajo real, para el desarrollo de una aplicación Web cliente-servidor, que sea accesible y fácil de usar; de manera tal que pueda implantarse en cada una de las oficinas de la facultad que estén encargados de esta gestión administrativa, y que permita agilizar diferentes operaciones con los preparadores. 1.1. Antecedentes Actualmente se realiza este trabajo de manera manual haciéndose modificaciones de la información en cualquiera de los puntos del flujo de trabajo, ocasionando inconsis- tencia en los datos. Hay otras aplicaciones que se realizaron con el fin de mejorar la gestión de los estu- diantes, procesos administrativos y académicos como lo son Conest y Sicmov, donde tanto profesores como alumnos han colaborado para su desarrollo. CONEST: Como explica Y. Boyer y N. Méndez en su Trabajo Especial de Grado Automatización de procesos relacionados con las solicitudes estudiantiles y actividades administrativas y de docencia de la Facultad de Ciencias [1], “La División de Control de Estudios se encuentra automatizando sus procesos con el fin de ofrecer mejor servicio a sus usuarios. Realizaron la aplicación por docentes y estudiantes en calidad de desarrolladores de sistemas basados en plataforma de software libre”, y su objetivo general fue “Desarrollar una aplicación web que automatice el conjunto de procesos relacionados a las diversas so- licitudes estudiantiles y actividades que realizan las escuelas y dependencias de la Facultad de Ciencias, en relación a la División de Control de Estudios, dando soporte de personal involucrado aumentando así su satisfacción y al mismo tiempo contribuir en la disminución de los costos y los tiempos de respuesta”. 16 SicMov: como expresó R. Cáceres en su Trabajo Especial de PostGrado Diseño de una herramienta de automatización y sequimiento de las solicitudes de beneficios socioe- conómicas de los empleados de la Universidad Central de Venezuela, su trabajo “presenta el diseño de una aplicación web que simplifica y automatiza los procedimientos para la tramitación de los beneficios socioeconómicos de los empleados que laboran en la UCV”. Este Trabajo es un módulo complementario de la Aplicación SicMov [2]. 1.2. Organización del Trabajo Este trabajo se divide en: Propuesta: esta sección contiene la explicación del problema estudiado y tratado, los objetivos planteados, el alcance del trabajo y su justificación. Marco Teórico: contiene los conceptos de los términos más utilizados y explica- ciones tanto de la metodología usada como de la tecnología con que se desarrolló el trabajo. Metodología de Desarrollo: en esta sección se explica el desarrollo del trabajo, aplicándo la metodología de Programación Extrema (XP). Conclusiones: finalmente las conclusiones y las recomendaciones, las contribuciones del trabajo realizado y una breve explicación de los trabajos futuros que se puedan hacer. Capítulo 2 Propuesta 2.1. Problema La administración de todos los procesos que tienen relación con los preparadores es un trabajo largo y delicado, que toma mucho tiempo en revisiones y verificaciones de los datos, este trabajo se hace de forma manual y ocasiona que se retrasen en general los procesos a realizar. A medida que el tiempo avanza, la cantidad de preparadores a los que se tiene que hacer sus contratos, retiros, aumento o disminución de cargo, se hace mayor. Debido a es- ta demanda, el trabajo que se hace a diario en las oficinas de administración es cada día más engorroso por la cantidad de transcripciones a mano que se deben realizar, además de papeles en cantidades que son difíciles de almacenar y trasladar en estas oficinas. Además la espera para que estos documentos sean enviados a todas las oficinas perninentes para su procesamiento es mucha, en comparación con la comunicación a través de las redes de computadoras en las que sería cuestión de segundos que la información contenida en ellos pase de un lado a otro con menos probabilidad de errores y complicaciones. En el sistema actual hay ciertos cambios que se deben hacer y que a su vez se pre- 17 18 sentan en los puntos que siguen para describir con mayor detalle las limitaciones y alcances del mismo que se deben fortalecer y completar. Limitaciones y Alcances del sistema actual: Existe mucha limitación en cuanto a las operaciones que se requieran, como por ejemplo las búsquedas que se quieran consultar o las modificaciones que se necesiten para un instante determinado. Los períodos de tiempo para completar una operación con los preparadores es muy largo, a veces puede tardar de uno a tres meses pero hay casos críticos que llega a ser un período de espera de dos años. Hay alta probabilidad de errores de transcripción, por ejemplo los presentados más adelante en la sección de la Justificación. El manejo de cambios en la base de datos es engorroso y redundante. CONEST es un sistema independiente y si se quieren acceder a los datos se puede hacer de forma manual, a través del personal encargado o por los mismos estudiantes. El sistema SicMov se alimenta de los datos ingresados por transcripción. 2.2. Objetivos En vista de este panorama, se han propuesto los siguientes Objetivos Generales y Específicos. 19 2.2.1. Objetivo General Automatizar los procesos administrativos de los preparadores en los Departamen- tos de Presupuesto, Recursos Humanos y Consejo de Facultad de la Facultad de Ciencias de la Universidad Central de Venezuela, a través de un sistema Web que gestione dichos procesos. 2.2.2. Objetivos Específicos Investigar el funcionamiento del sistema actual que administra los retiros, nom- bramientos, aumento y disminución de horas de los preparadores. Desarrollar un flujo de trabajo que describa los procesos que afectan la adminis- tración de los preparadores de la Facultad de Ciencias de la U.C.V. Evaluar las posibilidades de mejoras del sistema actual en comparación con la tec- nología que se quiere implantar. Implantar una metodología de desarrollo para implementar un sistema web operable que cumpla con todos los requerimientos necesarios para gestionar a los preparadores y todas las actividades administrativas correspondientes. Desarrollar una interfaz usable en la que se realicen las diferentes actividades para la administración de preparadores para los módulos de Presupuesto, Recursos Humanos y Consejo de Facultad de la Facultad de Ciencias. Diseñar el proceso de integración con Sicmov y CONEST. 20 2.3. Alcance Este trabajo de grado permite la comunicación por medio de la web de los diferentes módulos que manejan los procesos administrativos de los preparadores hasta el momento en que se migran los datos al sistema SicMov, el cual es el encargado de hacer un seguimiento del movimiento de personal hasta llegar al rectorado donde se hace efectivo. Se aplicará específicamente a la Facultad de Ciencias de la UCV pero podría ser migrado para satisfacer las necesidades similares de otras facultades. 2.4. Justificación Este trabajo ayudará en gran manera a simplificar el trabajo administrativo que se lleva a cabo día a día en la Facultad de Ciencias de la U.C.V., se comunicará con bases de datos que tienen diferentes funcionalidades pero que mantendrán la información de forma central para el sistema, de esta manera se va a evitar ciertos errores como: Acceso a datos defasados, o datos fantasma, generalmente por la redundancia o tam- bién causados por múltiples archivos que actúan como BD, si por ejemplo se ac- tualiza en CONEST el nombre de un estudiante que inicialmente estaba guardado mal, el problema continúa estando en los demás lugares en donde está registrado el estudiante. Se podrá no sólo simplificar este tipo de errores sino que el tiempo que tardaría en realizarse cualquier operación mejoraría notablemente. Es muy importante que en cuanto a la eficiencia de estos procesos administrativos, se haga todo de la mejor forma posible, y con el avance de la tecnología es necesaria la actualización de los sistemas tradicionales y hacer cambios, aunque pueda acarrear un repudio inicial, es cuestión de tiempo hacer un 21 plan de introducción al nuevo sistema para el personal que lo va a operar, el hecho es que en ocasiones los cambios son una necesidad y este caso lo amerita. El desarrollo de un sistema que automatice los procesos para la administración de los preparadores de toda la Facultad de Ciencias, que hasta ahora se han llevado a cabo de manera tradicional, con ayuda de algunas aplicaciones, es muy factible, debido a que se cuenta tanto con la información necesaria, como con la disponibilidad del personal de desarrollo del nuevo sistema y del personal que lo va a operar en un futuro cuando esté en funcionamiento. En vista de que están disponibles los recursos necesarios para la realiza- ción del estudio, será cuestión de tiempo para poder ser operable y quede en funcionamiento cumpliendo con los propósitos planteados para el mismo. Capítulo 3 Marco Teórico 3.1. Documentos Administrativos Oficio: El oficio es un tipo de documento que sirve para comunicar disposiciones, consultas, órdenes, informes, o también para llevar a cabo gestiones de acuerdos, de co- laboración, entre otros. Estas redacciones se utilizan en instituciones como: universidades, ministerios, embajadas, municipios, sindicatos y oficinas de gobierno, entre otras [3]. Oficio aplicado en la Facultad de Ciencias: Es la planilla generada por la Escuela correspondiente dirigida al Consejo de Facultad, donde se lleva el trámite de nombramien- to, retiro, aumento o disminución de horas de los preparadores; contiene todos los datos necesarios para realizar la operación, tales como: el asunto (si es retiro, nombramiento o modificación en la cantidad de horas laborales), nombres y apellidos del bachiller al que se refiere el trámite, su cédula, el cargo que ocupa, dedicación (especifica el número de horas que se trabaja en el cargo), la fecha de ingreso, fecha efectiva, unidad ejecutora, pro- grama, disponibilidad presupuestaria, además en otra sección del documento se especifíca los documentos anexos que se requieren para llevar a cabo el proceso completo. También están los sellos y firmas correspondientes a las oficinas por donde pasan todos estos pape- les (incluyendo al Decano). Al final del documento hay una sección para la Resolución del 22 23 trámite, en el cual se coloca si fue aprobado o no, con la fecha del día correspondiente. Se puede observar un ejemplo de oficio en la Figura 3.1. Planilla de Movimiento: Es un documento generado por el sistema SICMOV, en la figura 3.2 se puede ver como es una planilla de movimiento; que contiene la siguiente información: Datos de la Planilla: contiene el número identificador de la planilla, la fecha de elaboración de la misma, el tipo de movimiento y el nombre y apellido de la persona a quien pertenece el trámite. Datos Personales: en esta sección están la cédula, fecha de nacimiento, país de ori- gen, ciudad de origen, estado civil, sexo, carga familiar, grado de instrucción, direc- ción de habitación, e-mail y telefono. Datos del Cargo: tipo de nómina, facultad o dependencia, fecha ingreso, fecha efec- tiva, fecha fin contrato, unidad ejecutora, dedicación, categoría docente, cargo, cargo vigente, grado, tab OPSU, tipo de personal, jornada, tipo de contrato, variación de sueldo, sueldo mensual, motivo del movimiento de personal. Modificaciones: los campos de modificaciones de apellido, nombre, cédula, Facultad o Dependencia Central, unidad ejecutora, tipo de nómina, tipo de personal, nuevo cargo, nueva dedicación y nueva categoría. Cuerpo de Remuneraciones Adicionales: contiene la comparación o diferencia de sueldo en Bolívares, gastos representados en Bolívares, prima A, monto prima rango B, monto en Bolívares, prima B, homologación en Bolívares. Datos Presupuestarios: contiene el código de presupuesto, cuenta de egreso, unidad ejecutora, tipo de personal y el id de detalle. 24 Firmas Autorizadas de la Solicitud: ejemplo de estas firmas son: Elaborado por o Aprobado por. Observaciones: información adicional para explicar algún punto del trámite que se considere importante. Anexos: Para realizar el proceso administrativo de un preparador, sea nombramien- to, retiro, aumento o disminución de horas se necesitan unos documentos específicos. Es- tos documentos son: el acta de concurso del preparador, constancia de No-Pasante, No- Becario, Kardex, Copia de la cédula de identidad, planillas de empleo, y por último la planilla de datos personales. Minuta: Lista detallada que se realiza por escrito y se genera en una reunión y presenta los puntos tratados en la misma y queda expresado como un Acta de Consejo de Facultad, en la Figura 3.3, se puede ver una minuta de la Facultad de Ciencias. 25 Figura 3.1: Oficio - Tipo de Trámite de Nombramiento. 26 Figura 3.2: Planilla de Movimiento. 27 Figura 3.3: Minuta. 3.2. Administración de Preparadores El Preparador es un estudiante de la Facultad de Ciencias que se dedica a enseñar, preparar y dar clases o lecciones a otros estudiantes sobre una determinada materia, super- visado por el profesor de la cátedra. Los preparadores se clasifican de la siguiente manera: Preparador I: Es un tipo de preparador en el cual su desempeño en labor equivale a 6 horas académicas. Preparador II: Es un tipo de preparador en el cual su desempeño en labor equivale a 12 horas académicas. Los tipos de trámites que se realizan para los preparadores son los siguientes: 28 Nombramiento: Consiste en agregar un preparador al sistema con un cargo que puede ser preparador I o preparador II, por ejemplo en la Figura 3.1, se puede obser- var un ejemplo de un oficio con asunto nombramiento de preparador I. Aumento o Disminución de Horas: El preparador en el período que transcurre en- tre un semestre y otro, puede aumentar su cargo de preparador I a preparador II, o disminuir de cargo de preparador II a preparador I, se puede observar un oficio de aumento de horas de preparador I a preparador II en la Figura 3.4. Retiro: Un preparador que después de cumplir su período de trabajo durante un semestre y no va a seguir ejerciendo la labor que hasta ese momento llevó, entonces es retirado de su cargo, en esos casos el cargo queda disponible para otro estudiante. En la Figura 3.5, se puede ver un ejemplo de este tipo de trámite. Una vez elaborado por la escuela correspondiente, un oficio o trámite de personal, aprobado por el Consejo de Escuela, el trámite ya sea de nombramiento, de retiro, de au- mento o disminución de horas, se remite al departamento de Presupuesto de la Facultad para verificación de los datos del cargo. Posteriormente el trámite pasa al departamento de Recursos Humanos de la Facultad para verificación nuevamente de los datos y soportes del trámite, que son todos los documentos anexos al mismo. Luego se envía al Consejo de Facultad para su aprobación, y una vez aprobado, el consejo de Facultad lo devuelve al departamento de Recursos Humanos para la elaboración del movimiento de personal. Esta información fue extraida de las continuas entrevistas a las personas encargadas de los Departamentos de Recursos Humanos y Presupuesto. 29 Figura 3.4: Oficio - Tipo de Trámite de Aumento de horas. 30 Figura 3.5: Oficio - Tipo de Trámite de Retiro de Preparador. 31 3.3. Flujo de Trabajo Flujo de Trabajo: (workflow en inglés) Es el estudio de los aspectos operacionales de una actividad de trabajo: cómo se estructuran las tareas, cómo se realizan, cuál es su orden correlativo, cómo se sincronizan, cómo fluye la información que soporta las tareas y cómo se le hace seguimiento al cumplimiento de las tareas. Si bien el concepto de flujo de trabajo no es específico a la tecnología de la información, una parte esencial del software para trabajo colaborativo (groupware) es justamente el flujo de trabajo [5]. El Flujo de Tra- bajo de los procesos para la administración de los preparadores de la Facultad de Ciencias se puede detallar en la Figura 3.6 y 3.7. Una aplicación de Flujos de Trabajo automatiza la secuencia de acciones, activi- dades o tareas, utilizadas para la ejecución del proceso, incluyendo el seguimiento del esta- do de cada una de sus etapas y la aportación de las herramientas necesarias para gestionarlo. Se pueden distinguir tres tipos de actividades [4]: Actividades Colaborativas: Un conjunto de usuarios trabajan sobre un mismo re- positorio de datos para obtener un resultado común. Actividades Cooperativas: Un conjunto de usuarios trabajan sobre su propio con- junto particular, estableciendo los mecanismos de cooperación entre ellos. Actividades de Coordinación: son las actividades en las que se divide el trabajo per- mitiendo así reducir complejidad y los problemas a unidades menores, a subsistemas especializados. 32 3.3.1. Diagrama de Flujo Es una forma más tradicional de especificar los detalles algorítmicos de un proceso y constituye la representación gráfica de un proceso multifactorial [5]. Se utiliza princi- palmente en programación, economía y procesos industriales, pasando también a partir de estas disciplinas a formar parte fundamental de otras, como la psicología cognitiva; estos diagramas utilizan una serie de símbolos con significados especiales. Son la representación gráfica de los pasos de un proceso, que se realiza para entenderlo mejor. 3.3.2. Sistemas de Flujo de Trabajo El propósito de los sistemas de workflow, o BPMS (Business Process Management Systems - Sistemas de Gestión de Procesos de Negocio), es acercar personas, procesos y máquinas, con el objeto de reducir tiempo y acelerar la realización de un trabajo. Estos sistemas permiten trabajar en equipo desde diferentes lugares físicos. Los sistemas de workflow facilitan la automatización de los flujos de trabajo entre procesos y permiten integrar los procesos de la empresa, rediseñados de acuerdo con ayuda de nuevas estrategias [5]. 3.3.3. Objetivos de un Sistema de Flujo de Trabajo Los objetivos de un Sistema de Flujo de Trabajo son [5]: Reflejar, mecanizar y automatizar los métodos y organización en el sistema de infor- mación. Establecer los mecanismos de control y seguimiento de los procedimientos organi- zativos. 33 Independizar el método y flujo de trabajo de las personas que lo ejecutan. Facilitar la movilidad del personal. Soportar procesos de reingeniería de negocio. Agilizar el proceso de intercambio de información y agilizar la toma de decisiones de una organización, empresa o institución. 3.4. Proceso Administrativo de los Preparadores En esta sección se explican los actores que intervienen en el Proceso Administrativo de los preparadores, el flujo de trabajo y la explicación detallada del mismo. 3.4.1. Actores del Proceso Administrativo de los Preparadores Escuela: Divisiones de las diferentes áreas académicas pertenecientes a la Facultad de Ciencias, La escuela es una unidad académico administrativa, encargada de coor- dinar y velar por el buen desarrollo de la Docencia de las materias de la misma, tanto básicas, electivas como del componente profesional. Fundamenta sus actividades en la Comisión de Docencia. Las Escuelas que participan en este flujo de trabajo son 6: Escuela de Biología, Escuela de Computación, Escuela de Física, Escuela de Geoquímica, Escuela de Matemáticas y Escuela de Química. La escuela se encarga de gestionar las plazas de los preparadores elegidos para así generar el trámite de Personal. Departamento de Presupuesto: Ente que se encarga de dirigir la administración del presupuesto de la Facultad de Ciencias de acuerdo a las necesidades y prioridades del Órgano Judicial con bases en las directrices emanadas en la Ley de Presupuesto 34 y el Ministerio de Economía y Finanzas. Este departamento se encarga de verificar los Datos de los preparadores y verificar la disponibilidad de presupuesto. Departamento de Recursos Humanos: La función de Recursos Humanos está com- puesta por áreas tales como Reclutamiento y Selección, Compensaciones y Benefi- cios, Formación y Desarrollo, y Operaciones. Para poder ejecutar la estrategia de la organización es fundamental la administración de los Recursos Humanos. En el flujo de trabajo el Departamento de Recursos Humanos se encarga de Verificar anexos de los datos de los preparadores, gestionar la minuta que genera el Consejo de Facultad para generar así la planilla de movimiento de Personal. Consejo de Facultad: Debe velar por el funcionamiento normal de la Facultad y el cumplimiento cabal de sus fines, coordinando las actividades académicas, planes de estudio y aspectos administrativos relacionados con el personal. Está integrado por el Decano, siete representantes de los profesores, un representante de los egresados y dos representantes estudiantiles. Los Coordinadores y Directores asisten con derecho a voz. Su responsabilidad en el flujo de trabajo es generar la minuta que se gestiona a lo largo del procedimiento y la aprobación de los trámites del preparador en cuestión. Se puede comtemplar el funcionamiento actual del Proceso Administrativo de los Preparadores con el diagrama que se muestra en las Figuras 3.6 y 3.7: 3.4.2. Funcionamiento del Proceso Administrativo de los Preparadores A continuación se explican las Figuras 3.6 y 3.7 de forma detallada cada uno de los pasos del Flujo de Trabajo: 1. La Escuela pregunta por la disponibilidad de presupuesto en el Departamento de Presupuesto para tener conocimiento de las plazas vacantes para los preparadores. 35 2. El Departamento de Presupuesto verifica la disponibilidad de Presupuesto y si hay cargos disponibles. Pueden darse dos casos: 2.1. Si no hay cargos disponibles En este punto termina el Flujo de trabajo, ya que no hay cargos de preparadores para gestionar. 2.2. Si hay cargos disponibles el Departamento de Presupuesto envía las plazas va- cantes u ocupadas para los preparadores. 3. La Escuela recibe las plazas vacantes u ocupadas de sus preparadores. 4. La Escuela realiza todos los pasos para elegir preparadores y se lleva a cabo el pro- ceso de selección. 5. Una vez que se eligieron los preparadores para ocupar las plazas vacantes la escuela realiza los trámites administrativos para gestionar a los preparadores con sus datos personales y sus documentos académicos. 6. El Departamento de Presupuesto verifica los datos. Puede ocurrir lo siguiente: 6.1. En caso de que los datos no sean correctos el Departamento de Presupuesto especifica los errores y regresan el trámite a la Escuela respectiva que emitió la in- formación de manera que la corrija y se vuelvan a verificar los datos (Paso 6). 6.2. En caso de que los datos sean correctos el trámite es llevado a Recursos Hu- manos. 7. El departamento de Recursos Humanos verifica los datos y los anexos del preparador, cabe destacar que en estos anexos está incluida el Acta de la escuela respectiva. Puede ocurrir lo siguiente: 7.1. En caso que alguno de los anexos no sea correcto los documentos son retornados a la escuela respectiva para que se vuelva a generar el trámite del preparador en cuestión. 7.2. En caso que los anexos sean correctos el trámite se lleva a Consejo de Facultad. 36 8. El Consejo de Facultad genera la minuta donde se consideran los puntos de discusión de la aceptación de cada trámite de preparador. 9. El Consejo de Facultad aprueba o no al trámite. 10. El Departamento de Recursos Humanos recibe la minuta original por parte del Con- sejo de Facultad y la archiva. 11. La Escuela correspondiente recibe la parte de la minuta que contiene a los preparadores. 12. El Departamento de Recursos Humanos genera la planilla de movimiento de perso- nal. 37 Figura 3.6: Diagrama de Flujo de los procesos administrativos de los preparadores. 38 Figura 3.7: Continuación del Diagrama de Flujo de los procesos administrativos de los preparadores. 39 3.5. Aplicaciones Colaborativas Trabajo Colaborativo: se define como procesos intencionales de un grupo para alcanzar objetivos específicos, más herramientas diseñadas para dar soporte y facilitar el trabajo.[6] En el marco de una organización, el trabajo en grupo con soporte tecnológico se presenta como un conjunto de estrategias que tienden a maximizar los resultados y mini- mizar la pérdida de tiempo e información, en beneficio de los objetivos organizacionales. El mayor desafío es lograr la motivación y participación activa del recurso humano. Además deben tenerse en cuenta los aspectos tecnológicos, económicos y las políticas de la organización. Trabajo colaborativo o groupware son palabras para designar el entorno en el cual todos los participantes del proyecto trabajan, colaboran y se ayudan para la realización del proyecto. El trabajo cooperativo mediado por el computador CSCW (Computer Supported Cooperative Work) fue utilizado por primera vez en 1984 por Irene Greif, del Massachus- sets Institute of Technology, y Paul Cashman, de la Digital Equipment Corporation. En ese año tuvo lugar en Estados Unidos el primer taller de CSCW, cuyo objetivo fue reunir a personas de diferentes disciplinas para analizar las características de comunicación y coor- dinación en grupos de trabajo [7]. Pero en la automatización de oficinas no había conocimiento necesario para enten- der cómo es que la gente trabaja en grupos y organizaciones y cómo la tecnología afecta su trabajo. Lo que trajo consigo un interés hacia el estudio de CSCW por parte de economis- tas, psicólogos sociales, antropólogos teóricos y organizacionales, educadores y muchos 40 otros que pudiesen aportar un mejor entendimiento de las actividades de grupo. A partir de todos estos antecedentes y definiciones M. Roseman lo definió como: CSCW es un campo encargado de la investigación, desarrollo de principios, herramientas y técnicas que sirvan de apoyo al trabajo cooperativo mediante el uso del computador, por parte de un grupo de trabajo previamente etablecido los cuales pueden mantener la comu- nicación, cooperación y coordinación gracias al uso de la combinación de las diferentes tecnologías de redes, hardware, software y aplicaciones que presten los servicios necesa- rios para conseguir un objetivo común que beneficie a todos sus miembros [8]. Las Aplicaciones Colaborativas deben estar orientadas a: Proveer un ambiente de colaboración, en el que realmente se perciba que el trabajo en grupo se lleva a cabo. Mantener la información en un solo sitio común para todos los miembros. Interactuar con otros usuarios, de forma escrita, voz o video. 3.5.1. Elementos de un Trabajo Colaborativo Los principales elementos de un Trabajo Colaborativo son: Objetivos: los mismos de la organización; particulares, bien definidos y mesurables Ambiente: controlado y cerrado. Motivación: la persona es convencida por la organización. Tipo de proceso: se formaliza el proceso grupal. 41 Aporte individual: conocimiento y experiencia personal al servicio de los intere- sares organizacionales. Pasos del proceso grupal: se deben definir claramente y previamente. Es necesario un control del proceso de aprendizaje por parte del profesorado. Reglas: rígidas, definidas previamente. Desarrollo personal: supeditado a los objetivos organizacionales. Productividad: es su fin. Preocupación: la experiencia en función de los resultados; la motivación es extrínse- ca. Software: contiene todo lo que se puede y no se puede hacer. 3.6. Aplicaciones usadas en el Sistema Actual En esta sección se describen el conjunto de aplicaciones que se usan en el sistema actual: 3.6.1. Microsoft Office Excel Es una de las herramientas de la empresa Microsoft, que consiste en una aplicación para manejar hojas de cálculos. Es utilizado normalmente en tareas financieras y contables [9]. El personal de Presupuesto, por ejemplo, utiliza esta herramienta para almacenar la información de los presupuestos de los preparadores de todas las escuelas; para buscar la información requerida en un instante de tiempo, como el presupuesto de la plaza de un preparador específico, se recurre al buscador de la aplicación que va a realizar la búsqueda 42 por el documento, y así se obtiene el resultado, cuando se ubica en el espacio del docu- mento que tiene la información requerida. Cabe destacar que la información se carga en la aplicación de forma manual por el personal encargado de realizar dicha tarea. 3.6.2. SicMov En el módulo de Recursos Humanos se utiliza la aplicación web “SicMov”, sus siglas significan Sistema de Control de Movimientos de Personal, la cual se encarga, entre otras tareas, de crear la planilla de movimiento de personal. Esta pasa junto con el oficio por el Departamento de Presupuesto, para verificación de los datos. Una vez aprobada allí y devuelta a Recursos Humanos es enviada al Decano para ser aprobada [2]. 3.7. Programación Extrema - XP Programación Extrema o eXtreme Programming (XP) es un enfoque de la inge- niería de software formulado por Kent Beck, autor del primer libro sobre la materia, Ex- treme Programming Explained: Embrace Change (1999)[10]. 3.7.1. Principios de XP Los principios originales de la programación extrema son: simplicidad, comuni- cación, retroalimentación (feedback) y coraje. Un quinto principio, respeto, fue añadido en la segunda edición de Extreme Programming Explained. Los cinco principios se detallan a continuación: Simplicidad: La simplicidad: es la base de la programación extrema. Se simplifica el diseño para agilizar el desarrollo y facilitar el mantenimiento. Un diseño complejo del código junto a sucesivas modificaciones por parte de diferentes desarrolladores hacen que 43 la complejidad aumente exponencialmente. Para mantener la simplicidad es nece- saria la refactorización del código, ésta es la manera de mantener el código simple a medida que crece. También se aplica la simplicidad en la documentación, de es- ta manera el código debe comentarse en su justa medida, intentando eso sí que el código esté autodocumentado. Para ello se deben elegir adecuadamente los nombres de las variables, métodos y clases. Los nombres largos no decrementan la eficiencia del código ni el tiempo de desarrollo gracias a las herramientas de autocompletado y refactorización que existen actualmente. Aplicando la simplicidad junto con la au- toría colectiva del código y la programación por parejas se asegura que cuanto más grande se haga el proyecto, todo el equipo conocerá más y mejor el sistema completo. Comunicación: La comunicación se realiza de diferentes formas. Para los progra- madores el código comunica mejor cuanto más simple sea. Si el código es complejo hay que esforzarse para hacerlo inteligible. El código autodocumentado es más fiable que los comentarios ya que éstos últimos pronto quedan desfasados con el código a medida que es modificado. Debe comentarse sólo aquello que no va a variar, por ejemplo el objetivo de una clase o la funcionalidad de un método. Las pruebas uni- tarias son otra forma de comunicación ya que describen el diseño de las clases y los métodos al mostrar ejemplos concretos de como utilizar su funcionalidad. Los programadores se comunican constantemente gracias a la programación por parejas. La comunicación con el cliente es fluida ya que el cliente forma parte del equipo de desarrollo. El cliente decide que características tienen prioridad y siempre debe estar disponible para solucionar dudas. Retroalimentación (feedback): Al estar el cliente integrado en el proyecto, su opinión sobre el estado del proyecto se conoce en tiempo real. Al realizarse ciclos muy cortos tras los cuales se muestran resultados, se minimiza el tener que rehacer partes que no cumplen con los requisitos y ayuda a los programadores a centrarse en lo que es 44 más importante. Considérense los problemas que derivan de tener ciclos muy largos. Meses de trabajo pueden tirarse por la borda debido a cambios en los criterios del cliente o malentendidos por parte del equipo de desarrollo. El código también es una fuente de retroalimentación gracias a las herramientas de desarrollo. Por ejemplo, las pruebas unitarias informan sobre el estado de salud del código. Ejecutar las pruebas unitarias frecuentemente permite descubrir fallos debidos a cambios recientes en el código. Coraje o valentía: Los puntos anteriores parecen tener sentido común, entonces, ¿por qué coraje?. Para los gerentes la programación en parejas puede ser difícil de aceptar, porque les parece como si la productividad se fuese a reducir a la mitad ya que solo la mitad de los programadores está escribiendo código. Hay que ser valiente para confiar en que la programación por parejas beneficia la calidad del código sin repercutir negativamente en la productividad. La simplicidad es uno de los principios más difíciles de adoptar. Se requiere coraje para implementar las características que el cliente quiere ahora sin caer en la tentación de optar por un enfoque más flexible que permita futuras modificaciones. No se debe emprender el desarrollo de grandes marcos de trabajo (frameworks) mientra el cliente espera. En ese tiempo el cliente no recibe noticias sobre los avances del proyecto y el equipo de desarrollo no recibe retroalimentación para saber si va en la dirección correcta. La forma de construir marcos de trabajo es mediante la refactorización del código en sucesivas aproxima- ciones. Respeto: El respeto se manifiesta de varias formas. Los miembros del equipo se res- petan los unos a otros, porque los programadores no pueden realizar cambios que hacen que las pruebas existentes fallen o que demore el trabajo de sus compañeros. Los miembros se respetan su trabajo porque siempre están luchando por la alta ca- lidad en el producto y buscando el diseño óptimo o más eficiente para la solución a 45 través de la refactorización del código. 3.7.2. Características Fundamentales del Método XP Las principales características del Método XP [10] son: Desarrollo iterativo e incremental: pequeñas mejoras, unas tras otras. Pruebas unitarias continuas: frecuentemente repetidas y automatizadas, incluyen- do pruebas de regresión. Se aconseja escribir el código de la prueba antes de la codifi- cación. Como por ejemplo, las herramientas de prueba JUnit orientada a Java, DUnit orientada a Delphi y NUnit para la plataforma.NET. Estas dos últimas inspiradas en JUnit. Programación en parejas: se recomienda que las tareas de desarrollo se lleven a cabo por dos personas en un mismo puesto. Se supone que la mayor calidad del códi- go escrito de esta manera es más importante que la posible pérdida de productividad inmediata. Frecuente integración: del equipo de programación con el cliente o usuario. Se recomienda que un representante del cliente trabaje junto al equipo de desarrollo. Corrección: de todos los errores antes de añadir nueva funcionalidad. Hacer entregas frecuentes. Refactorización del código: reescribir ciertas partes del código para aumentar su legibilidad y mantenibilidad pero sin modificar su comportamiento. Las pruebas han de garantizar que en la refactorización no se ha introducido ningún fallo. Propiedad del código compartida: en vez de dividir la responsabilidad en el de- sarrollo de cada módulo en grupos de trabajo distintos, este método promueve el 46 que todo el personal pueda corregir y extender cualquier parte del proyecto. Las frecuentes pruebas de regresión garantizan que los posibles errores serán detectados. Simplicidad en el código: es la mejor manera de que las cosas funcionen. Cuando todo funcione se podrá añadir funcionalidad si es necesario. La programación ex- trema apuesta que es más sencillo hacer algo simple y tener un poco de trabajo extra para cambiarlo si se requiere, que realizar algo complicado y quizás nunca utilizarlo. La simplicidad y la comunicación:son extraordinariamente complementarias. Con más comunicación resulta más fácil identificar qué se debe y qué no se debe hacer. Cuanto más simple es el sistema, menos tendrá que comunicar sobre éste, lo que lleva a una comunicación más completa, especialmente si se puede reducir el equipo de programadores. 3.8. Definiciones de Tecnologías A continuación se presenta la explicación de las diferentes tecnologías utilizadas para la realización de este trabajo. 3.8.1. Ruby Ruby es un lenguaje de programación interpretado, reflexivo y orientado a objetos, creado por el programador japonés Yukihiro “Matz” Matsumoto, quien comenzó a trabajar en Ruby en 1993, y lo presentó públicamente en 1995. Combina una sintaxis inspirada en Python, Perl con características de programación orientada a objetos similares a Smalltalk. Comparte también funcionalidad con otros lenguajes de programación como Lisp, Lua, Dylan y CLU. Ruby es un lenguaje de programación interpretado en una sola pasada y su implementación oficial es distribuida bajo una licencia de software libre [11]. 47 3.8.2. Ruby on Rails Es un entorno de desarrollo web de código abierto que está optimizado para sa- tisfacción de los programadores y de la productividad. Permite escribir un buen código favoreciendo la convención antes que la configuración [11]. Es la nueva generación en desarrollo de aplicaciones Web, y está creando una revolución en la industria del desarrollo de software de web. Principios de Ruby on Rails Ruby on Rails, se basa en dos principios fundamentales “No te repitas” y “Conven- ción sobre configuración”. No te repitas (Don’t Repeat Yourself, DRY): se refiere a que las definiciones deberían hacerse sólo una vez, pues los componentes están integrados de manera que no hace falta establecer puentes entre ellos. Cada pieza de econocimiento en un sistema, deberá ser expresada en un sólo lugar. Este principio se basa en escribir menos líneas de código para implementar la aplicación. Si el código es pequeño quiere decir que el desarrollo es más rápido y con menos errores, lo que hará que el codigo sea más facil de entender, mantener y mejorar. Por ejemplo, en Active Record, las definiciones de las clases no necesitan especificar los nombres de las columnas; Ruby puede averiguarlos a partir de la propia base de datos, de forma que definirlos tanto en el código como en el programa sería redundante. Convención sobre configuración (Convention Over Configuration): significa que el programador sólo necesita definir aquella configuración que no es convencional. En lugar de archivos de configuración, utilizamos una serie de convenciones simples que permiten averiguarlo todo. 48 3.8.3. RubyGems Es un gestor de paquetes que provee de una aplicación llamada “gem” que nos va a permitir tanto instalar, desinstalar y consultar “gemas” o programas listos para emplearlos en el desarrollo de software [12], es muy fácil, y rápido de usar, primero se descarga el pa- quete rubygems de SourceForge ya sea manualmente o por cónsola y se procede a ejecutar el setup.rb, una vez instalado se pueden buscar las gemas de la siguiente manera: 1 gem search dns --remote O también se puede instalar las gemas: 1 gem install <nombre de la gema> De la misma manera para desinstalar: 1 gem uninstall <nombre de la gema> Características de RubyGems Posee un servidor para la distribución de los paquetes Fácil de instalar y desinstalar los paquetes con la posibilidad de resolver las depen- dencias. Gestión y control local de paquetes. Consulta, búsqueda tanto local como remota de los paquetes. Múltiples versiones de apoyo para los paquetes instalados. 49 Interfaz basada en web para ver las gemas o paquetes instalados. Interfaz fácil de usar para la construcción de gemas. 3.9. Patron de Diseño MVC (Modelo - Vista - Controlador) El patrón MVC está compuesto de tres módulos diferentes, llamados Modelo, Vista y Controlador. El Modelo está compuesto por el estado y los datos que la aplicación repre- senta. La Vista es la interfaz de usuario que muestra información sobre el modelo y que representa el dispositivo de entrada que se usa para modificarlo. Finalmente, el Contro- lador es lo que une a los dos anteriores. Hace corresponder las peticiones que llegan del cliente con las acciones correspondientes y dirige las respuestas a las vistas adecuadas [13]. Figura 3.8: Patrón de Diseño MVC [14]. El Controlador interpreta las acciones del usuario, accediendo a las operaciones de negocio de la aplicación y modificando a partir de sus resultados el estado del modelo y la navegación entre vistas. El Controlador recibe todas las peticiones realizadas a la apli- cación. Cada petición se identifica mediante un parámetro. En base a esta identificación, el 50 Controlador decide qué objeto u objetos de negocio (Modelo) debe ejecutar para resolver la petición. Tras la ejecución de los objetos de negocio, y en función del resultado devuelto por estos, el Controlador determina qué vista se usará para visualizar el resultado, generan- do una redirección que concluirá con la generación del código HTML de la página. El Modelo es la lógica del negocio, representa las operaciones que se efectúan sobre los datos que se reciben o las consultas a base de datos que se hacen, su objetivo es preparar los datos para que la vista sólo se tenga que preocupar de mostrarlos, así si hay que realizar cambios en la estructura de la base de datos o cambiar las operaciones que se hacen con los datos lo tendríamos que hacer sólo en el modelo, evitando que un cambio se tenga que realizar en todas las vistas que utilicen unos determinados datos. La Vista presenta el modelo en un formato adecuado para interactuar, usualmente un elemento de interfaz de usuario. En este componente se puede detectar que tipo de cliente esta accediendo a los datos para personalizar su presentación dando lugar a versiones en distintos idiomas o bien a versiones para distintos canales como PDAs, SMS, WAP, etc [15]. 3.9.1. Utilización del Patrón MVC El patrón de diseño MVC se utiliza para separar la información, la salida y el proce- samiento de los datos de la aplicación. Uno de los motivos de peso para utilizar el patrón MVC es la necesidad de separar los datos y la lógica de la interfaz de usuario. Al separar estas partes del proceso, es posi- ble disponer de varias interfaces gráficas distintas que utilicen el mismo modelo y datos sin formato. Al separar los datos del resto de la aplicación se reduce significativamente 51 el tiempo de desarrollo, de prueba e incluso de actualización de más de una interfaz del cliente. De forma similar, añadir nuevos procesadores principales para la misma aplicación es más sencillo si se dispone de un modelo existente [16]. 3.9.2. Beneficios La aplicación del modelo-vista-controlador para del desarrollo de aplicaciones Web tiene varios beneficios[17]: Menor acoplamiento. Desacopla las vistas de los modelos y se desacopla los modelos de la forma en que se muestran y se capturan los datos. Mayor cohesión. Cada elemento del patrón está altamente especializado en su tarea (la vista en mostrar datos al usuario, el controlador en las entradas y el modelo en su objetivo de negocio). Las vistas proveen mayor flexibilidad y agilidad. Se puede crear múltiples vistas de un modelo y se pueden crear, añadir, modificar y eliminar nuevas vistas dinámi- camente. Las vistas pueden anidarse. Se puede cambiar el modo en que una vista responde al usuario sin cambiar su representación visual. Se pueden sincronizar las vistas. Mayor facilidad para el desarrollo de clientes ricos en múltiples dispositivos y canales. Es posible crear una vista para cada dispositivo que puede variar según sus capaci- dades. Además de que se puede tener una vista para el entorno Web y otra para aplicaciones de escritorio. Más claridad en el diseño. Facilita el mantenimiento de las aplicaciones. 52 3.10. Servicios Web La W3C define “Servicio web” como un sistema de software diseñado para permitir interoperatibilidad máquina a máquina en una red. En general, los servicios web son sólo APIs Web que pueden ser accedidas en una red, como internet, y ejecutadas en un sistema de hosting remoto [18]. En términos sencillos, un servicio web es cualquier sistema de software diseñado para soportar interacción máquina a máquina sobre una red y utilizando protocolos de la web. Esta amplia definición abarca múltiples y diferentes sistemas, pero en general “ser- vicio web” suele referir a clientes y servidores que se comunican usando mensajes XML que siguen el estándar SOAP o mediente REST y en este trabajo se utilizó el estándar SOAP. Los servicios web que se basan en XML permiten que las aplicaciones compartan información y que además invoquen funciones de otras aplicaciones independientemente de cómo se hayan creado dichas aplicaciones e independientemente del sistemas operativo o plataforma en que se ejecuten y de los dispositivos utilizados en el acceso. Los servicios Web XML, aunque sean independientes entre sí, pueden vincularse para realizar una tarea [18]. 3.10.1. Protocolos de Servicios Web SOA se puede construir sobre servicios Web estándares (por ejemplo SOAP) los cuales gozan de gran aceptación industrial. Estos estándares también proveen gran intero- peratividad y protección contra vendedores de software propietario. Sin embargo es posible 53 implementar SOA utilizando cualquier tecnología basada en servicios. Las tecnologías relevantes para SOA son los siguientes: XML (Extensible Markup Language): Un lenguaje de marcado para describir datos en mensajes en formato de documento. HTTP (Hypertext Transfer Protocol) o HTTPS (Hypertext Transfer Protocol Secure): Protocolo para solicitar o responder mensajes entre clientes y servicios. Protocolo estándar Web. SOAP (Simple Object Access Protocol): Protocolo para intercambiar mensajes basados en XML en una red de computadores, usualmente usando HTTP. WSDL (Web Services Description Language) o Lenguaje de descripción de ser- vicios Web: Servicio basado en XML que describe las interfaces públicas, protocolos y formato de mensajes, requeridos para interactuar con un servicio Web. UDDI (Universal Description, Discovery and Integration) o Descripción, des- cubrimiento e Integración Universal: Registro basado en XML para publicar de- scripciones de servicios (WSDL) y permitir su descubrimiento. 3.11. Base de Datos del Sistema actual La base de datos del sistema actual en funcionamiento, consta de una serie de tablas que no están relacionadas por claves foráneas, debido a que esta diseñada en hojas de Excel de las cuales presentamos una vista en la Figura 3.9: 54 3.12. Estructura del Sistema Actual Los procesos administrativos de los preparadores se generan en la respectiva escuela del preparador (Computación, Química, Física, Matemática, Biología o Geoquímica), allí pasa por una cantidad de pasos para ser aprobado, una vez que el trámite sale de la escuela va al departamento de Presupuesto en donde es revisado, luego es mandado al Departa- mento de Recursos Humanos para otras verificaciones, de allí el trámite es discutido en Consejo de Facultad y son retornados al departamento de Recursos Humanos, si el trámite es aprobado por el Consejo de Facultad debe ser enviado para que sea firmado por el decano y una vez aprobado allí pasa nuevamente al Departamento de Recursos Humanos en donde se procede a pasar la información del trámite a un sistema web llamado Sicmov, el cual se encarga entre otras actividades de generar la planilla de movimiento de dicho trámite. A continuación se presenta en la Figura 3.10 un gráfico representativo de los agentes de la Facultad que están involucrados en el proceso mencionado: 55 Figura 3.9: Vista de los Presupuestos almacenados en una Hoja de Excel. 56 Figura 3.10: Dependencias que utilizan el sistema actual. Capítulo 4 Metodología de Desarrollo 4.1. Análisis de Requerimientos y Diagnóstico 4.1.1. Requerimientos Generales Esta plataforma de software colaborativo debe manejar el ingreso de nuevos prepa- radores, el retiro de los mismos, y en el caso de ser reiterado un preparador en su cargo, quedará con la misma cantidad de horas, aumentará o disminuirá las horas laborales del preparador. Se debe registrar las fechas en que se realizan todas las modificaciones de los oficios y las planillas de movimiento de personal de los preparadores para llevar el control y seguimiento de estos procesos a lo largo del flujo de trabajo. Enviar correos a los entes nece- sarios de algunos procesos específicos del sistema. Adicionalmente, esta plataforma debe poseer todas las herramientas orientadas a integrar y desarrollar módulos que se adecuen a los requerimientos de las escuelas o departamentos de la Facultad de Ciencias, siguiendo unos lineamientos de interfaz y desarrollo de software. 4.1.2. Requerimientos Funcionales Los requerimientos funcionales de la plataforma están determinados por los com- ponentes o módulos que la integrarán: 57 58 1. Diseñar un módulo de recursos humanos donde se podrán gestionar los oficios y las planillas de movimiento de personal de los preparadores para luego enviar a otra aplicación el producto final de dichas planillas. 2. Crear un módulo de planificación y presupuesto donde se gestionen los registros internos de presupuesto y administren los oficios de los preparadores de la Facultad de Ciencias. 3. Crear un módulo de consejo de facultad que permita administrar oficios y generar dos tipos de documentos: el primero es el resumen de los oficios a tratar en la reunión y el otro es el resumen de los trámites de personal aprobados o desaprobados en el consejo de facultad. 4. Generar la interacción entre los distintos módulos del sistema que pertenecen al flujo de trabajo. 5. Manejar el ingreso de nuevos preparadores, el retiro de los mismos, y en el caso de ser ratificado un preparador en su cargo, quedará con la misma cantidad de horas, aumentará o disminuirá las horas laborales del preparador. 6. Registrar en el sistema las fechas en que se realizan todas las operaciones de los preparadores, con el fin de que se puedan verificar los tiempos en que se tardan los trámites solicitados en completar todo el proceso. 7. Realizar las respectivas validaciones de todos los documentos que se manejan en el sistema. 8. Controlar un constante flujo de trámites que se envían de una entidad a otra de forma digital a través del sistema Web. 59 4.1.3. Requerimientos No Funcionales Las tecnologías seleccionadas para la implementación del sistema permitirán re- querimientos adicionales para darle valor agregado al producto final. La idea es ofrecer un sistema que pueda ser de fácil uso, robusto y escalable. Para esto se pueden notar los siguientes requerimientos no funcionales: 1. Proporcionar soporte multi-plataforma. 2. Ofrecer un sistema Web soportado por múltiples navegadores. 3. Propiciar los mecanismos adecuados para que el sistema pueda ser escalable. 4. Brindar una interfaz usable para el cliente final del sistema. 4.1.4. Casos de Uso El diagrama de Caso de Uso es presentado en las figuras 4.1 y 4.2, usado principal- mente para reflejar la forma en que los actores interactuán con el sistema, conociendo así un poco de las funcionalidades del sistema de acuerdo con el respectivo rol que interpreta cada actor. 60 Figura 4.1: Caso de Uso - Nivel 0. 61 Figura 4.2: Caso de Uso - Nivel 1. 62 Actores Identificados Los actores que de alguna manera tendrán una interacción con el sistema o que simplemente están dentro del flujo normal de actividades para gestionar los procesos ad- ministrativos de los preparadores, están a continuación: Departamento de Presupuesto. Recursos Humanos. Consejo de Facultad. Descripción de los Casos de Uso A continuación la especificación de los casos de uso descritos anteriormente: 1. Primer Caso de Uso Nombre: Gestionar Oficios. Descripción:Permite consultar, visualizar, buscar y cambiar el estado de los trámites de personal de los preparadores de la Facultad de Ciencias . Actores: Consejo de Facultad, Recursos Humanos y Presupuesto. Precondición: Haberse autenticado en el sistema. Flujo Normal: 1. El actor se dirige al menú de Oficios. 2. Selecciona la opción que desea realizar entre consultar y buscar algún oficio en específico, y en el detalle del oficio si se desea y se puede cambiatr el estado del trámite se realiza, y si se devuelve un oficio llenar un campo llamado memo explicando porque se devuelve el oficio. 63 3. Consejo de Facultad. Flujo Alternativo: 1. Si el actor devuelve el oficio sin llenar el campo memo, el sistema redirecciona a la misma página indicandole al usuario que debe llenar obligatoriamente ese campo. Postcondición:Ninguna. 2. Segundo Caso de Uso Nombre: 2. Generar Planilla de Movimiento de Personal. Descripción:Genera la Planilla de Movimiento de Personal de un preparador a partir de un oficio aceptado por todos los actores correspondientes. Actores: Recursos Humanos. Precondición: 1. Haberse autenticado en el sistema. 2. Que el oficio de dicha planilla pase por todas las entidades correspondientes para su respectiva aprobación. Flujo Normal: 1. El actor se dirige al menú de oficios aceptados, y selecciona una planilla que no haya sido enviada aún a la aplicación de SicMov, la completa y la envia o el actor se direge al menu de planillas pendientes, elije una planilla, completa la información en caso de ser necesario y la envía a la aplicación externa SicMov. Flujo Alternativo: 64 1. El sistema comprueba que no exista ningún campo vacío en el formulario, si existen campos vacíos, se muestra un mensaje con el error para darle oportu- nidad al usuario de llenar estos campos. Postcondición:Ninguna. 3. Tercer Caso de Uso Nombre: 3. Administrar los registros de presupuesto. Descripción:Se pueden crear, modificar, eliminar y consultar los registros de pre- supuestos que se encuentran estrechamente vinculados con el oficio de un preparador en especial. Actores: Presupesto. Precondición: 1. Haberse autenticado en el sistema. Flujo Normal: 1. Ingresar al menú de los oficios y presionando el link de presupuestos asociados o buscando un presupuesto en específico. Flujo Alternativo: 1. El sistema comprueba que no exista ningún campo vacío en el formulario al agregar algún registro de presupuesto, si existen campos vacíos, se muestra un mensaje con el error para darle oportunidad al usuario de llenar estos campos. Postcondición:Ninguna. 4. Cuarto Caso de Uso 65 Nombre: 4. Generar documento antes de reunión de consejo de facultad. Descripción:Se genera un documento en formato pdf con el resumen de los trámites de los preparadores que están en espera por la aprobación del consejo de facultad. Actores: Consejo de facultad. Precondición: 1. Haberse autenticado en el sistema. 2. Que los oficios se encuentren en estado .Enviado a Consejo de Facultad". Flujo Normal: 1. Ingresar al menú de los oficios y seleccionar los oficios que se desean discutir en la reunion de consejo de facultad. 2. Presionar el botón de generar pdf. Flujo Alternativo:Ninguno Postcondición:Ninguna. 5. Quinto Caso de Uso Nombre: 5. Generar documento después de reunión de consejo de facultad. Descripción:Se genera un documento en formato pdf con el resumen del resultado de los trámites de los preparadores que fueron aprobados y desaprobados en la reunión. Actores: Consejo de facultad. Precondición: 1. Haberse autenticado en el sistema. 66 2. Que los oficios hayan pasado por el estado de “Enviado a Consejo de Faculta”. 3. Que en el sistema se encuentren cargados los oficios que fueron discutidos". Flujo Normal: 1. Ingresar al menú de los oficios y seleccionar los oficios que se desean discutir en la reunion de consejo de facultad. 2. Presionar el botón de generar pdf. Flujo Alternativo:Ninguno Postcondición:Ninguna. 4.2. Tipo de Investigación La investigación realizada es de tipo estudio exploratorio y productivo, en donde se aplicaron técnicas de conocimiento para realizar un sistema web con la finalidad de mejorar la gestión de los procesos administrativos de los preparadores de la Facultad de Ciencias, en esta investigación se exploraron todas las tareas administrativas y de control que se realizan en el Departamento de Presupuesto y de Recursos Humanos, también se estudiaron todos los documentos que se manejan durante el proceso administrativo del trámite de personal, incluyendo la elaboración de diagramas que reflejen de forma clara el comportamiento y estados en diferentes circuntancias del sistema actual y del sistema web que es el motivo de este trabajo. Para el desarrollo de la aplicación se escogió la metodología de desarrollo de soft- ware Programación Extrema (Extreme Programing - XP), la cual es muy óptima y práctica para llevar a cabo proyectos para grupos pequeños. 67 4.3. Instrumentos de Recolección de Información Con el fin de adquirir conocimientos acerca de la administración de preparadores y la forma en que deben manejarse todos los procesos que requiere, fue recopilada infor- mación formal e informal, delimitando los alcances de este trabajo y abarcando los puntos más importantes, que ayuden a establecer con claridad las metas que se quieren lograr con dicha investigación, también fue necesario el uso de la red informática como fuente de información relacionada con el tema. Además para conocer los procesos administrativos que se efectúan específicamente en la Facultad de Ciencias de la Universidad Central de Venezuela, la transmisión oral de parte de los empleados de las oficinas encargadas de las diferentes labores relacionadas a estos procesos, fue de vital importancia para considerar los puntos débiles y fuertes del sistema actual, el flujo de trabajo y la forma en que se puede diseñar la mejora del sistema de administración de los preparadores. Para el levantamiento de información se realizaron visitas a las oficinas de recursos humanos así como también, al personal administrativo y al personal de cada escuela de la Facultad de Ciencias, lo cual permitió conocer como se realiza el proceso de gestión de la administración del personal preparador; gracias a esto y a la colaboración del personal, se identificaron las funcionalidades más importantes que deberán ser consideradas a la hora de desarrollar la nueva aplicación. 68 4.4. Diagnóstico de Necesidades 4.4.1. Recursos Para que el sistema se encuentre funcional se necesita un servidor Web, la tec- nología que se va a usar es Ruby on Rails debido a que ofrece al desarrollador la facilidad de programación a un lenguaje de alto nivel, además se necesita un espacio físico para este servidor, por lo tanto el lugar más propicio para llevar a cabo esto es en el Centro de Com- putación de la Facultad de Ciencias, en donde ya están servidiores web y en cualquiera de ellos se puede alojar este sistema. Es imprescindible que la base de datos esté terminada y operativa para que el sis- tema esté en producción. A través de los servicios Web se realizará la comunicación con la base de datos que está integrada a este sistema. Para este prototipo se simuló dicha co- municación con la elaboración de los servicios web que requiere el sistema a través de una aplicacion hecha en Java para que responda a las peticiones del sistema, pero llegado el momento de que la base de datos y sus servicios estén realizados se podrá usar el sistema con los datos reales. 4.5. Base de Datos En este sistema se utilizarán bases de datos sociodemográficas y servicios Web, la base de datos sociodemográfica es un sistema formado por un conjunto de datos almace- nados en discos que permiten el acceso directo a ellos y un conjunto de programas que manipulan esos datos, dichos datos contienen la información básica de un preparador de manera íntegra, tales como: Nombre, Apellido y Cédula, los datos estrictamente académi- cos del preparador se encuentran almacenados en la base de datos del sistema CONEST 69 (Sistema de la División de Control de Estudios de la Facultad de Ciencias de la U.C.V., [19]), que contiene módulos para estudiantes, docentes y administradores y se encarga de toda la gestión de los asuntos académicos de la Facultad de forma virtual, de allí se extraen los datos de los preparadores por medio de un Servicio Web para intercambiar información entre las dos aplicaciones sin importar el lenguaje en el que estén desarrolladas. Así se complementaría toda la información que se necesita del preparador sin necesidad de repetir los datos a través de una base de datos local al sistema, asegurando la integridad y la poca redundancia en los datos. En la figura 4.3, se puede observar una arquitectura general de los componentes de Base de Datos que interactúan en la aplicación a implementar. 70 Figura 4.3: Arquitectura de los componentes de base de Datos. 4.6. Arquitectura de Ruby on Rails adaptada a SystemPAP La Arquitectura a utilizar para el desarrollo de esta aplicación es Modelo-Vista- Controlador(MVC) como se mencionó en las metodologías a utilizar, además la arquitec- tura de Ruby on Rails es completamente basado en MVC, lo que obliga a los desarrollado- 71 res a trabajar de una manera mucho más organizada, separando la lógica en los modelos, las vistas y los controladores. En la figura 4.4 se refleja el cuerpo del Trabajo Especial de Grado siguiendo el patrón MVC, en el cual se encuentran una serie de directorios con funcionalidades específicas. Figura 4.4: Arquitectura MVC en Ruby on Rails. 72 4.6.1. Descripción de algunos directorios del proyecto Cada directorio del proyecto cumple una función. A continuación se describen brevemente algunos [20]: app: almacena los componentes de la aplicación: vistas y helpers, controladores y modelos. config: contiene la configuración de la aplicación: configuración de la base de datos (database.yml), estructura del entorno de Rails (environment.rb) y el enrutador de peticiones Web (routes.rb). public: es un servidor Web que contiene los archivos con código de funciones es- critas en JavaScript, imágenes, hojas de estilo y códigos HTML común para las in- terfaces. script: este directorio contiene scripts que inician y administran las diversas herra- mientas que se pueden utilizar en Rails; por ejemplo, se tienen los scripts que generan código (generate) e inician un servidor Web (server). 73 4.7. Estructura del Nuevo Sistema Figura 4.5: Gráfico con la estructura del nuevo sistema. 74 4.8. Desarrollo Las siguientes iteraciones están delimitadas por un lapso de tiempo en el cual el equipo de trabajo desarrolló la actividad descrita en dicha iteración: 4.8.1. Iteración 0: Del 02 - Marzo - 2.009 al 13 - Marzo - 2.009 En la primera etapa de este trabajo se hicieron reuniones con los Departamentos de Recursos Humanos, y Presupuesto, para definir las funcionalidades que tendría el sistema, conocer los datos que se manejan para la realización de los diferentes módulos de la apli- cación, se recolectaron documentos tanto físicos como digitales que contienen información acerca de los preparadores, sean tablas, oficios, planillas, etc. Además se elaboró el flujo de trabajo que resume las actividades realizadas por los módulos mencionados anteriormente. El equipo de trabajo estudió los pros y contras de las diferentes tecnologías en que se puede desarrollar el sistema, y procedió a escoger la tecnología a usar y el entorno que se utilizaría para trabajar en la aplicación. Resultado: Se escogió la tecnología de Ruby on Rails, la versión de Ruby 1.8.6, Rails 2.2.2, RubyGems 1.3.3 y Netbeans 6.5.1 como herramienta de desarrollo, tanto para la aplicación Web en Ruby, como para el servicio web en Java. También se eligió el editor de texto Notepad++ para la edición de los XML necesarios, Macromedia Dreamweaver 8 para el diseño de las interfaces, Macromedia Fireworks MX 2004 para la edición de imágenes y Flash 8 para las animaciones. 75 4.8.2. Iteración 1: Del 16 - Marzo - 2.009 al 27 - Marzo - 2.009 Una vez definida la tecnología que se usaría para el desarrollo del sistema, se lleva a cabo la instalación de la misma en las estaciones de trabajo, lo que incluye la instalación de: Ruby versión 1.8.6 (i386-mswin32). Rails versión 2.2.2. RubyGems versión 1.3.3. Netbeans 6.5.1. Notepad++. Macromedia Dreamweaver 8. Macromedia Fireworks MX 2004. Flash 8. Resultado: Se obtuvo dos estaciones de trabajo con todo lo requerido para el de- sarrollo del sistema. 4.8.3. Iteración 2: Del 30 - Marzo - 2.009 al 10 - Abril - 2.009 En resumen para esta etapa se planificó como meta definir la interfaz a utilizar. Se acordó que las interfaces serían estandarizadas con el diseño que tiene el sitio web de 76 la Escuela de Computación, se creó un proyecto en Ruby y a éste se le colocó el diseño acordado, junto con su código Javascript para las funciones del menú, entonces durante este período se adaptó las necesidades del sistema a dicho diseño, personalizándolo. Se eligió el nombre systemPAP para el sitema por las siglas Sistema para la gestión de Procesos Administrativos de Preparadores. Se elaboró un logo para el banner del sistema, también se agregó al banner una imagen en flash para animarlo y sustituir las imágenes de la Escuela de Computación, además se eliminaron secciones de dicha interfaz que no son necesarias para el sistema. Así se logro tener una base en donde poder elaborar la aplicación. 4.8.4. Iteración 3: Del 13 - Abril - 2.009 al 24 - Abril - 2.009 Se crearon las vistas fundamentales que especifican las funciones principales de los módulos de Presupuesto y Recursos Humanos, para ello se utilizó toda la información recolectada en la Iteración 0, estas vistas que se crearon son: Para el Departamento de Planificación de Presupuesto: Plantilla para el Departamento de Presupuesto. Principal de Presupuesto. En la Figura 4.7 se puede observar la vista principal del Departamento de Presupuesto. Presupuestos. Detalle de Presupuesto. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. 77 Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. Buscar Oficio. Buscar Presupuesto. Para el Departamento de Recursos Humanos: Plantilla para el Departamento de Recursos Humanos. Principal de Recursos Humanos. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio. Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Buscar Oficio. Planillas Pendientes. Planillas Aceptadas. 78 4.8.5. Iteración 4: Del 27 - Abril - 2.009 al 08 - Mayo - 2.009 Se definió para esta etapa completar las interfaces que se requerían en el sistema, estas son: Para el Módulo del Consejo de Facultad: Plantilla para el Consejo de Facultad. Esta vista se puede observar en la Figura 4.15. Principal de Consejo de Facultad. Oficios Pendientes. En la Figura 4.8 se presenta el resultado de la elaboración de esta vista. Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio. Oficios Aceptados. En la Figura 4.9 se presenta el resultado de la elaboración de esta vista. Oficios Rechazados. En la Figura 4.10 se presenta el resultado de la elaboración de esta vista. Buscar Oficio. Para todos los usuarios incluyendo los que no estén autenticados en el sistema: Plantilla para Visitante. Principal de Visitante. Contáctanos. Noticias. 79 4.8.6. Iteración 5: Del 11 - Mayo - 2.009 al 22 - Mayo - 2.009 La principal necesidad de los usuarios que se implementó en el sistema es la de autenticación para separar y diferenciar a los usuarios y las actividades que pueden realizar cada uno dentro del sistema. En la Figura 4.6 se puede apreciar el resultado de la vista de este módulo. Para ello se creó un servicio web para verificar que los datos que introduzca el usuario concuerden con los del usuario en la base de datos, también se creó una vista que contenga el formulario correspondiente a los datos que se solicitan para identificar al usuario, estos son cédula, login y password; mientras el usuario esté trabajando en el sis- tema se mantendrán sus datos en sesión, se puede ver el código del uso de las sesiones en el Apéndice A, se usaron en primer lugar para controlar que el usuario no pueda acceder a sitios del sistema que no le estén permitidos sino que se mantenga en la parte que le corres- ponde, y la segunda razón es para que agentes externos tampoco puedan acceder al sistema desde afuera, así mantener los datos seguros, y resguardados de saboteos o modificaciones no deseadas. Para la realización de esta iteración fue necesaria la instalación de la gema que se presenta a continuación: 1 gem install datanoise-actionwebservice --source http://gems.github.com Uso: esta gema facilita el uso de los servicios web. 80 4.8.7. Iteración 6: Del 25 - Mayo - 2.009 al 05 - Junio - 2.009 Para completar las funcionalidades de los módulos se decidió agregar en esta i- teración las funcionalidades de modificar presupuestos, modificar planilla de movimiento, opción de aceptar o devolver el trámite de personal, en caso de que sea la opción de devolver el trámite, se validó que se especificara la razón por la cual se hace la devolución a través de un campo de formulario llamado memo. Las funcionalidades de los formularios que se agregaron en esta iteración son: Agregar Presupuesto Nuevo (Presupuesto). Aceptar o Rechazar Oficios (Consejo de Facultad). Modificar Presupuesto (Presupuesto). Modificar Planilla (Recursos Humanos). En la Figura 4.13 se puede observar el re- sultado de esta vista. Como algunos de estos formularios contienen el campo fecha, fue necesaria la ins- talación de la siguiente gema para el calendario: 1 gem install calendar\_date\_select 4.8.8. Iteración 7: Del 08 - Junio - 2.009 al 19 - Junio - 2.009 81 Se elaboró una aplicación Java para implementar las funciones que respondan a las llamadas de los servicios web, este programa se diseñó únicamente para tener las funciones de los servicios web que se llamarán desde los controladores. Se hicieron pruebas de co- municación entre el sistema y esta aplicación, para realizar la prueba se realizó el servicio web de autenticación tanto el XML con la validación de los diferentes usuarios permiti- dos en el sistema, como la llamada al servicio desde el controlador “login” y sus debidas validaciones por medio del método hash para analizar sintácticamente el XML, como se puede observar en el fragmento de código que está en el Apéndice B, este es un método para analizar sintácticamente XML simples, es decir, con pocos registros. 4.8.9. Iteración 8: Del 22 - Junio - 2.009 al 03 - Julio - 2.009 Al ser satisfactorio el resultado de la comunicación con el servicio web se hicieron pruebas de comunicación con un XML más complejo, para analizar sintácticamente di- cho XML se necesitó utilizar el método analizador sintáctico REXML, para que se pueda obtener desde el controlador los datos contenidos en el XML que envía el servicio web como respuesta. Además en esta iteración se agregó el calendario a las vistas y a los controladores para que se pudiera tener el calendario completo desplegado en la vista y además usarlo en los formularios, como ya se tenía la gema instalada lo que se hizo fue usarla para todas las partes que se omitieron antes, esto es necesario para evitar errores de tipeo de la fecha, por el formato utilizado. 82 4.8.10. Iteración 9: Del 06 - Julio - 2.009 al 17 - Julio - 2.009 Para esta etapa se elaboraron tanto los XML que hacen falta para mostrar el fun- cionamiento del sistema, como el parseo correspondiente en el controlador que lo usa. Por ejemplo en el Apéndice C se presenta el modo en que se analiza sintácticamente con el método REXML el XML del detalle de un oficio, solicitado en el módulo de Recursos Hu- manos, el método que se llama es “oficio_detalle”. También se puede observar en el Apéndice D el fragmento de código que contiene la función del servicio web que responde a la llamada anterior y se puede apreciar la es- tructura del XML que corresponde al detalle del oficio: Así como se presentó anteriormente se hizo con los siguientes servicios: Consultar Presupuestos. Consultar Detalle de Presupuesto. Crear Nuevo Presupuesto. Borrar Presupuesto. Actualizar Presupuesto. Buscar Presupuesto. Consultar Oficios Pendientes. Consultar Detalle de Oficio. La Figura 4.11 presenta la vista del detalle de un oficio, en el Apéndice C se puede aprecar el método en el controlador de esta vista y en el Apéndice D el servicio web correspondiente. 83 Buscar Oficio. 4.8.11. Iteración 10: Del 20 - Julio - 2.009 al 31 - Julio - 2.009 Al igual que en la etapa anterior se hicieron estos otros servicios web, tanto el XML, como la llamada y parseo del mismo: Consultar Oficios Aceptados. Consultar Oficios Rechazados. Consultar Planillas. Consultar Detalle de Planilla. Actualizar Planilla. Buscar Planilla. Consultar Sueldo. Consultar Cédula y Correo. Consultar Planillas Aceptadas. Consultar Planillas Rechazadas. 4.8.12. Iteración 11: Del 03 - Agosto - 2.009 al 14 - Agosto - 2.009 84 Realizar todas las conexiones de las páginas y datos correspondientes a las mismas para que la estructura y navegabilidad del sistema este completamente usable, además de no permitir la modificación de datos por parte de entes que no estén autorizados sino que la persona que se autentique solamente pueda tener acceso y permisos de todo tipo con los datos que corresponden a su módulo. 4.8.13. Iteración 12: Del 17 - Agosto - 2.009 al 28 - Agosto - 2.009 En esta iteración se definió la meta de agregar al sistema las funcionalidades de mandar correo electrónico, para el momento en que el usuario devuelva un trámite de per- sonal se notifica la razón por la cual se regresa el trámite, por medio de un campo memo, al ingresar el motivo de la devolución se le mandará un correo automáticamente a la persona que mandó dicho trámite, esto es consultando por medio de un servicio web, la cédula de la persona encargada y su correo para enviarle a su bandeja de entrada un mensaje con asunto “Devolución de Trámite de Personal” y en el contenido se muestre el número del trámite con la especificación del error. Se creó el controlador para envios de correo, y una plantilla en la que se colocan los datos que se quieren mostrar en el correo incluyendo el asunto, saludo, información que se quiere transmitir. Para que funcione este controlador fue necesario crear la cuenta de correo system- pap@gmail.com, realizar una serie de pasos e instalar la siguiente gema: 1 gem install tlsmail Además se debe ejecutar el siguiente comando en la consola una vez que se este ubicado en la dirección del proyecto: 85 1 ruby script/plugin install http://svn.douglasfshearer.com/rails/plugins /action\_mailer\_optional\_tls Una vez que se haya realizado esto se agrega la configuración del servidor de correo de gmail en el archivo de configuración environment.rb: 1 config.action_mailer.smtp_settings = 2 { 3 :tls => true, 4 :address => "smtp.gmail.com", 5 :port => 587, 6 :authentication => :plain, 7 :user_name => ’systempap@gmail.com’, 8 :password => ’<password de usuario>’ 9 } 4.8.14. Iteración 13: Del 31 - Agosto - 2.009 al 11 - Septiembre - 2.009 Para esta iteración se planificó como meta presentar en formato pdf dos documen- tos: el resumen de los trámites de los preparadores que están en espera por la aprobación del Consejo de Facultad, y el resultado de la reunión, presentando los trámites aprobados y desaprobados resumidos en una tabla. Se creó el controlador generar-pdf para separar las funcionalidades del resto del sistema, creando estas dos vistas señaladas anteriormente en 86 pdf con los datos correpondientes para cada una. Para la realización de esta iteración fue necesaria la instalación de la siguiente gema: 1 gem install pdf-writer (1.1.3) En el Apéndice E se presenta un fragmento del código que se usó para generar el pdf. 4.8.15. Iteración 14: Del 14 - Septiembre - 2.009 al 25 - Septiembre - 2.009 En esta etapa se hicieron las correcciones y pruebas finales tanto para comprobar la navegavilidad del sistema como para verificar detalles de términos usados en la inter- faz, mensajes de error, etc. También se hizo una verificación de operabilidad del sistema completo. 4.9. Interfaz de la Aplicación Los procesos que se manejan en el nuevo sistema tienen las funcionalidades que se encuentran en el sistema que se utiliza actualmente, añadiendo la automatización de al- gunos procesos de verificación, proceso de autenticación, administración de preparadores, entre otros. En la página principal de SystemPap se muestra un breve resumen de la fun- cionalidades que ofrece cada módulo de la aplicación, es decir, el módulo de recursos hu- manos, el módulo de presupuesto y el módulo de consejo de facultad. En el pie de página de toda la aplicación se muestra la información correspondiente a la Universidad Central 87 de Venezuela, teléfonos, ubicación y además la resolución con la que se debería ver la aplicación y los navegadores para los que se ha probado el sistema. 4.9.1. Autenticación La vista de la autenticación se presenta en la Figura 4.6, tiene la finalidad de que los diferentes actores del sistema estén registrados en el mismo, presentándose de forma amigable y despejada al usuario, donde se observa un acceso a los contactos necesarios para localizar a los encargados de la administración del sistema. En el módulo de autenticación se llenan los campos de cédula, login y clave y al autenticarse el sistema les presenta las funcionalidades que ese determinado actor puede gestionar. 88 Figura 4.6: Vista de la Aplicación - Autenticación. Al colocar los datos de autenticación en el sistema y enviarlos para la verificación, dichos datos se corroboran en un servicio web de autenticación, una vez verificado el usuario sus datos se guardan en sesión y se muestran las vistas y funcionalidades corres- pondientes a su rol. 4.9.2. Módulo de Planificación y Presupuesto Dependiendo del actor que se haya autenticado, se le presentará un menú diferente, por ejemplo en la figura 4.7, ésta es la vista de la aplicación cuando se autentica un tra- bajador de el Departamento de Planificación y Presupuesto, en cuyo menú se encuentra 89 las funcionalidades de dicho departamento, como por ejemplo ver los oficios que las Es- cuelas han enviado para su posterior aprobación, gestionar las actividades para iniciar el Movimiento de Personal de los preparadores, establecer y controlar la entrega de la docu- mentación por parte de los preparadores para tener su registro en debida regla, gestionar y aprobar el trámite de personal, verificar disponibilidad de presupuesto, consultar y admi- nistrar los registros de presupuesto, de hecho cuando se observa el detalle de un oficio pen- diente se puede observar directamente el presupuesto asociado a través de un link, además se pueden desplegar los presupuesto que tenga relación con el trámite, ver los trámites de personal pendientes, rechazados y aceptados con sus detalles como se muestran en las Fi- guras 4.8, 4.9, 4.10, 4.11, aprobar los oficios pendientes por presupuesto y notificar en caso de que sea necesario algún error en el trámite del personal. 90 Figura 4.7: Vista de la Aplicación - Página principal de Presupuesto 91 Figura 4.8: Vista de la Aplicación - Oficios Pendientes. 92 Figura 4.9: Vista de la Aplicación - Oficios Aceptados. 93 Figura 4.10: Vista de la Aplicación - Oficios Rechazados. 94 Figura 4.11: Vista de la Aplicación - Detalle Oficio. En la Figura 4.12 se muestra el detalle de un oficio con derecho a la aprobación por parte del usuario, es decir, el oficio actual está en un estatus en el cual es permitido que el departamento de planificación y presupuesto lo apruebe o lo desapruebe, dicho oficio fue desaprobado por algún tipo de error, pero no se llenó el campo del memo, por lo cual muestra un mensaje de error. 95 Figura 4.12: Vista de la Aplicación - Detalle Oficio con error. Y en caso contrario, es decir, en caso de que se presione el botón de “devolver oficio” con el campo de memo con su respectiva información, automáticamente se envía un correo desde la aplicación al personal autorizado y correspondiente de la escuela a la cual pertenezca el preparador del trámite a procesar y el oficio cambia de estatus a oficio rechazado hasta que se corrija el error del trámite, para iniciar el ciclo de aprobación de oficios. 96 4.9.3. Módulo de Recursos Humanos En el módulo de recursos humanos al igual que en el módulo de Planificación y Presupuesto y en el módulo de Consejo de Facultad se administran los oficios de los preparadores y se aprueban según el estatus correspondiente, se establece y controla la en- trega de la documentación por parte de los preparadores para tener su registro en debida regla, pero además se inicia el movimiento de personal a partir de un oficio aceptado y se completa cierta información requerida por la planilla de movimiento de personal de los preparadores como se muestra en la Figura 4.13, luego de completados los campos corres- pondientes correctamente se envían los datos de la Planilla de Movimiento de Personal y se cargan a SicMov que es la aplicación encargada de gestionar dichas planillas. Los campos de la planilla de movimiento de personal y la interfaz de SicMov se muestra a continuación en la Figura 4.14 97 Figura 4.13: Vista de la Aplicación - Detalle Modificar Planilla de Movimiento de Personal. 98 Figura 4.14: Vista de la Aplicación - Planilla SicMov. 4.9.4. Módulo de Consejo de Facultad El módulo de Consejo de Facultad fue desarrollado para ofrecer la gestión y apro- bación indicada del trámite de personal de los preparadores, luego de realizada la reunión de Consejo de Escuela. A continuación se muestra su página principal en la Figura 4.15. 99 Figura 4.15: Vista de la Aplicación - Consejo de Facultad. Los oficios pendientes tienen la opción de presentar un documento en formato PDF con el resumen de los trámites de los preparadores que están en espera por la aprobación del consejo de facultad. Después de haber discutido los trámites de los preparadores y de haber indicado en el sistema cuales están aprobados y cuales no, se puede generar un resumen del resultado de la discusión a través de un documento en formato PDF igualmente y así es como los mó- dulos de planificación y presupuesto y recursos humanos pueden gestionar las actividades para el trámite de personal de los preparadores. Capítulo 5 Conclusión 5.1. Conclusiones Después de discutir todos los procedimientos que se llevan a cabo para llevar la administración de los preparadores, y ver como se puede mejorar el sistema actual, final- mente se puede apreciar como se pueden disminuir los errores causados por la transcripción repetitiva de datos, a través de la automatización de los mismos, también el tiempo sería óptimo o por lo menos en comparación con lo que se ha llevado a cabo hasta el momento. Es importante que cada módulo que interactúa en el sistema esté consciente de que sus interacciones con el mismo están entrelazadas y dependen unas acciones de otras que eje- cutan otros actores y así el resultado es que todo el flujo de trabajo funciona, se puede ver que el comportamiento general de todo el sistema conlleva a un seguimiento del trámite hasta su aprobación final. Se llegó a la conclusión de que al implementar el sistema descrito anteriormente: El tiempo de aprobación del trámite de personal será reducido y más efectivo. 100 101 Se tendrá menos pérdida de información y datos importantes junto con sus correc- ciones, por lo tanto la rentabilidad de la gestión administrativa de los preparadores será mucho más eficiente. Se mejorarán los procesos de búsqueda de información y comunicación entre los di- ferentes módulos, bien sea por medio de la base de datos que tienen en común o por los correos electrónicos. Para lograr la automatización de los procesos administrativos de los preparadores es necesario que el personal de la Facultad de Ciencias esté de acuerdo en que se sistematice el área administrativa de los preparadores y deben colaborar en la puesta en producción del sistema. 5.2. Recomendaciones El personal del departamento de Presupuesto, departamento de Recursos Humanos y la Escuela respectiva (Administradores y Secretarias) que van a utilizar el sistema deberán recibir una pequeña orientación sobre el manejo del mismo para su debido funcionamiento. Con este sistema se incrementa la seguridad de los datos, se manejan todos los datos con cierto grado de cuidado, ya que solamente el personal administrativo son los que tienen el acceso permitido para visuailzar y modificar los estados de los preparadores, logrando así, privacidad y confidencialidad de los datos, además con el uso de la Base de Datos cen- tralizada con usuarios que tengan el permiso respectivo como administrador de las mismas se garantiza la integridad de los datos. Es muy importante que se encuentren disponibles los administradores para la implantación del nuevo sistema. 102 5.3. Contribuciones Este trabajo aporta especialmente a la Facultad de Ciencias un sistema con el que se pueda mejorar la forma en que se llevan los procesos administrativos de los preparadores y un modelo para que en un futuro se pueda implantar este sistema para otros tipos de personal. 5.4. Trabajos Futuros Una de las ventajas del Sistema Web presentado en este trabajo es que puede ser perfectamente escalable para el resto del personal de la facultad como por ejemplo para los auxiliares docentes, los docentes, entre otros; en la estructura de la aplicación se pueden agregar los campos que difieren del preparador con respecto al resto del personal, e in- cluirlos en la base de datos, por consiguiente también se deberán agregar los servicios web correspondientes a todos los datos y procedimientos que se necesiten para los otros tipos de personal. Además si en otras facultades o universidades se aplican procesos similares, al que se aplica en la facultad de ciencias para administrar a sus preparadores, se podría migrar el sistema con el respectivo trabajo que esto incluye. Apéndice A Código de uso de Sesión 1 usr=params[’usuario’] 2 session[:login]=usr[’login’] 3 session[:clave]=usr[’clave’] 4 session[:cedula]=usr[’cedula’] 5 session[:entidad]=usr[’entidad’] 103 Apéndice B Método Analizador Sintáctico Hash 1 wsdl="http://localhost:8084/WS_TESIS/Tesis?wsdl"; 2 driver = SOAP::WSDLDriverFactory.new(wsdl).create_rpc_driver 3 ret=driver.tesis_autenticar({:login => login, :password => clave, : cedula =>cedula}).inspect; 4 xs,xml_respuesta=ret.split(/"/) 5 hash=Hash.from_xml(xml_respuesta) 6 acuse=hash["respuesta"]["acuse"] 7 if (acuse=="1") 8 flash[:mensaje_error_inicio]=’Datos invalidos’ 9 return false 10 else 11 nombre=hash["respuesta"]["filas"]["fila"]["nombre"] 12 apellido=hash["respuesta"]["filas"]["fila"]["apellido"] 13 entidad=hash["respuesta"]["filas"]["fila"]["entidad"] 14 correo=hash["respuesta"]["filas"]["fila"]["correo"] 15 session[:nombre]=nombre 104 105 16 session[:apellido]=apellido 17 session[:entidad]=entidad 18 session[:correo]=correo 19 if (entidad=="rrhh") 20 session[:login]=login 21 session[:clave]=clave 22 session[:cedula]=cedula 23 session[:entidad]=entidad 24 return true 25 ... 26 else 27 flash[:mensaje_error_inicio]=’Datos invalidos’ 28 return false 29 end Apéndice C Método Analizador Sintáctico REXML 1 wsdl="http://localhost:8084/WS_TESIS/Tesis?wsdl"; 2 driver = SOAP::WSDLDriverFactory.new(wsdl).create_rpc_driver 3 ret=driver.oficio_detalle({:id => @id_oficio}).inspect; 4 xs,parametro_xml=ret.split(/"/) 5 k=0; 6 xml = REXML::Document.new(parametro_xml) 7 sub_xml=xml.root.get_elements("//respuesta") 8 definitivo = sub_xml[0] 9 acuse=definitivo.get_elements("//acuse")[0].get_text() 10 if(acuse==0) 11 definitivo.each do |i| 12 i.elements.each do |m| 13 if definitivo.get_elements("fila") 14 @nro_oficio[k]=m.get_elements("//numoficioprepa")[k].get_text() 15 @cedula[k]=m.get_elements("//cedulapreparador")[k].get_text() 16 @nombre[k]= m.get_elements("//nombre")[k].get_text().to_s 106 107 17 @apellido[k]=m.get_elements("//apellido")[k].get_text().to_s 18 @nombre_apellido[k]=@nombre[k]+" "+@apellido[k] 19 @escuela[k]=m.get_elements("//nombreescuela")[k].get_text() 20 @tipo_oficio[k]=m.get_elements("//idtipomovimiento_con_descripcion ")[k].get_text() 21 if(@tipo_oficio=="16") 22 @asunto="Aumento de horas de Preparador I a Preparador II" 23 elsif(@tipo_oficio=="17") 24 @asunto="Disminuci&oacute;n de horas de Preparador II a Preparador I" 25 elsif(@tipo_oficio=="46") 26 @asunto="Retiro de Preparador" 27 elsif(@tipo_oficio=="05") 28 @asunto="Nombramiento de Preparador" 29 end 30 @estado_oficio[k]=m.get_elements("//idestatusoficio_con_descripcion ")[k].get_text() 31 @fecha_elaboracion[k]=m.get_elements("//fechaelaboracion")[k]. get_text() 32 @cargo[k]=m.get_elements("//cargo")[k].get_text() 33 @dedicacion[k]=m.get_elements("//dedicacion")[k].get_text() 34 @fecha_ingreso[k]=m.get_elements("//fechaingreso")[k].get_text() 35 @fecha_efectiva[k]=m.get_elements("//fechaefectiva")[k].get_text() 36 @proyecto[k]=m.get_elements("//proyecto")[k].get_text() 37 @nota[k]=m.get_elements("//nota")[k].get_text() 108 38 @disponibilidad_presupuestaria[k]=m.get_elements("// disponibilidadpresupuestaria")[k].get_text() 39 @idd[k]=m.get_elements("//idd")[k].get_text() 40 @resolucion[k]=m.get_elements("//resolucion")[k].get_text() 41 @fecha_re_dpp[k]=m.get_elements("//fecha_re_dpp")[k].get_text() 42 @fecha_ap_dpp[k]=m.get_elements("//fecha_ap_dpp")[k].get_text() 43 @fecha_re_p_rrhh[k]=m.get_elements("//fecha_re_p_rrhh")[k].get_text () 44 @fecha_ap_p_rrhh[k]=m.get_elements("//fecha_ap_p_rrhh")[k].get_text () 45 @fecha_re_cf[k]=m.get_elements("//fecha_re_cf")[k].get_text() 46 @fecha_ap_cf[k]=m.get_elements("//fecha_ap_cf")[k].get_text() 47 @fecha_re_cf_rrhh[k]=m.get_elements("//fecha_re_cf_rrhh")[k]. get_text() 48 @fecha_ap_cf_rrhh[k]=m.get_elements("//fecha_ap_cf_rrhh")[k]. get_text() 49 k=k+1 50 end 51 end if definitivo.get_elements("//filas") 52 end 53 end Apéndice D Servicio Web - XML 1 @WebMethod(operationName="oficio_detalle") 2 public String oficio_detalle(@WebParam(name = "id") 3 String id) { 4 System.out.println("+ este es id: "+id); 5 String respuesta = null; 6 int id1=Integer.parseInt(id.trim()); 7 switch(id1) 8 { 9 case 1: 10 respuesta="<respuesta><acuse>0</acuse><filas>" + 11 "<fila>" + 12 "<numoficioprepa>1</numoficioprepa>" + 13 "<nombre>Betzimar</nombre>" + 14 "<apellido>Cordova</apellido>" + 15 "<cedulapreparador>16952676</cedulapreparador>" + 16 "<nombreescuela>Biologia</nombreescuela>" + 109 110 17 "<idtipomovimiento_con_descripcion>16:Aumento</ idtipomovimiento_con_descripcion>" + 18 "<idestatusoficio_con_descripcion>Enviado a Consejo de Facultad </idestatusoficio_con_descripcion>" + 19 "<fechaelaboracion>30/03/09</fechaelaboracion>" + 20 "<asunto>Aumento de cargo</asunto>" + 21 "<cargo>Preparador I</cargo>" + 22 "<dedicacion>Convencional (12h)</dedicacion>" + 23 "<proyecto></proyecto>" + 24 "<fechaingreso>05/07/09</fechaingreso>" + 25 "<fechaefectiva>25/10/09</fechaefectiva>" + 26 "<disponibilidadpresupuestaria>1</disponibilidadpresupuestaria>" + 27 "<idd>56657</idd>" + 28 "<nota>Aumento de cargo</nota>" + 29 "<requisitosfisicos>0</requisitosfisicos>" + 30 "<fecha_re_dpp>01/06/08</fecha_re_dpp>" + 31 "<fecha_ap_dpp>01/05/07</fecha_ap_dpp>" + 32 "<fecha_re_p_rrhh>01/05/07</fecha_re_p_rrhh>" + 33 "<fecha_ap_p_rrhh>01/06/08</fecha_ap_p_rrhh>" + 34 "<fecha_re_cf>01/05/07</fecha_re_cf>" + 35 "<fecha_ap_cf>01/05/07</fecha_ap_cf>" + 36 "<fecha_re_cf_rrhh>01/06/08</fecha_re_cf_rrhh>" + 37 "<fecha_ap_cf_rrhh>01/05/07</fecha_ap_cf_rrhh>" + 38 "<resolucion></resolucion>" + 39 "</fila>" + 111 40 "</filas>" + 41 "</respuesta>"; 42 break; 43 ... 44 } 45 return respuesta; 46 } Apéndice E PDF 1 require ’pdf/writer’ 2 class GenerarPdfController < ApplicationController 3 4 def pdf 5 fecha=Time.now.strftime("%d-%m-%Y") 6 titulo="Resumen_Tramites_Preparadores_fecha:#{fecha}.pdf" 7 pdf=PDF::Writer.new 8 pdf.margins_pt(35,20,20,20) 9 pdf.select_font(’Times-Roman’) 10 tabla=PDF::SimpleTable.new 11 pdf.start_page_numbering(500, 760, size=9, pos = nil, pattern = "PAG. < PAGENUM> DE <TOTALPAGENUM>", starting = nil) 12 pdf.text "\n", :font_size => 10, :justification => :left 13 pdf.text "UNIVERSIDAD CENTRAL DE VENEZUELA", :justification => :left 14 pdf.text "FACULTAD DE CIENCIAS", :justification => :left 112 113 15 pdf.text "RESUMEN DE LOS TRÁMITES PENDIENTES DE LOS PREPARADORES", : justification => :left 16 pdf.add_text 450, 735,"FECHA: " + Time.now.strftime("%d-%m-%Y") 17 pdf.text "\n\nTRAMITES DE LOS PREPARADORES\n\n\n", :justification => : center 18 ... Bibliografía [1] Yurbelis Boyer; Néstor Méndez, Automatización de procesos relacionados con las solicitudes estudiantiles y actividades administrativas y de docencia de la Facultad de Ciencias, Tesis de Grado 17165, Facultad de Ciencias, UCV, Mayo 2008. [2] Cáceres Rosa, Diseño de una herramienta de automatización y sequimiento de las so- licitudes de beneficios socioeconómicas de los empleados de la Universidad Central de Venezuela, Trabajo Especial de Postgrado, Febrero 2008. [3] Wikipedia, Oficio (documento), http://es.wikipedia.org/wiki/Oficio_(documento), artículo publicado diciembre 2006. [4] Dr. José Rodríguez de Rivera, jrivera[en]campus.cepade.es, Univ. Católica Boliviana San Pablo Univ.Católica de Salta, Argentina, CEPADE, Univ. Politécnica de Madrid, Dpto. Ciencias Empresariales, Univ. de Alcalá de Henares, 1993. [5] Gómez Guillermo, SISTEMAS ADMINISTRATIVOS, Análisis y Diseños, Editorial Mc Graw Gil. Año 1.997. [6] Barkley, E. F.; Croos, P. Y MA, Editorial: Morata Ediciones, Año: 2007. [7] Schlichter, Johann H., Springer-verlag Berlin And Heidelbe, Computer-Supported Cooperative Work, 2005. 114 115 [8] Roseman, M.; Greenberg, S.; “GROUPKIT: a groupware toolkit for building real- time conferencing application”. Proceedings of the 1992 ACM conference on Computer-supported cooperative work. ACM Press New York, NY, USA, 1992. [9] Alternativas para Microsoft Excel, Sitio web oficial de Microsoft Office. [10] Wikipedia, http://es.wikipedia.org/wiki/Programación_extrema. [11] Pagina oficial de Ruby on Rails, http://www.rubyonrails.org.es/ [12] Introducción a RubyGems, Daniel M. Maldonado (danyx@elcodigok.com.ar), Luis Chavez (lchavez@larepaweb.com.ar), Viernes, 28 de agosto de 2009, http://www.larepaweb.com.ar/, http://www.elcodigok.com.ar/ [13] Wikipedia, http://es.wikipedia.org/wiki/Modelo_Vista_Controlador. [14] W3 MVC Device Independent View Design in MVC based applications http://www.w3.org/2002/02/DIWS/submission/CovigoPositionPaperOnW3C- DIA.htm. [15] Proyecto Ciclope, Modelo MVC, http://www.ciclope.info/doc/mvc/index.php?action=model. [16] Adobe, Flash CS3, Centro de Recursos de ayuda, Utilización del patrón de diseño MVC, http://livedocs.adobe.com/flash/9.0_es/UsingFlash/help.html?content=WSd60f23110762d6b883b18f10cb1fe1af6- 7b36.html. [17] Beneficios del Modelo MVC, http://www.microsoft.com/spanish/msdn/comunidad/mtj.net/voices/mtj3317.asp. [18] W3C. Guía breve de Servicios Web. http://www.w3c.es/Divulgacion/Guiasbreves/ServiciosWeb. 116 [19] Módulo de Servicio al Docente - Módulo de Servicio del Estudiante, https://docentes.ciens.ucv.ve/ - https://estudiantes.ciens.ucv.ve/. [20] Ruby on Rails, RibosoMatic, Desarrollo Web, Aplicaciones, Software,etc, publicado 13-Abril-2007, http://www.ribosomatic.com/articulos/ruby-on-rails-en-accion-1/.