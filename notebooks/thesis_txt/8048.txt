Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Laboratorio de Redes Móviles e Inalámbricas (ICARO) FORMINST: Sistema de Gestión de Planes de Formación en la Facultad de Ciencias de la Universidad Central de Venezuela Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela por el Br. Pedro Alejandro Rodríguez Orellana para optar al título de Licenciado en Computación Tutores: Profa. Ana Morales Bezeira Prof. Iván Flores Caracas, mayo de 2019 ii Acta del Veredicto iii Dedicatorias A Dios por darme la fuerza para llegar hasta el final de mi carrera y poderla culminar en los lapsos de tiempo que me había propuesto. A mis padres Dinorah Orellana y Pedro Rodríguez, por ser un ejemplo a seguir y siempre darme esperanza y consuelo en los momentos difíciles que viví en mis estudios. A mis tíos Morella de Bograd y Eliezer Bograd, por darme el beneficio de poder compartir casa con ellos cuando no tenía como residenciarme en Caracas, les agradezco desde el fondo de mi corazón, gran parte de todo esto se lo debo a ellos. A mi tutora Ana Morales, por su amplia dedicación, siempre apoyarme, y brindarme la oportunidad de poder desarrollar este gran proyecto juntos. A mi familia por siempre apoyarme en el ámbito académico. A mis amigos, a todos, desde que estuvieron en primer semestre hasta los que estuvieron conmigo en los últimos, a los que se quedaron y a los que tuvieron que emigrar, a los que siguen conmigo y los que no. A todos les tengo buenos recuerdos de esta gran experiencia académica. A mi compañero de trabajo Carlos Iglesias, que estuvo conmigo en el desarrollo del sistema FORMINST desde el año 2017. Por último, pero no menos importante, a la prestigiosa Universidad Central de Venezuela, por ser mi segunda casa, por darme la oportunidad de educarme con tan buena calidad, y por enseñarme a nunca rendirme, a perseverar a pesar de las adversidades. Nunca podré pagarle por tal favor que me ha hecho. iv Resumen El proceso de formación de un instructor es denominado plan de formación y capacitación, el mismo está constituido por un conjunto de tareas pertenecientes al puesto que ocupa en conjunto de un programa de capacitación inmerso en un período de dos años o cuatro semestres, cuyo contenido dependerá esencialmente de la naturaleza de sus funciones. En este proceso, el tutor del plan deberá emitir distintos documentos cada cierto tiempo, para ser evaluados por entidades superiores; proceso el cual requiere ser gestionado de manera más eficiente a través de uso de nuevas tecnologías. Con el propósito de modernizar y mejorar el funcionamiento de estos procesos, se plantea entonces como objetivo del presente Trabajo Especial de Grado (TEG) la implementación de un sistema automatizado para la gestión y seguimiento de los planes de formación y capacitación de los profesores instructores en plan de formación dentro de la Facultad de Ciencias de la Universidad Central de Venezuela denominado FORMINST. El sistema se realizó como una aplicación web, a través del empleo del framework Ruby on Rail, un sistema manejador de bases de datos MySQL y en conjunto con la aplicación de la metodología de desarrollo Scrum; derivando así a la creación de un sistema innovador, que optimice el funcionamiento y manejo del flujo de documentos entre las distintas entidades y usuarios. Palabras Claves: Sistema de Gestión, FORMINST, Aplicación Web, Formación y Capacitación, Frameworks Web. v Índice Acta del Veredicto ............................................................................................................ ii Dedicatorias ..................................................................................................................... iii Resumen .......................................................................................................................... iv Índice de Figuras ............................................................................................................. ix Índice de Tablas ............................................................................................................... xi Índice de Código ............................................................................................................. xii Introducción ................................................................................................................... xiii Capítulo 1: Tema de Investigación ................................................................................... 1 1.1. Planteamiento del Problema .................................................................................. 1 1.2. Antecedentes .......................................................................................................... 2 1.3. Justificación ........................................................................................................... 4 1.4. Objetivo General.................................................................................................... 5 1.5. Objetivos Específicos ............................................................................................ 5 1.6. Consideraciones de la propuesta............................................................................ 5 1.6.1. Herramientas a utilizar.................................................................................... 8 1.6.2. Alcance ........................................................................................................... 8 Capítulo 2: Marco Teórico ............................................................................................... 9 2.1. Tecnología de la Información ................................................................................ 9 2.1.1. Sistemas de Información ................................................................................ 9 2.1.1.1. Componentes de los Sistemas de Información ...................................... 11 2.1.1.2. Actividades de los Sistemas de Información ......................................... 11 2.1.2. Sistema de Control de Procesos ................................................................... 13 2.1.2.1. Sistemas de Información en la Educación Superior .............................. 13 2.2. Ingreso y Formación del Personal Docente y de Investigación de la Universidad Central de Venezuela .................................................................................................. 15 2.2.1. Mecanismo de Ingreso .................................................................................. 15 2.2.2. Concurso de Oposición ................................................................................. 16 2.2.2.1. Planes de Formación y Capacitación ..................................................... 17 2.2.2.2. Adecuación del Plan de Formación y Capacitación .............................. 18 2.2.2.3. Informes de Plan de Formación y Capacitación .................................... 22 2.2.2.4. Flujo de Documentos del Plan de Formación y Capacitación ............... 28 2.2.3. Experiencia Previas de Automatización de Procesos en la Facultad de Ciencias .................................................................................................................. 31 2.3. Tecnologías de Desarrollo de Software ............................................................... 34 vi 2.3.1. Aplicaciones Basadas en Web ...................................................................... 34 2.3.1.1. Funcionamiento y Arquitectura de las Aplicaciones Web .................... 34 2.3.1.2. Beneficios de las Aplicaciones Web ..................................................... 36 2.3.2. Framework .................................................................................................... 37 2.3.3. Patrones de Diseño ....................................................................................... 37 2.3.3.1. Modelo Vista Controlador ..................................................................... 38 2.3.4. Lenguajes de Programación y Frameworks.................................................. 39 2.3.4.1. Ruby (Ruby on Rails) ............................................................................ 39 2.3.5. Bases de Datos .............................................................................................. 41 2.3.5.1. MySQL .................................................................................................. 42 Capítulo 3: Marco Aplicativo ......................................................................................... 43 3.1. Metodología de Desarrollo de Software: SCRUM .............................................. 43 3.1.1. Equipo SCRUM ............................................................................................ 43 3.1.1.1. Dueño del Producto ............................................................................... 43 3.1.1.2. Equipo de Desarrollo ............................................................................. 44 3.1.1.3. SCRUM Master ..................................................................................... 44 3.1.1.4. Stakeholders .......................................................................................... 45 3.1.2. Artefactos ..................................................................................................... 45 3.1.2.1. Product Backlog .................................................................................... 45 3.1.2.2. Sprint Backlog ....................................................................................... 45 3.1.2.3. Incrementos ........................................................................................... 46 3.1.3. Sprints ........................................................................................................... 46 3.1.4. Reuniones ..................................................................................................... 47 3.1.4.1. Reunión de Planeación de Sprint ........................................................... 47 3.1.4.2. Reuniones Diarias .................................................................................. 47 3.1.4.3. Reunión de Revisión de Sprint .............................................................. 48 3.1.4.4. Reunión de Sprint Retrospectiva ........................................................... 48 3.1.5. Modificación de la Metodología de Desarrollo de Software ........................ 48 3.1.5.1. Roles ...................................................................................................... 48 3.1.5.2. Artefactos .............................................................................................. 48 3.1.5.3. Reuniones .............................................................................................. 49 3.2. Descripción del Proyecto ................................................................................. 49 3.2.1. Arquitectura y Tecnologías .......................................................................... 49 3.3. Sprint 0: Levantamiento de Requerimientos y Diseño de Solución .................... 50 3.3.1. Requerimientos Funcionales ........................................................................ 50 vii 3.3.1.1. Nuevas Funcionalidades ........................................................................ 51 3.3.1.2. Funcionalidades Cambiadas .................................................................. 51 3.3.1.3. Requerimientos No Funcionales ............................................................ 52 3.3.2. Diseño de Solución ....................................................................................... 52 3.3.2.1. Estructura de Datos ................................................................................ 52 3.3.2.2. Guía de Estilos ....................................................................................... 56 3.3. Sprint 1: Login ..................................................................................................... 57 3.4. Sprint 2: Módulo de Tutor ................................................................................... 61 3.4.1. Inicio ............................................................................................................. 61 3.4.2. Planes de Formación y Adecuación ............................................................. 63 3.4.3. Informes ........................................................................................................ 66 3.4.3.1. Resultados .................................................................................................. 69 3.4.4. Sub-Menú ..................................................................................................... 70 3.5. Sprint 3: Módulo de Instructor ............................................................................ 71 3.6. Sprint 4: Módulo de Entidad ............................................................................... 73 3.6.1. Adecuaciones e Informes.............................................................................. 73 3.7. Sprint 5: Flujo de Documentos ............................................................................ 76 3.7.1. Estatus de Documento .................................................................................. 78 3.7.2. Envío Automático de Documentos ............................................................... 78 3.8. Sprint 6: Exportación de Documentos en PDF .................................................... 79 3.8.1. Almacenamiento ........................................................................................... 82 3.9. Sprint 7: Envío de Correos Electrónicos ............................................................. 83 3.10. Sprint 8: Módulo de Secretaria .......................................................................... 84 3.11. Sprint 9: Adjuntar Soportes en PDF .................................................................. 87 3.12. Sprint 10: Conexión con Correo Institucional ................................................... 89 Capítulo 4: Pruebas y Resultados ................................................................................... 90 4.1. Pruebas Experimentales ....................................................................................... 90 4.2. Pruebas Heurísticas ............................................................................................. 92 4.2.1. Preguntas de Usabilidad ............................................................................... 95 4.2.2. Preguntas a Instructores ................................................................................ 98 4.2.3. Preguntas a Tutores ...................................................................................... 99 4.2.4. Preguntas a Secretarias ............................................................................... 101 4.2.5. Preguntas a Entidades ................................................................................. 101 4.3. Pruebas de Aceptación....................................................................................... 102 Conclusiones ................................................................................................................. 107 viii Limitaciones ................................................................................................................. 109 Trabajos Futuros ........................................................................................................... 110 Referencias ................................................................................................................... 111 ix Índice de Figuras FIG. 1.1. FLUJO DE TRABAJO DE LA PRIMERA VERSIÓN DE FORMINST (ESCUELAS) ....................................................... 3 FIG. 1.2. FLUJO DE TRABAJO DE LA PRIMERA VERSIÓN DE FORMINST (INSTITUTOS) .................................................... 4 FIG. 1.3. (BPMN) FLUJO IDEAL DE DOCUMENTOS (INFORMES Y ADECUACIONES) DE PLAN DE FORMACIÓN ....................... 7 FIG. 2.1. CLASIFICACIÓN OPERATIVA Y ADMINISTRATIVA DE LOS SISTEMAS DE INFORMACIÓN [1]. .................................... 10 FIG. 2.2. COMPONENTES Y ACTIVIDADES DE UN SISTEMA DE INFORMACIÓN. ADAPTACIÓN DE [13] ................................ 12 FIG. 2.3. COMPONENTES DE UNA ADECUACIÓN DE PLAN DE FORMACIÓN Y CAPACITACIÓN SEGÚN LA FACULTAD DE CIENCIAS DE LA UNIVERSIDAD CENTRAL DE VENEZUELA. ELABORACIÓN PROPIA .............................................................. 19 FIG. 2.4. FORMATO DE ADECUACIÓN PLAN DE FORMACIÓN Y CAPACITACIÓN (1) ....................................................... 21 FIG. 2.5. FORMATO DE ADECUACIÓN PLAN DE FORMACIÓN Y CAPACITACIÓN (2) ....................................................... 22 FIG. 2.6. FORMATO DE INFORME DEL PLAN DE FORMACIÓN Y CAPACITACIÓN (1) ....................................................... 24 FIG. 2.7. FORMATO DE INFORME DEL PLAN DE FORMACIÓN Y CAPACITACIÓN (2) ....................................................... 25 FIG. 2.8. FORMATO DE INFORME DEL PLAN DE FORMACIÓN Y CAPACITACIÓN (3) ....................................................... 26 FIG. 2.9. FORMATO DE INFORME DEL PLAN DE FORMACIÓN Y CAPACITACIÓN (4) ....................................................... 27 FIG. 2.10. FORMATO DE INFORME DEL PLAN DE FORMACIÓN Y CAPACITACIÓN (5) ..................................................... 28 FIG. 2.11. (BPMN) FLUJO DE DOCUMENTOS (INFORMES Y ADECUACIONES) ENTRE LAS DISTINTAS ENTIDADES ................ 31 FIG. 2.12. ARQUITECTURA Y FLUJO COMÚN DE LAS APLICACIONES WEB ................................................................... 35 FIG. 2.13. ARQUITECTURA Y FLUJO COMÚN DE LAS APLICACIONES WEB EN LA ACTUALIDAD. ........................................ 38 FIG. 3.1. FUNCIONAMIENTO DE LOS SPRINTS EN CONJUNTO CON LOS BACKLOGS. FUENTE WWW.ARTURONAVARRO.COM .... 46 FIG. 3.2. ARQUITECTURA DE TECNOLOGÍAS DEL SISTEMA FORMINST ....................................................................... 50 FIG. 3.3. MODELO DE DATOS DE FORMINST, VERSIÓN ANTERIOR. ......................................................................... 53 FIG. 3.4. MODELO DE DATOS DE FORMINST, VERSIÓN ACTUAL. ............................................................................ 55 FIG. 3.5. ICONO DE PESTAÑA DE NAVEGADOR DEL SISTEMA FORMINST ................................................................... 57 FIG. 3.6. VISTA GENERAL DE LOGIN DEL SISTEMA FORMINST (1) ............................................................................ 58 FIG. 3.7. VISTA GENERAL DE LOGIN DEL SISTEMA FORMINST (2) ............................................................................ 59 FIG. 3.8. DIVISIÓN DE ROLES, ESCUELAS Y DEPARTAMENTOS PERTENECIENTES A UN USUARIO ......................................... 60 FIG. 3.9. NAVBAR DE LOS TUTORES .................................................................................................................... 61 FIG. 3.10. INICIO DE USUARIO TUTOR .................................................................................................................. 62 FIG. 3.11. NOTIFICACIONES DE INICIO ................................................................................................................. 63 FIG. 3.12. LISTA DE PLANES DE FORMACIÓN Y CAPACITACIÓN PERTENECIENTES AL TUTOR .............................................. 63 FIG. 3.13. NUEVO NAVBAR UNA VEZ DENTRO DE UN PLAN DE FORMACIÓN Y CAPACITACIÓN........................................... 64 FIG. 3.14. PRIMERA VISTA DE INFORMACIÓN PERTINENTE AL PLAN DE FORMACIÓN SELECCIONADO ................................. 64 FIG. 3.15. SEGUNDA VISTA DE INFORMACIÓN SOBRE LA ADECUACIÓN DE PLAN DE FORMACIÓN ...................................... 65 FIG. 3.16. VISTA SOBRE ACTIVIDADES QUE DEBE CUMPLIR EL INSTRUCTOR (ADECUACIÓN) ............................................. 65 FIG. 3.17. BOTONES DE “VER OBSERVACIONES” CAMBIA DE COLOR DEPENDIENDO DE LA SITUACIÓN ............................... 66 FIG. 3.18. VISTA DE OBSERVACIONES AÑADIDAS, MOSTRANDO LA ENTIDAD EMISORA ................................................... 66 FIG. 3.19. LISTA DE INFORMES DE PLAN DE FORMACIÓN Y CAPACITACIÓN SELECCIONADO. ............................................. 67 FIG. 3.20. PRIMERA VISTA DE INFORMACIÓN PRESENTE EN LOS INFORMES.................................................................. 68 FIG. 3.21. VISTA DE LLENADO DE INFORMACIÓN DE LOS INFORMES ........................................................................... 68 FIG. 3.22. SELECCIÓN DE RESULTADOS. ............................................................................................................... 69 FIG. 3.23. MÚLTIPLES CAMPOS DE DATOS PERTENECIENTES A LOS RESULTADOS. .......................................................... 69 FIG. 3.24. SUB-MENÚ DE ADECUACIÓN. .............................................................................................................. 70 FIG. 3.25. VISTA PREVIA DE ADECUACIÓN. ........................................................................................................... 70 FIG. 3.26. MENSAJES DE VERIFICACIÓN. .............................................................................................................. 71 FIG. 3.27. INICIO DE INSTRUCTOR ...................................................................................................................... 71 FIG. 3.28. VISTA DE VISUALIZACIÓN DE INFORMACIÓN DEL INSTRUCTOR. ................................................................... 72 FIG. 3.29. VISTA DE VISUALIZACIÓN DE INFORMES DE INSTRUCTOR. .......................................................................... 72 FIG. 3.30. INICIO DE MÓDULO DE ENTIDAD .......................................................................................................... 73 FIG. 3.31. LISTADO DE ADECUACIONES DE MÓDULO DE ENTIDAD ............................................................................. 74 FIG. 3.32. MENSAJE DE CONFIRMACIÓN DE AVALAR DE CONSEJO DE FACULTAD .......................................................... 74 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383677 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383681 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383682 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383683 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383684 file:///C:/Users/Pedro%20Alejandro/Documents/UCV/Tesis/TEG_PedroRodriguez_VFinal.docx%23_Toc10383685 x FIG. 3.33. VISTA DE VISUALIZACIÓN DE INFORMACIÓN DE ADECUACIONES CON CAMPOS DE OBSERVACIONES, MÓDULO DE ENTIDAD .............................................................................................................................................. 75 FIG. 3.34. MENSAJE FLASH DE RETROALIMENTACIÓN ............................................................................................. 75 FIG. 3.35. VISTA DE INFORMACIÓN DE INFORMES CON CAMPOS DE OBSERVACIONES, MÓDULO DE ENTIDAD..................... 76 FIG. 3.36. FLUJO DE DOCUMENTOS ENTRE ENTIDADES IMPLEMENTADO ..................................................................... 76 FIG. 3.37. MENSAJE FLASH DE ERROR AL ENVIAR DOCUMENTO SIN LLENAR TODOS LOS CAMPOS NECESARIOS .................... 77 FIG. 3.38. TABLA DE TODOS LOS ESTADOS POSIBLES QUE PUEDE TOMAR UN DOCUMENTO ............................................. 78 FIG. 3.39. DOCUMENTO ESTANDARIZADO DE ADECUACIÓN EXPORTADO POR EL SISTEMA (1) ......................................... 80 FIG. 3.40. DOCUMENTO ESTANDARIZADO DE ADECUACIÓN EXPORTADO POR EL SISTEMA (2) ......................................... 81 FIG. 3.41. VERSIONES ANTERIORES DEL DOCUMENTO ENVIADO ................................................................................ 82 FIG. 3.42. COLUMNAS Y TIPO DE DATO DE LA TABLA QUE ALMACENA EL PDF .............................................................. 82 FIG. 3.43. VISTA DE CORREO ELECTRÓNICO EMITIDO JUNTO AL ARCHIVO ADJUNTO. ...................................................... 84 FIG. 3.44. INICIO DE MÓDULO DE SECRETARIA. .................................................................................................... 85 FIG. 3.45. PESTAÑAS DESPLEGABLES DEL MENÚ PRINCIPAL DEL MÓDULO DE SECRETARIA. ............................................. 85 FIG. 3.46. SELECCIÓN DE TUTOR A MODIFICAR. ..................................................................................................... 85 FIG. 3.47. VISTA DONDE SE AGREGA O MODIFICA DATOS DE LOS TUTORES .................................................................. 86 FIG. 3.48. VISTA DONDE SE AGREGA O MODIFICA DATOS DE LOS INSTRUCTORES .......................................................... 86 FIG. 3.49. VISUALIZACIÓN DE SOPORTES DE ACTIVIDADES DE INFORMES. ................................................................... 87 FIG. 3.50. CARGA DE DOCUMENTOS DE SOPORTES ................................................................................................ 88 FIG. 4.1. PRODUCT BACKLOG DE ERRORES PRESENTES EN FORMINST ...................................................................... 92 FIG. 4.2. ESCALA DE MEDICIÓN DE LIKERT ............................................................................................................ 94 FIG. 4.3. TIPOS DE USUARIOS PARTICIPANTES EN EL FORMULARIO. ............................................................................ 95 FIG. 4.4. CHART PREGUNTA 1 INSTRUCTOR. ......................................................................................................... 98 FIG. 4.4. CHART PREGUNTA 2 INSTRUCTOR. ......................................................................................................... 99 FIG. 4.5. CHART DE PREGUNTA GENERAL DE PREFERENCIAS DE FUNCIONALIDAD......................................................... 105 FIG. 4.6. CHART DE PREGUNTA GENERAL DE PREFERENCIA DE USO. ......................................................................... 105 FIG. 4.7. RESPUESTAS DEL FEEDBACK DEL SISTEMA ............................................................................................... 106 xi Índice de Tablas TABLA 2.1. VENTAJAS Y DESVENTAJAS DEL FRAMEWORK RUBY ON RAILS ................................................................... 41 TABLA 3.1. PRODUCT BACKLOG DE FORMINST. .................................................................................................. 49 TABLA 3.2. GUÍA DE ESTILO DE FORMINST. ....................................................................................................... 56 TABLA 4.1. PRIORIDADES PREDETERMINADAS PARA LOS ERRORES ............................................................................. 90 TABLA 4.2. ERRORES RECOPILADOS A LO LARGO DEL DESARROLLO DEL SISTEMA POR PARTE DE LOS USUARIOS. ................... 91 TABLA 4.3. PRINCIPIOS EMPLEADOS EN EVALUACIÓN HEURÍSTICA. ............................................................................ 94 TABLA 4.4. RESULTADOS DE EVALUACIÓN DE NIELSEN SOBRE USABILIDAD. ................................................................. 96 TABLA 4.5. RESULTADOS DE HEURÍSTICAS RESUMIDAS POR ENCUESTADO. .................................................................. 97 TABLA 4.6. RESULTADOS DE PREGUNTAS 3,4 Y 5 DE LOS INSTRUCTORES. ................................................................... 99 TABLA 4.7. RESULTADOS DE PREGUNTAS 1,2,3,4 Y 5 DE LOS TUTORES. ................................................................... 100 TABLA 4.8. RESULTADOS DE PREGUNTAS 1 Y 2 DE LAS SECRETARIAS. ....................................................................... 101 TABLA 4.9. RESULTADOS DE PREGUNTAS 1, 2 Y 3 DE ENTIDADES. ........................................................................... 101 xii Índice de Código CÓDIGO 3.1. MÉTODO DE ENCRIPTACIÓN. ........................................................................................................... 60 CÓDIGO 3.2. CONFIGURACIÓN BÁSICA DEL DAEMON. ............................................................................................ 79 CÓDIGO 3.3. GEMAS NECESARIAS PARA LA EXPORTACIÓN DE PDF. ........................................................................... 79 CÓDIGO 3.4. CONVERSIÓN DE DATA DE MYSQL A PDF EN RAILS. ............................................................................ 82 CÓDIGO 3.5. MÉTODO DE GENERACIÓN DE MÓDULO CORREOS (MAILER) ................................................................... 83 CÓDIGO 3.6. INFORMACIÓN REQUERIDA PARA CORRECTA VINCULACIÓN DE CORREO ELECTRÓNICO EMITENTE. ................... 83 CÓDIGO 3.7. VERIFICACIÓN DE CARGA ÚNICA EN FORMATO PDF. ............................................................................. 88 CÓDIGO 3.8. VERIFICACIÓN DE LÍMITE DE TAMAÑO DE ARCHIVO A CARGAR. ................................................................ 88 CÓDIGO 3.9. VALIDACIÓN DE RESTRICCIONES PREVIAMENTE MENCIONADAS. .............................................................. 89 CÓDIGO 3.10. GEMA REQUERIDA PARA ESTABLECER CONEXIÓN CON LDAP. ............................................................... 89 CÓDIGO 3.11. CONFIGURACIÓN PARA CONEXIÓN CON LDAP DE CORREO INSTITUCIONAL DE LA FACULTAD DE CIENCIAS. .... 89 xiii Introducción La Universidad Central de Venezuela es la primera Universidad Pública y Autónoma del país, dedicada a la Docencia, Investigación y Extensión. A lo largo del tiempo, esta institución ha ido avanzando conforme a la evolución tecnológica, tratando de estar a la vanguardia en este tema con la finalidad de evitar la obsolescencia. Para evitar este fin, la misma se ha actualizado con respecto a diversas automatizaciones de procesos, ya sean académicos o gerenciales, ahorrando a su vez posibles problemas reflejados al llevar a cabo procesos de forma manual. Actualmente, la Facultad de Ciencias de la Universidad Central de Venezuela cuenta con diversos sistemas que apoyan diversos servicios y gestión de procesos de la facultad, tanto para profesores, estudiantes y personal administrativo; entre estos sistemas se encuentran los de manejo y gestión de procesos, con la finalidad de automatizar los procesos antes llevados a cabo de manera manual y mejorar la calidad de estos, y derivando así el óptimo manejo de la información. Uno de los procesos que se ha querido automatizar dentro de la misma son el seguimiento, gestión y control de las adecuaciones de planes de formación y capacitación de los docentes/investigadores instructores en período de plan de formación; el mismo conlleva un flujo, un conjunto de actores, recursos y documentos utilizados por el proceso, todo esto para llevar un control de la formación y capacitación de los instructores en la universidad. A través de este Trabajo Especial de Grado se persigue el desarrollo de una solución automatizada para la gestión y seguimiento de los planes de formación y capacitación de los profesores instructores en plan de formación dentro de la Facultad de Ciencias de la Universidad Central de Venezuela, como una iniciativa que impulse la optimización de tiempos y manejo de la información de estos trámites administrativos, utilizando a su vez tecnologías innovadoras existentes en el campo de desarrollo web. Con el objetivo de cubrir todos los temas de interés, el presente trabajo se encuentra estructurado de la siguiente manera: • Capítulo 1: este capítulo está relacionado con la problemática presente en la Facultad de Ciencias referente a la gestión manual de los planes de formación y capacitación. Igualmente se presenta la justificación de la solución al problema planteado, además del objetivo general, los objetivos específicos, consideraciones de propuesta y el alcance del TEG. • Capítulo 2: en este capítulo se estudian los diversos desarrollos previos e intentos de automatización referente a los problemas planteados anteriormente xiv pertenecientes al manejo de los planes de formación y capacitación dentro de la Facultad de Ciencias de la UCV, esto con la finalidad de dar a conocer información como están estructurados y su funcionamiento en general. De igual manera se exponen las tecnologías utilizadas en el desarrollo del sistema, indicando los beneficios del empleo de las mismas. • Capítulo 3: en este se estudia el método ágil de desarrollo Scrum, sus distintos artefactos, ciclos de vida, iteración y a su vez como se realizó una adaptación del mismo para poder llevar a cabo el desarrollo del presente TEG. • Capítulo 4: este capítulo se presentan las pruebas de funcionalidad y usabilidad aplicadas a los usuarios del sistema y se analizan los resultados obtenidos, poniéndolos en contexto para lograr extraer una retroalimentación. 1 Capítulo 1: Tema de Investigación En el presente capítulo se describirá el planteamiento del problema, posteriormente, se plantearán los objetivos generales y específicos del proyecto, se desarrollarán las consideraciones pertinentes, se determinará el alcance del proyecto y, finalmente, se describirán las herramientas a utilizar en el desarrollo de la solución propuesta. 1.1. Planteamiento del Problema En la actualidad, la UCV cuenta con una planta profesoral de aproximadamente 8.000 docentes distribuidos en los diferentes escalafones universitarios a través de once (11) Facultades, cinco (5) núcleos de estudios supervisados y doce (12) Estaciones Experimentales [9]. Ubicados en la categoría de “Profesor Instructor Ordinario” se cuenta con 960 profesores, esto significa, que dichos docentes se encuentran enmarcados en un período de formación y capacitación como docente e investigador. Desde el instante en que un profesor instructor gana el concurso de oposición se inician una serie de trámites y procesos pertenecientes al plan de formación y capacitación que debe cumplir el instructor, estos procesos son la elaboración, entrega, evaluación y aprobación de la adecuación del plan de formación y capacitación, y de los informes semestrales, anuales y final. Hoy en día, todos los documentos y trámites requeridos para la realización de los procesos mencionados son elaborados de forma manual; situación que trae consigo una serie de inconvenientes que serán detallados a continuación. Los planes de formación y capacitación, al ser gestionados manualmente en la actualidad, crean una serie de factores que desfavorecen el flujo general del proceso. Hoy en día, cuando el documento llega a una entidad intermedia, existe la probabilidad de que la misma, dependiendo del nivel de observaciones agregadas, pueda devolver el trámite al tutor encargado, derivando en retardos del trámite para escalar a la siguiente entidad hasta realizar las correcciones que consideren necesarias, como consecuencia, un proceso que debería de tardar un par de semanas puede llegar a tardar incluso meses antes de escalar a Consejo de Facultad. Aunado al factor anteriormente mencionado, se tiene el uso inadecuado de los recursos universitarios, ya que debido a las múltiples solicitudes de correcciones en los documentos se puede llegar a tener una gran cantidad de impresiones que, tal vez ni siquiera, lleguen a las manos de los miembros de Consejo de Facultad. Los aspectos expuestos con anterioridad no son los únicos que pueden afectar el flujo de los procesos de planes de formación y capacitación, adicionalmente se tiene que, al tratarse de un proceso manual, se es mucho más tedioso la creación de los documentos por parte de los tutores y la revisión de los mismos en las entidades. De igual manera, el 2 proceso actual implica la impresión de los documentos, y posteriormente al ser aceptados, su almacenamiento. Esto trae consigo la necesidad por parte de la institución de poseer un recinto lo suficientemente grande y cuidado para almacenar todos los documentos necesarios y garantizar su integridad y correcta organización. Otra problemática latente es la desinformación, por parte de instructores y tutores sobre el conocimiento del estado actual que lleva el trámite, problema que destaca aún más en los instructores ya que solo reciben información de sus tutores. Por último, pero no menos importante, se tiene el nivel de dificultad que implicaría la búsqueda de un documento de plan de formación y capacitación. Como se mencionó con anterioridad, al tener la necesidad de almacenar los documentos en un recinto que garantice su integridad, si se llegara a requerir un escrito con gran antigüedad se tendrá que indagar en todos los documentos almacenados, proceso que, según la organización, cantidad de archivos almacenados y antigüedad del mismo, podría llegar a tardar extensos periodos de tiempo. 1.2. Antecedentes En el año 2013 un par de bachilleres, en conjunto con la coordinación de la Prof. María Villapol, iniciaron el proceso de automatización de planes de formación y capacitación de la Facultad de Ciencias de la Universidad Central de Venezuela bajo el nombre de FORMINST. Para la implementación de un sistema que lograra dicho objetivo, el grupo de desarrollo decidió trabajar con Rails, bajo el lenguaje de programación Ruby y utilizando como manejador de base de datos MySQL. La primera versión de FORMINST estaba constituida por 3 módulos: • Tutor: ente encargado de iniciar el flujo del plan de formación y capacitación. El tutor tenía el deber de crear desde cero la adecuación de plan de formación y capacitación, añadiendo así toda información propia del concurso y del instructor, e ingresando, del mismo modo, los datos necesarios para la futura autenticación del instructor en el sistema. Adicionalmente el módulo de tutor permitía la creación de los informes y el envío de los distintos documentos. • Instructor: el módulo de instructor funcionaba únicamente para la visualización de sus documentos correspondientes junto con el estatus de sus trámites. • Entidad: el módulo de entidades permitía que el usuario pudiera revisar y agregar observaciones a los distintos documentos, dando igualmente la potestad de decir si realizar el envío del escrito a la siguiente entidad o regresarlo a tutor encargado para la corrección de errores. La primera versión de FORMINST fue puesta en producción a principios del 2014, y a principios del 2015 fue dado de baja. La razón por la cual el sistema solo duro 3 aproximadamente un año en producción se debió principalmente a las múltiples restricciones a las que se encontraban atados los tutores, entre unas de ellas se encontraba el no permitir las cargas de avances de informes a menos que el tramite anterior haya sido avalado por Consejo de Facultad. Aunado con las cargas de informes, se sumó la inconformidad de los usuarios con respecto a cómo evolucionaba el tramite dentro del flujo que poseían en el sistema, dicho flujo, mostrado en la figura 5.1 y 5.2 permitía que cualquier entidad anterior a Consejo de Facultad pudiera regresar el documento al tutor encargado siempre que lo considerara necesario, esta implementación de diseño produjo como consecuencia el aumento en los tiempos de los trámites. Además, no existían las notificaciones en cambio de estado, por lo tanto, los usuarios del sistema no sabían en qué estado se encontraba el trámite. Por último, la falta de un módulo encargado de cargar la información de los usuarios al sistema, evitando dar mayor flexibilidad al mismo, debido a esto cualquier cambio que requirieran los usuarios implicaba un gran costo en tiempo y la modificación de múltiples líneas de código de la aplicación. Fig. 1.1. Flujo de Trabajo de la Primera Versión de FORMINST (Escuelas) 4 Fig. 1.2. Flujo de Trabajo de la Primera Versión de FORMINST (Institutos) En febrero del 2015, luego de más de un año de la primera versión de FORMINST, los docentes encargados del proyecto conformaron un nuevo grupo de desarrollo, dicho grupo estaba constituido por otro grupo de bachilleres estudiantes de computación. La razón que llevo a los profesores a la conformación de un nuevo grupo de trabajo fue la idea de crear una nueva aplicación web que erradicara las deficiencias de la versión anterior. En diciembre del 2015, por falta de desarrolladores, se tuvo que suspender la implementación del sistema dejando inconcluso e incluso inexistentes la mayoría de los módulos necesarios, por lo cual la segunda versión de FORMINST no logró salir a producción y los tramites de plan de formación y capacitación se siguen ejecutando de forma manual hasta la actualidad. 1.3. Justificación Aun cuando la principal razón para la realización del proyecto es tener un mayor control de las actividades de gestión y seguimiento de planes de formación y capacitación en conjunto con la posible reducción de tiempos que duran estos tramites, existen un gran número de beneficios que pretende lograr la implementación del sistema. Este nuevo desarrollo pretende estandarizar el modo a través del cual los tutores realizan el documento de adecuación y sus informes respectivos, mientras que, de igual manera, disminuye el esfuerzo requerido por parte del docente para la elaboración del escrito. Por otra parte, se busca disminuir la posibilidad de cometer errores por parte del tutor, autocompletando los campos del documento que ya estén previamente definidos. 5 Otro de los logros que pretende cumplir el futuro sistema consiste en mantener informado al instructor sobre el estado de su plan de formación y capacitación, mientras que, de igual manera, se pretende evitar el retraso, por parte del tutor, en el envío de los documentos correspondientes. La automatización del proceso de plan de formación y capacitación no solo busca beneficiar a los docentes tutores e instructores, de igual manera, busca favorecer a los docentes miembros de las distintas entidades, notificando a los mismos sobre los documentos recibidos, permitiéndoles ingresar observaciones de forma organizada y teniendo un control de las distintas versiones de los documentos enviados por el tutor. 1.4. Objetivo General Implementar un sistema automatizado para la gestión y seguimiento de los planes de formación y capacitación de los profesores instructores en plan de formación en la Universidad Central de Venezuela. 1.5. Objetivos Específicos • Realizar un estudio sobre el funcionamiento manual de los procesos de planes de formación y capacitación en la Facultad de Ciencias. • Determinar los requerimientos funcionales y no funcionales para el desarrollo del sistema automatizado basado en la gestión del proceso actual, especificando el flujo de documentos e interfaces de usuario. • Diseñar modelo de datos requerido para el almacenamiento de toda la información referente al proceso de gestión y seguimiento de los planes de formación y capacitación. • Desarrollar el sistema automatizado, con sus distintos módulos y funcionalidades, para la gestión y seguimiento de los planes de formación y capacitación. • Aplicar pruebas funcionales y de usabilidad. 1.6. Consideraciones de la propuesta El desarrollo actual tiene la finalidad de solventar los posibles retrasos ocurridos en la actualidad en el flujo del proceso de plan de formación, al igual que busca evitar el uso innecesario de los recursos disponibles en la facultad de ciencias de la Universidad Central de Venezuela. De igual manera se pretende facilitar la forma en la que los tutores 6 realizan los documentos correspondientes, evitar retardos por parte del mismo, mantener informado al instructor sobre el avance de su adecuación e informes, entre otros. Para determinar el flujo de los documentos dentro del sistema se utilizará como base el diagrama mostrado en la Figura 1.2, sin embargo, se decidieron realizar ciertos ajustes en el mismo con la finalidad de buscar garantizar una mayor eficiencia en el proceso, dichos ajustes se encuentran reflejados en la figura 1.3. Es importante destacar la necesidad de crear nuevos roles dentro del sistema, aun cuando estos no se encuentren presentes de manera trivial en el proceso manual llevado a cabo actualmente. Para dar inicio a la creación del plan de formación y capacitación dentro del sistema, se creará un nuevo rol encargado de introducir toda la data referente al tutor, instructor y concurso de oposición, logrando como resultado la notificación de dichos docentes y la permisología de ingreso al sistema por parte de los mismos. Entre otros roles de importancia para el correcto funcionamiento de la aplicación web se encuentran: Tutor, Instructor, Comisión de Investigación, Consejo de Escuela, Consejo Técnico, Consejo de Facultad, entre otros. 7 Fig. 1.3. (BPMN) Flujo Ideal de Documentos (Informes y Adecuaciones) de Plan de Formación 8 1.6.1. Herramientas a utilizar Luego de analizar las ventajas y desventajas de las distintas herramientas disponibles y tomando en cuenta las tecnologías utilizadas en las versiones anteriores del sistema, se tomó la decisión de utilizar las siguientes herramientas: • Lenguaje de programación Ruby, con una versión superior a la 4.0. • Framework de desarrollo Ruby on Rails, con version 5.0.1. • Base de datos relacional MySQL. • Visual Studio Code y Sublime Text como entorno de desarrollo integrado (IDE). • MySQL Workbench como herramienta visual de diseño de bases de datos. • SCRUM como metodología de desarrollo. • Github como sistema de manejo de versiones remoto. 1.6.2. Alcance El alcance del TEG abarca la construcción de un sistema, accesible desde la web, que permita la automatización de los procesos de planes de formación y capacitación, cumpliendo con las siguientes funcionalidades: • Diseño Responsive, con fácil manipulación hasta las pantallas 800x600. • Inserción, modificación y asignación de tutores e instructores a través del módulo de secretaria. • Inicio de sesión a través del correo institucional y con la clave del mismo. • Creación y llenado del documento de adecuación del plan de formación y capacitación por parte del tutor. • Envío de la adecuación del plan de formación y capacitación solamente por el tutor y entidades. • Carga de soportes solo en formato PDF. • Escalamiento automático en el flujo luego de estar 3 semanas en una entidad. • Envío de recordatorios y notificaciones a través de correos y de la aplicación web. • Ingreso de observaciones solamente por parte de las entidades y el tutor. • Control de versiones de los documentos, cuando ya haya por Consejo de Facultad. • Generación del documento solo en formato PDF. Funcionalidades no contempladas: • Diseño Responsive para dispositivos móviles (Smartphones). • El desarrollo de un módulo de administración. • Funcionalidad que permita el procesamiento de prorrogas. • Funcionalidad para detener un plan de formación y capacitación y retomarlo posteriormente en el tiempo. 9 Capítulo 2: Marco Teórico Esta investigación se enmarca en el área del proceso gestión de Planes de Formación y Capacitación de la Facultad de Ciencias de la Universidad Central de Venezuela. Por lo que en el siguiente capítulo se darán a conocer conceptos relevantes que se tomaron en cuenta para la realización y desarrollo del sistema de gestión. 2.1. Tecnología de la Información Al hablar sobre tecnología de información se refiere a todos los componentes de hardware y software necesarios para proveer información a una empresa u organización. En teoría las tecnologías de información podrían ser componentes de hardware tan sencillos como un lápiz y una hoja de papel, sin embargo, a lo largo del presente capítulo se tendrá un enfoque sobre los sistemas de información basados en computadoras; por lo cual, las tecnologías de información estarán centradas en componentes de hardware computarizados [1]. 2.1.1. Sistemas de Información Según O’Brien et. al [1]: “Un sistema de información (SI) puede ser cualquier combinación organizada de personas, hardware, software, redes de comunicación y recursos de información que almacene, recupere, transforme y disemine información en una organización”. Los sistemas de información tienen funciones relevantes dentro de las organizaciones, estos permiten solucionar problemas de las mismas y realizar tomas de decisiones que requieran reportes. El objetivo de dichos sistemas es apoyar actividades tales como la obtención, almacenamiento, manipulación y aplicación de la información para permitir ayudar a lograr las metas empresariales, siendo estas tareas fundamentales para el éxito de la institución [2]. Según O’Brien et. al [1], los sistemas de información se pueden clasificar, según se muestra en la Figura 2.1, en: • Sistemas de apoyo a las operaciones o Sistemas de procesamiento de transacciones: como su nombre lo indica, procesan los datos devueltos por las transacciones de la organización, actualizan las bases de datos operativas y producen documentos de negocio. o Sistemas de control de procesos: monitorean y controlan los procesos industriales. o Sistemas de colaboración empresarial: apoyan la colaboración y las comunicaciones empresariales, de equipos y de grupos de trabajo. 10 • Sistemas de Apoyo administrativo: o Sistemas de información gerencial: proporcionan información en forma de reportes para apoyar la toma de decisiones de la organización. o Sistemas de apoyo a la toma de decisiones: proporcionan apoyo interactivo específico para los procesos de toma de decisiones de directivos y otros profesionales de los negocios. Un ejemplo de estos son los sistemas de fijación de precios de productos. o Sistemas de información ejecutiva: proporcionan información crítica a partir de sistemas de información administrativos (SIA), sistemas de apoyo a la toma de decisiones (SAD) y de otras fuentes, a la medida de las necesidades de información de los ejecutivos. Entre los ejemplos destacables se encuentra los sistemas para el fácil acceso a análisis de desempeño del negocio, acciones de competidores y desarrollos económicos para apoyar la planeación estratégica. Es importante destacar que existen otras clasificaciones de los sistemas de información las cuales no se pueden incluir dentro de la estructura mostrada en la Figura 2.1, Un resumen de estas son: • Sistemas expertos. • Sistemas de administración de conocimientos. • Sistemas de información estratégica. • Sistemas funcionales de negocios. Fig. 2.1. Clasificación operativa y administrativa de los sistemas de información [1]. 11 2.1.1.1. Componentes de los Sistemas de Información La era de la computación introdujo un nuevo elemento en las empresas, universidades y otras organizaciones. Dicho elemento, denominado Sistema de información, consiste en un conjunto de componentes encargados de la recopilación y organización de datos e información. Los elementos que conforman un sistema de información son: • Hardware: tecnología física que trabaja con la información. El hardware incluye los dispositivos periféricos que funcionan con computadoras, como teclados, unidades de disco externas y enrutadores [3]. • Software: la real academia española define un software como un conjunto de programas, instrucciones y reglas informáticas cuya función principal es la ejecución de ciertas tareas a través de un computador. Estos pueden ser divididos en dos tipos: software de sistema y software de aplicación. La pieza principal del software del sistema es el sistema operativo, el cual se encarga de administrar la operación del hardware; mientras que, por otra parte, el software de aplicación está diseñado para tareas específicas, como el manejo de una hoja de cálculo, la creación de un documento o el diseño de una página web [3] [4]. • Telecomunicaciones: componente encargado de conectar diversos dispositivos con la finalidad de formar una red. Las redes se pueden dividir en dos grandes grupos: alámbrica e inalámbrica, las primeras están conformadas por todas aquellas conexiones que se realizan a través de cableados, ya sean conexiones Ethernet, de fibra óptica, entre otras; mientras que, las redes inalámbricas son aquellas que se realizan a través de ondas electromagnéticas, como lo es el caso de las redes WI-FI [3]. • Bases de datos: sistema computarizado de almacenamiento de registros el cual permite la realización de diversas operaciones, entre las cuales se pueden destacar la inserción, modificación y eliminación de registros. En sí misma, una base de datos puede ser vista como un repositorio de archivos de información computarizado [3] [5]. • Recursos humanos y procedimientos: el último componente de los sistemas de información es el elemento humano. Con esto se refiere a las personas que se necesitan para ejecutar el sistema y los procedimientos necesarios para la extracción de la información de la base de datos con la finalidad de generar una base de conocimiento para la organización [3]. 2.1.1.2. Actividades de los Sistemas de Información En los sistemas de información ocurren una serie de actividades básicas para el procesamiento de los datos. En la Figura 2.2 se pueden observar dichas actividades, las cuales según O’Brien et. al [1] se dividen en: 12 • Entrada de datos: la entrada de datos se encuentra compuesta principalmente por el registro y la edición. Frecuentemente, los datos acerca de las transacciones y otros eventos de los negocios son introducidos directamente en los sistemas de información, mientras que, en otras ocasiones, estos se registran a través de distintos medios físicos como los son los formularios de papel; esto trae como consecuencia el hecho de tener que realizar una serie de actividades de edición que garanticen que los datos se han registrado de forma correcta. • Procesamiento de datos en información: por sí solo, los datos pueden no generar un conocimiento significativo para la empresa, por lo cual, a través de actividades de cálculo, comparación, ordenamiento, clasificación y resumen se logra organizar, analizar y manipular los datos con la finalidad de convertirlos en información relevante para los usuarios finales. La calidad de los datos almacenados en un sistema de información también debe mantenerse mediante un proceso continuo de corrección y actualización de las actividades. • Salida de información: el objetivo de los sistemas de información es la elaboración de productos de información; los cuales, a través de la actividad de salida, pueden ser entregados por medio de mensajes, informes, formularios, o incluso imágenes gráficas a los usuarios finales. Fig. 2.2. Componentes y actividades de un Sistema de Información. Adaptación de [13] 13 • Almacenamiento de Datos: el almacenamiento es un componente básico del sistema de sistemas de información. El almacenamiento es la actividad del sistema de información en la que los datos y la información se conservan de manera organizada para su uso posterior. • Control del desempeño del sistema: los sistemas de información deben producir una retroalimentación en sus actividades de entrada, procesamiento, salida y almacenamiento con la finalidad de monitorear y evaluar que el sistema cumpla con los estándares de desempeño establecidos. 2.1.2. Sistema de Control de Procesos Este tipo de sistema de información es un conjunto de métodos, herramientas y tecnologías utilizados para diseñar, representar, analizar y controlar procesos operacionales. Conlleva un enfoque centrado en los procesos para mejorar el rendimiento que combina las tecnologías de la información con metodologías de proceso. Estos tipos de sistemas derivan el enfoque sistemático de identificar, levantar, documentar, ejecutar, medir y controlar tanto los procesos llevados a cabo de manera manual como lo automatizados, con la finalidad de lograr a través de sus resultados, en forma consistente, los objetivos del negocio o institución que se encuentran alineados con este sistema. Es importante especificar que el trabajo desarrollado se encuentra enmarcado dentro de este tipo de sistema de información. 2.1.2.1. Sistemas de Información en la Educación Superior En el ámbito educacional, la información es esencial para la toma de decisiones, esta constituye un recurso clave y un requisito previo para la correcta gestión de los servicios. El fácil acceso a la información es fundamental para los servicios educativos, ya que ayudan a la planificación, el diagnóstico y la supervisión de los planes y programas dentro del instituto, mientras que, permiten la evaluación de las actividades educativas [6]. Uno de los retos más desafiantes de la educación superior en la actualidad es el perfeccionamiento de la gestión universitaria y de cada uno de los procesos que la integran. En la Conferencia Mundial sobre la Educación Superior, organizada en París por la UNESCO en 1998, se expresó el deber de generalizar las nuevas tecnologías para apoyar a los centros de educación superior a reforzar el desarrollo académico, ampliar el acceso a las mismas, extender el saber y facilitar la educación durante toda la vida. De igual manera, se planteó la utilización plena de las tecnologías de información y la 14 comunicación para lograr la ampliación de la transmisión del saber, y poner el conocimiento y la información al alcance de un público más amplio [7][8]. Es esencial que los sistemas de información en educación proporcionen una amplia gama de datos, ya que se necesita un sistema que permita contar con información correspondiente al alumnado, los docentes, los investigadores, la administración, entre otros, con la finalidad de solucionar los problemas de la institución y evaluar los efectos de las acciones educativas, tanto internamente como en la sociedad. Es importante resaltar que, los sistemas de información de gestión en la educación superior no pueden ser vistos únicamente como un registro de datos históricos, ya que estos son una herramienta de apoyo a las decisiones, y por tanto deben cumplir con siguientes objetivos [6]: • Suministrar toda la información necesaria para el correcto funcionamiento de la institución. La información manejada abarcará desde la actividad rutinaria hasta aquella necesaria para el proceso de planificación a largo plazo y para implementar procesos de auto evaluación, evaluación externa, acreditación y convergencia. • Proporcionar información para el control de la totalidad de actividades, pudiendo comprobar el cumplimiento de las metas establecidas. • Facilitar, simplificar o realizar automáticamente procesos que tradicionalmente se realizaban de forma manual. Por ejemplo: Procesos de control presupuestario, registro de avance del aprendizaje, entre otros. • Adaptarse a los cambios en las necesidades de información de la organización, como lo podría ser una reforma de estudio. Para lograr el alcance de los objetivos mencionados los sistemas de información de gestión deben ser capaces de poder realizar las siguientes tareas: • Recibir datos provenientes de la propia universidad, o incluso, de otras universidades, con el costo más bajo posible y sin errores ni defectos. • Evaluar la calidad y la importancia relativa de los datos de entrada con filtros y jerarquías adecuadas que permitan la racionalización de los recursos. • Procesar la información sin corromperla y transformarla para que sea de utilidad para el usuario actual o futuro, y ofrecerla a dicho personal para satisfacer sus necesidades, distribuyéndola de la manera más conveniente posible. 15 Cabe destacar que, si bien el trabajo desarrollado es para el beneficio de una institución universitaria, no conlleva un papel en el ámbito académico, sino más bien en el control de procesos internos. 2.2. Ingreso y Formación del Personal Docente y de Investigación de la Universidad Central de Venezuela La Universidad Central de Venezuela (UCV) es la más grande y antigua universidad del país. Sus inicios de fundación datan desde 1721. Ubicados en la categoría de “Profesor Instructor Ordinario” se cuenta con 960 profesores, lo que significa, que estos docentes se encuentran enmarcados en un período de formación y capacitación como docente e investigador [9]. Este Capítulo introduce el proceso completo de selección y formación de los instructores aspirantes en la Facultad de Ciencias de la UCV, estudiando a profundidad el mecanismo de ingreso de los docentes y todos los elementos que influyen en su plan de formación, tales como, su capacitación, su adecuación, los informes necesarios para el cumplimiento del plan, entre otros. 2.2.1. Mecanismo de Ingreso El Reglamento del personal docente y de investigación de la UCV [10] en su artículo número dos (2), establece que: “El ingreso como miembro ordinario del personal docente y de investigación de la Universidad Central de Venezuela solo puede efectuarse por concurso, por incorporación de miembros del personal ordinario de otras universidades o por reincorporación de profesores que hubieran dejado de ser miembros del personal ordinario de la Universidad Central de Venezuela. Los miembros del personal ordinario de otras universidades que se incorporen a la Universidad Central de Venezuela deberán entregar constancia certificada de que ingresaron por concurso de oposición en su universidad de origen y que han ascendido por la vía de trabajo de ascenso prevista en la ley de universidades”. Es importante destacar que el concurso mencionado en el reglamento del personal docente y de investigación de la UCV hace referencia al concurso de oposición, donde se establece que el mismo deberá consistir en un examen de la materia respectiva y una evaluación de credenciales de los aspirantes si fuese el caso. El examen de la materia estará constituido por dos partes: una prueba escrita acompañada por su posterior defensa y una prueba oral en la cual el participante del concurso deberá explicar un tema escogido al azar. Es importante tener en cuenta que el ingreso en la universidad no garantiza la permanencia en la misma, por lo cual, existen una serie de actividades que deberá realizar el docente que ingrese a la UCV con la finalidad de demostrar y perfeccionar sus capacidades. 16 2.2.2. Concurso de Oposición Para la realización de un concurso de oposición se debe publicar la convocatoria en al menos un diario de alta circulación y en los siguientes 30 días continuos los postulantes podrán realizar su inscripción en la secretaría del Consejo de Facultad respectivo, o en su defecto donde este señale. Al tratarse de un concurso en la categoría de Instructor debe hacerse entrega de un baremo con las condiciones o requisitos especiales, en caso de existir alguno; una copia del ante proyecto del programa de formación y capacitación al cual deberá someterse el ganador de concurso y una copia del programa de investigación al que se le incorporará [10]. Las personas que deseen participar en el concurso de oposición deben cumplir con las condiciones generales de orden moral, cívico y científico establecidas en la Ley de Universidades y, además, deberán cumplir los siguientes requisitos [10]: 1. Poseer título de cuarto nivel en la disciplina objeto de concurso. El Consejo de Facultad, en caso debidamente justificado, podrá establecer que sea suficiente el título de licenciado otorgado por una universidad venezolana, o su equivalente proveniente de una universidad extranjera considerada de reconocido prestigio por el Consejo de Facultad respectivo. 2. Los egresados de institutos de educación superior que no tengan la condición de universidad, podrán inscribirse y participar en el concurso, si, y solo si, han obtenido el título de Magister o de Doctor en una universidad considerada de reconocido prestigio por la Comisión de Estudio de Postgrado de la respectiva facultad. 3. No haber sido objeto de resolución de contrato, no haber sido revocado del personal docente y de investigación, ni haber recibido sanción por algunas de las faltas establecidas en el artículo 110 de la Ley de Universidades. 4. De ser extranjero se deberá poseer suficiente dominio de la lengua castellana y se necesitará poseer una visa que, según la legislación venezolana, les autorice a trabajar en el país. Para la evaluación del concurso es requerida la presencia de un jurado examinador el cual se verá compuesto por tres (3) miembros principales y otros tantos suplentes, es importante destacar que las personas que formen parte del jurado deberán ser profesores de reconocida competencia en la materia correspondiente. De tratarse de un concurso en la categoría de instructor, los miembros principales y suplentes que integren el jurado examinador deberán poseer categoría no menor a Agregado y serán propuestos por el Consejo de Escuela, Consejo Técnico u Organismo Académico correspondiente [10]. El concurso de oposición consiste en un examen sobre la materia a tratar y una evaluación de las credenciales de los aspirantes, de ser el caso; dicho examen estará compuesto por una prueba escrita y otra oral, las cuales deberán ser públicas y podrán presentarse en distintos días siempre que no transcurra un periodo mayor a diez (10) días entre ellas. La prueba escrita tratará de un tema perteneciente al programa del concurso, se elegirá a la suerte y será el mismo para todos los aspirantes; para su redacción, la cual no debe durar más de 4 horas, se podrá utilizar material bibliográfico, hemerográfico o de elaboración propia siempre que no se considere que el mismo comprometa la seriedad de la prueba. Al culminar la prueba escrita cada uno de los participantes deberán hacer una lectura pública de su redacción y una defensa oral de la misma, al culminar, se 17 promediarán las notas obtenidas en la defensa y el texto con la finalidad de obtener la calificación final de la prueba escrita [10]. La prueba oral del concurso de oposición consiste en desarrollar durante cuarenta y cinco (45) minutos un tema del programa, dicho tema se elegirá a la suerte y no podrá ser el mismo seleccionado en la prueba escrita. Cada aspirante poseerá quince (15) minutos para preparar su exposición y no podrá comunicarse con otras personas ni utilizar ningún material previamente elaborado. La nota final del examen estará constituida por el promedio de la prueba oral y escrita, siendo, en ambos casos, evaluados en una escala del cero (0) al veinte (20) [10]. 2.2.2.1. Planes de Formación y Capacitación Una vez que el aspirante haya aprobado y ganado el concurso de oposición estará obligado a seguir, en conjunto con las tareas del puesto que ocupa, un programa de capacitación en enseñanza e investigación durante un período de dos (2) años o cuatro (4) semestres, denominado plan de formación y capacitación, cuyo contenido dependerá esencialmente de la naturaleza de sus funciones [10]. Se definen el plan de formación y capacitación de docentes en la categoría de instructor, como el documento que contiene la planificación de las diferentes actividades de formación, docencia, investigación y extensión que el instructor debe llevar a cabo para capacitarse como profesor-investigador en la universidad, y al mismo tiempo acceder al sistema de promoción en el escalafón universitario [11]. Una vez conocido el veredicto, el tutor, dentro de los siguientes quince (15) días hábiles, deberá presentar ante el Consejo Técnico, Consejo de Escuela u Organismo Académico correspondiente, para la posterior aprobación del Consejo de Facultad respectivo, las modificaciones y ajustes necesarios para que el programa de formación y capacitación se adecue a las características del instructor ganador del concurso. El tutor deberá orientar, supervisar y evaluar el cumplimiento del programa de formación y capacitación en la docencia e investigación por parte del instructor, prestando así la ayuda, asesoría y orientación necesarias y solicitando información periódica correspondiente a la realización de las tareas y actividades contempladas en el programa [10]. A medida que transcurre el plan de formación y capacitación, el instructor, dada la culminación de los periodos determinados en dicho plan, deberá evaluar el cumplimiento de las obligaciones y progresos habidos del instructor a través de una serie de informes entregados al Consejo de Facultad correspondiente. De igual manera el tutor podrá proponer a Consejo de Facultad los reajustes que considere pertinentes en el programa de formación y capacitación, necesitando para esto el aval de Consejo de Escuela, Consejo Técnico u Organismo Académico Correspondiente [10]. Una vez transcurrido el tiempo cubierto por el programa, el tutor, con base a los informes parciales, deberá presentar ante el respectivo Consejo de Facultad un informe que contenga la evaluación final. Al igual que con los informes parciales, el tutor deberá enviar copia del informe final al instructor correspondiente [10]. 18 El plan de formación a ser desarrollado por el instructor está dirigido a fortalecer sus habilidades de enseñanza, esto para garantizar una docencia de buena calidad en las asignaturas, así como también desarrollar sus capacidades para la investigación. La actividad docente será asignada por el Tutor, Departamento o Escuela, mientras que, la actividad de investigación se llevará a cabo en el área que fue asignado, ya sea Laboratorio, Grupo, Centro o Instituto [10]. 2.2.2.2. Adecuación del Plan de Formación y Capacitación La adecuación del plan de formación y capacitación, también denominado programa de formación y capacitación, es un documento formalizado a través del cual, el tutor responsable del profesor instructor, especifica de forma detallada, las actividades que debe de realizar el instructor a lo largo de los siguientes dos años; con la finalidad de realizar su posterior análisis por medio de los entes correspondientes, para su futura evaluación con el objetivo principal de su aprobación y ejecución [10]. Posterior a la aprobación del concurso de oposición del aspirante, se debe informar al profesor tutor sobre el nombramiento definitivo del profesor instructor, actividad que requiere de la elaboración de la Adecuación del Plan de Formación y Capacitación al perfil del docente (instructor) que ganó el concurso. Este informe ha de incluir todos los datos referidos al plan de formación y capacitación, reseñando las actividades de docencia, investigación, formación y extensión que el docente realizará durante dicho período. El Consejo de la Escuela, Instituto o Coordinación incluye este informe para su aprobación en la Agenda del Cuerpo Colegiado [11]. Estas adecuaciones de planes de formación y capacitación constan de un perfil del Instructor a cursar el plan, así como también una especificación de todas las distintas actividades que debe cumplir, acopladas a distintas categorías, donde las mismas deben ser especificadas por semestres. En la figura 2.3. se puede visualizar como se estructura una adecuación de plan de formación y capacitación, explicándose que las actividades con cuadros más gruesos son aquellas que deben ser especificados en cada uno de los semestres del plan a seguir, esto para que luego se puedan constatar que fueron cumplidas por el instructor. Mientras que el primero, solo debe ser llenado una sola vez, debido a que es información del instructor que perdura a lo largo del plan. Por último, se encuentran los soportes que puedan generar algún tipo de validación de alguna actividad en específico. 19 Fig. 1.3. Componentes de una Adecuación de Plan de Formación y capacitación según la Facultad de Ciencias de la Universidad Central de Venezuela. Elaboración Propia A continuación, se define cada una de las actividades que deben ser descritas en la adecuación del plan de formación y capacitación según el Manual de procedimientos administrativos (MAPA-CACAD-01) [11]: • Actividades de Docencia: el instructor cumplirá con las actividades docentes de pregrado que sean asignadas por la unidad docente, el departamento o la escuela; al igual que deberá cumplir con las actividades de postgrado según sea el caso. Del mismo modo, es necesario indicar las asignaturas en las que participará el instructor, señalando la carga asignada en cada uno de los semestres. En aquellas escuelas donde existan asignaturas cuyo dictado sea obligatorio para todos los profesores, es necesario incluirlas. • Actividades de Investigación: si el instructor posee el grado académico de Doctor o equivalente, debe describirse a continuación el proyecto de investigación a ser desarrollado dentro del plan de formación y capacitación. En este caso se debe indicar: título del proyecto, objetivos, aspectos generales de la metodología, plan de trabajo y un cronograma de actividades detalladas por períodos semestrales. Si el instructor posee un grado académico inferior al de Maestría, necesariamente debe cursar estudios de postgrado. • Actividades de Formación y Capacitación: las actividades de formación y capacitación se encuentran divididas en dos grupos; que incluyen los cursos de capacitación docente (SADPRO), cursos de educación a distancia y cursos de 20 inducción del Servicio Comunitario; y por último el area profesional, incluyendo así, en los casos que aplica, los estudios de cuarto nivel. • Actividades de Extensión: el instructor participará en las actividades de extensión propias de la Facultad que pertenezca, en especial aquellas que se desarrollan desde la escuela, el centro o el instituto; al igual que debe ejercer las funciones propias de un tutor. • Otras Actividades: El instructor puede participar en comisiones, coordinaciones de asignaturas u otras actividades administrativas que la Escuela o Instituto requieran. Actualmente la adecuación de plan de formación y capacitación es realizada y enviada manualmente utilizando la estructura generalizada mostrada en las figuras 2.4 y 2.5. 21 Fig. 2.4. Formato de Adecuación Plan de Formación y Capacitación (1) 22 Fig. 3.5. Formato de Adecuación Plan de Formación y Capacitación (2) 2.2.2.3. Informes de Plan de Formación y Capacitación Una vez se ha llevado a cabo la aprobación del trámite de Adecuación del Plan de Formación y Capacitación, habiendo pasado por el flujo que se describirá posteriormente como el Flujo de Documentos del Plan de Formación y Capacitación; el Consejo de Escuela, Instituto o Coordinación, aprueba y remite el documento ante el Consejo de la Facultad de Ciencias, para su inclusión en la agenda del cuerpo colegiado. Cuatro (04) informes semestrales, dos (02) informes anuales y un (01) informe final deben ser presentados ante Consejo de Facultad para la comprobación de las actividades realizadas por el profesor instructor. 23 El llenado, revisión y envío de estos informes son de vital importancia, debido a que son los comprobantes de que el instructor a seguido o no las actividades que estaban pautadas a cumplir durante su período de formación y capacitación. Cada informe debe tener las actividades que estaban prescritas en la adecuación de plan de formación y capacitación, en conjunto con las actividades ejecutadas por el instructor, así como también se debe indicar cualquier observación sobre las actividades que realizó o dejó de realizar durante el período que corresponde al informe presentado. Otro aspecto importante a considerar en la elaboración de los informes es la divulgación de resultados, los mismos son proyectos realizados o publicados por el instructor en las actividades de investigación durante el período semestral correspondiente, entre estos se encuentran: • Trabajos publicados (Libros, revistas, artículos de prensa, CDs, manuales, publicaciones electrónicas, patentes, registros, etc.). • Presentación de ponencias, conferencias y carteles en eventos científicos. • Presentación de informes técnicos. • Otro tipo de actividad de resultados, el cual debe ser especificado. Una vez completados los informes, cuyo formato realizado y enviado de forma manual se encuentra en las figuras 2.6, 2.7, 2.8, 2.9 y 2.10, deberán atravesar un flujo de varias entidades que se encargarán de agregar observaciones a los documentos, al igual que con las adecuaciones, para su posterior aprobación o rechazo. 24 Fig. 2.6. Formato de Informe del Plan de Formación y Capacitación (1) 25 Fig. 2.7. Formato de Informe del Plan de Formación y Capacitación (2) 26 Fig. 2.8. Formato de Informe del Plan de Formación y Capacitación (3) 27 Fig. 2.9. Formato de Informe del Plan de Formación y Capacitación (4) 28 2.2.2.4. Flujo de Documentos del Plan de Formación y Capacitación Los planes de formación y capacitación inician un conjunto de procesos desde el momento en que un profesor instructor gana un concurso de oposición. Los principales procesos son: adaptación del plan de formación y capacitación; preparación, entrega, evaluación y aprobación de informes semestrales, anuales y finales. Si los planes de formación y capacitación están asociados con un instructor de una de las escuelas de la facultad, dichos procedimientos y documentos deben seguir el siguiente flujo: tutor (procedimiento de iniciación), Comisión de Investigación de la Escuela (evalúa, recomienda y realiza las observaciones), Consejo de Escuela (evalúa, recomienda y procesa) y Consejo de Facultad (evalúa y aprueba). En el caso de que los planes de formación y capacitación estén asociados con un instructor de uno de los Institutos de Investigación adscritos a la facultad, los procedimientos y documentos deben seguir el siguiente flujo: tutor (procedimiento de iniciación), Consejo Técnico del Instituto (evalúa, recomienda y tramita), Consejo de Escuela (evalúa, recomienda y procesa) y Consejo de Facultad (evalúa y aprueba). Cabe destacar que, en el caso particular de la Escuela de Biología, si el plan de formación y capacitación pertenece a un instructor adscrito a algunos de los departamentos de la Escuela, los tramites y documentos deben seguir el siguiente flujo: tutor (inicia tramite), departamento (evalúa, recomienda y tramita), Consejo de Escuela (evalúa, recomienda y tramita) y Consejo de Facultad (evalúa y aprueba). Fig. 2.10. Formato de Informe del Plan de Formación y Capacitación (5) 29 En la figura 2.11. se muestra el flujo manual que actualmente se implementa en el envío de documentos destinados a los planes de formación y capacitación en la Facultad de Ciencias. En principio el documento se encuentra siendo redactado por el tutor, bien sea una adecuación o informe; una vez culminado su desarrollo, el tutor deberá entregar el documento a la siguiente entidad para su posterior evaluación, esta entidad dependerá de la Escuela, Departamento o Instituto al que pertenezca el plan de formación y capacitación asociado. Una vez recibido el documento en la Comisión de Investigación, Departamento o Consejo Técnico correspondiente, el mismo deberá ser evaluado por todos los miembros pertenecientes a la entidad; estos podrán anotar observaciones para la mejora del escrito que luego será enviado a la siguiente entidad, sin embargo, en este proceso manual, los entes intermedios podrán devolver el documento directamente al tutor cada vez que lo consideren pertinente. Una vez revisado el documento, y siempre que no se considere necesaria su devolución al tutor, se deberá realizar su envío al Consejo de Escuela perteneciente al plan. El Consejo de Escuela realizará la misma función que la entidad anterior, podrá realizar observaciones, devolver el documento al tutor en caso de considerarlo necesario o entregar el tramite a la siguiente, y ultima, entidad del flujo. El papel de la última entidad dentro del flujo de los documentos del plan de formación y capacitación, denominado Consejo de Facultad, es esencial; esto se debe a que es el encargado de aprobar, aprobar con observaciones o regresar al tutor por observaciones mayores alguna adecuación o informe. Cada caso se define de la siguiente manera: • Aprobado: es el estado en el que es avalado el documento por Consejo de Facultad, sin ninguna observación, evidenciando que el mismo está bien desarrollado, definido y estructurado. Una vez una adecuación es aprobada sin observaciones por esta entidad, se le permite al tutor enviar los informes correspondientes al semestre o año. • Aprobado con Observaciones: en caso de ser aprobado con observaciones, será devuelto al tutor con las indicaciones pertinentes para su posterior revisión y edición; cabe destacar que, el tutor no deberá realizar el envío de ningún otro escrito correspondiente al plan de formación y capacitación hasta realizar las correcciones pertinentes. Una vez culminado los cambios solicitados por las distintas entidades solo se debe entregar el nuevo documento a Consejo de Facultad, sin necesidad de pasar por las entidades anteriores. • Regresado al Tutor por Observaciones Mayores: cuando el tramite posee correcciones que se consideren criticas según el Consejo de Facultad el mismo es 30 regresado al tutor para su posterior corrección, una vez el tutor realice los cambios pertinentes debe enviar el documento a Consejo de Facultad a la espera de su posterior aprobación. Aun cuando el presente estatus implica el mismo proceso por parte del tutor que al estar aprobado con observaciones, la diferencia se determina en la fecha de aprobación que aparece en la minuta de Consejo de Facultad. Aun cuando todos los documentos presentes en el plan de formación y capacitación disponen del mismo flujo, los informes poseen un caso excepcional que no es tomado en cuenta en los documentos de adecuación, dicho caso es ocasionado por el incumplimiento de las funciones del profesor instructor. Si un informe recibido por Consejo de Facultad demuestra que el profesor instructor no cumplió con las actividades establecidas en la adecuación del plan de formación y capacitación, la entidad, luego de haber aprobado la realización del informe, procederá a culminar el plan de formación y capacitación del instructor de manera no exitosa y, posteriormente, realizará los trámites necesarios que permitan las sanciones correspondientes al profesor instructor. 31 Fig. 2.11. (BPMN) Flujo de Documentos (Informes y Adecuaciones) entre las distintas entidades 2.2.3. Experiencia Previas de Automatización de Procesos en la Facultad de Ciencias La facultad de ciencias de la Universidad Central de Venezuela se ha adaptado con el pasar de los años a distintos sistemas de gestión académica creados por los propios estudiantes de la facultad, entres estos sistemas existen dos (2) que destacan por su gran uso en la institución: 32 • CONEST: CONEST, acrónimo de control de estudio, es un sistema de gestión académica implementado con Ruby on Rails bajo la arquitectura MVC cuyos inicios datan desde octubre del 2006 [12]. CONEST se encuentra formado por un conjunto de módulos que funcionan de manera integrada para satisfacer las necesidades de la unidad encargada de administrar y gestionar toda la información involucrada en los procesos administrativos y académicos del personal docente y estudiantil de la facultad de ciencias [12]. Otra de las herramientas utilizadas para la elaboración de CONEST se denomina Subversión y permite a los desarrolladores establecer sincronizaciones de versiones de código de acuerdo con las necesidades de cada grupo que interviene en el desarrollo [12]. Para finalizar, todos los datos capturados y/o procesados por el sistema se almacenan en un repositorio centralizado, normalizado, flexible y de alta configuración que cumple la función de una base de datos [12]. • SIGEPAS: SIGEPAS es un sistema de gestión académico implementado mediante ruby on rails y PostgreSQL como base de datos, cuyos orígenes datan desde mayo del 2013 [13]. SIGEPAS posee como objetivo la automatización de los procesos y actividades relacionadas a la inscripción, formalización y evaluación de los pasantes pertenecientes a la Escuela de Computación de la Universidad Central de Venezuela [13]. Los creadores del sistema decidieron utilizar la metodología de desarrollo AgilUS para el proceso de creación de la aplicación web. AgilUs es una metodología de desarrollo ágil, resultado de una de las líneas de investigación desarrolladas en el Centro de Ingeniería de Software y Sistemas (ISYS) de la escuela de computación de la UCV [13]. • Portalasig: La versión actual de Portalasig es un portal web que permite la comunicación entre docentes y alumnos de la facultad de ciencias de la Universidad Central de Venezuela, su diseño se encuentra basado en JavaScript 33 como lenguaje de programación, Node.js como plataforma de ejecución y Express.js como framework de desarrollo. Para la implementación del sistema se utilizó SCRUM como metodología de desarrollo de software y se realizaron cambios sobre su estructura con la finalidad de lograr su adaptación a las necesidades del proyecto. Portalasig utiliza PostgreSQL como manejador de base de datos, y para la integración entre el manejador y Express.js se utilizó un módulo ORM perteneciente a Node.js denominado Bookshelf.js. Otras herramientas utilizadas para la creación del frontend del sistema fueron los frameworks de Angular.js y Bootstrap junto con HTML5, CSS y JavaScript [14]. • Aplicación Web de Servicio Comunitario: La aplicación web de servicio comunitario tiene como objetivo la organización de los procesos de la unidad de servicio comunitario a través del uso de tecnologías de información y comunicación. Dicho sistema fue desarrollado a través de la metodología de desarrollo ágil de programación extrema. Para la implementación del backend se utilizó el lenguaje de programación Ruby bajo el framework de desarrollo de Rails, junto con MySQL como manejador de base de datos. Adicionalmente se utilizaron herramientas como HTML, JavaScript y CSS para la implementación del frontend de la aplicación [15]. • Aplicación Web de la Bolsa del Libro: La aplicación web de la bolsa del libro tiene como objetivo facilitar el control y la ejecución de los procesos que se llevan a cabo en la bolsa del libro, para esto la página dispone de nueve (9) módulos y dos (2) funcionalidades las cuales, entre otros aspectos, permiten: autenticar al usuario, solicitar el alquiler de un libro, solicitar solvencias, crear periodos académicos dentro de la aplicación y administrar los libros y usuarios existentes dentro de esta. Para la realización del sistema se utilizó la metodología de desarrollo de programación extrema, implementando cambios dentro de la misma con la finalidad de ajustarla a las necesidades del proceso. Adicionalmente se utilizó el lenguaje de programación Ruby a través del framework de desarrollo Rails para la realización de backend. La aplicación web de la bolsa del libro está desarrollada bajo una arquitectura cliente-servidor de 3 capas la cual utiliza MySQL para el almacenamiento de los datos y AJAX para la actualización de ciertas áreas de la aplicación [16]. 34 2.3. Tecnologías de Desarrollo de Software En las últimas décadas, se ha apreciado que la mayoría de las aplicaciones han ido evolucionando entorno a la world wide web (Web, para abreviar) y sus servicios. Desde su inicio original, la Web se ha convertido en un entorno empleado para la entrega de una amplia variedad de funcionalidades; estas van desde aplicaciones similares a la difusión de información a pequeña escala, desarrolladas típicamente por escritores y artistas, hasta aplicaciones comerciales a gran escala, de planificación empresarial y trabajo colaborativo [15]. 2.3.1. Aplicaciones Basadas en Web La Word Wide Web es un claro ejemplo de cómo una idea simple (páginas enlazadas a través de hipertextos) se puede convertir en algo extraordinario. Si bien esta idea fue originalmente diseñada como un medio puramente informativo, actualmente la web es un recurso a través del cual se pueden encontrar una gran variedad de aplicaciones. Hoy en día las aplicaciones web son sistemas completos y complejos que brindan servicios interactivos, de uso intensivo de datos y personalizables, el cual, de igual manera, permite su acceso desde cualquier dispositivo [16][17]. Antes de explicar el concepto de una aplicación basada en web es importante definir la palabra “aplicación”, la cual, según la Real Academia Española [4], se define como un programa preparado para una utilización específica, ya sea la realización de pagos de nóminas, el tratamiento de imágenes digitales, entre otros tantos tipos de programas existentes en la actualidad. Como su nombre lo indica, una aplicación basada en la web es cualquier aplicación que utiliza un sitio web como interfaz o front-end. Los usuarios pueden acceder fácilmente a sus funciones desde cualquier computadora conectada a Internet utilizando un navegador común por medio de las tecnologías y estándares W3C. De igual manera, la Web permite el desarrollo de aplicaciones de intranet corporativa, para su uso dentro de los límites de organizaciones individuales. Siendo importante destacar, que la notable difusión de las aplicaciones web en áreas de comunicación y comercio la convierte en una de las ramas líderes y más importantes de la industria del software [15]. 2.3.1.1. Funcionamiento y Arquitectura de las Aplicaciones Web La creación de aplicaciones web requiere un cambio importante en el pensamiento de los desarrolladores, ya que, la transición de aplicaciones controladas por eventos al mundo sin estado del desarrollo web puede requerir una renovación del paradigma utilizado. Incluso, una comprensión de la infraestructura básica de las aplicaciones web no revelará de inmediato la arquitectura y el diseño más efectivos [16]. 35 Una arquitectura que permite la organización arbitraria de las aplicaciones web es la arquitectura de n-capas; siendo la de 3 capas la más utilizada por los desarrolladores en la actualidad. Como se muestra en la Figura 2.12 la arquitectura de 3 capas posee tres componentes fundamentales, la capa de presentación, lógica y de datos [17]. Cabe destacar que existen múltiples arquitecturas de aplicaciones web, sin embargo, la que será estudiada a profundidad en el presente trabajo, por su gran uso y buena organización, será la arquitectura de 3 capas. Fig. 2.12. Arquitectura y Flujo común de las Aplicaciones Web La primera capa que se puede observar en la Figura 3.1 se denomina presentación, esta es la encargada de mostrar el resultado, de la solicitud enviada por el navegador, en el formato de salida deseado [16]. La capa de presentación se encuentra dividida a su vez en los siguientes componentes: • Componentes de la interfaz de usuario (UI): los componentes de la interfaz de usuario (controles) son los encargados de proporcionar la interacción con la aplicación, estos presentan el formato con el cual se mostrará la información, los mismos adquieren y validan los datos provenientes de los usuarios [18]. • Componentes del proceso de usuario: los componentes del proceso de usuario ayudan a sincronizar y organizar las interacciones del mismo. De esta manera, el flujo del proceso y la lógica de administración del estado no se encuentran 36 codificados en los propios elementos de la interfaz de usuario, permitiendo así que los patrones básicos de interacción puedan ser reutilizados por múltiples interfaces [18]. Como segunda capa del modelo se encuentra la lógica del negocio, siendo esta la que posee todo el código que se ejecutara del lado del servidor [16]. Por último, pero no menos importante, se encuentra la capa de datos, encargada de permitir el acceso a toda la información perteneciente a la aplicación [16]. El componente lógico de acceso a datos, parte esencial de la capa de datos, se encarga de abstraer la lógica necesaria para el acceso a la información, facilitando así la configuración y el mantenimiento de la aplicación [18]. 2.3.1.2. Beneficios de las Aplicaciones Web Existen numerosas ventajas importantes que son exclusivas de los desarrolladores de software dedicados a crear aplicaciones y sistemas basados en la web; entre ellas se pueden contemplar [19]: • Desarrollo rentable: con aplicaciones basadas en la web, los usuarios acceden al sistema a través de un entorno uniforme: el navegador web. Si bien la interacción del usuario con la aplicación debe probarse exhaustivamente en diferentes navegadores, la aplicación solo necesita desarrollarse para un único sistema operativo, el cual es el SO del Servidor donde se encontrará alojado. • Accesible desde cualquier parte: a diferencia de las aplicaciones tradicionales, los sistemas web son accesibles en cualquier momento, en cualquier lugar y a través de cualquier PC o dispositivo móvil con conexión a Internet. Esto pone al usuario firmemente a cargo de dónde y cuándo accede a la aplicación. • Fácilmente personalizable: las interfaces de usuario de las aplicaciones basadas en la web son más fáciles de personalizar que las que se encuentran en aplicaciones de escritorio. Esto hace que sea más sencillo actualizar la apariencia de la aplicación o personalizar la presentación de la información en diferentes grupos de usuarios. • Accesible para variada gama de dispositivos: además de ser personalizable para grupos de usuarios, el contenido de las aplicaciones web también puede ser adaptado para su uso desde cualquier dispositivo conectado a Internet. Esto incluye smartphones, laptops o tablets. • Interoperabilidad mejorada: es posible lograr un mayor nivel de interoperabilidad entre aplicaciones web que con sistemas de escritorio aislados; 37 esto se debe a que las comunicaciones entre estas se encuentran estandarizadas, permitiendo así conectar aplicaciones web incluso cuando han sido realizadas en lenguajes de programación diferentes. • Mayor Seguridad: las aplicaciones basadas en web generalmente se implementan en servidores dedicados, que son monitoreados y mantenidos por administradores de servidores experimentados. Esto significa que la seguridad es más estricta y que cualquier violación potencial debe notarse de manera eficiente. • Aumento de la carga de trabajo adaptable: el aumento de la capacidad del procesador también se convierte en una operación mucho más sencilla de realizar con aplicaciones basadas en web. Si una aplicación requiere más potencia para realizar tareas, solo se necesita actualizar el hardware del servidor. 2.3.2. Framework A medida que los desarrolladores realizan aplicaciones y adquieren más experiencia, comienzan a descubrir partes comunes que pueden ser reutilizadas, aprendiendo que muchas de esas partes son genéricas y construyéndolas de tal manera que se fomente su reutilización y combinación. Un framework es un conjunto de elementos relacionados que facilita el desarrollo de aplicaciones a través del suministro de piezas precompiladas [16]. Los frameworks representan una opción para la reutilización del conocimiento arquitectónico ya existente, siendo este un sistema de software reutilizable con funcionalidad general ya implementada. Un framework sirve como un plan para la realización de la arquitectura y las funcionalidades básicas de una aplicación, sin embargo, su funcionalidad debe ser comparada con sus desventajas antes de optar por su utilización, es decir, el grado de esfuerzo de capacitación que amerita, la falta de estándares para la integración entre distintos frameworks y la dependencia resultante que este puede producir [17]. 2.3.3. Patrones de Diseño Los patrones de diseño son aquellos encargados de describir la estructura, las relaciones y la interacción entre diversos componentes para resolver un problema de diseño dentro de un contexto definido. Los patrones de diseño se resumen de un lenguaje de programación específico, pero se mueven dentro del alcance de los patrones de arquitectura [17]. 38 De forma resumida, un patrón de diseño es aquel que describe una solución genérica y probada para un problema de diseño recurrente que puede surgir en situaciones específicas [17]. Un patrón de diseño debe contener los siguientes atributos [16]: • Nombre: los patrones de diseño deben poseer un nombre breve y fácil de recordar. El nombre se considera un elemento importante debido a que forma parte del vocabulario del diseño general y da una descripción de la esencia del patrón. • Problema: el problema es la descripción en detalle del problema y las implicaciones que lo rodean. • Solución: describe el mecanismo a través del cual se solucionará el problema a tratar. • Consecuencia: indica los resultados y las competencias de la aplicación del patrón dado. 2.3.3.1. Modelo Vista Controlador El Modelo Vista Controlador (MVC) es un patrón de arquitectura de software que separa los datos de una aplicación, la presentación al usuario y la información de control en tres componentes distintos [20]. En la figura 2.13 se puede observar la relación que poseen dichos componentes, los cuales cumplen las siguientes funciones: Fig. 2.13. Arquitectura y Flujo común de las Aplicaciones Web en la Actualidad. • Modelo: contiene únicamente los datos puros de la aplicación; no contiene lógica que describe cómo pueden presentarse los datos a un usuario [20]. • Vista: se encarga de la interfaz de usuario, compone la información que se envía al cliente y los mecanismos de interacción con éste [21]. 39 • Controlador: actúa como intermediario entre el Modelo y la Vista, gestionando el flujo de información entre ellos y las transformaciones requeridas para adaptar los datos a las necesidades de cada uno [21]. Es importante destacar que uno de los beneficios que ha vuelto popular el presente patrón dentro de frameworks webs como Ruby on Rails, Django, Flask, entre otros; es la posibilidad de modificar la forma en que la interfaz visual responde a las entradas del usuario, sin necesidad de cambiar la apariencia de la misma [22]. 2.3.4. Lenguajes de Programación y Frameworks Los lenguajes de programación se consideran uno de los principales criterios de elección al seleccionar el framework a utilizar. Los patrones de diseño, las arquitecturas y otros enfoques del desarrollo pueden superarse mediante la robustez o el conocimiento de un determinado lenguaje de programación. El criterio para la elección de un lenguaje de programación es una habilidad importante que deben poseer los desarrolladores. Algunos lenguajes de programación son más fáciles de aprender que otros, lo que puede representar un costo mayor en el tiempo de adaptación. Esta problemática también se aplica a la cantidad de código que el programador necesita procesar mientras se adapta a un nuevo framework. El costo para aprender y comprender un nuevo lenguaje de programación puede ser mayor que el esfuerzo dado para crear una estructura de aplicación más compleja en un lenguaje ya conocido por el desarrollador. Por lo tanto, una documentación extensa de un framework basado en un lenguaje específico es significativa para una buena elección de las herramientas a utilizar [22]. A continuación, se realizará una investigación extensa que permita conocer las diversas alternativas que existen en el mundo de los lenguajes de programación y frameworks, de igual manera se documentaran sus funcionalidades, ventajas y desventajas; para finalmente seleccionar las herramientas que mejor se adapten al desarrollo del proyecto. 2.3.4.1. Ruby (Ruby on Rails) Ruby es un lenguaje de programación dinámico con una gramática compleja pero expresiva, y una biblioteca de clases principales con una API rica y potente. Ruby se inspira en Lisp, Smalltalk y Perl, pero utiliza una gramática que es fácil de aprender para los programadores de C y Java, este lenguaje es puramente orientado a objetos y se adecua a los estilos de programación funcionales y de procedimiento [24]. A pesar de, por la falta de documentación, no poseer la popularidad merecida en sus inicios, Ruby ha sido mejor comprendido en la actualidad gracias al éxito del framework Ruby on Rails (RoR). La 40 comunidad de Ruby está creciendo día a día como consecuencia de la creciente cantidad de proyectos basados en Ruby almacenados en GitHub [25]. Rails es un framework de desarrollo de aplicaciones web escrito en el lenguaje de programación Ruby. Este está diseñado para facilitar la programación de aplicaciones web a través suposiciones sobre las necesidades del desarrollador, permitiendo escribir menos código y logrando más que otros lenguajes y frameworks [25]. La filosofía de Rails incluye dos principios fundamentales [23]: • No Repetir: DRY (Don’t Repeat Yourself) es un principio de desarrollo de software que establece que "Todo conocimiento debe tener una representación única, clara y autoritaria dentro de un sistema". Al no escribir la misma información múltiples veces, el código se vuelve más fácil de mantener, más extensible y menos propenso a errores, Ruby on Rails se asocia con principios de desarrollo como MVC, convenciones sobre configuraciones y DRY para mejorar el proceso de creación de aplicaciones y alentar a los ingenieros de software a generar código refinado. • Convención sobre la configuración: Rails posee maneras de hacer las aplicaciones web como lo considere mejor y adopta de manera predeterminada este conjunto de convenciones, evitando que el desarrollador deba especificar múltiples detalles de configuración. Ruby on Rails cuenta con muchas razones por la cuales debería ser implementado en proyectos de desarrollo, entre las cuales se encuentran [23]: • Gratuito: las herramientas de desarrollo web convencionales suelen costar una fortuna, y las empresas tendrían que invertir mucho capital para pagar los costos de licencia. En tales condiciones, Rails aparenta ser una solución mágica, ya que es de uso gratuito, tanto para individuos como para empresas. Además, si se combina el framework con otras bases de datos, servidores, sistemas operativos y distintas herramientas de código abierto, se puede lograr un paquete de desarrollo excepcional. • Rápido proceso de desarrollo: cuando se decide optar por Ruby on Rails, se obtiene una infraestructura robusta, que suelen ahorran muchas preocupaciones relacionadas con la configuración de archivos para su configuración. En otras palabras, acelera el proceso de desarrollo. • Documentación en Abundancia: los programadores a menudo no están de acuerdo con la curva de aprendizaje de una herramienta de desarrollo u otra debido a que es un aspecto muy subjetivo. Sin embargo, Rails se considera, con 41 razón, uno de los frameworks más fáciles debido a la disponibilidad de documentación adecuada, tutoriales exhaustivos y el principio de convención sobre configuración. Un lenguaje expresivo y una rica sintaxis son los atributos principales del framework. A pesar de poseer múltiples razones para su utilización, Rails es un framework que goza de ventajas y desventajas, estas se encuentran descritas en la Tabla 2.1. Ventajas Desventajas Los programadores pueden implementar múltiples herramientas / tecnologías / frameworks que acompañan a Ruby on Rails para sus proyectos. La velocidad de ejecución es lenta en comparación con otros lenguajes. Ciclo de desarrollo rápido Alto uso de memoria Es orientado a objetos y fácil de usar, proporcionando un alto nivel de legibilidad. Inadecuado para tareas intensivas de memoria. Cuenta con el principio MVC que promueve la modularidad y extensibilidad del producto final. Simples errores podrían perjudicar seriamente el funcionamiento de la aplicación a construir. Comunidad grande, activa y motivada, que impulsa muchas gemas listas para usar. Puede llevar mucho tiempo descomprimir todas las características que contienen las gemas o bibliotecas. Tabla 2.1. Ventajas y Desventajas del framework Ruby on Rails 2.3.5. Bases de Datos Las bases de datos tienen un gran impacto en el uso creciente de las tecnologías, es justo decir estas desempeñan un papel fundamental en casi todas las áreas donde se usan las computadoras, incluyendo negocios, comercio electrónico, ingeniería, medicina y educación. La palabra base de datos se usa tan comúnmente que se debe comenzar por definir su significado [26]. Una base de datos es una colección de datos relacionados, siendo importante destacar que un surtido aleatorio de estos no se puede denominar correctamente de dicha manera. Por datos, se refiere a hechos conocidos que se pueden registrar y tienen un significado implícito [27]. Un sistema de administración de bases de datos (DBMS por sus siglas en inglés) es una colección de programas que permite a los usuarios crear y mantener una base de datos. El DBMS es un sistema de software de propósito general que facilita los procesos de definición, construcción, manipulación y uso compartido de bases de datos entre varios usuarios y aplicaciones [27]. 42 Una base de datos relacional es un conjunto de tablas descritas formalmente desde las cuales se puede acceder o reensamblar datos de múltiples maneras distintas sin tener que reorganizar las tablas. El usuario estándar y la interfaz de programación de aplicaciones (API) de una base de datos relacional es el Structured Query Language (SQL) [27]. A pesar de que estas herramientas han servido como base para toneladas de aplicaciones empresariales, actualmente las aplicaciones requieren diversidad y escalabilidad, dando surgimiento a las bases de datos no relacionales [27]. Una base de datos no relacional es cualquier base de datos que no sigue el modelo relacional proporcionado por los sistemas tradicionales de administración de bases de datos relacionales. Esta categoría de bases de datos, también conocidas como bases de datos NoSQL, ha experimentado un crecimiento constante en los últimos años con el aumento de las aplicaciones de Big Data. Estas bases de datos han crecido en popularidad gracias a su diseño apto a la superación de los límites en Big Data presentados por las bases de datos relacionales. El termino Big Data hace referencia a datos que poseen una gran movilidad y crecimiento, teniendo una estructura altamente diversa que las tecnologías convencionales no son lo suficientemente capaces de manejar [28]. Teniendo un conocimiento general del concepto de base de datos y sus diversos tipos y funcionalidades, es posible proceder a profundizar en los diversos manejadores de bases de datos. A continuación, se explicarán las características principales, los beneficios y las desventajas de los manejadores de base de datos MySQL y MongoDB. 2.3.5.1. MySQL MySQL es un sistema completo de gestión de bases de datos relacionales de código abierto (RDBMS) propiedad de Oracle Corporation. El mismo almacena los datos en tablas que se agrupan en una base de datos, usando el lenguaje de consulta estructurado (SQL) para acceder a los datos, y los comandos para administrarlos [26]. Si bien la mayoría de las bases de datos relacionales se diseñaron hace varias décadas para aplicaciones complejas utilizadas en la planificación de recursos empresariales, MySQL se diseñó y optimizó para aplicaciones web; convirtiéndose así, a medida que surgían nuevos y diferentes requisitos con Internet, en la plataforma elegida por los desarrolladores web [29]. MySQL se convirtió en una de las mejores opciones para el desarrollo de aplicaciones web gracias a su rendimiento, escalabilidad, confiabilidad y facilidad de uso; características que se han mejorado de manera exhaustiva con el pasar de los años y que han vuelto al presente Sistema Manejador de Base de Datos altamente recomendado [30]. 43 Capítulo 3: Marco Aplicativo 3.1. Metodología de Desarrollo de Software: SCRUM Scrum es una metodología de desarrollo ágil de adaptación, iterativa, rápida, flexible y eficaz, diseñada para ofrecer un valor significativo de forma rápida en todo el proyecto [31]. También se le es denominado como framework Scrum, el mismo se conforma por los equipos de Scrum y sus roles, eventos, artefactos y reglas asociadas. Cada componente dentro del framework cumple con un propósito específico y es esencial para el éxito y uso de esta metodología. De manera general, la conceptualización de esta metodología se deriva a cuatro factores bien diferenciados, las cuales son: • Equipo de SCRUM • Artefactos • Sprints • Reuniones En líneas generales, el grupo de desarrollo distribuye distintas responsabilidades a través de roles, entre los distintos participantes del equipo se tienen múltiples reuniones para conocer el estado del producto, además de generar artefactos que permitan determinar que funcionalidades tienen que estar desarrolladas en un cierto sprint. 3.1.1. Equipo SCRUM El equipo Scrum está formado por un dueño del producto, el equipo de desarrollo y un maestro Scrum. Los Equipos Scrum son auto-organizativos y multifuncionales. Los equipos auto-organizados eligen la mejor manera de realizar su trabajo, en lugar de ser dirigidos por otros fuera del equipo. La modalidad de equipo en Scrum está diseñada para optimizar la flexibilidad, la creatividad y la productividad. Los equipos Scrum entregan productos de manera iterativa e incremental, maximizando las oportunidades de retroalimentación. Las entregas incrementales del producto en desarrollo aseguran que una versión potencialmente útil del producto esté siempre disponible. 3.1.1.1. Dueño del Producto El dueño del producto es responsable de maximizar el valor del producto resultante del trabajo del equipo de desarrollo. La forma en que se hace esto puede variar ampliamente entre organizaciones, equipos Scrum e individuos. 44 El dueño del producto es la única persona responsable de la gestión de la lista de necesidades que requieren ser solventadas en el producto (Product Backlog). La gestión del Product Backlog incluye: • Expresar claramente los elementos del Product Backlog; • Ordenar los artículos en el Product Backlog para lograr los mejores objetivos y misiones; • Optimizar el valor del trabajo que realiza el Equipo de Desarrollo; • Asegurarse de que el Product Backlog sea visible, transparente y claro para todos, y muestre en qué trabajará Scrum Team a continuación; y, • Asegurarse de que el equipo de desarrollo comprenda los elementos del Product Backlog al nivel necesario. El dueño del producto puede hacer el trabajo anterior o hacer que el equipo de desarrollo lo haga. Sin embargo, el propietario del producto sigue siendo responsable. 3.1.1.2. Equipo de Desarrollo El equipo de desarrollo consiste en profesionales que realizan el trabajo de entregar un incremento de funcionalidades del producto al final de cada Sprint. Un incremento del Sprint anterior es requerido para el Sprint Review; solo los miembros del equipo de desarrollo crean incrementos en el producto. Son responsables del desarrollo del producto, servicio, o cualquier otro resultado. Consiste en un grupo de Personajes o Personas que trabajan en los Historias de Usuarios en el Pendientes del Sprint para crear los entregables del proyecto [31]. Los equipos de desarrollo están estructurados y habilitados por la organización para gestionar y organizar su propio trabajo. La sinergia resultante optimiza la eficiencia y eficacia general del Equipo de Desarrollo. El tamaño óptimo del Equipo de Desarrollo debe ser lo suficientemente pequeño para permanecer ágil y lo suficientemente grande para completar un trabajo significativo dentro de un Sprint. Menos de tres miembros del Equipo de Desarrollo disminuyen la interacción y dan como resultado aumentos de productividad más pequeños. Los Equipos de Desarrollo más pequeños pueden encontrar limitaciones de habilidades durante el Sprint, lo que hace que el Equipo de Desarrollo no pueda ofrecer un Incremento potencialmente liberable. Tener más de nueve miembros requiere demasiada coordinación. Los equipos de desarrollo grandes generan demasiada complejidad para que un proceso sea útil. Los roles de Dueño del producto y Scrum Master no se incluyen en este conteo a menos que también estén ejecutando el trabajo del Sprint Backlog. 3.1.1.3. SCRUM Master Los Scrum Masters ayudan a todos a entender la teoría, las prácticas, las reglas y los valores de Scrum. El Scrum Master es un líder-servidor para el Equipo de Desarrollo. 45 El Scrum Master ayuda a los que están fuera del equipo de Scrum a comprender cuáles de sus interacciones con el equipo de Scrum son útiles y cuáles no. Así como también ayuda a todos a cambiar estas interacciones para maximizar el valor creado por el equipo de desarrollo. El Scrum Master, ayudará al equipo a seguir la metodología SCRUM realizando actividades como organizar las reuniones requeridas, asegurar el buen estado de los artefactos generados, servir de intermediario entre el Dueño del Producto y los miembros del equipo, entre otras actividades. 3.1.1.4. Stakeholders De acuerdo con la metodología Scrum, un stakeholder es una persona externa al Equipo Scrum con un interés y conocimiento específico de un producto que se requiere para un descubrimiento incremental. Representado por el Propietario del producto y comprometido activamente con el Equipo Scrum en Sprint Review. Es importante recalcar nuevamente que los stakeholders no forman parte del Equipo Scrum sin embargo, por ser parte vital para el correcto funcionamiento de la metodología, lleva un lugar dentro de los roles de los usuarios. 3.1.2. Artefactos Estos proporcionan información clave que el Equipo Scrum y las partes interesadas deben conocer para comprender el producto en desarrollo, las actividades que se están planificando y las actividades realizadas en el proyecto. Están diseñados específicamente para maximizar la transparencia de la información clave para que todos tengan la misma comprensión del artefacto. 3.1.2.1. Product Backlog El Product Backlog es una lista ordenada de todo lo que se necesita en el producto. Es la única fuente de requisitos para cualquier cambio que se realice en el producto. El dueño del producto es responsable de la acumulación de productos, incluido su contenido, disponibilidad y pedido [33]. Es una lista que se mejora continuamente, comenzando con la versión inicial que incluye solo los requisitos más preliminares y conocidos. El Product Backlog evoluciona en función de los cambios en el producto y el entorno de desarrollo. El Backlog es dinámico y con frecuencia cambia para identificar lo que es necesario para que el producto sea razonable, competitivo y útil. El Backlog del producto existe mientras exista el producto. 3.1.2.2. Sprint Backlog El Sprint Backlog es el conjunto de elementos de Product Backlog seleccionados para cada Sprint, en conjunto con un plan para entregar el incremento del producto y lograr el objetivo del Sprint. El Backlog del Sprint es una previsión por parte del Equipo de Desarrollo acerca de qué funcionalidad habrá en el próximo incremento y el trabajo necesario para entregar esa funcionalidad. 46 En la Figura 3.1. se puede observar de manera gráfica como se constituye el Product Backlog en base al Sprint Backlog, definiendo que, distintas tareas previstas en el Product backlog se organizan de un mismo color (Sprint), mostrando que tareas deben realizarse en un Sprint, para luego poder entregar un incremento del producto. Fig. 3.1. Funcionamiento de los sprints en conjunto con los backlogs. Fuente www.arturonavarro.com El Backlog de Sprint define lo que debe hacer el equipo de desarrollo para convertir los elementos del Backlog del producto en incrementos de funcionalidades a desarrollar. El Backlog de Sprint aclara el trabajo requerido por el equipo de desarrollo para lograr los objetivos de Sprint. 3.1.2.3. Incrementos El Incremento es la suma de todos los elementos de Product Backlog completados durante un Sprint y el valor de los incrementos de todos los Sprints anteriores. Al final de un Sprint, el nuevo incremento debe estar finalizado, lo que significa que debe estar en condiciones de uso y cumplir con la definición de finalización establecido por el Equipo Scrum. El incremento es un paso hacia una la meta, la cual es la finalización de todas las funcionalidades prestablecidas. El incremento debe estar en condiciones de uso, independientemente de si el dueño del producto decide estrenarlo o ponerlo en producción. 3.1.3. Sprints El corazón de Scrum son los Sprints, un periodo de tiempo de un mes o menos durante el cual se crea un incremento de funcionalidades del producto, utilizables y potencialmente publicables. Los sprints tienen duraciones constantes a lo largo de un esfuerzo de desarrollo. Un nuevo Sprint comienza inmediatamente después de la conclusión del Sprint anterior. Los sprints están limitados a un mes. Cuando el periodo de un Sprint es demasiado largo, la definición de lo que se está construyendo puede cambiar, la complejidad y el riesgo puede aumentar. Los Sprints permiten la previsibilidad al garantizar la examinación y la adaptación del progreso hacia un objetivo a lograr en el sprint al menos cada mes [33]. http://www.arturonavarro.com/ 47 Cada Sprint puede considerarse un proyecto con un límite de entrega de no más de un mes. Al igual que los proyectos, los sprints se utilizan para lograr objetivos o funcionalidades. Cada Sprint tiene un objetivo de lo que se debe desarrollar, un diseño y un plan flexible que guiará su creación, el trabajo y el incremento del producto resultante. 3.1.4. Reuniones Las reuniones de scrum son elementos importantes del proceso de entrega ágil de software. Estas reuniones proporcionan el framework para que los equipos realicen el trabajo de manera estructurada, ayuden a establecer expectativas, capaciten al equipo para colaborar de manera efectiva y, en última instancia, mejoren los resultados. Sin embargo, si no se administran de manera adecuada, pueden sobrecargar los calendarios y eliminar el valor que deben proporcionar. Por lo tanto, se dividen entre 4 tipos de reuniones, y a cada una se les asigna cierto valor de importancia. 3.1.4.1. Reunión de Planeación de Sprint En esta reunión, el dueño del producto y el equipo negocian qué historias de usuario abordará un equipo ese sprint. Esta reunión es una conversación programada entre el dueño del producto y el equipo. Depende del dueño del producto decidir qué historias son de mayor prioridad para el producto y cuáles generarán el mayor valor comercial, pero el equipo tiene el poder de rechazar y expresar inquietudes o impedimentos. Cuando el equipo acuerda abordar el trabajo, el Propietario del producto agrega las historias correspondientes Sprint Backlog. Esta reunión se realiza al comienzo de un nuevo sprint y está diseñada para que el dueño del producto y el Equipo de desarrollo se reúnan y revisen el Product Backlog priorizado. A través de una serie de discusiones y negociaciones, el equipo debe, al finalizar, crear un registro de sprint que contenga todos los elementos que se comprometen a completar al final del sprint. Esto se llama la meta del sprint. El objetivo del sprint debe ser un incremento de trabajo que se pueda enviar, lo que significa que se puede demostrar al final de un sprint. Debe ser acordado por todo el equipo. 3.1.4.2. Reuniones Diarias Cada día, el equipo Scrum se reúne para discutir el progreso realizado del día anterior, las metas del día actual, y si hay algún impedimento que bloquee el avance del desarrollo del proyecto. Esta reunión no debería de excederse de 15 minutos. Si los miembros del equipo necesitan discutir un problema que no puede ser cubierto en el tiempo establecido, puede crearse una reunión de apoyo luego de esta reunión. 48 3.1.4.3. Reunión de Revisión de Sprint Cuando termina un Sprint, llega el tiempo en el que el equipo tiene que demostrar un incremento potencial entregable del producto, al Dueño del Producto y otros entes. El dueño del producto declara que funcionalidades están realmente desarrolladas y cuáles no. Una vez concluido el Sprint los miembros del equipo preparan una presentación de los resultados obtenidos, que deberían reflejar que la meta del Sprint fue lograda exitosamente. 3.1.4.4. Reunión de Sprint Retrospectiva Luego de la reunión de revisión de Sprint, el equipo y el Scrum Master tienen una reunión de retrospectiva en privado. Durante esta reunión, el equipo examina y adapta sus procesos; así como también auto-identifica los elementos el proceso que funcionaron y los que no durante el sprint, en conjunto con sus soluciones. Su objetivo es la mejora continua de los procesos. 3.1.5. Modificación de la Metodología de Desarrollo de Software Puesto a que SCRUM no especifica que artefactos deben desarrollarse en cada iteración, y que el sistema a desarrollar es fuera de un ambiente empresarial, se es necesario definir una metodología de desarrollo ágil, basado en SCRUM, para establecer la planificación y desarrollo de las distintas actividades y artefactos necesarios para alcanzar el desarrollo de una versión estable del sistema FORMINST. A continuación, se describen las modificaciones de la metodología implementada para el desarrollo del sistema. 3.1.5.1. Roles El equipo de desarrollo está compuesto por dos programadores, uno de ellos es el estudiante que elabora el presente TEG. Por otro lado, el Scrum Master y el Dueño del Producto, en base al desarrollo del presente TEG, son roles ejercidos el tutor principal. 3.1.5.2. Artefactos Para llevar a cabo el desarrollo del sistema, se utilizó el Product Backlog como artefacto principal, con la finalidad de proporcionar un registro del cual regirse para la culminación exitosa del producto. A su vez también se incorporarán incrementos sucesivos de funcionalidades, en distintos Sprints, para que de tal manera el Scrum Master pueda examinarlas y validarlas. Así mismo, se fijarán un objetivo para cada Sprint la cual consistirá en una descripción del objetivo a alcanzar en cada iteración. En la Tabla 3.1. se encuentra el Product Backlog para el desarrollo de FORMINST. 49 Tabla 3.1. Product Backlog de FORMINST. 3.1.5.3. Reuniones Las reuniones que se tomarán en cuenta para el desarrollo del sistema serán reuniones de planeación de Sprint, reuniones diarias y reuniones de revisión de Sprint. En las reuniones diarias participarán únicamente los miembros del equipo de programadores, de manera tal que, únicamente discutan los distintos avances y restricciones que sufran, para poder tanto recibir como aportar ideas para la solución de problemas. Mientras que las otras reuniones serán con el tutor para poder verificar los avances y metas de los sprints. 3.2. Descripción del Proyecto En esta metodología, con la finalidad de concluir el desarrollo del sistema de manera exitosa, se crean iteraciones para cumplir con determinadas funcionalidades, tomando como base el funcionamiento de la versión anterior del sistema FORMINST, se plantean múltiples mejoras y nuevas funcionalidades. 3.2.1. Arquitectura y Tecnologías Para el desarrollo de este Trabajo Especial de Grado se siguió utilizando las tecnologías empleadas en versiones anteriores, empleando una arquitectura similar a la mostrada en la Figura 3.2; entre las tecnologías utilizadas se encuentran: • Ruby on Rails, como framework que facilite el desarrollo del sistema, en conjunto de las distintas gemas (librerías) necesarias, entre ellas active-record, que Numero de Sprint Objetivo Duración (Semanas) 0 Levantamiento de Requerimientos y Diseño de Solución 4 1 Desarrollar Login 3 2 Desarrollar Módulo de Tutor 4 3 Desarrollar Módulo de Instructor 3 4 Desarrollar Módulo de Entidad 4 5 Desarrollar flujo de documentos entre entidades 4 6 Permitir la exportación de documentos en PDF 3 7 Permitir el envío de correos electrónicos 2 8 Desarrollar Módulo de Secretarias 3 9 Permitir adjuntar soportes a los documentos 1 10 Asociar el correo institucional vía LDAP 1 50 funciona como ORM o utilizando la data de la BD y mapeándolo a objetos, facilitando la utilización de la misma. • MySQL como sistema manejador de base de datos relacional. • AJAX, como ejecutador de acciones asíncronas • HTML, CSS y JavaScript para la construcción y control del funcionamiento de las interfaces del lado del cliente. • Bootstrap, como framework de desarrollo de front-end, es una combinación de archivos en Javascript y CSS, y es usado para realizar diseños y estructuras de una página web de manera rápida y sencilla. Fig. 3.2. Arquitectura de tecnologías del sistema FORMINST 3.3. Sprint 0: Levantamiento de Requerimientos y Diseño de Solución La finalidad de este Sprint es definir los requerimientos funcionales del sistema FORMINST y establecer las iteraciones necesarias para su implementación; además se propone el diseño de la solución, el cual abarcara modelos de datos, interfaces y comportamiento del sistema. 3.3.1. Requerimientos Funcionales En este Sprint del proyecto se definieron las características o funcionalidades generales requeridas para el desarrollo del sistema automatizado de procesos propuesto. Las mismas se mostrarán a continuación, siendo registradas en el Product Backlog y basadas en el funcionamiento del sistema anterior y la versión sin culminar de FORMINST. 51 3.3.1.1. Nuevas Funcionalidades • Inclusión de nuevo rol; secretaria, el mismo tendrá la permisología necesaria de poder añadir nuevos tutores e instructor, así como poder asociar un instructor con un tutor, y el poder modificar la información correspondiente a cada instructor y tutor. Esto para eliminar la necesidad de manipular la BD de manera directa. • Notificaciones a los usuarios, tanto por la aplicación como por correo electrónico, con diferentes finalidades, ya sea recordar el envío de un trámite o recordar la revisión de un documento estancado en una entidad. • Exportación de todos los datos referentes a las adecuaciones e informes de plan de formación y capacitación en formato PDF. • El poder de permitir a los usuarios la carga de distintos archivos como soporte en los informes de planes de formación y capacitación para la corroboración de la culminación o cumplimiento de las actividades ejecutadas. • Diseño Responsive, el sistema de FORMINST contará con un estilo adaptativo, el cual adecuará las pantallas de la aplicación dependiendo del tamaño de la resolución a mostrar; ya sea pantallas de televisor, Desktops, laptops o inclusive tablets. 3.3.1.2. Funcionalidades Cambiadas • Flujo de documentos; una de las principales funcionalidades que requirió una alteración fue el flujo por el cual tienen que pasar tanto las adecuaciones como los informes de planes de formación y capacitación. Esto debido a lo anteriormente mostrado en el planteamiento del problema, el de permitir a cualquier entidad devolver el documento al tutor. Dejando únicamente al Consejo de Facultad como único ente con la permisología de regresar el documento al tutor. • Módulo de tutor, anteriormente el tutor era el encargado de crear el plan de formación asociándolo un instructor cualquiera. En la nueva versión de FORMINST el encargado de asociar un tutor con un instructor a través de un plan de formación y capacitación es el módulo de secretaria. Esto para restringir la permisología a un ente más responsable. • Esquema de Bases de Datos, para garantizar el buen funcionamiento es primordial comenzar con una estructura de datos optima, que permita el almacenamiento eficiente de información para luego poder ser utilizada. Se partirá del esquema desde las versiones anteriores y se añadirán / eliminarán los campos que sean necesarios. • Modificaciones en los módulos de Entidad e Instructor para garantizar el uso fluido del sistema, con características como migas de pan (breadcrumbs). Así como el poder visualizar todas las observaciones que se han añadido en tiempo 52 real y no esperar a que pasará por consejo de facultad para poder contemplar las observaciones. 3.3.1.3. Requerimientos No Funcionales Entre los más generales e importantes se buscó cumplir con los siguientes requerimientos no funcionales: • Brindar una interfaz de usuario intuitiva e interactiva para todos los perfiles de usuario y la página principal de FORMINST. • Disponibilidad, dando la posibilidad de inicio de sesión inclusive si el servidor de correos de la Facultad de Ciencias este no operativo. • Garantizar la seguridad de almacenamiento de datos delicados, como lo son las contraseñas. Así como también restringiendo el uso de permisología dependiendo del usuario. 3.3.2. Diseño de Solución Luego de definir los requerimientos del sistema, se propuso el diseño de la solución, crear un sistema de automatización de procesos referentes a los planes de formación y capacitación de la Facultad de Ciencias; para esto se plantea el diseño de un modelo de base de datos relacional que abarque todos los datos necesarios para el correcto funcionamiento del mismo; además, se crea una guía de estilos que se empleara en la aplicación en general. 3.3.2.1. Estructura de Datos El sistema FORMINST, en el desarrollo de la segunda versión en 2015, presentó una estructura de datos con diversas tablas. El diagrama entidad-relación correspondiente es mostrado en la Figura 3.3. 53 Fig. 3.3. Modelo de Datos de FORMINST, versión anterior. 54 Para la actualización del modelo de Base de Datos se tuvo que tener en cuenta el modelo anterior, añadiendo nuevos datos y eliminando los que son redundantes o innecesarios, para así cubrir las necesidades del nuevo sistema. Para comenzar, se decidió manejar las distintas permisologías a través de roles, estos roles se ven representados en la tabla entidad, por lo tanto, cada usuario deberá tener una relación usuario-entidad, el cual califica que tipo de usuario es y qué tipo de rol representa. Además, se añadieron nuevas tablas necesarias para el funcionamiento de nuevas funcionalidades, como lo es la tabla Notificación, donde se guarda la información necesaria con respecto a las notificaciones del sistema; Document, la cual se encarga de almacenar los documentos cargados al sistema, los mismos se cargan de manera binaria con un campo BLOB que se explicará más adelante; y Respaldo, que se encarga de almacenar los documentos una vez hayan completado el flujo de entidades en formato PDF, esto por la necesidad de tener un resguardo de documentos en caso de pérdida de información. De igual forma, no solo se añadieron nuevas tablas al esquema, sino también se añadieron nuevas columnas a las tablas ya existentes; esto debido a que las mismas no contenían todos los datos necesarios para el manejo de información en el sistema. La tabla Resultados, por ejemplo, en la versión anterior contenía múltiples columnas, no obstante, se necesitó la creación de nuevos campos en esta tabla; y así con otras tablas pertenecientes al esquema de datos. Tomando todos estos aspectos en consideración se actualizó y mejoró el esquema de base de datos ya existente; con nuevos campos, tablas e índices para facilitar la búsqueda de data. Se puede apreciar a continuación en la Figura 3.4., el actual modelo de datos con las observaciones previamente mencionadas ya implementadas; mostrando únicamente las tablas, ya que las mismas contienen múltiples columnas. 55 Fig. 3.4. Modelo de Datos de FORMINST, versión actual. 56 3.3.2.2. Guía de Estilos La guía de estilo es un documento en el cual se toman las características relacionadas con el aspecto de la interfaz de usuario. El aspecto de un sistema viene dado por los colores utilizados, la disposición de los elementos en la interfaz, los píxeles utilizados, entre otros, con la finalidad de generar un documento que pueda dar una idea de la apariencia del sistema. Es importante recalcar que la guía de estilos fue tomada por el grupo de desarrolladores anterior, y se decidió seguir con el mismo estilo para evitar complicaciones realizando ciertos cambios pertinentes. A continuación, se presenta la guía de estilo referente al sistema de automatización de planes de formación y capacitación (Tabla 3.1.). Logo Colores: Tipografía: Títulos: Arial 30px; Párrafos: Verdana 13px; Banner: Tabla 3.2. Guía de estilo de FORMINST. El logo de la Facultad de Ciencias será el logo característico del sistema FORMINST, permitiendo cargarlo como icono para ser visto en el tab del navegador, tal #CCCC99 #333333 #FFFFFF 57 y como lo muestra la Figura 3.5., el icono siempre se mostrará para diferenciar la pestaña de la aplicación con otras que tenga activas el usuario. Fig. 3.5. Icono de pestaña de navegador del sistema FORMINST Se utilizaron colores básicos, pero bien compuestos entre sí; se utilizará el color amarillo olivo, pero con más brillo creando un color pastel agradable a la vista (#CCCC99), este constituirá el color dominante del sistema. Por otro lado, en versiones anteriores se usaba el color negro (#000) para colorear el texto, sin embargo, los textos en negro puro y los fondos en blanco pueden causar incomodidad a la vista cuando los usuarios leen durante un período prolongado de tiempo, provocando tensión ocular; por lo tanto, se decidió utilizar un color de letra más ligero, siendo el color carbón (#333) el indicado para esta aplicación. Y, por último, se utilizó el color blanco (#FFF) como fondo del sistema. El estilo de letra o Font fue Verdana para los textos o párrafos y Arial para los títulos con distintos tamaños. Estos tipos de letra se heredaron de la versión anterior sin culminar de FORMINST. Por último, se encuentra el banner, el cual se refiere a la imagen en la parte superior de la aplicación; consiste en una fotografía del mural de la Facultad de Ciencias en conjunto con los logos de la Universidad Central de Venezuela y el logo de la respectiva facultad, en conjunto con el nombre del sistema (FORMINST) y propósito de uso. 3.3. Sprint 1: Login El objetivo de este Sprint es culminar el inicio de sesión, que permita a los usuarios identificarse con algún modulo (Entidad, Tutor, Instructor, Secretaria) para luego dar acceso al sistema como usuario perteneciente al mismo. El login, o también conocido como inicio de sesión, y es un conjunto de credenciales que se utiliza para obtener acceso a un módulo que requiere la autorización necesaria. El inicio de sesión se utilizará para dar acceso y control al sistema. Para permitir el inicio de sesión, se tomará en cuenta dos aspectos fundamentales, en primer lugar, está la necesidad de usar el correo institucional de la Facultad de Ciencias de la Universidad Central de Venezuela; y, por otro lado, se requiere que el usuario sea cargado a la base de datos del sistema, esto a través del módulo de la secretaria en el caso de tutores e instructores. 58 Al momento de diseñar la interfaz del login, partiendo del modelo utilizado en la versión sin culminar, se tomaron en cuenta los requerimientos anteriormente nombrados, para crear una interfaz amigable y fácil de usar. En las Figuras 3.6. y 3.7. se puede observar la interfaz desarrollada. En la Figura 3.6., se muestra cómo va a estar estructurado el inicio de sesión; en el mismo se muestra un pequeño instructivo de como entrar al sistema, en conjunto con un botón que indica “Iniciar Sesión”, el cual activará una ventana referente en la Figura 3.7. Fig. 3.6. Vista general de Login del sistema FORMINST (1) 59 Fig. 3.7. Vista general de Login del sistema FORMINST (2) La Figura 3.7., se muestra la ventana donde estarán las entradas de datos referentes a las credenciales del usuario, los cuales son correo institucional y contraseña, donde, para objetivos de este Sprint, no se realizó conexión con el correo institucional, ya que el mismo se postergo para otra entrega. En la actual se utilizarán datos locales para hacer la autenticación. Una vez especificado el Front-End de la aplicación se explicará un poco como se desarrolló la lógica detrás del login. Un aspecto fundamental que se tiene que tener en cuenta al momento de desarrollar un sistema es la seguridad, por lo tanto, se utilizó una gema que garantice el empleo seguro y adecuado de las contraseñas de los usuarios. Digest, es una función criptográfica de hash, la cual consiste en un procedimiento que toma datos y devuelve una cadena de bits fija: el valor de hash, también conocido como encriptado. Las funciones hash también se denominan funciones unidireccionales, es fácil calcular la encriptación de un mensaje, pero no es factible generar un mensaje a partir de una encriptación. Por lo cual se almacenaron las contraseñas de los usuarios encriptadas en la base de datos local, de manera que solo se vuelve a aplicar el proceso de encriptación al recibir los datos y comparar con el campo de la base de datos y si son iguales, entonces es la misma contraseña, pero encriptada. Se puede observar en el código utilizado en el proyecto en el Código 3.1. 60 require 'digest/sha1' clave = Digest::SHA1.hexdigest(clave) #se encripta la clave recibida por el usuario para su posterior comparación Código 3.1. Método de encriptación. Una vez verificado el tema de seguridad, y verificado que el usuario existe y tiene la misma contraseña, se debe seleccionar que modulo debe mostrar. Como se mencionó anteriormente, los usuarios se dividen en cuatro módulos: Tutor, Entidad, Instructor y Secretaria. Aunado a eso, cada usuario debe pertenecer a una escuela, y en el caso especial de biología debe pertenecer a un departamento. Como se puede apreciar en la Figura 3.8. Fig. 3.8. División de roles, escuelas y departamentos pertenecientes a un usuario Por último, un factor clave para el manejo del sistema es el establecer sesiones de usuarios, cada sesión deriva múltiples campos, por ejemplo, el id del usuario, que tipo de modulo asignado tiene y, a que escuela o departamento pertenece. Este manejo de sesiones se comenzó a hacer directamente a través de las cookies del navegador; sin embargo, después de poco uso del sistema, estas cookies hacían Overflow por la cantidad de información que almacenaban. Por lo tanto, se optó por utilizar otra gema, activerecord session_store. Activerecord-session_store consiste en una librería de Ruby on Rails que permite almacenar información básica de las sesiones usando la base de datos local, permitiendo manipular a su vez un tiempo de expiración si es necesario y evitando el problema anteriormente nombrado. Una vez autenticado el usuario, identificado que módulo tiene asignado y almacenado los datos referentes al mismo en la sesión, el mismo estará capacitado para utilizar el sistema. 61 3.4. Sprint 2: Módulo de Tutor La finalidad del sprint 2 es la implementación de un módulo que permita al tutor del plan de formación y capacitación, llevar un control sobre los documentos pertinentes al mismo. Este módulo cuenta con diversas funcionalidades que se explicarán a continuación. 3.4.1. Inicio En primer lugar, se tiene el índice, que es el Home View de este módulo; permite recibir al usuario siempre que inicie sesión como el mismo, y a su vez provee información referente a las notificaciones que reciba el mismo. Estas notificaciones son ideales para llevar un plan de formación y capacitación de manera ordenada y responsable. El navbar principal está constituido por 4 pestañas, en primer lugar, está el Inicio, en segundo lugar, se encuentra plan de formación, que es donde estarán todos los planes de formación asociados al tutor; luego está notificaciones utilizado para visualizar únicamente las notificaciones y por último cerrar sesión, que consiste en eliminar las sesiones almacenadas en la base de datos para que el usuario tenga que volver a iniciar sesión con la finalidad de acceder al sistema. Estas pestañas se pueden apreciar en la Figura 3.9. Fig. 3.9. Navbar de los Tutores Viéndolo desde un ámbito más amplio, se puede observar en la Figura 3.10., se trata de conservar el mismo estilo planteado en el inicio de sesión, añadiendo una barra de navegación que permita cambiar entre la información que se quiera mostrar, mencionada anteriormente. 62 Fig. 3.10. Inicio de usuario tutor Por otro lado, en la parte superior izquierda de la pantalla se muestra la fecha actual, el nombre y apellido del tutor y, el módulo al que pertenece. Por último, se encuentran las notificaciones, ya descritas anteriormente, provee información con distintos propósitos, entre ellos se encuentra cuando un documento cambia de estado, con se le es asignado un instructor al tutor, recordatorios de envío de documentos o inclusive hacerle saber si ha pasado el tiempo máximo para el envío de algún documento. En la Figura 3.11. se puede apreciar cómo está constituido esta funcionalidad. Estas notificaciones pueden ser eliminadas en tiempo real, solamente al seleccionar el icono de “eliminar”, se borra del tablero de notificaciones y no se vuelven a mostrar. Esto fue implementado con AJAX; cuya función principal es actualizar el contenido web de forma asíncrona, lo que significa que el navegador web de un usuario no necesita recargar una página web completa cuando solo se necesita cambiar una pequeña parte del contenido de la página; en este caso, una notificación. Añadiendo dinamismo al sistema. 63 Fig. 3.11. Notificaciones de Inicio 3.4.2. Planes de Formación y Adecuación Esta funcionalidad, que deriva a muchas otras, con certeza es la más importante en el módulo de tutor. Como se puede visualizar en la Figura 3.12., la pestaña de planes de formación se listarán todos los planes de formación asociados al tutor, junto al estatus actual de la adecuación de plan de formación y capacitación. Fig. 3.12. Lista de planes de formación y capacitación pertenecientes al tutor En la tabla se puede observar que hay dos columnas, “modificar” y “ver detalles”; si el tutor desea añadir, editar o eliminar alguna actividad a la adecuación simplemente debe hacer click en la opción de “modificar”, creando así una sesión de modificación de documento; por otro lado, podrá utilizarlo como módulo de visualización únicamente si decide solo “ver detalles”. Cabe destacar que, una vez que algún documento sea enviado para revisión de entidades superiores, no será permitido la modificación del mismo, esto para evitar alguna manipulación del documento cuando el mismo este en revisión. Una vez seleccionado que plan de formación de desea acceder, en la Figura 3.13. se puede observar como automáticamente cambiará la barra de navegación, seleccionando la pestaña de plan formación, ya que se estará mostrando la información pertinente a la adecuación del mismo, y por otro lado también se añade la pestaña de informes; además, se añadirá un sub-menú con distintas acciones que se describirán posteriormente. 64 Fig.3.13. Nuevo navbar una vez dentro de un plan de formación y capacitación En la Figura 3.14. se encuentra la primera página se encontrarán todos los campos básicos necesarios para la carga de la adecuación, estos datos serán introducidos al momento de que la secretaria carga el plan formación al sistema, por lo tanto, el tutor no puede editarlo. Al final de cada página perteneciente a la adecuación se encontrarán botones tanto para guardar, si se puede editar la información, como para cambiar de página. Fig. 3.14. Primera vista de información pertinente al plan de formación seleccionado En la segunda parte, ya se encontrarán los primeros campos que pueden ser editados, en este caso será una breve descripción de las actividades que debe cumplir el instructor en general durante el plan de formación y capacitación. Es importante recalcar que para que todos los cambios sean guardados se tiene que presionar el botón de "guardar" antes de cambiar la página, referenciados en la Figura 3.15. También se puede apreciar que al principio se encuentra en módulo de vista, por lo tanto, no se puede modificar las actividades, hace falta seleccionar el botón que dice “Modificar Adecuación”. 65 Fig. 3.15. Segunda vista de información sobre la adecuación de plan de formación Por otro lado, cuando se accede a la siguiente página (Figura 3.16.), se observará un cuadro con distintos campos, los mismos son referentes a cada una de las actividades que debe cumplir el instructor dependiendo de que semestre se encuentre. El tutor estará encargado de cargar todas las actividades mencionadas anteriormente dependiendo si pertenecen a actividades de docencia, investigación, formación, extensión u otras actividades. Es importante recalcar que las actividades no se limitan a una por tipo de actividad, se pueden añadir cuantas actividades se desee. Fig. 3.16. Vista sobre actividades que debe cumplir el instructor (Adecuación) 66 El cuadro anterior cuenta con distintas celdas, además de la actividad, se encuentra la celda de edición que contiene dos botones, que referencian al de editar y eliminar; el de editar simplemente permite al tutor modificar la actividad, y eliminar la borra de la base de datos. Por último, está “Ver Observaciones”, este botón redirige al usuario a un módulo de observaciones que va a cargar dependiendo de la actividad. Si una actividad cuenta con observaciones de entidades el botón se coloreará de amarillo, para indicar que existen observaciones en esa actividad, como se pueden observar en las Figuras 3.16. y 3.17. Fig. 3.17. Botones de “Ver Observaciones” cambia de color dependiendo de la situación Fig. 3.18. Vista de Observaciones añadidas, mostrando la entidad emisora Como se muestra en la Figura 3.18, si alguna entidad realizó una observación sobre una actividad, las mismas se muestran en esta vista. Es importante recalcar que, la adecuación de plan de formación y capacitación es el pilar base para comenzar con el proceso de formación del instructor, sin este no es posible la creación y envío de informes, ya que estas actividades a ejecutar deben estar descritas en la adecuación; por lo tanto, se creó la restricción de no poder crear ningún informe pertinente al plan de formación y capacitación hasta que la adecuación sea aprobada por Consejo de Facultad. 3.4.3. Informes Una vez ya se ha aprobado la adecuación de un plan de formación y capacitación, empezará a correr el tiempo para enviar los informes correspondientes, como se mencionó en el capítulo anterior, el tutor debe crear cuatro informes semestrales, dos informes anuales, y uno final; es importante resaltar que, por cuestiones de seguridad, solamente se permitirá la creación de informes de manera secuencial por entrega, por ejemplo, para poder crear el primer informe anual se debió haber creado los dos primeros semestrales, 67 lo mismo con el segundo anual, y para el final se debió haber entregado todos los informes anteriores. Lo anterior se impuso con la finalidad de facilitar la importación de la información suministrada en los informes anteriores, ya que normalmente los informes anuales y finales son un conglomerado de los informes semestrales, por lo tanto, la información debería ser la misma, ahorrando tiempo al usuario de cargar información que ya el sistema conoce. Las vistas de los informes se dividen en tres partes: listar informes, crear informe y ver o modificar informe. En la primera parte están listar los informes, referente a la Figura 3.19., donde se encontrarán todos los informes asociados al plan de formación y capacitación asociado al instructor, manejado por la sesión de plan formación que este activo. En el mismo se muestra el estatus de cada informe, en conjunto con su nombre dependiendo si es semestral, anual o final; y para poder acceder a alguno se debe selección la opción de ver detalles, una vez hecho se crea una sesión de informe. Fig. 3.19. Lista de Informes de plan de formación y capacitación seleccionado. Una vez dentro del informe en la primera parte, en la Figura 3.20., se encontrará la información básica del informe, como es la del instructor, tutor y detalles del plan formación, similar a los datos de las adecuaciones, y de la misma manera esta información no puede ser alterada por el tutor. En la segunda pantalla, Figura 3.21., primeramente, habrá dos campos de fecha, en el cual se debe indicar la fecha de inicio como la fecha fin del informe, esto para tener el periodo de tiempo que tuvo el informe. Además, está un cuadro constituido por 5 columnas, en la primera estarán las actividades predefinidas a partir de la partir de la adecuación, simplemente se extrae esa actividad de la misma y se coloca en el informe para tener referencia de lo que tenía que cumplir ese instructor en ese semestre; la segunda columna contendrá la actividad que realmente ejecutó el instructor, por defecto se colocará la misma que la adecuación al momento de crear un informe; en la tercera columna se encuentra el campo de observaciones, que el tutor podrá rellenar en caso de un mensaje adicional que quiera añadir a la actividad que ejecutó o no el instructor; y por último se encuentran más observaciones y soportes, esta funcionalidad de añadir y visualizar soportes estará destinada para un sprint posterior. 68 Fig. 3.20. Primera vista de información presente en los informes. Fig. 3.21. Vista de llenado de información de los informes El botón de más observaciones es para visualizar todas las observaciones que han hecho las distintas entidades en caso de que ya sea enviado el documento a evaluación, el mismo cuenta con una funcionalidad extra de colorear el botón de amarillo, lo cual indica que esa actividad tuvo observaciones por otras entidades, y si no está coloreado indica que las entidades no han añadido información referente a la misma. Es importante recalcar que las observaciones pueden ser visualizarse en tiempo real, así el flujo de documento no haya terminado. 69 3.4.3.1. Resultados Estos nacen con la necesidad de poder mostrar información detallada a cerca de las actividades de investigación ejecutadas; para que se tenga un seguimiento de si hubo alguna publicación, presentación o asistencia a algún evento científico. Los resultados pueden ser diversos, pueden ser tan generales como específicos; se añadieron múltiples resultados, para que el tutor pueda seleccionar a cuál se adecua más el mismo, entre ellos están: Trabajos publicados, presentación de ponencias, presentación de informes técnicos, asistencias a eventos científicos, organización de eventos científicos, dictado de cursos, talleres o seminarios científicos, y otros. Si es un trabajo publicado, se debe seleccionar que tipo de trabajo es, entre ellos están Libros, artículos de journal o prensa, CD, manuales, publicaciones electrónicas, tesis, acta de conferencia y capitulo de un libro. Los mismos pueden verse reflejados en la Figura 3.22. Fig. 3.22. Selección de Resultados. Una vez seleccionado que tipo de resultado se va a añadir, se cargarán distintos campos necesarios para la carga del mismo, como se puede observar en la Figura 3.23., de esta manera se tiene información especificada de los distintos resultados que pueden ser añadidos. Es importante recalcar que solamente se pueden añadir resultados a las actividades de investigación. Fig. 3.23. Múltiples campos de datos pertenecientes a los resultados. 70 3.4.4. Sub-Menú Una vez dentro de una sesión de adecuación o de informe, se añade un sub-menú, con la necesidad de mostrar diversas funcionalidades que estén siempre a la vista. Contiene múltiples opciones entre las cuales están; “Volver”, “Enviar”, “Vista Previa”, “Generar PDF”, “Versiones Anteriores”, y “Eliminar” ya sea informe o adecuación, presentes en la Figura 3.24. Fig. 3.24. Sub-menú de Adecuación. La acción de “Volver” simplemente carga la página anterior que se estaba utilizando, se asemeja a la función de go back del browser. Por otro lado, está la acción “Enviar”, una funcionalidad más compleja; esto se debe a que el sistema verifica si se llenaron correctamente todos los campos necesarios pertenecientes al documento, crear un respaldo en PDF del documento y almacenarlo por si se quiere tener versiones del mismo documento, funcionalidad que será añadida una vez se culmine el sprint que permita la exportación en PDF del documento; además, se encarga de crear notificaciones tanto a través de la aplicación, como por correo electrónico, funcionalidad será implementada también en otro sprint. Luego está la opción de visualizar una “Vista Previa”, que no es más que una vista preliminar de como lucirá el documento antes de ser exportado en PDF. El cual contendrá toda la información del mismo, sin posibilidad a editarlo ya que es solamente una visualización, se puede tener una idea observando la Figura 3.25. Después, está la opción de “Generar PDF”, que como se mencionó anteriormente esta prescrita para otro sprint; en conjunto con las versiones anteriores. Fig. 3.25. Vista Previa de adecuación. 71 Por último, se tiene la opción de “Eliminar” que, en el caso de una adecuación, cuando se selecciones está opción solamente se reinician los campos de las actividades de la misma, ya que no puede ser eliminada en su totalidad. Mientras que con el informe si se podrá eliminar completamente el informe, siendo necesario volver a crearlo. Si se decide eliminar el documento aparecerá un modal verificando si se está seguro que se quiere continuar o no, Figura 3.26. Es importante destacar que solamente se pueden eliminar los documentos que no han sido enviados o si es posible editarlos. Fig. 3.26. Mensajes de verificación. 3.5. Sprint 3: Módulo de Instructor El objetivo de este Sprint es el desarrollo de un módulo que sea únicamente de visualización; que permita al instructor poder hacer un seguimiento de la creación y desarrollo de los distintos documentos referentes a los planes de formación y capacitación. El usuario de instructor podrá entrar a FORMINST únicamente si el mismo tiene cargado un plan de formación en el sistema, este debió ser cargado por el módulo de secretaria que será implementado a posteriori en otro sprint. El desarrollo de este módulo fue relativamente sencillo, ya todas las funcionalidades vienen heredadas del módulo de tutor, por lo tanto, se reutilizó el código creado anteriormente. Con cambios muy ligeros, como la navegación del sitio, visible en la Figura 3.27.; el menú superior cambia, mostrando la adecuación del plan y los informes directamente; esto se debe a que por cada instructor debe haber un plan formación, por lo tanto, no se debe seleccionar. Fig. 3.27. Inicio de Instructor 72 En cuanto a la adecuación del plan de formación y capacitación, se muestra de manera similar en la vista del módulo de tutor, con la diferencia que no se puede editar ni eliminar actividades, por lo tanto, la columna de edición no aparecerá, dejando únicamente el campo de la actividad con el botón de las observaciones, el cual tiene las mismas funcionalidades del módulo de tutor. Se puede apreciar en la Figura 3.28. como luce la visualización de las actividades de las adecuaciones. Fig. 3.28. Vista de visualización de información del Instructor. Con respecto a los informes se aplica de la misma manera que a las adecuaciones, con pequeñas diferencias en comparación con el tutor; una de ellas es la disminución de información en los detalles del informe, visible en la Figura 3.29., sin embargo, los detalles de las actividades ejecutadas son igual que el módulo de tutor. Fig. 3.29. Vista de visualización de Informes de Instructor. Como no se necesitó la inclusión de nuevas funcionalidades, y las que se necesitaban se reutilizaron del sprint anterior, el desarrollo de este sprint no fue complejo. 73 3.6. Sprint 4: Módulo de Entidad La finalidad de crear este módulo es permitir el flujo de documentos, de manera tal que cada una de las entidades pueda visualizar las actividades de los mismos, añadir observaciones y poder cambiar el estatus al enviarlo a la siguiente entidad. Este módulo, luego del tutor, es el más importante de todos; permite a los distintos entes directores encargados del monitoreo de los planes de formación y capacitación, el seguimiento, evaluación y crítica de los mismos. El inicio, es similar al del instructor con la diferencia que, en el menú principal, en lugar de “Adecuación de Plan” dice “Listar Adecuaciones”, esto debido a que cuenta con múltiples documentos de adecuaciones. De resto se asemejan, como se puede observar en la Figura 3.30. A continuación se explicarán las diversas funcionalidades. Fig. 3.30. Inicio de módulo de Entidad Un aspecto importante que se debe tener en cuenta es que habrá varios tipos de entidades, por lo tanto, dependiendo de qué entidad sea la que use el módulo, tendrá distintas funcionalidades y mostrará información distinta. Las entidades básicas son: Comisión de Investigación, Consejo de Escuela y Consejo de Facultad; otro punto que hay que resaltar es que, la entidad de comisión de Investigación puede subdividirse en Consejo Técnico o Departamentos en caso de Biología. Para aclarar un poco el flujo de documentos, los documentos que son enviados a Comisión de Investigación no pueden ser vistos ni por Consejo de Escuela ni Consejo de Facultad; si es enviado a Consejo de Escuela solamente lo puede ver el mismo y Comisión de Investigación de la misma escuela, y si es enviado a Consejo de Facultad todas las entidades pueden verlo siempre y cuando sean de la misma escuela del instructor. Este proceso será mejor explicado en el Sprint de Desarrollo de Flujo de Documentos. 3.6.1. Adecuaciones e Informes En primer lugar, se tiene el listar adecuaciones, el cual básicamente mostrará todas las adecuaciones enviadas a la presente entidad, así como también por las que ya han pasado las mismas. Una entidad puede contener varias adecuaciones de distintos tutores, 74 y en el caso de la entidad de Consejo de Facultad, aparecerán las que han llegado a la misma sin importar de que escuela sea, ya que es la única entidad que recibe adecuaciones de múltiples escuelas. Como se puede observar en la Figura 3.31., la lista es similar a la del tutor, con la ligera diferencia de que se añadió un campo que indica la fecha del cambio de estado. Fig. 3.31. Listado de Adecuaciones de módulo de Entidad El manejo de las adecuaciones es similar al módulo de tutor, una vez seleccionada la adecuación se crea una sesión que establece que plan de formación se está evaluando. Una vez dentro del documento se heredan múltiples funcionalidades empleadas en el Tutor, entre ellas también se encuentra el sub-menú especificado en el Sprint 2, con la diferencia de que la última entidad, que es Consejo de Facultad, podrá decidir entre: Avalar, Avalar con Observaciones o Rechazar; lo mismo se aplica tanto para las adecuaciones como para los informes, como se puede observar en la Figura 3.32. Se especificará más adelante, una vez definido el flujo de documentos, que sucede con cada una de las opciones anteriormente mencionadas. Fig. 3.32. Mensaje de confirmación de Avalar de Consejo de Facultad A diferencia del tutor, las entidades no podrán modificar las actividades creadas por el tutor; básicamente es un módulo de visualización y evaluación. La única información que podrá añadir la entidad a los documentos serán las observaciones, las mismas se utilizan para dar una retroalimentación tanto al tutor como a las entidades por la que pase el documento del contenido de las distintas actividades, y actividades ejecutadas en caso de los informes. Estas observaciones son clave para el desarrollo de este módulo, ya que, en base a ellas, se definirá el estado final del documento. Las entidades podrán hacer observaciones de distintas actividades, como se puede observar en la Figura 3.33., 75 muestra la información similar al Tutor solo que cuenta con un campo de texto adicional que son las observaciones. Es importante destacar que para que una observación sea almacenada se debe seleccionar el botón de “Guardar Cambios” antes de cambiar de página. Fig. 3.33. Vista de visualización de información de adecuaciones con campos de observaciones, Módulo de Entidad En conjunto, al guardar cambios, se mostrará un mensaje Flash redactando el resultado de guardar las observaciones, como se puede mostrar en la Figura 3.34., diciendo que las observaciones fueron almacenadas exitosamente. Fig. 3.34. Mensaje flash de retroalimentación Los informes se asimilan aún más al desarrollado para el módulo de tutor, ya que el mismo contaba ya con un campo para poder añadir observaciones; al igual que con las adecuaciones, las entidades solo podrán añadir observaciones a los informes. Como se aprecia en la Figura 3.35., las diferencias son mínimas en comparación, por lo tanto, se heredan las mismas funcionalidades alterando la procedencia de la observación, es decir, en lugar de colocar al tutor como emisor, se coloca la entidad correspondiente. 76 Fig. 3.35. Vista de información de informes con campos de observaciones, Módulo de Entidad 3.7. Sprint 5: Flujo de Documentos Garantizar el flujo continuo es el objetivo principal, no solo de este sprint, sino del sistema desarrollado. Como se definió previamente en el planteamiento del problema, en versiones anteriores el documento podía ser devuelto por entidades intermedias, siendo únicamente el Consejo de Facultad la única entidad que debe tener tal permisología. Como se muestra en la Figura 3.36., el flujo consistirá en un flujo lineal, erradicando la posibilidad a los entes intermedios de poder devolver el documento al tutor. Fig. 3.36. Flujo de documentos entre entidades implementado 77 El flujo reflejado en la figura anterior es el implementado en el sistema; este siempre comienza con el tutor, el mismo tiene la responsabilidad de crear y editar tanto la adecuación de plan de formación y capacitación como los distintos informes descritos anteriormente. Es importante definir que, en las adecuaciones, el tutor deberá llenar obligatoriamente todos los campos descritos en la misma, sin esto no podrá enviar la misma y al tratar de enviarlo recibirá el mensaje mostrado en la Figura 3.37. Fig. 3.37. Mensaje flash de error al enviar documento sin llenar todos los campos necesarios Una vez completado la información del documento a enviar, el tutor lo debe enviar a la siguiente entidad, denominada Comisión de Investigación; esta entidad varía dependiendo de la escuela a la cual este adscrita, y como se mencionó antes hay casos específicos, como lo es la escuela de biología, que contiene distintos departamentos; en este caso, en lugar de enviar el documento a Comisión de Investigación de Biología, se envían a los departamentos al cual pertenece el instructor. La Comisión de Investigación solamente podrá visualizar las actividades descritas en los documentos, añadir observaciones a las mismas y por último podrá enviar el documento a la siguiente entidad, en este caso Consejo de Escuela, para que el mismo sea revisado. El Consejo de Escuela es la entidad que le sigue a la Comisión de Investigación, el cual solamente se dividirá uno por escuela. La misma, dentro del sistema, contiene las mismas funcionalidades que Comisión de Investigación, el poder visualizar el documento recibido, añadir observaciones como un ente distinto, y enviar a la última entidad para la evaluación. El Consejo de Facultad es la última entidad, y es la que tiene mayor permisología entre los distintos entes. El mismo es el responsable de determinar el estado final del documento; como se mencionó anteriormente el mismo puede aprobarlo, aprobarlo con observaciones o rechazarlo. En el caso de ser aprobado con observaciones, el documento será devuelto al tutor para que el mismo sea modificado, tomando en cuenta todas las observaciones añadidas por las distintas entidades en el flujo del mismo. Es importante recalcar que, si se devuelve al tutor, el mismo solo realiza las modificaciones pertinentes y cuando envía el documento, lo recibe el Consejo de Facultad directamente; esto para evitar el retardo del flujo teniendo que atravesar por cada entidad nuevamente. Cuando es aprobado sin observaciones, en el caso de las adecuaciones, el tutor tendrá la posibilidad de empezar el desarrollo de los informes; y en el caso de ser aprobados todos los informes, entonces, el instructor concluirá exitosamente el plan de formación y capacitación. 78 3.7.1. Estatus de Documento Para poder mantener el control de flujo de documentos se ideó crear un estatus que indique el estado actual o en qué entidad se encuentra retenido el documento; el mismo beneficia a todos los módulos descritos anteriormente, ya que los mismos podrán conocer el estado actual del documento enviado, ya sea el tutor, entidad o instructor. Para el desarrollo del mismo se crearon diversos estados, presentes en la Figura 3.38; es importante recalcar que las escuelas no están incluidas en esta tabla, esto debido a que se verifica a que entidad pertenece el instructor para mostrar información, por ejemplo, si es “Enviado a Comisión de Investigación” y el instructor pertenece a el “Departamento de Botánica” de Biología, el sistema toma estos datos en consideración y solamente lo mostrará al departamento de botánica. Fig. 3.38. Tabla de todos los estados posibles que puede tomar un documento Es importante recalcar los últimos estatus descritos en la Figura 3.38., muestra varios estados que dicen “Sin Revisión” al final, estos serán descritos a continuación. 3.7.2. Envío Automático de Documentos En el planteamiento del problema se describía como los documentos tienden a estancarse en entidades, porque las mismas simplemente no enviaban el documento a la siguiente entidad, alargando el tiempo de espera para la culminación del flujo. Por lo tanto, se implementó una funcionalidad que permita el envío automático de documentos en las entidades intermedias, esto con la finalidad de agilizar el proceso de evaluación de los mismos. 79 Para el desarrollo de esta funcionalidad se ideo la creación de un Daemon, el cual no es más un programa que se ejecuta como un proceso en segundo plano, en lugar de estar bajo el control directo de un usuario interactivo. Para el desarrollo del mismo se tuvo que crear un archivo aparte, importando la librería de “daemons” mostrada en el Código 3.2., una vez ejecutado el programa no se detendrá a menos que el manejador del sistema lo detenga o por alguna razón el servidor se apague. #!/usr/bin/env ruby ENV[‘RAILS_ENV’] = ARGV.first || ENV[‘RAILS_ENV’] || ‘development’ require File.expand_path(File.dirname(__FILE__) + “/../config/environment”) require ‘daemons’ #Daemons.daemonize Código 3.2. Configuración básica del Daemon. El mismo se conecta a la Base de Datos y verifica que la fecha en el cual un documento llego a cierta entidad no exceda de 3 semanas; si excede, entonces se hace escalamiento automático del documento a la próxima entidad, añadiendo el estatus previamente mencionado. Solo cuando el documento se encuentra en consejo de Facultad, no podrá ser escalado automáticamente porque el mismo tendrá que tomar decisiones con por su cuenta. Por último, cuando el programa se termina de ejecutar y de verificar todos los estatus actuales, se pone en espera de 24 horas, para volver a realizar la misma verificación. 3.8. Sprint 6: Exportación de Documentos en PDF Este sprint conlleva el objetivo de exportar la data referente a los documentos en formato PDF, esto para permitir un almacenamiento no solamente remoto, a través de la aplicación, sino también del parte del usuario; que permita tener un respaldo al mismo, además de poder contar con un formato imprimible y almacenable de manera física. Para esto se creó un modelo especificado como pdf.rb, en donde se definen todos los datos pertenecientes al documento; el mismo define distintas funciones si se trata de adecuación o informe de plan de formación y capacitación. La exportación del documento se necesitó la inclusión de la gema Prawn, la cual es una biblioteca de generación de PDF de Ruby que proporciona una gran funcionalidad al mismo tiempo que intenta ser simple y con un rendimiento razonable. Por esta razón se incluye al principio del modelo pdf.rb, como se muestra en el Código 3.3. # se invocan la bibliotecas require "prawn" require "prawn/layout" Código 3.3. Gemas necesarias para la exportación de PDF. 80 Esta funcionalidad tomó tiempo en desarrollarse, ya que se tenía que cuidar la ubicación de los campos y verificar que se mostrarán correctamente en el lugar que se debe. Tanto los informes como las adecuaciones contenían largos volúmenes de datos que debían situarse en sitios específicos, siguiendo la forma de mostrarse que en la pestaña de “Vista Previa”. A continuación, en las Figuras 3.39. y 3.40. se mostrarán los resultados de la exportación del documento de adecuación en PDF bajo el diseño definido. Fig. 3.39. Documento estandarizado de adecuación exportado por el sistema (1) 81 Fig. 3.40. Documento estandarizado de adecuación exportado por el sistema (2) Es importante destacar que esta funcionalidad podrá ser accedida desde cualquier controlador, y es usado múltiples veces para en distintos módulos; uno de ellos es la generación de versiones anteriores, pestaña que pertenece al submenú de los tutores, 82 entidades e instructores. Cada vez que un documento es enviado por el tutor, se crea una versión que solamente se muestra una vez ya haya atravesado todo el flujo de entidades, como se puede observar en la Figura 3.41., donde se encuentra el documento en pdf y se puede descargar. Fig. 3.41. Versiones anteriores del documento enviado 3.8.1. Almacenamiento El archivo en PDF no solamente se genera y se muestra; para el manejo de versiones se debe almacenar en algún sitio para luego poder ser mostrado. En este caso, se ideó la posibilidad de almacenar los mismos en la propia Base de datos MySQL. Para ello, se realizó una investigación para conocer la manera de almacenarlos. Se creó un modelo denominado Respaldo, el cual es distinto a los demás ya que el mismo es manejado como un archivo, este contiene atributos básicos que estructuran en conjunto el mismo, presentes en la Figura 3.42. Fig. 3.42. Columnas y tipo de dato de la tabla que almacena el PDF Es importante destacar que el filename es el nombre del archivo, content_type que básicamente especifica qué tipo de archivo se está almacenando, en este caso es PDF, y por último se tiene file_contents que es donde va toda la data del documento, como muestra la figura anterior es de tipo mediumblob, el cual es un tipo de dato de MySQL que describe un objeto binario grande que puede contener una cantidad variable de datos. Y simplemente para descargar el documento en pdf, solo se corre el código mostrado en Código 3.4. y Rails automáticamente convierte la data descrita anteriormente en el archivo. send_data(@respaldo.file_contents, type: @respaldo.content_type, filename: @respaldo.filename) Código 3.4. Conversión de data de MySQL a PDF en Rails. 83 3.9. Sprint 7: Envío de Correos Electrónicos Un aspecto importante que se tuvo en cuenta al momento de desarrollar el proyecto fue la capacidad de notificar a los distintos usuarios, no solamente a través de las notificaciones de la aplicación, sino también a través de correos electrónicos; de esta manera el usuario no tiene que entrar al sistema para enterarse de las notificaciones creadas. La finalidad de este sprint es crear la funcionalidad de enviar correos electrónicos a múltiples usuarios, permitiendo adjuntar documentos al mismo. Se implementó Action Mailer, que es una funcionalidad de Rails que permite enviar correos electrónicos desde la aplicación usando clases y vistas de correo. Los mailers funcionan de manera muy similar a los controladores. Para correr la generación de funcionalidades de mailers, se corrió el código presente en el Código 3.5. en el Shell. $ bin/rails generate mailer ActionCorreo create app/mailers/action_correo.rb create app/mailers/application_mailer.rb invoke erb create app/views/action_correo create app/views/layouts/mailer.text.erb create app/views/layouts/mailer.html.erb invoke test_unit create test/mailers/action_correo_test.rb create test/mailers/previews/action_correo_preview.rb Código 3.5. Método de generación de módulo correos (mailer) Como se puede ver al correr el código anterior, se crean múltiples archivos presentes en la carpeta del sistema. Además, se debe especificar credenciales básicas para lograr establecer el inicio de sesión de algún dominio de correos electrónicos; en el caso específico de este proyecto se creó una cuenta en Gmail para poder enviar los mismos. Esas credenciales, se deben definir en los tres archivos dentro de la carpeta config/enviroments tanto development.rb como production.rb y test.rb, conteniendo el código descrito en Código 3.6. config.action_mailer.delivery_method = :smtp config.action_mailer.smtp_settings = { address: 'smtp.gmail.com', port: 587, domain: 'gmail.com', user_name: 'forminst.ciens@gmail.com', password: 'xxxxx', authentication: 'plain', enable_starttls_auto: true } Código 3.6. Información requerida para correcta vinculación de correo electrónico emitente. Luego de que se establecieran las credenciales, ya el sistema puede acceder al correo descrito anteriormente. Ahora se crean los controladores y vistas pertenecientes a estos correos; los cuales se dividen en creación de instructor, creación de tutor, envío de 84 adecuaciones e informes cada vez que pase por alguna entidad, y por último retraso de informe a los tutores si no se han creado; cada uno con distintos destinatarios y diversos mensajes. Además, se fue necesario adjuntar el documento en PDF al correo en caso de que el mismo se trate de envío a otras entidades; de esta manera, los receptores del correo podrán tener el documento sin la necesidad de entrar al sistema. En la Figura 3.43. se muestra como luce el correo electrónico creado, el mismo tiene un estilo general, es decir se cumplen para todos los correos, lo que varía es el título del mismo, el mensaje y si contiene documentos en PDF adjuntos, el cual es generado automáticamente siempre que se envía un correo. Cabe destacar que estos correos son destinados al correo institucional de los usuarios, se podrá abrir en el servidor de correos de la Facultad de Ciencias de la Universidad Central de Venezuela. Fig. 3.43. Vista de correo electrónico emitido junto al archivo adjunto. 3.10. Sprint 8: Módulo de Secretaria Una vez desarrollado las funcionalidades anteriores, se tiene el core básico para garantizar el funcionamiento del sistema. Sin embargo, hay aspectos triviales que deben ser tomados en cuenta, como la carga de los usuarios que utilizarán el sistema, de ahí nace la necesidad de crear un módulo de secretaria. Este sprint tiene como objetivo la creación de un módulo que permita la carga de información básica de los distintos usuarios, entre ellos están los tutores y los instructores, el mismo también permitirá modificar y consultar los datos. A demás, se encargará de asociar un tutor con un instructor a través de un plan de formación. Este módulo es mucho más sencillo, no contiene notificaciones, pero si las creará al guardar el plan de formación y capacitación. En la Figura 3.44. se muestra como está constituido el módulo. El inicio, como se dijo antes, no muestra notificaciones; y el menú 85 principal contiene Inicio, Tutor e Instructor que aquí es donde se cargarán los mismos; y el cerrar sesión. Fig. 3.44. Inicio de Módulo de Secretaria. En el menú se encuentran dos pestañas desplegables, tanto el tutor como el instructor, visibles en la Figura 3.45., que muestran agregar, modificar y consultar información de los mismos. Fig. 3.45. Pestañas desplegables del menú principal del Módulo de Secretaria. Lo ideal es siempre partir de la creación del tutor, esto se debe a que la creación del instructor esta aunado con la del plan de formación y capacitación. Al agregar información del tutor, se abrirá una nueva pestaña que contendrá diversos campos pertenecientes a la data del mismo. El modificar y agregar información son exactamente lo mismo, con la diferencia que primero se busca que tutor se desea modificar, como se visualiza en la Figura 3.46. para luego cargar la pestaña en común de agregar información presente en la Figura 3.47. Fig. 3.46. Selección de tutor a modificar. 86 Fig. 3.47. Vista donde se agrega o modifica datos de los tutores El consultar información es exactamente lo mismo, solo que no se podrá editar la información mostrada. Lo mismo sucede con el instructor, al modificar la información también se debe seleccionar que instructor se desea editar; sin embargo, la información suministrada es distinta, esto es debido a que los datos a cargar no solo son personales sino también referentes al plan de formación del instructor, como se muestra en la Figura 3.48. Fig. 3.48. Vista donde se agrega o modifica datos de los instructores 87 3.11. Sprint 9: Adjuntar Soportes en PDF Una de las mejores formas de demostrar que el instructor cumplió con sus obligaciones pertinentes al plan de formación y capacitación es mediante los soportes que lo validen; por lo tanto, es crucial que el sistema permita la carga, visualización y eliminación de soportes. Como se mostró anteriormente con los documentos exportados en PDF, los mismos se guardan en la base de datos; pero en lugar de exportarlo solamente se toma del lado del cliente, y se almacena de la misma manera, como se mostró en el Código 3.4. Se creó un nuevo controlador, modelo y vista en el código denominado Document, que es el encargado de asociar toda la información recibida, realizar ciertas validaciones, y almacenarlos. Es importante resaltar que los soportes solamente podrán ser cargados por el módulo de Tutor y directamente a las actividades ejecutadas en los informes semestrales. En el caso de la interfaz, para acceder a esta funcionalidad se debe hacer click en el botón de “Soportes”, visible en la Figura 3.21. mostrada previamente; permitiendo cargar la vista de los mismo como muestra la Figura 3.49. Fig. 3.49. Visualización de Soportes de actividades de informes. Si el tutor desea añadir un nuevo soporte solo debe seleccionar el botón de “Agregar Documento” mostrado en la figura anterior, que lo redirigirá a una nueva pestaña donde podrá seleccionar el archivo a cargar; en el mismo contara con un botón que permite abrir una ventana que contiene todos los documentos del parte del cliente, una vez seleccionado el documento a cargar se selecciona “Subir Archivo”; en la Figura 3.50. se explica gráficamente este proceso. Como bien se dijo anteriormente que el tutor es el único que puede añadir y eliminar soportes de las actividades; sin embargo, las entidades y los instructores podrán tener acceso a los mismos, permitiendo descargarlos y visualizarlos. La interfaz será la misma solo no tendrá la columna de eliminar. 88 Fig. 3.50. Carga de documentos de soportes Al momento de subir el archivo se debe tener en cuenta que se crearon ciertas restricciones, esto para mantener el correcto funcionamiento del sistema. Entre ellas está la carga únicamente de documentos en PDF, ya que son soportes que no necesitan ser mostrados en imagen ni otro tipo de extensión. En el Código 3.7. se muestra cómo se crea esta restricción. def only_pdf if (@file.content_type != "application/pdf") errors.add(:file, 'El archivo solo puede ser PDF') end end Código 3.7. Verificación de carga única en formato PDF. Otra importante restricción que se tuvo en cuenta fue el tamaño del archivo; esto se toma a consideración por distintas razones, entre ellas es que el servidor en el que correrá el sistema no cuenta con un disco duro extenso, por lo tanto, se restringe a 1MB de tamaño por cada archivo que se suba, esto para evitar la saturación de memoria en el servidor; esta restricción es visible en el Código 3.8. NUM_BYTES_IN_MEGABYTE = 1048576 def file_size_under_one_mb if (@file.size.to_f / NUM_BYTES_IN_MEGABYTE) > 1 errors.add(:file, 'El tamaño del archivo no puede ser mayor a 1 MB.') end end Código 3.8. Verificación de límite de tamaño de archivo a cargar. Y para correr ambas validaciones al momento de cargar un documento se tiene que añadir al principio del archivo del modelo de Documento el código presente a continuación en Código 3.9. 89 class Document < ActiveRecord::Base validate :file_size_under_one_mb validate :only_pdf Código 3.9.. Validación de restricciones previamente mencionadas. 3.12. Sprint 10: Conexión con Correo Institucional El ultimo sprint consiste en poder desarrollar una conexión con el dominio de correos electrónicos de la Facultad de Ciencias de la Universidad Central de Venezuela, permitiendo a los usuarios el iniciar sesión utilizando tanto el correo como la contraseña empleada en el mismo. Esta funcionalidad se desarrollará con LDAP, por sus siglas en inglés Lightweight Directory Access Protocol, el cual es un protocolo de cliente / servidor que se usa para acceder y administrar la información del directorio. Lee y edita directorios a través de redes IP y se ejecuta directamente sobre TCP / IP utilizando formatos de string simples para la transferencia de datos. Ruby cuenta con una gema que facilita el uso del LDAP, esta gema es net-ldap visible en el Código 3.10. class ForminstController < ApplicationController require 'net-ldap' Código 3.10. Gema requerida para establecer conexión con LDAP. El uso de la misma es sencillo, solamente se debe deben especificar los parámetros para conectarse al dominio y luego pasar las credenciales al servidor, este proceso es visible en el Código 3.11. Entre los parámetros especificados está el host, el cual es el mismo para acceder al correo de la Facultad; el puerto de LDAP que por defecto es el 389, y la autenticación, que es de un administrador del correo, en conjunto con la contraseña especificada. Luego se reciben los parámetros del correo y la contraseña, y de ahí se conecta con LDAP, buscando en la base de datos remota la existencia de ese usuario con esa contraseña. Si no lo encuentra el resultado será null, y se procederá a entrar al sistema a través de la última contraseña utilizada. #Conectar con el servidor ldap ldap= Net::LDAP.new(:host=>"correo.ciens.ucv.ve",:port=>389, :auth=>{:method=> :simple, :username=>"cn=vmail,dc=ciens,dc=ucv,dc=ve", :password => "XXXXX"}) correo= params[:correo] # se toma el valor correo del ususario clave= params[:password] # se toma el valor password del usuario begin result = ldap.bind_as(:base => "dc=ciens, dc=ucv, dc=ve", :filter => "(uid=#{correo})", :password => clave) rescue => error result = nil end Código 3.11. Configuración para conexión con LDAP de correo institucional de la Facultad de Ciencias. 90 Capítulo 4: Pruebas y Resultados Al finalizar el desarrollo del sistema FORMINST, se procedió a ejecutar múltiples pruebas con la finalidad de medir su usabilidad, y verificar que las funcionalidades estaban bien implementadas. Debido a que el presente Trabajo Especial de Grado es basado en la automatización de procesos referentes a planes de formación y capacitación, a través de una aplicación web, es posible que los usuarios participantes no contengan una completa noción de manejo del mismo, por ende, se propuso realizar pruebas de usabilidad en el sistema, para verificar si los usuarios estaban conformes con los resultados y recibir un feedback de los mismos. Normalmente existen cuatro maneras de evaluar una interfaz de usuario: formalmente mediante una técnica de análisis, automáticamente mediante un procedimiento computarizado, empíricamente mediante experimentos con usuarios de prueba, y heurísticamente observando la interfaz y emitiendo un juicio de acuerdo con la opinión de cada uno [34]. En el presente TEG se emplearon dos tipos de pruebas; pruebas experimentales y heurísticas, en conjunto con una prueba final de aceptación del software. 4.1. Pruebas Experimentales En el presente TEG se emplearon dos tipos de pruebas; una vez el sistema se creía finalizado se puso en producción, incluyendo usuarios (tutores, instructores, secretarias y entidades) con la finalidad que realizarán pruebas y tratar el sistema como definitivo. En esta fase múltiples usuarios mostraron quejas afirmando que el sistema no siempre funcionaba y a veces arrojaba errores. Los mismos fueron recibidos por la Prof. Ana Morales y se fue notificado al grupo de desarrolladores, para luego ser analizados y a su vez dar solución lo más pronto posible. A continuación, en la tabla 4.2. se muestran los errores que fueron recopilados, se les asignó una prioridad (visible en la tabla 4.1.), la fecha de cuando se consiguió el error y finalmente como se solucionó. Numero de Prioridad Valor 0 No es problema 1 Problema cosmético 2 Problema menor 3 Problema mayor, importante fijar solución 4 Problema catastrófico, fundamental fijar solución Tabla 4.1. Prioridades predeterminadas para los errores 91 Error Valor Fecha encontrado Solución En Módulo Tutor: La opción de eliminar/modificar adecuación o informe, salían estando aprobado el documento 3 15-03-2018 En el backend estaba programado para no aceptar modificaciones, sin embargo, se procedió a arreglarlo en la interfaz. En Módulo Tutor: Al cargar los informes anuales y final no se exportaba la data de los informes semestrales ya suministrada. 3 04-05-2018 Al crear un informe anual o final, se toma la información suministrada en los informes semestrales. En Módulo Entidad: Notificaciones no se muestran por departamento 2 04-07-2018 Se agregó el campo de departamento en la Base de Datos, a la tabla referente a las notificaciones. Errores Ortográficos 1 06-02-2019 Fueron acomodados. En Módulos Tutor o Entidad: Error del sistema al enviar el documento, de manera arbitraria 4 06-02-2019 Se realizó verificaciones en las sesiones de adecuaciones antes de hacer cambios para no generar este error nuevamente. En Módulo Tutor: Los soportes de los informes semestrales no se importan automáticamente en la creación de informes anuales y final. 2 06-02-2019 Al crear un informe anual o final, el mismo crea un link de acceso a los soportes de los semestres anteriores. En Módulo Entidad: Migas de pan no funcionan 3 06-02-2019 Se añadieron las migas de pan (breadcrumbs) en ese modulo. En general: Los botones de observaciones a veces salen en amarillo sin contener observación alguna 3 06-02-2019 Cuando alguna entidad guarda observaciones, las que están vacías ya no las cuenta. En Módulo Entidad: En los documentos no salen los nombres de los instructores seleccionados 2 06-02-2019 Se insertaron los nombres de los instructores en las interfaces. Tabla 4.2. Errores recopilados a lo largo del desarrollo del sistema por parte de los usuarios. 92 Los primeros errores, específicamente antes del año 2019, fueron solucionados sin seguir ninguna metodología; sin embargo, desde el año 2019 se trató de implementar una modificación del Product Backlog referente a la metodología Scrum; esto con la finalidad de tener un orden de ideas y tener al tanto que errores debían ser solucionados y marcar cuando fueron solucionados. Con esto en mente se utilizó la herramienta de Spreadsheets de Google con el objetivo de hacerle saber al líder del proyecto, en este caso la Prof. Ana Morales, si los errores fueron arreglados y si ya se encuentra la solución en el servidor. El mismo se puede observar en la Figura 4.1. Fig. 44.1. Product Backlog de errores presentes en FORMINST Al momento de resolver los errores, se encontraron muchos más, algunos no tan importantes y otros catastróficos. Gracias al desarrollo de este artefacto se pudo encontrar los distintos errores mostrados debajo de la franja roja en la figura 4.1., los mismos fueron solventados, subidos al manejador de versiones git y finalmente al servidor. 4.2. Pruebas Heurísticas Para la prueba de usabilidad se realizaron una serie de preguntas basadas en las Heurísticas de Usabilidad propuestas por Nielsen [21], las cuales son: • Visibilidad del estado del sistema: el sistema siempre debe mantener a los usuarios informados sobre el estado del sistema, a través de la retroalimentación apropiada dentro de un tiempo razonable. • Lenguaje de los usuarios: el sistema debe hablar el idioma del usuario, con palabras, frases y conceptos familiares para el mismo, en lugar de términos orientados al sistema. Siguiendo las convenciones del mundo real, haciendo que la información aparezca en un orden natural y lógico. 93 • Control y libertad del usuario: los usuarios a menudo eligen las funciones del sistema por error y necesitarán una "salida de emergencia" claramente marcada para salir del estado no deseado. • Consistencia y normas: los usuarios no deberían tener que preguntarse si diferentes palabras, situaciones o acciones significan lo mismo. • Prevención de errores: incluso mejor que los buenos mensajes de error es un diseño cuidadoso que evita que ocurra un problema en primer lugar. • Reconocimiento en lugar de recuerdo: hacer visibles objetos, acciones y opciones. El usuario no debería tener que recordar información de una parte del diálogo a otra. Las instrucciones de uso del sistema deben ser visibles o fácilmente recuperables cuando sea apropiado. • Flexibilidad y eficiencia de uso: los aceleradores, no vistos por el usuario novato, a menudo pueden acelerar la interacción para el usuario experto, de modo que el sistema puede atender tanto a usuarios inexpertos como experimentados. Permitir a los usuarios personalizar las acciones frecuentes. • Diseño estético y minimalista: los diálogos no deben contener información que sea irrelevante o que rara vez se necesite. Cada unidad adicional de información en un diálogo compite con las unidades relevantes de información y disminuye su visibilidad relativa. • Ayuda a los usuarios a reconocer, diagnosticar y recuperarse de errores: los mensajes de error deben expresarse en un lenguaje sencillo (sin códigos), indicar con precisión el problema y sugerir constructivamente una solución. • Ayuda y documentación: aunque es mejor si el sistema se puede usar sin documentación, puede ser necesario proporcionar ayuda y documentación. Cualquier información de este tipo debe ser fácil de buscar, centrada en la tarea del usuario, enumerar los pasos concretos que deben realizarse y no ser demasiado grande. El conjunto de heurísticas presentadas anteriormente han sido un punto de partida para la creación de nuevas sub-heurísticas, una de ellas fue la desarrollada por Deniese Pierotti que, además de las 10 heurísticas de Nielsen agrega tres más [35]: • Habilidades: el sistema debería tener en cuenta las habilidades del usuario, conocimiento y experticia • Interacción con el Usuario Placentera y Respetuosa: el usuario debe ser tratado con respeto. El diseño debe ser estético y placentero, en donde los valores artísticos se iguales a los valores funcionales. • Privacidad: El sistema debe ayudar al usuario a proteger la información personal. A propósito de la investigación, se intentó reducir la complejidad de los formularios a realizar, al utilizar solo principios básicos que se acoplan al sistema desarrollado y de los más resaltantes para validar la usabilidad del mismo, en conjunto con uno de los principios planteados por Deniese Pierotti. Tal conjunto más pequeño de principios parece más adecuado como base para la evaluación heurística práctica. Los mismos se listan en la tabla 4.3. 94 Principio Numero de Principio Visibilidad de Estado del Sistema H1 Lenguaje de los Usuarios H2 Control y Libertad para el Usuario H3 Consistencia y Estándares H4 Interacción con el Usuario Placentera y Respetuosa H5 Tabla 4.3. Principios empleados en evaluación heurística. Es importante recalcar que las heurísticas son utilizadas para identificar cualquier problema asociado con el diseño de interfaces de usuarios. La actividad realizada contó con una serie de preguntas directas acerca el sistema y la capacidad del usuario para contestar. Estas preguntas sirven de ayuda para detectar qué partes de la interfaz resultan ser problemáticas y cuáles no. Las mismas fueron extraídas del Manual de Evaluación Heurística [35]. De la misma manera, se seleccionó la escala de medición de Likert; la misma una escala psicométrica utilizada principalmente en la investigación de productos para la comprensión de las opiniones y actitudes de algún usuario hacia el mismo. Utilizándola con la finalidad de realizar mediciones y conocer sobre el grado de conformidad de una persona o encuestado hacia una pregunta determinada. De esta manera se emplean las respuestas presentes en la Figura 4.2., explicando a su vez el significado de cada respuesta. Fig. 4.2. Escala de medición de Likert Se creó un formulario en Google Forms, para contar con la facilidad de charts que el mismo incluye. Para la selección de los participantes se tuvo que ingresar a la base de datos del sistema FORMINST en actual funcionamiento y se tomaron los números telefónicos de distintos instructores y tutores; se le envió el formulario a cada uno de ellos (más de 35 en total), sin embargo, solo se obtuvieron 7 respuestas. El formulario contaba con una serie de preguntas específicas dependiendo de qué tipo de usuario llenaba la misma (Tutor, Entidad, Instructor y Secretaria). En la figura 4.3. se puede ver la participación de cada uno de los tipos de usuarios; siendo los instructores los que más contestaron el formulario. 95 Fig. 4.3. Tipos de usuarios participantes en el formulario. Es importante aclarar que no únicamente se realizaron preguntas sobre la usabilidad del sistema, sino también preguntas con la finalidad de saber que opinaban los usuarios sobre distintas funcionalidades, y en que los ha beneficiado la creación de FORMINST; todo para tener una retroalimentación y poder mejorar y optimizar el mismo. Dicho esto, a continuación, se muestran las preguntas y resultados, primeramente, de la evaluación heurística de usabilidad y luego dependiendo del tipo de usuario encuestado, preguntas generales con respecto a funcionalidades del sistema. 4.2.1. Preguntas de Usabilidad Como se mencionó con anterioridad, solo se tomaron 5 principios más apropiados al sistema desarrollado, presentes en la Tabla 4.3. A continuación, se muestran los resultados obtenidos, presentes en la Tabla 4.4., aclarando el uso de la escala de Likert para la evaluación: 1 (Totalmente en Desacuerdo), 2 (En desacuerdo), 3 (Ni de acuerdo, ni desacuerdo), 4 (de acuerdo) y 5 (Totalmente de acuerdo). # Pregunta H# 1 2 3 4 5 1 ¿Cada parte de la interfaz comienza con un título o encabezado que describa el contenido de la pantalla? H1 0% 0% 14.3% 57.1% 28.6% 2 Los menús gráficos ¿muestran de manera obvia cual es el ítem que se ha seleccionado? H1 0% 0% 28.6% 71.4% 0% 3 ¿Se informa constantemente al usuario acerca de lo que está pasando? Por ejemplo: notificaciones de éxito o falla. (Feedback) H1 0% 14.3% 28.6% 57.1% 0% 4 La terminología utilizada en los menús, ¿es consistente con el dominio de conocimiento del usuario en relación con la tarea a realizar? H1 0% 0% 0% 85.7% 14.3% 5 Si existen demoras mayores a 15 segundos en la respuesta del sistema, ¿el usuario es informado del progreso en la concreción de la respuesta? (barra de carga) H1 0% 14.3% 28.6% 57.1% 0% 96 # Pregunta H# 1 2 3 4 5 6 Si los usuarios navegan entre diferentes pantallas del sistema, ¿el sistema utiliza marcas de navegación a modo de ayudas para esa navegación? (Migas de pan) H1 0% 28.6% 42.9% 14.3% 14.3% 7 ¿Los iconos son concretos y familiares para el usuario? H2 0% 0% 14.3% 85.7% 0% 8 Cuando se ingresan datos en la pantalla, ¿la terminología utilizada para describir la tarea es familiar para el usuario? H2 0% 0% 14.3% 57.1% 28.6% 9 Las opciones en los menús, ¿se corresponden lógicamente con las categorías que tengan un significado univoco? H2 0% 0% 28.6% 57.1% 14.3% 10 ¿Las teclas de función están claramente etiquetadas y se distinguen con facilidad? H2 0% 0% 28.6% 71.4% 0% 11 ¿Se pregunta al usuario que confirme acciones que tendrán consecuencias drásticas, negativas o destructivas? (Por ejemplo, eliminar informe) H3 14.3% 0% 14.3% 57.1% 14.3% 12 ¿Los usuarios pueden reducir el tiempo de entrada de datos copiando y modificando datos existentes en el sistema? H3 0% 0% 42.9% 28.6% 28.6% 13 ¿Existe algún mecanismo que permita a los usuarios regresar al menú previo? H3 0% 14.3% 28.6% 42.9% 14.3% 14 ¿Los usuarios pueden cancelar operaciones en progreso? H3 0% 0% 85.7% 14.3% 0% 15 ¿Cada ventana posee un título? H4 0% 0% 0% 85.7% 14.3% 16 Si el sistema posee pantallas múltiples para la entrada de datos ¿las correspondientes pantallas están numeradas de alguna manera secuencial? H4 0% 0% 0% 0% 100% 17 ¿La estructura de entrada de datos es consistente entre las diferentes pantallas? H4 0% 0% 28.6% 57.1% 14.3% 18 ¿El abuso de letras en mayúsculas en la pantalla ha sido evitado? H4 0% 0% 42.9% 57.1% 0% 19 ¿Se ha usado el color con discreción? H5 0% 0% 0% 57.1% 42.9% 20 Si los usuarios están trabajando de una copia impresa, ¿el diseño de pantalla coincide con el formulario de papel? H5 0% 0% 28.6% 28.6% 42.9% 21 ¿El color se ha utilizado específicamente para llamar la atención, indicar cambios de estatus, o establecer relaciones? H5 0% 0% 14.3% 57.1% 28.6% 22 ¿El color se ha utilizado específicamente para llamar la atención, indicar cambios de estatus, o establecer relaciones? H5 0% 0% 14.3% 85.7% 0% Tabla 4.4. Resultados de evaluación de Nielsen sobre Usabilidad. 97 Bajo estos resultados, se puede apreciar que el sistema de FORMINST tuvo una buena aceptación entre los usuarios. Sin embargo, a pesar de que en la evaluación todas las preguntas obtuvieron resultados positivos bajo la escala de Likert, no fueron los óptimos, es decir, la mayoría no se centró en Totalmente de acuerdo. Dejando así una posible propuesta de mejoramiento en la usabilidad del sistema, enfocándose en los aspectos más pobres, entre los cuales destaca la heurística 1, Visibilidad de Estado del Sistema. Para tener una mejor comprensión de los resultados obtenidos, se realizó un análisis sobre los porcentajes obtenidos en la encuesta, basados en cada uno de los encuestados. En primer lugar, cada respuesta en la escala de Likert, se le otorgó un 25% a cada escala empezando desde 0; obteniendo como puntuación 0 la escala más baja y 100 la escala más alta, luego se divide entre la cantidad de preguntas referente a esa heurística para tener el porcentaje de la misma. Este método de evaluación fue una variante de la mostrada en [36], donde no se toma la evaluación de Likert, sino un tipo distinto con solo 4 escalas; a fin de adecuarla a la investigación se realizaron los mismos cálculos con el fin de obtener resultados analizados fáciles de analizar. De esta manera, se tomaron las 5 heurísticas presentadas en las encuestas y se validó los resultados con los distintos encuestados; con la finalidad de tener respuestas precisas sobre la usabilidad del sistema. Estos resultados se muestran en la Tabla 4.5. Heurística Eval1 Eval2 Eval3 Eval4 Eval5 Eval6 Eval7 Total x Heu Visibilidad del Estado del Sistema 66.7% 70.8% 75% 54.2% 50% 75% 75% 66.7% Lenguaje de Usuario 75% 75% 62.5% 68.8% 81.3% 68.8% 75% 72.3% Control y Libertad para el Usuario 62.5% 62.5% 50% 62.5% 62.5% 68.8% 75% 63.4% Consistencia y Estándares 75% 81.2% 68.8% 75% 87.5% 81.3% 81.3% 78.6% Interacción con el usuario placentera y respetuosa 68.8% 81.2% 62.5% 93.8% 81.3% 87.5% 75% 78.6% Porcentaje de Usabilidad 69.6% 74.1% 63.8% 70.9% 72.5% 76.3% 76.3% 71.9% Tabla 4.5. Resultados de heurísticas resumidas por encuestado. Observando más a fondo, luego de este análisis de resultados más elaborado, se pudo obtener un porcentaje de usabilidad del sistema de aproximadamente 72% (71.9%), teniendo una retroalimentación positiva del mismo. En la tabla 4.5. se puede observar además que el principio más fuerte en el sistema es la “Interacción con el usuario placentera y respetuosa” con un 78.6%; mientras que la heurística que mostró mayor debilidad fue el “Control y Libertad para el usuario” con un 63.4% de aceptación. Por otro lado, dependiendo del tipo de rol que emplea el usuario encuestado en el sistema, se les hicieron preguntas generales, que no se relacionan con la usabilidad del mismo, sino para verificar las funcionalidades y conocer si los usuarios están de acuerdo con ellas. 98 4.2.2. Preguntas a Instructores Un total de 3 instructores pudieron realizar el formulario. Las preguntas, dependiendo del rol en la aplicación son solamente generales, no son utilizadas para medir la usabilidad del sistema, sino más bien conocer la opinión de los usuarios acerca del mismo. Las preguntas se mostrarán a continuación pertenecen a las dedicadas específicamente a los instructores. La primera pregunta que se realizó fue “¿Suele hacer uso del sistema FORMINST?”, con cinco posibles respuestas, variando entre Siempre, Muchas veces, Algunas veces, Pocas veces, Nunca. Como se observa en la Figura 4.4. la repuesta mayor fue “Algunas Veces” seguido por “Pocas veces”. Esto demuestra que los instructores no son usuarios que hacen vida en la aplicación; con toda la razón ya que los mismos son únicamente módulos de visualización. La segunda pregunta fue “¿para qué lo usa con más frecuencia?”, en este caso se ofrecieron 3 respuestas a modo de checklist permitiendo al usuario seleccionar las opciones de su preferencia; las respuestas fueron “Para conocer el estado del documento dentro del flujo de entidades”, “Para verificar que mi tutor haya cargado / enviado algún documento” y “Para saber verificar que la información cargada por mi tutor sea la correcta”; en el cual las dos primeras opciones fueron las más votadas. Esto nos indica que los instructores al hacer uso del sistema lo hacen con la necesidad de conocer el estado del documento a crear, tanto si ya se encuentra en el flujo como para saber si ya fue cargado, tal y como lo muestra la Figura 4.5. Fig. 45.4. Chart pregunta 1 Instructor. 99 Fig. 4.4. Chart pregunta 2 Instructor. Las otras tres preguntas restantes fueron evaluadas con la escala de Likert descrita anteriormente, teniendo un estándar para mostrar una tabla con los distintos resultados; en la Tabla 4.6. se muestran los mismos, teniendo como evaluación: 1 (Totalmente en Desacuerdo), 2 (En desacuerdo), 3 (Ni de acuerdo, ni desacuerdo), 4 (de acuerdo) y 5 (Totalmente de acuerdo). Pregunta 1 2 3 4 5 ¿Está usted de acuerdo con el escalamiento automático de un documento una vez ya hayan pasado 3 semanas en la misma instancia? 0% 0% 0% 66.7% 33.3% ¿Ha visto usted mejoras en los tiempos en los trámites en comparación con el manejo manual? 0% 66.7% 33.3% 0% 0% ¿Le han sido útiles los recordatorios y notificaciones por correo electrónico? 0% 33.3% 0% 66.7% 0% Tabla 4.6. Resultados de preguntas 3,4 y 5 de los instructores. Estas pruebas demuestran, en primer lugar, que los instructores se encuentran a favor de la funcionalidad del escalamiento automático de los documentos, siendo claramente un beneficio para los mismos. En segundo lugar, se pudo deducir que, inclusive con la implementación del escalamiento automático, los usuarios no están contemplando algún tipo de mejora de los tiempos para la finalización del flujo; cabe destacar que la encuesta fue realizada luego de que la universidad estuviera fuera de servicio por aprox. 2 meses. Y, por último, la mayoría de los instructores les ha parecido útiles los recordatorios y notificaciones por correo electrónico; sin embargo, un usuario recalco que estaba en desacuerdo, esto puede deberse a que los correos se envían al correo institucional del mismo y no al personal, el cual posiblemente no revise con tanta frecuencia. 4.2.3. Preguntas a Tutores Otro tipo de usuario fundamental a evaluar fueron los tutores, esto debido a que el sistema está dedicado a facilitar los procesos de carga de información y manejo de la 100 misma. A los tutores también se les hicieron preguntas generales, como al instructor, en conjunto con preguntas de usabilidad. Un total de 2 tutores contestaron el formulario, en este caso todas las preguntas realizadas fueron evaluadas con la escala de Likert, siendo más fácil la visualización de resultados. En la Tabla 4.7. se visualizan los resultados de las preguntas referentes a este módulo las mismas evaluadas con los resultados: 1 (Totalmente en Desacuerdo), 2 (En desacuerdo), 3 (Ni de acuerdo ni desacuerdo), 4 (de acuerdo) y 5 (Totalmente de acuerdo). Pregunta 1 2 3 4 5 ¿El sistema FORMINST ha facilitado el proceso de creación, carga y envío de los documentos pertinentes a los planes de formación y capacitación? 0% 0% 0% 50% 50% ¿Está usted de acuerdo con la implementación de un escalamiento automático del documento una vez ya hayan pasado 3 semanas en la misma instancia? 0% 0% 0% 50% 50% ¿Está usted de acuerdo con las distintas permisologías otorgadas en el sistema dependiendo del tipo de usuario que sea? 0% 0% 0% 50% 50% ¿Ha visto usted mejoras en los tiempos en los trámites en comparación con el manejo manual? 0% 0% 50% 0% 50% ¿Le han sido útiles los recordatorios y notificaciones por correo electrónico? 0% 0% 50% 0% 50% Tabla 4.7. Resultados de preguntas 1,2,3,4 y 5 de los tutores. Las respuestas de los tutores fueron mayormente positivas en cuanto al funcionamiento de FORMINST. En primer lugar, los resultados muestran que los tutores creen que el sistema desarrollado ha facilitado los procesos de creación, carga y envío de los documentos pertinentes a los planes de formación y capacitación. En segundo lugar, también observamos preferencia a la funcionalidad de escalamiento automático de documentos tal como lo demuestran a su vez los instructores. La tercera pregunta refleja que los tutores están de acuerdo con las permisologías otorgadas a los distintos usuarios; demostrando que las mismas están bien distribuidas en el sistema y que se tuvo una buena concepción sobre lo que debe hacer cada rol en este proceso. En cuarto lugar encontramos como positivo las mejoras de tiempo en los trámites en comparación al proceso manual; poniendo las respuestas de los instructores y los tutores en contexto, los tutores tal vez pueden referirse a que se han acortado los tiempos de carga de información en los documentos y no necesariamente al tiempo transcurrido en el trámite en total o tal vez, ya los tutores teniendo experiencia en otros planes de formación pueden decir con autoridad que si se han acortado los tiempos en general. Por último, los entrevistados demostraron que las notificaciones por correo electrónico son efectivas; en dado caso también se podría pensar en los dicho previamente en el caso de los instructores, si se notificara a un correo personal tal vez se tendrían mejores resultados. 101 4.2.4. Preguntas a Secretarias En este caso solamente una secretaria pudo responder el formulario, en este caso se realizaron únicamente 2 preguntas a este módulo, teniendo en cuenta que, si bien la secretaria no cumple un papel fundamental en el sistema, de todas maneras, tiene ciertas responsabilidades que debieron ser evaluadas. Es importante destacar que, como las secretarias no manejan los temas presentes dentro de los planes de formación sino solamente cargan usuarios, se trató de realizar preguntas sin mucha complejidad. Solamente un usuario respondió esta parte del formulario. El resultado del mismo se puede observar en la Tabla 4.8. Pregunta 1 2 3 4 5 ¿El sistema FORMINST ha facilitado el proceso de carga de información referente a los planes de formación y capacitación? 0% 0% 0% 100% 0% ¿Se le es fácil saber que debe hacer para registrar algún usuario? 0% 0% 0% 100% 0% Tabla 4.8. Resultados de preguntas 1 y 2 de las secretarias. Con estas respuestas se puede determinar que, la interfaz de secretaria se adapta a las funciones que deben realizar las mismas. Dejando en claro que se sienten a gusto con la creación del sistema, la inclusión de este módulo y el fácil uso del mismo. 4.2.5. Preguntas a Entidades A pesar de que el formulario fue enviado a aproximadamente 20 cuentas de correo de las entidades registradas en el sistema, únicamente una entidad pudo responder un solo usuario. En la misma se hacen 4 preguntas evaluadas con la escala de Likert, los resultados se encuentran presentes en la Tabla 4.9. evaluados de esta manera: 1 (Totalmente en Desacuerdo), 2 (En desacuerdo), 3 (Ni de acuerdo ni desacuerdo), 4 (de acuerdo) y 5 (Totalmente de acuerdo). Pregunta 1 2 3 4 5 ¿El sistema FORMINST ha facilitado el proceso de evaluación y revisión de documentos pertinentes a los planes de formación y capacitación? 0% 0% 0% 0% 100% ¿Está usted de acuerdo con la implementación de un escalamiento automático del documento una vez ya hayan pasado 3 semanas en la misma instancia? 0% 0% 0% 100% 0% ¿Está usted de acuerdo con las distintas permisologías otorgadas en el sistema dependiendo del tipo de usuario que sea? 0% 0% 0% 0% 100% Tabla 4.9. Resultados de preguntas 1, 2 y 3 de Entidades. Las respuestas arrojan resultados positivos, beneficiando al sistema. En primer lugar, aclarando que la creación del sistema ha facilitado el proceso de revisión de 102 documentos. Estando de acuerdo con el escalamiento automático desarrollado y garantizando el bueno uso de las permisologías en el sistema, deduciendo que cada rol en el sistema tiene las responsabilidades que se merece. 4.3. Pruebas de Aceptación Las pruebas de aceptación del usuario o UAT por sus siglas en inglés (User Acceptance Testing), pertenecen a la última fase del proceso de prueba del software, son una metodología de prueba en la que los clientes o usuarios finales participan en unas pruebas o encuestas sobre del producto para validar el mismo en función de los requerimientos preestablecidos. A demás de los usuarios finales entrevistados, mostrados anteriormente en preguntas generales y donde se obtuvo una retroalimentación positiva del sistema con ciertas observaciones; se entrevistó de manera personal a través de llamada telefónica a los clientes del proyecto, el Ex Coordinador Académico y la Coordinadora Académica actual. En la presente se realizaron una serie de preguntas abiertas, de manera tal que los mismos no se restrinjan a una respuesta predefinida y a la vez se tenga retroalimentación del sistema. A continuación, se muestran las preguntas realizadas en conjunto con un análisis de las respuestas de los mismos. 1. ¿El módulo de secretaria añadido en la versión actual, permite la creación de tutores, instructores y su asignación de plan de formación de manera efectiva? R: “Hasta ahora todo ha pasado exitosamente”, ambos comentaron que el módulo de secretaria funciona de manera efectiva; comentando a su vez que ha habido casos en el que los mismos tutores cargan la información de los instructores utilizando la cuenta de la secretaria del departamento o escuela. 2. ¿El sistema FORMINST envía recordatorios y notificaciones tanto por correo electrónico como a través del sistema? R: “Si llegan, sé que a los profesores en general les llegan los correos”, se tuvo una variante en esta pregunta debido a que un cliente dijo que no recibió los correos del sistema, pero al final se determinó que era porque el mismo pensaba que le debían llegar al correo personal y no al correo institucional. De resto se indicó que esta funcionalidad funciona de manera correcta. 3. ¿El sistema FORMISNT permite la exportación de documentos en PDF de manera efectiva en un formato estandarizado? R: “Si, puedo guardarlo en mi maquina como un PDF”, el cliente actual demostró que si se desarrolló con éxito esta funcionalidad. El cliente anterior, el Ex coordinador como no tuvo mucho uso del sistema, no probó esta funcionalidad en su momento. 4. ¿El sistema permite la carga de documentos de soporte en el módulo de tutor, y la respectiva visualización de los mismos? 103 R: “Yo no he cargado documentos como tutor, pero como entidad de Consejo de Facultad he observado soportes adjuntos por los tutores a las actividades en los informes”, si bien no demuestran que el tutor puede adjuntar documentos si pueden verlos, dejando en claro que fue desarrollado con éxito esta funcionalidad. 5. ¿FORMINST contiene una interfaz responsive, permitiendo adaptarse a pantallas 800x600 (video beam)? R: “En video beam lo hemos probado y se ve bien”, si bien ambos profesores demostraron no haber cambiado las dimensiones de las pantallas de FORMINST, al preguntarles si lo han probado en video beam, cuya resolución es 800x600, se obtuvo resultados positivos por parte de los encuestados. 6. ¿Está usted conforme con el flujo actual de los documentos del sistema, se asemeja al manejado de manera manual? R: “Si, con el uso que he tenido del sistema creo que se adapta”, ambos entrevistados estuvieron de acuerdo con el flujo que lleva actualmente el sistema, con la observación de la Coordinadora Académica donde mencionó que al final, el Consejo de Facultad debería tener otras opciones para avalar o no el documento, sin embargo, es algo que se tiene estipulado para una versión futura. 7. ¿Los tutores en el sistema pueden cargar toda la información referente a los documentos de planes de formación y capacitación? R: “Si, de manera efectiva y lo hace más fáciles visualizar”, ambos profesores mostraron retroalimentación positiva para esta funcionalidad. 8. ¿Cada uno de los usuarios del sistema, exceptuando las secretarias, pueden observar las diversas observaciones añadidas en algún documento en tiempo real? R: “Si me han hecho observaciones y lo he visto antes que el flujo termine”, los dos entrevistados demostraron que si se podían ver las observaciones del documento inclusive si el mismo no ha terminado el flujo, además, la Coordinadora Académica hizo la acotación de que hace más de un mes el sistema tenía un bug el cual no permitía visualizar las observaciones de otras entidades, error que ya había sido solucionado para la fecha de la entrevista, y presente en el Product Backlog de errores en la Figura 4.1. 9. ¿La implementación de la funcionalidad de escalamiento automático fue desarrollada con éxito? Alguna observación. R: “Totalmente, esto después que pase un tiempo prudencial se supone que, si las entidades intermedias no lo revisan y no lo envían, entonces quieren decir que no tienen observaciones al respecto. Es por eso que propuse esta funcionalidad” mencionó el Ex Coordinador. Ambos entrevistados estuvieron rotundamente de acuerdo con esta funcionalidad, la Coordinadora Académica a su vez mencionó “Según el reglamento eso solamente tiene que ir a Consejo de Facultad, las otras instancias están ahí para que se informen, si no lo revisan a tiempo, pues, perdieron la oportunidad de informarse, eso está de acuerdo con el reglamento, si 104 el reglamento se cambia, eventualmente FORMINST podrá cambiar en otra versión.”. De esta manera, la entrevistada también destacó una posible funcionalidad para ser desarrollada en una versión futura de FORMINST, el cual permita a los entes devolver a la entidad que le precede si fue enviado de manera automática. 10. ¿El sistema FORMINST permite el inicio de sesión a través del email y contraseña del correo de ciencias? R: Ambos estaban de acuerdo, sin embargo, como los correos de las entidades fueron creados únicamente para el sistema de FORMINST, los que manejan estas entidades usualmente no verifican el correo de ciencias y no pueden corroborar esta funcionalidad. Sin embargo, el Ex Coordinador como tutor si lo ha validado. 11. ¿Está usted conforme con el producto entregado? R: “Según lo que se pidió, se entregó lo que se pidió” menciono la Coordinadora Academica haciendo hincapié en las nuevas funcionalidades a ser desarrolladas en la segunda versión del sistema. Se mostraron conformes con el desarrollo del sistema, a su vez, el Ex Coordinador mencionó “Yo de verdad los felicito, y se los agradezco” al referirse al sistema. La encuesta a los clientes finales del sistema arrojó resultados positivos, dejando como retroalimentación que el sistema actual, si bien no es perfecto, cubre las necesidades básicas de los planes de formación y capacitación. A su vez, resalta la creación de una posible versión mejorada la cual se mencionará más adelante en el documento. Si bien los clientes son el pilar principal para la aprobación de las pruebas de aceptación, también los usuarios finales, los usuarios que hacen vida en el sistema, deberían de ser considerados en estas pruebas de aceptación; por lo tanto, en el formulario realizado a los usuarios del sistema se incluyeron 4 preguntas generales usadas para conocer las preferencias del usuario con respecto a FORMINST. A continuación, se muestran los resultados obtenidos: En primer lugar, se preguntó, ¿Cuál de las siguientes funcionalidades del sistema le parece más útil? Se dieron 5 posibles respuestas, “Exportación de información cargada en Documento PDF estandarizado”, “Notificaciones cuando sucede un cambio de estatus de tramite o recordatorio”, “Posibilidad de carga de documentos como soporte”, “Escalamiento automático de documentos en el flujo de entidades”, “Posibilidad de ver observaciones y estado del documento en tiempo real”. Como se pueden observar en los resultados, todos los usuarios ven los beneficios orientados al conocimiento del estatus del documento en conjunción de conocer las posibles observaciones dadas en el mismo sin necesidad de terminar el flujo de documentos, pudiéndose observar en la Figura 4.5. 105 Fig. 4.5. Chart de pregunta general de preferencias de funcionalidad. Se hizo una respuesta puntual, con la finalidad de conocer si los usuarios prefieren el sistema FORMINST o el uso manual, a través de la siguiente pregunta: “¿Prefiere usted el uso del sistema FORMINST para manejo de documentos referentes a planes de formación y capacitación, o prefiere seguir empleando el método manual?”; Obteniendo como resultado, presente en la Figura 4.6., que el 100% de los encuestados prefieren el uso del sistema FORMINST, teniendo un feedback positivo también de los usuarios finales, en conjunto con la aprobación del mismo. Fig. 4.6. Chart de pregunta general de preferencia de uso. A demás, se les pregunto si querían realizar una retroalimentación como respuesta corta; en la misma se obtuvieron resultados positivos en conjunto con alguna observación de funcionalidad. En la figura 4.7. se observa la misma, con observaciones que deberían ser tomadas en cuenta cuando se realice una versión futura. 106 Fig. 4.7. Respuestas del feedback del sistema 107 Conclusiones El objetivo general de este Trabajo Especial de Grado se cumplió exitosamente, debido a que se desarrollaron todos los requerimientos funcionales y no funcionales que se habían descrito desde un principio; creando un sistema automatizado para la gestión y manejo de planes de formación y capacitación en la Facultad de Ciencias. Facilitando a su vez la carga de información referente a estos planes, el fácil seguimiento de los mismos y la fácil evaluación cuando entran en alguna entidad. Esta versión mejorada del sistema FORMINST se encuentra disponible en un servidor de producción en el Centro de Computación de la Facultad de Ciencias funcionando a la normalidad y puede ser accedido a través del URL: http://formacion.ciens.ucv.ve. Se realizaron modificaciones en la metodología ágil SCRUM utilizada con la finalidad de reutilizar diferentes componentes que son de gran ayuda al momento del desarrollo de software. Primeramente, se establecieron los requerimientos funcionales y no funcionales a ser desarrollados y luego se creó el diseño de una solución para poder dar paso a los distintos sprints pertenecientes al desarrollo del sistema. Mediante el estudio de diversas herramientas de aplicación web y tomando en cuenta todos los requerimientos funcionales y no funcionales del sistema, se aplicaron en conjunto para su implementación y desarrollo del sistema FORMINST, permitiendo así integrar las funcionalidades de carga de información referentes a los planes de formación y capacitación, envío de recordatorios y notificaciones, la estandarización de documentos cargados al sistema, la fácil y mejorada evaluación de los mismos, posibilidad de exportación del documento en PDF, y garantizando la disponibilidad del mismo en todo momento. Trayendo múltiples beneficios para los tutores, instructores, entidades en inclusive secretarias, otorgando todos los beneficios nombrados anteriormente Al realizar las pruebas a los usuarios para conocer las fortalezas y debilidades del sistema, se dio a conocer que uno de los factores principales planteados para la realización de este sistema, la reducción de tiempos en el trámite, no se veía reflejado; Si bien los usuarios no ven mejoras en los tiempos, mostraron gran agrado a diversas funcionalidades del sistema, en especial el permitir a los instructores y tutores conocer el estado actual en cual se encuentra el trámite en el flujo de documentos. A su vez, también se mejoró la experiencia a nivel de entidades, permitiendo el análisis optimo y mejorado de los diversos planes de formación y capacitación que ellos evalúan; ahorrando también tiempos de búsqueda y lugar para almacenar los mismos. Al final tanto los clientes del proyecto, los que tuvieron la idea de crear este sistema, como los usuarios que lo conforman mostraron agrado al mismo, demostrando http://www.formacion.ciens.ucv.ve/ 108 que se cumplieron las especificaciones prestablecidas; prefiriendo a su vez, el uso del sistema FORMINST en lugar del proceso manual. Esta investigación forma parte de un proyecto de gran envergadura, que tomó muchos meses de desarrollo, con múltiples cambios en el funcionamiento interno del mismo; con múltiples clientes de software. Este sistema pretende extenderse en un futuro a las demás facultades, tomando como caso de éxito la Facultad de Ciencias, ya que los profesores deberían de pasar siempre por estos planes de formación, sin importar la facultad. Finalmente, el desarrollo del sistema FORMINST fue una experiencia inolvidable, más de dos años de desarrollo; este proyecto me ayudó a crecer en múltiples habilidades, como lo es el trabajo en equipo, el trabajar con clientes con requisitos cambiantes y el dominar un framework de desarrollo web, Ruby on Rails. Todo esto me ha traído múltiples beneficios, permitiéndome trabajar mucho antes de poder realizar pasantías, y ya para ese momento tenía conocimiento de lo que es estar en un campo laboral. 109 Limitaciones Entre las limitaciones encontradas en el sistema, se puede indicar que no se permite la personalización del diseño, por lo que puede ser una mejora que se puede realizar al sistema. Además, el sistema fue desarrollado únicamente para la Facultad de Ciencias de la Universidad Central de Venezuela, por lo que se deben implementar adaptaciones si se desea trasladar a otras facultades. El sistema también carece de un módulo de Administración, que permita realizar diversos tipos de cambios en el sistema, como podría ser el cambio de estado de un trámite que por alguna razón deba ser alterado. Un super usuario que tenga múltiples funcionalidades dentro del sistema. FORMINST tiene la limitación de que solamente puede enviar correos electrónicos y conectar el email al correo institucional de la Facultad de Ciencias; siendo contradictorio ya que los mismos usuarios han expresado que no lo usan con tanta frecuencia y prefieren que les hagan llegar las notificaciones al correo personal. En el proceso común de planes de formación y capacitación se toma en cuenta el pedido de prórrogas, en el caso que algún instructor no pueda continuar el plan de formación por un periodo de tiempo finito; sin embargo, no se implementó esta funcionalidad en el sistema FORMINST. Por estas y otras razones se plantean diversas funcionalidades y módulos a ser desarrollados en una versión mejorada futura. 110 Trabajos Futuros Como se ha explicado a lo largo del capítulo de las pruebas se recomienda una creación de una segunda versión del sistema, esto por los resultados obtenidos en la prueba de usabilidad de Nielsen, que, si bien fueron positivos, no fue lo óptimo. A demás, el cliente actual del sistema, la actual Coordinadora Académica tiene previsto añadir nuevas funcionalidades al sistema, que se sabrán al momento de ser desarrollados. Pero en el ámbito del conocimiento actual de cómo fue desarrollado el sistema, comentando también que fue implementado bajo unas bases ya establecidas, se realizan las siguientes recomendaciones: • Una interfaz de programación de aplicaciones (API, por sus siglas en inglés) para teléfonos inteligentes, lo cual facilitaría el acceso al sitio web. • Desarrollar la funcionalidad de poder cancelar un proceso que ya se haya empezado, por ejemplo, mientras se envíe el documento se pueda cancelar el envío. • Cambiar la manera de acceder a los documentos, que no se manejen por sesiones, ya que el mismo ha generado muchos problemas a lo largo del desarrollo. Se recomienda colocar el identificador del documento en el URL para distinguirlo. • Según la entrevista realizada con la Coordinadora, se sugiere la posibilidad de poder devolver el documento a la entidad anterior si el mismo fue escalado de manera automática. • Desarrollar un módulo de control raíz, un módulo de administración, para manejar creación de secretarias y otros tipos de usuarios. • Se sugiere el control del Daemon, encargado del envío de recordatorios y escalamiento automático de documentos, sea controlado a través de una interfaz que tal vez pueda estar presente en el módulo de administración mencionado anteriormente. • Se promueve el mejoramiento de la interfaz, que aporte un diseño minimalista y sencillo de navegar a la vez. Se sugiere el uso de un framework de diseño más actualizado, como podría venir siendo el caso de Materialize en lugar de Bootstrap. • Desarrollar un módulo de prórrogas, en conjunto con la posibilidad de poder detener o reanudar un plan en el tiempo. Esto entre otras funcionalidades aún no implementadas. 111 Referencias [1] J. A. O’Brien y G. M. Marakas, Sistemas de información gerencial, 7a. México: Mc Graw Hill, 2006. [2] E. Oz, Administración de los Sistemas de Información, 5ª. México: Thomson, 2008. [3] E. Hardcastle, Business Information Systems. 2008. ISBN 978-87-7681-463-2. [4] Real Academia española. [Online]. Available: http://www.rae.es/rae.html. [Accessed: Dic-2018]. [5] C. J. Date, An introduction to database systems, 4ª. Boston: Addison-Wesley Publishing Company, 1986. ISBN: 0-201-14201-5. [6] S. B., Some Reflexions About Informations Systems for Universities in the Presence of Challenges and Changes Produced by Evaluation and Acreditation Processes. Avaliação: Revista Da Avaliação Da Educação Superior, junio 2008. ISSN: 1414-4077. [7] L. Acosta, F. Becerra y D. Jaramillo, “Sistema de Información Estratégica para la Gestión Universitaria en la Universidad de Otavalo (Ecuador)”, Formación Universitaria, vol. 10(2), pp. 103-112, 2017. [8] UNESCO. Conferencia Mundial sobre la Educación Superior. La educación superior en el siglo XXI. Visión y Acción. Informe Final. Tomo I. UNESCO, París, Francia, https://goo.gl/QFLHjp (1998). [9] Universidad Central de Venezuela. Sobre la UCV: Reseña Histórica, http://www.ucv.ve/sobre-la-ucv/resena-historica.html [10] Reglamento del Personal Docente y de Investigación de la UCV. Capítulo II: Del Ingreso de los Miembros del Personal Docente y de Investigación, sección I (Del Ingreso), Artículos 2 y 4, 2011. [11] Facultad de Ciencias, Universidad Central de Venezuela. Manual de procedimientos administrativos (MAPA-CACAD-01): elaboración, control y aprobación de planes de formación y capacitación de docentes en la categoría de instructor. Documento interno sin publicar. [12] N. Méndez y Y. Boyer, “Automatización de procesos relacionados con las solicitudes estudiantiles y actividades administrativas y de docencia de la Facultad de Ciencias”, Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela, Caracas, Venezuela, 2008. [13] J. Florville y F. Montes, “Sistema de Gestión de Pasantías Para la Escuela de Computación”, Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela, Caracas, Venezuela, 2013. http://www.rae.es/rae.html http://www.ucv.ve/sobre-la-ucv/resena-historica.html 112 [14] J. Sanchez, “Desarrollo de una nueva versión del portal generador de sitios web de asignaturas (Portalasig) para la Facultad de Ciencias de la Universidad Central de Venezuela”, Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela, Caracas, Venezuela, 2016. [15] E. Mendes, Practitioners Knowledge Representation a Pathway to Improve Software Effort Estimation. Berlin: Springer Berlin, 2014. ISBN: 9783642541568. [16] N. Ford, Art of Java Web development, Estados Unidos: Manning, 2004, ISBN: 1- 932394-06-0. [17] G. Kappel, B. Proll, S. Reich y W. Retschitzegger, Web engineering, Alemania: John Wiley & Sons, 2006, ISBN: 3-89864-234-8. [18] Martin Löfberg & Patrik Molin, “Web vs. Standalone Application - A maintenance application for Business Intelligence” thesis, Sweden, 2005. [19] “The benefits of web-based applications,” Magic Web Solutions. [Online]. Available: https://www.magicwebsolutions.co.uk/blog/the-benefits-of-web-based- applications.htm. [Accessed: Nov-2018]. [20] “Patrón de diseño de modelo vista controlador”, IBM Knowledge Center. [Online]. Available: https://www.ibm.com/support/knowledgecenter/es/SSZLC2_8.0.0/com.ibm.commerce. developer.doc/concepts/csdmvcdespat.htm. [Accesed: Dic-2018]. [21] “Modelo Vista Controlador (MVC)”, Universidad de Alicante. [Online]. Available: https://si.ua.es/es/documentacion/asp-net-mvc-3/1-dia/modelo-vista-controlador- mvc.html. [Accesed: Dic-2018]. [22] J. Pater, “Modern Web Application Frameworks” Master’s thesis, Brno, 2015. [23] Z. Yung, “Python vs. Ruby vs. Node.js - Which platform is a fit for your project?” Blog by Railsware, 22-Aug-2018. [Online]. Available: https://railsware.com/blog/2018/06/13/python-vs-ruby-vs-node-js-which-platform-is-a- fit-for-your-project/. [Accessed: 01-Dec-2018]. [24] D. Flanagan and Y. Matsumoto, The Ruby programming language. Sebastopol: OReilly, 2008. ISBN: 978-0-596-51617-8. [25] Daniel Kehoe, Learn Ruby on Rails: Book One. 2016. [26] Eugeniya Korotya, “MongoDB vs MySQL Comparison: Which Database is Better?,” 13-Mar-2017. [Online]. Available: https://hackernoon.com/mongodb-vs- mysql-comparison-which-database-is-better-e714b699c38b. [Accedido 15 de diciembre 2018]. [27] R. Elmasri and S. B. Navathe, Fundamentals of database systems. Boston: Addison- Wesley, 2011. ISBN: 978-0-136-08620-8. https://www.magicwebsolutions.co.uk/blog/the-benefits-of-web-based-applications.htm https://www.magicwebsolutions.co.uk/blog/the-benefits-of-web-based-applications.htm https://www.ibm.com/support/knowledgecenter/es/SSZLC2_8.0.0/com.ibm.commerce.developer.doc/concepts/csdmvcdespat.htm https://www.ibm.com/support/knowledgecenter/es/SSZLC2_8.0.0/com.ibm.commerce.developer.doc/concepts/csdmvcdespat.htm https://si.ua.es/es/documentacion/asp-net-mvc-3/1-dia/modelo-vista-controlador-mvc.html https://si.ua.es/es/documentacion/asp-net-mvc-3/1-dia/modelo-vista-controlador-mvc.html https://hackernoon.com/mongodb-vs-mysql-comparison-which-database-is-better-e714b699c38b https://hackernoon.com/mongodb-vs-mysql-comparison-which-database-is-better-e714b699c38b 113 [28] “What Is A Non Relational Database,” MongoDB. [Online]. Available: https://www.mongodb.com/scale/what-is-a-non-relational-database. [Accessed: 30-Nov- 2018]. [29] L. Welling and L. Thomson, PHP and MySQL web development. Indianapolis, IN: Sams, 2005. ISBN: 067232525X. [30] “Oracle MySQL,” Slowly Changing Dimensions. [Online]. Available: https://www.oracle.com/ca-en/mysql/. [Accedido: 10-Nov-2018]. [31]: T. Satpathy, Una guía para el CONOCIMIENTO DE SCRUM (GUÍA SBOK), 2013. [32]: “What are Scrum Artifacts?” Visual Paradigm. [Online]. Available: https://www.visual-paradigm.com/scrum/what-are-scrum-artifacts/. [Accessed: 24-Mar- 2019]. [33]: K. Schwaber and J. Sutherland, The Definitive Guide to Scrum: The Rules of the Game. Creative Commons, 2017. [34] Nielsen, Jakob, Molich, Rolf: Heuristic evaluation of user interfaces. In: Carrasco, Jane, Whiteside, Proceedings of the ACM CHI 90 Human Factors in Computing Systems Conference, 1990, Seattle, Washington,USA. pp. 249-256. [35] M. Gonzalez, J. Lores, A. Pascual, Evaluación Heurística. Universitat de Lleida. Disponible en: https://aipo.es/libro/pdf/15-Evaluacion-Heuristica.pdf [36] T. Granollers, “ACHI 2018: The Eleventh International Conference on Advances in Computer-Human Interactions,” in Usability Evaluation with Heuristics, Beyond Nielsen’s List, 2018. ISBN: 978-1-61208-616-3. https://www.oracle.com/ca-en/mysql/ https://aipo.es/libro/pdf/15-Evaluacion-Heuristica.pdf