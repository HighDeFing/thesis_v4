UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE ENSEÑANZA ASISTIDA POR COMPUTADOR - CENEAC Desarrollo de una aplicación Web para la búsqueda y gestión de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias, UCV Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela por la Br. Gisselle Primera Abreu (C.I. 24.219.362) Para optar al título de Licenciada en Computación Tutora: Profa. Yusneyi Y. Carballo Barrera Ciudad Universitaria de Caracas, 17 de octubre de 2018 Agradecimientos Agradecimientos Primeramente le doy gracias a Dios, por darme la oportunidad de estar rodeada de personas tan maravillosas, por haberme permitido llegar a donde estoy y por cuidar de mí. A mis padres, por todo su cariño y apoyo incondicional, gracias mamá por llevarme a la universidad todas las mañanas, gracias papá por siempre hacerme el desayuno y echarme la bendición, gracias a ambos por nunca dejar de creer en mí. A mis queridos amigos Abraham Palacios, Oscar Montilla y Ariam Salazar, por su valiosa amistad y por brindarme sus conocimientos y ayuda para la elaboración de este Trabajo Especial de Grado. A mi tutora, la profesora Yusneyi Carballo Barrera, por darme la oportunidad de ser su tesista, por su paciencia, por sus consejos y recomendaciones, y por motivarme a siempre dar más. Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Centro de Enseñanza Asistida por Computador - CENEAC Desarrollo de una aplicación Web para la búsqueda y gestión de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias, UCV Autor: Gisselle Primera Abreu C.I.: 24219362 Correo-e: gisselleprimera@gmail.com Tutora: Profa. Yusneyi Carballo Barrera Correo-e: Yusneyi.carballo@ciens.ucv.ve Fecha: 17 de octubre de 2018 RESUMEN Internet se ha convertido en una herramienta importante para la ubicación de talentos, esto queda evidenciado por la popularidad de los portales de empleo como Indeed, o de las redes sociales orientadas al campo laboral y a la investigación como Academia.edu y LinkedIn, entre otros. Estos sitios web facilitan la localización de recursos con un perfil determinado, mediante búsquedas inteligentes, recomendaciones, extracción de hojas de perfil en formato PDF, entre otras funcionalidades. Además, provee a sus usuarios la posibilidad de crear un perfil detallado en el que se encuentre representado su formación, experiencia, conocimientos, intereses y habilidades. Una aplicación con estas características brindaría a la Facultad de Ciencias, una herramienta de búsqueda e integración de los perfiles de sus recursos humanos en las diferentes áreas que componen este recinto universitario. Por tal motivo, el presente Trabajo Especial de Grado se enfoca en el desarrollo de una aplicación utilizando los marcos de trabajo (frameworks) Angular, Hibernate y Spring, que satisfaga una necesidad importante de recopilación y acceso a la red de perfiles y capacidades de la Facultad de Ciencias de la Universidad Central de Venezuela bajo los lineamientos de la metodología de desarrollo Scrum. Palabras Clave: competencias Facultad de Ciencias, capacidades I+D en la UCV, red de conocimiento Facultad de Ciencias. ÍNDICE DE CONTENIDO INTRODUCCIÓN ............................................................................................................................................ I CAPÍTULO I. PLANTEAMIENTO DEL PROBLEMA ............................................................................................ 1 1.1 Objetivos .............................................................................................................................................. 2 Objetivo General del Trabajo Especial de Grado .................................................................................................... 2 Objetivos específicos .............................................................................................................................................. 2 1.2 Justificación .......................................................................................................................................... 3 CAPÍTULO II. MARCO TEÓRICO ..................................................................................................................... 4 2.1 Antecedentes ....................................................................................................................................... 4 2.1.1 Sistema de Gestión de Información Científica (SIGIC) ................................................................................... 4 2.1.2 Academia.edu (https://www.academia.edu/) ............................................................................................... 8 2.1.3 LinkedIn (https://www.linkedin.com).......................................................................................................... 11 2.1.4 Indeed (https://www.indeed.com/) ............................................................................................................ 14 2.1.5 Cuadro comparativo LinkedIn, Indeed y Academia.edu .............................................................................. 18 2.2 Herramientas, lenguajes y ambientes para el desarrollo Web .......................................................... 20 2.2.1 Aplicación Web ............................................................................................................................................ 20 2.2.2 Arquitectura Cliente-Servidor ...................................................................................................................... 22 2.2.3 Patrón Modelo Vista Controlador ................................................................................................................ 23 2.5 Servicio Web ...................................................................................................................................... 23 2.6 Transferencia de Estado Representacional (REST) ............................................................................. 24 2.7 Tecnologías del Lado del Cliente ........................................................................................................ 24 2.7.1 Lenguaje de Marcas de Hipertexto (HTML) ................................................................................................. 24 2.7.2 Hojas de Estilo en Cascada (CSS) ................................................................................................................. 25 2.7.3 JavaScript ..................................................................................................................................................... 26 2.7.4 Angular ........................................................................................................................................................ 26 2.8 Tecnologías del Lado del Servidor ...................................................................................................... 27 2.8.1 WildFly ......................................................................................................................................................... 27 2.8.2 Spring ........................................................................................................................................................... 28 2.8.3 Hibernate ..................................................................................................................................................... 29 2.8.4 Sistema Manejador de Base de Datos ......................................................................................................... 31 2.8.5 PostgreSQL................................................................................................................................................... 32 CAPÍTULO III. MARCO METODOLÓGICO ..................................................................................................... 33 3.1 Metodología de desarrollo ................................................................................................................. 33 3.1.1 Metodología ágil .......................................................................................................................................... 34 3.2 Scrum ................................................................................................................................................. 35 3.2.1 Roles y responsabilidades ............................................................................................................................ 36 3.2.2 Prácticas....................................................................................................................................................... 37 3.3 Cuadro comparativo de Scrum con otras metodologías de desarrollo .............................................. 38 CAPÍTULO IV. MARCO APLICATIVO ............................................................................................................ 40 4.1 Perfiles de usuario .............................................................................................................................. 40 4.2 Requerimientos de la aplicación ........................................................................................................ 40 4.3 Arquitectura del sistema .................................................................................................................... 42 4.4 Aplicación de la metodología Scrum .................................................................................................. 42 4.4.1 Pila de producto (Product Backlog) y descripción de las iteraciones ........................................................... 43 4.5 Principales diagramas de secuencia y casos de uso ........................................................................... 47 4.6 Principales interfaces de la aplicación ............................................................................................... 60 4.7 Modelo Entidad – Relación ................................................................................................................ 67 4.8 Pruebas y resultados .......................................................................................................................... 69 4.8.1 Pruebas de funcionalidad ............................................................................................................................ 69 4.8.2 Pruebas de aceptación................................................................................................................................. 71 4.8.3 Pruebas de rendimiento .............................................................................................................................. 75 4.9 Mejoras incorporadas en esta aplicación .......................................................................................... 75 RESULTADOS Y CONCLUSIONES ................................................................................................................. 77 REFERENCIAS BIBLIOGRÁFICAS Y DÍGITALES .............................................................................................. 78 ANEXOS ..................................................................................................................................................... 82 ÍNDICE DE FIGURAS Figura 1. Organigrama Estructural de la Facultad de Ciencias .......................................................................... 1 Figura 2 Solicitud de Registro en SIGIC ............................................................................................................... 5 Figura 3 Modal para agregar una institución ..................................................................................................... 6 Figura 4 Interfaz con lista de experiencias laborales del investigador ............................................................... 7 Figura 5. Interfaz para visualizar una experiencia laboral en SIGIC ................................................................... 7 Figura 6 Interfaz con la lista de roles asignados a cada usuario ........................................................................ 8 Figura 7. Perfil del investigador en Academia.edu ............................................................................................. 9 Figura 8. Agregar detalles del documento en Academia.edu ........................................................................... 10 Figura 9. Resultado de búsqueda "estudio del comportamiento" en Academia.edu ....................................... 11 Figura 10. Cargar contenido multimedia en LinkedIn ....................................................................................... 12 Figura 11. Filtros de búsqueda gratuitos en LinkedIn ....................................................................................... 13 Figura 12. Resultado de búsqueda "java" en LinkedIn ..................................................................................... 14 Figura 13. Búsqueda avanzada en Indeed ........................................................................................................ 15 Figura 14. Ejemplo de recomendaciones en Indeed ......................................................................................... 15 Figura 15. Resultado de búsqueda de candidatos en Indeed ........................................................................... 16 Figura 16. Currículo en Indeed .......................................................................................................................... 17 Figura 17. Procesamiento de una página web dinámica .................................................................................. 21 Figura 18. Ejemplo de arquitectura cliente-servidor de tres capas .................................................................. 22 Figura 19. Ejemplo de código fuente HTML ...................................................................................................... 25 Figura 20. Ejemplo de código CSS incrustado en HTML .................................................................................... 26 Figura 21. Ciclo de Scrum de acuerdo a Ken Schwaber y Jeff Sutherland ......................................................... 36 Figura 22. Arquitectura general del sistema .................................................................................................... 42 Figura 23. RESPUESTA DE SERVICIO WEB LISTARIDIOMAS............................................................................... 45 Figura 24. Diagrama de secuencia - Iniciar sesión............................................................................................ 47 Figura 25. Diagrama de secuencia - Agregar ítem ........................................................................................... 48 Figura 26. Diagrama de secuencia - Eliminar ítem ........................................................................................... 49 Figura 27. Diagrama de secuencia - Modificar Ítem ........................................................................................ 50 Figura 28. Diagrama de secuencia - Asignar rol ............................................................................................... 51 Figura 29. Diagrama de secuencia - Búsqueda avanzada ................................................................................ 52 Figura 30 MODELO DE CASOS DE USO – NIVEL 0 ............................................................................................. 53 Figura 31 MODELO DE CASOS DE USO – NIVEL 1 ............................................................................................. 54 Figura 32. Modelo de casos de uso – nivel 2 .................................................................................................... 55 Figura 33. Interfaz de la página principal ......................................................................................................... 60 Figura 34. Interfaz de la página principal 2 ...................................................................................................... 61 Figura 35. Interfaz de resultado de búsqueda .................................................................................................. 61 Figura 36. Interfaz de perfil de usuario............................................................................................................. 62 Figura 37. Interfaz de búsqueda avanzada ...................................................................................................... 62 Figura 38. Interfaz de contacto ........................................................................................................................ 63 Figura 39. Interfaz de editar perfil .................................................................................................................... 64 Figura 40. Interfaz de agregar estudio ............................................................................................................. 64 Figura 41. Interfaz de administración de tablas auxiliares ............................................................................... 65 Figura 42. Interfaz de inicio de sesión .............................................................................................................. 66 Figura 43. Interfaz de administración de usuarios ........................................................................................... 66 Figura 44. Interfaz de asignar rol ..................................................................................................................... 67 Figura 45. Modelo entidad-relación de la aplicación ....................................................................................... 68 Figura 46 Barra de navegación de SIGBIC ........................................................................................................ 73 Figura 47. Opciones de navegación para el administrador .............................................................................. 73 Figura 48. Opciones de navegación para el usuario registrado ....................................................................... 74 Figura 49. Notificación de resultado exitoso .................................................................................................... 74 Figura 50. Notificación de resultado fallido ...................................................................................................... 74 ÍNDICE DE TABLAS Tabla 1 Comparativa de portales de empleo y de investigación ...................................................................... 19 Tabla 2 Comparativa de metodologías de desarrollo ....................................................................................... 38 Tabla 3 Pila del producto .................................................................................................................................. 43 Tabla 4 Servicios Web para el módulo de gestión ............................................................................................ 44 Tabla 5 Servicios para la gestión de usuarios ................................................................................................... 46 Tabla 6 Servicios para el módulo de autenticación .......................................................................................... 46 Tabla 7. Descripción de caso de uso 2. Iniciar sesión ........................................................................................ 56 Tabla 8. Descripción de caso de uso 3. Realizar búsqueda ............................................................................... 56 Tabla 9. Descripción de caso de uso 4. Editar perfil.......................................................................................... 57 Tabla 10. Descripción de caso de uso 5. Exportar hoja de perfil ...................................................................... 57 Tabla 11. Descripción de caso uso 5.1 Descargar hoja de perfil ....................................................................... 58 Tabla 12. Descripción de caso de uso 6. Administrar sistema .......................................................................... 58 Tabla 13. Descripción de caso de uso 6.2 Administrar roles ............................................................................. 59 Tabla 14. Descripción de caso de uso 7. Contactar al administrador ............................................................... 59 Tabla 15 Precarga de información en la base de datos .................................................................................... 67 Tabla 16. Inicio de sesión .................................................................................................................................. 69 Tabla 17. Restablecer contraseña .................................................................................................................... 70 Tabla 18. Cambio de contraseña ...................................................................................................................... 70 Tabla 19. Realizar registro ................................................................................................................................ 71 Tabla 20. Observaciones de los participantes .................................................................................................. 73 Tabla 21 Diferencias SIGIC - SIGBIC .................................................................................................................. 75 Tabla 22. Servicios Web para agregar un elemento ......................................................................................... 82 Tabla 23.Servicios Web para modificar un elemento ....................................................................................... 83 Tabla 24. Servicios Web para listar elementos de un usuario .......................................................................... 84 Tabla 25. Servicios Web para la gestión de tablas auxiliares ........................................................................... 85 Introducción i INTRODUCCIÓN La Facultad de Ciencias de la Universidad Central de Venezuela, fundada en 1958 tiene como misión impartir la enseñanza requerida para optar al título de Licenciado en las respectivas carreras de Biología, Computación, Física, Geoquímica, Matemática y Química, formando profesionales con un sólido nivel académico, además de promover actividades de investigación y extensión. La información que podemos encontrar en la actualidad de su comunidad en las distintas aplicaciones Web y bases de datos de la Facultad de Ciencias está dispersa, se encuentra desactualizada y en algunos casos es muy básica, no representando adecuadamente, las competencias, habilidades y capacidades de estos profesionales. Una gestión no adecuada de la información en una organización puede causar que aun cuando los datos estén disponibles, sea difícil acceder a ellos y su fiabilidad sea cuestionable, por lo que a menudo se omitan y no se empleen o se aprovechen correctamente. Las empresas y organizaciones en el país se encuentran en constante búsqueda de profesionales con ciertos conocimientos y aptitudes para que participen en sus proyectos, por tanto, una herramienta que pueda facilitar la consulta y la localización de un recurso dentro de la Facultad de Ciencias, apoyaría la generación de alianzas estratégicas que brinden beneficios a la comunidad y nuevas oportunidades de crecimiento. Hasta el año 2016, la Coordinación de Investigación de la Facultad de Ciencias estuvo recabando la información de sus investigadores en hojas de Excel y documentos de Word, un método que dificultaba la gestión y búsqueda de dicha información. Por ese motivo, la Lic. Viviana Pérez bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, desarrolló una aplicación Web que permite registrar y gestionar la información de los investigadores almacenándola en una base de datos centralizada y estandarizada. Sin embargo, esta aplicación no se encuentra diseñada para localizar fácilmente a sus investigadores por sus capacidades, experiencia, habilidades, entre otros criterios de búsqueda, ni para poder exportar esa información. Dadas estas consideraciones, se desea desarrollar una aplicación que amplíe las funcionalidades de la anterior, permitiendo integrar datos y generar perfiles de los docentes e investigadores de la Facultad de Ciencias en sus diferentes áreas de conocimiento. Se busca, que esta información sea estructurada y almacenada convenientemente para que personas u organizaciones que tengan una necesidad o requieran de un recurso, puedan consultarla y saber si esas competencias y capacidades se encuentran en la Facultad de Ciencias de la UCV. Para alcanzar los objetivos planteados, el siguiente documento se encuentra estructurado de la siguiente manera. Capítulo 1, “Planteamiento del problema”, en el que se describe el problema cuya solución se busca obtener, el alcance y los objetivos de este Trabajo Especial de Grado. Capítulo 2, “Marco Teórico”, en el que se describen los antecedentes, teorías, conceptos y procesos relacionados con el problema a resolver y con la solución planteada. Capítulo 3, “Marco Metodológico”, que describe las metodologías y lineamientos que van a ser considerados para el desarrollo de la solución. Capítulo 4, “Marco Aplicativo”, donde se describe el desarrollo de la aplicación, el uso de la metodología y las principales vistas y funcionalidades. Finalmente, se encuentran los resultados y reflexiones del Trabajo Especial de Grado, las referencias Bibliográficas y digitales, y los anexos. Capítulo I. Planteamiento del Problema 1 CAPÍTULO I. PLANTEAMIENTO DEL PROBLEMA La Facultad de Ciencias de la Universidad Central de Venezuela se encuentra integrada por seis Escuelas, donde se forman profesionales en las Licenciaturas de Biología, Computación, Física, Matemática, Química y Geoquímica. La facultad posee cinco coordinaciones: Coordinación Académica, Coordinación Administrativa, Coordinación de Extensión, Coordinación de Investigación, Coordinación de Postgrado, y cuatro institutos de investigación: Instituto de Biología Experimental, Instituto de Ciencias y Tecnología de Alimentos, Instituto de Ciencias de la Tierra e Instituto de Zoología y Ecología Tropical (ver Figura 1), además de diversas organizaciones y grupos de extensión que promueven las actividades sociales, deportivas y culturales, como Physis, Prociencias, Coral de la Facultad de Ciencias, BIOSUB, entre otros. FIGURA 1. ORGANIGRAMA ESTRUCTURAL DE LA FACULTAD DE CIENCIAS Fuente: (Facultad de Ciencias-UCV, 2018) En estas escuelas, coordinaciones e institutos, trabajan profesionales especialistas en diversas áreas con habilidades, conocimientos, competencias y destrezas. La Facultad de Ciencias cuenta con diversas aplicaciones Web, donde podemos encontrar información referente a la facultad, sus coordinaciones y dependencias, la normativa, el calendario académico, pero limitada información referente a sus docentes, investigadores y sus competencias. Capítulo I. Planteamiento del Problema 2 En 2016, fue desarrollada por la Lic. Viviana Pérez bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, el Sistema de Gestión de Información Científica (SIGIC), una aplicación Web que permite registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. SIGIC provee diversas funcionalidades tales como facilitar el registro y la gestión de la información de los investigadores de la Facultad de Ciencias, de manera rápida, fácil y sencilla, además de almacenar la información de los investigadores de la facultad en una base de datos centralizada y estandarizada. Sin embargo, SIGIC posee algunas limitaciones como:  Su acceso restringido, ya que sólo pueden acceder a la aplicación las personas que poseen un correo institucional de la Facultad y realicen actividades de investigación.  El diseño de sus interfaces no es el más adecuado para una aplicación orientada a la búsqueda de recursos, ya que la información se encuentra dispersa entre las diferentes secciones del perfil.  Las opciones de búsqueda que provee la aplicación son muy limitadas (búsqueda simple por documento de identidad, nombre del investigador o dependencia) y solo se encuentran habilitadas a los usuarios administradores.  Los investigadores solo pueden ver la información de su perfil.  La aplicación no permite descargar la información de uno o varios perfiles en formato DOC o PDF. El problema observado es que actualmente, no se cuenta con una aplicación Web de acceso público donde se encuentre recopilada y se pueda ubicar fácilmente la información referente a los conocimientos, la experiencia, capacidades, destrezas y habilidades de los docentes, investigadores y dependencias pertenecientes a la red de conocimiento de la Facultad de Ciencias. 1.1 Objetivos Objetivo General del Trabajo Especial de Grado Desarrollar una aplicación Web para la gestión y búsqueda de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias de la Universidad Central de Venezuela. Objetivos específicos 1. Definir los requerimientos y funcionalidades para el desarrollo de la aplicación de gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. 2. Construir la arquitectura de datos partiendo del análisis del modelo de datos del sistema SIGIC. 3. Implementar las funcionalidades requeridas mediante el uso de servicios Web. 4. Desarrollar las interfaces de usuario para la aplicación de gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. Capítulo I. Planteamiento del Problema 3 5. Realizar pruebas funcionales, de usabilidad y rendimiento para la comprobación del correcto funcionamiento de la aplicación para la gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. 1.2 Justificación Se desea desarrollar una aplicación web que combine las fortalezas de SIGIC, con las principales funcionalidades encontradas en los portales de búsqueda de recursos como LinkedIn e Indeed y que permita dar respuestas concretas a algunas de las necesidades existentes de gestión y búsqueda de conocimiento. La existencia de una aplicación que cumpla con esas características proveerá a la facultad de una herramienta, donde dado un perfil de necesidades se pueda determinar los recursos humanos que potencialmente tienen las capacidades para resolverlas, proporcionando además una reseña u hoja de su perfil, ubicación y datos de contacto. Esta aplicación al ser de acceso público, brindará visibilidad a las competencias y experiencia del talento humano de la Facultad, facilitando alianzas estratégicas con organizaciones y entes internos y externos a la Universidad. Adicionalmente, brindará a las autoridades de la Facultad de Ciencias, una herramienta que permitirá el manejo inteligente de la información para la toma de decisiones gerenciales y administrativas, a través de búsquedas avanzadas en un repositorio de información automatizado. Capítulo II. Marco Teórico 4 CAPÍTULO II. MARCO TEÓRICO La finalidad de este capítulo es presentar las bases conceptuales y los antecedentes que sirven de fundamento para el desarrollo del Trabajo Especial de Grado. 2.1 Antecedentes A continuación, se presentan los casos de estudio que se consideraron más relevantes para la elaboración de este Trabajo de Especial de Grado, aplicaciones Web que permiten el almacenamiento de la información de profesionales con un perfil determinado, y la búsqueda de estos perfiles de manera fácil y rápida. 2.1.1 Sistema de Gestión de Información Científica (SIGIC) SIGIC es una aplicación Web desarrollada en 2016, por la Lic. Viviana Pérez en el marco de un Trabajo Especial de Grado de la Licenciatura en Computación, bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, con el objetivo de permitir a los investigadores de la Facultad de Ciencias la facilidad de registrar su información (general, académica, laboral, proyectos, productos, etc.) de manera rápida, fácil y sencilla en una base de datos centralizada, y a la Coordinación de Investigación la manipulación y gestión de la información recopilada. (V. Pérez, 2016) La aplicación se encuentra desarrollada bajo el lenguaje de programación Ruby y el framework Rails. Para el diseño y construcción de las vistas de la aplicación se utilizó HTML5, CSS3, JavaScript, jQuery, Ajax y Bootstrap. Mientras que para la construcción y gestión de la base de datos que contiene la información de los investigadores, fue utilizado el Sistema Manejador de Base de Datos PostgreSQL. Carga de datos Para obtener la información de los investigadores, se realizó una migración de datos desde las hojas de cálculo (MS Excel) que utilizaba la Coordinación de Investigación, hasta la base de datos de la aplicación, mediante la herramienta Pentaho Data Integration Community Edition. Inicio de sesión Los investigadores deben iniciar sesión para poder acceder a las funcionalidades de la aplicación, mediante su correo institucional. Si no se encuentra registrado en el sistema porque su correo fue creado recientemente, puede solicitar acceso completando un formulario con sus datos básicos (ver Figura 2) y deberá esperar la confirmación por parte del usuario administrador de la aplicación. Capítulo II. Marco Teórico 5 FIGURA 2 SOLICITUD DE REGISTRO EN SIGIC Fuente: (Pérez, 2016) Ingreso y modificación de la Información del Investigador Después de acceder a la aplicación, los investigadores pueden ingresar, modificar y eliminar la información referente a su perfil. Esta información se encuentra estructurada en 7 módulos:  Datos Generales. Se encuentran los datos personales e institucionales del investigador.  Formación académica. Se encuentra la información relacionada con su formación académica: estudios y títulos obtenidos, cursos, idiomas y reconocimientos. Si en el sistema no se encuentra la institución correspondiente a su estudio o título, el investigador puede agregarla. (ver Figura 3)  Experiencia laboral. Se encuentra la información referente a su experiencia laboral, donde se puede agregar su trabajo actual y trabajos anteriores.  Productos de investigación. Se encuentra la información acerca de los productos de investigación realizados o en los que ha participado el investigador. Capítulo II. Marco Teórico 6  Proyectos de investigación. Se encuentra la información acerca de los proyectos de investigación realizados o en los que ha participado el investigador.  Formación de talentos. Se encuentra la información referente a las formaciones de talentos realizas por el investigador.  Participación en eventos. Se encuentra la información acerca de la participación del investigador en eventos realizados. FIGURA 3 MODAL PARA AGREGAR UNA INSTITUCIÓN Fuente: (Pérez, 2016) Visualización de la Información del Investigador Los investigadores solo pueden ver la información de su perfil. Por su parte, los administradores de dependencias pueden acceder a la información de los investigadores que se encuentren en su dependencia, y el administrador global, acceder a toda la información disponible en la aplicación. Los elementos que pueden repetirse como experiencias laborales, cursos, idiomas, entre otros, se encuentran listados en una tabla (ver Figura 4) con la opción de seleccionar algún elemento para verlo de manera detallada (ver Figura 5). Capítulo II. Marco Teórico 7 FIGURA 4 INTERFAZ CON LISTA DE EXPERIENCIAS LABORALES DEL INVESTIGADOR Fuente: (Pérez, 2016) FIGURA 5. INTERFAZ PARA VISUALIZAR UNA EXPERIENCIA LABORAL EN SIGIC Fuente: (Pérez, 2016) Usuarios administradores El usuario administrador global de la aplicación puede agregar, modificar, eliminar y visualizar usuarios de cualquier Dependencia (Escuela/Instituto), así como asignarles el rol de investigador, administrador de dependencia y/o administrador global (ver Figura 6). También puede gestionar la información de las tablas base de la aplicación. Capítulo II. Marco Teórico 8 Los usuarios administradores de dependencias pueden realizar todas las acciones mencionadas anteriormente pero limitando su alcance a los investigadores, instituciones, productos de investigación, entre otros, que se encuentren dentro de su dependencia. FIGURA 6 INTERFAZ CON LA LISTA DE ROLES ASIGNADOS A CADA USUARIO Fuente: (Pérez, 2016) SIGIC posee algunas limitaciones como lo es su acceso restringido, la ausencia de buscadores avanzados para filtrar la información, de un módulo de análisis de indicadores para la toma de decisiones y la imposibilidad de descargar la información en los formatos DOC y PDF. Actualmente, la aplicación se encuentra en un servidor del Centro de Computación, bajo la supervisión del profesor Pio Arias, Coordinador de Investigación de la Facultad de Ciencias. 2.1.2 Academia.edu (https://www.academia.edu/) Academia.edu es una red social gratuita que tiene como objetivo conectar científicos, ofrecerles una plataforma para compartir sus trabajos de investigación y facilitarles el seguimiento de los artículos que son relevantes para sus campos de estudio. Esta red social temática está formada por más de 18 millones de usuarios y cuenta con más de 5 millones de publicaciones científicas de todo el mundo. Academia.edu apuesta por el acceso abierto de la ciencia y pretende revolucionar el proceso editorial tradicional de la revisión por pares, por lo que permite publicar el texto completo de los libros, artículos, borradores y diversos materiales para acelerar la visibilidad de las investigaciones realizadas. (Gil, 2015) Características De acuerdo a Gil (2015), Academia.edu posee las siguientes características: Capítulo II. Marco Teórico 9  Los usuarios tienen seguidores y siguen a otros investigadores y temáticas de estudio.  Cada investigador cuenta con un perfil científico que muestra sus áreas de interés, sus publicaciones clasificadas en secciones (libros, artículos, conferencias, etc.), coautorías, datos de contacto, perfiles de otras redes sociales, seguidores, actividad en la red social y estadísticas (ver Figura 7).  Permite interactuar con otros investigadores mediante mensajes en la misma plataforma.  Gracias a su filosofía pro “ciencia abierta”, no ofrecen la opción de crear cuentas privadas.  El sistema realiza recomendaciones automáticas de artículos e investigadores, según tus intereses de investigación y personas a las que sigues. FIGURA 7. PERFIL DEL INVESTIGADOR EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) Cuando se agrega un documento al perfil del investigador en Academia.edu, se debe especificar el nombre, un resumen de la publicación, coautores si existen, área de investigación y un enlace al documento si no se encuentra adjunto (ver Figura 8). Capítulo II. Marco Teórico 10 FIGURA 8. AGREGAR DETALLES DEL DOCUMENTO EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) Academia.edu posee dos modalidades de búsqueda, la gratuita, que realiza la búsqueda sólo en los títulos de los documentos, y la avanzada, que permite buscar en el texto completo de las publicaciones. En ambas modalidades, puedes filtrar los resultados por documentos, personas, áreas de investigación, universidades, departamentos o cargos (ver Figura 9). Capítulo II. Marco Teórico 11 FIGURA 9. RESULTADO DE BÚSQUEDA "ESTUDIO DEL COMPORTAMIENTO" EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) 2.1.3 LinkedIn (https://www.linkedin.com) LinkedIn es una red social que permite la creación de un perfil profesional e incluir, entre otros detalles, la experiencia laboral de quien lo ha creado. Contar con un perfil en LinkedIn permite establecer redes de contactos con otros profesionales, lo que entrega una ventaja considerable al momento de buscar un nuevo trabajo, establecer nuevas relaciones comerciales y formar parte de grupos de discusión dentro de esta red. (Escudero, 2017) Las empresas y profesionales de Recursos Humanos, también utilizan LinkedIn para encontrar y contactar a potenciales candidatos para llenar vacantes de empleo. Un perfil completo en LinkedIn permite a un usuario incluir su experiencia laboral, habilidades y especializaciones, entre otros detalles, lo que ayuda a una empresa al momento de elegir entre diversos candidatos. (Escudero, 2017) Tipos de cuentas LinkedIn permite la creación de cuentas gratuitas y de pago. Una cuenta gratuita permite según Escudero (2017), entre otras cosas:  Crear un perfil personal profesional.  Buscar trabajo en la bolsa de trabajo de LinkedIn.  Conectarse con otros profesionales que ya sean conocidos del usuario. Capítulo II. Marco Teórico 12  Añadir contenido multimedia a tu perfil como imágenes, videos y presentaciones. (ver Figura 10)  Enterarse de quiénes son los últimos usuarios que han visto el perfil personal propio y conocer sus datos básicos.  Ser parte de grupos de discusión, que permiten compartir información y enterarse de nuevas ofertas laborales.  Filtrar los resultados de búsqueda por grado de relación, palabras clave, ubicaciones, etc. (ver Figura 11) Una cuenta pagada permite acceder a beneficios tales como:  Acceder a más filtros al momento de buscar a otros profesionales.  Enviar solicitudes para conectarse a otros profesionales que no son contactos conocidos.  Conocer el listado completo de quienes han revisado el perfil personal propio y ver su información detallada. FIGURA 10. CARGAR CONTENIDO MULTIMEDIA EN LINKEDIN Fuente: (Linkedin, 2018) Capítulo II. Marco Teórico 13 FIGURA 11. FILTROS DE BÚSQUEDA GRATUITOS EN LINKEDIN Fuente: (Linkedin, 2018) Funcionalidades: Entre las funcionalidades de LinkedIn se encuentran (Wikipedia, 2017):  Los usuarios pueden subir su currículum vítae o diseñar su propio perfil con el fin de mostrar experiencias de trabajo y habilidades profesionales.  Los empleadores pueden enumerar puestos de trabajo y la búsqueda de posibles candidatos.  Los usuarios pueden realizar recomendaciones de puestos de trabajo y oportunidades de negocio a su red de contactos.  Los usuarios pueden subir sus propias fotos y ver las fotos de los demás para ayudar a identificarlo.  Los usuarios pueden realizar búsquedas utilizando palabras clave (ver Figura 12).  Los usuarios pueden seguir diferentes empresas y pueden recibir una notificación acerca de las posibles fusiones y ofertas disponibles.  Los usuarios pueden guardar trabajos que les gustaría solicitar. Capítulo II. Marco Teórico 14  Los usuarios pueden ver cuáles y cuantos usuarios han visto su perfil. FIGURA 12. RESULTADO DE BÚSQUEDA "JAVA" EN LINKEDIN Fuente: (Linkedin, 2018) 2.1.4 Indeed (https://www.indeed.com/) Indeed.com es un motor de búsqueda de empleo concebido en los Estados Unidos en noviembre del 2004. El sitio agrega publicaciones de empleo de miles de páginas web, incluyendo bolsas de empleo, empresas de reclutamiento y selección, asociaciones y páginas de empleo de empresas. Actualmente, Indeed se encuentra disponible en más de 50 países y en más de 28 idiomas. (Wikipedia, 2017) En el 2011, Indeed comenzó a permitir que los candidatos se postulen directamente a través de su sitio Web, al igual que publicar y almacenar su currículo. Los servicios de Indeed incluyen búsqueda de empleo, tendencias del mercado de empleo, almacenamiento y búsqueda de currículo, tendencias de industrias, búsqueda de salario, índices de competencia laboral y páginas de empresas. El portal te permite realizar búsquedas avanzadas, pudiendo especificar parámetros de búsqueda como la antigüedad de la publicación, filtrar por palabras exactas, o por alguna empresa específica, entre otras cosas (ver Figura 13). Capítulo II. Marco Teórico 15 FIGURA 13. BÚSQUEDA AVANZADA EN INDEED Fuente: (Indeed, 2018) El portal realiza recomendaciones a medida que se va escribiendo una palabra en el buscador (ver Figura 14). FIGURA 14. EJEMPLO DE RECOMENDACIONES EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 16 Al realizar una búsqueda de candidatos en Indeed, cuando se posiciona el puntero sobre uno de los resultados, se muestra una hoja de perfil resumida con la información más relevante del recurso (ver Figura 15), y al hacer clic, se permite acceder a su currículo completo, con la opción de guardarlo, enviarlo o descargarlo además de poder comunicarte con la persona vía email (ver Figura 16). FIGURA 15. RESULTADO DE BÚSQUEDA DE CANDIDATOS EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 17 FIGURA 16. CURRÍCULO EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 18 2.1.5 Cuadro comparativo LinkedIn, Indeed y Academia.edu A continuación, se presenta en la tabla 1 una comparación entre tres portales web que las personas utilizan principalmente para darse a conocer en el ámbito laboral y de investigación, buscar ofertas laborales y establecer relaciones profesionales. Capítulo II. Marco Teórico 19 TABLA 1 COMPARATIVA DE PORTALES DE EMPLEO Y DE INVESTIGACIÓN LinkedIn Academia.edu Indeed Definición LinkedIn es una red social que permite la creación de un perfil profesional e incluir, entre otros detalles, la experiencia laboral de quien lo ha creado. Permite establecer redes de contactos con otros profesionales, lo que entrega una ventaja considerable al momento de buscar un nuevo trabajo. Academia.edu es una red social gratuita que tiene como objetivo conectar científicos, ofrecerles una plataforma para compartir sus trabajos de investigación y facilitarles el seguimiento de los artículos que son relevantes para sus campos de estudio. Indeed.com es un motor de búsqueda de empleo concebido en los Estados Unidos en noviembre del 2004. El sitio agrega publicaciones de empleo de miles de páginas web, incluyendo bolsas de empleo, empresas de reclutamiento y selección, asociaciones y páginas de empleo de empresas. Principales Funcionalidades - Los usuarios pueden subir su currículum vítae o diseñar su propio perfil - Los empleadores pueden enumerar puestos de trabajo - Los usuarios pueden guardar trabajos que les gustaría solicitar - Los usuarios pueden realizar recomendaciones a su red de contactos - Los empleadores pueden realizar búsquedas de posibles candidatos - Ver estadísticas sobre las visitas a tu perfil - Cada investigador cuenta con un perfil científico que muestra sus áreas de interés, sus publicaciones clasificadas en secciones, datos de contacto, entre otras cosas - Subir y compartir documentos en diferentes formatos - El sistema realiza recomendaciones de artículos e investigaciones según tus intereses de investigación y personas a las que sigues - Permite interactuar con otros investigadores mediante mensajes en la misma plataforma - Generar alertas de empleo, donde los usuarios reciben las ofertas de interés en su dirección de correo electrónico - La aplicación móvil posibilita encontrar vacantes cerca de tu ubicación utilizando el GPS del teléfono - Los usuarios pueden generar su CV Indeed para solicitar empleo - Los usuarios pueden guardar ofertas de empleo de su interés - Las empresas pueden publicar ofertas de trabajo Usuarios a los que está dirigido Empresas y profesionales que buscan promocionarse, establecer relaciones laborales y de negocios. Científicos que deseen compartir sus trabajos de investigación y darle seguimiento a los artículos de sus áreas de estudio Personas que se encuentran en búsqueda de empleo y empresas que deseen publicar una vacante laboral disponible Ventajas - Facilita la comunicación directa con grandes empresas -Brinda visibilidad - Crecimiento de tu red de contactos en el campo laboral - Permite la participación en foros y grupos con profesionales afines. - Ayuda a mejorar la visibilidad de los trabajos de los investigadores - Permite marcar los documentos de interés para leerlos más tarde - Los perfiles de usuario y documentos son indexados a los principales motores de búsqueda - Bolsa de trabajo a nivel mundial - Fácil de usar - La búsqueda avanzada te permite combinar varios parámetros de búsqueda. - Al ser un motor de búsqueda, reduce la necesidad de buscar en cada portal de empleo de manera independiente. - Se encuentra disponible en más de 50 países y 28 idiomas Limitaciones - Los datos personales de tu perfil pueden ser vistos por cualquier usuario registrado en la aplicación - Solo se encuentra disponible en inglés - Algunas de las funcionalidades más avanzadas no se encuentran disponibles en la modalidad gratuita Fuentes: Elaborada a partir de (Gil, 2018) y (Escudero, 2017) Capítulo II. Marco Teórico 20 Para el desarrollo de la aplicación fueron considerados los siguientes elementos y funcionalidades observados en el sistema anterior SIGIC desarrollado por la licenciada Viviana Pérez:  El manejo de toda la información del sistema y la asignación de roles por parte del usuario administrador.  La posibilidad de contactar al administrador del sistema mediante un formulario en la aplicación.  La posibilidad de restablecer la contraseña en caso de olvido.  Para la construcción de la base de datos, se utilizó como punto de partida la base de datos de SIGIC, y fue reutilizada la información cargada por Viviana en 18 de las tablas. Adicionalmente, la aplicación cuenta con nuevas funcionalidades que fueron tomadas del estudio de los antecedentes descritos anteriormente:  Todos los antecedentes ofrecen dos modalidades de búsqueda en su aplicación: búsqueda simple y búsqueda avanzada.  También, permiten al usuario registrarse en la aplicación y crearse un perfil laboral donde pueden agregar su información personal dividida en diferentes categorías como experiencia laboral, estudios, conocimientos, entre otros.  De la red social LinkedIn se tomó las sugerencias de búsqueda a medida que el usuario va escribiendo en el buscador.  La interfaces de perfil del usuario y resultado de búsqueda de la aplicación poseen un diseño similar al observado en LinkedIn.  Del portal de búsqueda de empleo Indeed se tomó la exportación de un perfil mediante la descarga del mismo o envío por correo electrónico.  También de Indeed se tomó, que los usuarios visitantes pueden realizar búsquedas sin estar registrados en la aplicación.  Finalmente, de la red social académica Academia.edu se tomaron las recomendaciones en base a los perfiles visitados y mostrar al usuario los perfiles con más visitas en la aplicación. 2.2 Herramientas, lenguajes y ambientes para el desarrollo Web 2.2.1 Aplicación Web Una aplicación Web, es un sitio Web, que contiene páginas con contenido sin determinar, parcialmente o en su totalidad. El contenido final de una página se determina sólo cuando el usuario solicita una página del servidor Web, a través de Internet o de una Intranet mediante un navegador Web. Dado que el contenido final de la página varía de una petición a otra en función de las acciones del visitante, este tipo de página se denomina página dinámica. (Adobe Dreamweaver, 2015). En la Figura 17, podemos observar el procesamiento de una página Web dinámica, donde el navegador realiza una solicitud al servidor Web, y el servidor de aplicaciones Capítulo II. Marco Teórico 21 se encarga de procesarla, generando y enviando la página resultante al navegador solicitante. FIGURA 17. PROCESAMIENTO DE UNA PÁGINA WEB DINÁMICA Fuente: (Adobe Dreamweaver, 2015) De acuerdo a los aportes de Wiboo Media (2017) y Muñoz (2017) entre las ventajas más importantes del uso de aplicaciones Web se encuentran:  Ahorro de tiempo: Las aplicaciones Web son sencillas de gestionar, por lo que permiten realizar tareas de forma fácil sin necesidad de descargar o instalar ningún programa o plugin adicional.  Ahorro de recursos en equipos y dispositivos: Las aplicaciones Web, generalmente tienen un bajo consumo de recursos dado que toda o gran parte de la aplicación se encuentra en un servidor Web y no en nuestro ordenador.  Escalables y de rápida actualización: Existe sólo una versión de la aplicación Web en el servidor, por lo que no hay que distribuirla entre los demás ordenadores. El proceso de actualización es rápido y limpio. Las aplicaciones basadas en Web no requieren que el usuario se preocupe por obtener la última versión ni interfieren en su trabajo diario para descargar, instalar y configurar últimas versiones.  Recuperación de datos: Una de las mayores ventajas de las aplicaciones Web es que, en la mayoría de ocasiones el usuario puede recuperar su información desde cualquier dispositivo y lugar con su nombre de usuario y contraseña. Capítulo II. Marco Teórico 22  Menos propensas a errores y problemas: Las aplicaciones Web son menos propensas a tener problemas técnicos debido a conflictos con hardware, con otras aplicaciones existentes, protocolos o con software personal interno. Todos los usuarios utilizan la misma versión de la aplicación Web y los posibles fallos pueden ser corregidos tan pronto son descubiertos. 2.2.2 Arquitectura Cliente-Servidor La arquitectura cliente-servidor es un modelo de aplicación distribuida en el que las tareas se reparten entre los proveedores de recursos o servicios, llamados servidores, y los demandantes, llamados clientes. Un cliente realiza peticiones a otro programa, el servidor, que le da respuesta. Esta idea también se puede aplicar a programas que se ejecutan sobre una sola computadora, aunque es más ventajosa en un sistema operativo multiusuario distribuido a través de una red de computadoras. (Ferrer Martínez, 2014) Una disposición muy común de la arquitectura cliente-servidor son los sistemas multicapa, en los que el servidor se descompone en diferentes programas que pueden ser ejecutados por diferentes computadoras aumentando así el grado de distribución del sistema. (Ferrer Martínez, 2014) La arquitectura Cliente-Servidor de tres capas (ver Figura 18), una de las más utilizadas actualmente, se constituye de un código de presentación, uno de procesamiento de datos y uno de almacenamiento. Según Hergueta (2008), esta arquitectura se basa en el paradigma de ubicar el código de presentación, de procesamiento y de almacenamiento en servidores diferentes con el fin de separar en módulos el trabajo. En términos generales, la capa de presentación proporciona la interfaz necesaria para presentar información y reunir datos. La capa de procesamiento responde a peticiones del usuario para ejecutar una tarea en específico, interactuando con los datos que están almacenados. La capa de almacenamiento representa las fuentes de datos finales y está formada por uno o más gestores de bases de datos que realizan todo el almacenamiento y reciben solicitudes de recuperación de información desde la capa de negocio. FIGURA 18. EJEMPLO DE ARQUITECTURA CLIENTE-SERVIDOR DE TRES CAPAS FUENTE: (WIKIPEDIA, 2018) Capítulo II. Marco Teórico 23 2.2.3 Patrón Modelo Vista Controlador El Modelo Vista Controlador (MVC), es un patrón de diseño muy utilizado para el desarrollo de aplicaciones Web, el cual tiene como idea fundamental separar los componentes principales de las aplicaciones, como lo son el sistema de gestión de base de datos, las interfaces de usuario y las tareas de manejar los eventos que se produzcan. (Olivares Carlos, 2012) De acuerdo a Fernández Romero y Díaz González (2012) las partes del patrón MVC pueden definirse de la siguiente manera:  El Modelo es el objeto que representa los datos del programa. Maneja los datos y controla todas sus transformaciones. El Modelo no tiene conocimiento específico de los Controladores o de las Vistas, ni siquiera contiene referencias a ellos. Es el propio sistema el que tiene encomendada la responsabilidad de mantener enlaces entre el Modelo y sus Vistas, y notificar a las Vistas cuando cambia el Modelo.  La Vista es el objeto que maneja la presentación visual de los datos representados por el Modelo. Genera una representación visual del Modelo y muestra los datos al usuario. Interactúa preferentemente con el Controlador, pero es posible que trate directamente con el Modelo a través de una referencia al propio Modelo.  El Controlador es el objeto que proporciona significado a las órdenes del usuario, actuando sobre los datos representados por el Modelo, centra toda la interacción entre la Vista y el Modelo. Cuando se realiza algún cambio, entra en acción, bien sea por cambios en la información del Modelo o por alteraciones de la Vista. Interactúa con el Modelo a través de una referencia al propio Modelo. 2.5 Servicio Web Alegsa (2016) indica que la W3C define "Servicio Web" como un sistema de software diseñado para permitir interoperabilidad máquina a máquina en una red. En general, suelen ser API’s1 Web que pueden ser accedidas en una red, como Internet, y son ejecutadas en un sistema de alojamiento remoto. Los servicios Web permiten la comunicación entre diferentes máquinas, con diferentes plataformas y entre programas distintos. Esta comunicación se logra a través de la adopción de diversos estándares abiertos. Los protocolos más comunes a la hora de implementar servicios Web son el protocolo SOAP y REST. El primero hace referencia al protocolo usado para la comunicación entre cliente y servidor donde se intercambian mensajes basados en XML (WSDL), mientras que en el segundo caso los mensajes son por lo general en formato JSON. En ambos casos tanto el cliente como el servidor deben conocer el formato y lenguaje de los mensajes para poder encapsular y desencapsular peticiones y respuestas. (Amaya, Arciniegas, Campo y Chanchi, 2011). 1 API: Interfaz de programación de aplicaciones, abreviación del inglés: Application Programming Interface. (Wikipedia, 2017). Capítulo II. Marco Teórico 24 2.6 Transferencia de Estado Representacional (REST) De acuerdo a Amaya et al (2011), el protocolo REST (Representational State Transfer), plantea un estilo de arquitectura cliente-servidor en la cual un servicio es visto como un recurso y es identificado a través de una dirección URL, mediante la cual puede ser accedido o consumido. Para acceder a estos servicios Web, se hace uso de mensajes en formato simple, los cuales se intercambian entre el cliente y el servidor. REST define a partir de HTTP cuatro métodos: GET, PUT, DELETE y POST. Para la comunicación e intercambio de información entre cliente y servidor a través de REST, se puede hacer uso de diversos formatos y lenguajes: XML, HTML, JSON; aunque debido a la sencillez de los mensajes JSON, este es el tipo de mensajes más difundido en diferentes servicios propios de redes sociales como Facebook y Twitter, y comunidades en Internet. Cada mensaje intercambiado contiene la información necesaria para el funcionamiento adecuado del servicio, de tal forma que para cada servicio el cliente y servidor conocen el formato o protocolo interno de los mensajes. 2.7 Tecnologías del Lado del Cliente 2.7.1 Lenguaje de Marcas de Hipertexto (HTML) HTML, acrónimo en inglés de Hyper Text Markup Language, es un lenguaje de marcas diseñado para estructurar textos y presentarlos en forma de hipertexto, es decir, texto presentado de forma estructurada y agradable, con enlaces (hyperlinks) que conducen a otros documentos o fuentes de información relacionadas, y con inserciones multimedia, este es el formato estándar de las páginas Web. (Ospina y Suárez, 2008) HTML describe el aspecto visual que debe tener una página mediante la utilización de etiquetas determinado el contenido de esta más no su funcionalidad. Las etiquetas consisten en breves instrucciones de comienzo y final, mediante las cuales se determina la forma en la que debe aparecer en el navegador el texto, las imágenes y los demás elementos, en la pantalla del computador. En la Figura 19, podemos observar un ejemplo de código fuente en lenguaje HTML, donde se encuentran representadas las principales etiquetas HTML, HEAD, y BODY. HTML 5, la última versión disponible, establece una serie de nuevos elementos y atributos que reflejan el uso típico de los sitios Web modernos. Incorpora nuevas etiquetas con mayor significado semántico, mejora la integración con las tecnologías de desarrollo Web actual, permite desplegar objetos y animaciones en formato 3D (tridimensional), tiene un mejor soporte multimedia y ahorra la necesidad de tener que procesar medios de audio o video a través de complementos instalados en el navegador Web. (Pérez, 2016). Capítulo II. Marco Teórico 25 FIGURA 19. EJEMPLO DE CÓDIGO FUENTE HTML Fuente: (Web.usf.edu, 2018) 2.7.2 Hojas de Estilo en Cascada (CSS) CSS es un lenguaje de estilos empleado para definir la presentación, el formato y la apariencia de un documento de marcaje, sea html o cualquier otro. Comúnmente se emplea para dar formato visual a documentos html o xhtml que funcionan como espacios Web. También puede ser empleado en formatos xml, u otros tipos de documentos de marcaje para la posterior generación de documentos. (Collell Puig, s.f) Las hojas de estilos nacen de la necesidad de diseñar la información de tal manera que podemos separar el contenido de la presentación y, así, por una misma fuente de información, generalmente definida mediante un lenguaje de marcaje, ofrecer diferentes presentaciones en función de dispositivos, servicios, contextos o aplicativos. Por lo que un mismo documento html, mediante diferentes hojas de estilo, puede ser presentado por pantalla, por impresora, por lectores de voz o por tabletas braille. Separamos el contenido de la forma, composición, colores y fuentes. (Collell Puig, s.f) La Figura 20, muestra un ejemplo de código CSS incrustado en HTML, que permite cambiar el color de la fuente de un título, la fuente y tamaño de un párrafo, además del color del fondo. Capítulo II. Marco Teórico 26 FIGURA 20. EJEMPLO DE CÓDIGO CSS INCRUSTADO EN HTML Fuente: (W3schools, 2018) 2.7.3 JavaScript JavaScript (JS) es un lenguaje de scripting, interpretado, diseñado para la manipulación de eventos y objetos contenidos en una página Web, de forma local y sin necesidad de transmisión alguna por la red. JavaScript permite crear pequeños programas llamados Script, que pueden acompañar un documento HTML o estar contenidos en su interior. Dicho programa se ejecuta en el navegador Web cuando se carga el documento, o cuando se produce algún evento, como por ejemplo la activación de un enlace por parte del usuario. (España María, 2003) Entre las acciones típicas que se pueden realizar en JavaScript están los efectos especiales sobre páginas Web, para crear contenidos dinámicos y elementos de la página que tengan movimiento, cambien de color o cualquier otro dinamismo. Por el otro, JavaScript permite ejecutar instrucciones como respuesta a las acciones del usuario, con lo que podemos crear páginas interactivas con programas como calculadoras, agendas, o tablas de cálculo. (Ospina y Suárez, 2008) JavaScript tiene dos características principales, por un lado, que es un lenguaje basado en objetos, es decir, su paradigma de programación es orientado a objetos, y por otro es un lenguaje orientado a eventos, lo que implica que gran parte de la programación en JavaScript se centra en describir objetos y escribir funciones que respondan a eventos del usuario, por ejemplo, movimientos de ratón, pulsación de teclas, apertura y cerrado de ventanas o carga de una página. (Ospina y Suárez, 2008) 2.7.4 Angular Angular es un framework para aplicaciones web desarrollado en TypeScript, de código abierto, mantenido por Google, que se utiliza comúnmente para crear y mantener aplicaciones web de una sola página. Su objetivo es aumentar las aplicaciones basadas Capítulo II. Marco Teórico 27 en navegador con capacidad de Modelo Vista Controlador (MVC), en un esfuerzo para hacer que el desarrollo y las pruebas sean más fáciles. Con Angular se ha eliminado la manipulación del Modelo de Objeto del Documento (DOM) y al ser MVC los datos se almacenan en un solo lugar. Además, mediante el enlace de datos (data binding), la vista se actualiza de forma automática cada vez que el modelo cambia y viceversa (Google Inc., 2018). De acuerdo a Carreño Villalba (2015) en una aplicación Angular podemos diferenciar una serie de elementos claves que conforman la base de este framework:  Servicios: son los encargados de proveer los datos a la aplicación. Lo más común es que estos datos provengan de una API externa.  Vistas: es la parte visible por el usuario. Suelen estar parametrizadas, y todas las vistas tienen asociado un controlador.  Controladores: Sirven los datos y funcionalidades a las vistas asociadas a él. Suelen ser estos los que utilizan los servicios para obtener los datos.  Directivas: Ofrecen elementos nuevos o nuevos comportamientos en elementos ya existentes dentro de las vistas (widgets, validaciones, etc.). Entre las ventajas de utilizar Angular como framework de desarrollo se encuentran  Disminución de errores en el código gracias la detección temprana de los mismos por TypeScript.  Facilita la reutilización de componentes evitando la repetición de código.  Posee una gran comunidad de desarrollo y amplia documentación.  Brinda gran cantidad de librerías evitando la descarga de paquetes externos.  Diseñado para facilitar el testeo de la aplicación. 2.8 Tecnologías del Lado del Servidor 2.8.1 WildFly WildFly es un servidor de aplicaciones Java de código abierto y multiplataforma, compatible con cualquier sistema operativo en el que se encuentre disponible la máquina virtual de Java. Wildfly, permite una rápida puesta de las aplicaciones, arrancando los procesos críticos en paralelo, para eliminar esperas innecesarias y aprovechar la potencia de los procesadores multi-núcleo. (Galán, 2017) Las aplicaciones realizadas con WildFly están pensadas para soportar gran cantidad de usuarios, tráfico o necesidades de procesamiento. La administración de sus distintos módulos, se puede hacer de manera centralizada y amistosa para el usuario. Los distintos subsistemas se pueden configurar desde el mismo fichero de configuración, aunque ya disponen de unos valores predeterminados asignados de manera inteligente. Además, dispone de múltiples interfaces para configuración. 2.8.1.1 Características de WildFly Según Enderica y Pauzhe (2017), WildFly posee las siguientes características:  Posee una licencia GNU de código abierto. Capítulo II. Marco Teórico 28  Soporta los estándares: Portlet Specification and API 1.0 (JSR-168), Content Repository for Java Technology API (JSR-170), Java Server Faces 2.0 (JSR- 252), Java Management Extensión (JMX) 1.2 y J2EE 1.4.  Ofrece interacción con otras aplicaciones a cualquier objeto de Java.  Brinda asistencia completa para Java Management Extensions – JMX.  Se encuentra orientado a trabajar con Programación Orientada a Aspectos (AOP). Este paradigma de programación nos permite encapsular diferentes conceptos que componen una aplicación, eliminando las preocupaciones colaterales como: patrones de diseño, comprobación de errores, manejo de restricciones en la sincronización y optimizaciones de rendimiento.  Ofrece un alto nivel de confiabilidad a nivel empresarial.  Es compatible con Hibernate, esto permite realizar el correspondiente mapeo de objetos Java a las tablas de la base de datos, lo cual facilita a los programadores de Java, crear las clases de persistencia. Además, Hibernate brinda servicios de consulta y recuperación de información.  Posee JBoss Cache, que ofrece soluciones para almacenar en memoria los objetos Java a los cuales se acceden frecuentemente, reduciendo así los accesos innecesarios a la base de datos, proporcionando soluciones avanzadas de clustering2 a nivel empresarial y mejorando el rendimiento. 2.8.2 Spring Spring es un framework de tecnología abierta (open source), creado para disminuir la complejidad del desarrollo de aplicaciones empresariales. Spring hace posible usar los JavaBeans para lograr cosas que anteriormente sólo eran posibles con el uso de los EJBs3. Sin embargo, el ámbito de empleo de Spring no está limitado al desarrollo en el lado del servidor. Cualquier aplicación Java puede beneficiarse de Spring en términos de simplicidad, testeo, y bajo acoplamiento. (Johnson, Hoeller, Arendsen, Risberg y Sampaleanu, 2005) A resumidas cuentas, Spring es un framework contenedor y liviano que incluye inyección de dependencia y programación orientada a aspectos. Sin embargo, para facilitar el entendimiento de Spring a continuación se detallan las siguientes características de acuerdo a Wallas (2008):  Framework: Spring hace posible configurar y construir aplicaciones complicadas desde simples componentes ya prefabricados. En Spring, los objetos de la aplicación son construidos declarativamente, normalmente en archivos en lenguaje de marcado extendido (XML). Spring también provee una arquitectura funcional prefabricada (administración de transacciones, integración con frameworks de persistencia, etc.) dejando que el desarrollador se enfoque en la programación de la lógica de la aplicación.  Contenedor: Spring es un contenedor en el sentido que contiene y administra el ciclo de vida y configuración de los objetos de la aplicación. En Spring, se 2 Clustering: Agrupar una serie de objetos de acuerdo con un criterio. (Wikipedia, 2017). 3 EJB: Interfaces de programación de aplicaciones que forman parte del estándar de construcción de aplicaciones empresariales JEE, siglas en inglés de Enterprise JavaBeans (Wikipedia, 2017). Capítulo II. Marco Teórico 29 puede definir como cada objeto de la aplicación puede ser declarado, como pueden ser configurados y como deberían estar relacionados el uno con el otro.  Liviano: Spring es liviano en términos de tamaño y sobrecarga. El framework de Spring es distribuido en un simple archivo JAR que tiene un tamaño de 15 aproximadamente 2.5 MB. Y la sobrecarga de procesos requerida por Spring es muy baja.  Inyección de dependencia: Spring promueve el bajo acoplamiento a través de la técnica conocida como inyección de dependencia (DI). Cuando DI es aplicado, los objetos están dando pasivamente sus dependencias en lugar de crear o buscar objetos dependientes por ellos mismos.  Programación orientada a aspectos: Spring incluye un amplio soporte para la programación orientada a aspectos (AOP) que permite el desarrollo cohesivo, separando las aplicaciones lógicas de negocios de los sistemas de servicios (como por ejemplo las transacciones administrativas). Los objetos de la aplicación hacen lo que se supone deben hacer (realizar la lógica de negocios) y nada más. Estos objetos no son responsables de otros ámbitos del sistema, como son procesos, transacciones y autorizaciones. 2.8.3 Hibernate Hibernate es una herramienta de mapeo objeto-relacional (ORM) para el lenguaje Java, que proporciona un framework para el mapeo de un modelo de dominio orientado a objetos a una base de datos relacional tradicional. Hibernate ayuda a resolver problemas de tipo Objeto-Relacional respecto al desajuste de impedancia mediante el reemplazo del acceso directo a las bases de datos relacionales, e implementando la persistencia con funciones de alto nivel de manipulación de objetos. Los ORM son herramientas para la representación y la traducción de los datos entre la base de datos y el lenguaje de programación orientado a objetos; proporciona soporte para las colecciones y las relaciones entre objetos, así como el manejo de tipos compuestos. (Castillo, Cancino y Álvarez Oval, 2015) Una de sus principales características, radica en su fácil integración con otros frameworks como son: Java Server Faces (JSF), Spring o Struts; los cuales ofrecen clases y anotaciones específicas que permiten establecer una rápida comunicación con Hibernate. En el caso del Spring provee una clase llamada HibernateTemplate, la cual ofrece los métodos necesarios para implementar las operaciones básicas CRUD4 en una aplicación; los cuales resultan ser simples ocupando una sola línea de código. (Castillo et al., 2015) Estados de objetos Hibernate soporta los siguientes estados de objetos:  Transitorio: un objeto es transitorio, sólo si ha sido creado mediante una instancia usando el operador new, y no está asociado con una sesión de Hibernate. No tiene ninguna representación persistente en la base de datos y no tiene valor identificador se le ha asignado. Las instancias transitorias serán destruidas por el recolector si la aplicación no tiene una referencia más. 4 CRUD: acrónimo de Crear, Leer, Actualizar y Borrar, del original en inglés: Create, Read, Update and Delete. (SearchDataManagement, 2017). Capítulo II. Marco Teórico 30  Persistente: una instancia persistente tiene una representación en la base de datos y un valor de identificador. Es posible, que el objeto pudo haber sido guardado o recuperado, en el ámbito de una sesión. Hibernate detectará los cambios realizados en un objeto en estado persistente y sincronizará su estado con la base de datos cuando la unidad de trabajo sea completada.  Independiente: es un objeto que ha sido persistente, pero su período de sesión se ha finalizado; es decir, la referencia al objeto sigue siendo válida, en ese sentido, la instancia independiente podría incluso ser modificada en este estado. Una instancia de este tipo puede añadirse a una sesión, en un tiempo posterior, lo cual provocaría que se encuentre activa nuevamente y sus modificaciones realizadas se conviertan en persistentes. HQL (Hibernate Query Languaje) El Hibernate Query Languaje (HQL) es el lenguaje de consultas usado por Hibernate este es muy parecido al SQL estándar con la diferencia de que el HQL se orienta a objetos donde se puede usar los nombres de clase y sus atributos en lugar de las tablas y columnas, lo cual nos permite usar herencias polimorfismo y asociaciones, el desarrollador escribe la consulta en HQL, luego Hibernate se encarga de convertirla en SQL estándar para que sea entendido por el motor de base de datos y proceda a ejecutar la operación indicada. (Castillo et al., 2015) Ventajas del uso de Hibernate El uso de Hibernate brinda las siguientes ventajas según Gavilanes Blacio (2016)  Su portabilidad, debido a que Hibernate utiliza su propio lenguaje de consulta (HQL), permitiendo que cambiar de base de datos sea más fácil, ya que sólo se modificarían las sentencias SQL.  La documentación de las diferentes versiones de Hibernate es muy amplia, y se encuentra bien estructurada y concisa en diferentes idiomas.  El rendimiento de Hibernate, ya que este almacena en caché los datos, por consiguiente, si volvieran a ser llamados, se recuperarían más rápido de la base de datos. Desventajas del uso de Hibernate El uso de Hibernate tiene las siguientes desventajas según Gavilanes Blacio (2016)  Al momento de existir cambios en las tablas (creación de una nueva columna), esto requerirá de cambiar los objetos ya previamente mapeados y los archivos XML asociados a estos.  Debido a que las clases son generadas en tiempo de ejecución para poder acceder a los objetos de las bases de datos, implica más sobrecarga de lo que lo haría la propia consulta SQL.  La curva de aprendizaje es mucho mayor, que lo que se requiere para aprender SQL nativo.  Para un correcto uso de la herramienta, es necesario una adecuada configuración de los muchos ficheros que esta maneja para el proceso de las transacciones SQL y creación de objetos Java. Capítulo II. Marco Teórico 31 2.8.4 Sistema Manejador de Base de Datos De acuerdo a Korth, Silberschatz y Sudarshan (2002) los sistemas manejadores de Base de Datos consisten en una colección de datos interrelacionados y un conjunto de programas para acceder a dichos datos. La colección de datos, normalmente denominada base de datos, contiene información relevante para una empresa. El objetivo principal de un SGBD es proporcionar una forma de almacenar y recuperar la información de una base de datos de manera que sea tanto práctica como eficiente. Los sistemas de bases de datos se diseñan para gestionar grandes cantidades de información. La gestión de los datos implica tanto la definición de estructuras para almacenar la información como la provisión de mecanismos para la manipulación de la información. Además, los sistemas de bases de datos deben proporcionar la fiabilidad de la información almacenada, a pesar de las caídas del sistema o los intentos de acceso sin autorización. Si los datos van a ser compartidos entre diversos usuarios, el sistema debe evitar posibles resultados anómalos. Ospina (2009) describe las funciones que debe cumplir un SMBD: 1. Definición de datos: El SMBD debe ser capaz de aceptar definiciones de datos en versión fuente y convertirlas en la versión objeto adecuada. Dicho de otro modo, el SMBD debe incluir componentes procesadores de lenguajes para cada uno de los diversos lenguajes de definición de datos (DDL). 2. Manipulación de datos: El SMBD debe ser capaz de atender las solicitudes del usuario para extraer, poner al día, datos que ya existen en la base de datos o para agregar en ella datos nuevos. Dicho de otro modo, el SMBD debe incluir componentes procesadores de lenguajes para cada uno de los diversos lenguajes de manipulación de datos (DML). 3. Seguridad e integridad de los datos: El SMBD debe supervisar las solicitudes de los usuarios y rechazar los intentos de violar las medidas de control y seguridad definidas por el DBA. 4. Control de concurrencia de los datos: El SMBD debe proporcionar un mecanismo para garantizar que la base de datos se actualice correctamente cuando haya varios usuarios realizando modificaciones de manera concurrente en la base de datos. 5. Recuperación: El SMBD debe poder recuperar la base de datos en caso de que esta resulte dañada de alguna forma. 6. Diccionario de Datos accesible por el usuario: El SMBD debe incluir un catálogo en el que se almacenen las descripciones de los datos y que sea accesible por parte de los usuarios. Capítulo II. Marco Teórico 32 2.8.5 PostgreSQL PostgreSQL es un potente Sistema Manejador de Base de Datos objeto-relacional, de código abierto, que cuenta con más de 30 años de desarrollo activo y una arquitectura probada que se ha ganado una sólida reputación por su fiabilidad, integridad de datos y corrección. Trabaja muy bien con grandes cantidades de datos y una alta concurrencia de usuarios accediendo a la vez al sistema, por lo que se considera una herramienta que favorece a los usuarios con sistemas empresariales de gran tamaño. (The PostgreSQL Global Development Group, 1996-2015) Narváez Coello (2014) describe las características generales de PostgreSQL: • Integridad referencial bajo claves foráneas • Permite copias de seguridad en caliente (hot backup) • Soporte nativo de SSL para la encriptación del acceso • Permite el manejo de objetos y sus relaciones • Brinda múltiples métodos y opciones de autentificación • Manejo de actualizaciones integrado (pg_update) • Disponible para múltiples plataformas • Manejo de procedimientos almacenados con soporte en los lenguajes PL/pgSQL, PL/Tcl, PL/Python y PL/Perl. El análisis de tecnologías realizado en este capítulo permitió la selección de herramientas que facilitan el desarrollo de una aplicación segura, eficiente, usable y con tiempos de respuesta adecuados. Además, que brindan al programador diversas facilidades que permitan optimizar el tiempo de desarrollo. Fueron seleccionados Hibernate y Spring, por su robustez, por su amplia documentación y por sus funcionalidades que permiten la construcción de servicios Web escalables, donde se implementa la lógica del negocio y que en un futuro puedan ser consumidos por alguna otra aplicación Web o móvil sin necesidad de realizar modificaciones. Además, Hibernate permite la rápida gestión y recuperación de los datos almacenados en una base de datos relacional gracias a su propio lenguaje de consulta HQL. PostgreSQL, por su portabilidad, su facilidad de configuración y su excelente rendimiento en aplicaciones Web con alta concurrencia en lectura de datos. HTML5 y CSS3 por ser los lenguajes predilectos para la creación de vistas en el desarrollo Web, permitiendo definir la estructura de la página y aplicar estilos, y finalmente Angular 6, que gracias a sus múltiples librerías y arquitectura MVC, facilitan la creación de interfaces dinámicas, rápidas y usables. Capítulo III. Marco metodológico 33 CAPÍTULO III. MARCO METODOLÓGICO El uso de metodologías de desarrollo permite estructurar, planificar y controlar el proceso de creación de software. Debido a esto, en el siguiente capítulo, se estudian los conceptos relacionados a estas metodologías, y se presenta un cuadro comparativo que permitió la elección de la metodología adecuada para la elaboración del Trabajo Especial de Grado. 3.1 Metodología de desarrollo Una metodología es una colección de procedimientos, técnicas, herramientas y documentos auxiliares que ayudan a los desarrolladores de software en sus esfuerzos por implementar nuevos sistemas de información. Una metodología está formada por fases, cada una de las cuales se puede dividir en sub-fases, que guiarán a los desarrolladores de sistemas a elegir las técnicas más apropiadas en cada momento del proyecto y también a planificarlo, gestionarlo, controlarlo y evaluarlo. (Avison y Fitzgerald, 1995) De acuerdo a los aportes de Georgiadou (2003) y Carvajal Riola (2008) una metodología debe tener los siguientes puntos primordiales: 1. Visión del producto. Todo el mundo debe conocer lo que el equipo está tratando de hacer, como debe de ser el producto final, las bases de la estrategia del producto y cuando el producto será entregado. 2. Vinculación con el cliente. La metodología se debe encargar de indicar la manera de gestionar el vínculo entre clientes, desarrolladores, especificación de requisitos y el personal de soporte. 3. Establecer un modelo de ciclo de vida. Un modelo de ciclo de vida como pueden ser el iterativo, secuencial o en cascada, etc. De esta manera se establecen los pasos en el proceso de desarrollo y se pueden ubicar los recursos adecuadamente. 4. Gestión de los requisitos. Nivel de detalle que deben tener los requisitos del producto, siendo recomendable cuanto más alto mejor. 5. Plan de desarrollo. Un documento con un plan para organizar los requisitos y cuestiones relacionadas con la calidad. Los ítems de este plan deben ser lo suficientemente detallados para que los desarrolladores de software puedan desarrollar sus tareas de codificación de un modo no ambiguo. 6. Integración del proyecto. Una metodología de desarrollo debe conducir a una organización a determinar cómo se integrará el producto fabricado con los existentes y futuros productos de la compañía. 7. Medidas de progreso del proyecto. Se considera un aspecto crítico en una metodología. Desarrolladores, manager y los altos cargos de la organización deben entender el progreso del desarrollo del equipo de desarrollo. Ellos deben conocer el estado actual del producto, así como una buena estimación del tiempo que resta para la finalización del proyecto. 8. Métricas para evaluar la calidad. La existencia de un proceso para la medida de la calidad del producto, el cual suele empezar en las primeras etapas de la planificación. Este proceso no es tan solo para encontrar fallos, produce Capítulo III. Marco metodológico 34 indicadores de la robustez del producto y cuánto se aproxima el producto a las especificaciones iniciales. 9. Maneras de medir el riesgo. Un plan debe tener en cuenta los posibles problemas que pueden ocurrir durante el proceso de desarrollo, el impacto de estos problemas y qué acciones deberían ser llevadas a cabo para solucionar o prevenir estos problemas. 10. Cómo gestionar los cambios. Nuevas ideas y problemas desembocan en cambios de diseño y especificación aún que ya hayamos empezado a implementar. Un plan debe contemplar estas sugerencias para introducirlas en el proyecto, debatirlas e implementarlas. 11. Establecer una línea de meta. La metodología de desarrollo debe forzar a una organización a especificar exactamente que está siendo construido y que constituye el producto final. 3.1.1 Metodología ágil Las metodologías ágiles son métodos de desarrollo de software en los que las necesidades y soluciones evolucionan a través de una colaboración estrecha entre equipos multidisciplinarios. Se caracterizan por enfatizar la comunicación frente a la documentación, por el desarrollo evolutivo y por su flexibilidad. Estas metodologías surgen a principios del 2001 en respuesta a los modelos de proceso clásicos ya existentes. (Wikiversidad, 2015) El Manifiesto Ágil El Manifiesto Ágil consiste en un documento redactado en febrero de 2001, donde un grupo de académicos y expertos en el área de desarrollo de software, expusieron los postulados sobre los que se rigen las metodologías ágiles. El manifiesto hace énfasis en cuatro valores principales. Se valora, según Letelier y Sánchez (2003):  Al individuo y las interacciones del equipo de desarrollo sobre el proceso y las herramientas. La gente es el principal factor de éxito de un proyecto software. Es más importante construir un buen equipo que construir el entorno. Muchas veces se comete el error de construir primero el entorno y esperar que el equipo se adapte automáticamente. Es mejor crear el equipo y que éste configure su propio entorno de desarrollo en base a sus necesidades.  Desarrollar software que funciona más que conseguir una buena documentación. La regla a seguir es “no producir documentos a menos que sean necesarios de forma inmediata para tomar una decisión importante”. Estos documentos deben ser cortos y centrarse en lo fundamental.  La colaboración con el cliente más que la negociación de un contrato. Se propone que exista una interacción constante entre el cliente y el equipo de desarrollo. Esta colaboración entre ambos será la que marque la marcha del proyecto y asegure su éxito.  Responder a los cambios más que seguir estrictamente un plan. La habilidad de responder a los cambios que puedan surgir a lo largo del proyecto (cambios en los requisitos, en la tecnología, en el equipo, etc.) determina también el éxito o fracaso del mismo. Por lo tanto, la planificación no debe ser estricta sino flexible y abierta. Capítulo III. Marco metodológico 35 Los postulados descritos anteriormente, inspiraron los siguientes principios (Gimson, 2012): 1. La prioridad es satisfacer al cliente mediante entregas de software tempranas y continuas. 2. Los cambios en los requerimientos son aceptados. 3. Software que funcione se entrega frecuentemente, con el menor intervalo posible entre entregas. 4. El cliente y los desarrolladores deben trabajar juntos a lo largo del proyecto. 5. El proyecto se construye en base a individuos motivados. 6. El diálogo cara a cara es el método más eficiente y efectivo para comunicar información dentro del equipo. 7. El software que funcione es la medida principal del progreso. 8. Los procesos ágiles promueven el desarrollo sostenido. 9. La atención continua a la excelencia técnica y al buen diseño mejora la agilidad; 10. La simplicidad es esencial. 11. Las mejores arquitecturas, requerimientos y diseños surgen de equipos auto organizados. 12. El equipo reflexiona en cómo ser más efectivos, y ajusta su comportamiento en consecuencia. 3.2 Scrum Scrum es un proceso de gestión y control que reduce la complejidad en el desarrollo de productos para satisfacer las necesidades de los clientes. La gerencia y los equipos de Scrum trabajan juntos alrededor de requisitos y tecnologías para entregar productos funcionando de manera incremental usando el empirismo. (Francia, 2017) Scrum es un marco de trabajo simple que promueve la colaboración en los equipos para lograr desarrollar productos complejos, está basado en un modelo de proceso empírico con respeto a las personas y basado en la auto organización de los equipos para lidiar con lo imprevisible y resolver problemas complejos inspeccionando y adaptando continuamente. (Francia, 2017). Según Carvajal Riola (2008) en Scrum se identifican las siguientes fases:  Planificación del Sprint (Sprint Planning). En esta fase se define el Product Backlog si todavía no ha sido definido, el cual consiste en una lista priorizada de requisitos del sistema y es un documento vivo, que puede ser continuamente actualizado. En cada iteración el Product Backlog es revisado por el equipo. También se lleva a cabo la planificación del primer Sprint. La planificación de cualquier sprint es la jornada de trabajo previa al inicio de cualquier sprint y en la cual se determinan cuáles son los objetivos y el trabajo que se deben cubrir en esa iteración.  Seguimiento del Sprint. A lo largo de esta fase se llevan a cabo breves reuniones diarias, para ver el avance de las tareas y el trabajo que está Capítulo III. Marco metodológico 36 previsto para la jornada. En estas reuniones sólo están presentes el Scrum Master y el equipo y se suelen plantear las siguientes preguntas: ¿Qué trabajo se ha realizado desde la reunión anterior?, ¿Qué trabajo se realizará hasta la próxima reunión?, ¿Cuáles han sido los Impedimentos que deben solventarse para proseguir con el trabajo?  Revisión del Sprint (Sprint Review). Una vez finalizado el Sprint se realiza un análisis y revisión del incremento generado. En esta reunión se presentan los resultados finales y se recomienda siempre tener preparada un entregable. En la Figura 21, podemos observar las fases definidas anteriormente representadas en el Ciclo de SCRUM. FIGURA 21. CICLO DE SCRUM DE ACUERDO A KEN SCHWABER Y JEFF SUTHERLAND Fuente: (Scrum.org, 2018) 3.2.1 Roles y responsabilidades Schwaber y Beedle (2002) definen seis tipos de roles diferentes en la metodología Scrum:  Propietario del producto. Persona del proyecto conocedora del entorno de negocio del cliente y de la visión del producto, y responsable de obtener el resultado de mayor valor posible para el cliente. También está encargado de la financiación necesaria para el proyecto, de tomar las decisiones que afecten a cómo va a ser el resultado final, fechas de lanzamiento y el retorno de inversión.  Scrum Master. Es el encargado de garantizar el funcionamiento de la metodología y de los procesos. Un Scrum Master debe interactuar tanto con el equipo como con el cliente y con los gestores.  Equipo de desarrollo. Es el equipo del proyecto y tiene la autoridad para decidir en las acciones necesarias y para auto-organizarse con la finalidad de alcanzar los objetivos del sprint. El equipo está involucrado en la estimación del esfuerzo de las tareas del product backlog, en la creación del sprint backlog, etc.  El cliente. Participa en la creación del product backlog. Capítulo III. Marco metodológico 37  El gestor. Está al cargo de la toma de decisiones finales, participa en la elección de objetivos y requisitos. Una de las actividades en las que está involucrado el gestor es en la selección del propietario del producto o en la reducción del product backlog junto con el Scrum Master. 3.2.2 Prácticas Scrum provee de prácticas y herramientas para la gestión de sus diferentes fases. Carvajal Riola (2008) define las principales:  Sprint Backlog: Es una lista de trabajos que el equipo se compromete a realizar en la iteración para generar el incremento previsto. Las tareas están asignadas a personas y tienen estimados el tiempo y los recursos necesarios.  Product Backlog: Define los requisitos del sistema o el trabajo a realizar a lo largo del proyecto. Está compuesto por una lista de requisitos de negocio y técnicos, actualizados y priorizados.  Estimación de esfuerzo: Es un proceso iterativo en el cual las estimaciones de los ítems del product backlog son reajustadas acorde a la información obtenida en la última iteración. Este reajuste lo llevan a cabo el equipo de desarrollo y el propietario del producto.  Burn-down: Es una herramienta para gestionar y seguir el trabajo de cada sprint y representa gráficamente el avance del sprint. De esta manera en las reuniones diarias el Scrum Master puede evaluar cuánto se ha avanzado y actualizar el gráfico. Capítulo III. Marco metodológico 38 3.3 Cuadro comparativo de Scrum con otras metodologías de desarrollo A continuación, se presenta en la tabla 2 una comparación entre cuatro metodologías diferentes de desarrollo. TABLA 2 COMPARATIVA DE METODOLOGÍAS DE DESARROLLO Desarrollo en Cascada SCRUM XP Método de desarrollo de sistemas dinámicos (DSDM) Definición También llamado modelo en cascada, es el enfoque metodológico que ordena rigurosamente las etapas del proceso para el desarrollo de software, de tal forma que el inicio de cada etapa debe esperar a la finalización de la etapa anterior. Scrum es un proceso de gestión y control que reduce la complejidad en el desarrollo de productos para satisfacer las necesidades de los clientes. La gerencia y los equipos de Scrum trabajan juntos alrededor de requisitos y tecnologías para entregar productos funcionando de manera incremental usando el empirismo. XP es una metodología ágil centrada en potenciar las relaciones interpersonales como clave para el éxito en desarrollo de software. Se basa en realimentación continua entre el cliente y el equipo de desarrollo, comunicación fluida entre todos los participantes, simplicidad en las soluciones implementadas y coraje para enfrentar los cambios. El Método de Desarrollo de Sistemas Dinámicos (DSDM) es una metodología de desarrollo de software originalmente basado en la metodología de Desarrollo de Aplicación Rápida. Su idea fundamental se basa en que en vez de fijar las funcionalidades de un producto y después el tiempo y el coste, fijar primero el tiempo y el coste y con esto fijado, determinar las funcionalidades que se pueden implementar en el producto Fases - Análisis y especificación de los requisitos - Diseño - Codificación - Pruebas - Implantación y mantenimiento - Planificación del Sprint - Seguimiento del Sprint - Revisión del Sprint - Fase de exploración - Fase de planificación - Fase de iteraciones - Fase de producción - Fase de mantenimiento - Fase de cierre de proyecto - Estudio de vialidad - Estudio de negocio - Modelo funcional de las iteraciones - Iteraciones de diseño y construcción - Implementación Roles - Gestor de Proyectos - Arquitecto del software - Analistas - Desarrolladores - Probadores - Expertos en la materia - Propietario del producto - Scrum Master - Equipo de desarrollo - Equipo de desarrollo - El gestor - Cliente - Programador - Probador - Rastreador - Coach o Tutor - Consultor - Gestor o Manager - Desarrollador - Coordinador técnico - Usuario embajador - Usuario asesor - Visionario - Patrocinador ejecutivo - Líder de Equipo - Probador - Escriba - Facilitador - Jefe de Proyecto Prácticas No especifican ninguna práctica concreta - Sprint Backlog - Product Backlog - Estimación de esfuerzo - Burn-down - Burn-up - Estimación de Poker - Historias de usuario - Cortas y pequeñas iteraciones - Metáforas - Diseño simple - Pruebas - Integración continua - Estándares de codificación - Involucración activa del usuario. - El objetivo es la entrega frecuente de producto - Las pruebas se integran a lo largo del ciclo de vida - Todos los cambios son reversibles Capítulo III. Marco metodológico 39 Desarrollo en Cascada SCRUM XP Método de desarrollo de sistemas dinámicos (DSDM) Entorno de Uso Situaciones en las que los requisitos están muy bien determinados y no es probable una mala interpretación de los mismos. Proyectos que ya han sido realizados con anterioridad Scrum es recomendado para pequeños equipos, de diez o menos componentes. Proyectos en entornos complejos, donde se necesita obtener resultados pronto, con requisitos cambiantes o poco definidos. Proyectos con requisitos imprecisos y muy cambiantes, y donde existe un alto riesgo técnico. Equipos de tamaño medio o pequeños, es decir entre tres y veinte componentes como máximo. El tamaño de los equipos en DSDM varía desde dos integrantes hasta seis. Para proyectos grandes como pequeños, siempre que los sistemas grandes sean divisibles en componentes que puedan ser desarrollados por equipos pequeños. Ventajas - Fácil de implementar y entender - Está orientado a documentos - La calidad del producto resultante es alta - Gestión de las expectativas de los clientes - Entregas rápidas - Flexibilidad y adaptación - Gestión sistemática de riesgos - Código sencillo y fácil de entender - Optimiza el tiempo de desarrollo - Fomenta la comunicación con el cliente - Fácil de adaptar a cualquier lenguaje de programación - Adaptación a los cambios - Apto para proyectos con tiempos de desarrollo cortos - Mejora continua - Los requerimientos están especificados a un alto nivel Desventajas - Rigidez en el desarrollo - Tiempos de desarrollo extensos - Exige una alta cualificación o formación - Suele ser efectivos solo en equipos reducidos - Recomendada solo para proyectos de corto plazo - Requiere un rígido ajuste a los principios de XP - Los equipos deben tener capacidad para tomar decisiones - Es necesaria la continua implicación del cliente Fuentes: Elaborada a partir de (CARVAJAL RIOLA, 2008), (Francia, 2007) y (Wikipedia, 2018) El estudio y análisis de las metodologías de desarrollo, y las características de la aplicación a desarrollar, permitieron la selección de Scrum como metodología de desarrollo a utilizar, debido a su flexibilidad y capacidad de adaptación a los cambios que puedan ir surgiendo en el desarrollo, además, porque se centra en la productividad gracias a sus iteraciones de corta duración, y en la comunicación con las personas involucradas en el proyecto. Scrum brinda diversas herramientas que son útiles a la hora de desarrollar, pero al no ser una metodología rígida, se pueden escoger sólo las que se consideren más apropiadas para el proyecto. Finalmente, otro de los aspectos que influyó en la selección de la metodología Scrum, es el Desarrollo incremental, que permite que el aprendizaje obtenido en cada iteración, pueda ser aplicado en los sprint posteriores logrando la mejora continua. Capítulo IV. Marco aplicativo 40 CAPÍTULO IV. MARCO APLICATIVO En este capítulo se describe de manera detallada los pasos y las iteraciones que se realizaron para el desarrollo de este Trabajo Especial de Grado, en el que se siguieron los lineamientos de Scrum, una metodología ágil de desarrollo, además de los aspectos y características generales de la aplicación desarrollada. 4.1 Perfiles de usuario  Visitante: persona interesada en acceder a la información registrada en el sistema. Este usuario puede realizar búsquedas mediante uno o múltiples criterios, visitar perfiles de usuarios registrados, exportar la hoja de perfil descargándola o enviándola a una dirección de correo electrónico, registrarse en el sistema si posee un correo institucional de la Facultad de Ciencias y contactar al administrador.  Usuario registrado: este tipo de perfil de usuario puede realizar las mismas actividades que el usuario visitante, además de poder gestionar la información referente a su perfil como sus datos básicos, imagen de perfil, estudios realizados, experiencia laboral, cursos, proyectos, productos de investigación, eventos en los que ha participado, idiomas y reconocimientos.  Administrador: usuario administrador del sistema, puede gestionar toda la información almacenada en la aplicación, registrar nuevos usuarios y asignar roles. 4.2 Requerimientos de la aplicación Se definieron los siguientes requerimientos para el sistema:  Registrarse: Los visitantes pueden crearse una cuenta en la aplicación, siempre y cuando posean un correo institucional de la Facultad de Ciencias.  Iniciar sesión: Los usuarios registrados en la aplicación pueden acceder a su cuenta.  Contactar administrador: Los usuarios visitantes y registrados pueden enviar un mensaje al administrador.  Descargar hoja de perfil: Todos los usuarios de la aplicación pueden descargar una hoja de perfil.  Enviar hoja de perfil: Todos los usuarios de la aplicación pueden enviar una hoja de perfil por correo electrónico.  Realizar búsqueda: Todos los usuarios de la aplicación pueden realizar búsquedas en dos modalidades, búsqueda simple y búsqueda avanzada.  Visualizar perfil: Todos los usuarios pueden ver el perfil de un usuario registrado en la aplicación.  Restablecer contraseña: Los usuarios registrados en la aplicación pueden restablecer su contraseña en caso de olvidarla. Capítulo IV. Marco aplicativo 41  Cambiar Contraseña: Los usuarios registrados en la aplicación pueden cambiar su contraseña.  Asignar rol: Los usuarios administradores pueden asignar roles a otros usuarios registrados en la aplicación.  Realizar respaldo: Los usuarios administrados pueden realizar respaldos a la información almacenada en la base de datos del sistema.  Gestionar usuario: Los usuarios administradores pueden gestionar toda la información de los usuarios registrados en la aplicación.  Cerrar sesión: Los usuarios registrados y administradores pueden finalizar la sesión.  Gestionar experiencias laborales: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar sus experiencias laborales.  Gestionar idiomas: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar idiomas.  Gestionar estudios: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar estudios que hayan realizado.  Gestionar eventos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar eventos en los que hayan participado.  Gestionar cursos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar cursos que hayan realizado.  Gestionar reconocimientos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar reconocimientos que hayan recibido.  Gestionar proyectos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar proyectos en los que hayan participado.  Gestionar productos: Los usuarios registrados en la aplicación puede agregar, modificar o eliminar productos de investigación que hayan realizado.  Cambiar imagen de perfil: Los usuarios registrados en la aplicación pueden cambiar su imagen de perfil. Capítulo IV. Marco aplicativo 42 4.3 Arquitectura del sistema La arquitectura de la aplicación es de tipo cliente-servidor. El cliente, desarrollado en Angular, consume los servicios Web que provee el servidor utilizando métodos HTTP y mensajería en formato JSON, y posteriormente, le muestra la información adquirida al usuario por medio de sus interfaces de usuario. Por su parte, el servidor, consiste en una API desarrollada en Java utilizando los frameworks Hibernate y Spring, y que se encuentra desplegada en un servidor WildFly. La API provee 147 servicios Web, que mediante HQL, el lenguaje de consulta de Hibernate, permiten la gestión de la información almacenada en la base de datos PostgreSQL. La interacción de los diferentes elementos que componen el sistema se puede observar en la figura 22. FIGURA 22. ARQUITECTURA GENERAL DEL SISTEMA 4.4 Aplicación de la metodología Scrum Para el desarrollo de este Trabajo Especial de Grado se hizo un uso parcial de los lineamientos del marco de desarrollo ágil Scrum, debido a que no fueron utilizados todos los elementos que contempla, sino los que se más se adaptaron a las necesidades del proyecto y son presentados a continuación: Capítulo IV. Marco aplicativo 43 4.4.1 Pila de producto (Product Backlog) y descripción de las iteraciones En la tabla 3 podemos observar las actividades repartidas en 8 iteraciones, las cuales se desarrollaron en 7 meses aproximadamente. TABLA 3 PILA DEL PRODUCTO  Sprint 1: Definición de requerimientos e instalación y configuración del ambiente de desarrollo Se definió la arquitectura general de la aplicación, sus requerimientos y se diseñaron las interfaces principales. Posteriormente, se realizó la instalación y configuración de las herramientas de desarrollo: servidor Web Wildfly 10, sistema manejador de base de datos Postgresql 10, última versión estable del entorno de desarrollo (IDE) Intellij Idea, última versión estable del manejador de versiones GIT y última versión estable del editor de código fuente Visual Studio Code. Finalmente, se corrieron los scripts de la base de datos de SIGIC, se realizaron las adaptaciones correspondientes y el resultado final podemos observarlo en la figura 38. Capítulo IV. Marco aplicativo 44  Sprint 2: Implementación de los servicios Web para el módulo de búsqueda Utilizando los frameworks de desarrollo Hibernate y Spring, se realizó la implementación de 9 servicios Web para el módulo de búsqueda de la aplicación que pueden observarse en la tabla 4. Entre ellos destacan, los servicios de búsqueda busquedaSimple y busquedaAvanzada, el servicio de obtenerCoincidencias que fue implementado para la funcionalidad de autocompletar en el buscador principal, y el servicio perfilesSimilares, que retorna los perfiles similares a un usuario considerando estas características en el siguiente orden de prioridad: usuarios que hayan participado en los mismos proyectos o similares, usuarios que hayan participado en la elaboración de los mismos productos de investigación o similares, usuarios que hayan realizado los mismos estudios, usuarios que posean el mismo cargo, usuarios que hayan realizado los mismos cursos, usuarios que dominen los mismos idiomas, usuarios que pertenezcan a la misma dependencia, usuarios que pertenezcan a la misma facultad. Para comprobar su correcto funcionamiento se utilizó la extensión de Chrome Postman. TABLA 4 SERVICIOS WEB PARA EL MÓDULO DE GESTIÓN Capítulo IV. Marco aplicativo 45  Sprint 3: Desarrollo de interfaces para el módulo de búsqueda Se desarrollaron las interfaces para el módulo de búsqueda. Entre ellas destacan la página principal (ver Figura 33), la interfaz de búsqueda avanzada (ver Figura 37), los resultados de búsqueda (ver Figura 35) y el perfil del usuario (ver Figura 36).  Sprint 4: Implementación de servicios Web para el módulo de gestión de información Se realizó la implementación de 130 servicios Web para el módulo de gestión de información de la aplicación. Estos servicios permiten agregar, modificar y eliminar toda la información registrada en la base de datos. Para comprobar su correcto funcionamiento se utilizó la extensión de Chrome Postman (ver Figura 23). FIGURA 23. RESPUESTA DE SERVICIO WEB LISTARIDIOMAS Capítulo IV. Marco aplicativo 46  Sprint 5: Desarrollo de interfaces para el módulo de gestión de información Se desarrollaron las interfaces para el módulo de gestión de información. Entre ellas destacan la interfaz de editar perfil (ver Figura 32) y los formularios para agregar y modificar información.  Sprint 6: Desarrollo de servicios Web e interfaces para el módulo de autenticación Se desarrollaron los servicios Web reflejados en las tablas 5 y 6, además de las interfaces para el módulo de autenticación. Este módulo permite a los usuarios visitantes registrarse en la aplicación, a los usuarios registrados autenticarse, a los administradores gestionar los roles y adicionalmente, se encarga de controlar el acceso a las diferentes funcionalidades del sistema dependiendo del tipo de usuario y su rol. TABLA 5 SERVICIOS PARA LA GESTIÓN DE USUARIOS TABLA 6 SERVICIOS PARA EL MÓDULO DE AUTENTICACIÓN Capítulo IV. Marco aplicativo 47  Sprint 7: Realización de pruebas y ajustes finales Se realizaron pruebas para evaluar el correcto funcionamiento de la aplicación, los tiempos de respuesta y la usabilidad y en base a los resultados se realizaron los ajustes finales a la aplicación.  Sprint 8: Elaboración del documento Se realizó la documentación del trabajo especial de grado. 4.5 Principales diagramas de secuencia y casos de uso El modelado de procesos en notación UML es utilizado para la definición, construcción y documentación de sistemas. En este Trabajo Especial de Grado, se utilizaron los diagramas de secuencia y de casos de uso para describir los procesos de la aplicación. Diagramas de secuencia Los diagramas de secuencia permiten representar la interacción de un grupo de objetos en un sistema. A continuación se presentan los diagramas de secuencia de las principales funcionalidades del sistema. Inicio de sesión: El proceso inicia cuando el usuario ingresa sus credenciales de acceso en el formulario de inicio de sesión, luego, el sistema evalúa si los datos ingresados son válidos y realiza la consulta en la base de datos para buscar un usuario que posea esas credenciales. Finalmente, el proceso finaliza con el sistema creando una sesión para el usuario si la búsqueda es exitosa, o enviando un mensaje de error si las credenciales son incorrectas. FIGURA 24. DIAGRAMA DE SECUENCIA - INICIAR SESIÓN Capítulo IV. Marco aplicativo 48 Gestión de información del usuario registrado: Los procesos para agregar, modificar o eliminar un elemento del perfil del usuario registrado son iguales para todas las categorías (curso, estudio, experiencia laboral, conocimiento, proyecto producto evento o idioma) - Agregar Ítem: El proceso inicia cuando el usuario ingresa los datos del ítem a agregar en el formulario correspondiente, cuyo contenido varía dependiendo de su categoría, luego, el sistema evalúa si los datos ingresados son válidos y de ser así, los inserta en la tabla de la base de datos correspondiente. El proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 25. DIAGRAMA DE SECUENCIA - AGREGAR ÍTEM Capítulo IV. Marco aplicativo 49 - Eliminar Ítem: El proceso inicia cuando el usuario selecciona en la aplicación el ítem que desea eliminar, luego, el sistema elimina el ítem de la tabla de la base de datos correspondiente y el proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 26. DIAGRAMA DE SECUENCIA - ELIMINAR ÍTEM Capítulo IV. Marco aplicativo 50 - Modificar Ítem: El proceso inicia cuando el usuario selecciona en la aplicación el ítem que desea modificar, el sistema busca la información almacenada de ese ítem y la muestra al usuario mediante un formulario editable, este realiza las modificaciones y envía el formulario con los cambios, el sistema evalúa si los estos fueron válidos y de ser así, actualiza el registro en la tabla de la base de datos correspondiente. El proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 27. DIAGRAMA DE SECUENCIA - MODIFICAR ÍTEM Capítulo IV. Marco aplicativo 51 - Asignar Rol: El proceso inicia cuando el administrador selecciona en la aplicación, al usuario registrado al que desea asignar el rol, el sistema busca el registro del usuario en la base de datos y, retorna al administrador, un formulario con una lista desplegable con todos los roles disponibles en el sistema. Luego, el administrador selecciona el rol que desea asignar y el sistema le envía un mensaje de confirmación para la asignación del rol. Finalmente, si el usuario confirma la acción, el sistema actualiza el rol del usuario en la base de datos y notifica al administrador si la acción fue o no exitosa. FIGURA 28. DIAGRAMA DE SECUENCIA - ASIGNAR ROL Capítulo IV. Marco aplicativo 52 - Búsqueda avanzada: El proceso inicia cuando el usuario ingresa uno o más parámetros de búsqueda y selecciona la opción de buscar, luego, el sistema realiza la búsqueda en la base de datos y retorna al usuario los registros que cumplan con los criterios ingresados. Finalmente, el sistema aumenta el contador de búsquedas realizadas en la aplicación. FIGURA 29. DIAGRAMA DE SECUENCIA - BÚSQUEDA AVANZADA Capítulo IV. Marco aplicativo 53 Casos de uso Los diagramas de casos de uso describen el conjunto de pasos o actividades se realizan para llevar a cabo un proceso. A continuación se presentan los diferentes niveles que componen el modelo de casos de uso de la aplicación.  Nivel 0: En la figura 30 se presenta el sistema y a los 3 tipos de usuario que interactúan con él. El usuario registrado, que posee una cuenta en la aplicación, el administrador que puede gestionar toda la información almacenada y el visitante, que puede realizar búsquedas, visitar perfiles y exportar hojas de perfil. FIGURA 30 MODELO DE CASOS DE USO – NIVEL 0 Capítulo IV. Marco aplicativo 54  Nivel 1: En la figura 31 se especifica el conjunto de casos de uso que engloban las funcionalidades planteadas para la aplicación y cuales usuarios pueden utilizarlas. Se observa que las opciones de búsqueda y exportación de hojas de perfil están disponibles para todos los usuarios, que los visitantes y los usuarios registrados pueden contactar al administrador, que el usuario registrado puede editar la información de su perfil y que sólo el administrador puede utilizar la funcionalidad de administrar el sistema. FIGURA 31 MODELO DE CASOS DE USO – NIVEL 1 Capítulo IV. Marco aplicativo 55  Nivel 2: En la figura 32 se observan las funcionalidades que extienden de los casos de uso expuestos en la figura anterior. Destacan las modalidades de búsqueda, simple y avanzada, las formas de exportar una hoja de perfil, por medio de descarga o enviándola por correo y las opciones de administración que posee el sistema que permiten entre otras cosas, agregar o eliminar usuarios, la asignación de roles y realizar respaldos de la información. FIGURA 32. MODELO DE CASOS DE USO – NIVEL 2 Capítulo IV. Marco aplicativo 56 A continuación se describirán alguno de los casos de usos más importantes, identificados en las figuras anteriores. TABLA 7. DESCRIPCIÓN DE CASO DE USO 2. INICIAR SESIÓN Identificador y nombre 2. Iniciar sesión Actor(es) Usuario registrado, Administrador Descripción Permite al actor acceder al sistema Precondición El actor se encuentra registrado en la aplicación Postcondición El actor entra al sistema y puede gestionar su información Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: ninguno TABLA 8. DESCRIPCIÓN DE CASO DE USO 3. REALIZAR BÚSQUEDA Identificador y nombre 3. Realizar búsqueda Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor realizar una búsqueda en la aplicación Precondición Ninguna Postcondición Muestra los perfiles que cumplan con los criterios especificados en el buscador Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: 3.1 Búsqueda Simple 3.2 Búsqueda Avanzada Capítulo IV. Marco aplicativo 57 TABLA 9. DESCRIPCIÓN DE CASO DE USO 4. EDITAR PERFIL Identificador y nombre 4. Editar perfil Actor(es) Usuario registrado Descripción Permite al actor agregar, modificar y eliminar toda su información registrada en la aplicación: datos generales, estudios realizados, cursos, idiomas, reconocimientos, experiencia laboral, productos de investigación, proyectos, participación en eventos Precondición El actor se encuentra autenticado en la aplicación Postcondición El actor gestionó su información y los cambios quedaron registrados en el sistema Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: 4.1 Agregar información 4.2 Modificar información 4.3 Eliminar información TABLA 10. DESCRIPCIÓN DE CASO DE USO 5. EXPORTAR HOJA DE PERFIL Identificador y nombre 5. Exportar hoja de perfil Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor exportar la hoja de perfil con toda la información de un usuario Precondición Ninguna Postcondición El actor exportó una hoja de perfil Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 5.1 Descargar hoja de perfil 5.2 Enviar hoja de perfil por correo electrónico Capítulo IV. Marco aplicativo 58 TABLA 11. DESCRIPCIÓN DE CASO USO 5.1 DESCARGAR HOJA DE PERFIL Identificador y nombre 5.1 Descargar hoja de perfil Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor descargar la hoja de perfil con toda la información de un usuario Precondición Ninguna Postcondición El actor descargó una hoja de perfil Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno TABLA 12. DESCRIPCIÓN DE CASO DE USO 6. ADMINISTRAR SISTEMA Identificador y nombre 6. Administrar sistema Actor(es) Administrador Descripción Permite al actor gestionar toda la información registrada en la aplicación Precondición El actor debe estar autenticado como administrador Postcondición Se registra la actualización hecha por el actor y se muestra un mensaje satisfactorio Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 6.1 Administrar usuarios 6.2 Administrar roles 6.3 Administrar tablas auxiliares Capítulo IV. Marco aplicativo 59 TABLA 13. DESCRIPCIÓN DE CASO DE USO 6.2 ADMINISTRAR ROLES Identificador y nombre 6.2 Administrar roles Actor(es) Administrador Descripción Permite al actor asignar roles a los usuarios registrados en el sistema Precondición El actor debe estar autenticado como administrador Postcondición Se realiza la asignación del rol al usuario y se muestra un mensaje satisfactorio Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno TABLA 14. DESCRIPCIÓN DE CASO DE USO 7. CONTACTAR AL ADMINISTRADOR Identificador y nombre 7. Contactar al administrador Actor(es) Visitante, Usuario registrado Descripción Permite al actor llenar un formulario para ponerse en contacto con el administrador del sistema para comunicar cualquier duda, inquietud o sugerencia con respecto a la aplicación Precondición Ninguna Postcondición Un correo electrónico fue enviado al administrador con el mensaje ingresado por el actor Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno Capítulo IV. Marco aplicativo 60 4.6 Principales interfaces de la aplicación La aplicación cuenta con un total de 37 interfaces, a continuación se describen las más relevantes. Página principal: Los usuarios pueden utilizar el buscador principal (ver figura 33) que realiza sugerencias de búsqueda a medida que el usuario va escribiendo, además pueden ver los perfiles más visitados (ver figura 34) y una breve reseña sobre la Facultad de Ciencias y las funcionalidades de la aplicación. Adicionalmente, mediante la barra de navegación, el usuario podrá acceder a las diferentes secciones del sistema, y el contenido de esta variará dependiendo del tipo de usuario. FIGURA 33. INTERFAZ DE LA PÁGINA PRINCIPAL Capítulo IV. Marco aplicativo 61 FIGURA 34. INTERFAZ DE LA PÁGINA PRINCIPAL 2 Resultado de búsqueda: Los usuarios pueden visualizar los resultados de búsqueda, acceder a uno de los perfiles reflejados y realizar otra búsqueda utilizando el buscador superior como puede observarse en la figura 35. FIGURA 35. INTERFAZ DE RESULTADO DE BÚSQUEDA Capítulo IV. Marco aplicativo 62 Perfil de usuario: En la interfaz de perfil (ver Figura 36), se puede observar toda la información de un usuario, su imagen y los perfiles similares. Además, se puede descargar la hoja de perfil o enviarla por correo electrónico utilizando los botones de enviar o descargar. FIGURA 36. INTERFAZ DE PERFIL DE USUARIO Búsqueda avanzada: Los usuarios pueden realizar búsquedas complejas ingresando uno o más criterios en el formulario que podemos observar en la figura 37. FIGURA 37. INTERFAZ DE BÚSQUEDA AVANZADA Capítulo IV. Marco aplicativo 63 Contacto: Los usuarios pueden contactar al administrador rellenando un formulario (ver Figura 38) con los campos nombre, correo electrónico y mensaje, y haciendo clic en enviar. FIGURA 38. INTERFAZ DE CONTACTO Capítulo IV. Marco aplicativo 64 Editar perfil: Mediante esta interfaz los usuarios pueden gestionar toda la información de su perfil: datos básicos, estudios, cursos, experiencias laborales, reconocimientos, eventos, idiomas, proyectos y productos de investigación. FIGURA 39. INTERFAZ DE EDITAR PERFIL Agregar elemento: Las interfaces para agregar algun elemento al perfil consisten en un formulario (ver Figura 40) cuyos campos varian según el elemento (estudio, curso, experiencia laboral, reconocimiento, evento, idioma, proyecto o producto) y un botón de agregar. FIGURA 40. INTERFAZ DE AGREGAR ESTUDIO Capítulo IV. Marco aplicativo 65 Administrar tablas auxiliares: Mediante esta interfaz (ver Figura 41), el administrador puede gestionar todas las tablas auxiliares que existen en la base de datos. FIGURA 41. INTERFAZ DE ADMINISTRACIÓN DE TABLAS AUXILIARES Inicio de sesión: Los usuarios registrados pueden acceder al sistema ingresando sus credenciales en el formulario que vemos en la Figura 42, pueden restablecer su contraseña haciendo clic en la opción de: ¿olvidó su contraseña? y los visitantes pueden realizar el registro en el sistema seleccionando la opción registrarse. Capítulo IV. Marco aplicativo 66 FIGURA 42. INTERFAZ DE INICIO DE SESIÓN Administrar usuarios: Esta interfaz contiene una tabla donde se listan todos los usuarios registrados en el sistema que podemos observar en la figura 43, en esta, el administrador puede buscar, ver, editar o eliminar la información de un usuario, además haciendo clic en el botón “registrar usuario” puede acceder al formulario de registro en la aplicación. FIGURA 43. INTERFAZ DE ADMINISTRACIÓN DE USUARIOS Capítulo IV. Marco aplicativo 67 Asignar Rol: Esta interfaz permite al administrador asignar un rol (‘Usuario registrado’, ’Administrador’) a cualquier usuario registrado en el sistema. FIGURA 44. INTERFAZ DE ASIGNAR ROL 4.7 Modelo Entidad – Relación Se utilizó la arquitectura del sistema anterior SIGIC desarrollado por la licenciada Viviana Pérez como punto de partida para la construcción de la base de datos de la aplicación. Posteriormente se fueron realizando adecuaciones de acuerdo a las necesidades y requerimientos del sistema, como por ejemplo, la adición del campo nro_visitas a la tabla usuario para llevar un registro de las visitas a cada perfil y la creación de la tabla búsqueda para llevar un recuento del número de búsquedas realizadas en la aplicación. Finalmente se realizó una precarga de datos a las siguientes tablas de la base de datos que podemos observar en la tabla 15, tomando la información ya almacenada en la base de datos de SIGIC: TABLA 15 PRECARGA DE INFORMACIÓN EN LA BASE DE DATOS Nombre de la tabla Cantidad de registros Nombre de la tabla Cantidad de registros usuario 820 tipo_participacion_proyecto 7 país 246 tipo_producto 7 disciplina 218 escalafon 7 dependencia 84 condicion_laboral 5 idioma 76 dedicacion 4 grado_academico 15 tipo_ambito_geografico 4 facultad 11 tipo_autor 4 tipo_evento 8 tipo_participacion_evento 4 Capítulo IV. Marco aplicativo 68 El modelo entidad-relación final de la base de datos de la aplicación se puede observar en la figura 45. FIGURA 45. MODELO ENTIDAD-RELACIÓN DE LA APLICACIÓN Capítulo IV. Marco aplicativo 69 4.8 Pruebas y resultados Las pruebas de software consisten en la dinámica de la verificación del comportamiento de un programa en un conjunto finito de casos de prueba, son una serie de actividades que se realizan con el propósito de encontrar los posibles fallos de implementación, calidad o usabilidad de un programa u ordenador, probando el comportamiento del mismo. Durante todo el desarrollo del Trabajo Especial de Grado se realizaron pruebas para verificar el correcto funcionamiento de la aplicación, y gracias a estas se hicieron correcciones que permitieron mejorar la calidad del sistema. 4.8.1 Pruebas de funcionalidad Se realizaron pruebas para verificar el comportamiento de todas las funcionalidades de la aplicación y las más destacadas quedaron registradas en las tablas a continuación: TABLA 16. INICIO DE SESIÓN Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: credenciales incorrectas Entrada: credenciales validas Resultado esperado: se muestra un mensaje de error notificándole al usuario que los campos correo y contraseña son requeridos. Resultado esperado: se muestra un mensaje de error notificándole al usuario que sus credenciales son incorrectas Resultado esperado: se redirige a la página principal y se le indica al usuario que la autenticación fue exitosa Resultado obtenido: se muestra un mensaje de error notificándole al usuario que los campos son requeridos. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que sus credenciales son incorrectas Resultado obtenido: se redirige a la página principal y se le indica al usuario que la autenticación fue exitosa Capítulo IV. Marco aplicativo 70 TABLA 17. RESTABLECER CONTRASEÑA Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: correo no registrado en el sistema Entrada: correo registrado en el sistema Resultado esperado: se muestra un mensaje de error notificándole al usuario que el correo institucional es requerido. Resultado esperado: se muestra un mensaje de error notificándole al correo ingresado no se encuentra registrado en el sistema. Resultado esperado: se envía el correo con la contraseña de recuperación y se notifica al usuario que revise su bandeja de entrada. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que el correo institucional es requerido. Resultado obtenido: se muestra un mensaje de error notificándole al correo ingresado no se encuentra registrado en el sistema. Resultado obtenido: se envía el correo con la contraseña de recuperación y se notifica al usuario que revise su bandeja de entrada. TABLA 18. CAMBIO DE CONTRASEÑA Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: contraseña actual incorrecta Entrada: contraseña actual correcta Resultado esperado: se muestra un mensaje de error notificándole al usuario que los campos de contraseña actual y nueva contraseña con requeridos. Resultado esperado: se muestra un mensaje de error notificando al usuario que la contraseña actual ingresada es incorrecta. Resultado esperado: la contraseña es actualizada y se envía una notificación al usuario. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que los campos de contraseña actual y nueva contraseña con requeridos. Resultado obtenido: se muestra un mensaje de error notificando al usuario que la contraseña actual ingresada es incorrecta. Resultado obtenido: la contraseña es actualizada y se envía una notificación al usuario. Capítulo IV. Marco aplicativo 71 TABLA 19. REALIZAR REGISTRO Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: correo no institucional de la Facultad de Ciencias Entrada: datos correctos Resultado esperado: se muestra un mensaje de error notificándole al usuario los campos obligatorios. Resultado esperado: se muestra un mensaje de error notificando al usuario que debe realizar el registro con un correo institucional de la Facultad de Ciencias Resultado esperado: el registro es realizado exitosamente y se envía una notificación al usuario. Resultado obtenido: se muestra un mensaje de error notificándole al usuario los campos obligatorios. Resultado obtenido: se muestra un mensaje de error notificando al usuario que debe realizar el registro con un correo institucional de la Facultad de Ciencias Resultado obtenido: el registro es realizado exitosamente y se envía una notificación al usuario. 4.8.2 Pruebas de aceptación En la ejecución de las pruebas de aceptación participaron un total de 8 personas con los siguientes perfiles:  4 profesionales en el área de informática con amplios conocimientos en desarrollo de software.  2 estudiantes de la Escuela de Computación de la Universidad Central de Venezuela.  2 profesionales en otras áreas pero usuarios frecuentes del Internet y las redes sociales. Se les describió a los participantes los objetivos del Trabajo Especial de Grado y los requerimientos funcionales del sistema, posteriormente, se les solicitó que realizaran las siguientes acciones en la aplicación sin recibir ningún tipo de instrucción previa:  Búsqueda simple  Búsqueda avanzada  Visitar perfil  Descargar hoja de perfil  Registro en la aplicación (se deshabilitó temporalmente la restricción de registro solo con un correo institucional de la Facultad de Ciencias). Capítulo IV. Marco aplicativo 72  Inicio de sesión  Cambio de clave  Restablecimiento de contraseña  Enviar hoja de perfil por correo electrónico  Contactar al administrador  Agregar una experiencia laboral  Editar una experiencia laboral  Agregar un estudio  Eliminar un estudio  Cerrar sesión Al finalizar, se entrevistó a cada participante realizando las siguientes preguntas:  ¿Tuvo alguna dificultad para completar algunas de las acciones?  ¿Considera que los tiempos de respuesta de la aplicación fueron apropiados?  ¿Definiría su experiencia como positiva?  ¿Cuál es su opinión sobre el diseño de las interfaces?  ¿Considera que la aplicación es fácil de navegar?  ¿Considera que existen elementos en la navegación acerca de donde está y como volver atrás?  ¿Tiene alguna observación o sugerencia que permita mejorar la calidad del sistema?  ¿Considera que la aplicación cumple los objetivos planteados en el Trabajo Especial de Grado? Resultados En general, la experiencia de los participantes al utilizar la aplicación fue satisfactoria y positiva, consideraron que el diseño de las interfaces es intuitivo, agradable y moderno, que la aplicación es fácil de usar, con tiempo de respuestas adecuados y que se cumplen los objetivos propuesto en el Trabajo Especial de Grado. Sin embargo, tuvieron algunas observaciones que fueron recopiladas a continuación: Capítulo IV. Marco aplicativo 73 TABLA 20. OBSERVACIONES DE LOS PARTICIPANTES Número de participantes que hicieron la observación Observación 3 Dificultad para navegar a secciones anteriormente visitadas. 2 Tamaño de letra del documento exportado muy grande. 4 Formato de notificación al usuario no agradable. 1 El autocompletado del buscador principal retorna valores duplicados. 1 Dificultad para realizar una búsqueda avanzada Mejoras aplicadas En base a las observaciones realizadas por los participantes, se realizaron las siguientes mejoras al sistema: Para mejorar la navegabilidad, se agregaron enlaces a las diferentes secciones de la aplicación en la barra de navegación que se encuentra disponible en la parte superior de todas las interfaces (ver Figuras 46, 47 y 48). FIGURA 46 BARRA DE NAVEGACIÓN DE SIGBIC FIGURA 47. OPCIONES DE NAVEGACIÓN PARA EL ADMINISTRADOR Capítulo IV. Marco aplicativo 74 FIGURA 48. OPCIONES DE NAVEGACIÓN PARA EL USUARIO REGISTRADO Se modificó la forma de notificar al usuario el resultado de una acción, que anteriormente se realizaba utilizando una alerta de Javacript. Se corrigió implementando un envío de mensajes más acorde al diseño de la aplicación que podemos observar en las figuras 49 y 50, con un mensaje más conciso al usuario y también se aprovechó el uso de colores para indicar si el resultado ha sido exitoso o fallido. FIGURA 49. NOTIFICACIÓN DE RESULTADO EXITOSO FIGURA 50. NOTIFICACIÓN DE RESULTADO FALLIDO Se ajustó el tamaño de la letra del documento exportado para facilitar la lectura del mismo, se agregaron ejemplos de búsqueda para los campos de la búsqueda avanzada y se especificó que puede ingresar solo uno o más parámetros orientando al usuario de su funcionamiento y finalmente, se modificó la consulta a la base de datos para eliminar los valores duplicados en la autocompletación. Adicionalmente, se siguieron las recomendaciones realizadas por la profesora Yusneyi en las reuniones de seguimiento, y se agregó un buscador en la interfaz de resultados de búsqueda para evitar que el usuario tenga que volver a la página anterior para realizar otra búsqueda, se mejoró la apariencia y utilidad de las hojas de perfil agregando un encabezado, número de página y fecha de exportación, además se permitió enviar la hoja de perfil hasta 5 direcciones de correo electrónico de manera simultánea y se implementó la notificación al usuario cuando intenta ingresar a una sección no autorizada. Capítulo IV. Marco aplicativo 75 4.8.3 Pruebas de rendimiento Las pruebas de rendimiento nos permiten medir la velocidad de ejecución de una tarea en un sistema con condiciones particulares. En las pruebas realizadas, se validó que los tiempos de respuesta de la aplicación cuando el usuario realiza una acción determinada como una búsqueda, carga de información, envío de una hoja de perfil por correo, entre otras cosas, fueran adecuados. Las pruebas más avanzadas se iban a realizar en ambiente de producción en un servidor de la Facultad de Ciencias pero no se pudo completar la instalación del mismo. 4.9 Mejoras incorporadas en esta aplicación TABLA 21 DIFERENCIAS SIGIC - SIGBIC Características SIGIC SIGBIC Modalidad de acceso Restringido, donde sólo las personas registradas pueden acceder a la aplicación y si desean registrarse deben solicitar autorización al administrador. Público, el visitante no necesita estar registrado para acceder a algunas de las funcionalidades del sistema, y el único requisito para que el usuario pueda registrarse es poseer un correo institucional de la Facultad de Ciencias. Diseño de las interfaces Diseño orientado a la gestión de información, donde la información del investigador se encuentra dividida en diferentes interfaces que son accedidas mediante la barra de navegación. Diseño similar a los portales de búsqueda de recursos, donde la información del investigador se encuentra centralizada en una sola interfaz. Tipos de usuario Investigador, administrador de dependencia, administrador global. Visitante, usuario registrado, administrador Roles Los usuarios registrados pueden tener uno o más roles: Investigador, administrador de dependencia, administrador global. Los usuarios registrados pueden tener un solo rol: usuario registrado o administrador Tecnologías utilizadas Ruby, HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap y PostgreSQL. HTML5, CSS3, Angular, Java, Hibernate, Spring, PostgreSQL. Capítulo IV. Marco aplicativo 76 Adicionalmente, SIGBIC brinda nuevas funcionalidades como: - Exportar un perfil mediante descarga o envío por correo electrónico - Sugerencias de perfiles similares en base a los perfiles visitados - Buscador principal de perfiles con autocompletación - Registro de los perfiles más visitados en la aplicación - Búsqueda avanzada de perfiles con uno o más parámetros de búsqueda - Herramienta para el respaldo de la base de datos por el usuario administrador - Posibilidad de filtrar en los resultados de búsqueda Conclusiones y recomendaciones 77 RESULTADOS Y CONCLUSIONES La existencia de una plataforma tecnológica donde se represente de manera sencilla, práctica y completa el conocimiento de una organización como la Facultad de Ciencias, facilitará la transferencia tecnológica a los sectores productivos y de innovación del país que buscan en la Universidad, un posible aliado para proyectos de investigación en diversas áreas, además, permitirá la elaboración de estudios que apoyen a la toma de decisiones y llevar un seguimiento de los recursos que existen actualmente en la Facultad. El estudio de antecedentes sobre aplicaciones relacionadas con la gestión de conocimiento, ayudó a determinar las características esenciales que poseen este tipo de aplicaciones, cómo realizan la recopilación y el almacenamiento de los datos, qué funcionalidades brindan a los usuarios, y cómo garantizan la accesibilidad y disponibilidad de esta información. Por otra parte, se pudo determinar la importancia y utilidad de las metodologías de desarrollo, seleccionando la que se consideró más adecuada al proyecto, la metodología Scrum, que gracias a su agilidad y flexibilidad posibilitó un desarrollo rápido y eficiente de la aplicación, además de facilitar el control de cada etapa del desarrollo permitiendo la organización y estructuración de las tareas a realizar. La selección de las tecnologías a utilizar para el desarrollo del Trabajo Especial de Grado fue acertada. Angular facilitó el desarrollo del lado del cliente, gracias a sus numerosas librerías, que ayudaron a darle estilo a las interfaces y a implementar diversas funcionalidades como la paginación a los resultados de búsqueda y el control de acceso a las diferentes secciones de la aplicación. Spring por su parte, permitió construir una arquitectura orientada a servicios en el lado del servidor, aprovechando el uso de sus componentes prefabricados y sus herramientas para implementar y exponer servicios Web. Finalmente, el uso de HQL, el lenguaje de consulta de Hibernate facilitó el acceso y búsqueda en la base de datos de la aplicación. En general se puede concluir que se lograron los objetivos propuestos en este Trabajo especial de Grado, y que además se logró la adquisición de nuevos conocimientos y experiencias en el proceso de desarrollo de software que proporcionaron crecimiento profesional. Para desarrollos futuros se recomienda:  Implementar el sistema en otras Facultades de la universidad.  Mayor personalización para los visitantes de la aplicación, recomendaciones en base a sus visitas realizadas, guardar el historial de búsqueda, entre otros.  Acceso al sistema desde el sitio web de la Facultad de Ciencias. . Referencias Bibliográficas y Digitales 78 REFERENCIAS BIBLIOGRÁFICAS Y DÍGITALES Academia.edu. (2018). Academia.edu - Share research. [En línea] Recuperado de: https://www.academia.edu/. Adobe Dreamweaver. (2015). Aspectos básicos de las aplicaciones Web. Recuperado de: https://helpx.adobe.com/es/dreamweaver/using/web-applications.html Alegsa, L. (2006). Diccionario de Informática y Tecnología: Definición de Servicio Web. Recuperado de http://www.alegsa.com.ar/Dic/servicio_web.php Avison D. E. y Fitzgerald G. (1995) Information Systems Development: Methodologies, Techniques, and Tools. McGraw-Hill Higher Education. Berni Millet, P. y Gil de la Iglesia, D. (2010) Laboratorio de PHP y MySQL. Eureca Media, SL. Recuperado de: https://openlibra.com/es/book/laboratorio-de-php-y-mysql Carvajal Riola, J. (2008). Metodologías Ágiles: Herramientas y modelo de desarrollo para aplicaciones Java EE como Metodología Empresarial. Universidad Politécnica de Cataluña. Recuperado de https://upcommons.upc.edu/bitstream/handle/2099.1/5608/50015.pdf?sequence=1 Carreño Villalba, R (2015). Aplicación de administración con Angular, Node y Express para una aplicación Django. Universidad de Málaga. Recuperado de https://riuma.uma.es/xmlui/bitstream/handle/10630/11484/Carre%C3%B1o%20Villal ba_TFG.pdf?sequence=1&isAllowed=y Castillo Estrada, C. Cancino Villatoro, K y Álvarez Oval, L (2015). Desarrollo eficiente de aplicaciones empresariales Usando el framework hibernate. Universidad Autónoma de Chiapas, México. Recuperado de https://dialnet.unirioja.es/servlet/articulo?codigo=6041579 Chanchi, G. E., Campo, W. Y, Amaya, J. P. y Arciniegas, J. L. (2011) Esquema de servicios para Televisión Digital Interactiva, basados en el protocolo REST-JSON. Universidad de Cauca, Colombia. Recuperado de http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233- 240/11807 Collell Puig, Jordi (Sin fecha). CSS3 y JavaScript Avanzado. Universitat Oberta de Catalunya, Cataluña, España. Curto Díaz, J. (2011). Introducción al Business Intelligence. Barcelona: Editorial UOC. Recuperado de: https://es.scribd.com/document/256037880/Introduccion-Al- Business-Intelligence Enderica, D. y Pauzhe H. (2017). Desarrollo de una aplicación de Facturación Electrónica utilizando herramientas de Gestión e Integración en Entornos Java. Universidad del Azuay, Ecuador. Disponible en http://dspace.uazuay.edu.ec/handle/datos/6908 https://helpx.adobe.com/es/dreamweaver/using/web-applications.html https://helpx.adobe.com/es/dreamweaver/using/web-applications.html http://www.alegsa.com.ar/Dic/servicio_web.php https://upcommons.upc.edu/bitstream/handle/2099.1/5608/50015.pdf?sequence=1 http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233-240/11807 http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233-240/11807 http://dspace.uazuay.edu.ec/handle/datos/6908 Referencias Bibliográficas y Digitales 79 Escudero, F. (2017). Qué es LinkedIn, la red social ideal para profesionales. [Online] aboutespanol. Disponible en https://www.aboutespanol.com/que-es-linkedin-primeros- pasos-en-esta-red-social-2878929 Facultad de Ciencias-UCV. (2018). Facultad de Ciencias. [En línea] Recuperado de: http://www.ciens.ucv.ve/ciens/ Fernández Romero, Y. y Díaz González, Y. (2012). Patrón Modelo-Vista-Controlador. Revista Telem@tica. Vol. 11. Recuperado de http://revistatelematica.cujae.edu.cu/index.php/tele/article/view/15/10 Ferrer Martínez, J. (2014). Implantación de aplicaciones Web en entornos Internet, Intranet y Extranet. Ra-ma Editorial. Francia, J. (2017). ¿Qué es Scrum? [Entrada de blog]. Recuperado de https://www.scrum.org/resources/blog/que-es-scrum Galán, H. (2017). WildFly, el servidor de aplicaciones Java que multiplica su rendimiento en Cloud. [Online] Blog de arsys.es. Disponible en: https://www.arsys.es/blog/programacion/wildfly-cloud Gavilanes Blacio, J. L. (2016). Estudio Comparativo de la Productividad entre los Frameworks de Persistencia en Java Hibernate y MYBATIS, Aplicando al Sistema de Evaluación Docente del IPEC. Escuela Superior Politécnica de Chimborazo, Ecuador. Recuperado de http://dspace.espoch.edu.ec/handle/123456789/4730 Gil, L. (2018). Academia.edu: la red social para investigadores. [En línea] Social Media en Investigación - Un proyecto de Lydia Gil. Recuperado de: https://socialmediaeninvestigacion.com/academia-edu-red-social-investigadores Gimson, L. (2012). Metodologías ágiles y desarrollo basado en conocimiento. Universidad Nacional de la Plata, Buenos Aires, Argentina. Recuperado de http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf? sequence=1 Georgiadou E. (2003) Software Process And Product Improvement: A Historical Perspective. Cybernetics and Systems Analysis. Vol. 39, No. 1 Google Inc. (2017). Angular. Recuperado de https://angular.io/ Hergueta, R (2008). Desarrollo de una herramienta para el monitoreo de eventos y actividades de usuarios en aplicaciones Web. Universidad Central de Venezuela, Caracas, Venezuela. Recuperado de http://saber.ucv.ve/bitstream/123456789/7290/1/Tesis%20Ricardo%20Hergueta.pdf Indeed. (2018). Ofertas de trabajo, bolsa de trabajo | Indeed España. [En línea] Recuperado de: https://www.indeed.es/ Johnson, R., Hoeller, J., Arendsen, A., Risberg, T. y Sampaleanu, C. (2005). Professional Java Development with the Spring Framework. Wiley Publishing, Indianapolis. http://revistatelematica.cujae.edu.cu/index.php/tele/article/view/15/10 https://www.scrum.org/resources/blog/que-es-scrum http://dspace.espoch.edu.ec/handle/123456789/4730 http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf?sequence=1 http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf?sequence=1 http://saber.ucv.ve/bitstream/123456789/7290/1/Tesis%20Ricardo%20Hergueta.pdf Referencias Bibliográficas y Digitales 80 Korth, H. F., Silberschatz, A. y Sudarshan, F. S. (2002). Fundamentos de bases de datos, Editorial Mc Graw Hill. Recuperado de: https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de- datos-silberschatz-korth-sudarshan.pdf Letelier Torres, P. y Sánchez López, E. (2003). Metodologías Ágiles en el Desarrollo de Software. Grupo ISSI (Ingeniería del Software y Sistemas de Información). 10-11 Recuperado de http://issi.dsic.upv.es/archives/f-1069167248521/actas.pdf Linkedin. (2018). LinkedIn. [En línea] Recuperado de: https://www.linkedin.com Metodologías ágiles de desarrollo software (2015). En Wikiversidad. Recuperado de https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_sof tware Muñoz, J. (2017). Ventajas de las aplicaciones Web. Píxima Internet. Aplicaciones Web y móviles para PYMEs y profesionales. [En línea] Pixima.net Recuperado de: https://www.pixima.net/aplicaciones-web/ventajas-de-las-aplicaciones-web/ Narváez Coello, J (2014). Guía de las mejores prácticas administrativas, seguridad y alta disponibilidad, caso de estudio: PostgreSQL. Pontificia Universidad Católica del Ecuador. Recuperado de http://repositorio.puce.edu.ec/bitstream/handle/ 22000/6386/9.21.000676.pdf?sequence=4&isAllowed=y Olivares Carlos. (2012). GENCI–2 Gestor de Contenido Modular Para la Coordinación de Investigación De la Facultad de Ciencias de la UCV (tesis de pregrado). Escuela de Computación, Facultad de Ciencias de la Universidad Central de Venezuela, Caracas, Venezuela. Ospina Torres, M. (2009) Introducción al manejo de Base de Datos. Facultad de Ciencias, Universidad Central de Venezuela. Recuperado de: http://www.ciens.ucv.ve:8080/genasig/sites/bases-de- datos/archivos/GuiaTeoricaTema1BaseDatos.pdf Ospina Torres, M y Suárez Díaz, S. (2008). Diseño y Desarrollo de una nueva Aplicación Web para la Escuela de Computación de la Universidad Central de Venezuela con Tecnología Ruby On Rails. Universidad Central de Venezuela, Caracas, Venezuela. Recuperado de http://saber.ucv.ve/jspui/handle/123456789/7294 Pérez Mayra. (2017). Solución de Inteligencia de Negocios para el seguimiento de proyectos de investigación de la Facultad de Ciencias, UCV. Universidad Central de Venezuela, Caracas, Venezuela. Pérez Viviana. (2016). Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV. Universidad Central de Venezuela, Caracas, Venezuela. Pernía, F. y Ramírez E. (2015). Desarrollo de un nuevo sitio Web para la Escuela de Computación de la Universidad Central de Venezuela. Facultad de Ciencias, Universidad Central de Venezuela. Recuperado de: http://saber.ucv.ve/handle/123456789/13370 https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de-datos-silberschatz-korth-sudarshan.pdf https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de-datos-silberschatz-korth-sudarshan.pdf http://issi.dsic.upv.es/archives/f-1069167248521/actas.pdf https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_software https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_software https://www.pixima.net/aplicaciones-web/ventajas-de-las-aplicaciones-web/ Referencias Bibliográficas y Digitales 81 Schwaber, K y Beedle, M. (2002). Agile Software Development with Scrum. Upper Saddle River, Prentice Hall. Scrum.org. (2018). ¿Qué es Scrum?. [En línea] Recuperado de: https://www.scrum.org/resources/blog/que-es-scrum The PostgreSQL Global Development Group. (1996-2015). PostgreSQL. Recuperado de http://www.postgresql.org/about/ Wallas, C. (2008). Spring in Action. Manning Publications Co, Estados Unidos de América. Web.usf.edu. (2018). HTML Sample Code. [En línea] Recuperado de: http://web.usf.edu/blwarner/tips/HTMLTips/htmlsamples.htm Wiboo Media. (2017) ¿Qué son las Aplicaciones Web? Ventajas y Tipos de Desarrollo Web. [Online] Recuperado de: https://wiboomedia.com/que-son-las-aplicaciones-web- ventajas-y-tipos-de-desarrollo-web Wikipedia. (2018). Programación por capas. [En línea] Recuperado de: https://es.wikipedia.org/wiki/Programaci%C3%B3n_por_capas Wikipedia. (2018). Desarrollo en cascada. [En línea] Recuperado de: https://es.wikipedia.org/wiki/Desarrollo_en_cascada. W3schools. (2018). W3Schools Online Web Tutorials. [En línea] Recuperado de: https://www.w3schools.com/ https://wiboomedia.com/que-son-las-aplicaciones-web-ventajas-y-tipos-de-desarrollo-web https://wiboomedia.com/que-son-las-aplicaciones-web-ventajas-y-tipos-de-desarrollo-web Anexos 82 Anexos TABLA 22. SERVICIOS WEB PARA AGREGAR UN ELEMENTO Anexos 83 TABLA 23.SERVICIOS WEB PARA MODIFICAR UN ELEMENTO Anexos 84 TABLA 24. SERVICIOS WEB PARA LISTAR ELEMENTOS DE UN USUARIO Anexos 85 TABLA 25. SERVICIOS WEB PARA LA GESTIÓN DE TABLAS AUXILIARESUNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE ENSEÑANZA ASISTIDA POR COMPUTADOR - CENEAC Desarrollo de una aplicación Web para la búsqueda y gestión de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias, UCV Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela por la Br. Gisselle Primera Abreu (C.I. 24.219.362) Para optar al título de Licenciada en Computación Tutora: Profa. Yusneyi Y. Carballo Barrera Ciudad Universitaria de Caracas, 17 de octubre de 2018 Agradecimientos Agradecimientos Primeramente le doy gracias a Dios, por darme la oportunidad de estar rodeada de personas tan maravillosas, por haberme permitido llegar a donde estoy y por cuidar de mí. A mis padres, por todo su cariño y apoyo incondicional, gracias mamá por llevarme a la universidad todas las mañanas, gracias papá por siempre hacerme el desayuno y echarme la bendición, gracias a ambos por nunca dejar de creer en mí. A mis queridos amigos Abraham Palacios, Oscar Montilla y Ariam Salazar, por su valiosa amistad y por brindarme sus conocimientos y ayuda para la elaboración de este Trabajo Especial de Grado. A mi tutora, la profesora Yusneyi Carballo Barrera, por darme la oportunidad de ser su tesista, por su paciencia, por sus consejos y recomendaciones, y por motivarme a siempre dar más. Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Centro de Enseñanza Asistida por Computador - CENEAC Desarrollo de una aplicación Web para la búsqueda y gestión de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias, UCV Autor: Gisselle Primera Abreu C.I.: 24219362 Correo-e: gisselleprimera@gmail.com Tutora: Profa. Yusneyi Carballo Barrera Correo-e: Yusneyi.carballo@ciens.ucv.ve Fecha: 17 de octubre de 2018 RESUMEN Internet se ha convertido en una herramienta importante para la ubicación de talentos, esto queda evidenciado por la popularidad de los portales de empleo como Indeed, o de las redes sociales orientadas al campo laboral y a la investigación como Academia.edu y LinkedIn, entre otros. Estos sitios web facilitan la localización de recursos con un perfil determinado, mediante búsquedas inteligentes, recomendaciones, extracción de hojas de perfil en formato PDF, entre otras funcionalidades. Además, provee a sus usuarios la posibilidad de crear un perfil detallado en el que se encuentre representado su formación, experiencia, conocimientos, intereses y habilidades. Una aplicación con estas características brindaría a la Facultad de Ciencias, una herramienta de búsqueda e integración de los perfiles de sus recursos humanos en las diferentes áreas que componen este recinto universitario. Por tal motivo, el presente Trabajo Especial de Grado se enfoca en el desarrollo de una aplicación utilizando los marcos de trabajo (frameworks) Angular, Hibernate y Spring, que satisfaga una necesidad importante de recopilación y acceso a la red de perfiles y capacidades de la Facultad de Ciencias de la Universidad Central de Venezuela bajo los lineamientos de la metodología de desarrollo Scrum. Palabras Clave: competencias Facultad de Ciencias, capacidades I+D en la UCV, red de conocimiento Facultad de Ciencias. ÍNDICE DE CONTENIDO INTRODUCCIÓN ............................................................................................................................................ I CAPÍTULO I. PLANTEAMIENTO DEL PROBLEMA ............................................................................................ 1 1.1 Objetivos .............................................................................................................................................. 2 Objetivo General del Trabajo Especial de Grado .................................................................................................... 2 Objetivos específicos .............................................................................................................................................. 2 1.2 Justificación .......................................................................................................................................... 3 CAPÍTULO II. MARCO TEÓRICO ..................................................................................................................... 4 2.1 Antecedentes ....................................................................................................................................... 4 2.1.1 Sistema de Gestión de Información Científica (SIGIC) ................................................................................... 4 2.1.2 Academia.edu (https://www.academia.edu/) ............................................................................................... 8 2.1.3 LinkedIn (https://www.linkedin.com).......................................................................................................... 11 2.1.4 Indeed (https://www.indeed.com/) ............................................................................................................ 14 2.1.5 Cuadro comparativo LinkedIn, Indeed y Academia.edu .............................................................................. 18 2.2 Herramientas, lenguajes y ambientes para el desarrollo Web .......................................................... 20 2.2.1 Aplicación Web ............................................................................................................................................ 20 2.2.2 Arquitectura Cliente-Servidor ...................................................................................................................... 22 2.2.3 Patrón Modelo Vista Controlador ................................................................................................................ 23 2.5 Servicio Web ...................................................................................................................................... 23 2.6 Transferencia de Estado Representacional (REST) ............................................................................. 24 2.7 Tecnologías del Lado del Cliente ........................................................................................................ 24 2.7.1 Lenguaje de Marcas de Hipertexto (HTML) ................................................................................................. 24 2.7.2 Hojas de Estilo en Cascada (CSS) ................................................................................................................. 25 2.7.3 JavaScript ..................................................................................................................................................... 26 2.7.4 Angular ........................................................................................................................................................ 26 2.8 Tecnologías del Lado del Servidor ...................................................................................................... 27 2.8.1 WildFly ......................................................................................................................................................... 27 2.8.2 Spring ........................................................................................................................................................... 28 2.8.3 Hibernate ..................................................................................................................................................... 29 2.8.4 Sistema Manejador de Base de Datos ......................................................................................................... 31 2.8.5 PostgreSQL................................................................................................................................................... 32 CAPÍTULO III. MARCO METODOLÓGICO ..................................................................................................... 33 3.1 Metodología de desarrollo ................................................................................................................. 33 3.1.1 Metodología ágil .......................................................................................................................................... 34 3.2 Scrum ................................................................................................................................................. 35 3.2.1 Roles y responsabilidades ............................................................................................................................ 36 3.2.2 Prácticas....................................................................................................................................................... 37 3.3 Cuadro comparativo de Scrum con otras metodologías de desarrollo .............................................. 38 CAPÍTULO IV. MARCO APLICATIVO ............................................................................................................ 40 4.1 Perfiles de usuario .............................................................................................................................. 40 4.2 Requerimientos de la aplicación ........................................................................................................ 40 4.3 Arquitectura del sistema .................................................................................................................... 42 4.4 Aplicación de la metodología Scrum .................................................................................................. 42 4.4.1 Pila de producto (Product Backlog) y descripción de las iteraciones ........................................................... 43 4.5 Principales diagramas de secuencia y casos de uso ........................................................................... 47 4.6 Principales interfaces de la aplicación ............................................................................................... 60 4.7 Modelo Entidad – Relación ................................................................................................................ 67 4.8 Pruebas y resultados .......................................................................................................................... 69 4.8.1 Pruebas de funcionalidad ............................................................................................................................ 69 4.8.2 Pruebas de aceptación................................................................................................................................. 71 4.8.3 Pruebas de rendimiento .............................................................................................................................. 75 4.9 Mejoras incorporadas en esta aplicación .......................................................................................... 75 RESULTADOS Y CONCLUSIONES ................................................................................................................. 77 REFERENCIAS BIBLIOGRÁFICAS Y DÍGITALES .............................................................................................. 78 ANEXOS ..................................................................................................................................................... 82 ÍNDICE DE FIGURAS Figura 1. Organigrama Estructural de la Facultad de Ciencias .......................................................................... 1 Figura 2 Solicitud de Registro en SIGIC ............................................................................................................... 5 Figura 3 Modal para agregar una institución ..................................................................................................... 6 Figura 4 Interfaz con lista de experiencias laborales del investigador ............................................................... 7 Figura 5. Interfaz para visualizar una experiencia laboral en SIGIC ................................................................... 7 Figura 6 Interfaz con la lista de roles asignados a cada usuario ........................................................................ 8 Figura 7. Perfil del investigador en Academia.edu ............................................................................................. 9 Figura 8. Agregar detalles del documento en Academia.edu ........................................................................... 10 Figura 9. Resultado de búsqueda "estudio del comportamiento" en Academia.edu ....................................... 11 Figura 10. Cargar contenido multimedia en LinkedIn ....................................................................................... 12 Figura 11. Filtros de búsqueda gratuitos en LinkedIn ....................................................................................... 13 Figura 12. Resultado de búsqueda "java" en LinkedIn ..................................................................................... 14 Figura 13. Búsqueda avanzada en Indeed ........................................................................................................ 15 Figura 14. Ejemplo de recomendaciones en Indeed ......................................................................................... 15 Figura 15. Resultado de búsqueda de candidatos en Indeed ........................................................................... 16 Figura 16. Currículo en Indeed .......................................................................................................................... 17 Figura 17. Procesamiento de una página web dinámica .................................................................................. 21 Figura 18. Ejemplo de arquitectura cliente-servidor de tres capas .................................................................. 22 Figura 19. Ejemplo de código fuente HTML ...................................................................................................... 25 Figura 20. Ejemplo de código CSS incrustado en HTML .................................................................................... 26 Figura 21. Ciclo de Scrum de acuerdo a Ken Schwaber y Jeff Sutherland ......................................................... 36 Figura 22. Arquitectura general del sistema .................................................................................................... 42 Figura 23. RESPUESTA DE SERVICIO WEB LISTARIDIOMAS............................................................................... 45 Figura 24. Diagrama de secuencia - Iniciar sesión............................................................................................ 47 Figura 25. Diagrama de secuencia - Agregar ítem ........................................................................................... 48 Figura 26. Diagrama de secuencia - Eliminar ítem ........................................................................................... 49 Figura 27. Diagrama de secuencia - Modificar Ítem ........................................................................................ 50 Figura 28. Diagrama de secuencia - Asignar rol ............................................................................................... 51 Figura 29. Diagrama de secuencia - Búsqueda avanzada ................................................................................ 52 Figura 30 MODELO DE CASOS DE USO – NIVEL 0 ............................................................................................. 53 Figura 31 MODELO DE CASOS DE USO – NIVEL 1 ............................................................................................. 54 Figura 32. Modelo de casos de uso – nivel 2 .................................................................................................... 55 Figura 33. Interfaz de la página principal ......................................................................................................... 60 Figura 34. Interfaz de la página principal 2 ...................................................................................................... 61 Figura 35. Interfaz de resultado de búsqueda .................................................................................................. 61 Figura 36. Interfaz de perfil de usuario............................................................................................................. 62 Figura 37. Interfaz de búsqueda avanzada ...................................................................................................... 62 Figura 38. Interfaz de contacto ........................................................................................................................ 63 Figura 39. Interfaz de editar perfil .................................................................................................................... 64 Figura 40. Interfaz de agregar estudio ............................................................................................................. 64 Figura 41. Interfaz de administración de tablas auxiliares ............................................................................... 65 Figura 42. Interfaz de inicio de sesión .............................................................................................................. 66 Figura 43. Interfaz de administración de usuarios ........................................................................................... 66 Figura 44. Interfaz de asignar rol ..................................................................................................................... 67 Figura 45. Modelo entidad-relación de la aplicación ....................................................................................... 68 Figura 46 Barra de navegación de SIGBIC ........................................................................................................ 73 Figura 47. Opciones de navegación para el administrador .............................................................................. 73 Figura 48. Opciones de navegación para el usuario registrado ....................................................................... 74 Figura 49. Notificación de resultado exitoso .................................................................................................... 74 Figura 50. Notificación de resultado fallido ...................................................................................................... 74 ÍNDICE DE TABLAS Tabla 1 Comparativa de portales de empleo y de investigación ...................................................................... 19 Tabla 2 Comparativa de metodologías de desarrollo ....................................................................................... 38 Tabla 3 Pila del producto .................................................................................................................................. 43 Tabla 4 Servicios Web para el módulo de gestión ............................................................................................ 44 Tabla 5 Servicios para la gestión de usuarios ................................................................................................... 46 Tabla 6 Servicios para el módulo de autenticación .......................................................................................... 46 Tabla 7. Descripción de caso de uso 2. Iniciar sesión ........................................................................................ 56 Tabla 8. Descripción de caso de uso 3. Realizar búsqueda ............................................................................... 56 Tabla 9. Descripción de caso de uso 4. Editar perfil.......................................................................................... 57 Tabla 10. Descripción de caso de uso 5. Exportar hoja de perfil ...................................................................... 57 Tabla 11. Descripción de caso uso 5.1 Descargar hoja de perfil ....................................................................... 58 Tabla 12. Descripción de caso de uso 6. Administrar sistema .......................................................................... 58 Tabla 13. Descripción de caso de uso 6.2 Administrar roles ............................................................................. 59 Tabla 14. Descripción de caso de uso 7. Contactar al administrador ............................................................... 59 Tabla 15 Precarga de información en la base de datos .................................................................................... 67 Tabla 16. Inicio de sesión .................................................................................................................................. 69 Tabla 17. Restablecer contraseña .................................................................................................................... 70 Tabla 18. Cambio de contraseña ...................................................................................................................... 70 Tabla 19. Realizar registro ................................................................................................................................ 71 Tabla 20. Observaciones de los participantes .................................................................................................. 73 Tabla 21 Diferencias SIGIC - SIGBIC .................................................................................................................. 75 Tabla 22. Servicios Web para agregar un elemento ......................................................................................... 82 Tabla 23.Servicios Web para modificar un elemento ....................................................................................... 83 Tabla 24. Servicios Web para listar elementos de un usuario .......................................................................... 84 Tabla 25. Servicios Web para la gestión de tablas auxiliares ........................................................................... 85 Introducción i INTRODUCCIÓN La Facultad de Ciencias de la Universidad Central de Venezuela, fundada en 1958 tiene como misión impartir la enseñanza requerida para optar al título de Licenciado en las respectivas carreras de Biología, Computación, Física, Geoquímica, Matemática y Química, formando profesionales con un sólido nivel académico, además de promover actividades de investigación y extensión. La información que podemos encontrar en la actualidad de su comunidad en las distintas aplicaciones Web y bases de datos de la Facultad de Ciencias está dispersa, se encuentra desactualizada y en algunos casos es muy básica, no representando adecuadamente, las competencias, habilidades y capacidades de estos profesionales. Una gestión no adecuada de la información en una organización puede causar que aun cuando los datos estén disponibles, sea difícil acceder a ellos y su fiabilidad sea cuestionable, por lo que a menudo se omitan y no se empleen o se aprovechen correctamente. Las empresas y organizaciones en el país se encuentran en constante búsqueda de profesionales con ciertos conocimientos y aptitudes para que participen en sus proyectos, por tanto, una herramienta que pueda facilitar la consulta y la localización de un recurso dentro de la Facultad de Ciencias, apoyaría la generación de alianzas estratégicas que brinden beneficios a la comunidad y nuevas oportunidades de crecimiento. Hasta el año 2016, la Coordinación de Investigación de la Facultad de Ciencias estuvo recabando la información de sus investigadores en hojas de Excel y documentos de Word, un método que dificultaba la gestión y búsqueda de dicha información. Por ese motivo, la Lic. Viviana Pérez bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, desarrolló una aplicación Web que permite registrar y gestionar la información de los investigadores almacenándola en una base de datos centralizada y estandarizada. Sin embargo, esta aplicación no se encuentra diseñada para localizar fácilmente a sus investigadores por sus capacidades, experiencia, habilidades, entre otros criterios de búsqueda, ni para poder exportar esa información. Dadas estas consideraciones, se desea desarrollar una aplicación que amplíe las funcionalidades de la anterior, permitiendo integrar datos y generar perfiles de los docentes e investigadores de la Facultad de Ciencias en sus diferentes áreas de conocimiento. Se busca, que esta información sea estructurada y almacenada convenientemente para que personas u organizaciones que tengan una necesidad o requieran de un recurso, puedan consultarla y saber si esas competencias y capacidades se encuentran en la Facultad de Ciencias de la UCV. Para alcanzar los objetivos planteados, el siguiente documento se encuentra estructurado de la siguiente manera. Capítulo 1, “Planteamiento del problema”, en el que se describe el problema cuya solución se busca obtener, el alcance y los objetivos de este Trabajo Especial de Grado. Capítulo 2, “Marco Teórico”, en el que se describen los antecedentes, teorías, conceptos y procesos relacionados con el problema a resolver y con la solución planteada. Capítulo 3, “Marco Metodológico”, que describe las metodologías y lineamientos que van a ser considerados para el desarrollo de la solución. Capítulo 4, “Marco Aplicativo”, donde se describe el desarrollo de la aplicación, el uso de la metodología y las principales vistas y funcionalidades. Finalmente, se encuentran los resultados y reflexiones del Trabajo Especial de Grado, las referencias Bibliográficas y digitales, y los anexos. Capítulo I. Planteamiento del Problema 1 CAPÍTULO I. PLANTEAMIENTO DEL PROBLEMA La Facultad de Ciencias de la Universidad Central de Venezuela se encuentra integrada por seis Escuelas, donde se forman profesionales en las Licenciaturas de Biología, Computación, Física, Matemática, Química y Geoquímica. La facultad posee cinco coordinaciones: Coordinación Académica, Coordinación Administrativa, Coordinación de Extensión, Coordinación de Investigación, Coordinación de Postgrado, y cuatro institutos de investigación: Instituto de Biología Experimental, Instituto de Ciencias y Tecnología de Alimentos, Instituto de Ciencias de la Tierra e Instituto de Zoología y Ecología Tropical (ver Figura 1), además de diversas organizaciones y grupos de extensión que promueven las actividades sociales, deportivas y culturales, como Physis, Prociencias, Coral de la Facultad de Ciencias, BIOSUB, entre otros. FIGURA 1. ORGANIGRAMA ESTRUCTURAL DE LA FACULTAD DE CIENCIAS Fuente: (Facultad de Ciencias-UCV, 2018) En estas escuelas, coordinaciones e institutos, trabajan profesionales especialistas en diversas áreas con habilidades, conocimientos, competencias y destrezas. La Facultad de Ciencias cuenta con diversas aplicaciones Web, donde podemos encontrar información referente a la facultad, sus coordinaciones y dependencias, la normativa, el calendario académico, pero limitada información referente a sus docentes, investigadores y sus competencias. Capítulo I. Planteamiento del Problema 2 En 2016, fue desarrollada por la Lic. Viviana Pérez bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, el Sistema de Gestión de Información Científica (SIGIC), una aplicación Web que permite registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. SIGIC provee diversas funcionalidades tales como facilitar el registro y la gestión de la información de los investigadores de la Facultad de Ciencias, de manera rápida, fácil y sencilla, además de almacenar la información de los investigadores de la facultad en una base de datos centralizada y estandarizada. Sin embargo, SIGIC posee algunas limitaciones como:  Su acceso restringido, ya que sólo pueden acceder a la aplicación las personas que poseen un correo institucional de la Facultad y realicen actividades de investigación.  El diseño de sus interfaces no es el más adecuado para una aplicación orientada a la búsqueda de recursos, ya que la información se encuentra dispersa entre las diferentes secciones del perfil.  Las opciones de búsqueda que provee la aplicación son muy limitadas (búsqueda simple por documento de identidad, nombre del investigador o dependencia) y solo se encuentran habilitadas a los usuarios administradores.  Los investigadores solo pueden ver la información de su perfil.  La aplicación no permite descargar la información de uno o varios perfiles en formato DOC o PDF. El problema observado es que actualmente, no se cuenta con una aplicación Web de acceso público donde se encuentre recopilada y se pueda ubicar fácilmente la información referente a los conocimientos, la experiencia, capacidades, destrezas y habilidades de los docentes, investigadores y dependencias pertenecientes a la red de conocimiento de la Facultad de Ciencias. 1.1 Objetivos Objetivo General del Trabajo Especial de Grado Desarrollar una aplicación Web para la gestión y búsqueda de información de docentes, investigadores y dependencias de la red de conocimiento de la Facultad de Ciencias de la Universidad Central de Venezuela. Objetivos específicos 1. Definir los requerimientos y funcionalidades para el desarrollo de la aplicación de gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. 2. Construir la arquitectura de datos partiendo del análisis del modelo de datos del sistema SIGIC. 3. Implementar las funcionalidades requeridas mediante el uso de servicios Web. 4. Desarrollar las interfaces de usuario para la aplicación de gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. Capítulo I. Planteamiento del Problema 3 5. Realizar pruebas funcionales, de usabilidad y rendimiento para la comprobación del correcto funcionamiento de la aplicación para la gestión y búsqueda de información de docentes, investigadores y dependencias de la Facultad de Ciencias. 1.2 Justificación Se desea desarrollar una aplicación web que combine las fortalezas de SIGIC, con las principales funcionalidades encontradas en los portales de búsqueda de recursos como LinkedIn e Indeed y que permita dar respuestas concretas a algunas de las necesidades existentes de gestión y búsqueda de conocimiento. La existencia de una aplicación que cumpla con esas características proveerá a la facultad de una herramienta, donde dado un perfil de necesidades se pueda determinar los recursos humanos que potencialmente tienen las capacidades para resolverlas, proporcionando además una reseña u hoja de su perfil, ubicación y datos de contacto. Esta aplicación al ser de acceso público, brindará visibilidad a las competencias y experiencia del talento humano de la Facultad, facilitando alianzas estratégicas con organizaciones y entes internos y externos a la Universidad. Adicionalmente, brindará a las autoridades de la Facultad de Ciencias, una herramienta que permitirá el manejo inteligente de la información para la toma de decisiones gerenciales y administrativas, a través de búsquedas avanzadas en un repositorio de información automatizado. Capítulo II. Marco Teórico 4 CAPÍTULO II. MARCO TEÓRICO La finalidad de este capítulo es presentar las bases conceptuales y los antecedentes que sirven de fundamento para el desarrollo del Trabajo Especial de Grado. 2.1 Antecedentes A continuación, se presentan los casos de estudio que se consideraron más relevantes para la elaboración de este Trabajo de Especial de Grado, aplicaciones Web que permiten el almacenamiento de la información de profesionales con un perfil determinado, y la búsqueda de estos perfiles de manera fácil y rápida. 2.1.1 Sistema de Gestión de Información Científica (SIGIC) SIGIC es una aplicación Web desarrollada en 2016, por la Lic. Viviana Pérez en el marco de un Trabajo Especial de Grado de la Licenciatura en Computación, bajo la tutoría de las profesoras Concettina Di Vasta y Mercy Ospina, con el objetivo de permitir a los investigadores de la Facultad de Ciencias la facilidad de registrar su información (general, académica, laboral, proyectos, productos, etc.) de manera rápida, fácil y sencilla en una base de datos centralizada, y a la Coordinación de Investigación la manipulación y gestión de la información recopilada. (V. Pérez, 2016) La aplicación se encuentra desarrollada bajo el lenguaje de programación Ruby y el framework Rails. Para el diseño y construcción de las vistas de la aplicación se utilizó HTML5, CSS3, JavaScript, jQuery, Ajax y Bootstrap. Mientras que para la construcción y gestión de la base de datos que contiene la información de los investigadores, fue utilizado el Sistema Manejador de Base de Datos PostgreSQL. Carga de datos Para obtener la información de los investigadores, se realizó una migración de datos desde las hojas de cálculo (MS Excel) que utilizaba la Coordinación de Investigación, hasta la base de datos de la aplicación, mediante la herramienta Pentaho Data Integration Community Edition. Inicio de sesión Los investigadores deben iniciar sesión para poder acceder a las funcionalidades de la aplicación, mediante su correo institucional. Si no se encuentra registrado en el sistema porque su correo fue creado recientemente, puede solicitar acceso completando un formulario con sus datos básicos (ver Figura 2) y deberá esperar la confirmación por parte del usuario administrador de la aplicación. Capítulo II. Marco Teórico 5 FIGURA 2 SOLICITUD DE REGISTRO EN SIGIC Fuente: (Pérez, 2016) Ingreso y modificación de la Información del Investigador Después de acceder a la aplicación, los investigadores pueden ingresar, modificar y eliminar la información referente a su perfil. Esta información se encuentra estructurada en 7 módulos:  Datos Generales. Se encuentran los datos personales e institucionales del investigador.  Formación académica. Se encuentra la información relacionada con su formación académica: estudios y títulos obtenidos, cursos, idiomas y reconocimientos. Si en el sistema no se encuentra la institución correspondiente a su estudio o título, el investigador puede agregarla. (ver Figura 3)  Experiencia laboral. Se encuentra la información referente a su experiencia laboral, donde se puede agregar su trabajo actual y trabajos anteriores.  Productos de investigación. Se encuentra la información acerca de los productos de investigación realizados o en los que ha participado el investigador. Capítulo II. Marco Teórico 6  Proyectos de investigación. Se encuentra la información acerca de los proyectos de investigación realizados o en los que ha participado el investigador.  Formación de talentos. Se encuentra la información referente a las formaciones de talentos realizas por el investigador.  Participación en eventos. Se encuentra la información acerca de la participación del investigador en eventos realizados. FIGURA 3 MODAL PARA AGREGAR UNA INSTITUCIÓN Fuente: (Pérez, 2016) Visualización de la Información del Investigador Los investigadores solo pueden ver la información de su perfil. Por su parte, los administradores de dependencias pueden acceder a la información de los investigadores que se encuentren en su dependencia, y el administrador global, acceder a toda la información disponible en la aplicación. Los elementos que pueden repetirse como experiencias laborales, cursos, idiomas, entre otros, se encuentran listados en una tabla (ver Figura 4) con la opción de seleccionar algún elemento para verlo de manera detallada (ver Figura 5). Capítulo II. Marco Teórico 7 FIGURA 4 INTERFAZ CON LISTA DE EXPERIENCIAS LABORALES DEL INVESTIGADOR Fuente: (Pérez, 2016) FIGURA 5. INTERFAZ PARA VISUALIZAR UNA EXPERIENCIA LABORAL EN SIGIC Fuente: (Pérez, 2016) Usuarios administradores El usuario administrador global de la aplicación puede agregar, modificar, eliminar y visualizar usuarios de cualquier Dependencia (Escuela/Instituto), así como asignarles el rol de investigador, administrador de dependencia y/o administrador global (ver Figura 6). También puede gestionar la información de las tablas base de la aplicación. Capítulo II. Marco Teórico 8 Los usuarios administradores de dependencias pueden realizar todas las acciones mencionadas anteriormente pero limitando su alcance a los investigadores, instituciones, productos de investigación, entre otros, que se encuentren dentro de su dependencia. FIGURA 6 INTERFAZ CON LA LISTA DE ROLES ASIGNADOS A CADA USUARIO Fuente: (Pérez, 2016) SIGIC posee algunas limitaciones como lo es su acceso restringido, la ausencia de buscadores avanzados para filtrar la información, de un módulo de análisis de indicadores para la toma de decisiones y la imposibilidad de descargar la información en los formatos DOC y PDF. Actualmente, la aplicación se encuentra en un servidor del Centro de Computación, bajo la supervisión del profesor Pio Arias, Coordinador de Investigación de la Facultad de Ciencias. 2.1.2 Academia.edu (https://www.academia.edu/) Academia.edu es una red social gratuita que tiene como objetivo conectar científicos, ofrecerles una plataforma para compartir sus trabajos de investigación y facilitarles el seguimiento de los artículos que son relevantes para sus campos de estudio. Esta red social temática está formada por más de 18 millones de usuarios y cuenta con más de 5 millones de publicaciones científicas de todo el mundo. Academia.edu apuesta por el acceso abierto de la ciencia y pretende revolucionar el proceso editorial tradicional de la revisión por pares, por lo que permite publicar el texto completo de los libros, artículos, borradores y diversos materiales para acelerar la visibilidad de las investigaciones realizadas. (Gil, 2015) Características De acuerdo a Gil (2015), Academia.edu posee las siguientes características: Capítulo II. Marco Teórico 9  Los usuarios tienen seguidores y siguen a otros investigadores y temáticas de estudio.  Cada investigador cuenta con un perfil científico que muestra sus áreas de interés, sus publicaciones clasificadas en secciones (libros, artículos, conferencias, etc.), coautorías, datos de contacto, perfiles de otras redes sociales, seguidores, actividad en la red social y estadísticas (ver Figura 7).  Permite interactuar con otros investigadores mediante mensajes en la misma plataforma.  Gracias a su filosofía pro “ciencia abierta”, no ofrecen la opción de crear cuentas privadas.  El sistema realiza recomendaciones automáticas de artículos e investigadores, según tus intereses de investigación y personas a las que sigues. FIGURA 7. PERFIL DEL INVESTIGADOR EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) Cuando se agrega un documento al perfil del investigador en Academia.edu, se debe especificar el nombre, un resumen de la publicación, coautores si existen, área de investigación y un enlace al documento si no se encuentra adjunto (ver Figura 8). Capítulo II. Marco Teórico 10 FIGURA 8. AGREGAR DETALLES DEL DOCUMENTO EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) Academia.edu posee dos modalidades de búsqueda, la gratuita, que realiza la búsqueda sólo en los títulos de los documentos, y la avanzada, que permite buscar en el texto completo de las publicaciones. En ambas modalidades, puedes filtrar los resultados por documentos, personas, áreas de investigación, universidades, departamentos o cargos (ver Figura 9). Capítulo II. Marco Teórico 11 FIGURA 9. RESULTADO DE BÚSQUEDA "ESTUDIO DEL COMPORTAMIENTO" EN ACADEMIA.EDU Fuente: (Academia.edu, 2018) 2.1.3 LinkedIn (https://www.linkedin.com) LinkedIn es una red social que permite la creación de un perfil profesional e incluir, entre otros detalles, la experiencia laboral de quien lo ha creado. Contar con un perfil en LinkedIn permite establecer redes de contactos con otros profesionales, lo que entrega una ventaja considerable al momento de buscar un nuevo trabajo, establecer nuevas relaciones comerciales y formar parte de grupos de discusión dentro de esta red. (Escudero, 2017) Las empresas y profesionales de Recursos Humanos, también utilizan LinkedIn para encontrar y contactar a potenciales candidatos para llenar vacantes de empleo. Un perfil completo en LinkedIn permite a un usuario incluir su experiencia laboral, habilidades y especializaciones, entre otros detalles, lo que ayuda a una empresa al momento de elegir entre diversos candidatos. (Escudero, 2017) Tipos de cuentas LinkedIn permite la creación de cuentas gratuitas y de pago. Una cuenta gratuita permite según Escudero (2017), entre otras cosas:  Crear un perfil personal profesional.  Buscar trabajo en la bolsa de trabajo de LinkedIn.  Conectarse con otros profesionales que ya sean conocidos del usuario. Capítulo II. Marco Teórico 12  Añadir contenido multimedia a tu perfil como imágenes, videos y presentaciones. (ver Figura 10)  Enterarse de quiénes son los últimos usuarios que han visto el perfil personal propio y conocer sus datos básicos.  Ser parte de grupos de discusión, que permiten compartir información y enterarse de nuevas ofertas laborales.  Filtrar los resultados de búsqueda por grado de relación, palabras clave, ubicaciones, etc. (ver Figura 11) Una cuenta pagada permite acceder a beneficios tales como:  Acceder a más filtros al momento de buscar a otros profesionales.  Enviar solicitudes para conectarse a otros profesionales que no son contactos conocidos.  Conocer el listado completo de quienes han revisado el perfil personal propio y ver su información detallada. FIGURA 10. CARGAR CONTENIDO MULTIMEDIA EN LINKEDIN Fuente: (Linkedin, 2018) Capítulo II. Marco Teórico 13 FIGURA 11. FILTROS DE BÚSQUEDA GRATUITOS EN LINKEDIN Fuente: (Linkedin, 2018) Funcionalidades: Entre las funcionalidades de LinkedIn se encuentran (Wikipedia, 2017):  Los usuarios pueden subir su currículum vítae o diseñar su propio perfil con el fin de mostrar experiencias de trabajo y habilidades profesionales.  Los empleadores pueden enumerar puestos de trabajo y la búsqueda de posibles candidatos.  Los usuarios pueden realizar recomendaciones de puestos de trabajo y oportunidades de negocio a su red de contactos.  Los usuarios pueden subir sus propias fotos y ver las fotos de los demás para ayudar a identificarlo.  Los usuarios pueden realizar búsquedas utilizando palabras clave (ver Figura 12).  Los usuarios pueden seguir diferentes empresas y pueden recibir una notificación acerca de las posibles fusiones y ofertas disponibles.  Los usuarios pueden guardar trabajos que les gustaría solicitar. Capítulo II. Marco Teórico 14  Los usuarios pueden ver cuáles y cuantos usuarios han visto su perfil. FIGURA 12. RESULTADO DE BÚSQUEDA "JAVA" EN LINKEDIN Fuente: (Linkedin, 2018) 2.1.4 Indeed (https://www.indeed.com/) Indeed.com es un motor de búsqueda de empleo concebido en los Estados Unidos en noviembre del 2004. El sitio agrega publicaciones de empleo de miles de páginas web, incluyendo bolsas de empleo, empresas de reclutamiento y selección, asociaciones y páginas de empleo de empresas. Actualmente, Indeed se encuentra disponible en más de 50 países y en más de 28 idiomas. (Wikipedia, 2017) En el 2011, Indeed comenzó a permitir que los candidatos se postulen directamente a través de su sitio Web, al igual que publicar y almacenar su currículo. Los servicios de Indeed incluyen búsqueda de empleo, tendencias del mercado de empleo, almacenamiento y búsqueda de currículo, tendencias de industrias, búsqueda de salario, índices de competencia laboral y páginas de empresas. El portal te permite realizar búsquedas avanzadas, pudiendo especificar parámetros de búsqueda como la antigüedad de la publicación, filtrar por palabras exactas, o por alguna empresa específica, entre otras cosas (ver Figura 13). Capítulo II. Marco Teórico 15 FIGURA 13. BÚSQUEDA AVANZADA EN INDEED Fuente: (Indeed, 2018) El portal realiza recomendaciones a medida que se va escribiendo una palabra en el buscador (ver Figura 14). FIGURA 14. EJEMPLO DE RECOMENDACIONES EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 16 Al realizar una búsqueda de candidatos en Indeed, cuando se posiciona el puntero sobre uno de los resultados, se muestra una hoja de perfil resumida con la información más relevante del recurso (ver Figura 15), y al hacer clic, se permite acceder a su currículo completo, con la opción de guardarlo, enviarlo o descargarlo además de poder comunicarte con la persona vía email (ver Figura 16). FIGURA 15. RESULTADO DE BÚSQUEDA DE CANDIDATOS EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 17 FIGURA 16. CURRÍCULO EN INDEED Fuente: (Indeed, 2018) Capítulo II. Marco Teórico 18 2.1.5 Cuadro comparativo LinkedIn, Indeed y Academia.edu A continuación, se presenta en la tabla 1 una comparación entre tres portales web que las personas utilizan principalmente para darse a conocer en el ámbito laboral y de investigación, buscar ofertas laborales y establecer relaciones profesionales. Capítulo II. Marco Teórico 19 TABLA 1 COMPARATIVA DE PORTALES DE EMPLEO Y DE INVESTIGACIÓN LinkedIn Academia.edu Indeed Definición LinkedIn es una red social que permite la creación de un perfil profesional e incluir, entre otros detalles, la experiencia laboral de quien lo ha creado. Permite establecer redes de contactos con otros profesionales, lo que entrega una ventaja considerable al momento de buscar un nuevo trabajo. Academia.edu es una red social gratuita que tiene como objetivo conectar científicos, ofrecerles una plataforma para compartir sus trabajos de investigación y facilitarles el seguimiento de los artículos que son relevantes para sus campos de estudio. Indeed.com es un motor de búsqueda de empleo concebido en los Estados Unidos en noviembre del 2004. El sitio agrega publicaciones de empleo de miles de páginas web, incluyendo bolsas de empleo, empresas de reclutamiento y selección, asociaciones y páginas de empleo de empresas. Principales Funcionalidades - Los usuarios pueden subir su currículum vítae o diseñar su propio perfil - Los empleadores pueden enumerar puestos de trabajo - Los usuarios pueden guardar trabajos que les gustaría solicitar - Los usuarios pueden realizar recomendaciones a su red de contactos - Los empleadores pueden realizar búsquedas de posibles candidatos - Ver estadísticas sobre las visitas a tu perfil - Cada investigador cuenta con un perfil científico que muestra sus áreas de interés, sus publicaciones clasificadas en secciones, datos de contacto, entre otras cosas - Subir y compartir documentos en diferentes formatos - El sistema realiza recomendaciones de artículos e investigaciones según tus intereses de investigación y personas a las que sigues - Permite interactuar con otros investigadores mediante mensajes en la misma plataforma - Generar alertas de empleo, donde los usuarios reciben las ofertas de interés en su dirección de correo electrónico - La aplicación móvil posibilita encontrar vacantes cerca de tu ubicación utilizando el GPS del teléfono - Los usuarios pueden generar su CV Indeed para solicitar empleo - Los usuarios pueden guardar ofertas de empleo de su interés - Las empresas pueden publicar ofertas de trabajo Usuarios a los que está dirigido Empresas y profesionales que buscan promocionarse, establecer relaciones laborales y de negocios. Científicos que deseen compartir sus trabajos de investigación y darle seguimiento a los artículos de sus áreas de estudio Personas que se encuentran en búsqueda de empleo y empresas que deseen publicar una vacante laboral disponible Ventajas - Facilita la comunicación directa con grandes empresas -Brinda visibilidad - Crecimiento de tu red de contactos en el campo laboral - Permite la participación en foros y grupos con profesionales afines. - Ayuda a mejorar la visibilidad de los trabajos de los investigadores - Permite marcar los documentos de interés para leerlos más tarde - Los perfiles de usuario y documentos son indexados a los principales motores de búsqueda - Bolsa de trabajo a nivel mundial - Fácil de usar - La búsqueda avanzada te permite combinar varios parámetros de búsqueda. - Al ser un motor de búsqueda, reduce la necesidad de buscar en cada portal de empleo de manera independiente. - Se encuentra disponible en más de 50 países y 28 idiomas Limitaciones - Los datos personales de tu perfil pueden ser vistos por cualquier usuario registrado en la aplicación - Solo se encuentra disponible en inglés - Algunas de las funcionalidades más avanzadas no se encuentran disponibles en la modalidad gratuita Fuentes: Elaborada a partir de (Gil, 2018) y (Escudero, 2017) Capítulo II. Marco Teórico 20 Para el desarrollo de la aplicación fueron considerados los siguientes elementos y funcionalidades observados en el sistema anterior SIGIC desarrollado por la licenciada Viviana Pérez:  El manejo de toda la información del sistema y la asignación de roles por parte del usuario administrador.  La posibilidad de contactar al administrador del sistema mediante un formulario en la aplicación.  La posibilidad de restablecer la contraseña en caso de olvido.  Para la construcción de la base de datos, se utilizó como punto de partida la base de datos de SIGIC, y fue reutilizada la información cargada por Viviana en 18 de las tablas. Adicionalmente, la aplicación cuenta con nuevas funcionalidades que fueron tomadas del estudio de los antecedentes descritos anteriormente:  Todos los antecedentes ofrecen dos modalidades de búsqueda en su aplicación: búsqueda simple y búsqueda avanzada.  También, permiten al usuario registrarse en la aplicación y crearse un perfil laboral donde pueden agregar su información personal dividida en diferentes categorías como experiencia laboral, estudios, conocimientos, entre otros.  De la red social LinkedIn se tomó las sugerencias de búsqueda a medida que el usuario va escribiendo en el buscador.  La interfaces de perfil del usuario y resultado de búsqueda de la aplicación poseen un diseño similar al observado en LinkedIn.  Del portal de búsqueda de empleo Indeed se tomó la exportación de un perfil mediante la descarga del mismo o envío por correo electrónico.  También de Indeed se tomó, que los usuarios visitantes pueden realizar búsquedas sin estar registrados en la aplicación.  Finalmente, de la red social académica Academia.edu se tomaron las recomendaciones en base a los perfiles visitados y mostrar al usuario los perfiles con más visitas en la aplicación. 2.2 Herramientas, lenguajes y ambientes para el desarrollo Web 2.2.1 Aplicación Web Una aplicación Web, es un sitio Web, que contiene páginas con contenido sin determinar, parcialmente o en su totalidad. El contenido final de una página se determina sólo cuando el usuario solicita una página del servidor Web, a través de Internet o de una Intranet mediante un navegador Web. Dado que el contenido final de la página varía de una petición a otra en función de las acciones del visitante, este tipo de página se denomina página dinámica. (Adobe Dreamweaver, 2015). En la Figura 17, podemos observar el procesamiento de una página Web dinámica, donde el navegador realiza una solicitud al servidor Web, y el servidor de aplicaciones Capítulo II. Marco Teórico 21 se encarga de procesarla, generando y enviando la página resultante al navegador solicitante. FIGURA 17. PROCESAMIENTO DE UNA PÁGINA WEB DINÁMICA Fuente: (Adobe Dreamweaver, 2015) De acuerdo a los aportes de Wiboo Media (2017) y Muñoz (2017) entre las ventajas más importantes del uso de aplicaciones Web se encuentran:  Ahorro de tiempo: Las aplicaciones Web son sencillas de gestionar, por lo que permiten realizar tareas de forma fácil sin necesidad de descargar o instalar ningún programa o plugin adicional.  Ahorro de recursos en equipos y dispositivos: Las aplicaciones Web, generalmente tienen un bajo consumo de recursos dado que toda o gran parte de la aplicación se encuentra en un servidor Web y no en nuestro ordenador.  Escalables y de rápida actualización: Existe sólo una versión de la aplicación Web en el servidor, por lo que no hay que distribuirla entre los demás ordenadores. El proceso de actualización es rápido y limpio. Las aplicaciones basadas en Web no requieren que el usuario se preocupe por obtener la última versión ni interfieren en su trabajo diario para descargar, instalar y configurar últimas versiones.  Recuperación de datos: Una de las mayores ventajas de las aplicaciones Web es que, en la mayoría de ocasiones el usuario puede recuperar su información desde cualquier dispositivo y lugar con su nombre de usuario y contraseña. Capítulo II. Marco Teórico 22  Menos propensas a errores y problemas: Las aplicaciones Web son menos propensas a tener problemas técnicos debido a conflictos con hardware, con otras aplicaciones existentes, protocolos o con software personal interno. Todos los usuarios utilizan la misma versión de la aplicación Web y los posibles fallos pueden ser corregidos tan pronto son descubiertos. 2.2.2 Arquitectura Cliente-Servidor La arquitectura cliente-servidor es un modelo de aplicación distribuida en el que las tareas se reparten entre los proveedores de recursos o servicios, llamados servidores, y los demandantes, llamados clientes. Un cliente realiza peticiones a otro programa, el servidor, que le da respuesta. Esta idea también se puede aplicar a programas que se ejecutan sobre una sola computadora, aunque es más ventajosa en un sistema operativo multiusuario distribuido a través de una red de computadoras. (Ferrer Martínez, 2014) Una disposición muy común de la arquitectura cliente-servidor son los sistemas multicapa, en los que el servidor se descompone en diferentes programas que pueden ser ejecutados por diferentes computadoras aumentando así el grado de distribución del sistema. (Ferrer Martínez, 2014) La arquitectura Cliente-Servidor de tres capas (ver Figura 18), una de las más utilizadas actualmente, se constituye de un código de presentación, uno de procesamiento de datos y uno de almacenamiento. Según Hergueta (2008), esta arquitectura se basa en el paradigma de ubicar el código de presentación, de procesamiento y de almacenamiento en servidores diferentes con el fin de separar en módulos el trabajo. En términos generales, la capa de presentación proporciona la interfaz necesaria para presentar información y reunir datos. La capa de procesamiento responde a peticiones del usuario para ejecutar una tarea en específico, interactuando con los datos que están almacenados. La capa de almacenamiento representa las fuentes de datos finales y está formada por uno o más gestores de bases de datos que realizan todo el almacenamiento y reciben solicitudes de recuperación de información desde la capa de negocio. FIGURA 18. EJEMPLO DE ARQUITECTURA CLIENTE-SERVIDOR DE TRES CAPAS FUENTE: (WIKIPEDIA, 2018) Capítulo II. Marco Teórico 23 2.2.3 Patrón Modelo Vista Controlador El Modelo Vista Controlador (MVC), es un patrón de diseño muy utilizado para el desarrollo de aplicaciones Web, el cual tiene como idea fundamental separar los componentes principales de las aplicaciones, como lo son el sistema de gestión de base de datos, las interfaces de usuario y las tareas de manejar los eventos que se produzcan. (Olivares Carlos, 2012) De acuerdo a Fernández Romero y Díaz González (2012) las partes del patrón MVC pueden definirse de la siguiente manera:  El Modelo es el objeto que representa los datos del programa. Maneja los datos y controla todas sus transformaciones. El Modelo no tiene conocimiento específico de los Controladores o de las Vistas, ni siquiera contiene referencias a ellos. Es el propio sistema el que tiene encomendada la responsabilidad de mantener enlaces entre el Modelo y sus Vistas, y notificar a las Vistas cuando cambia el Modelo.  La Vista es el objeto que maneja la presentación visual de los datos representados por el Modelo. Genera una representación visual del Modelo y muestra los datos al usuario. Interactúa preferentemente con el Controlador, pero es posible que trate directamente con el Modelo a través de una referencia al propio Modelo.  El Controlador es el objeto que proporciona significado a las órdenes del usuario, actuando sobre los datos representados por el Modelo, centra toda la interacción entre la Vista y el Modelo. Cuando se realiza algún cambio, entra en acción, bien sea por cambios en la información del Modelo o por alteraciones de la Vista. Interactúa con el Modelo a través de una referencia al propio Modelo. 2.5 Servicio Web Alegsa (2016) indica que la W3C define "Servicio Web" como un sistema de software diseñado para permitir interoperabilidad máquina a máquina en una red. En general, suelen ser API’s1 Web que pueden ser accedidas en una red, como Internet, y son ejecutadas en un sistema de alojamiento remoto. Los servicios Web permiten la comunicación entre diferentes máquinas, con diferentes plataformas y entre programas distintos. Esta comunicación se logra a través de la adopción de diversos estándares abiertos. Los protocolos más comunes a la hora de implementar servicios Web son el protocolo SOAP y REST. El primero hace referencia al protocolo usado para la comunicación entre cliente y servidor donde se intercambian mensajes basados en XML (WSDL), mientras que en el segundo caso los mensajes son por lo general en formato JSON. En ambos casos tanto el cliente como el servidor deben conocer el formato y lenguaje de los mensajes para poder encapsular y desencapsular peticiones y respuestas. (Amaya, Arciniegas, Campo y Chanchi, 2011). 1 API: Interfaz de programación de aplicaciones, abreviación del inglés: Application Programming Interface. (Wikipedia, 2017). Capítulo II. Marco Teórico 24 2.6 Transferencia de Estado Representacional (REST) De acuerdo a Amaya et al (2011), el protocolo REST (Representational State Transfer), plantea un estilo de arquitectura cliente-servidor en la cual un servicio es visto como un recurso y es identificado a través de una dirección URL, mediante la cual puede ser accedido o consumido. Para acceder a estos servicios Web, se hace uso de mensajes en formato simple, los cuales se intercambian entre el cliente y el servidor. REST define a partir de HTTP cuatro métodos: GET, PUT, DELETE y POST. Para la comunicación e intercambio de información entre cliente y servidor a través de REST, se puede hacer uso de diversos formatos y lenguajes: XML, HTML, JSON; aunque debido a la sencillez de los mensajes JSON, este es el tipo de mensajes más difundido en diferentes servicios propios de redes sociales como Facebook y Twitter, y comunidades en Internet. Cada mensaje intercambiado contiene la información necesaria para el funcionamiento adecuado del servicio, de tal forma que para cada servicio el cliente y servidor conocen el formato o protocolo interno de los mensajes. 2.7 Tecnologías del Lado del Cliente 2.7.1 Lenguaje de Marcas de Hipertexto (HTML) HTML, acrónimo en inglés de Hyper Text Markup Language, es un lenguaje de marcas diseñado para estructurar textos y presentarlos en forma de hipertexto, es decir, texto presentado de forma estructurada y agradable, con enlaces (hyperlinks) que conducen a otros documentos o fuentes de información relacionadas, y con inserciones multimedia, este es el formato estándar de las páginas Web. (Ospina y Suárez, 2008) HTML describe el aspecto visual que debe tener una página mediante la utilización de etiquetas determinado el contenido de esta más no su funcionalidad. Las etiquetas consisten en breves instrucciones de comienzo y final, mediante las cuales se determina la forma en la que debe aparecer en el navegador el texto, las imágenes y los demás elementos, en la pantalla del computador. En la Figura 19, podemos observar un ejemplo de código fuente en lenguaje HTML, donde se encuentran representadas las principales etiquetas HTML, HEAD, y BODY. HTML 5, la última versión disponible, establece una serie de nuevos elementos y atributos que reflejan el uso típico de los sitios Web modernos. Incorpora nuevas etiquetas con mayor significado semántico, mejora la integración con las tecnologías de desarrollo Web actual, permite desplegar objetos y animaciones en formato 3D (tridimensional), tiene un mejor soporte multimedia y ahorra la necesidad de tener que procesar medios de audio o video a través de complementos instalados en el navegador Web. (Pérez, 2016). Capítulo II. Marco Teórico 25 FIGURA 19. EJEMPLO DE CÓDIGO FUENTE HTML Fuente: (Web.usf.edu, 2018) 2.7.2 Hojas de Estilo en Cascada (CSS) CSS es un lenguaje de estilos empleado para definir la presentación, el formato y la apariencia de un documento de marcaje, sea html o cualquier otro. Comúnmente se emplea para dar formato visual a documentos html o xhtml que funcionan como espacios Web. También puede ser empleado en formatos xml, u otros tipos de documentos de marcaje para la posterior generación de documentos. (Collell Puig, s.f) Las hojas de estilos nacen de la necesidad de diseñar la información de tal manera que podemos separar el contenido de la presentación y, así, por una misma fuente de información, generalmente definida mediante un lenguaje de marcaje, ofrecer diferentes presentaciones en función de dispositivos, servicios, contextos o aplicativos. Por lo que un mismo documento html, mediante diferentes hojas de estilo, puede ser presentado por pantalla, por impresora, por lectores de voz o por tabletas braille. Separamos el contenido de la forma, composición, colores y fuentes. (Collell Puig, s.f) La Figura 20, muestra un ejemplo de código CSS incrustado en HTML, que permite cambiar el color de la fuente de un título, la fuente y tamaño de un párrafo, además del color del fondo. Capítulo II. Marco Teórico 26 FIGURA 20. EJEMPLO DE CÓDIGO CSS INCRUSTADO EN HTML Fuente: (W3schools, 2018) 2.7.3 JavaScript JavaScript (JS) es un lenguaje de scripting, interpretado, diseñado para la manipulación de eventos y objetos contenidos en una página Web, de forma local y sin necesidad de transmisión alguna por la red. JavaScript permite crear pequeños programas llamados Script, que pueden acompañar un documento HTML o estar contenidos en su interior. Dicho programa se ejecuta en el navegador Web cuando se carga el documento, o cuando se produce algún evento, como por ejemplo la activación de un enlace por parte del usuario. (España María, 2003) Entre las acciones típicas que se pueden realizar en JavaScript están los efectos especiales sobre páginas Web, para crear contenidos dinámicos y elementos de la página que tengan movimiento, cambien de color o cualquier otro dinamismo. Por el otro, JavaScript permite ejecutar instrucciones como respuesta a las acciones del usuario, con lo que podemos crear páginas interactivas con programas como calculadoras, agendas, o tablas de cálculo. (Ospina y Suárez, 2008) JavaScript tiene dos características principales, por un lado, que es un lenguaje basado en objetos, es decir, su paradigma de programación es orientado a objetos, y por otro es un lenguaje orientado a eventos, lo que implica que gran parte de la programación en JavaScript se centra en describir objetos y escribir funciones que respondan a eventos del usuario, por ejemplo, movimientos de ratón, pulsación de teclas, apertura y cerrado de ventanas o carga de una página. (Ospina y Suárez, 2008) 2.7.4 Angular Angular es un framework para aplicaciones web desarrollado en TypeScript, de código abierto, mantenido por Google, que se utiliza comúnmente para crear y mantener aplicaciones web de una sola página. Su objetivo es aumentar las aplicaciones basadas Capítulo II. Marco Teórico 27 en navegador con capacidad de Modelo Vista Controlador (MVC), en un esfuerzo para hacer que el desarrollo y las pruebas sean más fáciles. Con Angular se ha eliminado la manipulación del Modelo de Objeto del Documento (DOM) y al ser MVC los datos se almacenan en un solo lugar. Además, mediante el enlace de datos (data binding), la vista se actualiza de forma automática cada vez que el modelo cambia y viceversa (Google Inc., 2018). De acuerdo a Carreño Villalba (2015) en una aplicación Angular podemos diferenciar una serie de elementos claves que conforman la base de este framework:  Servicios: son los encargados de proveer los datos a la aplicación. Lo más común es que estos datos provengan de una API externa.  Vistas: es la parte visible por el usuario. Suelen estar parametrizadas, y todas las vistas tienen asociado un controlador.  Controladores: Sirven los datos y funcionalidades a las vistas asociadas a él. Suelen ser estos los que utilizan los servicios para obtener los datos.  Directivas: Ofrecen elementos nuevos o nuevos comportamientos en elementos ya existentes dentro de las vistas (widgets, validaciones, etc.). Entre las ventajas de utilizar Angular como framework de desarrollo se encuentran  Disminución de errores en el código gracias la detección temprana de los mismos por TypeScript.  Facilita la reutilización de componentes evitando la repetición de código.  Posee una gran comunidad de desarrollo y amplia documentación.  Brinda gran cantidad de librerías evitando la descarga de paquetes externos.  Diseñado para facilitar el testeo de la aplicación. 2.8 Tecnologías del Lado del Servidor 2.8.1 WildFly WildFly es un servidor de aplicaciones Java de código abierto y multiplataforma, compatible con cualquier sistema operativo en el que se encuentre disponible la máquina virtual de Java. Wildfly, permite una rápida puesta de las aplicaciones, arrancando los procesos críticos en paralelo, para eliminar esperas innecesarias y aprovechar la potencia de los procesadores multi-núcleo. (Galán, 2017) Las aplicaciones realizadas con WildFly están pensadas para soportar gran cantidad de usuarios, tráfico o necesidades de procesamiento. La administración de sus distintos módulos, se puede hacer de manera centralizada y amistosa para el usuario. Los distintos subsistemas se pueden configurar desde el mismo fichero de configuración, aunque ya disponen de unos valores predeterminados asignados de manera inteligente. Además, dispone de múltiples interfaces para configuración. 2.8.1.1 Características de WildFly Según Enderica y Pauzhe (2017), WildFly posee las siguientes características:  Posee una licencia GNU de código abierto. Capítulo II. Marco Teórico 28  Soporta los estándares: Portlet Specification and API 1.0 (JSR-168), Content Repository for Java Technology API (JSR-170), Java Server Faces 2.0 (JSR- 252), Java Management Extensión (JMX) 1.2 y J2EE 1.4.  Ofrece interacción con otras aplicaciones a cualquier objeto de Java.  Brinda asistencia completa para Java Management Extensions – JMX.  Se encuentra orientado a trabajar con Programación Orientada a Aspectos (AOP). Este paradigma de programación nos permite encapsular diferentes conceptos que componen una aplicación, eliminando las preocupaciones colaterales como: patrones de diseño, comprobación de errores, manejo de restricciones en la sincronización y optimizaciones de rendimiento.  Ofrece un alto nivel de confiabilidad a nivel empresarial.  Es compatible con Hibernate, esto permite realizar el correspondiente mapeo de objetos Java a las tablas de la base de datos, lo cual facilita a los programadores de Java, crear las clases de persistencia. Además, Hibernate brinda servicios de consulta y recuperación de información.  Posee JBoss Cache, que ofrece soluciones para almacenar en memoria los objetos Java a los cuales se acceden frecuentemente, reduciendo así los accesos innecesarios a la base de datos, proporcionando soluciones avanzadas de clustering2 a nivel empresarial y mejorando el rendimiento. 2.8.2 Spring Spring es un framework de tecnología abierta (open source), creado para disminuir la complejidad del desarrollo de aplicaciones empresariales. Spring hace posible usar los JavaBeans para lograr cosas que anteriormente sólo eran posibles con el uso de los EJBs3. Sin embargo, el ámbito de empleo de Spring no está limitado al desarrollo en el lado del servidor. Cualquier aplicación Java puede beneficiarse de Spring en términos de simplicidad, testeo, y bajo acoplamiento. (Johnson, Hoeller, Arendsen, Risberg y Sampaleanu, 2005) A resumidas cuentas, Spring es un framework contenedor y liviano que incluye inyección de dependencia y programación orientada a aspectos. Sin embargo, para facilitar el entendimiento de Spring a continuación se detallan las siguientes características de acuerdo a Wallas (2008):  Framework: Spring hace posible configurar y construir aplicaciones complicadas desde simples componentes ya prefabricados. En Spring, los objetos de la aplicación son construidos declarativamente, normalmente en archivos en lenguaje de marcado extendido (XML). Spring también provee una arquitectura funcional prefabricada (administración de transacciones, integración con frameworks de persistencia, etc.) dejando que el desarrollador se enfoque en la programación de la lógica de la aplicación.  Contenedor: Spring es un contenedor en el sentido que contiene y administra el ciclo de vida y configuración de los objetos de la aplicación. En Spring, se 2 Clustering: Agrupar una serie de objetos de acuerdo con un criterio. (Wikipedia, 2017). 3 EJB: Interfaces de programación de aplicaciones que forman parte del estándar de construcción de aplicaciones empresariales JEE, siglas en inglés de Enterprise JavaBeans (Wikipedia, 2017). Capítulo II. Marco Teórico 29 puede definir como cada objeto de la aplicación puede ser declarado, como pueden ser configurados y como deberían estar relacionados el uno con el otro.  Liviano: Spring es liviano en términos de tamaño y sobrecarga. El framework de Spring es distribuido en un simple archivo JAR que tiene un tamaño de 15 aproximadamente 2.5 MB. Y la sobrecarga de procesos requerida por Spring es muy baja.  Inyección de dependencia: Spring promueve el bajo acoplamiento a través de la técnica conocida como inyección de dependencia (DI). Cuando DI es aplicado, los objetos están dando pasivamente sus dependencias en lugar de crear o buscar objetos dependientes por ellos mismos.  Programación orientada a aspectos: Spring incluye un amplio soporte para la programación orientada a aspectos (AOP) que permite el desarrollo cohesivo, separando las aplicaciones lógicas de negocios de los sistemas de servicios (como por ejemplo las transacciones administrativas). Los objetos de la aplicación hacen lo que se supone deben hacer (realizar la lógica de negocios) y nada más. Estos objetos no son responsables de otros ámbitos del sistema, como son procesos, transacciones y autorizaciones. 2.8.3 Hibernate Hibernate es una herramienta de mapeo objeto-relacional (ORM) para el lenguaje Java, que proporciona un framework para el mapeo de un modelo de dominio orientado a objetos a una base de datos relacional tradicional. Hibernate ayuda a resolver problemas de tipo Objeto-Relacional respecto al desajuste de impedancia mediante el reemplazo del acceso directo a las bases de datos relacionales, e implementando la persistencia con funciones de alto nivel de manipulación de objetos. Los ORM son herramientas para la representación y la traducción de los datos entre la base de datos y el lenguaje de programación orientado a objetos; proporciona soporte para las colecciones y las relaciones entre objetos, así como el manejo de tipos compuestos. (Castillo, Cancino y Álvarez Oval, 2015) Una de sus principales características, radica en su fácil integración con otros frameworks como son: Java Server Faces (JSF), Spring o Struts; los cuales ofrecen clases y anotaciones específicas que permiten establecer una rápida comunicación con Hibernate. En el caso del Spring provee una clase llamada HibernateTemplate, la cual ofrece los métodos necesarios para implementar las operaciones básicas CRUD4 en una aplicación; los cuales resultan ser simples ocupando una sola línea de código. (Castillo et al., 2015) Estados de objetos Hibernate soporta los siguientes estados de objetos:  Transitorio: un objeto es transitorio, sólo si ha sido creado mediante una instancia usando el operador new, y no está asociado con una sesión de Hibernate. No tiene ninguna representación persistente en la base de datos y no tiene valor identificador se le ha asignado. Las instancias transitorias serán destruidas por el recolector si la aplicación no tiene una referencia más. 4 CRUD: acrónimo de Crear, Leer, Actualizar y Borrar, del original en inglés: Create, Read, Update and Delete. (SearchDataManagement, 2017). Capítulo II. Marco Teórico 30  Persistente: una instancia persistente tiene una representación en la base de datos y un valor de identificador. Es posible, que el objeto pudo haber sido guardado o recuperado, en el ámbito de una sesión. Hibernate detectará los cambios realizados en un objeto en estado persistente y sincronizará su estado con la base de datos cuando la unidad de trabajo sea completada.  Independiente: es un objeto que ha sido persistente, pero su período de sesión se ha finalizado; es decir, la referencia al objeto sigue siendo válida, en ese sentido, la instancia independiente podría incluso ser modificada en este estado. Una instancia de este tipo puede añadirse a una sesión, en un tiempo posterior, lo cual provocaría que se encuentre activa nuevamente y sus modificaciones realizadas se conviertan en persistentes. HQL (Hibernate Query Languaje) El Hibernate Query Languaje (HQL) es el lenguaje de consultas usado por Hibernate este es muy parecido al SQL estándar con la diferencia de que el HQL se orienta a objetos donde se puede usar los nombres de clase y sus atributos en lugar de las tablas y columnas, lo cual nos permite usar herencias polimorfismo y asociaciones, el desarrollador escribe la consulta en HQL, luego Hibernate se encarga de convertirla en SQL estándar para que sea entendido por el motor de base de datos y proceda a ejecutar la operación indicada. (Castillo et al., 2015) Ventajas del uso de Hibernate El uso de Hibernate brinda las siguientes ventajas según Gavilanes Blacio (2016)  Su portabilidad, debido a que Hibernate utiliza su propio lenguaje de consulta (HQL), permitiendo que cambiar de base de datos sea más fácil, ya que sólo se modificarían las sentencias SQL.  La documentación de las diferentes versiones de Hibernate es muy amplia, y se encuentra bien estructurada y concisa en diferentes idiomas.  El rendimiento de Hibernate, ya que este almacena en caché los datos, por consiguiente, si volvieran a ser llamados, se recuperarían más rápido de la base de datos. Desventajas del uso de Hibernate El uso de Hibernate tiene las siguientes desventajas según Gavilanes Blacio (2016)  Al momento de existir cambios en las tablas (creación de una nueva columna), esto requerirá de cambiar los objetos ya previamente mapeados y los archivos XML asociados a estos.  Debido a que las clases son generadas en tiempo de ejecución para poder acceder a los objetos de las bases de datos, implica más sobrecarga de lo que lo haría la propia consulta SQL.  La curva de aprendizaje es mucho mayor, que lo que se requiere para aprender SQL nativo.  Para un correcto uso de la herramienta, es necesario una adecuada configuración de los muchos ficheros que esta maneja para el proceso de las transacciones SQL y creación de objetos Java. Capítulo II. Marco Teórico 31 2.8.4 Sistema Manejador de Base de Datos De acuerdo a Korth, Silberschatz y Sudarshan (2002) los sistemas manejadores de Base de Datos consisten en una colección de datos interrelacionados y un conjunto de programas para acceder a dichos datos. La colección de datos, normalmente denominada base de datos, contiene información relevante para una empresa. El objetivo principal de un SGBD es proporcionar una forma de almacenar y recuperar la información de una base de datos de manera que sea tanto práctica como eficiente. Los sistemas de bases de datos se diseñan para gestionar grandes cantidades de información. La gestión de los datos implica tanto la definición de estructuras para almacenar la información como la provisión de mecanismos para la manipulación de la información. Además, los sistemas de bases de datos deben proporcionar la fiabilidad de la información almacenada, a pesar de las caídas del sistema o los intentos de acceso sin autorización. Si los datos van a ser compartidos entre diversos usuarios, el sistema debe evitar posibles resultados anómalos. Ospina (2009) describe las funciones que debe cumplir un SMBD: 1. Definición de datos: El SMBD debe ser capaz de aceptar definiciones de datos en versión fuente y convertirlas en la versión objeto adecuada. Dicho de otro modo, el SMBD debe incluir componentes procesadores de lenguajes para cada uno de los diversos lenguajes de definición de datos (DDL). 2. Manipulación de datos: El SMBD debe ser capaz de atender las solicitudes del usuario para extraer, poner al día, datos que ya existen en la base de datos o para agregar en ella datos nuevos. Dicho de otro modo, el SMBD debe incluir componentes procesadores de lenguajes para cada uno de los diversos lenguajes de manipulación de datos (DML). 3. Seguridad e integridad de los datos: El SMBD debe supervisar las solicitudes de los usuarios y rechazar los intentos de violar las medidas de control y seguridad definidas por el DBA. 4. Control de concurrencia de los datos: El SMBD debe proporcionar un mecanismo para garantizar que la base de datos se actualice correctamente cuando haya varios usuarios realizando modificaciones de manera concurrente en la base de datos. 5. Recuperación: El SMBD debe poder recuperar la base de datos en caso de que esta resulte dañada de alguna forma. 6. Diccionario de Datos accesible por el usuario: El SMBD debe incluir un catálogo en el que se almacenen las descripciones de los datos y que sea accesible por parte de los usuarios. Capítulo II. Marco Teórico 32 2.8.5 PostgreSQL PostgreSQL es un potente Sistema Manejador de Base de Datos objeto-relacional, de código abierto, que cuenta con más de 30 años de desarrollo activo y una arquitectura probada que se ha ganado una sólida reputación por su fiabilidad, integridad de datos y corrección. Trabaja muy bien con grandes cantidades de datos y una alta concurrencia de usuarios accediendo a la vez al sistema, por lo que se considera una herramienta que favorece a los usuarios con sistemas empresariales de gran tamaño. (The PostgreSQL Global Development Group, 1996-2015) Narváez Coello (2014) describe las características generales de PostgreSQL: • Integridad referencial bajo claves foráneas • Permite copias de seguridad en caliente (hot backup) • Soporte nativo de SSL para la encriptación del acceso • Permite el manejo de objetos y sus relaciones • Brinda múltiples métodos y opciones de autentificación • Manejo de actualizaciones integrado (pg_update) • Disponible para múltiples plataformas • Manejo de procedimientos almacenados con soporte en los lenguajes PL/pgSQL, PL/Tcl, PL/Python y PL/Perl. El análisis de tecnologías realizado en este capítulo permitió la selección de herramientas que facilitan el desarrollo de una aplicación segura, eficiente, usable y con tiempos de respuesta adecuados. Además, que brindan al programador diversas facilidades que permitan optimizar el tiempo de desarrollo. Fueron seleccionados Hibernate y Spring, por su robustez, por su amplia documentación y por sus funcionalidades que permiten la construcción de servicios Web escalables, donde se implementa la lógica del negocio y que en un futuro puedan ser consumidos por alguna otra aplicación Web o móvil sin necesidad de realizar modificaciones. Además, Hibernate permite la rápida gestión y recuperación de los datos almacenados en una base de datos relacional gracias a su propio lenguaje de consulta HQL. PostgreSQL, por su portabilidad, su facilidad de configuración y su excelente rendimiento en aplicaciones Web con alta concurrencia en lectura de datos. HTML5 y CSS3 por ser los lenguajes predilectos para la creación de vistas en el desarrollo Web, permitiendo definir la estructura de la página y aplicar estilos, y finalmente Angular 6, que gracias a sus múltiples librerías y arquitectura MVC, facilitan la creación de interfaces dinámicas, rápidas y usables. Capítulo III. Marco metodológico 33 CAPÍTULO III. MARCO METODOLÓGICO El uso de metodologías de desarrollo permite estructurar, planificar y controlar el proceso de creación de software. Debido a esto, en el siguiente capítulo, se estudian los conceptos relacionados a estas metodologías, y se presenta un cuadro comparativo que permitió la elección de la metodología adecuada para la elaboración del Trabajo Especial de Grado. 3.1 Metodología de desarrollo Una metodología es una colección de procedimientos, técnicas, herramientas y documentos auxiliares que ayudan a los desarrolladores de software en sus esfuerzos por implementar nuevos sistemas de información. Una metodología está formada por fases, cada una de las cuales se puede dividir en sub-fases, que guiarán a los desarrolladores de sistemas a elegir las técnicas más apropiadas en cada momento del proyecto y también a planificarlo, gestionarlo, controlarlo y evaluarlo. (Avison y Fitzgerald, 1995) De acuerdo a los aportes de Georgiadou (2003) y Carvajal Riola (2008) una metodología debe tener los siguientes puntos primordiales: 1. Visión del producto. Todo el mundo debe conocer lo que el equipo está tratando de hacer, como debe de ser el producto final, las bases de la estrategia del producto y cuando el producto será entregado. 2. Vinculación con el cliente. La metodología se debe encargar de indicar la manera de gestionar el vínculo entre clientes, desarrolladores, especificación de requisitos y el personal de soporte. 3. Establecer un modelo de ciclo de vida. Un modelo de ciclo de vida como pueden ser el iterativo, secuencial o en cascada, etc. De esta manera se establecen los pasos en el proceso de desarrollo y se pueden ubicar los recursos adecuadamente. 4. Gestión de los requisitos. Nivel de detalle que deben tener los requisitos del producto, siendo recomendable cuanto más alto mejor. 5. Plan de desarrollo. Un documento con un plan para organizar los requisitos y cuestiones relacionadas con la calidad. Los ítems de este plan deben ser lo suficientemente detallados para que los desarrolladores de software puedan desarrollar sus tareas de codificación de un modo no ambiguo. 6. Integración del proyecto. Una metodología de desarrollo debe conducir a una organización a determinar cómo se integrará el producto fabricado con los existentes y futuros productos de la compañía. 7. Medidas de progreso del proyecto. Se considera un aspecto crítico en una metodología. Desarrolladores, manager y los altos cargos de la organización deben entender el progreso del desarrollo del equipo de desarrollo. Ellos deben conocer el estado actual del producto, así como una buena estimación del tiempo que resta para la finalización del proyecto. 8. Métricas para evaluar la calidad. La existencia de un proceso para la medida de la calidad del producto, el cual suele empezar en las primeras etapas de la planificación. Este proceso no es tan solo para encontrar fallos, produce Capítulo III. Marco metodológico 34 indicadores de la robustez del producto y cuánto se aproxima el producto a las especificaciones iniciales. 9. Maneras de medir el riesgo. Un plan debe tener en cuenta los posibles problemas que pueden ocurrir durante el proceso de desarrollo, el impacto de estos problemas y qué acciones deberían ser llevadas a cabo para solucionar o prevenir estos problemas. 10. Cómo gestionar los cambios. Nuevas ideas y problemas desembocan en cambios de diseño y especificación aún que ya hayamos empezado a implementar. Un plan debe contemplar estas sugerencias para introducirlas en el proyecto, debatirlas e implementarlas. 11. Establecer una línea de meta. La metodología de desarrollo debe forzar a una organización a especificar exactamente que está siendo construido y que constituye el producto final. 3.1.1 Metodología ágil Las metodologías ágiles son métodos de desarrollo de software en los que las necesidades y soluciones evolucionan a través de una colaboración estrecha entre equipos multidisciplinarios. Se caracterizan por enfatizar la comunicación frente a la documentación, por el desarrollo evolutivo y por su flexibilidad. Estas metodologías surgen a principios del 2001 en respuesta a los modelos de proceso clásicos ya existentes. (Wikiversidad, 2015) El Manifiesto Ágil El Manifiesto Ágil consiste en un documento redactado en febrero de 2001, donde un grupo de académicos y expertos en el área de desarrollo de software, expusieron los postulados sobre los que se rigen las metodologías ágiles. El manifiesto hace énfasis en cuatro valores principales. Se valora, según Letelier y Sánchez (2003):  Al individuo y las interacciones del equipo de desarrollo sobre el proceso y las herramientas. La gente es el principal factor de éxito de un proyecto software. Es más importante construir un buen equipo que construir el entorno. Muchas veces se comete el error de construir primero el entorno y esperar que el equipo se adapte automáticamente. Es mejor crear el equipo y que éste configure su propio entorno de desarrollo en base a sus necesidades.  Desarrollar software que funciona más que conseguir una buena documentación. La regla a seguir es “no producir documentos a menos que sean necesarios de forma inmediata para tomar una decisión importante”. Estos documentos deben ser cortos y centrarse en lo fundamental.  La colaboración con el cliente más que la negociación de un contrato. Se propone que exista una interacción constante entre el cliente y el equipo de desarrollo. Esta colaboración entre ambos será la que marque la marcha del proyecto y asegure su éxito.  Responder a los cambios más que seguir estrictamente un plan. La habilidad de responder a los cambios que puedan surgir a lo largo del proyecto (cambios en los requisitos, en la tecnología, en el equipo, etc.) determina también el éxito o fracaso del mismo. Por lo tanto, la planificación no debe ser estricta sino flexible y abierta. Capítulo III. Marco metodológico 35 Los postulados descritos anteriormente, inspiraron los siguientes principios (Gimson, 2012): 1. La prioridad es satisfacer al cliente mediante entregas de software tempranas y continuas. 2. Los cambios en los requerimientos son aceptados. 3. Software que funcione se entrega frecuentemente, con el menor intervalo posible entre entregas. 4. El cliente y los desarrolladores deben trabajar juntos a lo largo del proyecto. 5. El proyecto se construye en base a individuos motivados. 6. El diálogo cara a cara es el método más eficiente y efectivo para comunicar información dentro del equipo. 7. El software que funcione es la medida principal del progreso. 8. Los procesos ágiles promueven el desarrollo sostenido. 9. La atención continua a la excelencia técnica y al buen diseño mejora la agilidad; 10. La simplicidad es esencial. 11. Las mejores arquitecturas, requerimientos y diseños surgen de equipos auto organizados. 12. El equipo reflexiona en cómo ser más efectivos, y ajusta su comportamiento en consecuencia. 3.2 Scrum Scrum es un proceso de gestión y control que reduce la complejidad en el desarrollo de productos para satisfacer las necesidades de los clientes. La gerencia y los equipos de Scrum trabajan juntos alrededor de requisitos y tecnologías para entregar productos funcionando de manera incremental usando el empirismo. (Francia, 2017) Scrum es un marco de trabajo simple que promueve la colaboración en los equipos para lograr desarrollar productos complejos, está basado en un modelo de proceso empírico con respeto a las personas y basado en la auto organización de los equipos para lidiar con lo imprevisible y resolver problemas complejos inspeccionando y adaptando continuamente. (Francia, 2017). Según Carvajal Riola (2008) en Scrum se identifican las siguientes fases:  Planificación del Sprint (Sprint Planning). En esta fase se define el Product Backlog si todavía no ha sido definido, el cual consiste en una lista priorizada de requisitos del sistema y es un documento vivo, que puede ser continuamente actualizado. En cada iteración el Product Backlog es revisado por el equipo. También se lleva a cabo la planificación del primer Sprint. La planificación de cualquier sprint es la jornada de trabajo previa al inicio de cualquier sprint y en la cual se determinan cuáles son los objetivos y el trabajo que se deben cubrir en esa iteración.  Seguimiento del Sprint. A lo largo de esta fase se llevan a cabo breves reuniones diarias, para ver el avance de las tareas y el trabajo que está Capítulo III. Marco metodológico 36 previsto para la jornada. En estas reuniones sólo están presentes el Scrum Master y el equipo y se suelen plantear las siguientes preguntas: ¿Qué trabajo se ha realizado desde la reunión anterior?, ¿Qué trabajo se realizará hasta la próxima reunión?, ¿Cuáles han sido los Impedimentos que deben solventarse para proseguir con el trabajo?  Revisión del Sprint (Sprint Review). Una vez finalizado el Sprint se realiza un análisis y revisión del incremento generado. En esta reunión se presentan los resultados finales y se recomienda siempre tener preparada un entregable. En la Figura 21, podemos observar las fases definidas anteriormente representadas en el Ciclo de SCRUM. FIGURA 21. CICLO DE SCRUM DE ACUERDO A KEN SCHWABER Y JEFF SUTHERLAND Fuente: (Scrum.org, 2018) 3.2.1 Roles y responsabilidades Schwaber y Beedle (2002) definen seis tipos de roles diferentes en la metodología Scrum:  Propietario del producto. Persona del proyecto conocedora del entorno de negocio del cliente y de la visión del producto, y responsable de obtener el resultado de mayor valor posible para el cliente. También está encargado de la financiación necesaria para el proyecto, de tomar las decisiones que afecten a cómo va a ser el resultado final, fechas de lanzamiento y el retorno de inversión.  Scrum Master. Es el encargado de garantizar el funcionamiento de la metodología y de los procesos. Un Scrum Master debe interactuar tanto con el equipo como con el cliente y con los gestores.  Equipo de desarrollo. Es el equipo del proyecto y tiene la autoridad para decidir en las acciones necesarias y para auto-organizarse con la finalidad de alcanzar los objetivos del sprint. El equipo está involucrado en la estimación del esfuerzo de las tareas del product backlog, en la creación del sprint backlog, etc.  El cliente. Participa en la creación del product backlog. Capítulo III. Marco metodológico 37  El gestor. Está al cargo de la toma de decisiones finales, participa en la elección de objetivos y requisitos. Una de las actividades en las que está involucrado el gestor es en la selección del propietario del producto o en la reducción del product backlog junto con el Scrum Master. 3.2.2 Prácticas Scrum provee de prácticas y herramientas para la gestión de sus diferentes fases. Carvajal Riola (2008) define las principales:  Sprint Backlog: Es una lista de trabajos que el equipo se compromete a realizar en la iteración para generar el incremento previsto. Las tareas están asignadas a personas y tienen estimados el tiempo y los recursos necesarios.  Product Backlog: Define los requisitos del sistema o el trabajo a realizar a lo largo del proyecto. Está compuesto por una lista de requisitos de negocio y técnicos, actualizados y priorizados.  Estimación de esfuerzo: Es un proceso iterativo en el cual las estimaciones de los ítems del product backlog son reajustadas acorde a la información obtenida en la última iteración. Este reajuste lo llevan a cabo el equipo de desarrollo y el propietario del producto.  Burn-down: Es una herramienta para gestionar y seguir el trabajo de cada sprint y representa gráficamente el avance del sprint. De esta manera en las reuniones diarias el Scrum Master puede evaluar cuánto se ha avanzado y actualizar el gráfico. Capítulo III. Marco metodológico 38 3.3 Cuadro comparativo de Scrum con otras metodologías de desarrollo A continuación, se presenta en la tabla 2 una comparación entre cuatro metodologías diferentes de desarrollo. TABLA 2 COMPARATIVA DE METODOLOGÍAS DE DESARROLLO Desarrollo en Cascada SCRUM XP Método de desarrollo de sistemas dinámicos (DSDM) Definición También llamado modelo en cascada, es el enfoque metodológico que ordena rigurosamente las etapas del proceso para el desarrollo de software, de tal forma que el inicio de cada etapa debe esperar a la finalización de la etapa anterior. Scrum es un proceso de gestión y control que reduce la complejidad en el desarrollo de productos para satisfacer las necesidades de los clientes. La gerencia y los equipos de Scrum trabajan juntos alrededor de requisitos y tecnologías para entregar productos funcionando de manera incremental usando el empirismo. XP es una metodología ágil centrada en potenciar las relaciones interpersonales como clave para el éxito en desarrollo de software. Se basa en realimentación continua entre el cliente y el equipo de desarrollo, comunicación fluida entre todos los participantes, simplicidad en las soluciones implementadas y coraje para enfrentar los cambios. El Método de Desarrollo de Sistemas Dinámicos (DSDM) es una metodología de desarrollo de software originalmente basado en la metodología de Desarrollo de Aplicación Rápida. Su idea fundamental se basa en que en vez de fijar las funcionalidades de un producto y después el tiempo y el coste, fijar primero el tiempo y el coste y con esto fijado, determinar las funcionalidades que se pueden implementar en el producto Fases - Análisis y especificación de los requisitos - Diseño - Codificación - Pruebas - Implantación y mantenimiento - Planificación del Sprint - Seguimiento del Sprint - Revisión del Sprint - Fase de exploración - Fase de planificación - Fase de iteraciones - Fase de producción - Fase de mantenimiento - Fase de cierre de proyecto - Estudio de vialidad - Estudio de negocio - Modelo funcional de las iteraciones - Iteraciones de diseño y construcción - Implementación Roles - Gestor de Proyectos - Arquitecto del software - Analistas - Desarrolladores - Probadores - Expertos en la materia - Propietario del producto - Scrum Master - Equipo de desarrollo - Equipo de desarrollo - El gestor - Cliente - Programador - Probador - Rastreador - Coach o Tutor - Consultor - Gestor o Manager - Desarrollador - Coordinador técnico - Usuario embajador - Usuario asesor - Visionario - Patrocinador ejecutivo - Líder de Equipo - Probador - Escriba - Facilitador - Jefe de Proyecto Prácticas No especifican ninguna práctica concreta - Sprint Backlog - Product Backlog - Estimación de esfuerzo - Burn-down - Burn-up - Estimación de Poker - Historias de usuario - Cortas y pequeñas iteraciones - Metáforas - Diseño simple - Pruebas - Integración continua - Estándares de codificación - Involucración activa del usuario. - El objetivo es la entrega frecuente de producto - Las pruebas se integran a lo largo del ciclo de vida - Todos los cambios son reversibles Capítulo III. Marco metodológico 39 Desarrollo en Cascada SCRUM XP Método de desarrollo de sistemas dinámicos (DSDM) Entorno de Uso Situaciones en las que los requisitos están muy bien determinados y no es probable una mala interpretación de los mismos. Proyectos que ya han sido realizados con anterioridad Scrum es recomendado para pequeños equipos, de diez o menos componentes. Proyectos en entornos complejos, donde se necesita obtener resultados pronto, con requisitos cambiantes o poco definidos. Proyectos con requisitos imprecisos y muy cambiantes, y donde existe un alto riesgo técnico. Equipos de tamaño medio o pequeños, es decir entre tres y veinte componentes como máximo. El tamaño de los equipos en DSDM varía desde dos integrantes hasta seis. Para proyectos grandes como pequeños, siempre que los sistemas grandes sean divisibles en componentes que puedan ser desarrollados por equipos pequeños. Ventajas - Fácil de implementar y entender - Está orientado a documentos - La calidad del producto resultante es alta - Gestión de las expectativas de los clientes - Entregas rápidas - Flexibilidad y adaptación - Gestión sistemática de riesgos - Código sencillo y fácil de entender - Optimiza el tiempo de desarrollo - Fomenta la comunicación con el cliente - Fácil de adaptar a cualquier lenguaje de programación - Adaptación a los cambios - Apto para proyectos con tiempos de desarrollo cortos - Mejora continua - Los requerimientos están especificados a un alto nivel Desventajas - Rigidez en el desarrollo - Tiempos de desarrollo extensos - Exige una alta cualificación o formación - Suele ser efectivos solo en equipos reducidos - Recomendada solo para proyectos de corto plazo - Requiere un rígido ajuste a los principios de XP - Los equipos deben tener capacidad para tomar decisiones - Es necesaria la continua implicación del cliente Fuentes: Elaborada a partir de (CARVAJAL RIOLA, 2008), (Francia, 2007) y (Wikipedia, 2018) El estudio y análisis de las metodologías de desarrollo, y las características de la aplicación a desarrollar, permitieron la selección de Scrum como metodología de desarrollo a utilizar, debido a su flexibilidad y capacidad de adaptación a los cambios que puedan ir surgiendo en el desarrollo, además, porque se centra en la productividad gracias a sus iteraciones de corta duración, y en la comunicación con las personas involucradas en el proyecto. Scrum brinda diversas herramientas que son útiles a la hora de desarrollar, pero al no ser una metodología rígida, se pueden escoger sólo las que se consideren más apropiadas para el proyecto. Finalmente, otro de los aspectos que influyó en la selección de la metodología Scrum, es el Desarrollo incremental, que permite que el aprendizaje obtenido en cada iteración, pueda ser aplicado en los sprint posteriores logrando la mejora continua. Capítulo IV. Marco aplicativo 40 CAPÍTULO IV. MARCO APLICATIVO En este capítulo se describe de manera detallada los pasos y las iteraciones que se realizaron para el desarrollo de este Trabajo Especial de Grado, en el que se siguieron los lineamientos de Scrum, una metodología ágil de desarrollo, además de los aspectos y características generales de la aplicación desarrollada. 4.1 Perfiles de usuario  Visitante: persona interesada en acceder a la información registrada en el sistema. Este usuario puede realizar búsquedas mediante uno o múltiples criterios, visitar perfiles de usuarios registrados, exportar la hoja de perfil descargándola o enviándola a una dirección de correo electrónico, registrarse en el sistema si posee un correo institucional de la Facultad de Ciencias y contactar al administrador.  Usuario registrado: este tipo de perfil de usuario puede realizar las mismas actividades que el usuario visitante, además de poder gestionar la información referente a su perfil como sus datos básicos, imagen de perfil, estudios realizados, experiencia laboral, cursos, proyectos, productos de investigación, eventos en los que ha participado, idiomas y reconocimientos.  Administrador: usuario administrador del sistema, puede gestionar toda la información almacenada en la aplicación, registrar nuevos usuarios y asignar roles. 4.2 Requerimientos de la aplicación Se definieron los siguientes requerimientos para el sistema:  Registrarse: Los visitantes pueden crearse una cuenta en la aplicación, siempre y cuando posean un correo institucional de la Facultad de Ciencias.  Iniciar sesión: Los usuarios registrados en la aplicación pueden acceder a su cuenta.  Contactar administrador: Los usuarios visitantes y registrados pueden enviar un mensaje al administrador.  Descargar hoja de perfil: Todos los usuarios de la aplicación pueden descargar una hoja de perfil.  Enviar hoja de perfil: Todos los usuarios de la aplicación pueden enviar una hoja de perfil por correo electrónico.  Realizar búsqueda: Todos los usuarios de la aplicación pueden realizar búsquedas en dos modalidades, búsqueda simple y búsqueda avanzada.  Visualizar perfil: Todos los usuarios pueden ver el perfil de un usuario registrado en la aplicación.  Restablecer contraseña: Los usuarios registrados en la aplicación pueden restablecer su contraseña en caso de olvidarla. Capítulo IV. Marco aplicativo 41  Cambiar Contraseña: Los usuarios registrados en la aplicación pueden cambiar su contraseña.  Asignar rol: Los usuarios administradores pueden asignar roles a otros usuarios registrados en la aplicación.  Realizar respaldo: Los usuarios administrados pueden realizar respaldos a la información almacenada en la base de datos del sistema.  Gestionar usuario: Los usuarios administradores pueden gestionar toda la información de los usuarios registrados en la aplicación.  Cerrar sesión: Los usuarios registrados y administradores pueden finalizar la sesión.  Gestionar experiencias laborales: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar sus experiencias laborales.  Gestionar idiomas: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar idiomas.  Gestionar estudios: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar estudios que hayan realizado.  Gestionar eventos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar eventos en los que hayan participado.  Gestionar cursos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar cursos que hayan realizado.  Gestionar reconocimientos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar reconocimientos que hayan recibido.  Gestionar proyectos: Los usuarios registrados en la aplicación pueden agregar, modificar o eliminar proyectos en los que hayan participado.  Gestionar productos: Los usuarios registrados en la aplicación puede agregar, modificar o eliminar productos de investigación que hayan realizado.  Cambiar imagen de perfil: Los usuarios registrados en la aplicación pueden cambiar su imagen de perfil. Capítulo IV. Marco aplicativo 42 4.3 Arquitectura del sistema La arquitectura de la aplicación es de tipo cliente-servidor. El cliente, desarrollado en Angular, consume los servicios Web que provee el servidor utilizando métodos HTTP y mensajería en formato JSON, y posteriormente, le muestra la información adquirida al usuario por medio de sus interfaces de usuario. Por su parte, el servidor, consiste en una API desarrollada en Java utilizando los frameworks Hibernate y Spring, y que se encuentra desplegada en un servidor WildFly. La API provee 147 servicios Web, que mediante HQL, el lenguaje de consulta de Hibernate, permiten la gestión de la información almacenada en la base de datos PostgreSQL. La interacción de los diferentes elementos que componen el sistema se puede observar en la figura 22. FIGURA 22. ARQUITECTURA GENERAL DEL SISTEMA 4.4 Aplicación de la metodología Scrum Para el desarrollo de este Trabajo Especial de Grado se hizo un uso parcial de los lineamientos del marco de desarrollo ágil Scrum, debido a que no fueron utilizados todos los elementos que contempla, sino los que se más se adaptaron a las necesidades del proyecto y son presentados a continuación: Capítulo IV. Marco aplicativo 43 4.4.1 Pila de producto (Product Backlog) y descripción de las iteraciones En la tabla 3 podemos observar las actividades repartidas en 8 iteraciones, las cuales se desarrollaron en 7 meses aproximadamente. TABLA 3 PILA DEL PRODUCTO  Sprint 1: Definición de requerimientos e instalación y configuración del ambiente de desarrollo Se definió la arquitectura general de la aplicación, sus requerimientos y se diseñaron las interfaces principales. Posteriormente, se realizó la instalación y configuración de las herramientas de desarrollo: servidor Web Wildfly 10, sistema manejador de base de datos Postgresql 10, última versión estable del entorno de desarrollo (IDE) Intellij Idea, última versión estable del manejador de versiones GIT y última versión estable del editor de código fuente Visual Studio Code. Finalmente, se corrieron los scripts de la base de datos de SIGIC, se realizaron las adaptaciones correspondientes y el resultado final podemos observarlo en la figura 38. Capítulo IV. Marco aplicativo 44  Sprint 2: Implementación de los servicios Web para el módulo de búsqueda Utilizando los frameworks de desarrollo Hibernate y Spring, se realizó la implementación de 9 servicios Web para el módulo de búsqueda de la aplicación que pueden observarse en la tabla 4. Entre ellos destacan, los servicios de búsqueda busquedaSimple y busquedaAvanzada, el servicio de obtenerCoincidencias que fue implementado para la funcionalidad de autocompletar en el buscador principal, y el servicio perfilesSimilares, que retorna los perfiles similares a un usuario considerando estas características en el siguiente orden de prioridad: usuarios que hayan participado en los mismos proyectos o similares, usuarios que hayan participado en la elaboración de los mismos productos de investigación o similares, usuarios que hayan realizado los mismos estudios, usuarios que posean el mismo cargo, usuarios que hayan realizado los mismos cursos, usuarios que dominen los mismos idiomas, usuarios que pertenezcan a la misma dependencia, usuarios que pertenezcan a la misma facultad. Para comprobar su correcto funcionamiento se utilizó la extensión de Chrome Postman. TABLA 4 SERVICIOS WEB PARA EL MÓDULO DE GESTIÓN Capítulo IV. Marco aplicativo 45  Sprint 3: Desarrollo de interfaces para el módulo de búsqueda Se desarrollaron las interfaces para el módulo de búsqueda. Entre ellas destacan la página principal (ver Figura 33), la interfaz de búsqueda avanzada (ver Figura 37), los resultados de búsqueda (ver Figura 35) y el perfil del usuario (ver Figura 36).  Sprint 4: Implementación de servicios Web para el módulo de gestión de información Se realizó la implementación de 130 servicios Web para el módulo de gestión de información de la aplicación. Estos servicios permiten agregar, modificar y eliminar toda la información registrada en la base de datos. Para comprobar su correcto funcionamiento se utilizó la extensión de Chrome Postman (ver Figura 23). FIGURA 23. RESPUESTA DE SERVICIO WEB LISTARIDIOMAS Capítulo IV. Marco aplicativo 46  Sprint 5: Desarrollo de interfaces para el módulo de gestión de información Se desarrollaron las interfaces para el módulo de gestión de información. Entre ellas destacan la interfaz de editar perfil (ver Figura 32) y los formularios para agregar y modificar información.  Sprint 6: Desarrollo de servicios Web e interfaces para el módulo de autenticación Se desarrollaron los servicios Web reflejados en las tablas 5 y 6, además de las interfaces para el módulo de autenticación. Este módulo permite a los usuarios visitantes registrarse en la aplicación, a los usuarios registrados autenticarse, a los administradores gestionar los roles y adicionalmente, se encarga de controlar el acceso a las diferentes funcionalidades del sistema dependiendo del tipo de usuario y su rol. TABLA 5 SERVICIOS PARA LA GESTIÓN DE USUARIOS TABLA 6 SERVICIOS PARA EL MÓDULO DE AUTENTICACIÓN Capítulo IV. Marco aplicativo 47  Sprint 7: Realización de pruebas y ajustes finales Se realizaron pruebas para evaluar el correcto funcionamiento de la aplicación, los tiempos de respuesta y la usabilidad y en base a los resultados se realizaron los ajustes finales a la aplicación.  Sprint 8: Elaboración del documento Se realizó la documentación del trabajo especial de grado. 4.5 Principales diagramas de secuencia y casos de uso El modelado de procesos en notación UML es utilizado para la definición, construcción y documentación de sistemas. En este Trabajo Especial de Grado, se utilizaron los diagramas de secuencia y de casos de uso para describir los procesos de la aplicación. Diagramas de secuencia Los diagramas de secuencia permiten representar la interacción de un grupo de objetos en un sistema. A continuación se presentan los diagramas de secuencia de las principales funcionalidades del sistema. Inicio de sesión: El proceso inicia cuando el usuario ingresa sus credenciales de acceso en el formulario de inicio de sesión, luego, el sistema evalúa si los datos ingresados son válidos y realiza la consulta en la base de datos para buscar un usuario que posea esas credenciales. Finalmente, el proceso finaliza con el sistema creando una sesión para el usuario si la búsqueda es exitosa, o enviando un mensaje de error si las credenciales son incorrectas. FIGURA 24. DIAGRAMA DE SECUENCIA - INICIAR SESIÓN Capítulo IV. Marco aplicativo 48 Gestión de información del usuario registrado: Los procesos para agregar, modificar o eliminar un elemento del perfil del usuario registrado son iguales para todas las categorías (curso, estudio, experiencia laboral, conocimiento, proyecto producto evento o idioma) - Agregar Ítem: El proceso inicia cuando el usuario ingresa los datos del ítem a agregar en el formulario correspondiente, cuyo contenido varía dependiendo de su categoría, luego, el sistema evalúa si los datos ingresados son válidos y de ser así, los inserta en la tabla de la base de datos correspondiente. El proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 25. DIAGRAMA DE SECUENCIA - AGREGAR ÍTEM Capítulo IV. Marco aplicativo 49 - Eliminar Ítem: El proceso inicia cuando el usuario selecciona en la aplicación el ítem que desea eliminar, luego, el sistema elimina el ítem de la tabla de la base de datos correspondiente y el proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 26. DIAGRAMA DE SECUENCIA - ELIMINAR ÍTEM Capítulo IV. Marco aplicativo 50 - Modificar Ítem: El proceso inicia cuando el usuario selecciona en la aplicación el ítem que desea modificar, el sistema busca la información almacenada de ese ítem y la muestra al usuario mediante un formulario editable, este realiza las modificaciones y envía el formulario con los cambios, el sistema evalúa si los estos fueron válidos y de ser así, actualiza el registro en la tabla de la base de datos correspondiente. El proceso culmina cuando se le notifica al usuario si la acción fue o no exitosa. FIGURA 27. DIAGRAMA DE SECUENCIA - MODIFICAR ÍTEM Capítulo IV. Marco aplicativo 51 - Asignar Rol: El proceso inicia cuando el administrador selecciona en la aplicación, al usuario registrado al que desea asignar el rol, el sistema busca el registro del usuario en la base de datos y, retorna al administrador, un formulario con una lista desplegable con todos los roles disponibles en el sistema. Luego, el administrador selecciona el rol que desea asignar y el sistema le envía un mensaje de confirmación para la asignación del rol. Finalmente, si el usuario confirma la acción, el sistema actualiza el rol del usuario en la base de datos y notifica al administrador si la acción fue o no exitosa. FIGURA 28. DIAGRAMA DE SECUENCIA - ASIGNAR ROL Capítulo IV. Marco aplicativo 52 - Búsqueda avanzada: El proceso inicia cuando el usuario ingresa uno o más parámetros de búsqueda y selecciona la opción de buscar, luego, el sistema realiza la búsqueda en la base de datos y retorna al usuario los registros que cumplan con los criterios ingresados. Finalmente, el sistema aumenta el contador de búsquedas realizadas en la aplicación. FIGURA 29. DIAGRAMA DE SECUENCIA - BÚSQUEDA AVANZADA Capítulo IV. Marco aplicativo 53 Casos de uso Los diagramas de casos de uso describen el conjunto de pasos o actividades se realizan para llevar a cabo un proceso. A continuación se presentan los diferentes niveles que componen el modelo de casos de uso de la aplicación.  Nivel 0: En la figura 30 se presenta el sistema y a los 3 tipos de usuario que interactúan con él. El usuario registrado, que posee una cuenta en la aplicación, el administrador que puede gestionar toda la información almacenada y el visitante, que puede realizar búsquedas, visitar perfiles y exportar hojas de perfil. FIGURA 30 MODELO DE CASOS DE USO – NIVEL 0 Capítulo IV. Marco aplicativo 54  Nivel 1: En la figura 31 se especifica el conjunto de casos de uso que engloban las funcionalidades planteadas para la aplicación y cuales usuarios pueden utilizarlas. Se observa que las opciones de búsqueda y exportación de hojas de perfil están disponibles para todos los usuarios, que los visitantes y los usuarios registrados pueden contactar al administrador, que el usuario registrado puede editar la información de su perfil y que sólo el administrador puede utilizar la funcionalidad de administrar el sistema. FIGURA 31 MODELO DE CASOS DE USO – NIVEL 1 Capítulo IV. Marco aplicativo 55  Nivel 2: En la figura 32 se observan las funcionalidades que extienden de los casos de uso expuestos en la figura anterior. Destacan las modalidades de búsqueda, simple y avanzada, las formas de exportar una hoja de perfil, por medio de descarga o enviándola por correo y las opciones de administración que posee el sistema que permiten entre otras cosas, agregar o eliminar usuarios, la asignación de roles y realizar respaldos de la información. FIGURA 32. MODELO DE CASOS DE USO – NIVEL 2 Capítulo IV. Marco aplicativo 56 A continuación se describirán alguno de los casos de usos más importantes, identificados en las figuras anteriores. TABLA 7. DESCRIPCIÓN DE CASO DE USO 2. INICIAR SESIÓN Identificador y nombre 2. Iniciar sesión Actor(es) Usuario registrado, Administrador Descripción Permite al actor acceder al sistema Precondición El actor se encuentra registrado en la aplicación Postcondición El actor entra al sistema y puede gestionar su información Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: ninguno TABLA 8. DESCRIPCIÓN DE CASO DE USO 3. REALIZAR BÚSQUEDA Identificador y nombre 3. Realizar búsqueda Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor realizar una búsqueda en la aplicación Precondición Ninguna Postcondición Muestra los perfiles que cumplan con los criterios especificados en el buscador Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: 3.1 Búsqueda Simple 3.2 Búsqueda Avanzada Capítulo IV. Marco aplicativo 57 TABLA 9. DESCRIPCIÓN DE CASO DE USO 4. EDITAR PERFIL Identificador y nombre 4. Editar perfil Actor(es) Usuario registrado Descripción Permite al actor agregar, modificar y eliminar toda su información registrada en la aplicación: datos generales, estudios realizados, cursos, idiomas, reconocimientos, experiencia laboral, productos de investigación, proyectos, participación en eventos Precondición El actor se encuentra autenticado en la aplicación Postcondición El actor gestionó su información y los cambios quedaron registrados en el sistema Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: 4.1 Agregar información 4.2 Modificar información 4.3 Eliminar información TABLA 10. DESCRIPCIÓN DE CASO DE USO 5. EXPORTAR HOJA DE PERFIL Identificador y nombre 5. Exportar hoja de perfil Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor exportar la hoja de perfil con toda la información de un usuario Precondición Ninguna Postcondición El actor exportó una hoja de perfil Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 5.1 Descargar hoja de perfil 5.2 Enviar hoja de perfil por correo electrónico Capítulo IV. Marco aplicativo 58 TABLA 11. DESCRIPCIÓN DE CASO USO 5.1 DESCARGAR HOJA DE PERFIL Identificador y nombre 5.1 Descargar hoja de perfil Actor(es) Visitante, Usuario registrado, Administrador Descripción Permite al actor descargar la hoja de perfil con toda la información de un usuario Precondición Ninguna Postcondición El actor descargó una hoja de perfil Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno TABLA 12. DESCRIPCIÓN DE CASO DE USO 6. ADMINISTRAR SISTEMA Identificador y nombre 6. Administrar sistema Actor(es) Administrador Descripción Permite al actor gestionar toda la información registrada en la aplicación Precondición El actor debe estar autenticado como administrador Postcondición Se registra la actualización hecha por el actor y se muestra un mensaje satisfactorio Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 6.1 Administrar usuarios 6.2 Administrar roles 6.3 Administrar tablas auxiliares Capítulo IV. Marco aplicativo 59 TABLA 13. DESCRIPCIÓN DE CASO DE USO 6.2 ADMINISTRAR ROLES Identificador y nombre 6.2 Administrar roles Actor(es) Administrador Descripción Permite al actor asignar roles a los usuarios registrados en el sistema Precondición El actor debe estar autenticado como administrador Postcondición Se realiza la asignación del rol al usuario y se muestra un mensaje satisfactorio Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno TABLA 14. DESCRIPCIÓN DE CASO DE USO 7. CONTACTAR AL ADMINISTRADOR Identificador y nombre 7. Contactar al administrador Actor(es) Visitante, Usuario registrado Descripción Permite al actor llenar un formulario para ponerse en contacto con el administrador del sistema para comunicar cualquier duda, inquietud o sugerencia con respecto a la aplicación Precondición Ninguna Postcondición Un correo electrónico fue enviado al administrador con el mensaje ingresado por el actor Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno Capítulo IV. Marco aplicativo 60 4.6 Principales interfaces de la aplicación La aplicación cuenta con un total de 37 interfaces, a continuación se describen las más relevantes. Página principal: Los usuarios pueden utilizar el buscador principal (ver figura 33) que realiza sugerencias de búsqueda a medida que el usuario va escribiendo, además pueden ver los perfiles más visitados (ver figura 34) y una breve reseña sobre la Facultad de Ciencias y las funcionalidades de la aplicación. Adicionalmente, mediante la barra de navegación, el usuario podrá acceder a las diferentes secciones del sistema, y el contenido de esta variará dependiendo del tipo de usuario. FIGURA 33. INTERFAZ DE LA PÁGINA PRINCIPAL Capítulo IV. Marco aplicativo 61 FIGURA 34. INTERFAZ DE LA PÁGINA PRINCIPAL 2 Resultado de búsqueda: Los usuarios pueden visualizar los resultados de búsqueda, acceder a uno de los perfiles reflejados y realizar otra búsqueda utilizando el buscador superior como puede observarse en la figura 35. FIGURA 35. INTERFAZ DE RESULTADO DE BÚSQUEDA Capítulo IV. Marco aplicativo 62 Perfil de usuario: En la interfaz de perfil (ver Figura 36), se puede observar toda la información de un usuario, su imagen y los perfiles similares. Además, se puede descargar la hoja de perfil o enviarla por correo electrónico utilizando los botones de enviar o descargar. FIGURA 36. INTERFAZ DE PERFIL DE USUARIO Búsqueda avanzada: Los usuarios pueden realizar búsquedas complejas ingresando uno o más criterios en el formulario que podemos observar en la figura 37. FIGURA 37. INTERFAZ DE BÚSQUEDA AVANZADA Capítulo IV. Marco aplicativo 63 Contacto: Los usuarios pueden contactar al administrador rellenando un formulario (ver Figura 38) con los campos nombre, correo electrónico y mensaje, y haciendo clic en enviar. FIGURA 38. INTERFAZ DE CONTACTO Capítulo IV. Marco aplicativo 64 Editar perfil: Mediante esta interfaz los usuarios pueden gestionar toda la información de su perfil: datos básicos, estudios, cursos, experiencias laborales, reconocimientos, eventos, idiomas, proyectos y productos de investigación. FIGURA 39. INTERFAZ DE EDITAR PERFIL Agregar elemento: Las interfaces para agregar algun elemento al perfil consisten en un formulario (ver Figura 40) cuyos campos varian según el elemento (estudio, curso, experiencia laboral, reconocimiento, evento, idioma, proyecto o producto) y un botón de agregar. FIGURA 40. INTERFAZ DE AGREGAR ESTUDIO Capítulo IV. Marco aplicativo 65 Administrar tablas auxiliares: Mediante esta interfaz (ver Figura 41), el administrador puede gestionar todas las tablas auxiliares que existen en la base de datos. FIGURA 41. INTERFAZ DE ADMINISTRACIÓN DE TABLAS AUXILIARES Inicio de sesión: Los usuarios registrados pueden acceder al sistema ingresando sus credenciales en el formulario que vemos en la Figura 42, pueden restablecer su contraseña haciendo clic en la opción de: ¿olvidó su contraseña? y los visitantes pueden realizar el registro en el sistema seleccionando la opción registrarse. Capítulo IV. Marco aplicativo 66 FIGURA 42. INTERFAZ DE INICIO DE SESIÓN Administrar usuarios: Esta interfaz contiene una tabla donde se listan todos los usuarios registrados en el sistema que podemos observar en la figura 43, en esta, el administrador puede buscar, ver, editar o eliminar la información de un usuario, además haciendo clic en el botón “registrar usuario” puede acceder al formulario de registro en la aplicación. FIGURA 43. INTERFAZ DE ADMINISTRACIÓN DE USUARIOS Capítulo IV. Marco aplicativo 67 Asignar Rol: Esta interfaz permite al administrador asignar un rol (‘Usuario registrado’, ’Administrador’) a cualquier usuario registrado en el sistema. FIGURA 44. INTERFAZ DE ASIGNAR ROL 4.7 Modelo Entidad – Relación Se utilizó la arquitectura del sistema anterior SIGIC desarrollado por la licenciada Viviana Pérez como punto de partida para la construcción de la base de datos de la aplicación. Posteriormente se fueron realizando adecuaciones de acuerdo a las necesidades y requerimientos del sistema, como por ejemplo, la adición del campo nro_visitas a la tabla usuario para llevar un registro de las visitas a cada perfil y la creación de la tabla búsqueda para llevar un recuento del número de búsquedas realizadas en la aplicación. Finalmente se realizó una precarga de datos a las siguientes tablas de la base de datos que podemos observar en la tabla 15, tomando la información ya almacenada en la base de datos de SIGIC: TABLA 15 PRECARGA DE INFORMACIÓN EN LA BASE DE DATOS Nombre de la tabla Cantidad de registros Nombre de la tabla Cantidad de registros usuario 820 tipo_participacion_proyecto 7 país 246 tipo_producto 7 disciplina 218 escalafon 7 dependencia 84 condicion_laboral 5 idioma 76 dedicacion 4 grado_academico 15 tipo_ambito_geografico 4 facultad 11 tipo_autor 4 tipo_evento 8 tipo_participacion_evento 4 Capítulo IV. Marco aplicativo 68 El modelo entidad-relación final de la base de datos de la aplicación se puede observar en la figura 45. FIGURA 45. MODELO ENTIDAD-RELACIÓN DE LA APLICACIÓN Capítulo IV. Marco aplicativo 69 4.8 Pruebas y resultados Las pruebas de software consisten en la dinámica de la verificación del comportamiento de un programa en un conjunto finito de casos de prueba, son una serie de actividades que se realizan con el propósito de encontrar los posibles fallos de implementación, calidad o usabilidad de un programa u ordenador, probando el comportamiento del mismo. Durante todo el desarrollo del Trabajo Especial de Grado se realizaron pruebas para verificar el correcto funcionamiento de la aplicación, y gracias a estas se hicieron correcciones que permitieron mejorar la calidad del sistema. 4.8.1 Pruebas de funcionalidad Se realizaron pruebas para verificar el comportamiento de todas las funcionalidades de la aplicación y las más destacadas quedaron registradas en las tablas a continuación: TABLA 16. INICIO DE SESIÓN Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: credenciales incorrectas Entrada: credenciales validas Resultado esperado: se muestra un mensaje de error notificándole al usuario que los campos correo y contraseña son requeridos. Resultado esperado: se muestra un mensaje de error notificándole al usuario que sus credenciales son incorrectas Resultado esperado: se redirige a la página principal y se le indica al usuario que la autenticación fue exitosa Resultado obtenido: se muestra un mensaje de error notificándole al usuario que los campos son requeridos. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que sus credenciales son incorrectas Resultado obtenido: se redirige a la página principal y se le indica al usuario que la autenticación fue exitosa Capítulo IV. Marco aplicativo 70 TABLA 17. RESTABLECER CONTRASEÑA Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: correo no registrado en el sistema Entrada: correo registrado en el sistema Resultado esperado: se muestra un mensaje de error notificándole al usuario que el correo institucional es requerido. Resultado esperado: se muestra un mensaje de error notificándole al correo ingresado no se encuentra registrado en el sistema. Resultado esperado: se envía el correo con la contraseña de recuperación y se notifica al usuario que revise su bandeja de entrada. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que el correo institucional es requerido. Resultado obtenido: se muestra un mensaje de error notificándole al correo ingresado no se encuentra registrado en el sistema. Resultado obtenido: se envía el correo con la contraseña de recuperación y se notifica al usuario que revise su bandeja de entrada. TABLA 18. CAMBIO DE CONTRASEÑA Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: contraseña actual incorrecta Entrada: contraseña actual correcta Resultado esperado: se muestra un mensaje de error notificándole al usuario que los campos de contraseña actual y nueva contraseña con requeridos. Resultado esperado: se muestra un mensaje de error notificando al usuario que la contraseña actual ingresada es incorrecta. Resultado esperado: la contraseña es actualizada y se envía una notificación al usuario. Resultado obtenido: se muestra un mensaje de error notificándole al usuario que los campos de contraseña actual y nueva contraseña con requeridos. Resultado obtenido: se muestra un mensaje de error notificando al usuario que la contraseña actual ingresada es incorrecta. Resultado obtenido: la contraseña es actualizada y se envía una notificación al usuario. Capítulo IV. Marco aplicativo 71 TABLA 19. REALIZAR REGISTRO Primera entrada Segunda entrada Tercera entrada Entrada: vacío Entrada: correo no institucional de la Facultad de Ciencias Entrada: datos correctos Resultado esperado: se muestra un mensaje de error notificándole al usuario los campos obligatorios. Resultado esperado: se muestra un mensaje de error notificando al usuario que debe realizar el registro con un correo institucional de la Facultad de Ciencias Resultado esperado: el registro es realizado exitosamente y se envía una notificación al usuario. Resultado obtenido: se muestra un mensaje de error notificándole al usuario los campos obligatorios. Resultado obtenido: se muestra un mensaje de error notificando al usuario que debe realizar el registro con un correo institucional de la Facultad de Ciencias Resultado obtenido: el registro es realizado exitosamente y se envía una notificación al usuario. 4.8.2 Pruebas de aceptación En la ejecución de las pruebas de aceptación participaron un total de 8 personas con los siguientes perfiles:  4 profesionales en el área de informática con amplios conocimientos en desarrollo de software.  2 estudiantes de la Escuela de Computación de la Universidad Central de Venezuela.  2 profesionales en otras áreas pero usuarios frecuentes del Internet y las redes sociales. Se les describió a los participantes los objetivos del Trabajo Especial de Grado y los requerimientos funcionales del sistema, posteriormente, se les solicitó que realizaran las siguientes acciones en la aplicación sin recibir ningún tipo de instrucción previa:  Búsqueda simple  Búsqueda avanzada  Visitar perfil  Descargar hoja de perfil  Registro en la aplicación (se deshabilitó temporalmente la restricción de registro solo con un correo institucional de la Facultad de Ciencias). Capítulo IV. Marco aplicativo 72  Inicio de sesión  Cambio de clave  Restablecimiento de contraseña  Enviar hoja de perfil por correo electrónico  Contactar al administrador  Agregar una experiencia laboral  Editar una experiencia laboral  Agregar un estudio  Eliminar un estudio  Cerrar sesión Al finalizar, se entrevistó a cada participante realizando las siguientes preguntas:  ¿Tuvo alguna dificultad para completar algunas de las acciones?  ¿Considera que los tiempos de respuesta de la aplicación fueron apropiados?  ¿Definiría su experiencia como positiva?  ¿Cuál es su opinión sobre el diseño de las interfaces?  ¿Considera que la aplicación es fácil de navegar?  ¿Considera que existen elementos en la navegación acerca de donde está y como volver atrás?  ¿Tiene alguna observación o sugerencia que permita mejorar la calidad del sistema?  ¿Considera que la aplicación cumple los objetivos planteados en el Trabajo Especial de Grado? Resultados En general, la experiencia de los participantes al utilizar la aplicación fue satisfactoria y positiva, consideraron que el diseño de las interfaces es intuitivo, agradable y moderno, que la aplicación es fácil de usar, con tiempo de respuestas adecuados y que se cumplen los objetivos propuesto en el Trabajo Especial de Grado. Sin embargo, tuvieron algunas observaciones que fueron recopiladas a continuación: Capítulo IV. Marco aplicativo 73 TABLA 20. OBSERVACIONES DE LOS PARTICIPANTES Número de participantes que hicieron la observación Observación 3 Dificultad para navegar a secciones anteriormente visitadas. 2 Tamaño de letra del documento exportado muy grande. 4 Formato de notificación al usuario no agradable. 1 El autocompletado del buscador principal retorna valores duplicados. 1 Dificultad para realizar una búsqueda avanzada Mejoras aplicadas En base a las observaciones realizadas por los participantes, se realizaron las siguientes mejoras al sistema: Para mejorar la navegabilidad, se agregaron enlaces a las diferentes secciones de la aplicación en la barra de navegación que se encuentra disponible en la parte superior de todas las interfaces (ver Figuras 46, 47 y 48). FIGURA 46 BARRA DE NAVEGACIÓN DE SIGBIC FIGURA 47. OPCIONES DE NAVEGACIÓN PARA EL ADMINISTRADOR Capítulo IV. Marco aplicativo 74 FIGURA 48. OPCIONES DE NAVEGACIÓN PARA EL USUARIO REGISTRADO Se modificó la forma de notificar al usuario el resultado de una acción, que anteriormente se realizaba utilizando una alerta de Javacript. Se corrigió implementando un envío de mensajes más acorde al diseño de la aplicación que podemos observar en las figuras 49 y 50, con un mensaje más conciso al usuario y también se aprovechó el uso de colores para indicar si el resultado ha sido exitoso o fallido. FIGURA 49. NOTIFICACIÓN DE RESULTADO EXITOSO FIGURA 50. NOTIFICACIÓN DE RESULTADO FALLIDO Se ajustó el tamaño de la letra del documento exportado para facilitar la lectura del mismo, se agregaron ejemplos de búsqueda para los campos de la búsqueda avanzada y se especificó que puede ingresar solo uno o más parámetros orientando al usuario de su funcionamiento y finalmente, se modificó la consulta a la base de datos para eliminar los valores duplicados en la autocompletación. Adicionalmente, se siguieron las recomendaciones realizadas por la profesora Yusneyi en las reuniones de seguimiento, y se agregó un buscador en la interfaz de resultados de búsqueda para evitar que el usuario tenga que volver a la página anterior para realizar otra búsqueda, se mejoró la apariencia y utilidad de las hojas de perfil agregando un encabezado, número de página y fecha de exportación, además se permitió enviar la hoja de perfil hasta 5 direcciones de correo electrónico de manera simultánea y se implementó la notificación al usuario cuando intenta ingresar a una sección no autorizada. Capítulo IV. Marco aplicativo 75 4.8.3 Pruebas de rendimiento Las pruebas de rendimiento nos permiten medir la velocidad de ejecución de una tarea en un sistema con condiciones particulares. En las pruebas realizadas, se validó que los tiempos de respuesta de la aplicación cuando el usuario realiza una acción determinada como una búsqueda, carga de información, envío de una hoja de perfil por correo, entre otras cosas, fueran adecuados. Las pruebas más avanzadas se iban a realizar en ambiente de producción en un servidor de la Facultad de Ciencias pero no se pudo completar la instalación del mismo. 4.9 Mejoras incorporadas en esta aplicación TABLA 21 DIFERENCIAS SIGIC - SIGBIC Características SIGIC SIGBIC Modalidad de acceso Restringido, donde sólo las personas registradas pueden acceder a la aplicación y si desean registrarse deben solicitar autorización al administrador. Público, el visitante no necesita estar registrado para acceder a algunas de las funcionalidades del sistema, y el único requisito para que el usuario pueda registrarse es poseer un correo institucional de la Facultad de Ciencias. Diseño de las interfaces Diseño orientado a la gestión de información, donde la información del investigador se encuentra dividida en diferentes interfaces que son accedidas mediante la barra de navegación. Diseño similar a los portales de búsqueda de recursos, donde la información del investigador se encuentra centralizada en una sola interfaz. Tipos de usuario Investigador, administrador de dependencia, administrador global. Visitante, usuario registrado, administrador Roles Los usuarios registrados pueden tener uno o más roles: Investigador, administrador de dependencia, administrador global. Los usuarios registrados pueden tener un solo rol: usuario registrado o administrador Tecnologías utilizadas Ruby, HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap y PostgreSQL. HTML5, CSS3, Angular, Java, Hibernate, Spring, PostgreSQL. Capítulo IV. Marco aplicativo 76 Adicionalmente, SIGBIC brinda nuevas funcionalidades como: - Exportar un perfil mediante descarga o envío por correo electrónico - Sugerencias de perfiles similares en base a los perfiles visitados - Buscador principal de perfiles con autocompletación - Registro de los perfiles más visitados en la aplicación - Búsqueda avanzada de perfiles con uno o más parámetros de búsqueda - Herramienta para el respaldo de la base de datos por el usuario administrador - Posibilidad de filtrar en los resultados de búsqueda Conclusiones y recomendaciones 77 RESULTADOS Y CONCLUSIONES La existencia de una plataforma tecnológica donde se represente de manera sencilla, práctica y completa el conocimiento de una organización como la Facultad de Ciencias, facilitará la transferencia tecnológica a los sectores productivos y de innovación del país que buscan en la Universidad, un posible aliado para proyectos de investigación en diversas áreas, además, permitirá la elaboración de estudios que apoyen a la toma de decisiones y llevar un seguimiento de los recursos que existen actualmente en la Facultad. El estudio de antecedentes sobre aplicaciones relacionadas con la gestión de conocimiento, ayudó a determinar las características esenciales que poseen este tipo de aplicaciones, cómo realizan la recopilación y el almacenamiento de los datos, qué funcionalidades brindan a los usuarios, y cómo garantizan la accesibilidad y disponibilidad de esta información. Por otra parte, se pudo determinar la importancia y utilidad de las metodologías de desarrollo, seleccionando la que se consideró más adecuada al proyecto, la metodología Scrum, que gracias a su agilidad y flexibilidad posibilitó un desarrollo rápido y eficiente de la aplicación, además de facilitar el control de cada etapa del desarrollo permitiendo la organización y estructuración de las tareas a realizar. La selección de las tecnologías a utilizar para el desarrollo del Trabajo Especial de Grado fue acertada. Angular facilitó el desarrollo del lado del cliente, gracias a sus numerosas librerías, que ayudaron a darle estilo a las interfaces y a implementar diversas funcionalidades como la paginación a los resultados de búsqueda y el control de acceso a las diferentes secciones de la aplicación. Spring por su parte, permitió construir una arquitectura orientada a servicios en el lado del servidor, aprovechando el uso de sus componentes prefabricados y sus herramientas para implementar y exponer servicios Web. Finalmente, el uso de HQL, el lenguaje de consulta de Hibernate facilitó el acceso y búsqueda en la base de datos de la aplicación. En general se puede concluir que se lograron los objetivos propuestos en este Trabajo especial de Grado, y que además se logró la adquisición de nuevos conocimientos y experiencias en el proceso de desarrollo de software que proporcionaron crecimiento profesional. Para desarrollos futuros se recomienda:  Implementar el sistema en otras Facultades de la universidad.  Mayor personalización para los visitantes de la aplicación, recomendaciones en base a sus visitas realizadas, guardar el historial de búsqueda, entre otros.  Acceso al sistema desde el sitio web de la Facultad de Ciencias. . Referencias Bibliográficas y Digitales 78 REFERENCIAS BIBLIOGRÁFICAS Y DÍGITALES Academia.edu. (2018). Academia.edu - Share research. [En línea] Recuperado de: https://www.academia.edu/. Adobe Dreamweaver. (2015). Aspectos básicos de las aplicaciones Web. Recuperado de: https://helpx.adobe.com/es/dreamweaver/using/web-applications.html Alegsa, L. (2006). Diccionario de Informática y Tecnología: Definición de Servicio Web. Recuperado de http://www.alegsa.com.ar/Dic/servicio_web.php Avison D. E. y Fitzgerald G. (1995) Information Systems Development: Methodologies, Techniques, and Tools. McGraw-Hill Higher Education. Berni Millet, P. y Gil de la Iglesia, D. (2010) Laboratorio de PHP y MySQL. Eureca Media, SL. Recuperado de: https://openlibra.com/es/book/laboratorio-de-php-y-mysql Carvajal Riola, J. (2008). Metodologías Ágiles: Herramientas y modelo de desarrollo para aplicaciones Java EE como Metodología Empresarial. Universidad Politécnica de Cataluña. Recuperado de https://upcommons.upc.edu/bitstream/handle/2099.1/5608/50015.pdf?sequence=1 Carreño Villalba, R (2015). Aplicación de administración con Angular, Node y Express para una aplicación Django. Universidad de Málaga. Recuperado de https://riuma.uma.es/xmlui/bitstream/handle/10630/11484/Carre%C3%B1o%20Villal ba_TFG.pdf?sequence=1&isAllowed=y Castillo Estrada, C. Cancino Villatoro, K y Álvarez Oval, L (2015). Desarrollo eficiente de aplicaciones empresariales Usando el framework hibernate. Universidad Autónoma de Chiapas, México. Recuperado de https://dialnet.unirioja.es/servlet/articulo?codigo=6041579 Chanchi, G. E., Campo, W. Y, Amaya, J. P. y Arciniegas, J. L. (2011) Esquema de servicios para Televisión Digital Interactiva, basados en el protocolo REST-JSON. Universidad de Cauca, Colombia. Recuperado de http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233- 240/11807 Collell Puig, Jordi (Sin fecha). CSS3 y JavaScript Avanzado. Universitat Oberta de Catalunya, Cataluña, España. Curto Díaz, J. (2011). Introducción al Business Intelligence. Barcelona: Editorial UOC. Recuperado de: https://es.scribd.com/document/256037880/Introduccion-Al- Business-Intelligence Enderica, D. y Pauzhe H. (2017). Desarrollo de una aplicación de Facturación Electrónica utilizando herramientas de Gestión e Integración en Entornos Java. Universidad del Azuay, Ecuador. Disponible en http://dspace.uazuay.edu.ec/handle/datos/6908 https://helpx.adobe.com/es/dreamweaver/using/web-applications.html https://helpx.adobe.com/es/dreamweaver/using/web-applications.html http://www.alegsa.com.ar/Dic/servicio_web.php https://upcommons.upc.edu/bitstream/handle/2099.1/5608/50015.pdf?sequence=1 http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233-240/11807 http://www.seer.ufrgs.br/index.php/cadernosdeinformatica/article/view/v6n1p233-240/11807 http://dspace.uazuay.edu.ec/handle/datos/6908 Referencias Bibliográficas y Digitales 79 Escudero, F. (2017). Qué es LinkedIn, la red social ideal para profesionales. [Online] aboutespanol. Disponible en https://www.aboutespanol.com/que-es-linkedin-primeros- pasos-en-esta-red-social-2878929 Facultad de Ciencias-UCV. (2018). Facultad de Ciencias. [En línea] Recuperado de: http://www.ciens.ucv.ve/ciens/ Fernández Romero, Y. y Díaz González, Y. (2012). Patrón Modelo-Vista-Controlador. Revista Telem@tica. Vol. 11. Recuperado de http://revistatelematica.cujae.edu.cu/index.php/tele/article/view/15/10 Ferrer Martínez, J. (2014). Implantación de aplicaciones Web en entornos Internet, Intranet y Extranet. Ra-ma Editorial. Francia, J. (2017). ¿Qué es Scrum? [Entrada de blog]. Recuperado de https://www.scrum.org/resources/blog/que-es-scrum Galán, H. (2017). WildFly, el servidor de aplicaciones Java que multiplica su rendimiento en Cloud. [Online] Blog de arsys.es. Disponible en: https://www.arsys.es/blog/programacion/wildfly-cloud Gavilanes Blacio, J. L. (2016). Estudio Comparativo de la Productividad entre los Frameworks de Persistencia en Java Hibernate y MYBATIS, Aplicando al Sistema de Evaluación Docente del IPEC. Escuela Superior Politécnica de Chimborazo, Ecuador. Recuperado de http://dspace.espoch.edu.ec/handle/123456789/4730 Gil, L. (2018). Academia.edu: la red social para investigadores. [En línea] Social Media en Investigación - Un proyecto de Lydia Gil. Recuperado de: https://socialmediaeninvestigacion.com/academia-edu-red-social-investigadores Gimson, L. (2012). Metodologías ágiles y desarrollo basado en conocimiento. Universidad Nacional de la Plata, Buenos Aires, Argentina. Recuperado de http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf? sequence=1 Georgiadou E. (2003) Software Process And Product Improvement: A Historical Perspective. Cybernetics and Systems Analysis. Vol. 39, No. 1 Google Inc. (2017). Angular. Recuperado de https://angular.io/ Hergueta, R (2008). Desarrollo de una herramienta para el monitoreo de eventos y actividades de usuarios en aplicaciones Web. Universidad Central de Venezuela, Caracas, Venezuela. Recuperado de http://saber.ucv.ve/bitstream/123456789/7290/1/Tesis%20Ricardo%20Hergueta.pdf Indeed. (2018). Ofertas de trabajo, bolsa de trabajo | Indeed España. [En línea] Recuperado de: https://www.indeed.es/ Johnson, R., Hoeller, J., Arendsen, A., Risberg, T. y Sampaleanu, C. (2005). Professional Java Development with the Spring Framework. Wiley Publishing, Indianapolis. http://revistatelematica.cujae.edu.cu/index.php/tele/article/view/15/10 https://www.scrum.org/resources/blog/que-es-scrum http://dspace.espoch.edu.ec/handle/123456789/4730 http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf?sequence=1 http://sedici.unlp.edu.ar/bitstream/handle/10915/24942/Documento_completo__.pdf?sequence=1 http://saber.ucv.ve/bitstream/123456789/7290/1/Tesis%20Ricardo%20Hergueta.pdf Referencias Bibliográficas y Digitales 80 Korth, H. F., Silberschatz, A. y Sudarshan, F. S. (2002). Fundamentos de bases de datos, Editorial Mc Graw Hill. Recuperado de: https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de- datos-silberschatz-korth-sudarshan.pdf Letelier Torres, P. y Sánchez López, E. (2003). Metodologías Ágiles en el Desarrollo de Software. Grupo ISSI (Ingeniería del Software y Sistemas de Información). 10-11 Recuperado de http://issi.dsic.upv.es/archives/f-1069167248521/actas.pdf Linkedin. (2018). LinkedIn. [En línea] Recuperado de: https://www.linkedin.com Metodologías ágiles de desarrollo software (2015). En Wikiversidad. Recuperado de https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_sof tware Muñoz, J. (2017). Ventajas de las aplicaciones Web. Píxima Internet. Aplicaciones Web y móviles para PYMEs y profesionales. [En línea] Pixima.net Recuperado de: https://www.pixima.net/aplicaciones-web/ventajas-de-las-aplicaciones-web/ Narváez Coello, J (2014). Guía de las mejores prácticas administrativas, seguridad y alta disponibilidad, caso de estudio: PostgreSQL. Pontificia Universidad Católica del Ecuador. Recuperado de http://repositorio.puce.edu.ec/bitstream/handle/ 22000/6386/9.21.000676.pdf?sequence=4&isAllowed=y Olivares Carlos. (2012). GENCI–2 Gestor de Contenido Modular Para la Coordinación de Investigación De la Facultad de Ciencias de la UCV (tesis de pregrado). Escuela de Computación, Facultad de Ciencias de la Universidad Central de Venezuela, Caracas, Venezuela. Ospina Torres, M. (2009) Introducción al manejo de Base de Datos. Facultad de Ciencias, Universidad Central de Venezuela. Recuperado de: http://www.ciens.ucv.ve:8080/genasig/sites/bases-de- datos/archivos/GuiaTeoricaTema1BaseDatos.pdf Ospina Torres, M y Suárez Díaz, S. (2008). Diseño y Desarrollo de una nueva Aplicación Web para la Escuela de Computación de la Universidad Central de Venezuela con Tecnología Ruby On Rails. Universidad Central de Venezuela, Caracas, Venezuela. Recuperado de http://saber.ucv.ve/jspui/handle/123456789/7294 Pérez Mayra. (2017). Solución de Inteligencia de Negocios para el seguimiento de proyectos de investigación de la Facultad de Ciencias, UCV. Universidad Central de Venezuela, Caracas, Venezuela. Pérez Viviana. (2016). Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV. Universidad Central de Venezuela, Caracas, Venezuela. Pernía, F. y Ramírez E. (2015). Desarrollo de un nuevo sitio Web para la Escuela de Computación de la Universidad Central de Venezuela. Facultad de Ciencias, Universidad Central de Venezuela. Recuperado de: http://saber.ucv.ve/handle/123456789/13370 https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de-datos-silberschatz-korth-sudarshan.pdf https://unefazuliasistemas.files.wordpress.com/2011/04/fundamentos-de-bases-de-datos-silberschatz-korth-sudarshan.pdf http://issi.dsic.upv.es/archives/f-1069167248521/actas.pdf https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_software https://es.wikiversity.org/wiki/Metodolog%C3%ADas_%C3%A1giles_de_desarrollo_software https://www.pixima.net/aplicaciones-web/ventajas-de-las-aplicaciones-web/ Referencias Bibliográficas y Digitales 81 Schwaber, K y Beedle, M. (2002). Agile Software Development with Scrum. Upper Saddle River, Prentice Hall. Scrum.org. (2018). ¿Qué es Scrum?. [En línea] Recuperado de: https://www.scrum.org/resources/blog/que-es-scrum The PostgreSQL Global Development Group. (1996-2015). PostgreSQL. Recuperado de http://www.postgresql.org/about/ Wallas, C. (2008). Spring in Action. Manning Publications Co, Estados Unidos de América. Web.usf.edu. (2018). HTML Sample Code. [En línea] Recuperado de: http://web.usf.edu/blwarner/tips/HTMLTips/htmlsamples.htm Wiboo Media. (2017) ¿Qué son las Aplicaciones Web? Ventajas y Tipos de Desarrollo Web. [Online] Recuperado de: https://wiboomedia.com/que-son-las-aplicaciones-web- ventajas-y-tipos-de-desarrollo-web Wikipedia. (2018). Programación por capas. [En línea] Recuperado de: https://es.wikipedia.org/wiki/Programaci%C3%B3n_por_capas Wikipedia. (2018). Desarrollo en cascada. [En línea] Recuperado de: https://es.wikipedia.org/wiki/Desarrollo_en_cascada. W3schools. (2018). W3Schools Online Web Tutorials. [En línea] Recuperado de: https://www.w3schools.com/ https://wiboomedia.com/que-son-las-aplicaciones-web-ventajas-y-tipos-de-desarrollo-web https://wiboomedia.com/que-son-las-aplicaciones-web-ventajas-y-tipos-de-desarrollo-web Anexos 82 Anexos TABLA 22. SERVICIOS WEB PARA AGREGAR UN ELEMENTO Anexos 83 TABLA 23.SERVICIOS WEB PARA MODIFICAR UN ELEMENTO Anexos 84 TABLA 24. SERVICIOS WEB PARA LISTAR ELEMENTOS DE UN USUARIO Anexos 85 TABLA 25. SERVICIOS WEB PARA LA GESTIÓN DE TABLAS AUXILIARES