UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE INVESTIGACION EN SISTEMAS DE INFORMACIÓN Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por la Br. Viviana V. Pérez S. Para optar por el título de Licenciado en Computación Tutoras: Profa. Concettina Di Vasta Profa. Mercy Ospina Caracas, 30 de Mayo de 2016 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN ACTA Quienes suscriben, miembros del jurado designado por el Consejo de la Escuela de Computación, para examinar el Trabajo Especial de Grado titulado “Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV” y presentado por la bachiller: Br. Viviana Pérez, a los fines de optar al título de Licenciado en Computación, dejamos constancia de lo siguiente: Leído como fue dicho trabajo, por cada uno de los miembros del jurado, se fijó el día ___ de ________ de _____, a las ________ horas, para que la autora lo defendiera en forma pública, lo que estos hicieron en la Sala ___ de la Escuela de Computación, mediante una presentación oral de su contenido, luego de lo cual respondieron a las preguntas formuladas. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobar con la nota de ____ puntos. En fe de lo cual se levanta la presente Acta, en Caracas el día ___ de _________ de ____. _________________________________ _________________________________ Profa. Concettina Di Vasta Profa. Mercy Ospina (Tutora) (Tutora) _________________________________ _________________________________ Prof. Pio Arias Profa. Yusneyi Carballo (Jurado) (Jurado) AGRADECIMIENTOS Quiero comenzar agradeciendo a Dios, esa fuerza toda poderosa que siempre me indica el camino correcto a seguir cuando me encuentro desorientada. Quiero agradecerle por cada persona que ha puesto en mi vida durante todos estos años de carrera, ya que todas me han ayudado y enseñado muchas cosas. Quiero agradecer a mis padres, por su amor, por su apoyo, por la educación y los principios que me han dado, porque me han hecho ser la persona que soy ahora, una persona buena, correcta y que da lo mejor de sí. Les agradezco por haberme despertado cada mañana para llegar a tiempo a mis clases y por haberme esperado cada noche a que llegara a casa con bien. Quiero agradecer enormemente a mis queridas profesoras Eleonora y Jossie, por haberme ayudado a volver a la universidad y darme la fuerza de seguir con la carrera. Gracias por haber confiado en mí y darme la oportunidad que me dieron. Nunca olvidaré esa tarde. Todo sucedió en el momento correcto, en el lugar correcto y con las personas correctas. Quiero agradecer a mis también queridas profesoras y tutoras Tina y Mercy, quienes me han dado su cariño y confianza, permitiéndome ser parte de CISI y hacer lo que tanto me gusta, enseñar a los demás. Les agradezco por todo el tiempo que me han dedicado cada vez que he necesito de su ayuda y por todas las palabras de motivación que me han hecho seguir adelante. Quiero agradecer a mi tan apreciado y querido amigo Jhony, por tantos años de amistad, de cariño, confianza y tolerancia hacia mi difícil carácter. Gracias por siempre ayudarme, gracias por siempre motivarme, por estar cuando te necesito, gracias por ser quien eres, gracias por estar en mi vida, gracias. Quiero agradecer a mi buen amigo Victor, que desde que apareció en mi vida siempre ha confiado en mí, me ha ayudado de manera excepcional y me ha dado su apoyo en todo momento, hasta cuando hemos estado molestos. Finalmente quiero agradecer a todas aquellas personas que me dijeron “Sí puedes”, cuando yo sólo me repetía “No puedo, es imposible”. Gracias Daniel, gracias Williams, gracias Jhonatan, gracias a todos. UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE INVESTIGACION EN SISTEMAS DE INFORMACIÓN Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV Autora: Viviana Pérez Tutoras: Profa. Concettina Di Vasta Profa. Mercy Ospina Fecha: 30/05/2016 RESUMEN El presente Trabajo Especial de Grado describe la problemática de la Coordinación de Investigación de la Facultad de Ciencias de la UCV para de registrar y gestionar la información de los profesores y profesionales que realizan actividades de investigación dentro de la Facultad. Conociendo las necesidades e inconvenientes existentes, se plantea el desarrollo de un Sistema de Gestión de Información Científica llamado SIGIC, una aplicación web creada con tecnologías de software libre (HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby, Rails, PostgreSQL y Pentaho Data Integration) y bajo la metodología de desarrollo ágil AgilUs, que permite registrar y gestionar la información, actividades, proyectos y productos producidos por los investigadores de la Facultad de Ciencias de manera rápida y sencilla, en una base de datos centralizada, la cual será de gran utilidad para permitir el pleno funcionamiento de cualquier aplicación que requiera de esta información, así como también para el análisis de datos y toma de decisiones por parte de la Coordinación de Investigación. Palabras clave: investigación, investigadores, información, gestión de información, Coordinación de investigación, aplicación web, AgilUs, Ruby, Rails, PostgreSQL, Pentaho Data Integration. ÍNDICE GENERAL INTRODUCCIÓN ......................................................................................................... I CAPÍTULO 1 PROBLEMA DE INVESTIGACIÓN ................................................................. 1 1.1. PLANTEAMIENTO DEL PROBLEMA ........................................................................... 1 1.2. OBJETIVOS ................................................................................................... 3 1.2.1. Objetivo general ................................................................................... 3 1.2.2. Objetivos específicos ............................................................................. 3 1.3. JUSTIFICACIÓN ............................................................................................... 4 CAPÍTULO 2 MARCO CONCEPTUAL ............................................................................... 5 2.1. ANTECEDENTES .............................................................................................. 5 2.1.1. Registro Nacional de Innovación e Investigación ....................................... 5 2.1.2. Sistema de Acreditación de los Investigadores de la Universidad de Oriente . 7 2.1.3. Directorio Nacional de Investigadores e Innovadores ................................. 9 2.1.4. Características positivas y negativas de los antecedentes ......................... 11 2.2. INVESTIGACIÓN EN LA FACULTAD DE CIENCIAS DE LA UNIVERSIDAD CENTRAL DE VENEZUELA . 12 2.2.1. Estructura organizativa de investigación ................................................ 12 2.2.2. Coordinación de Investigación .............................................................. 13 2.3. ARQUITECTURA CLIENTE-SERVIDOR .................................................................... 15 2.4. APLICACIÓN WEB .......................................................................................... 16 2.4.1. Funcionamiento de una aplicación web .................................................. 16 2.4.2. Ventajas ............................................................................................ 18 2.4.3. Desventajas ....................................................................................... 18 2.4.4. Patrón Modelo Vista Controlador ........................................................... 18 2.5. TECNOLOGÍAS DEL LADO DEL CLIENTE .................................................................. 21 2.5.1. Lenguaje de Marcas de Hipertexto ........................................................ 21 2.5.2. Hojas de Estilo en Cascada ................................................................... 22 2.5.3. JavaScript .......................................................................................... 23 2.5.4. Bootstrap ........................................................................................... 24 2.6. TECNOLOGÍAS DEL LADO DEL SERVIDOR ................................................................ 25 2.6.1. Ruby ................................................................................................. 25 2.6.2. Sistemas Manejadores de Bases de Datos .............................................. 28 2.6.3. Directorio y servicio de directorio .......................................................... 29 2.7. HERRAMIENTAS DE EXTRACCIÓN, TRANSFORMACIÓN Y CARGA ..................................... 31 2.7.1. Pentaho ............................................................................................. 31 CAPÍTULO 3 MARCO METODOLÓGICO ........................................................................ 33 3.1. METODOLOGÍA AGILUS ................................................................................... 33 3.1.1. Ciclo de vida ...................................................................................... 35 3.1.2. Etapas ............................................................................................... 35 3.1.3. Errores comunes ................................................................................. 38 3.1.4. Tabla resumen ................................................................................... 38 CAPÍTULO 4 MARCO APLICATIVO ............................................................................... 40 4.1. USO PARCIAL DE LA METODOLOGÍA AGILUS ........................................................... 40 4.2. PRIMERA ITERACIÓN: ESQUEMA GENERAL DE LA SOLUCIÓN, INTERFAZ PRINCIPAL DE LA APLICACIÓN E INTERFACES PARA UN USUARIO CON PERFIL DE INVESTIGADOR ................................ 41 4.2.1. Etapa de requisitos ............................................................................. 41 4.2.2. Etapa de análisis ................................................................................. 49 4.2.3. Etapa de prototipaje ............................................................................ 63 4.2.4. Cierre de la iteración ........................................................................... 79 4.3. SEGUNDA ITERACIÓN: INTERFAZ DE INICIO DE SESIÓN E INTERFAZ DE SOLICITUD DE REGISTRO .......................................................................................................................... 79 4.3.1. Etapa de análisis ................................................................................. 79 4.3.2. Etapa de prototipaje ............................................................................ 83 4.3.3. Cierre de la iteración ........................................................................... 87 4.4. TERCERA ITERACIÓN: INTERFACES PARA UN USUARIO CON PERFIL DE ADMINISTRADOR (DE DEPENDENCIA O GLOBAL) ............................................................................................ 87 4.4.1. Etapa de análisis ................................................................................. 87 4.4.2. Etapa de prototipaje ............................................................................ 89 4.4.3. Etapa de entrega ................................................................................ 99 CONCLUSIONES .................................................................................................... 106 RECOMENDACIONES Y TRABAJOS FUTUROS ............................................................. 107 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES ........................................................... 108 ANEXOS ............................................................................................................... 111 ÍNDICE DE FIGURAS Figura 2.1 - Página principal del RNII. .......................................................................... 6 Figura 2.2 - Textos de ayuda y metáforas del RNII. ....................................................... 7 Figura 2.3 - Página principal del SAI-UDO. .................................................................... 8 Figura 2.4 - Registro de un estudio en el SAI-UDO. ........................................................ 8 Figura 2.5 - Página principal del DINA. ....................................................................... 10 Figura 2.6 - Registro de un idioma en DINA. ............................................................... 10 Figura 2.7 - Estructura organizativa de investigación de la Escuela de Física de la Facultad de Ciencias de la UCV. ............................................................................................. 13 Figura 2.8 - Arquitectura cliente-servidor. ................................................................... 15 Figura 2.9 - Petición de una página web estática. ........................................................ 17 Figura 2.10 - Petición de una página web dinámica con datos extraídos de una base de datos. .................................................................................................................... 17 Figura 2.11 - Flujo de control del patrón MVC. ............................................................. 20 Figura 2.12 - Estructura básica de una página web con HTML 4.01 y HTML 5. ................. 22 Figura 2.13 - Elemento de CSS. ................................................................................. 23 Figura 2.14 - Ejemplo de código CSS incrustado en HTML. ............................................ 23 Figura 2.15 - Interfaz gráfica de Spoon. ..................................................................... 32 Figura 3.1 - Ciclo de vida AgilUs. ............................................................................... 35 Figura 4.1 - Artefactos y técnicas seleccionadas para cada etapa de la metodología AgilUs. ............................................................................................................................. 40 Figura 4.2 - Notas resultantes de reuniones. ............................................................... 42 Figura 4.3 - Entrevista realizada al Profesor Pio Arias. .................................................. 43 Figura 4.4 - Modelo de casos de uso - Nivel 0. ............................................................ 49 Figura 4.5 - Modelo de casos de uso - Nivel 1. ............................................................ 50 Figura 4.6 - Modelo de casos de uso - Nivel 2. ............................................................ 53 Figura 4.7 - Prototipo en papel y digital de la interfaz principal de la aplicación. .............. 56 Figura 4.8 - Prototipo en papel y digital de una interfaz del investigador......................... 57 Figura 4.9 - Prototipo en papel y digital de una lista de registros agregados por un investigador. ........................................................................................................... 57 Figura 4.10 - Prototipo en papel y digital de una interfaz del administrador..................... 58 Figura 4.11 - Colores principales. .............................................................................. 58 Figura 4.12 - Colores secundarios. ............................................................................. 59 Figura 4.13 - Colores destacados. .............................................................................. 59 Figura 4.14 - Tipografía y color de fuente. .................................................................. 59 Figura 4.15 - Botones. ............................................................................................. 60 Figura 4.16 - Logo con descripción ............................................................................. 60 Figura 4.17 - Logo sin descripción.............................................................................. 60 Figura 4.18 - Arquitectura de la aplicación. ................................................................. 61 Figura 4.19 - Modelo relacional normalizado (primera versión). ..................................... 62 Figura 4.20 - Parte del script SQL de la base de datos de la aplicación. .......................... 63 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569336 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569337 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569338 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569339 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569340 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569341 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569342 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569342 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569343 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569344 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569345 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569345 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569346 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569347 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569348 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569349 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569350 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569351 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569352 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569352 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569353 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569354 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569355 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569356 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569357 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569358 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569359 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569360 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569360 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569361 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569362 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569363 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569364 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569365 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569366 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569367 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569368 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569369 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569370 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569371 Figura 4.21 - Comandos de Rails para el crear CRUD de cada tabla de la base de datos. .. 64 Figura 4.22 - Script SQL de las inserciones realizadas en la base de datos. .................... 64 Figura 4.23 - Interfaz principal de la aplicación. .......................................................... 65 Figura 4.24 - Interfaz de inicio de un investigador. ...................................................... 66 Figura 4.25 - Interfaz de inicio de un investigador en un teléfono móvil. ......................... 66 Figura 4.26 - Interfaz de datos generales del investigador. ........................................... 67 Figura 4.27 - Interfaz con lista de experiencias laborales del investigador. ...................... 68 Figura 4.28 – Metáforas de las acciones a realizar sobre un registro............................... 68 Figura 4.29 - Interfaz para agregar una experiencia laboral. ......................................... 69 Figura 4.30 - Modal para solicitar agregar una institución. ............................................ 70 Figura 4.31 - Configuraciones para enviar correos con ActionMailer. .............................. 70 Figura 4.32 - Mensaje satisfactorio del envío de solicitud para agregar una institución. .... 70 Figura 4.33 - Interfaz para visualizar una experiencia laboral. ....................................... 71 Figura 4.34 - Interfaz para modificar una experiencia laboral. ....................................... 72 Figura 4.35 - Buscador de productos. ......................................................................... 73 Figura 4.36 - Funcionamiento del buscador de productos. ............................................. 73 Figura 4.37 - Formulario de contacto. ........................................................................ 74 Figura 4.38 - Mensaje de espera al agregar una línea de investigación. .......................... 76 Figura 4.39 - Mensaje de error con palabras familiares. ................................................ 76 Figura 4.40 - Confirmación antes de eliminar un registro. ............................................. 76 Figura 4.41 - Metáforas para las acciones: ver, editar y eliminar. .................................. 76 Figura 4.42 - Restricción de una fecha de culminación. ................................................. 77 Figura 4.43 - Lista desplegable de áreas de conocimiento. ............................................ 77 Figura 4.44 - Advertencia emergente al no agregar el documento que respalda la información suministrada por el investigador. ............................................................. 78 Figura 4.45 - Manual de usuario dentro de la aplicación. ............................................... 78 Figura 4.46 - Buscador de producto dentro del formulario agregar. ................................ 79 Figura 4.47 - Prototipo en papel y digital de la interfaz de inicio de sesión. ..................... 80 Figura 4.48 - Prototipo en papel y digital de la interfaz de solicitud de registro. ............... 80 Figura 4.49- Modelo relacional normalizado (última versión). ....................................... 82 Figura 4.50 - Parte del script SQL de la base de datos de la aplicación con las nuevas tablas incorporadas. .......................................................................................................... 83 Figura 4.51 - Comandos de Rails para el crear CRUD de las nuevas tablas de la base de datos ..................................................................................................................... 84 Figura 4.52 - Interfaz de inicio de sesión de la aplicación. ............................................. 84 Figura 4.53 - Configuración para establecer conexión con el directorio de usuarios activos de la Facultad de Ciencias. ........................................................................................ 85 Figura 4.54 - Código que funciona detrás del inicio de sesión. ....................................... 85 Figura 4.55 - Interfaz de solicitud de registro de la aplicación – Mensaje informativo. ...... 86 Figura 4.56 - Interfaz de solicitud de registro de la aplicación - Formulario. .................... 86 Figura 4.57 - Prototipo en papel y digital del menú de las interfaces de un administrador. 88 Figura 4.58 - Prototipo en papel y digital de la interfaz de asignación de roles. ............... 88 Figura 4.59 - Prototipo en papel y digital de la interfaz para gestionar otras tablas. ........ 89 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569372 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569373 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569374 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569375 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569376 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569377 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569378 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569379 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569380 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569381 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569382 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569383 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569384 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569385 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569386 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569387 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569388 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569389 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569390 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569391 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569392 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569393 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569394 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569395 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569395 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569396 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569397 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569398 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569399 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569400 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569401 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569401 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569402 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569402 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569403 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569404 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569404 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569405 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569406 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569407 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569408 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569409 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569410 Figura 4.60 - Interfaz de inicio de un administrador. .................................................... 90 Figura 4.61 - Interfaz con lista de usuarios que puede gestionar el administrador. ........... 91 Figura 4.62 - Interfaz con la lista de roles asignados a cada usuario. ............................. 91 Figura 4.63 - Interfaz con la lista de instituciones registradas en la aplicación. ................ 92 Figura 4.64 - Interfaz para gestionar otras tablas. ....................................................... 93 Figura 4.65 - Información básica de los investigadores en hojas de cálculo (MS Excel). .... 94 Figura 4.66 - Extracción, Transformación y Carga de la información básica de los investigadores realizada en Spoon. ............................................................................ 95 Figura 4.67 - Investigadores cargados en la base de datos. .......................................... 96 Figura 4.68 - Asignación de cargo, escalafón y dedicación a los investigadores realizada con Spoon. ................................................................................................................... 96 Figura 4.69 - Asignación de roles a los investigadores realizada con Spoon. .................... 96 Figura 4.70 - Mensaje satisfactorio al actualizar una información. .................................. 97 Figura 4.71 - Mensaje de error con palabras familiares. ................................................ 97 Figura 4.72 - Confirmación antes de eliminar un registro. ............................................. 97 Figura 4.73 - Metáforas para las acciones: ver, editar y eliminar. .................................. 98 Figura 4.74 - Ejemplo de un campo con limitación de caracteres. .................................. 98 Figura 4.75 - Lista desplegable de dependencias. ........................................................ 98 Figura 4.76 - Advertencia al no seleccionar un tipo de institución. ................................. 99 Figura 4.77 - Resultados de las preguntas de la sección de Interfaz. ............................ 101 Figura 4.78 - Resultados de las preguntas de la sección de Navegación. ...................... 102 Figura 4.79 - Resultados de las preguntas de la sección de Inicio de sesión y registro. ... 102 Figura 4.80 - Resultados de las preguntas de la sección de Logotipo. ........................... 103 Figura 4.81 - Resultados de las preguntas de la sección de Funcionalidades específicas (investigador). ...................................................................................................... 104 Figura 4.82 - Resultados de las preguntas de la sección de Funcionalidades específicas (administrador). .................................................................................................... 104 Figura 4.83 - Resultados de las preguntas de la sección General.................................. 105 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569411 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569412 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569413 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569414 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569415 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569416 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569417 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569417 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569418 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569419 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569419 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569420 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569421 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569422 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569423 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569424 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569425 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569426 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569427 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569428 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569429 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569430 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569431 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569432 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569432 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569433 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569433 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569434 ÍNDICE DE TABLAS Tabla 2.1 - Características positivas y negativas de los antecedentes. ............................ 11 Tabla 3.1 - Resumen de la Metodología AgilUs ............................................................. 39 Tabla 4.1 - Evaluación del sistema RNII ..................................................................... 44 Tabla 4.2 - Evaluación del sistema DINA ..................................................................... 44 Tabla 4.3 - Perfil de usuario de un Visitante ................................................................ 45 Tabla 4.4 - Perfil de usuario de un Investigador. .......................................................... 45 Tabla 4.5 - Perfil de usuario de un Administrador de dependencia .................................. 46 Tabla 4.6 - Perfil de usuario de un Administrador global ............................................... 46 Tabla 4.7 - Caso de uso Solicitar registro .................................................................... 50 Tabla 4.8 - Caso de uso Contactar el administrador ..................................................... 51 Tabla 4.9 - Caso de uso Iniciar sesión ........................................................................ 51 Tabla 4.10 - Caso de uso Agregar información general e investigativa ............................ 51 Tabla 4.11 - Caso de uso Agregar usuario ................................................................... 52 Tabla 4.12 - Caso de uso Asignar rol .......................................................................... 52 Tabla 4.13 - Caso de uso Gestionar información de la aplicación .................................... 53 Tabla 4.14 - Caso de uso Visualizar información general e investigativa ......................... 54 Tabla 4.15 - Caso de uso Modificar información general e investigativa .......................... 54 Tabla 4.16 - Caso de uso Eliminar información general e investigativa ........................... 54 Tabla 4.17 - Caso de uso Visualizar usuario ................................................................ 55 Tabla 4.18 - Caso de uso Modificar usuario ................................................................. 55 Tabla 4.19 - Caso de uso Eliminar usuario .................................................................. 55 Introducción I INTRODUCCIÓN La Facultad de Ciencias de la Universidad Central de Venezuela está conformada por Escuelas e Institutos, y éstas a su vez por Centros y Laboratorios de Investigación, donde profesores y otros profesionales llevan a cabo investigaciones continuamente en una determinada disciplina o área de conocimiento. Para mantener la organización de las unidades de investigación de la Facultad, existe una Coordinación de Investigación, que se encarga de fijar políticas, administrar fondos y recursos, proteger y apoyar proyectos de investigación, entre otras actividades. Esta Coordinación dispone de algunas aplicaciones web para difundir información, publicar actividades y divulgar las investigaciones que se están realizando en los Centros y Laboratorios de Investigación. Sin embargo, no cuenta con un repositorio donde pueda centralizar la información (general, académica, laboral, productos de investigación, etc.) de las personas que realizan dichas investigaciones. La Coordinación de Investigación ha estado recabando la información de los investigadores en hojas de cálculo (MS Excel), pero este método de almacenamiento dificulta el registro y la administración de dicha información. Por tal motivo, el objetivo de este Trabajo Especial de Grado es aplicar conceptos, métodos y herramientas para desarrollar una aplicación que permita registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. Para lograr esto, se estructuró este Trabajo Especial de Grado en cuatro (4) capítulos. El Capítulo 1, “Problema de Investigación”, en el cual se plantea el problema al que se le da solución en este Trabajo Especial de Grado, los objetivos y la justificación del mismo. El Capítulo 2, “Marco Conceptual”, que consta de los antecedentes a este trabajo y de todos los conceptos relevantes y necesarios para el desarrollo de la aplicación. El Capítulo 3, “Marco Metodológico”, que describe la metodología tomada en consideración para solucionar el problema planteado, y por último, el Capítulo 4, “Marco Aplicativo”, donde se explica en detalle cómo se desarrolló toda la aplicación bajo un uso parcial de la metodología AgilUs y los resultados obtenidos. Para culminar se exponen la conclusiones, recomendaciones y referencias bibliográficas manejadas. Capítulo 1- Problema de investigación 1 CAPÍTULO 1 PROBLEMA DE INVESTIGACIÓN 1.1. Planteamiento del problema La Facultad de Ciencias de la Universidad Central de Venezuela (UCV) está conformada por cinco (5) Escuelas y cuatro (4) Institutos:  Escuela de Biología.  Escuela de Computación.  Escuela de Física.  Escuela de Matemática.  Escuela de Química.  Instituto de Ciencias de la Tierra.  Instituto de Zoología y Ecología Tropical.  Instituto de Ciencias de Tecnología de Alimentos.  Instituto de Biología Experimental. Cada Escuela e Instituto cuenta con varios Centros y Laboratorios de Investigación, donde profesores y otros profesionales, se encargan de realizar investigaciones en una determinada disciplina o área de conocimiento. Para apoyar las actividades de investigación y administrar los fondos y recursos de cada Centro y Laboratorio de Investigación, la Facultad de Ciencias cuenta con una Coordinación de Investigación, la cual fue aprobada y creada en el año 1991. La creación de esta Coordinación constituyó un hecho muy significativo, ya que se le dio a la “Investigación” la jerarquía que le corresponde dentro de una comunidad científica que ofrece un gran y muy calificado aporte a la Ciencia y la Tecnología del país (Coordinación de Investigación, 2011). “La Coordinación de Investigación está constituida por un Coordinador y por un Consejo de Investigación” (Coordinación de Investigación, 2011), y cuenta con dependencias que se especializan en el área de cada Escuela e Instituto de la Facultad. Actualmente, esta Coordinación dispone de un sitio web para apoyar la difusión de conocimiento científico, tecnológico y la promoción de las actividades de los Centros y Laboratorios de Investigación de las Escuelas e Institutos de la Facultad. El sitio web se encuentra disponible en la siguiente dirección: http://www.coordinv.ciens.ucv.ve/. También, dispone de una aplicación web que fue elaborada en el año 2006, llamada GENCI (Generador de Sitios Web de Centros de Investigación), herramienta muy útil que permite crear, publicar y mantener sitios webs de los Centros de Investigación de la Facultad de Ciencias de manera rápida y sencilla, con el fin de difundir el conocimiento científico y facilitar la comunicación entre dichos Centros de Investigación (Borges y Rivero, 2006). Esta http://www.coordinv.ciens.ucv.ve/ Capítulo 1- Problema de investigación 2 aplicación ha sido utilizada durante varios años, pero lógicamente, con el tiempo se han ido encontrando algunas limitaciones e inconvenientes que esperan ser solucionados en su totalidad. Algunas de las limitaciones de GENCI son (Olivares, 2012):  No se pueden crear sub-dependencias de las dependencias ya existentes en la aplicación, por lo que existe un problema de jerarquización.  Todo el contenido es estático, es decir, no se pueden agregar nuevas publicaciones dinámicamente.  Sólo se tiene un usuario administrador, lo cual limita el manejo de contenido.  No hay forma de guardar información de los investigadores de la Facultad, como por ejemplo, información académica, laboral, productos y proyectos de investigación, reconocimientos, etc. Para solucionar algunas de las limitaciones de GENCI, en el año 2012 se creó una segunda versión de esta aplicación, llamada GENCI-2, que dispone de nuevas funcionalidades, como la creación de usuarios con diferentes roles para la administración de la aplicación a distintos niveles de seguridad, la creación de publicaciones dinámicas de noticias y artículos con contenido multimedia, la elaboración de menús personalizados para cada dependencia, y la funcionalidad más importante, la creación de páginas web para cada dependencia y sub-dependencia de la Coordinación de Investigación, solucionando así el problema de jerarquía dentro de la aplicación (Olivares, 2012). Hasta el momento, GENCI-2 no se ha podido poner totalmente en funcionamiento y a disposición de la Coordinación de Investigación, debido a que en algunas partes de la aplicación es necesaria la información de los investigadores de la Facultad y esta no fue incorporada en el desarrollo de GENCI-2 por no ser parte del alcance de dicho proyecto, pero cuenta con una funcionalidad que permite que se pueda conectar a otra base de datos para incorporar esta información en las áreas establecidas Para intentar solucionar esta limitación, la Coordinación de Investigación ha estado recabando en hojas de cálculo (MS Excel), cierta información de los investigadores, pero este método de almacenamiento de datos tiene algunos inconvenientes, por ejemplo, no se puede tener un acceso concurrente de múltiples usuarios a la información, no se pueden establecer niveles de seguridad o realizar consultas complejas, que sí se podrían realizar si se implementa un sistema de base de datos y se desarrolla una aplicación que facilite el almacenamiento y la gestión de la información recopilada. En este sentido, la Coordinación de Investigación requiere de una base de datos donde se pueda almacenar la información de todas las personas que realizan actividades de investigación en la Facultad, y de una aplicación que permita, de manera sencilla, registrar y administrar dicha información, que luego pueda ser utilizada por otras aplicaciones, por ejemplo GENCI-2. Capítulo 1- Problema de investigación 3 1.2. Objetivos 1.2.1. Objetivo general Desarrollar una aplicación web que permita registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. 1.2.2. Objetivos específicos 1. Analizar los requerimientos funcionales y no funcionales de la aplicación a desarrollar. 2. Diseñar e implementar la base de datos donde se almacena la información de los investigadores de la Facultad de Ciencias a partir de una versión inicial de la base de datos del Registro Nacional de Innovación e Investigación (RNII). 3. Diseñar las interfaces de la aplicación web que permiten almacenar y gestionar, de manera sencilla, la información de los investigadores de la Facultad. 4. Implementar las funcionalidades necesarias de la aplicación web. 5. Cargar en la base de datos de la aplicación la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación. 6. Elaborar un manual de usuario de la aplicación web. 7. Realizar pruebas de funcionalidad y de aceptación de la aplicación web. Capítulo 1- Problema de investigación 4 1.3. Justificación A partir del desarrollo de esta aplicación web, se superará la problemática planteada, permitiendo a los investigadores de la Facultad de Ciencias la facilidad de registrar toda su información (general, académica, laboral, proyectos, productos, etc.) de manera rápida, fácil y sencilla en una base de datos centralizada, y a la Coordinación de Investigación la manipulación y gestión de la información recopilada. Por otra parte, el desarrollo de este Trabajo Especial de Grado permite la obtención de los siguientes beneficios:  Tener la información de los investigadores de la Facultad de Ciencias en una base de datos centralizada y estandarizada.  Utilizar la información recopilada para análisis de datos y toma de decisiones por parte de la Coordinación de Investigación.  Permitir el pleno funcionamiento de la aplicación web GENCI-2, ya que ésta se integrará más adelante con la base de datos de los investigadores. Capítulo 1- Problema de investigación 5 CAPÍTULO 2 MARCO CONCEPTUAL Conocer los antecedentes y las bases conceptuales de un trabajo de investigación siempre es útil para tener una idea de cómo abordarlo; por tal motivo, en este capítulo se trata en detalle el estado actual de aplicaciones relacionadas con la gestión de información de investigadores y conceptos relacionados. 2.1. Antecedentes En Venezuela y en otras partes del mundo se han realizado diversas aplicaciones web relacionadas con la gestión de información de investigadores. Por ejemplo, en Venezuela se cuenta con el Registro Nacional de Innovación e Investigación (RNII) y el Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO), en Perú se tiene el Directorio Nacional de Investigadores e Innovadores (DINA). 2.1.1. Registro Nacional de Innovación e Investigación El Observatorio Nacional de Ciencia, Tecnología e Innovación (ONCTI), entre el 2010- 2012 crea el Registro Nacional de Innovación e Investigación (RNII), que es un “sistema automatizado que permite registrar los datos fundamentales de todas las personas e instituciones que realizan actividades de innovación e investigación en la República Bolivariana de Venezuela” (MCTI, 2011). El objetivo principal de este sistema es ordenar y sistematizar la información de los investigadores e innovadores de Venezuela y servir como herramienta para orientar las políticas e inversiones dirigidas hacia la solución de los problemas más relevantes del país (MCTI, 2011). Además, el registro en el RNII permite a los investigadores e innovadores poder participar en el Programa de Estímulo a la Investigación (PEI), que es un programa del gobierno que busca incentivar, impulsar, fomentar y promover el desarrollo de la Ciencia, Tecnología e Innovación, reconociendo la trayectoria de los investigadores e innovadores que han desarrollado proyectos durante los últimos cinco (5) años en el país y ayudándolos financieramente (Consejo Directivo del ONCTI, 2015). En el sistema RNII, los investigados ingresan su información y sus documentos en nueve (9) secciones distintas. Dicha información es almacenada en una base de datos relacional normalizada. Capítulo 1- Problema de investigación 6 Las secciones son:  Información general.  Información académica.  Experiencia laboral.  Productos de investigación.  Proyectos de investigación.  Formación de talento.  Actividades de Ciencia, Tecnología e Innovación (CTI).  Participación en eventos científicos y de innovación.  Actividades adicionales. Los documentos como títulos académicos, reconocimientos, cursos, entre otros, deben estar digitalizados y en formato PDF para poder cargarlos en el sistema. Desde los inicios de la aplicación, las interfaces han sido sencillas y fáciles de usar por los usuarios. En el año 2015, la aplicación tuvo una renovación de imagen buscando aumentar la usabilidad y la facilidad para que los investigadores e innovadores pudieran registrar su información; la interfaz tiene un diseño adaptativo, se agregaron más textos de ayuda, más metáforas y botones coloridos. Aunque cabe acotar que algunas de las nuevas metáforas utilizadas no son del todo intuitivas y los colores seleccionados para la aplicación cansa un poco la vista. En la Figura 2.1 se muestra la página principal del sistema RNII y en la Figura 2.2 se puede observar el uso de metáforas y textos de ayuda en la aplicación. Figura 2.1 - Página principal del RNII. Capítulo 1- Problema de investigación 7 La aplicación no cuenta con un manual de usuario actualizado y acorde a la nueva interfaz de usuario, pero se puede encontrar el manual anterior, que no difiere en cuanto a la explicación de la información que se debe ingresar en el sistema: http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download =118:manual-rnii&id=11:documentos&Itemid=124 2.1.2. Sistema de Acreditación de los Investigadores de la Universidad de Oriente El Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO) es un instrumento institucional para la clasificación del personal docente de la Universidad de Oriente (UDO) de Venezuela que ejerce labores de investigación. Se fundamenta en criterios de productividad científica y es la base para la implementación de un sistema de reconocimiento del desarrollo destacado en tan importante misión académica, llamado Programa de Apoyo al Investigador Consolidado de la Universidad de Oriente (PAIC-UDO) (SAI-UDO, 2011). El PAIC-UDO es un programa de apoyo y reconocimiento a los investigadores, el cual asigna recursos presupuestarios para la financiación en la adquisición de bienes, materiales, servicios, asistencia a eventos científicos, organización de eventos científicos o para invitaciones a investigadores de otras instituciones (SAI-UDO, 2011). En el sistema SAI-IDO, los investigados que aspiran a ser acreditados, deben ingresar su información y sus documentos en siete (7) secciones distintas. Dichos documentos (títulos académicos, reconocimientos, cursos, entre otros) deben estar en formato PDF. Las secciones son:  Información general.  Información académica.  Experiencia laboral.  Asesorías de trabajos de grado. Figura 2.2 - Textos de ayuda y metáforas del RNII. http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=118:manual-rnii&id=11:documentos&Itemid=124 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=118:manual-rnii&id=11:documentos&Itemid=124 Capítulo 1- Problema de investigación 8  Productos de investigación.  Proyectos de investigación.  Grupo de investigación. Por otra parte, las interfaces de usuario son sencillas y fáciles de usar, con un diseño minimalista y muy limpio. Dispone de textos de ayuda en los campos a completar y de algunas metáforas. La aplicación permite al investigador actualizar, borrar y visualizar la información registrada. En la Figura 2.3 se muestra la página principal del sistema SAI-UDO y en la Figura 2.4 se puede ver un formulario para registrar un estudio alcanzado por el investigador. Figura 2.3 - Página principal del SAI-UDO. Figura 2.4 - Registro de un estudio en el SAI-UDO. Capítulo 1- Problema de investigación 9 Para el desarrollo de la aplicación se utilizaron algunas tecnologías como PHP, la biblioteca jQuery de JavaScript y el Sistema Manejador de Base de Datos PostgreSQL. En la página principal de la aplicación (http://www.saiudo.ci-udo.com.ve/) se puede encontrar el manual de usuario del sistema y otros documentos importantes. 2.1.3. Directorio Nacional de Investigadores e Innovadores El Directorio Nacional de Investigadores e Innovadores, DINA, creado por el Consejo Nacional de Ciencia, Tecnología e Innovación Tecnológica (CONCYTEC), es una base de datos que registra las hojas de vida de los profesionales peruanos que realizan actividades de ciencia, tecnología e innovación (CTI), tanto en el país como en el extranjero (DINA, 2015). DINA “contribuye a dar visibilidad a la labor de los investigadores e innovadores peruanos, así como a vincularlos con sus pares para que puedan generar múltiples oportunidades de potenciar sus redes de colaboración” (DINA, 2015). Algunos de los beneficios que otorga DINA a los investigadores e innovadores son:  Participar por ayudas económicas (subvenciones).  Acceder a bases de datos bibliográficas, redes especializadas y revistas científicas a texto completo.  Exportar el Currículum Vitae (CV) en múltiples formatos, como PDF y RTF. Al igual que los sistemas venezolanos explicados anteriormente, en el sistema DINA, los investigadores e innovadores deben ingresar su información y sus documentos en distintas secciones, en este caso, en nueve (9) secciones parecidas a los otros sistemas:  Datos generales.  Experiencia laboral.  Formación académica.  Idiomas.  Líneas de investigación.  Proyectos (I+D+i).  Producción tecnológica y/o industrial.  Producción científica.  Distinciones y premios. Por otro lado, las interfaces del sistema son atractivas, hacen buen uso de los colores y utilizan imágenes llamativas. El uso de metáforas es escaso pero se cuentan con suficientes textos de ayuda. Es importante resaltar que algunos formularios están un poco desordenados y unos se despliegan en una ventana emergente y otros no. http://www.saiudo.ci-udo.com.ve/ Capítulo 1- Problema de investigación 10 En la Figura 2.5 se muestra la página principal del sistema DINA y en la Figura 2.6 se puede ver un formulario para registrar un nuevo idioma, junto con una tabla resumen de los idiomas ya registrados por ese usuario en la base de datos. Figura 2.5 - Página principal del DINA. Figura 2.6 - Registro de un idioma en DINA. Capítulo 1- Problema de investigación 11 El sistema dispone de un manual de usuario muy completo y detallado, incluso incorpora videos de ayuda. El manual se puede ver en el siguiente enlace: https://sites.google.com/a/concytec.gob.pe/manual-dina/ 2.1.4. Características positivas y negativas de los antecedentes Los antecedentes estudiados permiten tener una idea de lo que se desea o no implementar en la aplicación a desarrollar, por lo que a continuación se analiza en la tabla 2.1 las características positivas y negativas de cada antecedente. Tabla 2.1 - Características positivas y negativas de los antecedentes. Antecedente Características positivas Características negativas RNII - El uso de listas desplegables, calendarios y buscadores en los formularios facilitan el ingreso de la información y la prevención de errores. - El diseño adaptativo de las interfaces de la aplicación resulta muy adecuado para estos tiempos donde la mayoría de aplicaciones son utilizadas desde distintos dispositivos. - Algunas metáforas utilizadas en la aplicación no resultan intuitivas, por lo que pueden causar confusión. - El uso excesivo de colores en la aplicación puede distraer y cansar a la vista. SAI-UDO - El diseño minimalista y limpio de la aplicación resulta agradable y no cansa a la vista. - Los campos de autocompletar en los formularios ayudan al usuario a escribir menos. - Para algunos usuarios el color gris de fondo en los formularios podría ser aburrido. DINA - La colocación del menú en forma horizontal permite una mejor visibilidad de las secciones de la aplicación. - Los buscadores incorporados en la interfaz principal son de mucha utilidad para usuarios visitantes y otros investigadores. - El manual de usuario se presenta de una manera vistosa, rápida y fácil de leer. - El uso de ventanas emergentes en algunos formularios y otros no, hace perder la consistencia de las interfaces. - La desorganización de los campos de algunos formularios podrían desorientar al usuario. https://sites.google.com/a/concytec.gob.pe/manual-dina/ Capítulo 1- Problema de investigación 12 2.2. Investigación en la Facultad de Ciencias de la Universidad Central de Venezuela La Facultad de Ciencias es una de las facultades de la Universidad Central de Venezuela que ofrece continuamente aportes a la Ciencia y a la Tecnología del país, ya que en ella se realizan numerosas investigaciones en las distintas Escuelas e Institutos que la conforman. 2.2.1. Estructura organizativa de investigación La Facultad de Ciencias está conformada por cinco (5) Escuelas (Biología, Computación, Física, Matemática y Química) y cuatro (4) Institutos (Ciencias de la Tierra, Zoología y Ecología Tropical, Ciencias de Tecnología de Alimentos y Biología Experimental), donde grupos de investigadores, profesores o profesionales se dedican a la búsqueda y experimentación de diferentes líneas de investigación en Centros y Laboratorios de Investigación. En los Centros de Investigación se realizan constantemente actividades de investigación científica y/o tecnológica, que favorezcan el desarrollo del país y el bienestar de la sociedad venezolana, como por ejemplo: captación y entrenamiento de capital humano, transferencia de tecnología, difusión, divulgación científica y gestión, seguimiento y evaluación de procesos de ciencia y tecnología (Borges y Rivero, 2006). En los Laboratorios de Investigación se elaboran y ejecutan proyectos de investigación, se contribuye con la formación de investigadores, se organizan y/o dictan cursos, se brinda asesoramiento y se gestionan recursos económicos y materiales. Normalmente, los Laboratorios de Investigación están adscritos a un Centro de Investigación, pero también pueden existir Laboratorios que no pertenezcan a ningún Centro. Ésto ocurre porque no hay un Centro relacionado con la línea de investigación del Laboratorio y porque la cantidad de investigadores pertenecientes a dicho Laboratorio no es suficiente para crear un nuevo Centro y así poder cumplir con todas las formalidades necesarias. En la Figura 2.7 se puede ver un ejemplo de una escuela de la Facultad de Ciencias que tiene Laboratorios de Investigación que no están adscritos a un Centro de Investigación. Capítulo 1- Problema de investigación 13 2.2.2. Coordinación de Investigación La Coordinación de Investigación de la Facultad de Ciencias es un ente administrativo que se ocupa de la promoción y el apoyo de actividades de investigación, así como también del fomento de relaciones con entes universitarios, gubernamentales y privados, dedicados al financiamiento de la ciencia. Fue creada por aprobación de la Facultad de Ciencias, en diciembre de 1991. Inicialmente existía una Comisión de Investigación adscrita a la Coordinación de Postgrado formada por los Coordinadores de Investigación de las escuelas, Centros e Institutos de la Facultad de Ciencias, la cual había sido creada por el Consejo de Facultad en enero de 1986 (Coordinación de Investigación, 2011). La Coordinación de Investigación está constituida por un Coordinador y por un Consejo de Investigación. El Consejo está formado por el Coordinador de Investigación quién lo preside, los representantes de cada uno de los Consejos Técnicos de los institutos, los representantes de las Comisiones de Investigación de cada una de las escuelas y representantes de la Facultad ante el Consejo de Desarrollo Científico y Humanístico (CDCH) (Coordinación de Investigación, 2011). Entre sus funciones esenciales está realizar el balance de la investigación que se realiza anualmente en la Facultad, analizar y promover el potencial productivo de la misma, dar a conocer a los diferentes entes del entorno nacional el resultado de las investigaciones y Figura 2.7 - Estructura organizativa de investigación de la Escuela de Física de la Facultad de Ciencias de la UCV. Fuente: Coordinación de la Investigación de la Facultad de Ciencias (2011). Capítulo 1- Problema de investigación 14 facilitar la conexión entre los investigadores y las instituciones externas que puedan promover financiamiento a la actividad de investigación (Coordinación de Investigación, 2011). El Consejo de Investigación tiene las siguientes atribuciones (Coordinación de Investigación, 2011):  Proponer al Consejo de Facultad lineamientos generales de política para las actividades de investigación de la Facultad, así como las normas que obliguen a su cumplimiento.  Velar por el uso adecuado de los recursos ordinarios y extraordinarios destinados a la investigación en la Facultad.  Mantener una base de datos de los recursos de investigación en la Facultad de Ciencias.  Proponer al Consejo de Facultad los Representantes de la Coordinación de Investigación ante organismos o entes del Gobierno.  Proponer programas de investigación que se consideren necesarios a objeto de solucionar problemas prioritarios en nuestra sociedad.  Velar porque las actividades de investigación de la Facultad reciban el apoyo de los recursos y hacer la distribución racional del mismo.  Estudiar y evaluar las proposiciones de creación de Institutos y Centros de Investigación, Laboratorios de Investigación y Laboratorios de Apoyo a la Investigación dentro de la Facultad, y hacer las recomendaciones correspondientes.  Estimular y orientar las solicitudes de fondos por parte de las diferentes estructuras organizativas de investigación de la Facultad ante entes intra y extrauniversitarios que la fomentan.  Divulgar el potencial investigativo de la Facultad de Ciencias, así como los resultados de investigaciones ya realizadas, distinciones y/o premios.  Fomentar la creación de Grupos Interdisciplinarios de Investigación, dentro y fuera de la Facultad.  Propiciar la realización de eventos que beneficien las actividades de investigación de la Facultad tales como: Seminarios, Jornadas, Conferencias, Cursos y Reuniones. Capítulo 1- Problema de investigación 15 2.3. Arquitectura Cliente-Servidor La arquitectura cliente-servidor es una arquitectura de procesamiento cooperativo, formada por dos (2) componentes principales: clientes y servidores. El cliente se encarga de iniciar la comunicación con el servidor a través de la red, emitiendo solicitudes de recursos o peticiones de servicios, como por ejemplo consultar una información o solicitar un archivo, y el servidor se encarga de atender las solicitudes realizadas por los clientes, respondiendo con el recurso o la información solicitada (Olivares, 2012). El servidor suele estar ubicado en un equipo con grandes capacidades de almacenamiento y procesamiento, para poder atender de forma eficiente las peticiones realizadas por los clientes. Existen distintos tipos de servidores como los servidores web, que almacenan principalmente documentos HTML (HyperText Markup Language, Lenguaje de Marcas de Hipertexto), los servidores de base de datos, que dan servicios de almacenamiento y gestión de bases de datos a sus clientes, los servidores del correo, que almacenan, envían, reciben y realizan todas las operaciones relacionadas con el correo electrónico de sus clientes, entre otros tipos de servidores. En la Figura 2.8 se puede observar la representación de un cliente-servidor: Algunas de las características principales de esta arquitectura son (Olivares, 2012):  El cliente mantiene un papel activo en la comunicación, debido a que inicia la comunicación a través de solicitudes.  El cliente espera y recibe respuestas del servidor.  Un cliente puede comunicarse con más de un servidor de manera concurrente.  El cliente es el componente del sistema que interactúa de manera directa con el usuario final, a través de una interfaz gráfica.  El servidor permanece en espera de solicitudes, por lo tanto se considera que tiene un papel pasivo en la comunicación.  Un servidor puede recibir y mantener la conexión con diversos clientes al mismo tiempo, sin embargo el número máximo de conexiones posibles es limitado. Figura 2.8 - Arquitectura cliente-servidor. Capítulo 1- Problema de investigación 16 2.4. Aplicación web Una aplicación web, es un sitio web, que contiene páginas con contenido sin determinar, parcialmente o en su totalidad. El contenido final de una página se determina sólo cuando el usuario solicita una página del servidor web, a través de Internet o de una Intranet mediante un navegador web. Dado que el contenido final de la página varía de una petición a otra en función de las acciones del visitante, este tipo de página se denomina página dinámica (Adobe Dreamweaver, 2015). 2.4.1. Funcionamiento de una aplicación web Las aplicaciones web se basan en la arquitectura cliente-servidor, explicada anteriormente, donde el cliente es un navegador web y el servidor es un servidor web que almacena las páginas de la aplicación. El funcionamiento de una aplicación web es sencillo, el cliente emite una petición de una página web estática o dinámica al servidor web, y éste devuelve la página solicitada. Una página web estática, es aquélla que no cambia cuando un usuario la solicita: el servidor web envía la página al navegador web solicitante sin modificarla. Por el contrario, una página web dinámica sí cambia cuando un usuario la solicita, ya que tiene líneas de código no determinadas: el servidor web transfiere la página a un software especial, llamado servidor de aplicaciones, que se encarga de leer el código de la página y finalizarla en función de las instrucciones de dicho código. El resultado es una página estática (código HTML puro) que el servidor de aplicaciones devuelve al servidor web, que a su vez la envía al navegador solicitante (Adobe Dreamweaver, 2015). El servidor de aplicaciones también permite trabajar con recursos del lado del servidor, como las bases de datos. Sin embargo, el servidor de aplicaciones no puede comunicarse con la base de datos directamente, necesita de un controlador que actúe de intermediario para establecer la comunicación con ésta (Adobe Dreamweaver, 2015). En la Figura 2.9 se puede observar el proceso para solicitar una página web estática al servidor web y en la Figura 2.10 el proceso para solicitar una página web dinámica al servidor de aplicaciones con datos extraídos de una base de datos. Capítulo 1- Problema de investigación 17 Aunque los servidores web están principalmente diseñados para presentar contenido estático, hoy en día la mayoría de éstos tienen complementos para soportar lenguajes de scripting (guiones) como Perl, PHP, ASP (Active Server Pages), entre otros, pudiendo servir contenido dinámico sin necesidad de comunicarse con un servidor de aplicaciones. También, muchos de los servidores de aplicaciones de la actualidad son capaces de hacer lo que un servidor web es capaz de hacer, es decir, que pueden servir tanto contenido dinámico como estático. Figura 2.9 - Petición de una página web estática. Fuente: Adobe Dreamweaver (2015). Figura 2.10 - Petición de una página web dinámica con datos extraídos de una base de datos. Fuente: Adobe Dreamweaver (2015). Capítulo 1- Problema de investigación 18 2.4.2. Ventajas Algunas de las ventajas de las aplicaciones web son:  Las aplicaciones web pueden ser utilizadas por múltiples usuarios al mismo tiempo.  No necesitan ser descargadas, instaladas y configuradas. Se acceden vía en línea y están listas para trabajar sin importar cuál es su configuración o su hardware.  Una aplicación web se puede ejecutar en múltiples plataformas (hardware o sistema operativo), ya que sólo se necesita de un navegador web para cada plataforma.  Todos los cambios de interfaz o de funcionalidad que se deseen hacer en la aplicación web, se realizan en el código que reside en el servidor web y no en cada uno de los clientes.  Se evitan problemas de inconsistencia de actualizaciones, ya que no existen clientes con distintas versiones de la aplicación. 2.4.3. Desventajas Algunas desventajas son:  Los múltiples accesos realizados en forma simultánea pueden degradar el rendimiento de las aplicaciones, debido a la sobrecarga del servidor donde se encuentran alojadas.  Como el navegador es la herramienta utilizada para ejecutar las aplicaciones web, éstas dependen de la configuración del mismo, para que puedan trabajar de forma óptima, ya sea en cuanto a las Cookies, JavaScript o archivos Flash.  Si el servidor donde está almacenada la aplicación web y la información no tiene los niveles de seguridad necesarios para resguardar los datos, éstas pueden ser vulnerables a los ataques de agentes maliciosos. 2.4.4. Patrón Modelo Vista Controlador El Modelo Vista Controlador (MVC), es un patrón de diseño muy utilizado para el desarrollo de aplicaciones web, el cual tiene como idea fundamental separar los componentes principales de las aplicaciones, como lo son el sistema de gestión de base de Capítulo 1- Problema de investigación 19 datos, las interfaces de usuario y las tareas de manejar los eventos que se produzcan (Olivares, 2012). A continuación se explican las partes del patrón MVC:  Modelo: es la capa donde se trabaja con los datos, por tanto contiene mecanismos para acceder a la información. Cabe mencionar que en esta capa es habitual utilizar un ORM (Object Relational Mapping, Mapeo Objeto Relacional), que permita trabajar con abstracción de bases de datos y persistencia en objetos, en vez de usar directamente sentencias SQL (Structured Query Language, Lenguaje de Sentencias Estructuradas), que suele depender del motor de base de datos con el que se esté trabajando. Principales responsabilidades: o Acceder a la capa de almacenamiento de datos. o Definir las reglas de negocio (lógica del negocio). Ejemplo: "Si la persona X tiene el privilegio Y, no puede ver la información Z".  Vista: es la interfaz de usuario que permite mostrar los datos del modelo e interactuar con ellos mediante acciones o eventos. Principales responsabilidades: o Recibir datos provenientes del modelo y mostrarlos al usuario. o Tener registro de su controlador asociado.  Controlador: actúa como intermediario entre el Modelo y la Vista, gestionando el flujo de información entre ellos y las transformaciones para adaptar los datos a las necesidades de cada uno. Principales responsabilidades: o Recibir los eventos de entrada que se realizan en la vista, como un clic, pulsar un botón, entre otros. o Contener las reglas de gestión de eventos (lógica de la aplicación). Ejemplo: "Si Evento Z, entonces Acción W". Estas acciones pueden suponer peticiones al modelo o a las vistas. Capítulo 1- Problema de investigación 20 2.4.4.1. Flujo de control del patrón MVC Aunque se pueden encontrar diferentes implementaciones del MVC, el flujo de control más frecuente de este patrón es el siguiente (ver Figura 2.11): 1. El usuario interactúa con la vista realizando alguna acción, por ejemplo, pulsar un botón. 2. El controlador recibe la notificación de la acción del usuario y gestiona el evento, normalmente a través de un gestor de eventos. 3. El controlador hace la llamada al modelo, donde le pide visualizar o actualizar los datos. 4. El modelo interactúa con la base de datos, ya sea en forma directa o con una capa de abstracción, y realiza la consulta o la actualización de los datos. 5. El modelo le envía al controlador la información obtenida o le notifica de los cambios realizados. 6. El controlador le manda la respuesta a la vista y ésta reacciona en función de la respuesta que recibe (actualizar la interfaz, abrir un enlace, etc.) 2.4.4.2. Ventajas del MVC El patrón MVC para el desarrollo de aplicaciones web presenta las siguientes ventajas:  Disminuye el acoplamiento entre las partes de la aplicación, ya que las vistas se desacoplan del modelo y el modelo se desacopla de la forma en que se muestra e ingresa los datos.  Aumenta la cohesión, ya que cada elemento del patrón está altamente especializado en su tarea.  Facilita el desarrollo de la misma aplicación en distintos dispositivos o canales. Figura 2.11 - Flujo de control del patrón MVC. Capítulo 1- Problema de investigación 21  Permite una mayor claridad de diseño.  Facilita el mantenimiento.  Aumenta la escalabilidad. 2.5. Tecnologías del lado del cliente Las tecnologías del lado del cliente son ejecutadas e interpretadas del lado del cliente en una aplicación web, es decir, en el navegador web. En muchos casos el buen funcionamiento de estas tecnologías va a depender del tipo de navegador web y de la versión de cada uno de ellos. Por lo general estas tecnologías son utilizadas para mostrar información, darle formato a dicha información, solicitar datos, etc. Entre las tecnologías que se explican a continuación están: el Lenguaje de Marcas de Hipertexto, Hojas de Estilo en Cascada, JavaScript y jQuery. 2.5.1. Lenguaje de Marcas de Hipertexto El Lenguaje de Marcas de Hipertexto, mejor conocido como HTML (HiperText Markup Language), “es el lenguaje con el que se escriben las páginas web, haciendo uso de marcas (etiquetas) para describir la forma en la que deberían aparecer los textos y los gráficos en un navegador web” (EcuRed, 2012). HTML fue diseñado por el físico Tim Berners Lee en 1989, se publicó en un documento formal en 1991 y se convirtió en un estándar para el desarrollo de páginas web en 1995, ya que ofrece una estructura básica para la definición del contenido que por lo general se encuentra en una página web, como imágenes, texto, entre otros. A partir de 1996, la World Wide Web Consortium (W3C), que es la organización que define la mayoría de los estándares para el desarrollo web, se ha encargado de publicar constantes revisiones (HTML 3.2, HTML 4, HTML 4.01) de este estándar, ampliándolo y depurándolo con cada versión. HTML 5 fue la última revisión aprobada por esta organización, en el año 2014. HTML 5 establece una serie de nuevos elementos y atributos que reflejan el uso típico de los sitios web modernos. Incorpora nuevas etiquetas con mayor significado semántico, mejora la integración con las tecnologías de desarrollo web actual, permite desplegar objetos y animaciones en formato 3D (tridimensional), tiene un mejor soporte multimedia y ahorra la necesidad de tener que procesar medios de audio o video a través de complementos instalados en el navegador web. Capítulo 1- Problema de investigación 22 En la Figura 2.12 se muestran las principales diferencias entre las etiquetas de HTML 4.01 y HTML 5, donde se puede observar que con HTML 5 se disminuye el uso de la etiqueta <div> (utilizada para definir un bloque de contenido), y se introducen etiquetas con mayor significado semántico para que la estructura de una página web sea más fácil de entender. 2.5.2. Hojas de Estilo en Cascada Mientras que HTML permite definir la estructura una página web, las Hojas de Estilo en Cascada (Cascading Style Sheets - CSS) son las que ofrecen la posibilidad de definir las reglas y estilos de representación en diferentes dispositivos, ya sean pantallas de equipos de escritorio, portátiles, tabletas, celulares u otros dispositivos capaces de mostrar contenidos web (De Luca Damián, 2010). CSS fue diseñado por Håkon Wium Lie y Bert Bos entre 1994 y 1995 y se convirtió en un estándar en 1996, con el nombre de CSS 1. Al igual que con HTML, la W3C se ha encargado de publicar constantes revisiones de este lenguaje, siendo la versión CSS 2.1 el estándar actual que ofrece gran compatibilidad con la mayoría de los navegadores web del mercado. En el año 2005 se comenzó a definir el sucesor de la versión CSS 2.1, al cual se lo conoce como CSS 3, pero actualmente sigue en desarrollo y sólo se han publicado algunos borradores. Esta versión a pesar de que aún no es compatible con todos los navegadores, ofrece una gran variedad de opciones muy importantes para las necesidades del diseño web actual, como funciones avanzadas de movimiento y transformación, opciones de bordes redondeados, sombras en textos y cajas, entre otras opciones, sin la necesidad de usar un editor gráfico (De Luca Damián, 2010). Figura 2.12 - Estructura básica de una página web con HTML 4.01 y HTML 5. Capítulo 1- Problema de investigación 23 La sintaxis del lenguaje CSS consta de elementos llamados reglas, las cuales se dividen en selectores y declaraciones, donde el selector es el identificador al que se le quiere dar la declaración de un conjunto de propiedades con sus valores, como se puede ver en la Figura 2.13. La Figura 2.14 muestra un ejemplo de código CSS incrustado en HTML, para cambiar el tipo, el tamaño y el color de la fuente de un título y un párrafo. 2.5.3. JavaScript JavaScript (JS) es un lenguaje de scripting, interpretado, diseñado para la manipulación de eventos y objetos contenidos en una página web, de forma local y sin necesidad de transmisión alguna por la red. JavaScript permite crear pequeños programas llamados script, que pueden acompañar un documento HTML o estar contenidos en su interior. Dicho programa se ejecuta en el navegador web cuando se carga el documento, o cuando se produce algún evento, como por ejemplo la activación de un enlace por parte del usuario (España, 2003). Figura 2.13 - Elemento de CSS. Figura 2.14 - Ejemplo de código CSS incrustado en HTML. Capítulo 1- Problema de investigación 24 Gracias a los scripts se pueden realizar tareas como:  Validación de datos introducidos en un formulario.  Mensajes de alerta.  Algunos cálculos simples.  Control de eventos que se producen en la página: un elemento toma el foco, un elemento es activado con el ratón, etc. La ventaja de poder de realizar tareas de este tipo en el navegador web, es que por ejemplo si el usuario no rellena correctamente un formulario, no necesita esperar mucho tiempo hasta que el servidor vuelva a mostrar el formulario indicando los errores existentes. Para insertar código JavaScript en un documento HTML se utiliza la etiqueta <script> de la siguiente manera: Actualmente existe una gran cantidad de bibliotecas basadas en JavaScript, siendo jQuery una se las más utilizadas, ya que ésta posee una gran cantidad de funciones para simplificar la manera de interactuar con los documentos HTML, manipular documentos a través del árbol DOM (Document Object Model, Modelo de Objetos del Documento), gestionar eventos, animar y agregar interacción a las páginas web con la técnica AJAX (Asynchronous JavaScript And XM, JavaScript Asíncrono y XML). La técnica AJAX tiene como objetivo crear páginas web dinámicas, mediante la realización de solicitudes asíncronas hacia el servidor, es decir sin la participación directa del usuario, las cuales permiten actualizar ciertas secciones de la página sin necesidad de recargarla por completo. En ambientes donde no se implementa esta técnica, cualquier actualización no será visible hasta tanto se recargue por completo el contenido de la página (W3Schools, 2015). 2.5.4. Bootstrap Bootstrap, es un marco de trabajo (framework) que permite crear interfaces web con las tecnologías de CSS y JavaScript, cuya particularidad es la de adaptar la interfaz del sitio web al tamaño del dispositivo en que se visualice. Es decir, el sitio web se adapta automáticamente al tamaño de una computadora de escritorio o portátil, una tablet u otro dispositivo. Esta técnica de diseño y desarrollo se conoce como diseño adaptativo (responsive design) (Solis, 2014). <script language="JavaScript"> <!-- <instrucciones> --> </script> Capítulo 1- Problema de investigación 25 2.6. Tecnologías del lado del servidor Las tecnologías del lado del servidor permiten construir la lógica de negocio de la aplicación web. Esto implica el procesamiento de las solicitudes que se realizan desde el navegador web así como también la comunicación con el sistema encargado del manejo de datos. Entre las tecnologías del lado del servidor que se explican a continuación están: el lenguaje de programación Ruby, el marco de trabajo Ruby on Rails, el sistema manejador de base de datos PostgreSQL y el Protocolo Ligero/Simplificado de Acceso a Directorios. 2.6.1. Ruby Ruby es un lenguaje interpretado orientado a objetos, de propósito general y multiplataforma. Una de las principales filosofía del lenguaje es enfocarse en la simplicidad y la productividad, por lo que su sintaxis es muy sencilla de aprender, pero a su vez es muy poderosa y versátil para crear código escalable, sencillo y de manera eficiente (Graterol et al., 2014). Ruby se utiliza para resolver problemas de cualquier índole en el área de la computación, aunque comenzó a hacerse más conocido por su uso para desarrollo web gracias al framework Ruby on Rails, mas no es el único uso que le podemos dar a este lenguaje (Graterol et al., 2014). Algunas de las características generales del lenguaje son las siguientes (Ruby Lang Org, 2015):  Licencia de código abierto: el código fuente de Ruby es libre de ser descargado e inspeccionado por sus usuarios.  Multiparadigma: soporta más de un paradigma de programación, desde la funcional, hasta la imperativa, debido a los esfuerzos de su creador por crear un lenguaje que fuese un híbrido de todos sus lenguajes favoritos.  Todo es visto como un objeto: no existen los tipos de datos elementales, sino que todas las operaciones sobre datos, son en realidad invocaciones a métodos pertenecientes a una clase.  Altamente flexible: permite redefinir su estructura como el programador lo desee. Incluso las clases propias pueden ser redefinidas a conveniencia para modificar el comportamiento de las operaciones. Capítulo 1- Problema de investigación 26  Extensible: se le pueden agregar un gran número de funcionalidades nuevas, a través de su sistema de Gemas, que son bibliotecas desarrolladas por la comunidad y distribuidas libremente a través del repositorio oficial conocido como RubyGems.  Múltiples hilos: el lenguaje implementa en su ejecución el paradigma de múltiples hilos, sin importar la plataforma sobre la cual se encuentre trabajando. 2.6.1.1. Ventajas Algunas de las ventajas de Ruby son:  Código abierto.  Curva de aprendizaje muy corta.  Sintaxis concisa y legible.  Buenas prácticas y lineamientos de calidad reforzados por el lenguaje.  Aumenta la productividad.  Soporte extensivo a herramientas de todo tipo incluido por defecto en la biblioteca estándar.  Dispone de una cantidad enorme de paquetes de terceros, disponibles a través del índice de paquetes de Ruby (llamados Gemas).  Reduce dramáticamente el tiempo de desarrollo gracias a la disponibilidad de tantos paquetes. 2.6.1.2. Desventajas Algunas de las desventajas de Ruby son:  Comunidad pequeña en comparación con otros lenguajes.  Demanda baja en el mercado laboral.  Ruby necesita del manejo de tareas asíncronas no nativas para lograr un mejor rendimiento y escalado de aplicaciones donde haya mucha concurrencia.  El uso de memoria de Ruby no está del todo optimizado. 2.6.1.3. Ruby on Rails Ruby, al igual que otros lenguajes de programación, cuenta con varios frameworks que facilitan la creación de aplicaciones web. No obstante, el framework más utilizado por los desarrolladores, gracias a sus bondades y facilidad de uso, es Ruby on Rails. Ruby on Rails, también conocido como Rails o RoR, “es un entorno de desarrollo web para Ruby de código abierto que está optimizado para la satisfacción de los programadores y Capítulo 1- Problema de investigación 27 para la productividad sostenible. Permite escribir un buen código evitando la repetición y favoreciendo la convención antes que la configuración” (Rails Guides, 2015). Se basa principalmente en dos (2) filosofías de trabajo (Rails Guides, 2015):  Don’t Repeat Yourself (DRY): en español No Te Repitas, sugiere que escribir el mismo código una y otra vez en cualquier componente de software resulta redundante y es una pérdida de tiempo que se puede evitar, por lo que se busca reutilizar componentes ya existentes.  Convención sobre configuración: se basa en establecer estándares o convenciones reconocidas a nivel mundial como configuración por defecto para las tecnologías de trabajo, reduciendo así la cantidad de modificaciones que los desarrolladores deben hacer sobre las mismas para hacer funcional la aplicación. Además, Rails está orientado al paradigma Modelo Vista Controlador (MVC), por lo que utiliza distintas tecnologías para dar soporte a cada una de estas partes. A continuación, se explica cada parte por separado para conocer las tecnologías asociadas a cada una.  Modelo: consiste en las clases persistentes que representan a las tablas de la base de datos. En Rails la gema encargada de realizar automáticamente la correspondencia entre los modelos definidos por los desarrolladores y las tablas almacenadas en la base de datos es ActiveRecord. Una gran bondad de ActiveRecord es que permite realizar migraciones sin mucho esfuerzo, ya que los desarrolladores no tienen que preocuparse por crear manualmente la base de datos y sus tablas utilizando el lenguaje propio del manejador asociado, sino que pueden realizar creación, modificación y eliminación de tablas en la base de datos a través de comandos propios de Rails y efectuando las modificaciones pertinentes únicamente sobre los modelos (Rails Guides, 2015).  Vista: es la responsable de generar la interfaz de usuario, normalmente basada en los datos del modelo. Existen varias formas de gestionar las vistas, el método que aplica Rails es usar Ruby embebido (archivos.html.erb), que es código HTML mezclado con código Ruby. La gema encargada de controlar las vistas en Rails es el ActiveView, la cual es responsable del despliegue de visualización de contenido en pantalla (Rails Guides, 2015).  Controlador: es un intermediario entre los modelos y las vistas. Se encarga de recibir las peticiones que se generan de lado del cliente, y procesarlas de acuerdo a la lógica programada por los desarrolladores para generar las vistas asociadas a los resultados. En Rails, este módulo se conoce como ActionPack, y contiene la clase ApplicationController, encargada principal de todos los controladores del sistema (Rails Guides, 2015). Capítulo 1- Problema de investigación 28 2.6.2. Sistemas Manejadores de Bases de Datos Según Silberschatz A. et al. (2002) un Sistema Manejador de Base de Datos (SMBD) “consiste en una colección de datos interrelacionados y un conjunto de programas para acceder a dichos datos” y su objetivo principal “es proporcionar una forma de almacenar y recuperar la información de una base de datos de manera que sea tanto práctica como eficiente”. En la actualidad existe una gran variedad de sistemas manejadores de bases de datos, muchos de ellos son propietarios o comerciales como Oracle, Microsoft SQL Server, IBM Informix, Sybase, etc. y otros no comerciales o de código abierto como MySQL o PostgreSQL, siendo éste último el que se explica a continuación. 2.6.2.1. PostgreSQL PostgreSQL es un potente Sistema Manejador de Base de Datos objeto-relacional, de código abierto, que cuenta con más de 15 años de desarrollo activo y una arquitectura probada que se ha ganado una sólida reputación por su fiabilidad, integridad de datos y corrección (The PostgreSQL Global Development Group, 1996-2015). Trabaja muy bien con grandes cantidades de datos y una alta concurrencia de usuarios accediendo a la vez al sistema, por lo que se considera una herramienta que favorece a los usuarios con sistemas empresariales de gran tamaño. PostgreSQL se ha enfocado tradicionalmente en la fiabilidad, integridad de datos y características integradas enfocadas al desarrollador. Tiene un planificador de consultas extremadamente sofisticado, que es capaz de unir cantidades relativamente grandes de tablas eficientemente (2ndQuadrant Ltd, 2001-2015). Se distribuye bajo la Licencia PostgreSQL, que es una licencia similar a la de la Distribución de Software de Berkeley (BSD) y a la del Instituto de Tecnología de Massachusetts (MIT), que permite a los usuarios hacer cualquier cosa que quieran con el código, incluyendo la reventa de los binarios sin el código (2ndQuadrant Ltd, 2001-2015). Algunas de las ventajas de PostgreSQL son:  Es código abierto.  La velocidad de respuesta se mantiene al aumentar el tamaño de la base de datos, cosa que no sucede con otros programas que se suelen poner lentos.  Proporciona estabilidad y confiabilidad.  Tiene una gran capacidad de almacenamiento.  Soporta gran número de peticiones simultáneas a la base de datos de forma correcta. Capítulo 1- Problema de investigación 29  Puede operar sobre distintas plataformas, incluyendo Linux, Windows, Unix, Solaris y MacOS X.  Provee un buen sistema de seguridad mediante la gestión de usuarios, grupos de usuarios y contraseñas.  Soporta los tipos de datos, cláusulas, funciones y comandos de tipo estándar SQL92/SQL99 y extendidos propios de PostgreSQL. Algunas de las desventajas son:  En comparación con otros sistemas manejadores de base de datos, como por ejemplo MySQL, es más lento en inserciones y actualizaciones, ya que cuenta con cabeceras de intersección.  Cuenta con muchos foros oficiales de ayuda, pero no con una documentación de ayuda obligatoria.  La sintaxis de algunos comandos o sentencias no es tan intuitiva. 2.6.3. Directorio y servicio de directorio 2.6.3.1. Directorio Un directorio es un repositorio único para la información relativa a los usuarios y recursos de una organización, el cual está organizado de manera lógica y jerárquica. Por ejemplo, en un directorio se puede almacenar información acerca de las cuentas de usuario de las personas de una organización (nombres, contraseñas, números de teléfono, etc.) (EcuRed, 2012). Generalmente se describe un directorio como una base de datos, pero es una base de datos especializada cuyas características la apartan de una base de datos relacional de propósito general (Calzada, 2001). Algunas de las características que diferencian un directorio de una base de datos relacional son (Calzada, 2001):  Los directorios están optimizados para accesos en lectura, frente a las bases de datos convencionales, que se encuentran optimizadas para lectura y escritura.  Los directorios están optimizados para almacenar información relativamente estática, por lo que no son recomendables para almacenar datos que cambian con frecuencia.  Los directorios no soportan transacciones. Las transacciones son operaciones de base de datos que permiten controlar la ejecución de una operación compleja, de modo que dicha operación se completa totalmente o no se ejecuta en absoluto. Las bases Capítulo 1- Problema de investigación 30 de datos convencionales implementan esta funcionalidad, a costa de hacer su implementación más compleja. Pero el tipo de información que se almacena generalmente en el directorio no requiere una consistencia estricta y se considera aceptable que el número de teléfono de una persona no este actualizado de forma temporal.  El diseño del directorio es bastante diferente del diseño de una base de datos relacional. En las bases de datos se tiende a diseñar un modelo de datos para asuntos de negocios y los requisitos de los procesos, el cliente, el servicio y el administrador. Con los directorios, lo que se hace es colocar la información en un repositorio común para muchos usos y usuarios. Su diseño y esquema de la información deben ser desarrollados conforme a lo que está representando, a objetos en la vida real. En la mayoría de los casos, estos objetos representan los usuarios, agendas, listas, preferencias, derechos, productos y servicios, dispositivos, perfiles, políticas, números de teléfono, rutas, etc. Además, se debe considerar también los aspectos operacionales de diseño, en vista del funcionamiento y de escala. 2.6.3.2. Servicio de directorio Un servicio de directorio es una aplicación o un conjunto de aplicaciones que proporciona métodos para almacenar los datos de un directorio y a su vez ponerlos a disposición de los administradores y los usuarios que se encuentren en la misma red (EcuRed, 2012). Un servicio de directorio está altamente optimizado para lecturas y proporciona alternativas avanzadas de búsqueda en los diferentes atributos que se puedan asociar a los objetos de un directorio. 2.6.3.3. Protocolo Ligero/Simplificado de Acceso a Directorios Las aplicaciones que deseen acceder a un directorio, deben utilizar el Protocolo Ligero/Simplificado de Acceso a Directorios, mejor conocido como LDAP (Lightweight Directory Access Protocol), el cual es un protocolo de tipo cliente-servidor que permite establecer la comunicación entre la aplicación y el servicio de directorio para que ésta pueda acceder o modificar la información del repositorio. LDAP le brinda al usuario la posibilidad de: - Conectarse al directorio. - Desconectarse del directorio. - Buscar información. - Comparar información. - Insertar entradas. Capítulo 1- Problema de investigación 31 - Cambiar entradas. - Eliminar entradas. 2.7. Herramientas de Extracción, Transformación y Carga Las herramientas de Extracción (E), Transformación (T) y Carga (L – de Load en inglés) permiten de manera sencilla recuperar datos de distintas fuentes de información, limpiarlos y realizar las transformaciones necesarias para cargarlos en un repositorio, minimizando fallos comunes como la existencia de campos o valores nulos, tablas de referencia inexistentes, entre otros. Siguiendo la línea de tecnologías de código abierto, se ha seleccionado la herramienta de ETL de Pentaho, llamada Pentaho Data Integration (PDI) o también conocida como Kettel, la cual se explica a continuación. 2.7.1. Pentaho Pentaho es una plataforma orientada a soluciones, centrada en procesos, que incluye todos los principales componentes requeridos para la gestión y toma de decisiones empresariales. Está compuesta por diferentes programas que satisfacen los requerimientos fundamentales de una solución de inteligencia de negocio, ofreciendo alternativas para la gestión y análisis de la información (Pentaho, 2012). La plataforma de Pentaho consta de dos ediciones:  Pentaho Community Edition: edición gratuita que contribuye con nuevas funcionalidades, pruebas e innovación.  Pentaho Enterprise Edition: edición certificada que posee características adicionales que no se encuentran en la edición comunitaria, como módulos exclusivos, facilidades de uso y soporte técnico oficial. Ambas ediciones cuentan con una gran variedad de herramientas enfocadas mayormente a dar soporte al desarrollo de soluciones de inteligencia de negocios. 2.7.1.1. Pentaho Data Integration Pentaho Data Integration (PDI) es una herramienta que permite extraer, transformar y cargar (ETL - Extract, Transform and Load) la información disponible en aplicaciones y bases de datos separadas y ponerla en manos del usuario, proyectando consistencia. También es conocido como Kettle y posee las siguientes aplicaciones (Rivera, 2012): Capítulo 1- Problema de investigación 32  Spoon: herramienta gráfica que permite diseñar procesos ETL. Soporta conexión con diversas fuentes de datos y permite transformar los datos necesarios para cargarlos dentro de la base de datos destino.  Pan: herramienta que permite ejecutar transformaciones diseñadas con Spoon en XML o en un repositorio de base de datos. Generalmente las transformaciones se programan en modo por lotes para ser ejecutadas en intervalos de tiempo regulares.  Chef: herramienta que permite ejecutar trabajos complejos que automatizan los procesos de actualización de la base datos.  Kitchen: herramienta que ayuda a ejecutar trabajos por lotes, permitiendo iniciar y controlar fácilmente procesos ETL.  Carte: servidor web que permite la supervisión remota de procesos ETL. De las aplicaciones nombradas anteriormente una de las más usadas es Spoon, cuya interfaz se puede ver en la Figura 2.15. Spoon es realmente fácil de usar y resulta muy útil incluso para realizar migraciones pequeñas, como por ejemplo, pasar datos de una hoja de cálculo a una base de datos relacional. Figura 2.15 - Interfaz gráfica de Spoon. Capítulo 3 – Marco metodológico 33 CAPÍTULO 3 MARCO METODOLÓGICO En todo desarrollo de software, aplicar cierto grado de disciplina siempre ayuda a conseguir un producto final de mayor calidad. Las metodologías ágiles son las más adecuadas para proyectos donde es necesaria la flexibilidad y la adaptación a los cambios, como es el caso de las aplicaciones web, que suelen tener requerimientos variables y usualmente se desea que estén disponibles en poco tiempo. Algunas metodologías ágiles de uso común en la actualidad son: Programación Extrema (XP), Proceso Unificado Ágil (AUP), Proceso Unificado Abierto (OpenUP), Scrum, AgilUs, entre otras. AgilUs es una metodología ágil que se adapta bien a proyectos individuales o de equipos pequeños, se centra en el usuario y sus necesidades, e incorpora técnicas de evaluación de usabilidad rápidas, económicas y que no requieren de plataformas tecnológicas complejas. Por todas estas razones, esta metodología resultó ser la adecuada para el desarrollo de este Trabajo Especial de Grado. En este capítulo se explica en profundidad la metodología AgilUs, analizando sus principales características y describiendo las etapas que contempla. 3.1. Metodología AgilUs La metodología AgilUs de Alecia Acosta nace como línea de investigación del Centro Ingeniería de Software y Sistemas (ISYS) de la Escuela de Computación de la Universidad Central de Venezuela. Se basa en el concepto de usabilidad, en la necesidad de desarrollar software usable. Se fundamenta en el análisis centrado en el usuario y en la participación de especialistas, con el objetivo de evolucionar el software, a fin de que éste alcance el mayor grado de usabilidad una vez culminado su desarrollo (Acosta, 2011). AgilUs es un método de desarrollo iterativo e incremental que pone el mayor peso del desarrollo en la consecución de la usabilidad. Se centra en que la construcción de las interfaces de usuario se realice desde el comienzo del desarrollo del sistema y no al final. Esta metodología reduce la cantidad de actividades y artefactos que se generan, propicia la participación del usuario y se adapta a los cambios que puedan surgir en el desarrollo. Está orientada al desarrollo de sistemas con alto grado de interactividad con los usuarios (front-end) y menos complejidad en la lógica de la aplicación (back-end). Capítulo 3 – Marco metodológico 34 AgilUs provee un conjunto de “buenas prácticas” para el desarrollo de software desde una perspectiva ágil, donde requiere involucrar al usuario de manera activa durante el proceso de desarrollo. Algunas de estas “buenas prácticas” son:  Diseño centrado en el usuario (DCU): es un enfoque de diseño y desarrollo que se centra en los deseos, limitaciones y necesidades de los usuarios finales de un software.  Diseño basado en prototipos: el desarrollo de software es guiado por la construcción de prototipos de alta fidelidad y la evaluación de los mismos por los usuarios y por especialistas en usabilidad.  Desarrollo ágil, incremental e iterativo: el desarrollo es lo más simple posible, provee resultados sin necesidad de esclarecer todo los requerimientos al inicio del desarrollo y permite regresar a etapas anteriores una vez recibida la retroalimentación de las evaluaciones realizadas.  Usabilidad como atributo de la calidad: se siguen las recomendaciones del estándar ISO/IEC 9126‐1 para la producción de software usable, ya que la usabilidad es considerada un atributo de la calidad interna y externa del software.  Interacción continua con el usuario: la presencia constante y participativa del usuario es fundamental. La usabilidad del sistema sólo puede ser determinada por el usuario. Acosta (2011) explica que AgilUs centra el desarrollo de software en los siguientes principios:  Integra la Interacción Humano Computador (IHC) y la Ingeniería de Software (IS): IS e IHC son complementarias, no son disciplinas excluyentes. Un diseño centrado en el usuario impacta positivamente en la calidad del software (ISO 9126-1).  La usabilidad debe considerarse desde el principio del desarrollo: la usabilidad aumenta la calidad del software, entonces es conveniente incluirla desde el principio en el desarrollo como uno de los requerimientos fundamentales para impactar positivamente en la calidad del producto final.  La usabilidad determina la utilidad: un software se considera útil en la medida que pueda ser usado a fin de producir resultados, en forma eficiente, intuitiva y satisfactoria para los usuarios. Capítulo 3 – Marco metodológico 35  El usuario determina la usabilidad: la usabilidad no es una propiedad abstracta. Un software sólo será considerado usable en un contexto específico y por un tipo de usuario específico. El objetivo es lograr que todos los usuarios del software encuentren usables las tareas que pueden realizar. 3.1.1. Ciclo de vida “El ciclo de vida de AgilUs hace énfasis en la importancia del usuario y sus evaluaciones. Está basado en el desarrollo iterativo e incremental de prototipos de alta fidelidad hasta que se convierten en el producto final para entrega” (Acosta, 2011). AgilUs está formado por cuatro (4) etapas diferentes: Requisitos, Análisis, Entrega y Prototipaje, y en cada una de ellas se incluyen actividades y artefactos poco costosos para la construcción de la usabilidad, como se muestra en la Figura 3.1. 3.1.2. Etapas A continuación se describe las cuatro (4) etapas de AgilUs y las técnicas de evaluación de usabilidad utilizadas (Acosta, 2011):  Requisitos: se realiza el análisis global del problema a solucionar, se estudian productos similares existentes, se genera un perfil de usuario, y se define la lista de requerimientos a desarrollar. Esta etapa es importante en el desarrollo del software, Figura 3.1 - Ciclo de vida AgilUs. Fuente: Acosta A. (2011). Capítulo 3 – Marco metodológico 36 ya que un mal análisis de requerimientos traería como consecuencia un software que no cumple con las necesidades del usuario. Las técnicas de evaluación de usabilidad (indagación) que se utilizan en esta etapa son:  Tormenta de ideas: técnica de grupo para la generación de ideas nuevas y útiles, que permitan mediante reglas sencillas aumentar las probabilidades de innovación y originalidad.  Encuesta: conjunto de preguntas normalizadas dirigidas a una muestra representativa de la población para obtener información estadística acerca de sus opiniones o hechos específicos.  Cuestionario: lista de preguntas que se distribuye entre los usuarios para obtener información de sus opiniones. Este instrumento se puede utilizar en cualquier etapa del proceso de desarrollo, dependiendo de las preguntas que estén formuladas.  Entrevista: dialogo entre un entrevistador y un entrevistado, donde el entrevistador hace una serie de preguntas al entrevistado con el fin de conocer sus opiniones e ideas.  Evaluación de sistemas existentes: consiste en la revisión de versiones anteriores del mismo sistema, así como sistemas de la competencia o afines, con el objetivo de identificar ventajas, desventajas y problemas de usabilidad.  Perfil de usuario: describe a los usuarios previstos del sistema, detallando sus características más relevantes.  Requerimientos funcionales y no Funcionales: recopilación de condiciones o capacidades que debe cumplir el sistema.  Análisis: se lleva a cabo el análisis de la solución a desarrollar, se emplean diagramas de casos de uso y modelo de objetos del dominio, siguiendo la notación UML, para definir las funcionalidades que tendrá el producto a desarrollar. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Prototipo en papel: bosquejo del sistema que se desea realizar. Resulta muy útil cuando el cliente no tiene claros algunos puntos. Capítulo 3 – Marco metodológico 37  Guía de estilo: documento que recoge normativas y patrones básicos relacionados con el aspecto de la interfaz para su aplicación en el desarrollo de nuevas pantallas dentro de su entorno.  Modelo de casos de uso: modelo que permite especificar las funcionalidades y el comportamiento del sistema mediante su interacción con usuarios u otros sistemas.  Modelo de objetos del dominio: modelo que describe y prioriza cada uno de los objetos identificados en el sistema.  Objetos de interfaz: modelo que permite comprender la parte visual de la aplicación.  Patrones de interacción: describen aspectos concernientes a la interfaz de usuario; están orientados a presentar soluciones apropiadas a problemas recurrentes que se les presentan a los usuarios cuando utilizan las aplicaciones interactivas.  Prototipaje: se implementa un prototipo rápido de la interfaz de usuario a partir de los patrones de interacción, el cual va evolucionando hasta convertirse en el producto final y se realizan evaluaciones de usabilidad apropiadas a esta etapa: evaluaciones heurísticas y listas de comprobación. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Prototipo rápido: técnica basada en ordenador que pretende reducir el ciclo iterativo de desarrollo. Los prototipos iterativos desarrollados podrán ser rápidamente reemplazados o modificados según los informes procedentes de otras evaluaciones a medida que se evoluciona en el desarrollo de las tareas a realizar. Existen muchas herramientas para la generación de prototipos rápidos, siendo habituales una secuencia de imágenes en Microsoft PowerPoint o Visual Basic.  Evaluación heurística: se basa en una inspección donde especialistas en usabilidad juzgan si cada elemento de la interfaz sigue los principios de usabilidad establecidos.  Lista de comprobación: consta de la verificación del cumplimiento de una lista de principios que el equipo de desarrollo acuerda para el diseño de la interfaz de usuario. Capítulo 3 – Marco metodológico 38  Pensamiento en voz alta: técnica donde se les pide a los usuarios que expresen en voz alta sus pensamientos, sentimientos y opiniones mientras que interaccionan con el sistema o un prototipo del mismo.  Prototipo ejecutable: técnica donde el prototipo utilizado para las pruebas se corresponde con la interfaz real en la mayor medida posible. Es utilizado para maquetar la interfaz y en él son aceptadas entradas desde ratón o teclado, tal como lo haría la interfaz real, a su vez que responde a esos eventos de idéntica forma (mostrando ventanas, mensajes de respuesta, entre otros).  Entrega: se aplican las pruebas al sistema para certificar que la aplicación desarrollada sea un software usable y sin errores, finalmente se pone en producción la aplicación. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Pruebas de aceptación: pruebas que aportan datos tanto cuantitativos como cualitativos sobre usuarios reales que llevan a cabo tareas reales con el sistema. Los profesionales de la usabilidad pueden evaluar algunos aspectos de la accesibilidad utilizando protocolos normalizados de pruebas de usabilidad.  Protocolo de preguntas: consiste en la formulación de preguntas directas al usuario acerca del sistema para detectar qué partes de la interfaz resultan obvias y qué otras resultan oscuras. 3.1.3. Errores comunes Acosta (2011) señala que al implementar AgilUs se pueden cometer algunos errores comunes que surgen a causa de la disminución deliberada o accidental de la participación del usuario en el proceso de desarrollo o de una mala comprensión del rol que debe ocupar a la hora de tomar decisiones con respecto al diseño del sistema y sus interfaces. Uno de los errores más frecuentes es que el equipo de desarrollo determine la usabilidad del sistema sin incluir al usuario, intentando predecir o aproximar las reacciones, deseos, capacidades y carencias de éste. Otro error común es pensar que el cliente y el usuario son la misma persona. A pesar de que el cliente es el propietario del sistema, éste no debería tomar decisiones, por ejemplo en términos de usabilidad, ya que los usuarios son los que deberían decidir, indirectamente a través de sus evaluaciones y comentarios, qué se debe hacer y por qué. 3.1.4. Tabla resumen Capítulo 3 – Marco metodológico 39 En la Tabla 3.1 se realiza un resumen de la metodología AgilUs. Tabla 3.1 - Resumen de la Metodología AgilUs AgilUs Definición Metodología ágil fuertemente orientada a la producción de software usable, por ello el usuario es el actor principal durante el proceso de desarrollo. Etapas  Requisitos.  Análisis.  Prototipaje.  Entrega. Roles  No tiene roles. Tiempos de entrega Al finalizar una iteración se entrega un prototipo para ser evaluado. Artefactos Etapa de Requisitos:  Tormenta de ideas.  Encuestas, entrevistas, cuestionarios.  Evaluación de sistemas existentes.  Perfiles de usuario.  Requerimientos funcionales y no funcionales. Etapa de Análisis:  Prototipo en papel.  Guía de estilo.  Casos de uso.  Modelo de objetos del dominio.  Objetos de interfaz.  Patrones de interacción. Etapa de Prototipaje:  Evaluación heurística.  Lista de comprobación.  Pensamiento en voz alta.  Prototipo ejecutable. Etapa de Entrega:  Protocolo de preguntas.  Pruebas de aceptación.  Aplicación final. Ventajas  Constante interacción con el usuario durante todo el proceso de desarrollo.  Incremento de la productividad, la satisfacción y la reducción de costos de entrenamiento y soporte del software, ya que las técnicas de evaluación de usabilidad propuestas en el método no son costosas ni requieren de infraestructura tecnológica compleja. Desventajas  No contempla en su ciclo de vida una fase de mantenimiento, lo cual dificulta su evolución y/o corrección una vez finalizado el desarrollo del producto.  Puede ocurrir una disminución de la participación del usuario en el proceso de desarrollo o puede haber una mala comprensión de su rol. Capítulo 4 – Marco aplicativo 40 CAPÍTULO 4 MARCO APLICATIVO En este capítulo se describen aspectos y características relevantes de la aplicación y se detallan los pasos que se realizaron para el desarrollo de este Trabajo Especial de Grado, siguiendo de manera parcial los lineamientos de la metodología AgilUs. 4.1. Uso parcial de la metodología AgilUs Para el desarrollo de este Trabajo Especial de Grado se hizo un uso parcial de los lineamientos de la metodología AgilUs, ya que no se utilizaron todos los artefactos y técnicas que ésta propone por etapa, sino las que más se adaptaran a las necesidades de este proyecto, con el fin de acelerar los tiempos de entrega pero sin perder la meta de lograr un producto altamente usable y centrado en el usuario. Los artefactos y técnicas que se seleccionaron para cada etapa de la metodología fueron los siguientes (ver Figura 4.1):  Requisitos: tormenta de ideas, entrevista, evaluación de sistemas existentes, análisis de perfiles de usuarios y lista de requerimientos a desarrollar.  Análisis: prototipos en papel, guía de estilo, modelos de casos de uso y uso parcial de patrones de interacción, ya que no se tomaron en consideración pero no se documentaron.  Prototipaje: prototipos ejecutables, lista de comprobación y pensamientos en voz alta.  Entrega: prueba de aceptación y uso parcial del protocolo de preguntas, ya que se realizó de manera espontánea y no formal al realizar la prueba de aceptación. Figura 4.1 - Artefactos y técnicas seleccionadas para cada etapa de la metodología AgilUs. Capítulo 4 – Marco aplicativo 41 Es importante mencionar que el desarrollo de este Trabajo Especial de Grado se dividió en iteraciones, durante las cuales se implementó de forma incremental el total de funcionalidades necesarias para la aplicación. Además, las iteraciones fueron orientadas a objetivos, por lo cual no fueron basadas en el tiempo de su duración, sino en mostrar el producto final obtenido en cada una de ellas. De igual manera, es importante señalar que las etapas de la metodología se emplearon según lo necesario, dependiendo de los objetivos planteados para cada iteración. A continuación se explica en detalle cada una de las iteraciones realizadas. 4.2. Primera iteración: esquema general de la solución, interfaz principal de la aplicación e interfaces para un usuario con perfil de investigador Para la primera iteración de este proceso de desarrollo se tuvieron como objetivos:  Obtener a través de la etapa de requisitos un esquema general de los requerimientos principales a implementar en la aplicación.  Lograr a través de la etapa de análisis, plantear el conjunto de requerimientos obtenidos en la fase de requisitos como funcionalidades específicas a implementar en la aplicación.  Desarrollar un prototipo ejecutable que abarque la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador. 4.2.1. Etapa de requisitos En esta etapa se realizó una tormenta de ideas, una entrevista semi-estructurada, una evaluación de sistemas afines existentes y un análisis de perfiles de usuarios potenciales de la aplicación, para lograr definir los requerimientos funcionales y no funcionales de la misma. 4.2.1.1. Tormenta de ideas Esta técnica fue utilizada en el inicio del proceso de desarrollo de la aplicación de una manera un tanto informal, ya que en realidad se realizaron una serie de reuniones donde se discutieron diferentes opiniones referentes a la aplicación, obteniendo así las primeras ideas de lo que se deseaba. Capítulo 4 – Marco aplicativo 42 Las primeras ideas planteadas fueron: - Diseñar interfaces fáciles de usar e intuitivas. - Diseñar la base de datos para almacenar la información de los investigadores de la Facultad de Ciencias a partir de una versión inicial de la base de datos del RNII. - Permitir al investigador registrar, modificar, visualizar y eliminar su información. - Permitir al administrador registrar, modificar, visualizar y eliminar cualquier información contenida en la base de datos. - Autenticar usuarios contra el directorio de usuarios activos de la Facultad de Ciencias. - Cargar los datos básicos de los investigadores en la aplicación a partir de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación. - Diseñar la aplicación de tal forma que pueda ser utilizada en otras instituciones, es decir, que sea genérica. En la Figura 4.2 se puede ver algunas de las notas resultantes de las reuniones realizadas. Todas estas ideas se fueron concretando poco a poco una vez realizadas las siguientes técnicas de evaluación de usabilidad: entrevista, evaluación de sistemas afines existentes y análisis de perfiles de usuarios potenciales de la aplicación. Figura 4.2 - Notas resultantes de reuniones. Capítulo 4 – Marco aplicativo 43 4.2.1.2. Entrevista A fin de determinar la lista de requerimientos se realizó una entrevista semi-estructurada (preguntas preparadas y preguntas espontaneas) al cliente de la aplicación, el Profesor Pío Arias, quien es el Coordinador de Investigación la Facultad de Ciencias. En esta entrevista el cliente pudo dar su opinión, relatar su experiencia personal con respecto a sistemas parecidos y dar a conocer sus expectativas para esta aplicación. Dicha entrevista fue grabada con su consentimiento para no pasar por alto ningún detalle. Las preguntas más relevantes de esta entrevista fueron: 1. Historia de la investigación en la Facultad de Ciencias 2. ¿Cómo se lleva actualmente la información de los investigadores? 3. ¿Qué desea de esta aplicación? ¿Qué aspiraciones tiene? A partir de estas preguntas y otras que se realizaron espontáneamente se obtuvo información muy valiosa sobre aspectos que aún no se tenían en consideración para el desarrollo de la aplicación. En la Figura 4.3 se puede observar las preguntas realizadas en la entrevista. 4.2.1.3. Evaluación de sistemas existentes Se realizó un análisis de sistemas afines existentes en el mercado con la finalidad de puntualizar sus ventajas y aplicarlas a la aplicación a desarrollar; así como minimizar las desventajas o errores que estos pudieran tener. Los sistemas estudiados fueron: el Registro Nacional de Innovación e Investigación (RNII) de Venezuela (ver Tabla 4.1) y el Directorio Nacional de Investigadores e Innovadores (DINA) de Perú (ver Tabla 4.2). Figura 4.3 - Entrevista realizada al Profesor Pio Arias. Capítulo 4 – Marco aplicativo 44 Tabla 4.1 - Evaluación del sistema RNII RNII - http://rnii.oncti.gob.ve/ Tópico Descripción/Observaciones Descripción Aplicación web que permite registrar los datos fundamentales de todas las personas e instituciones que realizan actividades de innovación e investigación en la República Bolivariana de Venezuela. Funcionalidades Permite registrar, modificar, eliminar y visualizar la información del investigador de manera rápida y sencilla. También dispone de un buscador que filtra los resultados según las palabras que sean suministradas en el campo de búsqueda. Provee una red social para compartir información con otros investigadores e incluso formar un grupo de colegas. Apariencia La aplicación presenta interfaces consistentes e intuitivas pero los colores utilizados cansan un poco a la vista y pueden distraer. Algunas metáforas presentadas no son tan intuitivas pero disponen de textos de ayuda. Personalización No cuenta con funcionalidades para personalizar la aplicación. Aspectos de sociabilidad Posee una red social que permite seguir a otros investigadores, ver sus publicaciones, darle me gusta, comentar, ver sus productos y proyectos de investigación, etc. Aspectos de accesibilidad No cuenta con ninguna funcionalidad para usuarios con limitaciones físicas, como por ejemplo atajos de teclado, configuración de tamaño de letra, contraste de colores, entre otros. Idiomas Sólo español. Soporte en línea No cuenta con un formulario para contactar con el administrador del sistema. Tampoco dispone de un manual de usuario dentro de la misma aplicación. Opinión como usuario Herramienta muy útil para registrar la información de los investigadores del país de manera rápida y sencilla. La aplicación podría mejorar en su gama de colores, metáforas y buscadores. Tabla 4.2 - Evaluación del sistema DINA DINA - http://dina.concytec.gob.pe/ Tópico Descripción/Observaciones Descripción Aplicación web que registra las hojas de vida de los profesionales peruanos que realizan actividades de ciencia, tecnología e innovación (CTI), tanto en el país como en el extranjero. Funcionalidades Permite registrar, modificar, eliminar y visualizar la información del investigador de manera rápida y sencilla. Provee conexión con otras bases de datos que tienen información registrada del investigador para evitar que éste tenga que reescribir. También permite realizar búsquedas sencillas o más detalladas de otros investigadores, productos, proyectos y propiedades intelectuales. Por último, dispone de una funcionalidad muy útil de exportación del Currículum Vitae del investigador es diferentes formatos. http://rnii.oncti.gob.ve/ http://dina.concytec.gob.pe/ Capítulo 4 – Marco aplicativo 45 Apariencia La aplicación presenta interfaces minimalistas, consistentes y con buen uso de los colores. El uso de metáforas es escaso pero se cuentan con suficientes textos de ayuda. Algunos formularios están un poco desordenados. Personalización No cuenta con funcionalidades para personalizar la aplicación. Aspectos de sociabilidad No cuenta con ninguna red social o funcionalidad para compartir información con otros investigadores. Aspectos de accesibilidad No cuenta con ninguna funcionalidad para usuarios con limitaciones físicas, como por ejemplo atajos de teclado, configuración de tamaño de letra, contraste de colores, entre otros. Idiomas Sólo español. Soporte en línea Permite contactar con el administrador del sistema mediante el envío de un correo electrónico o por teléfono local. También cuenta con un manual de usuario muy bien detallado que incorpora textos y videos tutoriales. Opinión como usuario Herramienta muy útil para registrar la información de los investigadores peruanos de manera rápida y sencilla. La aplicación podría mejorar en el diseño de los formularios. 4.2.1.4. Perfiles de usuario Se determinaron cuatro (4) perfiles de usuarios potenciales de la aplicación: Visitante, Investigador, Administrador de dependencia y Administrador global, los cuales se describen en las Tablas 4.3, 4.4, 4.5 y 4.6 respectivamente. Tabla 4.3 - Perfil de usuario de un Visitante Usuario Visitante Breve descripción Persona perteneciente o no a la Facultad de Ciencias, con capacidad de navegar en Internet. Puede solicitar registrarse en la aplicación si posee correo Ciencias. Edad Mayor a 18 años Sexo Ambos sexos. Conocimientos tecnológicos Manejo básico, medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Educación diversificada o educación universitaria. Tabla 4.4 - Perfil de usuario de un Investigador. Usuario Investigador Breve descripción Persona perteneciente a la Facultad de Ciencias y que realiza investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Puede agregar, modificar, eliminar y visualizar su propia información. Capítulo 4 – Marco aplicativo 46 Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Tabla 4.5 - Perfil de usuario de un Administrador de dependencia Usuario Administrador de dependencia Breve descripción Persona perteneciente a la Facultad de Ciencias que puede o no realizar investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Es una persona responsable, consiente de sus actos y comprometido con el buen uso de la aplicación. Puede agregar, modificar, eliminar y visualizar usuarios de su misma Dependencia (Escuela/Instituto), así como asignarles el rol de investigador y/o administrador de dependencia. También puede gestionar la información de las tablas base de la aplicación. Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Tabla 4.6 - Perfil de usuario de un Administrador global Usuario Administrador global Breve descripción Persona perteneciente a la Facultad de Ciencias que puede o no realizar investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Es una persona responsable, consiente de sus actos y comprometido con el buen uso de la aplicación. Puede agregar, modificar, eliminar y visualizar usuarios de cualquier Dependencia (Escuela/Instituto), así como asignarles el rol de investigador, administrador de dependencia y/o administrador global. También puede gestionar la información de las tablas base de la aplicación. Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Capítulo 4 – Marco aplicativo 47 4.2.1.5. Requerimientos Una vez realizada la tormenta de ideas, la entrevista semi-estructurada, la evaluación de sistemas afines existentes y el análisis de perfiles de usuarios potenciales, se obtuvo la siguiente lista de requerimientos funcionales y no funcionales para el desarrollo de la aplicación. Requerimientos funcionales 1. Permitir el inicio de sesión en la aplicación a los usuarios investigadores, administradores de dependencia y administradores globales. 2. Admitir la solicitud de registro en el sistema a aquellos usuarios visitantes que tienen correo Ciencias pero que aún no se encuentran agregados en la aplicación. 3. Dar la posibilidad a los usuarios visitantes e investigadores de contactar con el administrador del sistema ante cualquier duda, inquietud o irregularidad. 4. Permitir a los usuarios investigadores agregar, modificar, eliminar o visualizar su información (general, académica, laboral, proyectos, productos, etc.). 5. Permitir al usuario administrador de dependencia agregar, modificar, eliminar y visualizar usuarios de su misma Dependencia (Escuela/Instituto), así como también la posibilidad de asignarles el rol de investigador y/o administrador de dependencia. 6. Permitir al usuario administrador global agregar, modificar, eliminar y visualizar cualquier usuario del sistema, así como también la posibilidad de asignarles el rol de investigador, administrador de dependencia y/o administrador global. 7. Facilitar al usuario administrador de dependencia el acceso a cualquier cuenta de un usuario investigador de su misma Dependencia (Escuela/Instituto). 8. Facilitar al usuario administrador global el acceso a cualquier cuenta de un usuario investigador. 9. Proveer al usuario administrador de dependencia o global la posibilidad de agregar, modificar, eliminar o visualizar cualquier registro de las demás tablas disponibles en la base de datos. Capítulo 4 – Marco aplicativo 48 Requerimientos no funcionales 1. Usabilidad 1.1 Las interfaces deben tener un diseño fácil de usar y memorizar por los usuarios menos experimentados. 1.2 La aplicación debe proporcionar mensajes de error que sean informativos y orientados al usuario final. 1.3 La aplicación debe contar con un diseño adaptativo (responsive), a fin de permitir la adecuada visualización en múltiples dispositivos. 1.4 La aplicación debe contar con un manual de usuario bien estructurado. 1.5 La estructura del código debe ser consistente y predecible. 2. Eficiencia 2.1 La aplicación debe tener un tiempo de respuesta no mayor a 5 segundos por las acciones que se realicen en ella. 2.2 Los datos modificados en la base de datos deben ser actualizados para todos los usuarios que acceden en no más de 5 segundos. 3. Disponibilidad 3.1 El sistema debe tener una disponibilidad del 99,99% de las veces en que un usuario intente accederlo. 4. Seguridad 4.1 La aplicación debe asegurar que los datos estarán protegidos del acceso no autorizado, por ejemplo, usuarios que no posean el rol de administrado. 4.2 Los permisos de acceso al sistema sólo pueden ser cambiados por el administrador del sistema. Capítulo 4 – Marco aplicativo 49 4.2.2. Etapa de análisis En esta etapa se llevó a cabo el análisis de la solución a desarrollar, por lo que se emplearon modelos de casos de uso para representar las funcionalidades de la aplicación, se realizaron prototipos en papel, se diseñó una guía de estilo, se definió la arquitectura a utilizar y se diseñó el modelo de datos que daría soporte a la aplicación. 4.2.2.1. Casos de uso El modelo de casos de uso permite especificar las funcionalidades y el comportamiento del sistema mediante su interacción con usuarios u otros sistemas. Además, con este modelo se llega a un lenguaje estándar que es entendido tanto por los expertos como por los usuarios y que permite el análisis del dominio de la aplicación. A continuación se presentan los diferentes niveles que componen el modelo de casos de uso de la aplicación objetivo de este Trabajo Especial de Grado.  Nivel 0: En la Figura 4.4 se puede observar la interacción de los usuarios con el sistema.  Nivel 1: En la Figura 4.5 se especifica el conjunto de casos de uso que engloban las funcionalidades planteadas para la aplicación y son descritos en las Tablas 4.7, 4.8, 4.9, 4.10, 4.11, 4.12 y 4.13. Figura 4.4 - Modelo de casos de uso - Nivel 0. Capítulo 4 – Marco aplicativo 50 Tabla 4.7 - Caso de uso Solicitar registro Identificador y nombre 1. Solicitar registro Actor(es) Visitante. Descripción Permite al actor llenar un formulario con sus datos personales para solicitar ser registrado en la aplicación y acceder a ella. Precondición Poseer correo de la Facultad de Ciencias. Postcondición Se registran los datos que fueron suministrados en el formulario de registro en la base de datos del sistema, se envía un correo electrónico al administrador para que valide dicho registro y se muestra un mensaje informativo al visitante para que espere por la aprobación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Figura 4.5 - Modelo de casos de uso - Nivel 1. Capítulo 4 – Marco aplicativo 51 Tabla 4.8 - Caso de uso Contactar el administrador Identificador y nombre 2. Contactar al administrador Actor(es) Visitante e Investigador. Descripción Permite al actor llenar un formulario para ponerse en contacto con el administrador del sistema y resolver cualquier duda, inquietud o irregularidad que se le pueda presentar. Precondición Ninguna. Postcondición Se envía la duda, inquietud o irregularidad del usuario al correo del administrador del sistema y se muestra un mensaje satisfactorio de la acción realizada. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.9 - Caso de uso Iniciar sesión Identificador y nombre 3. Iniciar sesión Actor(es) Investigador y Administrador de dependencia o global. Descripción Permite al actor ingresar a la aplicación según el rol seleccionado en el formulario de inicio de sesión. La autenticación se realiza contra el directorio de usuarios activos de la Facultad de Ciencias para validar que se trata de una persona perteneciente a ésta. Si la validación es correcta, se verifica que esté registrado en la base de datos del sistema. Precondición El actor se encuentra registrado en el sistema Postcondición El actor entra en el sistema y visualiza un mensaje de bienvenida y su ficha personal. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.10 - Caso de uso Agregar información general e investigativa Identificador y nombre 4. Agregar información general e investigativa Actor(es) Investigador. Permite al actor agregar toda su información general e investigativa en la aplicación: - Datos generales - Estudios y títulos - Cursos Capítulo 4 – Marco aplicativo 52 Descripción - Idiomas - Reconocimientos - Experiencia laboral - Productos de investigación - Proyectos de investigación - Formación de talentos - Participación en eventos Precondición Haber iniciado sesión en el sistema como investigador. Postcondición Se registra la información suministrada por el investigador y se muestra un mensaje satisfactorio del registro agregado. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 4.1. Visualizar información general e investigativa, 4.2. Modificar información general e investigativa, 4.3. Eliminar información general e investigativa. Tabla 4.11 - Caso de uso Agregar usuario Identificador y nombre 5. Agregar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor agregar un nuevo usuario. Si el actor es un administrador de dependencia, sólo podrá agregar usuarios de su misma Dependencia (Escuela/Instituto). Si el actor es un administrador global podrá agregar usuarios de cualquier Dependencia (Escuela/Instituto). Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Postcondición Se registra el nuevo usuario y se muestra un mensaje satisfactorio del usuario agregado. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 4.1. Visualizar usuario, 4.2. Modificar usuario. Tabla 4.12 - Caso de uso Asignar rol Identificador y nombre 6. Asignar rol Actor(es) Administrador de dependencia o global. Descripción Permite al actor asignar diferentes roles a un usuario (incluso a sí mismo) para limitar sus permisos y vistas en la aplicación. Los roles disponibles son: investigador, administrador de dependencia y administrador global. Si el actor es un administrador de dependencia, sólo podrá asignar roles a usuarios de su misma Dependencia (Escuela/Instituto) y no podrá asignar el rol de administrador global a ninguno. Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Capítulo 4 – Marco aplicativo 53 Postcondición Se asigna el o los roles al usuario seleccionado y se muestra un mensaje satisfactorio de la asignación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.13 - Caso de uso Gestionar información de la aplicación Identificador y nombre 7. Gestionar información de la aplicación Actor(es) Administrador de dependencia o global. Descripción Permite al actor agregar, modificar, eliminar o visualizar cualquier información de las tablas de la aplicación, como por ejemplo, una tabla tipo, país, instituto, línea de investigación, etc. Incluso puede agregar, modificar, eliminar o visualizar información general e investigativa y asociarla a un usuario investigador. Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Postcondición Se agrega, modifica, elimina o visualiza la información según la tabla que se esté gestionando. Se muestra un mensaje satisfactorio dependiendo de la acción realizada. Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: ninguno  Nivel 2: En la Figura 4.6 se observan las funcionalidades que se extienden de los casos de uso expuestos en la Figura 4.5 y se describen en las Tablas 4.14, 4.15, 4.16, 4.17, 4.18 y 4.19 Figura 4.6 - Modelo de casos de uso - Nivel 2. Capítulo 4 – Marco aplicativo 54 Tabla 4.14 - Caso de uso Visualizar información general e investigativa Identificador y nombre 4.1. Visualizar información general e investigativa Actor(es) Investigador. Descripción Permite al actor visualizar en detalle la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se muestra la información general o investigativa suministrada por el investigador. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.15 - Caso de uso Modificar información general e investigativa Identificador y nombre 4.2. Modificar información general e investigativa Actor(es) Investigador. Descripción Permite al actor modificar la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se modifica la información general o investigativa suministrada por el investigador y se muestra un mensaje satisfactorio de la modificación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.16 - Caso de uso Eliminar información general e investigativa Identificador y nombre 4.3. Eliminar información general e investigativa Actor(es) Investigador. Descripción Permite al actor eliminar la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se elimina la información general o investigativa suministrada por el investigador y se muestra un mensaje satisfactorio de la eliminación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Capítulo 4 – Marco aplicativo 55 Tabla 4.17 - Caso de uso Visualizar usuario Identificador y nombre 5.1. Visualizar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor visualizar en detalle la información de un usuario agregado en el sistema. Precondición El usuario debe existir en el sistema. Postcondición Se muestra la información del usuario. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.18 - Caso de uso Modificar usuario Identificador y nombre 5.2. Modificar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor modificar la información de un usuario agregado en el sistema. Precondición El usuario debe existir en el sistema. Postcondición Se modifica la información del usuario seleccionado y se muestra un mensaje satisfactorio de la modificación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.19 - Caso de uso Eliminar usuario Identificador y nombre 5.3. Eliminar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor eliminar a un usuario agregado en el sistema y a su vez todos los registros asociados a éste. Precondición El usuario debe existir en el sistema. Postcondición Se elimina el usuario seleccionado, sus registros asociados y se muestra un mensaje satisfactorio de la eliminación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Capítulo 4 – Marco aplicativo 56 4.2.2.2. Prototipos en papel En el análisis de la aplicación se elaboraron cuatro (4) prototipos en papel de algunas interfaces que podrían visualizar los distintos usuarios de la aplicación. Dichos prototipos también se diseñaron en digital para tener una mayor claridad de lo esbozado en papel. Cabe resaltar que los prototipos en papel presentados fueron solo un punto de partida de lo que se diseñaría realmente, ya que los prototipos ejecutables, que se mostrarán más adelante, cambiaron un poco en el diseño planteado según las necesidades y recomendaciones dadas durante el desarrollo. En la Figura 4.7 se puede observar un prototipo de la interfaz principal de la aplicación, la cual dispone de un pequeño menú en la parte superior derecha con tres enlaces disponibles, uno para contactar con el administrador del sistema, uno para visualizar el manual de usuario y uno para iniciar sesión. También dispone de un banner alusivo a la investigación, información e imágenes asociadas a la aplicación y un pie de página. En la Figura 4.8 se puede observar un prototipo de una interfaz de un usuario investigador, la cual dispone del mismo banner presentado en la interfaz principal, un menú dividido en varias secciones según la información que se debe suministrar en cada una (general, académica, laboral, etc.) y un ejemplo de un formulario con campos para rellenar, en este caso el formulario de datos generales del investigador. Figura 4.7 - Prototipo en papel y digital de la interfaz principal de la aplicación. Capítulo 4 – Marco aplicativo 57 En la Figura 4.9 se puede observar un prototipo de otra interfaz visible para un usuario investigador, la cual cuenta con una lista de registros agregados por el usuario, en este caso una lista de sus proyectos de investigación, los cuales puede visualizar, modificar o eliminar. En la Figura 4.10 se puede observar un prototipo de una interfaz de un usuario administrador (de dependencia o global), la cual dispone del mismo banner presentado en las otras interfaces, un menú dividido en varias secciones según la información que puede gestionar y un ejemplo de una lista de registros, en este caso una lista de usuarios del sistema, los cuales puede visualizar, modificar o eliminar. Figura 4.8 - Prototipo en papel y digital de una interfaz del investigador. Figura 4.9 - Prototipo en papel y digital de una lista de registros agregados por un investigador. Capítulo 4 – Marco aplicativo 58 4.2.2.3. Guía de estilo En la guía de estilo se definió la gama de colores utilizados en la aplicación, la tipografía y color de fuente, características de los botones y logos utilizados.  Gama de colores Para la aplicación se utilizó mayormente una gama de colores fríos (azul y verde), para transmitir delicadeza, frescura y serenidad.  Colores principales: son los colores básicos de la aplicación, los que la definen y ocupan la gran mayoría de la misma. En este caso se utilizaron colores azules (ver Figura 4.11) para lograr una sensación de comodidad, tranquilidad y serenidad en el usuario cuando navegara por la aplicación.  Colores secundarios: son los segundos colores predominantes en la aplicación, aunque en mucha menor medida que los principales. En este caso se utilizaron colores verdes (ver Figura 4.12) que mantuvieran equilibrio con los colores principales. Figura 4.11 - Colores principales. Figura 4.10 - Prototipo en papel y digital de una interfaz del administrador. Capítulo 4 – Marco aplicativo 59  Colores destacados: son los colores que se utilizan para resaltar aspectos concretos de la aplicación y llamar la atención del usuario. En este caso se utilizaron colores rojos (ver Figura 4.13), para resaltar algunos elementos de la aplicación como campos requeridos en un formulario, información importante, mensajes de error, entre otros.  Tipografía y color de fuente La tipografía que se utilizó en toda la aplicación fue “Lato”. Para los títulos se utilizó el color azul #007aff y para otros textos el color gris #666666, como se puede observar en la Figura 4.14.  Botones Los botones de la aplicación tienen un estilo sencillo, con esquinas redondeadas y texto en color blanco #ffffff, como se puede observar en la Figura 4.15. Figura 4.14 - Tipografía y color de fuente. Figura 4.12 - Colores secundarios. Figura 4.13 - Colores destacados. Capítulo 4 – Marco aplicativo 60  Logo El logo de la aplicación se muestra en dos versiones, una con la descripción de las siglas SIGIC (Sistema de Gestión de Información Científica), como se observa en la Figura 4.16 y otro sin la descripción, como se observa en la Figura 4.17. Para el logo se utilizó el color turquesa #4bacc6, el azul #007aff y el gris #8e8e8e, los cuales mantienen relación con la gama de colores fríos seleccionados para aplicación. 4.2.2.4. Arquitectura La arquitectura de la aplicación es de tipo cliente–servidor. El cliente (cualquier navegador web) se encarga de iniciar la comunicación con el servidor web a través de la red, emitiendo una petición de una página web de la aplicación, y el servidor web se encargará de devolver dicha página web solicitada por el cliente. Para el desarrollo de la aplicación se utilizó el lenguaje Ruby (versión 2.2.3) y el marco de trabajo Rails (versión 4.2.4). Las razones por la que se seleccionaron estas tecnologías fueron las siguientes:  Ruby y Rails son fáciles de aprender y de usar.  La sintaxis de Ruby es concisa y legible.  Buenas prácticas y lineamientos de calidad.  Ruby dispone de una cantidad enorme de paquetes de terceros (Gemas), que ayudan a reducir el tiempo de desarrollo.  Gran comunidad y colaboradores. Para la parte del diseño de las vistas de la aplicación se utilizó HTML5, CSS3, JavaScript, jQuery, Ajax y Bootstrap, que son lenguajes que se ejecutan e interpretan del lado del cliente, sin la necesidad de tener que hacer una petición al servidor web. Figura 4.16 - Logo con descripción Figura 4.17 - Logo sin descripción Figura 4.15 - Botones. Capítulo 4 – Marco aplicativo 61 Para la construcción de la base de datos que contiene la información de los investigadores de la Facultad de Ciencias se utilizó el Sistema Manejador de Base de Datos PostgreSQL (versión 9.4.5), ya que éste soporta gran número de peticiones simultáneas, tiene gran capacidad de almacenamiento, mantiene su velocidad de respuesta al aumentar el tamaño de la base de datos y ofrece estabilidad y confiabilidad. Finalmente, para realizar la migración de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación, se utilizó la herramienta Pentaho Integration Community Edition (versión 5.4), con la cual se realizaron las transformaciones necesarias para almacenar la información correctamente. En la Figura 4.18 se puede apreciar la arquitectura planteada. 4.2.2.5. Modelo de datos Un modelo de datos muestra de manera gráfica la forma como los datos se relacionan entre sí, formando una estructura en la cual se soporta la aplicación. Para esta primera iteración se diseñó el modelo de datos de la aplicación a partir de una versión inicial de la base de datos del Registro Nacional de Innovación e Investigación (RNII). Dicho modelo de datos tuvo algunas adaptaciones durante el desarrollo de la aplicación, por lo que a continuación se muestra en la Figura 4.19 la primera versión de dicho modelo, un modelo relacional normalizado. Figura 4.18 - Arquitectura de la aplicación. Capítulo 4 – Marco aplicativo 62 Figura 4.19 - Modelo relacional normalizado (primera versión). Capítulo 4 – Marco aplicativo 63 4.2.3. Etapa de prototipaje Para la etapa de prototipaje de esta primera iteración, se realizó un primer prototipo ejecutable de la aplicación, abarcando la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador. Este prototipo se realizó a partir de los artefactos obtenidos en las etapas anteriores. 4.2.3.1. Prototipo ejecutable Se comenzó por construir la base de datos en la que se apoyaría la aplicación según el modelo de datos diseñado en la etapa de análisis. Para ésto se utilizó el Sistema Manejador de Base de Datos PostgreSQL y posteriormente la gema ActiveRecord de Rails para obtener el esquema de dicha base de datos (rake db:schema:dump) y realizar el CRUD (Create, Read, Update, Delete) de cada tabla de manera rápida y sencilla, obteniendo de esta manera los modelos, los controladores y las vistas necesarias para el desarrollo de cada una de las funcionalidades de la aplicación. En la Figura 4.20 se puede observar parte del script SQL de la base de datos de la aplicación y en la Figura 4.21 los comandos de Rails utilizados para realizar el CRUD de cada tabla de la base de datos. Figura 4.20 - Parte del script SQL de la base de datos de la aplicación. Capítulo 4 – Marco aplicativo 64 También se realizaron algunas inserciones en las tablas base de la base de datos, como por ejemplo, la tabla país, estado, municipio, parroquia, área de conocimiento, subárea de conocimiento, disciplina, entre otras, con el fin de poder realizar pruebas durante el desarrollo. En la Figura 4.22 se pueden observar algunas de las inserciones realizadas. Una vez lista la base de datos y las inserciones, se comenzó a diseñar la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador, utilizando como base las vistas que se crearon cuando se hizo el CRUD de la base de datos. Utilizando HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails se construyeron todas las vistas que componen este prototipo. Además son adaptativas a cualquier dispositivo en donde se visualicen. Figura 4.21 - Comandos de Rails para el crear CRUD de cada tabla de la base de datos. Figura 4.22 - Script SQL de las inserciones realizadas en la base de datos. Capítulo 4 – Marco aplicativo 65  Interfaz principal En la Figura 4.23 se puede observar la interfaz principal de la aplicación, la cual claramente tuvo diferencias con respecto al diseño planteado en el prototipo en papel, ya que se pensaron nuevas ideas que podrían resultar más atractivas para el usuario, como por ejemplo, un carrusel de imágenes con información relacionada a la aplicación y un conjunto de fotografías de investigadores de la propia Facultad de Ciencias. Cabe destacar que para este primer prototipo, los botones de registro e iniciar sesión no eran funcionales todavía, sino que se accedía directamente a las demás interfaces de la aplicación sin realizar ningún tipo de autenticación.  Interfaces para usuarios investigadores Se construyeron treinta y nueve (39) interfaces para los usuarios investigadores, por lo que a continuación se muestran las más representativas. En la Figura 4.24 se puede observar la interfaz de inicio del investigador, la cual se compone principalmente de un menú dividido en siete (7) secciones donde podrá ingresar toda su información (general, académica, laboral, etc.), y de una ficha con sus datos más básicos. Figura 4.23 - Interfaz principal de la aplicación. Capítulo 4 – Marco aplicativo 66 Las secciones del menú son:  Datos generales.  Formación académica.  Experiencia laboral.  Productos de investigación.  Proyectos de investigación.  Formación de talento.  Participación en eventos. En la Figura 4.25 se puede observar la misma interfaz de inicio pero adaptada a un teléfono móvil. Figura 4.24 - Interfaz de inicio de un investigador. Figura 4.25 - Interfaz de inicio de un investigador en un teléfono móvil. Capítulo 4 – Marco aplicativo 67 A continuación, en la Figura 4.26 se puede observar la interfaz de datos generales del investigador, donde éste podrá actualizar su estado civil, fecha de nacimiento, país de nacimiento, ciudad de nacimiento, domicilio, teléfono de casa, teléfono celular, correo principal, correo alternativo y sitio web. En esta interfaz y en las demás se resalta en color azul la sección donde se encuentra el investigador y se le proporciona una miga de pan para indicarle el recorrido seguido y la forma de regresar. Figura 4.26 - Interfaz de datos generales del investigador. Capítulo 4 – Marco aplicativo 68 En la Figura 4.27 se puede observar la lista de experiencias laborales del investigador, organizada en una tabla que contiene los detalles más importantes de cada experiencia y tres (3) posibles acciones a realizar sobre cada registro: ver, editar, eliminar (ver Figura 4.28). Esta tabla se presenta de igual forma en todas las demás secciones provistas para el investigador, menos en la sección de datos generales. También se presenta un botón verde llamativo para que el investigador pueda agregar una nueva experiencia laboral a su lista. Figura 4.27 - Interfaz con lista de experiencias laborales del investigador. Figura 4.28 – Metáforas de las acciones a realizar sobre un registro. Capítulo 4 – Marco aplicativo 69 En la Figura 4.29 se muestra el formulario para agregar una nueva experiencia laboral, el cual tiene el mismo diseño que el formulario presentado en la Figura 4.26, solo que en este caso la estructura de la interfaz varia un poco, ya que se agregó una columna del lado derecho del formulario, destinada a mostrar un mensaje importante para el investigador. La mayoría de las secciones tiene la misma estructura al agregar y editar algún elemento, menos las sección de datos generales y la sección de formación académica – idiomas. En algunos formularios se presenta un botón verde con el símbolo más (+) al lado de algunos campos, como por ejemplo el campo institución de la Figura 4.29. Dicho botón se dispuso para que el investigador pudiera solicitar agregar una nueva institución que no se encuentre en la lista de instituciones presentada. Dicha solicitud se muestra en un formulario contenido en un modal como se puede observar en las Figuras 4.30. Figura 4.29 - Interfaz para agregar una experiencia laboral. Capítulo 4 – Marco aplicativo 70 Al presionar el botón guardar de la Figura 4.30, se envía un mensaje de solicitud de validación de la institución recién agregada al correo del administrador del sistema. Para enviar este correo fue necesario utilizar la gema ActionMailer de Rails y realizar algunas configuraciones como se muestra en la Figura 4.31. En la Figura 4.32 se puede observar el mensaje que se le muestra al investigador una vez que ha sido enviada la solicitud. Figura 4.30 - Modal para solicitar agregar una institución. Figura 4.32 - Mensaje satisfactorio del envío de solicitud para agregar una institución. Figura 4.31 - Configuraciones para enviar correos con ActionMailer. Capítulo 4 – Marco aplicativo 71 En la Figura 4.33 se muestra la interfaz donde se visualiza en detalle la información de una experiencia laboral agregada. Dicha interfaz permite descargar el documento que respalda la información que fue suministrada para esa experiencia y provee dos botones para facilitar la modificación o eliminación de la misma. Todas las secciones tienen el mismo diseño para visualizar un registro específico. En la Figura 4.34 se presenta el formulario destinado para modificar una experiencia laboral, el cual tiene la misma estructura, diseño y campos que el formulario de agregar experiencia laboral, solo que en este caso los campos ya incluyen la información que fue suministrada anteriormente. Todas las secciones tienen la misma estructura y diseño para modificar un registro específico. Figura 4.33 - Interfaz para visualizar una experiencia laboral. Capítulo 4 – Marco aplicativo 72 Para las interfaces donde se listan los productos, proyectos y participaciones en eventos del investigador, se colocó un buscador encima del botón de agregar, con el fin de facilitar el registro de productos, proyectos o eventos que pueda tener en común con otros investigadores. Por ejemplo, un investigador puede haber participado en un producto que ya agregó uno de sus colegas, por lo tanto, sólo tendría que buscarlo y agregarlo a su lista. En las Figuras 4.35 y 4.36 se puede observar el buscador perteneciente a la sección de productos y su funcionamiento respectivamente. Figura 4.34 - Interfaz para modificar una experiencia laboral. Capítulo 4 – Marco aplicativo 73 Figura 4.35 - Buscador de productos. Figura 4.36 - Funcionamiento del buscador de productos. Capítulo 4 – Marco aplicativo 74 Finalmente, para este prototipo se realizó un formulario de contacto, donde usuarios visitantes o investigadores pueden enviarle un mensaje al administrador del sistema ante cualquier duda, inquietud o irregularidad. Para este formulario también se hizo uso de la gema ActionMailer de Rails. En la Figura 4.37 se puede observar el formulario de contacto. 4.2.3.2. Lista de comprobación Una vez terminado el primer prototipo ejecutable, se aplicó la técnica de evaluación de usabilidad llamada lista de comprobación, para la cual se utilizaron las diez (10) heurísticas de Nielsen como principios para el diseño de la interfaces de usuario. Las diez (10) heurísticas de Nielsen son (Nielsen, 1995): 1. Visibilidad del estado del sistema: el sistema siempre debería mantener informado al usuario de lo que está ocurriendo, a través de retroalimentación apropiada dentro de un tiempo razonable. 2. Relación entre el sistema y el mundo real: el sistema debería hablar el lenguaje de los usuarios mediante palabras, frases y conceptos que sean familiares al usuario, más que con términos relacionados con el sistema. Seguir las convenciones del mundo real, haciendo que la información aparezca en un orden natural y lógico. 3. Control y libertad del usuario: hay ocasiones en que los usuarios elegirán las funciones del sistema por error y necesitarán una “salida de emergencia” claramente Figura 4.37 - Formulario de contacto. Capítulo 4 – Marco aplicativo 75 marcada para dejar el estado no deseado al que accedieron, sin tener que pasar por una serie de pasos. Se deben apoyar las funciones de deshacer y rehacer. 4. Consistencia y estándares: los usuarios no deberían cuestionarse si acciones, situaciones o palabras diferentes significan en realidad la misma cosa; siga las convenciones establecidas. 5. Prevención de errores: mucho mejor que un buen diseño de mensajes de error es realizar un diseño cuidadoso que prevenga la ocurrencia de problemas. 6. Reconocimiento antes que recuerdo: se deben hacer visibles los objetos, acciones y opciones. El usuario no tendría que recordar la información que se le da en una parte del proceso, para seguir adelante. Las instrucciones para el uso del sistema deben estar a la vista o ser fácilmente recuperables cuando sea necesario. 7. Flexibilidad y eficiencia de uso: la presencia de aceleradores, que no son vistos por los usuarios novatos, puede ofrecer una interacción más rápida a los usuarios expertos que la que el sistema puede proveer a los usuarios de todo tipo. Se debe permitir que los usuarios adapten el sistema para usos frecuentes. 8. Estética y diseño minimalista: los diálogos no deben contener información que es irrelevante o poco usada. Cada unidad extra de información en un diálogo, compite con las unidades de información relevante y disminuye su visibilidad relativa. 9. Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: los mensajes de error se deben entregar en un lenguaje claro y simple, indicando en forma precisa el problema y sugerir una solución constructiva al problema. 10. Ayuda y documentación: incluso en los casos en que el sistema pueda ser usado sin documentación, podría ser necesario ofrecer ayuda y documentación. Dicha información debería ser fácil de buscar, estar enfocada en las tareas del usuario, con una lista concreta de pasos a desarrollar y no ser demasiado extensa. Para verificar el cumplimiento de cada principio se describieron algunos ejemplos que muestran cómo se incorporaron en las interfaces diseñadas en este prototipo.  Visibilidad del estado del sistema: cuando un investigador solicita añadir una nueva línea de investigación o institución a la aplicación, se muestra un mensaje de “Espere un momento por favor…” después de presionar el botón guardar, ya que esta solicitud tarda unos segundos en realizarse. La Figura 4.38 muestra el mensaje mencionado. Capítulo 4 – Marco aplicativo 76  Relación entre el sistema y el mundo real: cuando ocurre algún tipo de error en el sistema se muestra un mensaje informativo al investigador con palabras familiares, evitando mensajes del tipo “Error 30452”. En la Figura 4.39 se puede observar un ejemplo de un mensaje de error.  Control y libertad del usuario: el investigador podría presionar por error el botón de eliminar un producto, un proyecto, un curso, etc., pero el sistema le da el control de poder cancelar dicha solicitud, tal y como se puede ver en la Figura 4.40.  Consistencia y estándares: en todas las interfaces donde aparecen listas de registros, se utilizaron las mismas metáforas para las acciones: ver, editar y eliminar. En la Figura 4.41 se pueden ver las metáforas utilizadas en las listas. Figura 4.38 - Mensaje de espera al agregar una línea de investigación. Figura 4.39 - Mensaje de error con palabras familiares. Figura 4.40 - Confirmación antes de eliminar un registro. Figura 4.41 - Metáforas para las acciones: ver, editar y eliminar. Capítulo 4 – Marco aplicativo 77  Prevención de errores: los campos con fechas de culminación que aparecen en algunos formularios, se restringen dependiendo de lo colocado en la fecha de inicio, para que no se pueda colocar una fecha menor, como se puede ver en la Figura 4.42.  Reconocimiento antes que recuerdo: en los formularios se hizo uso de listas desplegables que no sólo previenen errores de escritura, también permiten al investigador reconocer las opciones disponibles en lugar de verse obligado a recordarlas todas. Por ejemplo, en la Figura 4.43 se muestran todas las opciones de áreas de conocimiento. X Flexibilidad y eficiencia de uso: en este prototipo no se incluye ningún tipo de acelerador para usuarios expertos.  Estética y diseño minimalista: los colores utilizados en las interfaces fue limitado para alcanzar el balance entre lo estético y lo minimalista.  Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: en los formularios se hizo uso de advertencias tras un error por parte del usuario. Por ejemplo, si el investigador olvida introducir el archivo de un curso que está agregando y presiona el botón guardar, la aplicación detiene la acción y envía una advertencia, tal como se puede ver en la Figura 4.44. Figura 4.43 - Lista desplegable de áreas de conocimiento. Figura 4.42 - Restricción de una fecha de culminación. Capítulo 4 – Marco aplicativo 78  Ayuda y documentación: para ayudar a el investigador con cualquier duda que se la pueda presentar se colocó dentro de la aplicación un enlace directo al manual de usuario, como se observa en la Figura 4.45. 4.2.3.3. Pensamiento en voz alta Una vez realizada la lista de comprobación, se les presentó el prototipo ejecutable al cliente y a las tutoras académicas (usuarios), y se les pidió que manifestaran en voz alta sus pensamientos, sentimientos y opiniones con respecto al mismo. El cliente y las tutoras manifestaron su satisfacción con el diseño de las interfaces y realizaron sugerencias con respecto a mejorar algunos campos de los formularios de productos y proyectos. También sugirieron cambiar de lugar el buscador que se presenta en la sección de productos, proyectos y participación en eventos, ya que no les parecía intuitiva la función de dicho buscador en la parte de las listas, sino más bien en los respectivos formularios para agregar un nuevo registro. Todas las sugerencias se tomaron en cuenta y se realizaron los cambios necesarios antes de cerrar la iteración. En la Figura 4.46 se puede observar cómo quedó el buscador de productos dentro del formulario para agregar un producto de investigación. Los demás buscadores también fueron cambiados de lugar. Figura 4.45 - Manual de usuario dentro de la aplicación. Figura 4.44 - Advertencia emergente al no agregar el documento que respalda la información suministrada por el investigador. Capítulo 4 – Marco aplicativo 79 4.2.4. Cierre de la iteración Una vez terminada la iteración, se determinó que la forma en que se diseñaron las interfaces y se realizaron las funcionalidades de las mismas era adecuada para realizarse de igual manera en las interfaces faltantes de la aplicación. 4.3. Segunda iteración: interfaz de inicio de sesión e interfaz de solicitud de registro Para la segunda iteración de este proceso de desarrollo se tuvieron como objetivos:  Determinar en la etapa de análisis el diseño y las adaptaciones necesarias para desarrollar las interfaces de inicio de sesión y solicitud de registro que utilizaran los distintos usuarios de la aplicación.  Construir las interfaces de inicio de sesión y solicitud de registro e integrarlas al primer prototipo desarrollado. 4.3.1. Etapa de análisis En esta etapa se llevó a cabo el análisis de las interfaces de inicio de sesión y solicitud de registro, por lo que se realizaron prototipos en papel de dichas interfaces y se adaptó el modelo de datos de la primera iteración. 4.3.1.1. Prototipos en papel Figura 4.46 - Buscador de producto dentro del formulario agregar. Capítulo 4 – Marco aplicativo 80 En el análisis de la aplicación de la primera iteración se realizaron algunos prototipos en papel de varias interfaces, pero ninguno referido al inicio de sesión y solicitud de registro en la aplicación, por lo que en esta iteración se diseñaron nuevos prototipos. En la Figura 4.47 se puede observar un prototipo de la interfaz para iniciar sesión en la aplicación, la cual dispone de un pequeño formulario en el centro de la pantalla donde el usuario colocará el rol con el que desea entrar a la aplicación, su correo de la Facultad de Ciencias y la contraseña del mismo. En la Figura 4.48 se puede observar un prototipo de la interfaz para solicitar registrarse en la aplicación, la cual se compone de una serie de campos que debe rellenar el usuario, incluyendo entre ellos el correo de la Facultad de Ciencias. Figura 4.47 - Prototipo en papel y digital de la interfaz de inicio de sesión. Figura 4.48 - Prototipo en papel y digital de la interfaz de solicitud de registro. Capítulo 4 – Marco aplicativo 81 4.3.1.2. Modelo de datos El modelo de datos de la primera iteración no contempló las relaciones necesarias para que los usuarios tuvieran uno o varios roles en la aplicación y pudieran iniciar sesión con alguno de ellos. Además este modelo incluía una tabla llamada “Investigador”, la cual era limitante, ya que no todo usuario necesariamente tiene que ser investigador, puede ser solo administrador o ambos. A raíz de esto, se decidió acomodar el modelo de datos, cambiando aquellas tablas que incluían la palabra “Investigador” por “Usuario” y creando las tablas “Usuario_Rol” y “Rol”, como se puede observar en la Figura 4.49. Capítulo 4 – Marco aplicativo 82 Figura 4.49- Modelo relacional normalizado (última versión). Capítulo 4 – Marco aplicativo 83 4.3.2. Etapa de prototipaje Para la etapa de prototipaje de esta segunda iteración, se realizó un segundo prototipo ejecutable de la aplicación, donde se incluyó la construcción de la interfaz de inicio de sesión y la interfaz de solicitud de registro. 4.3.2.1. Prototipo ejecutable Se comenzó por modificar la base de datos de la aplicación según la nueva versión del modelo de datos obtenido en la etapa de análisis. Seguidamente, se volvió a hacer uso de la gema ActiveRecord de Rails para obtener el esquema de la nueva base de datos y se realizó el CRUD (Create, Read, Update, Delete) de las tablas que fueron incorporadas. En la Figura 4.50 se puede observar parte del script SQL de la base de datos de la aplicación con la incorporación de las nuevas tablas y en la Figura 4.51 los comandos de Rails para realizar el CRUD de dichas tablas. Figura 4.50 - Parte del script SQL de la base de datos de la aplicación con las nuevas tablas incorporadas. Capítulo 4 – Marco aplicativo 84 También se realizaron las inserciones de los roles “Investigador”, “Administrador de dependencia” y “Administrador global” en la tabla “Rol”. Una vez lista la base de datos y las inserciones, se comenzó a diseñar la interfaz de inicio de sesión, utilizando nuevamente HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails, como se puede ver en la Figura 4.52. Para hacer totalmente funcional esta interfaz, fue necesario utilizar la gema devise_ldap_authenticatable de Rails, la cual permitió verificar contra el directorio de usuarios activos de la Facultad de Ciencias, la autenticidad del correo y la contraseña suministrada en el formulario. Dicha gema utiliza el Protocolo Ligero/Simplificado de Acceso a Directorios para comunicarse y acceder fácilmente a la información del directorio de la Facultad. En la Figura 4.53 se puede observar parte de la configuración que fue necesaria para establecer la comunicación con el directorio de usuarios activos la Facultad de Ciencias y en la Figura 4.54 parte del código que se ejecuta al presionar el botón de iniciar sesión de la Figura 4.52. Figura 4.51 - Comandos de Rails para el crear CRUD de las nuevas tablas de la base de datos Figura 4.52 - Interfaz de inicio de sesión de la aplicación. Capítulo 4 – Marco aplicativo 85 Seguidamente se diseñó y construyó la interfaz de solicitud de registro, la cual cuenta con un mensaje informativo para el usuario (ver Figura 4.55) antes de mostrar el formulario de registro (ver Figura 4.56). Para esta interfaz se hizo uso de la gema ActionMailer de Rails, ya que al presionar el botón de registrarse se envía un correo al administrador del sistema para que valide el registro del usuario. Figura 4.53 - Configuración para establecer conexión con el directorio de usuarios activos de la Facultad de Ciencias. Figura 4.54 - Código que funciona detrás del inicio de sesión. Capítulo 4 – Marco aplicativo 86 4.3.2.2. Pensamiento en voz alta Una vez terminadas las interfaces de inicio de sesión y solicitud de registro, se realizó una reunión con las tutoras académicas (usuarios), las cuales manifestaron su conformidad con dichas interfaces y no sugirieron ningún cambio al respecto. Figura 4.56 - Interfaz de solicitud de registro de la aplicación - Formulario. Figura 4.55 - Interfaz de solicitud de registro de la aplicación – Mensaje informativo. Capítulo 4 – Marco aplicativo 87 4.3.3. Cierre de la iteración Una vez terminada la iteración, se determinó, que la forma en que se diseñaron las interfaces y se realizaron las funcionalidades de las mismas siguió siendo adecuada con respecto a todo lo desarrollado hasta el momento. 4.4. Tercera iteración: interfaces para un usuario con perfil de administrador (de dependencia o global) Para la tercera iteración de este proceso de desarrollo se tuvieron como objetivos:  Determinar en la etapa de análisis el diseño de algunas de las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global).  Construir las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global).  Cargar en la base de datos de la aplicación la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación.  Elaborar el manual de usuario de la aplicación.  Realizar la prueba de aceptación de la aplicación y corregir los errores de usabilidad que se puedan encontrar. 4.4.1. Etapa de análisis En esta etapa se llevó a cabo nuevamente un análisis del diseño de las interfaces destinadas para un usuario con perfil de administrador (de dependencia o global), ya que aunque se había propuesto un prototipo de una interfaz para el administrador en la primera iteración, éste ya no estaba acorde a lo desarrollado hasta el momento. 4.4.1.1. Prototipos en papel Se diseñaron tres (3) nuevos prototipos en papel de algunas interfaces destinadas para un usuario administrador, tomando en consideración la importancia de este perfil sobre la información del sistema. Ser administrador implica tener acceso a la gran mayoría de la información contenida en la base de datos del sistema, por tal motivo se comenzó por definir las secciones del menú Capítulo 4 – Marco aplicativo 88 que serían visibles para este usuario, las cuales serían aquellas secciones que éste necesitaría gestionar con más frecuencia. Las secciones elegidas para el menú fueron: Usuarios, Asignación de roles, Instituciones, Líneas de investigación, Productos de investigación, Proyectos de investigación, Eventos y Otras tablas (ver Figura 4.57). La mayoría de las secciones de las interfaces del administrador tienen el mismo diseño y estructura que las interfaces (listar, agregar, visualizar y modificar un registro) de un investigador, por lo que los siguientes prototipos se enfocaron en las interfaces que variarían un poco en su funcionalidad, como lo son: Asignación de roles y Otras tablas. En la Figura 4.58 se puede observar un prototipo de la interfaz de asignación de roles, la cual contiene una lista organizada con los usuarios de la aplicación y sus roles correspondientes. En la Figura 4.59 se puede observar un prototipo de la interfaz para gestionar otras tablas del sistema, la cual contiene en orden alfabético una lista de enlaces de todas las demás tablas del sistema que el administrador puede gestionar. Figura 4.57 - Prototipo en papel y digital del menú de las interfaces de un administrador. Figura 4.58 - Prototipo en papel y digital de la interfaz de asignación de roles. Capítulo 4 – Marco aplicativo 89 4.4.2. Etapa de prototipaje Para la etapa de prototipaje de esta tercera iteración, se realizó el último prototipo ejecutable de la aplicación, abarcando las interfaces destinadas al usuario con perfil de administrador (de dependencia o global). 4.4.2.1. Prototipo ejecutable  Interfaces para usuarios administradores Para este prototipo ejecutable no fue necesario realizar ningún cambio en el modelo de datos planteado en la iteración anterior, por lo que se procedió directamente a construir todas las interfaces destinadas al usuario con perfil de administrador (de dependencia o global), utilizando nuevamente HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails Se construyeron doscientas diecisiete (217) interfaces para un usuario con perfil de administrador, por lo que a continuación se muestran las más representativas. Cabe destacar que todas las interfaces son iguales tanto para un administrador de dependencia como para un administrador global, lo que vería es la permisología de cierta información, ya que un administrador de dependencia solo puede gestionar usuarios e información de usuarios de su misma Dependencia (Escuela/Instituto). En la Figura 4.60 se puede observar la interfaz de inicio de un administrador, la cual se compone principalmente de un menú dividido en ocho (8) secciones que le permite gestionar la información contenida en la base de datos del sistema, y de una ficha con sus datos más básicos. Figura 4.59 - Prototipo en papel y digital de la interfaz para gestionar otras tablas. Capítulo 4 – Marco aplicativo 90 Las secciones del menú son:  Usuarios.  Asignación de roles.  Instituciones.  Línea de investigación.  Productos de investigación.  Proyectos de investigación.  Eventos.  Otras tablas. En la Figura 4.61 se puede observar la lista de los usuarios que puede gestionar el administrador, la cual se encuentra organizada en una tabla que contiene los detalles más importantes de cada usuario y tres (3) o cuatro (4) posibles acciones a realizar sobre cada registro: ver, editar, eliminar y acceder a la cuenta del investigador. La acción de acceder a la cuenta del investigador sólo aparecerá en los usuarios que estén validados y posean el rol de investigador. El administrador tiene la posibilidad de organizar la lista de usuarios a su gusto, ya sea por ID, por documento de identidad o cualquier otro atributo, así como también puede realizar búsquedas en dicha lista filtrando por alguna palabra que proporcione. Es importante resaltar que aquellos usuarios que tenga el campo “Validado” como “NO”, no podrán acceder al sistema hasta que el administrador revise su información y cambie dicho campo a “SI”. Figura 4.60 - Interfaz de inicio de un administrador. Capítulo 4 – Marco aplicativo 91 En la Figura 4.62 se puede observar la interfaz que contiene la lista de los roles que han sido asignados para cada usuario que puede gestionar el administrador. Cada registro puede ser visualizado en detalle o modificado. Figura 4.61 - Interfaz con lista de usuarios que puede gestionar el administrador. Figura 4.62 - Interfaz con la lista de roles asignados a cada usuario. Capítulo 4 – Marco aplicativo 92 En la Figura 4.63 se puede observar la interfaz que contiene la lista de las instituciones registradas en la aplicación, que al igual que las líneas de investigación, tienen que estar en constante revisión, ya que los investigadores pueden realizar solicitudes de nuevas instituciones que deben ser validadas por el administrador. Por último, en la Figura 4.64 se puede observar la interfaz que contiene en orden alfabético una lista de enlaces a todas las demás tablas del sistema que el administrador puede gestionar. La mayoría de las tablas restantes del sistema son tablas bases o tipo como país, estado, municipio, etc., aunque también se incluyen las tablas que contienen la información de los investigadores, como cursos, reconocimientos, etc. El administrador tiene la posibilidad de agregar, modificar o eliminar información (estudios, cursos, productos, etc.) de un investigador desde estas interfaces o accediendo directamente a la cuenta del investigador, como se explicó anteriormente. Figura 4.63 - Interfaz con la lista de instituciones registradas en la aplicación. Capítulo 4 – Marco aplicativo 93  Extracción, transformación y carga de datos Culminadas las interfaces del administrador, se procedió a realizar la migración de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación a la base de datos del sistema, realizando un proceso extracción, transformación y carga con la herramienta Spoon de Pentaho Data Integration. En la Figura 4.65 se muestra parte de la información básica de los investigadores recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación, la cual pasaría por un proceso de transformación para cargarla en las tablas “Usuario”, “Usuario_Experiencia_Laboral” y “Usuario_Rol” de la base de datos del sistema. Figura 4.64 - Interfaz para gestionar otras tablas. Capítulo 4 – Marco aplicativo 94 Para iniciar la migración se realizó un proceso de calidad de datos, donde se identificó:  Datos faltantes o innecesarios.  Datos almacenados en un formato no estandarizado.  Datos que aportaran información conflictiva.  Datos incorrectos o caducados.  Datos o atributos repetidos.  Resultados, valores o cálculos fuera del rango. Una vez realizada la calidad de datos, se extrajo la información contenida en las hojas de cálculo (MS Excel) con la herramienta Spoon. Seguidamente se procedió a realizar la primera transformación necesaria, la cual consistió en separar el nombre del investigador en cuatro campos: primer nombre, segundo nombre, primer apellido y segundo apellido, para que se ajustara a los campos de la tabla destino. Posteriormente se realizó una segunda transformación, que consistió en crear el correo institucional de cada investigador, ya que las hojas de cálculo (MS Excel) no contenían el correo de ningún usuario y dicho campo en la tabla “Usuario” es obligatorio. Por otra parte, es necesario tener registrado el correo de cada investigador para que éste pueda acceder al sistema. Para crear el correo Ciencias se concatenó el primer nombre, un punto y el primer apellido del investigador más el sufijo @ciens.ucv.ve, ya que es el formato común de los correos creados en la Facultad de Ciencias, aunque en algunos casos dicho formato no se Figura 4.65 - Información básica de los investigadores en hojas de cálculo (MS Excel). Capítulo 4 – Marco aplicativo 95 cumple. A futuro será necesario que un administrador se encargue de revisar los correos creados o que vuelva a solicitar la información de los investigadores a la Coordinación de Investigación pero esta vez actualizada. Una vez realizadas todas las transformaciones, se cargaron los datos en la tabla destino “Usuario”. Los datos cargados fueron: primer nombre, segundo nombre, primer apellido, segundo apellido, tipo de documento de identidad, documento de identidad, genero, estado civil, fecha de nacimiento, Dependencia (Escuela/Instituto) a la que pertenece, correo Ciencias y estado en la Facultad (Activo o Jubilado). En la Figura 4.66 se puede ver la extracción, transformación y carga realizada. Ya cargados todos los usuarios en el sistema como se puede ver en la Figura 4.67, se procedió a asignarles el correspondiente cargo, escalafón y dedicación que tienen la Facultad de Ciencias en la tabla “Usuario_Experiencia” (ver Figura 4.68). Por último, se procedió a asignarles a todos el rol de investigador en la tabla “Usuario_Rol”, como se puede ver en la Figura 4.69. Figura 4.66 - Extracción, Transformación y Carga de la información básica de los investigadores realizada en Spoon. Capítulo 4 – Marco aplicativo 96 Figura 4.67 - Investigadores cargados en la base de datos. Figura 4.68 - Asignación de cargo, escalafón y dedicación a los investigadores realizada con Spoon. Figura 4.69 - Asignación de roles a los investigadores realizada con Spoon. Capítulo 4 – Marco aplicativo 97  Manual de usuario Terminadas las transformaciones, se elaboró el manual de usuario que sería visible para visitantes e investigadores. El manual se puede visualizar en el Anexo 1 de este documento. 4.4.2.2. Lista de comprobación Para verificar el cumplimiento de cada principio de Nielsen en las nuevas interfaces creadas, se describieron algunos ejemplos que muestran cómo se incorporaron.  Visibilidad del estado del sistema: cuando un administrador realiza alguna acción como agregar, modificar o eliminar, el sistema le informa mediante un mensaje satisfactorio que su acción fue realizada. La Figura 4.70 muestra el mensaje mencionado.  Relación entre el sistema y el mundo real: cuando ocurre algún tipo de error en el sistema se muestra un mensaje informativo al administrador con palabras familiares. En la Figura 4.71 se puede observar un ejemplo de un mensaje de error.  Control y libertad del usuario: el administrador podría presionar por error el botón de acceder a la cuenta de un investigador, pero el sistema le da el control de poder cancelar dicha solicitud y quedarse en su cuenta, tal y como se puede ver en la Figura 4.72. Figura 4.72 - Confirmación antes de eliminar un registro. Figura 4.71 - Mensaje de error con palabras familiares. Figura 4.70 - Mensaje satisfactorio al actualizar una información. Capítulo 4 – Marco aplicativo 98  Consistencia y estándares: en todas las interfaces del administrador donde aparecen listas de registros, se utilizaron las mismas metáforas para las acciones: ver, editar, y eliminar. En la Figura 4.73 se pueden ver las metáforas utilizadas en las listas.  Prevención de errores: se limitó la cantidad de caracteres permitidos en los campos de los formularios de la aplicación, para evitar que sobrepasaran el tamaño asignado al correspondiente atributo en la base de datos. En la Figura 4.74 se puede ver que el campo “Código” de un área de conocimiento permite cinco (5) caracteres.  Reconocimiento antes que recuerdo: en los formularios se hizo uso de listas desplegables que no sólo previenen errores de escritura, también permiten al administrador reconocer las opciones disponibles en lugar de verse obligado a recordarlas todas. Por ejemplo, en la Figura 4.75 se muestran todas las Facultades de la Universidad Central de Venezuela. X Flexibilidad y eficiencia de uso: en este prototipo no se incluye ningún tipo de acelerador para usuarios expertos. Figura 4.75 - Lista desplegable de dependencias. Figura 4.73 - Metáforas para las acciones: ver, editar y eliminar. Figura 4.74 - Ejemplo de un campo con limitación de caracteres. Capítulo 4 – Marco aplicativo 99  Estética y diseño minimalista: los colores utilizados en las interfaces fue limitado para alcanzar el balance entre lo estético y lo minimalista.  Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: en los formularios se hizo uso de advertencias tras un error por parte del usuario. Por ejemplo, si el administrador olvida seleccionar el tipo de institución de una institución que está agregando y presiona el botón guardar, la aplicación detiene la acción y envía una advertencia, tal como se puede ver en la Figura 4.76. X Ayuda y documentación: el administrador no dispone de un manual de administración. 4.4.2.3. Pensamiento en voz alta Una vez terminadas las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global), se realizó una reunión con el cliente y las tutoras académicas (usuarios), los cuales manifestaron su conformidad con el prototipo presentado. Además, concluyeron que ya estaba listo para pasar por una prueba de aceptación. 4.4.3. Etapa de entrega En esta etapa se llegó a una versión del sistema desarrollado que se consideró listo para pasar por pruebas de funcionalidad y de aceptación. Así, se aplicó primeramente una prueba de funcionalidad y luego una de aceptación para certificar que la aplicación cumpliera con los requisitos de usabilidad exigidos por los usuarios. 4.4.3.1. Prueba de funcionalidad Se realizó un chequeo completo de cada una de las funcionalidades disponibles en la aplicación, revisando en detalle:  El correcto funcionamiento de cada enlace disponible en la aplicación.  La sintaxis y la longitud de cada campo de los formularios.  La validación de campos obligatorios en los formularios.  El correcto funcionamiento de las acciones agregar, visualizar, editar y eliminar una información. Figura 4.76 - Advertencia al no seleccionar un tipo de institución. Capítulo 4 – Marco aplicativo 100  La visualización de mensajes de retroalimentación tras realizar una acción.  La descarga correcta de un documento.  La adecuada visualización del manual de usuario.  La correcta adaptación de las interfaces en distintos dispositivos, haciendo uso del simulador de dispositivos incorporado en el navegador Chrome. Como es normal, se encontraron algunos errores en la aplicación, como por ejemplo la inadecuada longitud de algunos campos, los cuales fueron solucionados. 4.4.3.2. Prueba de aceptación Para la prueba de aceptación se creó un ambiente, en el Centro de Investigación de Sistemas de Información de la Facultad de Ciencias, con las mismas condiciones en que se encontraría la aplicación si estuviera en las instalaciones del usuario. Una vez logrado esto, se le pidió a cada usuario que primeramente utilizara la aplicación de manera espontánea y luego que realizara una serie de actividades específicas, ya que al finalizar la prueba se le aplicaría un cuestionario con preguntas relacionadas a las actividades realizadas y otros aspectos de usabilidad con el fin de conocer su nivel de aceptación hacia la aplicación. La prueba fue realizada a una muestra de quince (15) personas (profesionales del área de computación pertenecientes a la Facultad de Ciencias), la cual se dividió en diez (10) personas que probaron la aplicación como investigadores y cinco (5) como administradores de dependencia o global según su libre elección. Entre El cuestionario se dividió en seis (6) secciones y cada sección con varias preguntas cerradas obligatorias y una pregunta abierta opcional:  Interfaz (8 preguntas cerradas y 1 pregunta abierta)  Navegación (2 preguntas cerradas y 1 pregunta abierta)  Inicio de sesión y registro (2 preguntas cerradas y 1 pregunta abierta)  Logotipo (1 pregunta cerrada y 1 pregunta abierta)  Funcionalidades específicas (3 preguntas cerradas y 1 pregunta abierta)  General (1 pregunta cerrada y 1 pregunta abierta) El cuestionario se puede visualizar en el Anexo 2 de este documento. A continuación se presentan los resultados obtenidos a partir de la realización de esta prueba. Capítulo 4 – Marco aplicativo 101  Interfaz Para la sección “Interfaz” se obtuvieron los resultados mostrados en la Figura 4.77, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar mayores cambios en el diseño de las interfaces.  Navegación Para la sección “Navegación” se obtuvieron los resultados mostrados en la Figura 4.78, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Sin embargo, para algunas personas no fue predecible la respuesta del sistema antes de hacer click sobre un enlace, así que será necesario evaluar este punto. Figura 4.77 - Resultados de las preguntas de la sección de Interfaz. Capítulo 4 – Marco aplicativo 102  Inicio de sesión y registro Para la sección “Inicio de sesión” se obtuvieron los resultados mostrados en la Figura 4.79, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar ningún cambio en este punto. Figura 4.78 - Resultados de las preguntas de la sección de Navegación. Figura 4.79 - Resultados de las preguntas de la sección de Inicio de sesión y registro. Capítulo 4 – Marco aplicativo 103  Logotipo Para la sección “Logotipo” se obtuvieron los resultados mostrados en la Figura 4.80, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con la pregunta que se les hizo. Estas respuestas permiten concluir que no es necesario realizar cambios en logotipo, sin embargo podría actualizarse su diseño en un futuro.  Funcionalidades específicas (investigador) Para la sección “Funcionalidades específicas (investigador)” se obtuvieron los resultados mostrados en la Figura 4.81, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar mayores cambios en este punto, sino aquellos mencionados con voz durante la prueba y los mencionados en las observaciones, como por ejemplo, colocar el asterisco que indica que un campo es obligatorio más grande y colocar el nombre del archivo cargado en un formulario al lado de su respetivo botón de carga. Figura 4.80 - Resultados de las preguntas de la sección de Logotipo. Capítulo 4 – Marco aplicativo 104  Funcionalidades específicas (administrador) Para la sección “Funcionalidades específicas (administrador)” se obtuvieron los resultados mostrados en la Figura 4.82, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar ningún cambio. Figura 4.81 - Resultados de las preguntas de la sección de Funcionalidades específicas (investigador). Figura 4.82 - Resultados de las preguntas de la sección de Funcionalidades específicas (administrador). Capítulo 4 – Marco aplicativo 105  General Para la sección “General se obtuvieron los resultados mostrados en la Figura 4.83, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con la pregunta que se les hizo. Estas respuestas permiten concluir que el objetivo de este Trabajo Especial de Grado se cumplió satisfactoriamente. Partiendo de los resultados obtenidos y reflejados en los gráficos anteriores, se puede hacer un promedio de aceptación con base en las respuestas que califican de manera positiva y las que califican de manera negativa a la aplicación. Al hacer este cálculo es posible evidenciar que un porcentaje superior a la mitad de los usuarios tuvo opiniones positivas (“Completamente de acuerdo” o “De acuerdo”) acerca de aspectos de usabilidad de la aplicación. 4.4.3.3. Cierre de la iteración Terminadas las pruebas de funcionalidad y de aceptación y el análisis de ésta última, se realizaron los cambios necesarios en la aplicación, como por ejemplo, colocar el asterisco que indica que un campo es obligatorio más grande, colocar el nombre del archivo cargado en un formulario al lado de su respetivo botón de carga, eliminar un enlace que no era funcional en la interfaz principal, eliminar la redimensión de los campos tipo textarea de los formularios, entre otros pequeños pero importantes detalles que mejoran la funcionalidad y usabilidad del sistema. Por último, se determinó que la aplicación cumplió con los requisitos de usabilidad exigidos, sin embargo, se acordó con el cliente y las tutoras académicas, mantener dicha aplicación en un ambiente de certificación hasta que se realicen más pruebas con profesionales de otras áreas y se dispongan de los equipos necesarios para poder pasarla a producción. Figura 4.83 - Resultados de las preguntas de la sección General. Conclusiones 106 CONCLUSIONES El objetivo de este Trabajo Especial de Grado se cumplió satisfactoriamente, ya que se logró desarrollar una aplicación web usable que permite registrar y gestionar la información (general, académica, laboral, productos de investigación, etc.) de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. El uso parcial de la metodología de desarrollo AgilUs permitió desarrollar en un semestre un producto de software de calidad, adaptado a las necesidades de los usuarios y capaz de brindarles una experiencia agradable y satisfactoria. De igual manera, el marco de trabajo Rails contribuyó considerablemente en el desarrollo ágil de la aplicación, ya que su estructura, simplicidad y las facilidades que ofrece en general, permitieron reducir la complejidad de la codificación y facilitar la reutilización de código, lo cual se tradujo en la entrega más rápida de resultados concretos. Asimismo, el uso de las tecnologías HTML5, CCS3, jQuery, Ajax, Bootstrap y Pentaho Data Integration, facilitó en gran medida el desarrollo de la solución planteada en este trabajo. Por medio de la realización de la prueba de funcionalidad se pudieron encontrar y arreglar errores en la aplicación y gracias a la prueba de aceptación se pudo obtener la opinión de los usuarios en lo que respecta a la usabilidad del sistema y el apoyo que éste brinda al proceso de gestión de información de los investigadores de la Facultad de Ciencias. En general se puede concluir que con esta entrega se otorgan una serie de beneficios a la Coordinación de Investigación y a la Facultad de Ciencias de la UCV, entre los que destacan:  Facilitar el registro y la gestión de la información de los investigadores de la Facultad de Ciencias, de manera rápida, fácil y sencilla.  Tener la información de los investigadores de la Facultad de Ciencias en una base de datos centralizada y estandarizada.  Utilizar a futuro la información de los investigadores para realizar análisis de datos y toma de decisiones por parte de la Coordinación de Investigación.  Permitir el pleno funcionamiento de la aplicación web GENCI-2, ya que ésta se integrará más adelante con la base de datos de los investigadores. Recomendaciones y trabajos futuros 107 RECOMENDACIONES Y TRABAJOS FUTUROS Se recomienda utilizar la aplicación en ambiente de certificación por el tiempo necesario que duren las pruebas con usuarios de otras áreas, con la finalidad de conocer la capacidad y el alcance que ésta pueda tener, para posteriormente realizar un análisis de posibles mejoras y llevarlo a producción. Para desarrollos futuros se recomienda:  Agregar aspectos de accesibilidad a la aplicación, como por ejemplo, cambio de colores, cambio de idioma y cambio del tamaño de la fuente.  Agregar buscadores avanzados en la interfaz principal de la aplicación web, que permitan a usuarios visitantes o investgadores realizar búsquedas detalladas de investigadores, productos o proyectos de investigación.  Crear una funcionalidad que permita extraer la información del investigador y exportarla en forma de Curriculum Vitae.  Crear un módulo de análisis de la información de los investigadores para realizar toma de decisiones.  Extender GENCI-2 para que use la información que almacena esta aplicación. Referencias bibliográficas y digitales 108 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES Acosta A. (2011). AgilUs: un método ágil de desarrollo de software que incorpora la usabilidad. Centro de Ingeniería de Software y Sistemas, Facultad de Ciencias, Universidad Central de Venezuela, Caracas, Venezuela. Adobe Dreamweaver. (2015). Aspectos básicos de las aplicaciones Web. Recuperado en junio de 2015, de: https://helpx.adobe.com/es/dreamweaver/using/web-applications.html Beck K. et al. (2001). Manifiesto por el Desarrollo Ágil de Software. Recuperado en junio 2015, de: http://www.agilemanifesto.org/iso/es/ Borges C. y Rivero A. (2006). Generador de Sitios Web de Centros de Investigación. Centro de Ingeniería de Software y Sistemas, Facultad de Ciencias, Universidad Central de Venezuela, Caracas, Venezuela. Recuperado en julio 2015, de: http://www.coordinv.ciens.ucv.ve/investigacion/genci/index.php Cáceres P. et al. (2001). Procesos ágiles para el desarrollo de aplicaciones web. Departamento de Ciencias Experimentales e Ingeniería, Universidad Rey Juan Carlos, Madrid, España. Recuperado en junio 2015, de: http://www.dlsi.ua.es/~jaime/webe/articulos/s112.pdf Calzada R. (2001). Introducción al Servicio de Directorio. Universidad Carlos III de Madrid, España. Recuperado en mayo 2016, de: http://www.rediris.es/ldap/doc/ldap- intro.pdf Canós J., Letelier P. y Penadés M. (2003). Metodologías Ágiles en el Desarrollo de Software. Universidad Politécnica de Valencia, España. Recuperado en junio 2015, de: http://www.carlosfau.com.ar/nqi/nqifiles/XP_Agil.pdf Consejo Directivo del Observatorio Nacional de Ciencia, Tecnología e Innovación (ONCTI). (2015). Reglamento del Programa de Estímulo a la Innovación e Investigación (PEII). Caracas, Venezuela. Recuperado en julio 2015, de: http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download =119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion- peii&id=11:documentos&Itemid=92 Coordinación de Investigación. (2011). ¿Quiénes Somos?. Caracas, Venezuela: Facultad de Ciencias de la Universidad Central de Venezuela. Recuperado en julio 2015, de http://www.coordinv.ciens.ucv.ve/investigacion/quienes.php https://helpx.adobe.com/es/dreamweaver/using/web-applications.html http://www.agilemanifesto.org/iso/es/ http://www.coordinv.ciens.ucv.ve/investigacion/genci/index.php http://www.dlsi.ua.es/~jaime/webe/articulos/s112.pdf http://www.rediris.es/ldap/doc/ldap-intro.pdf http://www.rediris.es/ldap/doc/ldap-intro.pdf http://www.carlosfau.com.ar/nqi/nqifiles/XP_Agil.pdf http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.coordinv.ciens.ucv.ve/investigacion/quienes.php Referencias bibliográficas y digitales 109 De Luca D. (2010). ¿Qué es CSS3? [Mensaje en un blog]. Recuperado en julio 2015, de: http://html5.dwebapps.com/que-es-css3/ Directorio Nacional de Investigadores e Innovadores (DINA). (2015). ¿Quiénes somos?. Lima, Perú. Recuperado en diciembre 2015, de http://dina.concytec.gob.pe/ EcuRed. (2012). Lenguaje de Marcado de Hipertexto. Cuba. Recuperado en julio 2015, de: http://www.ecured.cu/index.php/Lenguaje_de_Marcado_de_Hipertexto EcuRed. (2012). Directorio Activo. Recuperado en mayo 2016, de: http://www.ecured.cu/Directorio_Activo España M. (2003). Servicios Avanzados de telecomunicación. Madrid, España: Editorial Díaz de Santos S.A. Graterol L., Magrí S y Marín S. (2014). PHP, Python o Ruby ¿Qué son y para qué sirve cada uno? [Mensaje en un blog]. Recuperado en julio 2015, de: http://blog.escuelaweb.net/php-python-o-ruby-para-que-sirve-cada-uno/ Laudon K. y Laudon J. (2004). Sistemas de Información Gerencial. México: Editorial Pearson Educación. Ministerio del Poder Popular para Ciencia, Tecnología e Innovación (MCTI). (21 de marzo de 2011). Gobierno Revolucionario fortalecerá las actividades científico tecnológicas del país. Caracas, Venezuela. Recuperado en julio 2015 de: http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las- actividades-cientifico-tecnologicas-del Nielsen J. (1995). 10 Usability Heuristics for User Interface Design. Recuperado en mayo 2016, de: http://www.useit.com/papers/heuristic/heuristic_list.html Olivares C. (2012). GENCI–2 Gestor de Contenido Modular Para la Coordinación de Investigación De la Facultad de Ciencias de la UCV (tesis de pregrado). Escuela de Computación, Facultad de Ciencias de la Universidad Central de Venezuela, Caracas, Venezuela. Pentaho. (2012). PENTAHO. Recuperado en mayo de 2016, de http://www.pentaho.com/ Piattini M. (1996). Análisis y Diseño Detallado de Aplicaciones Informáticas de Gestión. Madrid, España: Editorial Ra-Ma. Rails Guides. (2015). Ruby on Rails Guides (v4.2.4). Recuperado en julio 2015, de: http://guides.rubyonrails.org/ http://html5.dwebapps.com/que-es-css3/ http://dina.concytec.gob.pe/ http://www.ecured.cu/index.php/Lenguaje_de_Marcado_de_Hipertexto http://www.ecured.cu/Directorio_Activo http://blog.escuelaweb.net/php-python-o-ruby-para-que-sirve-cada-uno/ http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las-actividades-cientifico-tecnologicas-del http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las-actividades-cientifico-tecnologicas-del http://www.useit.com/papers/heuristic/heuristic_list.html http://www.pentaho.com/ http://guides.rubyonrails.org/ Referencias bibliográficas y digitales 110 Rivera J. (2012). Pentaho Data Integration (Kettle). Recuperado en mayo 2016, de: http://www.docfoc.com/pentaho-data-integration-56338932d4bf0 Ruby Lang Org. (2015). Acerca de Ruby. Recuperado en julio 2015, de: https://www.ruby-lang.org/es/ Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO). (2011). Instrucciones. Venezuela. Recuperado en julio 2015, de: http://www.saiudo.ci- udo.com.ve/ Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO). (2011). PAIC-UDO. Venezuela. Recuperado en julio 2015, de: http://www.saiudo.ci- udo.com.ve/ Silberschatz A., Korth H. y Sudarshan S. (2002). Fundamentos de Bases de Datos. (4ta ed.). Madrid, España: Mc Graw Hill. Solis J. (2014). ¿Qué es bootstrap y cómo funciona en el diseño web?. Recuperado en mayo 2016, de: http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y- como-funciona-en-el-diseno-web.htm The PostgreSQL Global Development Group. (1996-2015). PostgreSQL. Recuperado en julio 2015, de: http://www.postgresql.org/about/ W3Schools. (2015). AJAX Introduction. Recuperado en julio 2015, de: http://www.w3schools.com/Ajax/ajax_intro.asp 2ndQuadrant Ltd (2001-2015). 2ndQuadrant Professional PostgreSQL. Recuperado en julio 2015, de: http://2ndquadrant.com/es/postgresql/ http://www.docfoc.com/pentaho-data-integration-56338932d4bf0 https://www.ruby-lang.org/es/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y-como-funciona-en-el-diseno-web.htm http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y-como-funciona-en-el-diseno-web.htm http://www.postgresql.org/about/ http://www.w3schools.com/Ajax/ajax_intro.asp http://2ndquadrant.com/es/postgresql/ Anexos 111 ANEXOS Anexos 112 ANEXO 1 – Manual de usuario de la aplicación Anexos 113 Anexos 114 Anexos 115 Anexos 116 Anexos 117 Anexos 118 Anexos 119 Anexos 120 Anexos 121 Anexos 122 Anexos 123 Anexos 124 Anexos 125 Anexos 126 Anexos 127 Anexos 128 Anexos 129 Anexos 130 Anexos 131 Anexos 132 Anexos 133 Anexos 134 Anexos 135 Anexos 136 Anexos 137 Anexos 138 Anexos 139 Anexos 140 ANEXO 2 – Cuestionario aplicado en la prueba de aceptación de la aplicación Anexos 141 Anexos 142UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE INVESTIGACION EN SISTEMAS DE INFORMACIÓN Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por la Br. Viviana V. Pérez S. Para optar por el título de Licenciado en Computación Tutoras: Profa. Concettina Di Vasta Profa. Mercy Ospina Caracas, 30 de Mayo de 2016 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN ACTA Quienes suscriben, miembros del jurado designado por el Consejo de la Escuela de Computación, para examinar el Trabajo Especial de Grado titulado “Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV” y presentado por la bachiller: Br. Viviana Pérez, a los fines de optar al título de Licenciado en Computación, dejamos constancia de lo siguiente: Leído como fue dicho trabajo, por cada uno de los miembros del jurado, se fijó el día ___ de ________ de _____, a las ________ horas, para que la autora lo defendiera en forma pública, lo que estos hicieron en la Sala ___ de la Escuela de Computación, mediante una presentación oral de su contenido, luego de lo cual respondieron a las preguntas formuladas. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobar con la nota de ____ puntos. En fe de lo cual se levanta la presente Acta, en Caracas el día ___ de _________ de ____. _________________________________ _________________________________ Profa. Concettina Di Vasta Profa. Mercy Ospina (Tutora) (Tutora) _________________________________ _________________________________ Prof. Pio Arias Profa. Yusneyi Carballo (Jurado) (Jurado) AGRADECIMIENTOS Quiero comenzar agradeciendo a Dios, esa fuerza toda poderosa que siempre me indica el camino correcto a seguir cuando me encuentro desorientada. Quiero agradecerle por cada persona que ha puesto en mi vida durante todos estos años de carrera, ya que todas me han ayudado y enseñado muchas cosas. Quiero agradecer a mis padres, por su amor, por su apoyo, por la educación y los principios que me han dado, porque me han hecho ser la persona que soy ahora, una persona buena, correcta y que da lo mejor de sí. Les agradezco por haberme despertado cada mañana para llegar a tiempo a mis clases y por haberme esperado cada noche a que llegara a casa con bien. Quiero agradecer enormemente a mis queridas profesoras Eleonora y Jossie, por haberme ayudado a volver a la universidad y darme la fuerza de seguir con la carrera. Gracias por haber confiado en mí y darme la oportunidad que me dieron. Nunca olvidaré esa tarde. Todo sucedió en el momento correcto, en el lugar correcto y con las personas correctas. Quiero agradecer a mis también queridas profesoras y tutoras Tina y Mercy, quienes me han dado su cariño y confianza, permitiéndome ser parte de CISI y hacer lo que tanto me gusta, enseñar a los demás. Les agradezco por todo el tiempo que me han dedicado cada vez que he necesito de su ayuda y por todas las palabras de motivación que me han hecho seguir adelante. Quiero agradecer a mi tan apreciado y querido amigo Jhony, por tantos años de amistad, de cariño, confianza y tolerancia hacia mi difícil carácter. Gracias por siempre ayudarme, gracias por siempre motivarme, por estar cuando te necesito, gracias por ser quien eres, gracias por estar en mi vida, gracias. Quiero agradecer a mi buen amigo Victor, que desde que apareció en mi vida siempre ha confiado en mí, me ha ayudado de manera excepcional y me ha dado su apoyo en todo momento, hasta cuando hemos estado molestos. Finalmente quiero agradecer a todas aquellas personas que me dijeron “Sí puedes”, cuando yo sólo me repetía “No puedo, es imposible”. Gracias Daniel, gracias Williams, gracias Jhonatan, gracias a todos. UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE INVESTIGACION EN SISTEMAS DE INFORMACIÓN Sistema de Gestión de Información Científica para la Coordinación de Investigación de la Facultad de Ciencias de la UCV Autora: Viviana Pérez Tutoras: Profa. Concettina Di Vasta Profa. Mercy Ospina Fecha: 30/05/2016 RESUMEN El presente Trabajo Especial de Grado describe la problemática de la Coordinación de Investigación de la Facultad de Ciencias de la UCV para de registrar y gestionar la información de los profesores y profesionales que realizan actividades de investigación dentro de la Facultad. Conociendo las necesidades e inconvenientes existentes, se plantea el desarrollo de un Sistema de Gestión de Información Científica llamado SIGIC, una aplicación web creada con tecnologías de software libre (HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby, Rails, PostgreSQL y Pentaho Data Integration) y bajo la metodología de desarrollo ágil AgilUs, que permite registrar y gestionar la información, actividades, proyectos y productos producidos por los investigadores de la Facultad de Ciencias de manera rápida y sencilla, en una base de datos centralizada, la cual será de gran utilidad para permitir el pleno funcionamiento de cualquier aplicación que requiera de esta información, así como también para el análisis de datos y toma de decisiones por parte de la Coordinación de Investigación. Palabras clave: investigación, investigadores, información, gestión de información, Coordinación de investigación, aplicación web, AgilUs, Ruby, Rails, PostgreSQL, Pentaho Data Integration. ÍNDICE GENERAL INTRODUCCIÓN ......................................................................................................... I CAPÍTULO 1 PROBLEMA DE INVESTIGACIÓN ................................................................. 1 1.1. PLANTEAMIENTO DEL PROBLEMA ........................................................................... 1 1.2. OBJETIVOS ................................................................................................... 3 1.2.1. Objetivo general ................................................................................... 3 1.2.2. Objetivos específicos ............................................................................. 3 1.3. JUSTIFICACIÓN ............................................................................................... 4 CAPÍTULO 2 MARCO CONCEPTUAL ............................................................................... 5 2.1. ANTECEDENTES .............................................................................................. 5 2.1.1. Registro Nacional de Innovación e Investigación ....................................... 5 2.1.2. Sistema de Acreditación de los Investigadores de la Universidad de Oriente . 7 2.1.3. Directorio Nacional de Investigadores e Innovadores ................................. 9 2.1.4. Características positivas y negativas de los antecedentes ......................... 11 2.2. INVESTIGACIÓN EN LA FACULTAD DE CIENCIAS DE LA UNIVERSIDAD CENTRAL DE VENEZUELA . 12 2.2.1. Estructura organizativa de investigación ................................................ 12 2.2.2. Coordinación de Investigación .............................................................. 13 2.3. ARQUITECTURA CLIENTE-SERVIDOR .................................................................... 15 2.4. APLICACIÓN WEB .......................................................................................... 16 2.4.1. Funcionamiento de una aplicación web .................................................. 16 2.4.2. Ventajas ............................................................................................ 18 2.4.3. Desventajas ....................................................................................... 18 2.4.4. Patrón Modelo Vista Controlador ........................................................... 18 2.5. TECNOLOGÍAS DEL LADO DEL CLIENTE .................................................................. 21 2.5.1. Lenguaje de Marcas de Hipertexto ........................................................ 21 2.5.2. Hojas de Estilo en Cascada ................................................................... 22 2.5.3. JavaScript .......................................................................................... 23 2.5.4. Bootstrap ........................................................................................... 24 2.6. TECNOLOGÍAS DEL LADO DEL SERVIDOR ................................................................ 25 2.6.1. Ruby ................................................................................................. 25 2.6.2. Sistemas Manejadores de Bases de Datos .............................................. 28 2.6.3. Directorio y servicio de directorio .......................................................... 29 2.7. HERRAMIENTAS DE EXTRACCIÓN, TRANSFORMACIÓN Y CARGA ..................................... 31 2.7.1. Pentaho ............................................................................................. 31 CAPÍTULO 3 MARCO METODOLÓGICO ........................................................................ 33 3.1. METODOLOGÍA AGILUS ................................................................................... 33 3.1.1. Ciclo de vida ...................................................................................... 35 3.1.2. Etapas ............................................................................................... 35 3.1.3. Errores comunes ................................................................................. 38 3.1.4. Tabla resumen ................................................................................... 38 CAPÍTULO 4 MARCO APLICATIVO ............................................................................... 40 4.1. USO PARCIAL DE LA METODOLOGÍA AGILUS ........................................................... 40 4.2. PRIMERA ITERACIÓN: ESQUEMA GENERAL DE LA SOLUCIÓN, INTERFAZ PRINCIPAL DE LA APLICACIÓN E INTERFACES PARA UN USUARIO CON PERFIL DE INVESTIGADOR ................................ 41 4.2.1. Etapa de requisitos ............................................................................. 41 4.2.2. Etapa de análisis ................................................................................. 49 4.2.3. Etapa de prototipaje ............................................................................ 63 4.2.4. Cierre de la iteración ........................................................................... 79 4.3. SEGUNDA ITERACIÓN: INTERFAZ DE INICIO DE SESIÓN E INTERFAZ DE SOLICITUD DE REGISTRO .......................................................................................................................... 79 4.3.1. Etapa de análisis ................................................................................. 79 4.3.2. Etapa de prototipaje ............................................................................ 83 4.3.3. Cierre de la iteración ........................................................................... 87 4.4. TERCERA ITERACIÓN: INTERFACES PARA UN USUARIO CON PERFIL DE ADMINISTRADOR (DE DEPENDENCIA O GLOBAL) ............................................................................................ 87 4.4.1. Etapa de análisis ................................................................................. 87 4.4.2. Etapa de prototipaje ............................................................................ 89 4.4.3. Etapa de entrega ................................................................................ 99 CONCLUSIONES .................................................................................................... 106 RECOMENDACIONES Y TRABAJOS FUTUROS ............................................................. 107 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES ........................................................... 108 ANEXOS ............................................................................................................... 111 ÍNDICE DE FIGURAS Figura 2.1 - Página principal del RNII. .......................................................................... 6 Figura 2.2 - Textos de ayuda y metáforas del RNII. ....................................................... 7 Figura 2.3 - Página principal del SAI-UDO. .................................................................... 8 Figura 2.4 - Registro de un estudio en el SAI-UDO. ........................................................ 8 Figura 2.5 - Página principal del DINA. ....................................................................... 10 Figura 2.6 - Registro de un idioma en DINA. ............................................................... 10 Figura 2.7 - Estructura organizativa de investigación de la Escuela de Física de la Facultad de Ciencias de la UCV. ............................................................................................. 13 Figura 2.8 - Arquitectura cliente-servidor. ................................................................... 15 Figura 2.9 - Petición de una página web estática. ........................................................ 17 Figura 2.10 - Petición de una página web dinámica con datos extraídos de una base de datos. .................................................................................................................... 17 Figura 2.11 - Flujo de control del patrón MVC. ............................................................. 20 Figura 2.12 - Estructura básica de una página web con HTML 4.01 y HTML 5. ................. 22 Figura 2.13 - Elemento de CSS. ................................................................................. 23 Figura 2.14 - Ejemplo de código CSS incrustado en HTML. ............................................ 23 Figura 2.15 - Interfaz gráfica de Spoon. ..................................................................... 32 Figura 3.1 - Ciclo de vida AgilUs. ............................................................................... 35 Figura 4.1 - Artefactos y técnicas seleccionadas para cada etapa de la metodología AgilUs. ............................................................................................................................. 40 Figura 4.2 - Notas resultantes de reuniones. ............................................................... 42 Figura 4.3 - Entrevista realizada al Profesor Pio Arias. .................................................. 43 Figura 4.4 - Modelo de casos de uso - Nivel 0. ............................................................ 49 Figura 4.5 - Modelo de casos de uso - Nivel 1. ............................................................ 50 Figura 4.6 - Modelo de casos de uso - Nivel 2. ............................................................ 53 Figura 4.7 - Prototipo en papel y digital de la interfaz principal de la aplicación. .............. 56 Figura 4.8 - Prototipo en papel y digital de una interfaz del investigador......................... 57 Figura 4.9 - Prototipo en papel y digital de una lista de registros agregados por un investigador. ........................................................................................................... 57 Figura 4.10 - Prototipo en papel y digital de una interfaz del administrador..................... 58 Figura 4.11 - Colores principales. .............................................................................. 58 Figura 4.12 - Colores secundarios. ............................................................................. 59 Figura 4.13 - Colores destacados. .............................................................................. 59 Figura 4.14 - Tipografía y color de fuente. .................................................................. 59 Figura 4.15 - Botones. ............................................................................................. 60 Figura 4.16 - Logo con descripción ............................................................................. 60 Figura 4.17 - Logo sin descripción.............................................................................. 60 Figura 4.18 - Arquitectura de la aplicación. ................................................................. 61 Figura 4.19 - Modelo relacional normalizado (primera versión). ..................................... 62 Figura 4.20 - Parte del script SQL de la base de datos de la aplicación. .......................... 63 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569336 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569337 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569338 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569339 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569340 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569341 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569342 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569342 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569343 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569344 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569345 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569345 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569346 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569347 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569348 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569349 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569350 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569351 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569352 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569352 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569353 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569354 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569355 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569356 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569357 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569358 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569359 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569360 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569360 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569361 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569362 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569363 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569364 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569365 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569366 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569367 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569368 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569369 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569370 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569371 Figura 4.21 - Comandos de Rails para el crear CRUD de cada tabla de la base de datos. .. 64 Figura 4.22 - Script SQL de las inserciones realizadas en la base de datos. .................... 64 Figura 4.23 - Interfaz principal de la aplicación. .......................................................... 65 Figura 4.24 - Interfaz de inicio de un investigador. ...................................................... 66 Figura 4.25 - Interfaz de inicio de un investigador en un teléfono móvil. ......................... 66 Figura 4.26 - Interfaz de datos generales del investigador. ........................................... 67 Figura 4.27 - Interfaz con lista de experiencias laborales del investigador. ...................... 68 Figura 4.28 – Metáforas de las acciones a realizar sobre un registro............................... 68 Figura 4.29 - Interfaz para agregar una experiencia laboral. ......................................... 69 Figura 4.30 - Modal para solicitar agregar una institución. ............................................ 70 Figura 4.31 - Configuraciones para enviar correos con ActionMailer. .............................. 70 Figura 4.32 - Mensaje satisfactorio del envío de solicitud para agregar una institución. .... 70 Figura 4.33 - Interfaz para visualizar una experiencia laboral. ....................................... 71 Figura 4.34 - Interfaz para modificar una experiencia laboral. ....................................... 72 Figura 4.35 - Buscador de productos. ......................................................................... 73 Figura 4.36 - Funcionamiento del buscador de productos. ............................................. 73 Figura 4.37 - Formulario de contacto. ........................................................................ 74 Figura 4.38 - Mensaje de espera al agregar una línea de investigación. .......................... 76 Figura 4.39 - Mensaje de error con palabras familiares. ................................................ 76 Figura 4.40 - Confirmación antes de eliminar un registro. ............................................. 76 Figura 4.41 - Metáforas para las acciones: ver, editar y eliminar. .................................. 76 Figura 4.42 - Restricción de una fecha de culminación. ................................................. 77 Figura 4.43 - Lista desplegable de áreas de conocimiento. ............................................ 77 Figura 4.44 - Advertencia emergente al no agregar el documento que respalda la información suministrada por el investigador. ............................................................. 78 Figura 4.45 - Manual de usuario dentro de la aplicación. ............................................... 78 Figura 4.46 - Buscador de producto dentro del formulario agregar. ................................ 79 Figura 4.47 - Prototipo en papel y digital de la interfaz de inicio de sesión. ..................... 80 Figura 4.48 - Prototipo en papel y digital de la interfaz de solicitud de registro. ............... 80 Figura 4.49- Modelo relacional normalizado (última versión). ....................................... 82 Figura 4.50 - Parte del script SQL de la base de datos de la aplicación con las nuevas tablas incorporadas. .......................................................................................................... 83 Figura 4.51 - Comandos de Rails para el crear CRUD de las nuevas tablas de la base de datos ..................................................................................................................... 84 Figura 4.52 - Interfaz de inicio de sesión de la aplicación. ............................................. 84 Figura 4.53 - Configuración para establecer conexión con el directorio de usuarios activos de la Facultad de Ciencias. ........................................................................................ 85 Figura 4.54 - Código que funciona detrás del inicio de sesión. ....................................... 85 Figura 4.55 - Interfaz de solicitud de registro de la aplicación – Mensaje informativo. ...... 86 Figura 4.56 - Interfaz de solicitud de registro de la aplicación - Formulario. .................... 86 Figura 4.57 - Prototipo en papel y digital del menú de las interfaces de un administrador. 88 Figura 4.58 - Prototipo en papel y digital de la interfaz de asignación de roles. ............... 88 Figura 4.59 - Prototipo en papel y digital de la interfaz para gestionar otras tablas. ........ 89 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569372 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569373 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569374 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569375 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569376 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569377 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569378 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569379 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569380 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569381 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569382 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569383 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569384 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569385 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569386 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569387 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569388 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569389 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569390 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569391 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569392 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569393 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569394 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569395 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569395 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569396 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569397 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569398 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569399 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569400 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569401 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569401 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569402 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569402 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569403 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569404 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569404 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569405 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569406 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569407 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569408 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569409 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569410 Figura 4.60 - Interfaz de inicio de un administrador. .................................................... 90 Figura 4.61 - Interfaz con lista de usuarios que puede gestionar el administrador. ........... 91 Figura 4.62 - Interfaz con la lista de roles asignados a cada usuario. ............................. 91 Figura 4.63 - Interfaz con la lista de instituciones registradas en la aplicación. ................ 92 Figura 4.64 - Interfaz para gestionar otras tablas. ....................................................... 93 Figura 4.65 - Información básica de los investigadores en hojas de cálculo (MS Excel). .... 94 Figura 4.66 - Extracción, Transformación y Carga de la información básica de los investigadores realizada en Spoon. ............................................................................ 95 Figura 4.67 - Investigadores cargados en la base de datos. .......................................... 96 Figura 4.68 - Asignación de cargo, escalafón y dedicación a los investigadores realizada con Spoon. ................................................................................................................... 96 Figura 4.69 - Asignación de roles a los investigadores realizada con Spoon. .................... 96 Figura 4.70 - Mensaje satisfactorio al actualizar una información. .................................. 97 Figura 4.71 - Mensaje de error con palabras familiares. ................................................ 97 Figura 4.72 - Confirmación antes de eliminar un registro. ............................................. 97 Figura 4.73 - Metáforas para las acciones: ver, editar y eliminar. .................................. 98 Figura 4.74 - Ejemplo de un campo con limitación de caracteres. .................................. 98 Figura 4.75 - Lista desplegable de dependencias. ........................................................ 98 Figura 4.76 - Advertencia al no seleccionar un tipo de institución. ................................. 99 Figura 4.77 - Resultados de las preguntas de la sección de Interfaz. ............................ 101 Figura 4.78 - Resultados de las preguntas de la sección de Navegación. ...................... 102 Figura 4.79 - Resultados de las preguntas de la sección de Inicio de sesión y registro. ... 102 Figura 4.80 - Resultados de las preguntas de la sección de Logotipo. ........................... 103 Figura 4.81 - Resultados de las preguntas de la sección de Funcionalidades específicas (investigador). ...................................................................................................... 104 Figura 4.82 - Resultados de las preguntas de la sección de Funcionalidades específicas (administrador). .................................................................................................... 104 Figura 4.83 - Resultados de las preguntas de la sección General.................................. 105 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569411 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569412 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569413 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569414 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569415 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569416 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569417 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569417 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569418 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569419 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569419 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569420 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569421 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569422 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569423 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569424 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569425 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569426 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569427 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569428 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569429 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569430 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569431 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569432 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569432 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569433 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569433 file:///C:/Users/Viviana/Dropbox/Tesis/Tesis%20Viviana%20Pérez.docx%23_Toc452569434 ÍNDICE DE TABLAS Tabla 2.1 - Características positivas y negativas de los antecedentes. ............................ 11 Tabla 3.1 - Resumen de la Metodología AgilUs ............................................................. 39 Tabla 4.1 - Evaluación del sistema RNII ..................................................................... 44 Tabla 4.2 - Evaluación del sistema DINA ..................................................................... 44 Tabla 4.3 - Perfil de usuario de un Visitante ................................................................ 45 Tabla 4.4 - Perfil de usuario de un Investigador. .......................................................... 45 Tabla 4.5 - Perfil de usuario de un Administrador de dependencia .................................. 46 Tabla 4.6 - Perfil de usuario de un Administrador global ............................................... 46 Tabla 4.7 - Caso de uso Solicitar registro .................................................................... 50 Tabla 4.8 - Caso de uso Contactar el administrador ..................................................... 51 Tabla 4.9 - Caso de uso Iniciar sesión ........................................................................ 51 Tabla 4.10 - Caso de uso Agregar información general e investigativa ............................ 51 Tabla 4.11 - Caso de uso Agregar usuario ................................................................... 52 Tabla 4.12 - Caso de uso Asignar rol .......................................................................... 52 Tabla 4.13 - Caso de uso Gestionar información de la aplicación .................................... 53 Tabla 4.14 - Caso de uso Visualizar información general e investigativa ......................... 54 Tabla 4.15 - Caso de uso Modificar información general e investigativa .......................... 54 Tabla 4.16 - Caso de uso Eliminar información general e investigativa ........................... 54 Tabla 4.17 - Caso de uso Visualizar usuario ................................................................ 55 Tabla 4.18 - Caso de uso Modificar usuario ................................................................. 55 Tabla 4.19 - Caso de uso Eliminar usuario .................................................................. 55 Introducción I INTRODUCCIÓN La Facultad de Ciencias de la Universidad Central de Venezuela está conformada por Escuelas e Institutos, y éstas a su vez por Centros y Laboratorios de Investigación, donde profesores y otros profesionales llevan a cabo investigaciones continuamente en una determinada disciplina o área de conocimiento. Para mantener la organización de las unidades de investigación de la Facultad, existe una Coordinación de Investigación, que se encarga de fijar políticas, administrar fondos y recursos, proteger y apoyar proyectos de investigación, entre otras actividades. Esta Coordinación dispone de algunas aplicaciones web para difundir información, publicar actividades y divulgar las investigaciones que se están realizando en los Centros y Laboratorios de Investigación. Sin embargo, no cuenta con un repositorio donde pueda centralizar la información (general, académica, laboral, productos de investigación, etc.) de las personas que realizan dichas investigaciones. La Coordinación de Investigación ha estado recabando la información de los investigadores en hojas de cálculo (MS Excel), pero este método de almacenamiento dificulta el registro y la administración de dicha información. Por tal motivo, el objetivo de este Trabajo Especial de Grado es aplicar conceptos, métodos y herramientas para desarrollar una aplicación que permita registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. Para lograr esto, se estructuró este Trabajo Especial de Grado en cuatro (4) capítulos. El Capítulo 1, “Problema de Investigación”, en el cual se plantea el problema al que se le da solución en este Trabajo Especial de Grado, los objetivos y la justificación del mismo. El Capítulo 2, “Marco Conceptual”, que consta de los antecedentes a este trabajo y de todos los conceptos relevantes y necesarios para el desarrollo de la aplicación. El Capítulo 3, “Marco Metodológico”, que describe la metodología tomada en consideración para solucionar el problema planteado, y por último, el Capítulo 4, “Marco Aplicativo”, donde se explica en detalle cómo se desarrolló toda la aplicación bajo un uso parcial de la metodología AgilUs y los resultados obtenidos. Para culminar se exponen la conclusiones, recomendaciones y referencias bibliográficas manejadas. Capítulo 1- Problema de investigación 1 CAPÍTULO 1 PROBLEMA DE INVESTIGACIÓN 1.1. Planteamiento del problema La Facultad de Ciencias de la Universidad Central de Venezuela (UCV) está conformada por cinco (5) Escuelas y cuatro (4) Institutos:  Escuela de Biología.  Escuela de Computación.  Escuela de Física.  Escuela de Matemática.  Escuela de Química.  Instituto de Ciencias de la Tierra.  Instituto de Zoología y Ecología Tropical.  Instituto de Ciencias de Tecnología de Alimentos.  Instituto de Biología Experimental. Cada Escuela e Instituto cuenta con varios Centros y Laboratorios de Investigación, donde profesores y otros profesionales, se encargan de realizar investigaciones en una determinada disciplina o área de conocimiento. Para apoyar las actividades de investigación y administrar los fondos y recursos de cada Centro y Laboratorio de Investigación, la Facultad de Ciencias cuenta con una Coordinación de Investigación, la cual fue aprobada y creada en el año 1991. La creación de esta Coordinación constituyó un hecho muy significativo, ya que se le dio a la “Investigación” la jerarquía que le corresponde dentro de una comunidad científica que ofrece un gran y muy calificado aporte a la Ciencia y la Tecnología del país (Coordinación de Investigación, 2011). “La Coordinación de Investigación está constituida por un Coordinador y por un Consejo de Investigación” (Coordinación de Investigación, 2011), y cuenta con dependencias que se especializan en el área de cada Escuela e Instituto de la Facultad. Actualmente, esta Coordinación dispone de un sitio web para apoyar la difusión de conocimiento científico, tecnológico y la promoción de las actividades de los Centros y Laboratorios de Investigación de las Escuelas e Institutos de la Facultad. El sitio web se encuentra disponible en la siguiente dirección: http://www.coordinv.ciens.ucv.ve/. También, dispone de una aplicación web que fue elaborada en el año 2006, llamada GENCI (Generador de Sitios Web de Centros de Investigación), herramienta muy útil que permite crear, publicar y mantener sitios webs de los Centros de Investigación de la Facultad de Ciencias de manera rápida y sencilla, con el fin de difundir el conocimiento científico y facilitar la comunicación entre dichos Centros de Investigación (Borges y Rivero, 2006). Esta http://www.coordinv.ciens.ucv.ve/ Capítulo 1- Problema de investigación 2 aplicación ha sido utilizada durante varios años, pero lógicamente, con el tiempo se han ido encontrando algunas limitaciones e inconvenientes que esperan ser solucionados en su totalidad. Algunas de las limitaciones de GENCI son (Olivares, 2012):  No se pueden crear sub-dependencias de las dependencias ya existentes en la aplicación, por lo que existe un problema de jerarquización.  Todo el contenido es estático, es decir, no se pueden agregar nuevas publicaciones dinámicamente.  Sólo se tiene un usuario administrador, lo cual limita el manejo de contenido.  No hay forma de guardar información de los investigadores de la Facultad, como por ejemplo, información académica, laboral, productos y proyectos de investigación, reconocimientos, etc. Para solucionar algunas de las limitaciones de GENCI, en el año 2012 se creó una segunda versión de esta aplicación, llamada GENCI-2, que dispone de nuevas funcionalidades, como la creación de usuarios con diferentes roles para la administración de la aplicación a distintos niveles de seguridad, la creación de publicaciones dinámicas de noticias y artículos con contenido multimedia, la elaboración de menús personalizados para cada dependencia, y la funcionalidad más importante, la creación de páginas web para cada dependencia y sub-dependencia de la Coordinación de Investigación, solucionando así el problema de jerarquía dentro de la aplicación (Olivares, 2012). Hasta el momento, GENCI-2 no se ha podido poner totalmente en funcionamiento y a disposición de la Coordinación de Investigación, debido a que en algunas partes de la aplicación es necesaria la información de los investigadores de la Facultad y esta no fue incorporada en el desarrollo de GENCI-2 por no ser parte del alcance de dicho proyecto, pero cuenta con una funcionalidad que permite que se pueda conectar a otra base de datos para incorporar esta información en las áreas establecidas Para intentar solucionar esta limitación, la Coordinación de Investigación ha estado recabando en hojas de cálculo (MS Excel), cierta información de los investigadores, pero este método de almacenamiento de datos tiene algunos inconvenientes, por ejemplo, no se puede tener un acceso concurrente de múltiples usuarios a la información, no se pueden establecer niveles de seguridad o realizar consultas complejas, que sí se podrían realizar si se implementa un sistema de base de datos y se desarrolla una aplicación que facilite el almacenamiento y la gestión de la información recopilada. En este sentido, la Coordinación de Investigación requiere de una base de datos donde se pueda almacenar la información de todas las personas que realizan actividades de investigación en la Facultad, y de una aplicación que permita, de manera sencilla, registrar y administrar dicha información, que luego pueda ser utilizada por otras aplicaciones, por ejemplo GENCI-2. Capítulo 1- Problema de investigación 3 1.2. Objetivos 1.2.1. Objetivo general Desarrollar una aplicación web que permita registrar y gestionar la información de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. 1.2.2. Objetivos específicos 1. Analizar los requerimientos funcionales y no funcionales de la aplicación a desarrollar. 2. Diseñar e implementar la base de datos donde se almacena la información de los investigadores de la Facultad de Ciencias a partir de una versión inicial de la base de datos del Registro Nacional de Innovación e Investigación (RNII). 3. Diseñar las interfaces de la aplicación web que permiten almacenar y gestionar, de manera sencilla, la información de los investigadores de la Facultad. 4. Implementar las funcionalidades necesarias de la aplicación web. 5. Cargar en la base de datos de la aplicación la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación. 6. Elaborar un manual de usuario de la aplicación web. 7. Realizar pruebas de funcionalidad y de aceptación de la aplicación web. Capítulo 1- Problema de investigación 4 1.3. Justificación A partir del desarrollo de esta aplicación web, se superará la problemática planteada, permitiendo a los investigadores de la Facultad de Ciencias la facilidad de registrar toda su información (general, académica, laboral, proyectos, productos, etc.) de manera rápida, fácil y sencilla en una base de datos centralizada, y a la Coordinación de Investigación la manipulación y gestión de la información recopilada. Por otra parte, el desarrollo de este Trabajo Especial de Grado permite la obtención de los siguientes beneficios:  Tener la información de los investigadores de la Facultad de Ciencias en una base de datos centralizada y estandarizada.  Utilizar la información recopilada para análisis de datos y toma de decisiones por parte de la Coordinación de Investigación.  Permitir el pleno funcionamiento de la aplicación web GENCI-2, ya que ésta se integrará más adelante con la base de datos de los investigadores. Capítulo 1- Problema de investigación 5 CAPÍTULO 2 MARCO CONCEPTUAL Conocer los antecedentes y las bases conceptuales de un trabajo de investigación siempre es útil para tener una idea de cómo abordarlo; por tal motivo, en este capítulo se trata en detalle el estado actual de aplicaciones relacionadas con la gestión de información de investigadores y conceptos relacionados. 2.1. Antecedentes En Venezuela y en otras partes del mundo se han realizado diversas aplicaciones web relacionadas con la gestión de información de investigadores. Por ejemplo, en Venezuela se cuenta con el Registro Nacional de Innovación e Investigación (RNII) y el Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO), en Perú se tiene el Directorio Nacional de Investigadores e Innovadores (DINA). 2.1.1. Registro Nacional de Innovación e Investigación El Observatorio Nacional de Ciencia, Tecnología e Innovación (ONCTI), entre el 2010- 2012 crea el Registro Nacional de Innovación e Investigación (RNII), que es un “sistema automatizado que permite registrar los datos fundamentales de todas las personas e instituciones que realizan actividades de innovación e investigación en la República Bolivariana de Venezuela” (MCTI, 2011). El objetivo principal de este sistema es ordenar y sistematizar la información de los investigadores e innovadores de Venezuela y servir como herramienta para orientar las políticas e inversiones dirigidas hacia la solución de los problemas más relevantes del país (MCTI, 2011). Además, el registro en el RNII permite a los investigadores e innovadores poder participar en el Programa de Estímulo a la Investigación (PEI), que es un programa del gobierno que busca incentivar, impulsar, fomentar y promover el desarrollo de la Ciencia, Tecnología e Innovación, reconociendo la trayectoria de los investigadores e innovadores que han desarrollado proyectos durante los últimos cinco (5) años en el país y ayudándolos financieramente (Consejo Directivo del ONCTI, 2015). En el sistema RNII, los investigados ingresan su información y sus documentos en nueve (9) secciones distintas. Dicha información es almacenada en una base de datos relacional normalizada. Capítulo 1- Problema de investigación 6 Las secciones son:  Información general.  Información académica.  Experiencia laboral.  Productos de investigación.  Proyectos de investigación.  Formación de talento.  Actividades de Ciencia, Tecnología e Innovación (CTI).  Participación en eventos científicos y de innovación.  Actividades adicionales. Los documentos como títulos académicos, reconocimientos, cursos, entre otros, deben estar digitalizados y en formato PDF para poder cargarlos en el sistema. Desde los inicios de la aplicación, las interfaces han sido sencillas y fáciles de usar por los usuarios. En el año 2015, la aplicación tuvo una renovación de imagen buscando aumentar la usabilidad y la facilidad para que los investigadores e innovadores pudieran registrar su información; la interfaz tiene un diseño adaptativo, se agregaron más textos de ayuda, más metáforas y botones coloridos. Aunque cabe acotar que algunas de las nuevas metáforas utilizadas no son del todo intuitivas y los colores seleccionados para la aplicación cansa un poco la vista. En la Figura 2.1 se muestra la página principal del sistema RNII y en la Figura 2.2 se puede observar el uso de metáforas y textos de ayuda en la aplicación. Figura 2.1 - Página principal del RNII. Capítulo 1- Problema de investigación 7 La aplicación no cuenta con un manual de usuario actualizado y acorde a la nueva interfaz de usuario, pero se puede encontrar el manual anterior, que no difiere en cuanto a la explicación de la información que se debe ingresar en el sistema: http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download =118:manual-rnii&id=11:documentos&Itemid=124 2.1.2. Sistema de Acreditación de los Investigadores de la Universidad de Oriente El Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO) es un instrumento institucional para la clasificación del personal docente de la Universidad de Oriente (UDO) de Venezuela que ejerce labores de investigación. Se fundamenta en criterios de productividad científica y es la base para la implementación de un sistema de reconocimiento del desarrollo destacado en tan importante misión académica, llamado Programa de Apoyo al Investigador Consolidado de la Universidad de Oriente (PAIC-UDO) (SAI-UDO, 2011). El PAIC-UDO es un programa de apoyo y reconocimiento a los investigadores, el cual asigna recursos presupuestarios para la financiación en la adquisición de bienes, materiales, servicios, asistencia a eventos científicos, organización de eventos científicos o para invitaciones a investigadores de otras instituciones (SAI-UDO, 2011). En el sistema SAI-IDO, los investigados que aspiran a ser acreditados, deben ingresar su información y sus documentos en siete (7) secciones distintas. Dichos documentos (títulos académicos, reconocimientos, cursos, entre otros) deben estar en formato PDF. Las secciones son:  Información general.  Información académica.  Experiencia laboral.  Asesorías de trabajos de grado. Figura 2.2 - Textos de ayuda y metáforas del RNII. http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=118:manual-rnii&id=11:documentos&Itemid=124 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=118:manual-rnii&id=11:documentos&Itemid=124 Capítulo 1- Problema de investigación 8  Productos de investigación.  Proyectos de investigación.  Grupo de investigación. Por otra parte, las interfaces de usuario son sencillas y fáciles de usar, con un diseño minimalista y muy limpio. Dispone de textos de ayuda en los campos a completar y de algunas metáforas. La aplicación permite al investigador actualizar, borrar y visualizar la información registrada. En la Figura 2.3 se muestra la página principal del sistema SAI-UDO y en la Figura 2.4 se puede ver un formulario para registrar un estudio alcanzado por el investigador. Figura 2.3 - Página principal del SAI-UDO. Figura 2.4 - Registro de un estudio en el SAI-UDO. Capítulo 1- Problema de investigación 9 Para el desarrollo de la aplicación se utilizaron algunas tecnologías como PHP, la biblioteca jQuery de JavaScript y el Sistema Manejador de Base de Datos PostgreSQL. En la página principal de la aplicación (http://www.saiudo.ci-udo.com.ve/) se puede encontrar el manual de usuario del sistema y otros documentos importantes. 2.1.3. Directorio Nacional de Investigadores e Innovadores El Directorio Nacional de Investigadores e Innovadores, DINA, creado por el Consejo Nacional de Ciencia, Tecnología e Innovación Tecnológica (CONCYTEC), es una base de datos que registra las hojas de vida de los profesionales peruanos que realizan actividades de ciencia, tecnología e innovación (CTI), tanto en el país como en el extranjero (DINA, 2015). DINA “contribuye a dar visibilidad a la labor de los investigadores e innovadores peruanos, así como a vincularlos con sus pares para que puedan generar múltiples oportunidades de potenciar sus redes de colaboración” (DINA, 2015). Algunos de los beneficios que otorga DINA a los investigadores e innovadores son:  Participar por ayudas económicas (subvenciones).  Acceder a bases de datos bibliográficas, redes especializadas y revistas científicas a texto completo.  Exportar el Currículum Vitae (CV) en múltiples formatos, como PDF y RTF. Al igual que los sistemas venezolanos explicados anteriormente, en el sistema DINA, los investigadores e innovadores deben ingresar su información y sus documentos en distintas secciones, en este caso, en nueve (9) secciones parecidas a los otros sistemas:  Datos generales.  Experiencia laboral.  Formación académica.  Idiomas.  Líneas de investigación.  Proyectos (I+D+i).  Producción tecnológica y/o industrial.  Producción científica.  Distinciones y premios. Por otro lado, las interfaces del sistema son atractivas, hacen buen uso de los colores y utilizan imágenes llamativas. El uso de metáforas es escaso pero se cuentan con suficientes textos de ayuda. Es importante resaltar que algunos formularios están un poco desordenados y unos se despliegan en una ventana emergente y otros no. http://www.saiudo.ci-udo.com.ve/ Capítulo 1- Problema de investigación 10 En la Figura 2.5 se muestra la página principal del sistema DINA y en la Figura 2.6 se puede ver un formulario para registrar un nuevo idioma, junto con una tabla resumen de los idiomas ya registrados por ese usuario en la base de datos. Figura 2.5 - Página principal del DINA. Figura 2.6 - Registro de un idioma en DINA. Capítulo 1- Problema de investigación 11 El sistema dispone de un manual de usuario muy completo y detallado, incluso incorpora videos de ayuda. El manual se puede ver en el siguiente enlace: https://sites.google.com/a/concytec.gob.pe/manual-dina/ 2.1.4. Características positivas y negativas de los antecedentes Los antecedentes estudiados permiten tener una idea de lo que se desea o no implementar en la aplicación a desarrollar, por lo que a continuación se analiza en la tabla 2.1 las características positivas y negativas de cada antecedente. Tabla 2.1 - Características positivas y negativas de los antecedentes. Antecedente Características positivas Características negativas RNII - El uso de listas desplegables, calendarios y buscadores en los formularios facilitan el ingreso de la información y la prevención de errores. - El diseño adaptativo de las interfaces de la aplicación resulta muy adecuado para estos tiempos donde la mayoría de aplicaciones son utilizadas desde distintos dispositivos. - Algunas metáforas utilizadas en la aplicación no resultan intuitivas, por lo que pueden causar confusión. - El uso excesivo de colores en la aplicación puede distraer y cansar a la vista. SAI-UDO - El diseño minimalista y limpio de la aplicación resulta agradable y no cansa a la vista. - Los campos de autocompletar en los formularios ayudan al usuario a escribir menos. - Para algunos usuarios el color gris de fondo en los formularios podría ser aburrido. DINA - La colocación del menú en forma horizontal permite una mejor visibilidad de las secciones de la aplicación. - Los buscadores incorporados en la interfaz principal son de mucha utilidad para usuarios visitantes y otros investigadores. - El manual de usuario se presenta de una manera vistosa, rápida y fácil de leer. - El uso de ventanas emergentes en algunos formularios y otros no, hace perder la consistencia de las interfaces. - La desorganización de los campos de algunos formularios podrían desorientar al usuario. https://sites.google.com/a/concytec.gob.pe/manual-dina/ Capítulo 1- Problema de investigación 12 2.2. Investigación en la Facultad de Ciencias de la Universidad Central de Venezuela La Facultad de Ciencias es una de las facultades de la Universidad Central de Venezuela que ofrece continuamente aportes a la Ciencia y a la Tecnología del país, ya que en ella se realizan numerosas investigaciones en las distintas Escuelas e Institutos que la conforman. 2.2.1. Estructura organizativa de investigación La Facultad de Ciencias está conformada por cinco (5) Escuelas (Biología, Computación, Física, Matemática y Química) y cuatro (4) Institutos (Ciencias de la Tierra, Zoología y Ecología Tropical, Ciencias de Tecnología de Alimentos y Biología Experimental), donde grupos de investigadores, profesores o profesionales se dedican a la búsqueda y experimentación de diferentes líneas de investigación en Centros y Laboratorios de Investigación. En los Centros de Investigación se realizan constantemente actividades de investigación científica y/o tecnológica, que favorezcan el desarrollo del país y el bienestar de la sociedad venezolana, como por ejemplo: captación y entrenamiento de capital humano, transferencia de tecnología, difusión, divulgación científica y gestión, seguimiento y evaluación de procesos de ciencia y tecnología (Borges y Rivero, 2006). En los Laboratorios de Investigación se elaboran y ejecutan proyectos de investigación, se contribuye con la formación de investigadores, se organizan y/o dictan cursos, se brinda asesoramiento y se gestionan recursos económicos y materiales. Normalmente, los Laboratorios de Investigación están adscritos a un Centro de Investigación, pero también pueden existir Laboratorios que no pertenezcan a ningún Centro. Ésto ocurre porque no hay un Centro relacionado con la línea de investigación del Laboratorio y porque la cantidad de investigadores pertenecientes a dicho Laboratorio no es suficiente para crear un nuevo Centro y así poder cumplir con todas las formalidades necesarias. En la Figura 2.7 se puede ver un ejemplo de una escuela de la Facultad de Ciencias que tiene Laboratorios de Investigación que no están adscritos a un Centro de Investigación. Capítulo 1- Problema de investigación 13 2.2.2. Coordinación de Investigación La Coordinación de Investigación de la Facultad de Ciencias es un ente administrativo que se ocupa de la promoción y el apoyo de actividades de investigación, así como también del fomento de relaciones con entes universitarios, gubernamentales y privados, dedicados al financiamiento de la ciencia. Fue creada por aprobación de la Facultad de Ciencias, en diciembre de 1991. Inicialmente existía una Comisión de Investigación adscrita a la Coordinación de Postgrado formada por los Coordinadores de Investigación de las escuelas, Centros e Institutos de la Facultad de Ciencias, la cual había sido creada por el Consejo de Facultad en enero de 1986 (Coordinación de Investigación, 2011). La Coordinación de Investigación está constituida por un Coordinador y por un Consejo de Investigación. El Consejo está formado por el Coordinador de Investigación quién lo preside, los representantes de cada uno de los Consejos Técnicos de los institutos, los representantes de las Comisiones de Investigación de cada una de las escuelas y representantes de la Facultad ante el Consejo de Desarrollo Científico y Humanístico (CDCH) (Coordinación de Investigación, 2011). Entre sus funciones esenciales está realizar el balance de la investigación que se realiza anualmente en la Facultad, analizar y promover el potencial productivo de la misma, dar a conocer a los diferentes entes del entorno nacional el resultado de las investigaciones y Figura 2.7 - Estructura organizativa de investigación de la Escuela de Física de la Facultad de Ciencias de la UCV. Fuente: Coordinación de la Investigación de la Facultad de Ciencias (2011). Capítulo 1- Problema de investigación 14 facilitar la conexión entre los investigadores y las instituciones externas que puedan promover financiamiento a la actividad de investigación (Coordinación de Investigación, 2011). El Consejo de Investigación tiene las siguientes atribuciones (Coordinación de Investigación, 2011):  Proponer al Consejo de Facultad lineamientos generales de política para las actividades de investigación de la Facultad, así como las normas que obliguen a su cumplimiento.  Velar por el uso adecuado de los recursos ordinarios y extraordinarios destinados a la investigación en la Facultad.  Mantener una base de datos de los recursos de investigación en la Facultad de Ciencias.  Proponer al Consejo de Facultad los Representantes de la Coordinación de Investigación ante organismos o entes del Gobierno.  Proponer programas de investigación que se consideren necesarios a objeto de solucionar problemas prioritarios en nuestra sociedad.  Velar porque las actividades de investigación de la Facultad reciban el apoyo de los recursos y hacer la distribución racional del mismo.  Estudiar y evaluar las proposiciones de creación de Institutos y Centros de Investigación, Laboratorios de Investigación y Laboratorios de Apoyo a la Investigación dentro de la Facultad, y hacer las recomendaciones correspondientes.  Estimular y orientar las solicitudes de fondos por parte de las diferentes estructuras organizativas de investigación de la Facultad ante entes intra y extrauniversitarios que la fomentan.  Divulgar el potencial investigativo de la Facultad de Ciencias, así como los resultados de investigaciones ya realizadas, distinciones y/o premios.  Fomentar la creación de Grupos Interdisciplinarios de Investigación, dentro y fuera de la Facultad.  Propiciar la realización de eventos que beneficien las actividades de investigación de la Facultad tales como: Seminarios, Jornadas, Conferencias, Cursos y Reuniones. Capítulo 1- Problema de investigación 15 2.3. Arquitectura Cliente-Servidor La arquitectura cliente-servidor es una arquitectura de procesamiento cooperativo, formada por dos (2) componentes principales: clientes y servidores. El cliente se encarga de iniciar la comunicación con el servidor a través de la red, emitiendo solicitudes de recursos o peticiones de servicios, como por ejemplo consultar una información o solicitar un archivo, y el servidor se encarga de atender las solicitudes realizadas por los clientes, respondiendo con el recurso o la información solicitada (Olivares, 2012). El servidor suele estar ubicado en un equipo con grandes capacidades de almacenamiento y procesamiento, para poder atender de forma eficiente las peticiones realizadas por los clientes. Existen distintos tipos de servidores como los servidores web, que almacenan principalmente documentos HTML (HyperText Markup Language, Lenguaje de Marcas de Hipertexto), los servidores de base de datos, que dan servicios de almacenamiento y gestión de bases de datos a sus clientes, los servidores del correo, que almacenan, envían, reciben y realizan todas las operaciones relacionadas con el correo electrónico de sus clientes, entre otros tipos de servidores. En la Figura 2.8 se puede observar la representación de un cliente-servidor: Algunas de las características principales de esta arquitectura son (Olivares, 2012):  El cliente mantiene un papel activo en la comunicación, debido a que inicia la comunicación a través de solicitudes.  El cliente espera y recibe respuestas del servidor.  Un cliente puede comunicarse con más de un servidor de manera concurrente.  El cliente es el componente del sistema que interactúa de manera directa con el usuario final, a través de una interfaz gráfica.  El servidor permanece en espera de solicitudes, por lo tanto se considera que tiene un papel pasivo en la comunicación.  Un servidor puede recibir y mantener la conexión con diversos clientes al mismo tiempo, sin embargo el número máximo de conexiones posibles es limitado. Figura 2.8 - Arquitectura cliente-servidor. Capítulo 1- Problema de investigación 16 2.4. Aplicación web Una aplicación web, es un sitio web, que contiene páginas con contenido sin determinar, parcialmente o en su totalidad. El contenido final de una página se determina sólo cuando el usuario solicita una página del servidor web, a través de Internet o de una Intranet mediante un navegador web. Dado que el contenido final de la página varía de una petición a otra en función de las acciones del visitante, este tipo de página se denomina página dinámica (Adobe Dreamweaver, 2015). 2.4.1. Funcionamiento de una aplicación web Las aplicaciones web se basan en la arquitectura cliente-servidor, explicada anteriormente, donde el cliente es un navegador web y el servidor es un servidor web que almacena las páginas de la aplicación. El funcionamiento de una aplicación web es sencillo, el cliente emite una petición de una página web estática o dinámica al servidor web, y éste devuelve la página solicitada. Una página web estática, es aquélla que no cambia cuando un usuario la solicita: el servidor web envía la página al navegador web solicitante sin modificarla. Por el contrario, una página web dinámica sí cambia cuando un usuario la solicita, ya que tiene líneas de código no determinadas: el servidor web transfiere la página a un software especial, llamado servidor de aplicaciones, que se encarga de leer el código de la página y finalizarla en función de las instrucciones de dicho código. El resultado es una página estática (código HTML puro) que el servidor de aplicaciones devuelve al servidor web, que a su vez la envía al navegador solicitante (Adobe Dreamweaver, 2015). El servidor de aplicaciones también permite trabajar con recursos del lado del servidor, como las bases de datos. Sin embargo, el servidor de aplicaciones no puede comunicarse con la base de datos directamente, necesita de un controlador que actúe de intermediario para establecer la comunicación con ésta (Adobe Dreamweaver, 2015). En la Figura 2.9 se puede observar el proceso para solicitar una página web estática al servidor web y en la Figura 2.10 el proceso para solicitar una página web dinámica al servidor de aplicaciones con datos extraídos de una base de datos. Capítulo 1- Problema de investigación 17 Aunque los servidores web están principalmente diseñados para presentar contenido estático, hoy en día la mayoría de éstos tienen complementos para soportar lenguajes de scripting (guiones) como Perl, PHP, ASP (Active Server Pages), entre otros, pudiendo servir contenido dinámico sin necesidad de comunicarse con un servidor de aplicaciones. También, muchos de los servidores de aplicaciones de la actualidad son capaces de hacer lo que un servidor web es capaz de hacer, es decir, que pueden servir tanto contenido dinámico como estático. Figura 2.9 - Petición de una página web estática. Fuente: Adobe Dreamweaver (2015). Figura 2.10 - Petición de una página web dinámica con datos extraídos de una base de datos. Fuente: Adobe Dreamweaver (2015). Capítulo 1- Problema de investigación 18 2.4.2. Ventajas Algunas de las ventajas de las aplicaciones web son:  Las aplicaciones web pueden ser utilizadas por múltiples usuarios al mismo tiempo.  No necesitan ser descargadas, instaladas y configuradas. Se acceden vía en línea y están listas para trabajar sin importar cuál es su configuración o su hardware.  Una aplicación web se puede ejecutar en múltiples plataformas (hardware o sistema operativo), ya que sólo se necesita de un navegador web para cada plataforma.  Todos los cambios de interfaz o de funcionalidad que se deseen hacer en la aplicación web, se realizan en el código que reside en el servidor web y no en cada uno de los clientes.  Se evitan problemas de inconsistencia de actualizaciones, ya que no existen clientes con distintas versiones de la aplicación. 2.4.3. Desventajas Algunas desventajas son:  Los múltiples accesos realizados en forma simultánea pueden degradar el rendimiento de las aplicaciones, debido a la sobrecarga del servidor donde se encuentran alojadas.  Como el navegador es la herramienta utilizada para ejecutar las aplicaciones web, éstas dependen de la configuración del mismo, para que puedan trabajar de forma óptima, ya sea en cuanto a las Cookies, JavaScript o archivos Flash.  Si el servidor donde está almacenada la aplicación web y la información no tiene los niveles de seguridad necesarios para resguardar los datos, éstas pueden ser vulnerables a los ataques de agentes maliciosos. 2.4.4. Patrón Modelo Vista Controlador El Modelo Vista Controlador (MVC), es un patrón de diseño muy utilizado para el desarrollo de aplicaciones web, el cual tiene como idea fundamental separar los componentes principales de las aplicaciones, como lo son el sistema de gestión de base de Capítulo 1- Problema de investigación 19 datos, las interfaces de usuario y las tareas de manejar los eventos que se produzcan (Olivares, 2012). A continuación se explican las partes del patrón MVC:  Modelo: es la capa donde se trabaja con los datos, por tanto contiene mecanismos para acceder a la información. Cabe mencionar que en esta capa es habitual utilizar un ORM (Object Relational Mapping, Mapeo Objeto Relacional), que permita trabajar con abstracción de bases de datos y persistencia en objetos, en vez de usar directamente sentencias SQL (Structured Query Language, Lenguaje de Sentencias Estructuradas), que suele depender del motor de base de datos con el que se esté trabajando. Principales responsabilidades: o Acceder a la capa de almacenamiento de datos. o Definir las reglas de negocio (lógica del negocio). Ejemplo: "Si la persona X tiene el privilegio Y, no puede ver la información Z".  Vista: es la interfaz de usuario que permite mostrar los datos del modelo e interactuar con ellos mediante acciones o eventos. Principales responsabilidades: o Recibir datos provenientes del modelo y mostrarlos al usuario. o Tener registro de su controlador asociado.  Controlador: actúa como intermediario entre el Modelo y la Vista, gestionando el flujo de información entre ellos y las transformaciones para adaptar los datos a las necesidades de cada uno. Principales responsabilidades: o Recibir los eventos de entrada que se realizan en la vista, como un clic, pulsar un botón, entre otros. o Contener las reglas de gestión de eventos (lógica de la aplicación). Ejemplo: "Si Evento Z, entonces Acción W". Estas acciones pueden suponer peticiones al modelo o a las vistas. Capítulo 1- Problema de investigación 20 2.4.4.1. Flujo de control del patrón MVC Aunque se pueden encontrar diferentes implementaciones del MVC, el flujo de control más frecuente de este patrón es el siguiente (ver Figura 2.11): 1. El usuario interactúa con la vista realizando alguna acción, por ejemplo, pulsar un botón. 2. El controlador recibe la notificación de la acción del usuario y gestiona el evento, normalmente a través de un gestor de eventos. 3. El controlador hace la llamada al modelo, donde le pide visualizar o actualizar los datos. 4. El modelo interactúa con la base de datos, ya sea en forma directa o con una capa de abstracción, y realiza la consulta o la actualización de los datos. 5. El modelo le envía al controlador la información obtenida o le notifica de los cambios realizados. 6. El controlador le manda la respuesta a la vista y ésta reacciona en función de la respuesta que recibe (actualizar la interfaz, abrir un enlace, etc.) 2.4.4.2. Ventajas del MVC El patrón MVC para el desarrollo de aplicaciones web presenta las siguientes ventajas:  Disminuye el acoplamiento entre las partes de la aplicación, ya que las vistas se desacoplan del modelo y el modelo se desacopla de la forma en que se muestra e ingresa los datos.  Aumenta la cohesión, ya que cada elemento del patrón está altamente especializado en su tarea.  Facilita el desarrollo de la misma aplicación en distintos dispositivos o canales. Figura 2.11 - Flujo de control del patrón MVC. Capítulo 1- Problema de investigación 21  Permite una mayor claridad de diseño.  Facilita el mantenimiento.  Aumenta la escalabilidad. 2.5. Tecnologías del lado del cliente Las tecnologías del lado del cliente son ejecutadas e interpretadas del lado del cliente en una aplicación web, es decir, en el navegador web. En muchos casos el buen funcionamiento de estas tecnologías va a depender del tipo de navegador web y de la versión de cada uno de ellos. Por lo general estas tecnologías son utilizadas para mostrar información, darle formato a dicha información, solicitar datos, etc. Entre las tecnologías que se explican a continuación están: el Lenguaje de Marcas de Hipertexto, Hojas de Estilo en Cascada, JavaScript y jQuery. 2.5.1. Lenguaje de Marcas de Hipertexto El Lenguaje de Marcas de Hipertexto, mejor conocido como HTML (HiperText Markup Language), “es el lenguaje con el que se escriben las páginas web, haciendo uso de marcas (etiquetas) para describir la forma en la que deberían aparecer los textos y los gráficos en un navegador web” (EcuRed, 2012). HTML fue diseñado por el físico Tim Berners Lee en 1989, se publicó en un documento formal en 1991 y se convirtió en un estándar para el desarrollo de páginas web en 1995, ya que ofrece una estructura básica para la definición del contenido que por lo general se encuentra en una página web, como imágenes, texto, entre otros. A partir de 1996, la World Wide Web Consortium (W3C), que es la organización que define la mayoría de los estándares para el desarrollo web, se ha encargado de publicar constantes revisiones (HTML 3.2, HTML 4, HTML 4.01) de este estándar, ampliándolo y depurándolo con cada versión. HTML 5 fue la última revisión aprobada por esta organización, en el año 2014. HTML 5 establece una serie de nuevos elementos y atributos que reflejan el uso típico de los sitios web modernos. Incorpora nuevas etiquetas con mayor significado semántico, mejora la integración con las tecnologías de desarrollo web actual, permite desplegar objetos y animaciones en formato 3D (tridimensional), tiene un mejor soporte multimedia y ahorra la necesidad de tener que procesar medios de audio o video a través de complementos instalados en el navegador web. Capítulo 1- Problema de investigación 22 En la Figura 2.12 se muestran las principales diferencias entre las etiquetas de HTML 4.01 y HTML 5, donde se puede observar que con HTML 5 se disminuye el uso de la etiqueta <div> (utilizada para definir un bloque de contenido), y se introducen etiquetas con mayor significado semántico para que la estructura de una página web sea más fácil de entender. 2.5.2. Hojas de Estilo en Cascada Mientras que HTML permite definir la estructura una página web, las Hojas de Estilo en Cascada (Cascading Style Sheets - CSS) son las que ofrecen la posibilidad de definir las reglas y estilos de representación en diferentes dispositivos, ya sean pantallas de equipos de escritorio, portátiles, tabletas, celulares u otros dispositivos capaces de mostrar contenidos web (De Luca Damián, 2010). CSS fue diseñado por Håkon Wium Lie y Bert Bos entre 1994 y 1995 y se convirtió en un estándar en 1996, con el nombre de CSS 1. Al igual que con HTML, la W3C se ha encargado de publicar constantes revisiones de este lenguaje, siendo la versión CSS 2.1 el estándar actual que ofrece gran compatibilidad con la mayoría de los navegadores web del mercado. En el año 2005 se comenzó a definir el sucesor de la versión CSS 2.1, al cual se lo conoce como CSS 3, pero actualmente sigue en desarrollo y sólo se han publicado algunos borradores. Esta versión a pesar de que aún no es compatible con todos los navegadores, ofrece una gran variedad de opciones muy importantes para las necesidades del diseño web actual, como funciones avanzadas de movimiento y transformación, opciones de bordes redondeados, sombras en textos y cajas, entre otras opciones, sin la necesidad de usar un editor gráfico (De Luca Damián, 2010). Figura 2.12 - Estructura básica de una página web con HTML 4.01 y HTML 5. Capítulo 1- Problema de investigación 23 La sintaxis del lenguaje CSS consta de elementos llamados reglas, las cuales se dividen en selectores y declaraciones, donde el selector es el identificador al que se le quiere dar la declaración de un conjunto de propiedades con sus valores, como se puede ver en la Figura 2.13. La Figura 2.14 muestra un ejemplo de código CSS incrustado en HTML, para cambiar el tipo, el tamaño y el color de la fuente de un título y un párrafo. 2.5.3. JavaScript JavaScript (JS) es un lenguaje de scripting, interpretado, diseñado para la manipulación de eventos y objetos contenidos en una página web, de forma local y sin necesidad de transmisión alguna por la red. JavaScript permite crear pequeños programas llamados script, que pueden acompañar un documento HTML o estar contenidos en su interior. Dicho programa se ejecuta en el navegador web cuando se carga el documento, o cuando se produce algún evento, como por ejemplo la activación de un enlace por parte del usuario (España, 2003). Figura 2.13 - Elemento de CSS. Figura 2.14 - Ejemplo de código CSS incrustado en HTML. Capítulo 1- Problema de investigación 24 Gracias a los scripts se pueden realizar tareas como:  Validación de datos introducidos en un formulario.  Mensajes de alerta.  Algunos cálculos simples.  Control de eventos que se producen en la página: un elemento toma el foco, un elemento es activado con el ratón, etc. La ventaja de poder de realizar tareas de este tipo en el navegador web, es que por ejemplo si el usuario no rellena correctamente un formulario, no necesita esperar mucho tiempo hasta que el servidor vuelva a mostrar el formulario indicando los errores existentes. Para insertar código JavaScript en un documento HTML se utiliza la etiqueta <script> de la siguiente manera: Actualmente existe una gran cantidad de bibliotecas basadas en JavaScript, siendo jQuery una se las más utilizadas, ya que ésta posee una gran cantidad de funciones para simplificar la manera de interactuar con los documentos HTML, manipular documentos a través del árbol DOM (Document Object Model, Modelo de Objetos del Documento), gestionar eventos, animar y agregar interacción a las páginas web con la técnica AJAX (Asynchronous JavaScript And XM, JavaScript Asíncrono y XML). La técnica AJAX tiene como objetivo crear páginas web dinámicas, mediante la realización de solicitudes asíncronas hacia el servidor, es decir sin la participación directa del usuario, las cuales permiten actualizar ciertas secciones de la página sin necesidad de recargarla por completo. En ambientes donde no se implementa esta técnica, cualquier actualización no será visible hasta tanto se recargue por completo el contenido de la página (W3Schools, 2015). 2.5.4. Bootstrap Bootstrap, es un marco de trabajo (framework) que permite crear interfaces web con las tecnologías de CSS y JavaScript, cuya particularidad es la de adaptar la interfaz del sitio web al tamaño del dispositivo en que se visualice. Es decir, el sitio web se adapta automáticamente al tamaño de una computadora de escritorio o portátil, una tablet u otro dispositivo. Esta técnica de diseño y desarrollo se conoce como diseño adaptativo (responsive design) (Solis, 2014). <script language="JavaScript"> <!-- <instrucciones> --> </script> Capítulo 1- Problema de investigación 25 2.6. Tecnologías del lado del servidor Las tecnologías del lado del servidor permiten construir la lógica de negocio de la aplicación web. Esto implica el procesamiento de las solicitudes que se realizan desde el navegador web así como también la comunicación con el sistema encargado del manejo de datos. Entre las tecnologías del lado del servidor que se explican a continuación están: el lenguaje de programación Ruby, el marco de trabajo Ruby on Rails, el sistema manejador de base de datos PostgreSQL y el Protocolo Ligero/Simplificado de Acceso a Directorios. 2.6.1. Ruby Ruby es un lenguaje interpretado orientado a objetos, de propósito general y multiplataforma. Una de las principales filosofía del lenguaje es enfocarse en la simplicidad y la productividad, por lo que su sintaxis es muy sencilla de aprender, pero a su vez es muy poderosa y versátil para crear código escalable, sencillo y de manera eficiente (Graterol et al., 2014). Ruby se utiliza para resolver problemas de cualquier índole en el área de la computación, aunque comenzó a hacerse más conocido por su uso para desarrollo web gracias al framework Ruby on Rails, mas no es el único uso que le podemos dar a este lenguaje (Graterol et al., 2014). Algunas de las características generales del lenguaje son las siguientes (Ruby Lang Org, 2015):  Licencia de código abierto: el código fuente de Ruby es libre de ser descargado e inspeccionado por sus usuarios.  Multiparadigma: soporta más de un paradigma de programación, desde la funcional, hasta la imperativa, debido a los esfuerzos de su creador por crear un lenguaje que fuese un híbrido de todos sus lenguajes favoritos.  Todo es visto como un objeto: no existen los tipos de datos elementales, sino que todas las operaciones sobre datos, son en realidad invocaciones a métodos pertenecientes a una clase.  Altamente flexible: permite redefinir su estructura como el programador lo desee. Incluso las clases propias pueden ser redefinidas a conveniencia para modificar el comportamiento de las operaciones. Capítulo 1- Problema de investigación 26  Extensible: se le pueden agregar un gran número de funcionalidades nuevas, a través de su sistema de Gemas, que son bibliotecas desarrolladas por la comunidad y distribuidas libremente a través del repositorio oficial conocido como RubyGems.  Múltiples hilos: el lenguaje implementa en su ejecución el paradigma de múltiples hilos, sin importar la plataforma sobre la cual se encuentre trabajando. 2.6.1.1. Ventajas Algunas de las ventajas de Ruby son:  Código abierto.  Curva de aprendizaje muy corta.  Sintaxis concisa y legible.  Buenas prácticas y lineamientos de calidad reforzados por el lenguaje.  Aumenta la productividad.  Soporte extensivo a herramientas de todo tipo incluido por defecto en la biblioteca estándar.  Dispone de una cantidad enorme de paquetes de terceros, disponibles a través del índice de paquetes de Ruby (llamados Gemas).  Reduce dramáticamente el tiempo de desarrollo gracias a la disponibilidad de tantos paquetes. 2.6.1.2. Desventajas Algunas de las desventajas de Ruby son:  Comunidad pequeña en comparación con otros lenguajes.  Demanda baja en el mercado laboral.  Ruby necesita del manejo de tareas asíncronas no nativas para lograr un mejor rendimiento y escalado de aplicaciones donde haya mucha concurrencia.  El uso de memoria de Ruby no está del todo optimizado. 2.6.1.3. Ruby on Rails Ruby, al igual que otros lenguajes de programación, cuenta con varios frameworks que facilitan la creación de aplicaciones web. No obstante, el framework más utilizado por los desarrolladores, gracias a sus bondades y facilidad de uso, es Ruby on Rails. Ruby on Rails, también conocido como Rails o RoR, “es un entorno de desarrollo web para Ruby de código abierto que está optimizado para la satisfacción de los programadores y Capítulo 1- Problema de investigación 27 para la productividad sostenible. Permite escribir un buen código evitando la repetición y favoreciendo la convención antes que la configuración” (Rails Guides, 2015). Se basa principalmente en dos (2) filosofías de trabajo (Rails Guides, 2015):  Don’t Repeat Yourself (DRY): en español No Te Repitas, sugiere que escribir el mismo código una y otra vez en cualquier componente de software resulta redundante y es una pérdida de tiempo que se puede evitar, por lo que se busca reutilizar componentes ya existentes.  Convención sobre configuración: se basa en establecer estándares o convenciones reconocidas a nivel mundial como configuración por defecto para las tecnologías de trabajo, reduciendo así la cantidad de modificaciones que los desarrolladores deben hacer sobre las mismas para hacer funcional la aplicación. Además, Rails está orientado al paradigma Modelo Vista Controlador (MVC), por lo que utiliza distintas tecnologías para dar soporte a cada una de estas partes. A continuación, se explica cada parte por separado para conocer las tecnologías asociadas a cada una.  Modelo: consiste en las clases persistentes que representan a las tablas de la base de datos. En Rails la gema encargada de realizar automáticamente la correspondencia entre los modelos definidos por los desarrolladores y las tablas almacenadas en la base de datos es ActiveRecord. Una gran bondad de ActiveRecord es que permite realizar migraciones sin mucho esfuerzo, ya que los desarrolladores no tienen que preocuparse por crear manualmente la base de datos y sus tablas utilizando el lenguaje propio del manejador asociado, sino que pueden realizar creación, modificación y eliminación de tablas en la base de datos a través de comandos propios de Rails y efectuando las modificaciones pertinentes únicamente sobre los modelos (Rails Guides, 2015).  Vista: es la responsable de generar la interfaz de usuario, normalmente basada en los datos del modelo. Existen varias formas de gestionar las vistas, el método que aplica Rails es usar Ruby embebido (archivos.html.erb), que es código HTML mezclado con código Ruby. La gema encargada de controlar las vistas en Rails es el ActiveView, la cual es responsable del despliegue de visualización de contenido en pantalla (Rails Guides, 2015).  Controlador: es un intermediario entre los modelos y las vistas. Se encarga de recibir las peticiones que se generan de lado del cliente, y procesarlas de acuerdo a la lógica programada por los desarrolladores para generar las vistas asociadas a los resultados. En Rails, este módulo se conoce como ActionPack, y contiene la clase ApplicationController, encargada principal de todos los controladores del sistema (Rails Guides, 2015). Capítulo 1- Problema de investigación 28 2.6.2. Sistemas Manejadores de Bases de Datos Según Silberschatz A. et al. (2002) un Sistema Manejador de Base de Datos (SMBD) “consiste en una colección de datos interrelacionados y un conjunto de programas para acceder a dichos datos” y su objetivo principal “es proporcionar una forma de almacenar y recuperar la información de una base de datos de manera que sea tanto práctica como eficiente”. En la actualidad existe una gran variedad de sistemas manejadores de bases de datos, muchos de ellos son propietarios o comerciales como Oracle, Microsoft SQL Server, IBM Informix, Sybase, etc. y otros no comerciales o de código abierto como MySQL o PostgreSQL, siendo éste último el que se explica a continuación. 2.6.2.1. PostgreSQL PostgreSQL es un potente Sistema Manejador de Base de Datos objeto-relacional, de código abierto, que cuenta con más de 15 años de desarrollo activo y una arquitectura probada que se ha ganado una sólida reputación por su fiabilidad, integridad de datos y corrección (The PostgreSQL Global Development Group, 1996-2015). Trabaja muy bien con grandes cantidades de datos y una alta concurrencia de usuarios accediendo a la vez al sistema, por lo que se considera una herramienta que favorece a los usuarios con sistemas empresariales de gran tamaño. PostgreSQL se ha enfocado tradicionalmente en la fiabilidad, integridad de datos y características integradas enfocadas al desarrollador. Tiene un planificador de consultas extremadamente sofisticado, que es capaz de unir cantidades relativamente grandes de tablas eficientemente (2ndQuadrant Ltd, 2001-2015). Se distribuye bajo la Licencia PostgreSQL, que es una licencia similar a la de la Distribución de Software de Berkeley (BSD) y a la del Instituto de Tecnología de Massachusetts (MIT), que permite a los usuarios hacer cualquier cosa que quieran con el código, incluyendo la reventa de los binarios sin el código (2ndQuadrant Ltd, 2001-2015). Algunas de las ventajas de PostgreSQL son:  Es código abierto.  La velocidad de respuesta se mantiene al aumentar el tamaño de la base de datos, cosa que no sucede con otros programas que se suelen poner lentos.  Proporciona estabilidad y confiabilidad.  Tiene una gran capacidad de almacenamiento.  Soporta gran número de peticiones simultáneas a la base de datos de forma correcta. Capítulo 1- Problema de investigación 29  Puede operar sobre distintas plataformas, incluyendo Linux, Windows, Unix, Solaris y MacOS X.  Provee un buen sistema de seguridad mediante la gestión de usuarios, grupos de usuarios y contraseñas.  Soporta los tipos de datos, cláusulas, funciones y comandos de tipo estándar SQL92/SQL99 y extendidos propios de PostgreSQL. Algunas de las desventajas son:  En comparación con otros sistemas manejadores de base de datos, como por ejemplo MySQL, es más lento en inserciones y actualizaciones, ya que cuenta con cabeceras de intersección.  Cuenta con muchos foros oficiales de ayuda, pero no con una documentación de ayuda obligatoria.  La sintaxis de algunos comandos o sentencias no es tan intuitiva. 2.6.3. Directorio y servicio de directorio 2.6.3.1. Directorio Un directorio es un repositorio único para la información relativa a los usuarios y recursos de una organización, el cual está organizado de manera lógica y jerárquica. Por ejemplo, en un directorio se puede almacenar información acerca de las cuentas de usuario de las personas de una organización (nombres, contraseñas, números de teléfono, etc.) (EcuRed, 2012). Generalmente se describe un directorio como una base de datos, pero es una base de datos especializada cuyas características la apartan de una base de datos relacional de propósito general (Calzada, 2001). Algunas de las características que diferencian un directorio de una base de datos relacional son (Calzada, 2001):  Los directorios están optimizados para accesos en lectura, frente a las bases de datos convencionales, que se encuentran optimizadas para lectura y escritura.  Los directorios están optimizados para almacenar información relativamente estática, por lo que no son recomendables para almacenar datos que cambian con frecuencia.  Los directorios no soportan transacciones. Las transacciones son operaciones de base de datos que permiten controlar la ejecución de una operación compleja, de modo que dicha operación se completa totalmente o no se ejecuta en absoluto. Las bases Capítulo 1- Problema de investigación 30 de datos convencionales implementan esta funcionalidad, a costa de hacer su implementación más compleja. Pero el tipo de información que se almacena generalmente en el directorio no requiere una consistencia estricta y se considera aceptable que el número de teléfono de una persona no este actualizado de forma temporal.  El diseño del directorio es bastante diferente del diseño de una base de datos relacional. En las bases de datos se tiende a diseñar un modelo de datos para asuntos de negocios y los requisitos de los procesos, el cliente, el servicio y el administrador. Con los directorios, lo que se hace es colocar la información en un repositorio común para muchos usos y usuarios. Su diseño y esquema de la información deben ser desarrollados conforme a lo que está representando, a objetos en la vida real. En la mayoría de los casos, estos objetos representan los usuarios, agendas, listas, preferencias, derechos, productos y servicios, dispositivos, perfiles, políticas, números de teléfono, rutas, etc. Además, se debe considerar también los aspectos operacionales de diseño, en vista del funcionamiento y de escala. 2.6.3.2. Servicio de directorio Un servicio de directorio es una aplicación o un conjunto de aplicaciones que proporciona métodos para almacenar los datos de un directorio y a su vez ponerlos a disposición de los administradores y los usuarios que se encuentren en la misma red (EcuRed, 2012). Un servicio de directorio está altamente optimizado para lecturas y proporciona alternativas avanzadas de búsqueda en los diferentes atributos que se puedan asociar a los objetos de un directorio. 2.6.3.3. Protocolo Ligero/Simplificado de Acceso a Directorios Las aplicaciones que deseen acceder a un directorio, deben utilizar el Protocolo Ligero/Simplificado de Acceso a Directorios, mejor conocido como LDAP (Lightweight Directory Access Protocol), el cual es un protocolo de tipo cliente-servidor que permite establecer la comunicación entre la aplicación y el servicio de directorio para que ésta pueda acceder o modificar la información del repositorio. LDAP le brinda al usuario la posibilidad de: - Conectarse al directorio. - Desconectarse del directorio. - Buscar información. - Comparar información. - Insertar entradas. Capítulo 1- Problema de investigación 31 - Cambiar entradas. - Eliminar entradas. 2.7. Herramientas de Extracción, Transformación y Carga Las herramientas de Extracción (E), Transformación (T) y Carga (L – de Load en inglés) permiten de manera sencilla recuperar datos de distintas fuentes de información, limpiarlos y realizar las transformaciones necesarias para cargarlos en un repositorio, minimizando fallos comunes como la existencia de campos o valores nulos, tablas de referencia inexistentes, entre otros. Siguiendo la línea de tecnologías de código abierto, se ha seleccionado la herramienta de ETL de Pentaho, llamada Pentaho Data Integration (PDI) o también conocida como Kettel, la cual se explica a continuación. 2.7.1. Pentaho Pentaho es una plataforma orientada a soluciones, centrada en procesos, que incluye todos los principales componentes requeridos para la gestión y toma de decisiones empresariales. Está compuesta por diferentes programas que satisfacen los requerimientos fundamentales de una solución de inteligencia de negocio, ofreciendo alternativas para la gestión y análisis de la información (Pentaho, 2012). La plataforma de Pentaho consta de dos ediciones:  Pentaho Community Edition: edición gratuita que contribuye con nuevas funcionalidades, pruebas e innovación.  Pentaho Enterprise Edition: edición certificada que posee características adicionales que no se encuentran en la edición comunitaria, como módulos exclusivos, facilidades de uso y soporte técnico oficial. Ambas ediciones cuentan con una gran variedad de herramientas enfocadas mayormente a dar soporte al desarrollo de soluciones de inteligencia de negocios. 2.7.1.1. Pentaho Data Integration Pentaho Data Integration (PDI) es una herramienta que permite extraer, transformar y cargar (ETL - Extract, Transform and Load) la información disponible en aplicaciones y bases de datos separadas y ponerla en manos del usuario, proyectando consistencia. También es conocido como Kettle y posee las siguientes aplicaciones (Rivera, 2012): Capítulo 1- Problema de investigación 32  Spoon: herramienta gráfica que permite diseñar procesos ETL. Soporta conexión con diversas fuentes de datos y permite transformar los datos necesarios para cargarlos dentro de la base de datos destino.  Pan: herramienta que permite ejecutar transformaciones diseñadas con Spoon en XML o en un repositorio de base de datos. Generalmente las transformaciones se programan en modo por lotes para ser ejecutadas en intervalos de tiempo regulares.  Chef: herramienta que permite ejecutar trabajos complejos que automatizan los procesos de actualización de la base datos.  Kitchen: herramienta que ayuda a ejecutar trabajos por lotes, permitiendo iniciar y controlar fácilmente procesos ETL.  Carte: servidor web que permite la supervisión remota de procesos ETL. De las aplicaciones nombradas anteriormente una de las más usadas es Spoon, cuya interfaz se puede ver en la Figura 2.15. Spoon es realmente fácil de usar y resulta muy útil incluso para realizar migraciones pequeñas, como por ejemplo, pasar datos de una hoja de cálculo a una base de datos relacional. Figura 2.15 - Interfaz gráfica de Spoon. Capítulo 3 – Marco metodológico 33 CAPÍTULO 3 MARCO METODOLÓGICO En todo desarrollo de software, aplicar cierto grado de disciplina siempre ayuda a conseguir un producto final de mayor calidad. Las metodologías ágiles son las más adecuadas para proyectos donde es necesaria la flexibilidad y la adaptación a los cambios, como es el caso de las aplicaciones web, que suelen tener requerimientos variables y usualmente se desea que estén disponibles en poco tiempo. Algunas metodologías ágiles de uso común en la actualidad son: Programación Extrema (XP), Proceso Unificado Ágil (AUP), Proceso Unificado Abierto (OpenUP), Scrum, AgilUs, entre otras. AgilUs es una metodología ágil que se adapta bien a proyectos individuales o de equipos pequeños, se centra en el usuario y sus necesidades, e incorpora técnicas de evaluación de usabilidad rápidas, económicas y que no requieren de plataformas tecnológicas complejas. Por todas estas razones, esta metodología resultó ser la adecuada para el desarrollo de este Trabajo Especial de Grado. En este capítulo se explica en profundidad la metodología AgilUs, analizando sus principales características y describiendo las etapas que contempla. 3.1. Metodología AgilUs La metodología AgilUs de Alecia Acosta nace como línea de investigación del Centro Ingeniería de Software y Sistemas (ISYS) de la Escuela de Computación de la Universidad Central de Venezuela. Se basa en el concepto de usabilidad, en la necesidad de desarrollar software usable. Se fundamenta en el análisis centrado en el usuario y en la participación de especialistas, con el objetivo de evolucionar el software, a fin de que éste alcance el mayor grado de usabilidad una vez culminado su desarrollo (Acosta, 2011). AgilUs es un método de desarrollo iterativo e incremental que pone el mayor peso del desarrollo en la consecución de la usabilidad. Se centra en que la construcción de las interfaces de usuario se realice desde el comienzo del desarrollo del sistema y no al final. Esta metodología reduce la cantidad de actividades y artefactos que se generan, propicia la participación del usuario y se adapta a los cambios que puedan surgir en el desarrollo. Está orientada al desarrollo de sistemas con alto grado de interactividad con los usuarios (front-end) y menos complejidad en la lógica de la aplicación (back-end). Capítulo 3 – Marco metodológico 34 AgilUs provee un conjunto de “buenas prácticas” para el desarrollo de software desde una perspectiva ágil, donde requiere involucrar al usuario de manera activa durante el proceso de desarrollo. Algunas de estas “buenas prácticas” son:  Diseño centrado en el usuario (DCU): es un enfoque de diseño y desarrollo que se centra en los deseos, limitaciones y necesidades de los usuarios finales de un software.  Diseño basado en prototipos: el desarrollo de software es guiado por la construcción de prototipos de alta fidelidad y la evaluación de los mismos por los usuarios y por especialistas en usabilidad.  Desarrollo ágil, incremental e iterativo: el desarrollo es lo más simple posible, provee resultados sin necesidad de esclarecer todo los requerimientos al inicio del desarrollo y permite regresar a etapas anteriores una vez recibida la retroalimentación de las evaluaciones realizadas.  Usabilidad como atributo de la calidad: se siguen las recomendaciones del estándar ISO/IEC 9126‐1 para la producción de software usable, ya que la usabilidad es considerada un atributo de la calidad interna y externa del software.  Interacción continua con el usuario: la presencia constante y participativa del usuario es fundamental. La usabilidad del sistema sólo puede ser determinada por el usuario. Acosta (2011) explica que AgilUs centra el desarrollo de software en los siguientes principios:  Integra la Interacción Humano Computador (IHC) y la Ingeniería de Software (IS): IS e IHC son complementarias, no son disciplinas excluyentes. Un diseño centrado en el usuario impacta positivamente en la calidad del software (ISO 9126-1).  La usabilidad debe considerarse desde el principio del desarrollo: la usabilidad aumenta la calidad del software, entonces es conveniente incluirla desde el principio en el desarrollo como uno de los requerimientos fundamentales para impactar positivamente en la calidad del producto final.  La usabilidad determina la utilidad: un software se considera útil en la medida que pueda ser usado a fin de producir resultados, en forma eficiente, intuitiva y satisfactoria para los usuarios. Capítulo 3 – Marco metodológico 35  El usuario determina la usabilidad: la usabilidad no es una propiedad abstracta. Un software sólo será considerado usable en un contexto específico y por un tipo de usuario específico. El objetivo es lograr que todos los usuarios del software encuentren usables las tareas que pueden realizar. 3.1.1. Ciclo de vida “El ciclo de vida de AgilUs hace énfasis en la importancia del usuario y sus evaluaciones. Está basado en el desarrollo iterativo e incremental de prototipos de alta fidelidad hasta que se convierten en el producto final para entrega” (Acosta, 2011). AgilUs está formado por cuatro (4) etapas diferentes: Requisitos, Análisis, Entrega y Prototipaje, y en cada una de ellas se incluyen actividades y artefactos poco costosos para la construcción de la usabilidad, como se muestra en la Figura 3.1. 3.1.2. Etapas A continuación se describe las cuatro (4) etapas de AgilUs y las técnicas de evaluación de usabilidad utilizadas (Acosta, 2011):  Requisitos: se realiza el análisis global del problema a solucionar, se estudian productos similares existentes, se genera un perfil de usuario, y se define la lista de requerimientos a desarrollar. Esta etapa es importante en el desarrollo del software, Figura 3.1 - Ciclo de vida AgilUs. Fuente: Acosta A. (2011). Capítulo 3 – Marco metodológico 36 ya que un mal análisis de requerimientos traería como consecuencia un software que no cumple con las necesidades del usuario. Las técnicas de evaluación de usabilidad (indagación) que se utilizan en esta etapa son:  Tormenta de ideas: técnica de grupo para la generación de ideas nuevas y útiles, que permitan mediante reglas sencillas aumentar las probabilidades de innovación y originalidad.  Encuesta: conjunto de preguntas normalizadas dirigidas a una muestra representativa de la población para obtener información estadística acerca de sus opiniones o hechos específicos.  Cuestionario: lista de preguntas que se distribuye entre los usuarios para obtener información de sus opiniones. Este instrumento se puede utilizar en cualquier etapa del proceso de desarrollo, dependiendo de las preguntas que estén formuladas.  Entrevista: dialogo entre un entrevistador y un entrevistado, donde el entrevistador hace una serie de preguntas al entrevistado con el fin de conocer sus opiniones e ideas.  Evaluación de sistemas existentes: consiste en la revisión de versiones anteriores del mismo sistema, así como sistemas de la competencia o afines, con el objetivo de identificar ventajas, desventajas y problemas de usabilidad.  Perfil de usuario: describe a los usuarios previstos del sistema, detallando sus características más relevantes.  Requerimientos funcionales y no Funcionales: recopilación de condiciones o capacidades que debe cumplir el sistema.  Análisis: se lleva a cabo el análisis de la solución a desarrollar, se emplean diagramas de casos de uso y modelo de objetos del dominio, siguiendo la notación UML, para definir las funcionalidades que tendrá el producto a desarrollar. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Prototipo en papel: bosquejo del sistema que se desea realizar. Resulta muy útil cuando el cliente no tiene claros algunos puntos. Capítulo 3 – Marco metodológico 37  Guía de estilo: documento que recoge normativas y patrones básicos relacionados con el aspecto de la interfaz para su aplicación en el desarrollo de nuevas pantallas dentro de su entorno.  Modelo de casos de uso: modelo que permite especificar las funcionalidades y el comportamiento del sistema mediante su interacción con usuarios u otros sistemas.  Modelo de objetos del dominio: modelo que describe y prioriza cada uno de los objetos identificados en el sistema.  Objetos de interfaz: modelo que permite comprender la parte visual de la aplicación.  Patrones de interacción: describen aspectos concernientes a la interfaz de usuario; están orientados a presentar soluciones apropiadas a problemas recurrentes que se les presentan a los usuarios cuando utilizan las aplicaciones interactivas.  Prototipaje: se implementa un prototipo rápido de la interfaz de usuario a partir de los patrones de interacción, el cual va evolucionando hasta convertirse en el producto final y se realizan evaluaciones de usabilidad apropiadas a esta etapa: evaluaciones heurísticas y listas de comprobación. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Prototipo rápido: técnica basada en ordenador que pretende reducir el ciclo iterativo de desarrollo. Los prototipos iterativos desarrollados podrán ser rápidamente reemplazados o modificados según los informes procedentes de otras evaluaciones a medida que se evoluciona en el desarrollo de las tareas a realizar. Existen muchas herramientas para la generación de prototipos rápidos, siendo habituales una secuencia de imágenes en Microsoft PowerPoint o Visual Basic.  Evaluación heurística: se basa en una inspección donde especialistas en usabilidad juzgan si cada elemento de la interfaz sigue los principios de usabilidad establecidos.  Lista de comprobación: consta de la verificación del cumplimiento de una lista de principios que el equipo de desarrollo acuerda para el diseño de la interfaz de usuario. Capítulo 3 – Marco metodológico 38  Pensamiento en voz alta: técnica donde se les pide a los usuarios que expresen en voz alta sus pensamientos, sentimientos y opiniones mientras que interaccionan con el sistema o un prototipo del mismo.  Prototipo ejecutable: técnica donde el prototipo utilizado para las pruebas se corresponde con la interfaz real en la mayor medida posible. Es utilizado para maquetar la interfaz y en él son aceptadas entradas desde ratón o teclado, tal como lo haría la interfaz real, a su vez que responde a esos eventos de idéntica forma (mostrando ventanas, mensajes de respuesta, entre otros).  Entrega: se aplican las pruebas al sistema para certificar que la aplicación desarrollada sea un software usable y sin errores, finalmente se pone en producción la aplicación. Las técnicas de evaluación de usabilidad que se utilizan en esta etapa son:  Pruebas de aceptación: pruebas que aportan datos tanto cuantitativos como cualitativos sobre usuarios reales que llevan a cabo tareas reales con el sistema. Los profesionales de la usabilidad pueden evaluar algunos aspectos de la accesibilidad utilizando protocolos normalizados de pruebas de usabilidad.  Protocolo de preguntas: consiste en la formulación de preguntas directas al usuario acerca del sistema para detectar qué partes de la interfaz resultan obvias y qué otras resultan oscuras. 3.1.3. Errores comunes Acosta (2011) señala que al implementar AgilUs se pueden cometer algunos errores comunes que surgen a causa de la disminución deliberada o accidental de la participación del usuario en el proceso de desarrollo o de una mala comprensión del rol que debe ocupar a la hora de tomar decisiones con respecto al diseño del sistema y sus interfaces. Uno de los errores más frecuentes es que el equipo de desarrollo determine la usabilidad del sistema sin incluir al usuario, intentando predecir o aproximar las reacciones, deseos, capacidades y carencias de éste. Otro error común es pensar que el cliente y el usuario son la misma persona. A pesar de que el cliente es el propietario del sistema, éste no debería tomar decisiones, por ejemplo en términos de usabilidad, ya que los usuarios son los que deberían decidir, indirectamente a través de sus evaluaciones y comentarios, qué se debe hacer y por qué. 3.1.4. Tabla resumen Capítulo 3 – Marco metodológico 39 En la Tabla 3.1 se realiza un resumen de la metodología AgilUs. Tabla 3.1 - Resumen de la Metodología AgilUs AgilUs Definición Metodología ágil fuertemente orientada a la producción de software usable, por ello el usuario es el actor principal durante el proceso de desarrollo. Etapas  Requisitos.  Análisis.  Prototipaje.  Entrega. Roles  No tiene roles. Tiempos de entrega Al finalizar una iteración se entrega un prototipo para ser evaluado. Artefactos Etapa de Requisitos:  Tormenta de ideas.  Encuestas, entrevistas, cuestionarios.  Evaluación de sistemas existentes.  Perfiles de usuario.  Requerimientos funcionales y no funcionales. Etapa de Análisis:  Prototipo en papel.  Guía de estilo.  Casos de uso.  Modelo de objetos del dominio.  Objetos de interfaz.  Patrones de interacción. Etapa de Prototipaje:  Evaluación heurística.  Lista de comprobación.  Pensamiento en voz alta.  Prototipo ejecutable. Etapa de Entrega:  Protocolo de preguntas.  Pruebas de aceptación.  Aplicación final. Ventajas  Constante interacción con el usuario durante todo el proceso de desarrollo.  Incremento de la productividad, la satisfacción y la reducción de costos de entrenamiento y soporte del software, ya que las técnicas de evaluación de usabilidad propuestas en el método no son costosas ni requieren de infraestructura tecnológica compleja. Desventajas  No contempla en su ciclo de vida una fase de mantenimiento, lo cual dificulta su evolución y/o corrección una vez finalizado el desarrollo del producto.  Puede ocurrir una disminución de la participación del usuario en el proceso de desarrollo o puede haber una mala comprensión de su rol. Capítulo 4 – Marco aplicativo 40 CAPÍTULO 4 MARCO APLICATIVO En este capítulo se describen aspectos y características relevantes de la aplicación y se detallan los pasos que se realizaron para el desarrollo de este Trabajo Especial de Grado, siguiendo de manera parcial los lineamientos de la metodología AgilUs. 4.1. Uso parcial de la metodología AgilUs Para el desarrollo de este Trabajo Especial de Grado se hizo un uso parcial de los lineamientos de la metodología AgilUs, ya que no se utilizaron todos los artefactos y técnicas que ésta propone por etapa, sino las que más se adaptaran a las necesidades de este proyecto, con el fin de acelerar los tiempos de entrega pero sin perder la meta de lograr un producto altamente usable y centrado en el usuario. Los artefactos y técnicas que se seleccionaron para cada etapa de la metodología fueron los siguientes (ver Figura 4.1):  Requisitos: tormenta de ideas, entrevista, evaluación de sistemas existentes, análisis de perfiles de usuarios y lista de requerimientos a desarrollar.  Análisis: prototipos en papel, guía de estilo, modelos de casos de uso y uso parcial de patrones de interacción, ya que no se tomaron en consideración pero no se documentaron.  Prototipaje: prototipos ejecutables, lista de comprobación y pensamientos en voz alta.  Entrega: prueba de aceptación y uso parcial del protocolo de preguntas, ya que se realizó de manera espontánea y no formal al realizar la prueba de aceptación. Figura 4.1 - Artefactos y técnicas seleccionadas para cada etapa de la metodología AgilUs. Capítulo 4 – Marco aplicativo 41 Es importante mencionar que el desarrollo de este Trabajo Especial de Grado se dividió en iteraciones, durante las cuales se implementó de forma incremental el total de funcionalidades necesarias para la aplicación. Además, las iteraciones fueron orientadas a objetivos, por lo cual no fueron basadas en el tiempo de su duración, sino en mostrar el producto final obtenido en cada una de ellas. De igual manera, es importante señalar que las etapas de la metodología se emplearon según lo necesario, dependiendo de los objetivos planteados para cada iteración. A continuación se explica en detalle cada una de las iteraciones realizadas. 4.2. Primera iteración: esquema general de la solución, interfaz principal de la aplicación e interfaces para un usuario con perfil de investigador Para la primera iteración de este proceso de desarrollo se tuvieron como objetivos:  Obtener a través de la etapa de requisitos un esquema general de los requerimientos principales a implementar en la aplicación.  Lograr a través de la etapa de análisis, plantear el conjunto de requerimientos obtenidos en la fase de requisitos como funcionalidades específicas a implementar en la aplicación.  Desarrollar un prototipo ejecutable que abarque la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador. 4.2.1. Etapa de requisitos En esta etapa se realizó una tormenta de ideas, una entrevista semi-estructurada, una evaluación de sistemas afines existentes y un análisis de perfiles de usuarios potenciales de la aplicación, para lograr definir los requerimientos funcionales y no funcionales de la misma. 4.2.1.1. Tormenta de ideas Esta técnica fue utilizada en el inicio del proceso de desarrollo de la aplicación de una manera un tanto informal, ya que en realidad se realizaron una serie de reuniones donde se discutieron diferentes opiniones referentes a la aplicación, obteniendo así las primeras ideas de lo que se deseaba. Capítulo 4 – Marco aplicativo 42 Las primeras ideas planteadas fueron: - Diseñar interfaces fáciles de usar e intuitivas. - Diseñar la base de datos para almacenar la información de los investigadores de la Facultad de Ciencias a partir de una versión inicial de la base de datos del RNII. - Permitir al investigador registrar, modificar, visualizar y eliminar su información. - Permitir al administrador registrar, modificar, visualizar y eliminar cualquier información contenida en la base de datos. - Autenticar usuarios contra el directorio de usuarios activos de la Facultad de Ciencias. - Cargar los datos básicos de los investigadores en la aplicación a partir de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación. - Diseñar la aplicación de tal forma que pueda ser utilizada en otras instituciones, es decir, que sea genérica. En la Figura 4.2 se puede ver algunas de las notas resultantes de las reuniones realizadas. Todas estas ideas se fueron concretando poco a poco una vez realizadas las siguientes técnicas de evaluación de usabilidad: entrevista, evaluación de sistemas afines existentes y análisis de perfiles de usuarios potenciales de la aplicación. Figura 4.2 - Notas resultantes de reuniones. Capítulo 4 – Marco aplicativo 43 4.2.1.2. Entrevista A fin de determinar la lista de requerimientos se realizó una entrevista semi-estructurada (preguntas preparadas y preguntas espontaneas) al cliente de la aplicación, el Profesor Pío Arias, quien es el Coordinador de Investigación la Facultad de Ciencias. En esta entrevista el cliente pudo dar su opinión, relatar su experiencia personal con respecto a sistemas parecidos y dar a conocer sus expectativas para esta aplicación. Dicha entrevista fue grabada con su consentimiento para no pasar por alto ningún detalle. Las preguntas más relevantes de esta entrevista fueron: 1. Historia de la investigación en la Facultad de Ciencias 2. ¿Cómo se lleva actualmente la información de los investigadores? 3. ¿Qué desea de esta aplicación? ¿Qué aspiraciones tiene? A partir de estas preguntas y otras que se realizaron espontáneamente se obtuvo información muy valiosa sobre aspectos que aún no se tenían en consideración para el desarrollo de la aplicación. En la Figura 4.3 se puede observar las preguntas realizadas en la entrevista. 4.2.1.3. Evaluación de sistemas existentes Se realizó un análisis de sistemas afines existentes en el mercado con la finalidad de puntualizar sus ventajas y aplicarlas a la aplicación a desarrollar; así como minimizar las desventajas o errores que estos pudieran tener. Los sistemas estudiados fueron: el Registro Nacional de Innovación e Investigación (RNII) de Venezuela (ver Tabla 4.1) y el Directorio Nacional de Investigadores e Innovadores (DINA) de Perú (ver Tabla 4.2). Figura 4.3 - Entrevista realizada al Profesor Pio Arias. Capítulo 4 – Marco aplicativo 44 Tabla 4.1 - Evaluación del sistema RNII RNII - http://rnii.oncti.gob.ve/ Tópico Descripción/Observaciones Descripción Aplicación web que permite registrar los datos fundamentales de todas las personas e instituciones que realizan actividades de innovación e investigación en la República Bolivariana de Venezuela. Funcionalidades Permite registrar, modificar, eliminar y visualizar la información del investigador de manera rápida y sencilla. También dispone de un buscador que filtra los resultados según las palabras que sean suministradas en el campo de búsqueda. Provee una red social para compartir información con otros investigadores e incluso formar un grupo de colegas. Apariencia La aplicación presenta interfaces consistentes e intuitivas pero los colores utilizados cansan un poco a la vista y pueden distraer. Algunas metáforas presentadas no son tan intuitivas pero disponen de textos de ayuda. Personalización No cuenta con funcionalidades para personalizar la aplicación. Aspectos de sociabilidad Posee una red social que permite seguir a otros investigadores, ver sus publicaciones, darle me gusta, comentar, ver sus productos y proyectos de investigación, etc. Aspectos de accesibilidad No cuenta con ninguna funcionalidad para usuarios con limitaciones físicas, como por ejemplo atajos de teclado, configuración de tamaño de letra, contraste de colores, entre otros. Idiomas Sólo español. Soporte en línea No cuenta con un formulario para contactar con el administrador del sistema. Tampoco dispone de un manual de usuario dentro de la misma aplicación. Opinión como usuario Herramienta muy útil para registrar la información de los investigadores del país de manera rápida y sencilla. La aplicación podría mejorar en su gama de colores, metáforas y buscadores. Tabla 4.2 - Evaluación del sistema DINA DINA - http://dina.concytec.gob.pe/ Tópico Descripción/Observaciones Descripción Aplicación web que registra las hojas de vida de los profesionales peruanos que realizan actividades de ciencia, tecnología e innovación (CTI), tanto en el país como en el extranjero. Funcionalidades Permite registrar, modificar, eliminar y visualizar la información del investigador de manera rápida y sencilla. Provee conexión con otras bases de datos que tienen información registrada del investigador para evitar que éste tenga que reescribir. También permite realizar búsquedas sencillas o más detalladas de otros investigadores, productos, proyectos y propiedades intelectuales. Por último, dispone de una funcionalidad muy útil de exportación del Currículum Vitae del investigador es diferentes formatos. http://rnii.oncti.gob.ve/ http://dina.concytec.gob.pe/ Capítulo 4 – Marco aplicativo 45 Apariencia La aplicación presenta interfaces minimalistas, consistentes y con buen uso de los colores. El uso de metáforas es escaso pero se cuentan con suficientes textos de ayuda. Algunos formularios están un poco desordenados. Personalización No cuenta con funcionalidades para personalizar la aplicación. Aspectos de sociabilidad No cuenta con ninguna red social o funcionalidad para compartir información con otros investigadores. Aspectos de accesibilidad No cuenta con ninguna funcionalidad para usuarios con limitaciones físicas, como por ejemplo atajos de teclado, configuración de tamaño de letra, contraste de colores, entre otros. Idiomas Sólo español. Soporte en línea Permite contactar con el administrador del sistema mediante el envío de un correo electrónico o por teléfono local. También cuenta con un manual de usuario muy bien detallado que incorpora textos y videos tutoriales. Opinión como usuario Herramienta muy útil para registrar la información de los investigadores peruanos de manera rápida y sencilla. La aplicación podría mejorar en el diseño de los formularios. 4.2.1.4. Perfiles de usuario Se determinaron cuatro (4) perfiles de usuarios potenciales de la aplicación: Visitante, Investigador, Administrador de dependencia y Administrador global, los cuales se describen en las Tablas 4.3, 4.4, 4.5 y 4.6 respectivamente. Tabla 4.3 - Perfil de usuario de un Visitante Usuario Visitante Breve descripción Persona perteneciente o no a la Facultad de Ciencias, con capacidad de navegar en Internet. Puede solicitar registrarse en la aplicación si posee correo Ciencias. Edad Mayor a 18 años Sexo Ambos sexos. Conocimientos tecnológicos Manejo básico, medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Educación diversificada o educación universitaria. Tabla 4.4 - Perfil de usuario de un Investigador. Usuario Investigador Breve descripción Persona perteneciente a la Facultad de Ciencias y que realiza investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Puede agregar, modificar, eliminar y visualizar su propia información. Capítulo 4 – Marco aplicativo 46 Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Tabla 4.5 - Perfil de usuario de un Administrador de dependencia Usuario Administrador de dependencia Breve descripción Persona perteneciente a la Facultad de Ciencias que puede o no realizar investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Es una persona responsable, consiente de sus actos y comprometido con el buen uso de la aplicación. Puede agregar, modificar, eliminar y visualizar usuarios de su misma Dependencia (Escuela/Instituto), así como asignarles el rol de investigador y/o administrador de dependencia. También puede gestionar la información de las tablas base de la aplicación. Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Tabla 4.6 - Perfil de usuario de un Administrador global Usuario Administrador global Breve descripción Persona perteneciente a la Facultad de Ciencias que puede o no realizar investigaciones en la misma. Posee correo Ciencias y se encuentra registrado en la aplicación. Es una persona responsable, consiente de sus actos y comprometido con el buen uso de la aplicación. Puede agregar, modificar, eliminar y visualizar usuarios de cualquier Dependencia (Escuela/Instituto), así como asignarles el rol de investigador, administrador de dependencia y/o administrador global. También puede gestionar la información de las tablas base de la aplicación. Edad Mayor a 22 años. Sexo Ambos sexos. Conocimientos tecnológicos Manejo medio o avanzado de aplicaciones de escritorio y aplicaciones web. Nivel de instrucción Generalmente educación universitaria. Capítulo 4 – Marco aplicativo 47 4.2.1.5. Requerimientos Una vez realizada la tormenta de ideas, la entrevista semi-estructurada, la evaluación de sistemas afines existentes y el análisis de perfiles de usuarios potenciales, se obtuvo la siguiente lista de requerimientos funcionales y no funcionales para el desarrollo de la aplicación. Requerimientos funcionales 1. Permitir el inicio de sesión en la aplicación a los usuarios investigadores, administradores de dependencia y administradores globales. 2. Admitir la solicitud de registro en el sistema a aquellos usuarios visitantes que tienen correo Ciencias pero que aún no se encuentran agregados en la aplicación. 3. Dar la posibilidad a los usuarios visitantes e investigadores de contactar con el administrador del sistema ante cualquier duda, inquietud o irregularidad. 4. Permitir a los usuarios investigadores agregar, modificar, eliminar o visualizar su información (general, académica, laboral, proyectos, productos, etc.). 5. Permitir al usuario administrador de dependencia agregar, modificar, eliminar y visualizar usuarios de su misma Dependencia (Escuela/Instituto), así como también la posibilidad de asignarles el rol de investigador y/o administrador de dependencia. 6. Permitir al usuario administrador global agregar, modificar, eliminar y visualizar cualquier usuario del sistema, así como también la posibilidad de asignarles el rol de investigador, administrador de dependencia y/o administrador global. 7. Facilitar al usuario administrador de dependencia el acceso a cualquier cuenta de un usuario investigador de su misma Dependencia (Escuela/Instituto). 8. Facilitar al usuario administrador global el acceso a cualquier cuenta de un usuario investigador. 9. Proveer al usuario administrador de dependencia o global la posibilidad de agregar, modificar, eliminar o visualizar cualquier registro de las demás tablas disponibles en la base de datos. Capítulo 4 – Marco aplicativo 48 Requerimientos no funcionales 1. Usabilidad 1.1 Las interfaces deben tener un diseño fácil de usar y memorizar por los usuarios menos experimentados. 1.2 La aplicación debe proporcionar mensajes de error que sean informativos y orientados al usuario final. 1.3 La aplicación debe contar con un diseño adaptativo (responsive), a fin de permitir la adecuada visualización en múltiples dispositivos. 1.4 La aplicación debe contar con un manual de usuario bien estructurado. 1.5 La estructura del código debe ser consistente y predecible. 2. Eficiencia 2.1 La aplicación debe tener un tiempo de respuesta no mayor a 5 segundos por las acciones que se realicen en ella. 2.2 Los datos modificados en la base de datos deben ser actualizados para todos los usuarios que acceden en no más de 5 segundos. 3. Disponibilidad 3.1 El sistema debe tener una disponibilidad del 99,99% de las veces en que un usuario intente accederlo. 4. Seguridad 4.1 La aplicación debe asegurar que los datos estarán protegidos del acceso no autorizado, por ejemplo, usuarios que no posean el rol de administrado. 4.2 Los permisos de acceso al sistema sólo pueden ser cambiados por el administrador del sistema. Capítulo 4 – Marco aplicativo 49 4.2.2. Etapa de análisis En esta etapa se llevó a cabo el análisis de la solución a desarrollar, por lo que se emplearon modelos de casos de uso para representar las funcionalidades de la aplicación, se realizaron prototipos en papel, se diseñó una guía de estilo, se definió la arquitectura a utilizar y se diseñó el modelo de datos que daría soporte a la aplicación. 4.2.2.1. Casos de uso El modelo de casos de uso permite especificar las funcionalidades y el comportamiento del sistema mediante su interacción con usuarios u otros sistemas. Además, con este modelo se llega a un lenguaje estándar que es entendido tanto por los expertos como por los usuarios y que permite el análisis del dominio de la aplicación. A continuación se presentan los diferentes niveles que componen el modelo de casos de uso de la aplicación objetivo de este Trabajo Especial de Grado.  Nivel 0: En la Figura 4.4 se puede observar la interacción de los usuarios con el sistema.  Nivel 1: En la Figura 4.5 se especifica el conjunto de casos de uso que engloban las funcionalidades planteadas para la aplicación y son descritos en las Tablas 4.7, 4.8, 4.9, 4.10, 4.11, 4.12 y 4.13. Figura 4.4 - Modelo de casos de uso - Nivel 0. Capítulo 4 – Marco aplicativo 50 Tabla 4.7 - Caso de uso Solicitar registro Identificador y nombre 1. Solicitar registro Actor(es) Visitante. Descripción Permite al actor llenar un formulario con sus datos personales para solicitar ser registrado en la aplicación y acceder a ella. Precondición Poseer correo de la Facultad de Ciencias. Postcondición Se registran los datos que fueron suministrados en el formulario de registro en la base de datos del sistema, se envía un correo electrónico al administrador para que valide dicho registro y se muestra un mensaje informativo al visitante para que espere por la aprobación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Figura 4.5 - Modelo de casos de uso - Nivel 1. Capítulo 4 – Marco aplicativo 51 Tabla 4.8 - Caso de uso Contactar el administrador Identificador y nombre 2. Contactar al administrador Actor(es) Visitante e Investigador. Descripción Permite al actor llenar un formulario para ponerse en contacto con el administrador del sistema y resolver cualquier duda, inquietud o irregularidad que se le pueda presentar. Precondición Ninguna. Postcondición Se envía la duda, inquietud o irregularidad del usuario al correo del administrador del sistema y se muestra un mensaje satisfactorio de la acción realizada. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.9 - Caso de uso Iniciar sesión Identificador y nombre 3. Iniciar sesión Actor(es) Investigador y Administrador de dependencia o global. Descripción Permite al actor ingresar a la aplicación según el rol seleccionado en el formulario de inicio de sesión. La autenticación se realiza contra el directorio de usuarios activos de la Facultad de Ciencias para validar que se trata de una persona perteneciente a ésta. Si la validación es correcta, se verifica que esté registrado en la base de datos del sistema. Precondición El actor se encuentra registrado en el sistema Postcondición El actor entra en el sistema y visualiza un mensaje de bienvenida y su ficha personal. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.10 - Caso de uso Agregar información general e investigativa Identificador y nombre 4. Agregar información general e investigativa Actor(es) Investigador. Permite al actor agregar toda su información general e investigativa en la aplicación: - Datos generales - Estudios y títulos - Cursos Capítulo 4 – Marco aplicativo 52 Descripción - Idiomas - Reconocimientos - Experiencia laboral - Productos de investigación - Proyectos de investigación - Formación de talentos - Participación en eventos Precondición Haber iniciado sesión en el sistema como investigador. Postcondición Se registra la información suministrada por el investigador y se muestra un mensaje satisfactorio del registro agregado. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 4.1. Visualizar información general e investigativa, 4.2. Modificar información general e investigativa, 4.3. Eliminar información general e investigativa. Tabla 4.11 - Caso de uso Agregar usuario Identificador y nombre 5. Agregar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor agregar un nuevo usuario. Si el actor es un administrador de dependencia, sólo podrá agregar usuarios de su misma Dependencia (Escuela/Instituto). Si el actor es un administrador global podrá agregar usuarios de cualquier Dependencia (Escuela/Instituto). Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Postcondición Se registra el nuevo usuario y se muestra un mensaje satisfactorio del usuario agregado. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: 4.1. Visualizar usuario, 4.2. Modificar usuario. Tabla 4.12 - Caso de uso Asignar rol Identificador y nombre 6. Asignar rol Actor(es) Administrador de dependencia o global. Descripción Permite al actor asignar diferentes roles a un usuario (incluso a sí mismo) para limitar sus permisos y vistas en la aplicación. Los roles disponibles son: investigador, administrador de dependencia y administrador global. Si el actor es un administrador de dependencia, sólo podrá asignar roles a usuarios de su misma Dependencia (Escuela/Instituto) y no podrá asignar el rol de administrador global a ninguno. Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Capítulo 4 – Marco aplicativo 53 Postcondición Se asigna el o los roles al usuario seleccionado y se muestra un mensaje satisfactorio de la asignación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.13 - Caso de uso Gestionar información de la aplicación Identificador y nombre 7. Gestionar información de la aplicación Actor(es) Administrador de dependencia o global. Descripción Permite al actor agregar, modificar, eliminar o visualizar cualquier información de las tablas de la aplicación, como por ejemplo, una tabla tipo, país, instituto, línea de investigación, etc. Incluso puede agregar, modificar, eliminar o visualizar información general e investigativa y asociarla a un usuario investigador. Precondición Haber iniciado sesión en el sistema como administrador de dependencia o administrador global. Postcondición Se agrega, modifica, elimina o visualiza la información según la tabla que se esté gestionando. Se muestra un mensaje satisfactorio dependiendo de la acción realizada. Puntos de extensión - Casos de uso Include: ninguno - Casos de uso Extend: ninguno  Nivel 2: En la Figura 4.6 se observan las funcionalidades que se extienden de los casos de uso expuestos en la Figura 4.5 y se describen en las Tablas 4.14, 4.15, 4.16, 4.17, 4.18 y 4.19 Figura 4.6 - Modelo de casos de uso - Nivel 2. Capítulo 4 – Marco aplicativo 54 Tabla 4.14 - Caso de uso Visualizar información general e investigativa Identificador y nombre 4.1. Visualizar información general e investigativa Actor(es) Investigador. Descripción Permite al actor visualizar en detalle la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se muestra la información general o investigativa suministrada por el investigador. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.15 - Caso de uso Modificar información general e investigativa Identificador y nombre 4.2. Modificar información general e investigativa Actor(es) Investigador. Descripción Permite al actor modificar la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se modifica la información general o investigativa suministrada por el investigador y se muestra un mensaje satisfactorio de la modificación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.16 - Caso de uso Eliminar información general e investigativa Identificador y nombre 4.3. Eliminar información general e investigativa Actor(es) Investigador. Descripción Permite al actor eliminar la información general o investigativa que haya agregado. Precondición Haber agregado información general o investigativa. Postcondición Se elimina la información general o investigativa suministrada por el investigador y se muestra un mensaje satisfactorio de la eliminación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Capítulo 4 – Marco aplicativo 55 Tabla 4.17 - Caso de uso Visualizar usuario Identificador y nombre 5.1. Visualizar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor visualizar en detalle la información de un usuario agregado en el sistema. Precondición El usuario debe existir en el sistema. Postcondición Se muestra la información del usuario. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.18 - Caso de uso Modificar usuario Identificador y nombre 5.2. Modificar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor modificar la información de un usuario agregado en el sistema. Precondición El usuario debe existir en el sistema. Postcondición Se modifica la información del usuario seleccionado y se muestra un mensaje satisfactorio de la modificación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Tabla 4.19 - Caso de uso Eliminar usuario Identificador y nombre 5.3. Eliminar usuario Actor(es) Administrador de dependencia o global. Descripción Permite al actor eliminar a un usuario agregado en el sistema y a su vez todos los registros asociados a éste. Precondición El usuario debe existir en el sistema. Postcondición Se elimina el usuario seleccionado, sus registros asociados y se muestra un mensaje satisfactorio de la eliminación. Puntos de extensión - Casos de uso Include: ninguno. - Casos de uso Extend: ninguno. Capítulo 4 – Marco aplicativo 56 4.2.2.2. Prototipos en papel En el análisis de la aplicación se elaboraron cuatro (4) prototipos en papel de algunas interfaces que podrían visualizar los distintos usuarios de la aplicación. Dichos prototipos también se diseñaron en digital para tener una mayor claridad de lo esbozado en papel. Cabe resaltar que los prototipos en papel presentados fueron solo un punto de partida de lo que se diseñaría realmente, ya que los prototipos ejecutables, que se mostrarán más adelante, cambiaron un poco en el diseño planteado según las necesidades y recomendaciones dadas durante el desarrollo. En la Figura 4.7 se puede observar un prototipo de la interfaz principal de la aplicación, la cual dispone de un pequeño menú en la parte superior derecha con tres enlaces disponibles, uno para contactar con el administrador del sistema, uno para visualizar el manual de usuario y uno para iniciar sesión. También dispone de un banner alusivo a la investigación, información e imágenes asociadas a la aplicación y un pie de página. En la Figura 4.8 se puede observar un prototipo de una interfaz de un usuario investigador, la cual dispone del mismo banner presentado en la interfaz principal, un menú dividido en varias secciones según la información que se debe suministrar en cada una (general, académica, laboral, etc.) y un ejemplo de un formulario con campos para rellenar, en este caso el formulario de datos generales del investigador. Figura 4.7 - Prototipo en papel y digital de la interfaz principal de la aplicación. Capítulo 4 – Marco aplicativo 57 En la Figura 4.9 se puede observar un prototipo de otra interfaz visible para un usuario investigador, la cual cuenta con una lista de registros agregados por el usuario, en este caso una lista de sus proyectos de investigación, los cuales puede visualizar, modificar o eliminar. En la Figura 4.10 se puede observar un prototipo de una interfaz de un usuario administrador (de dependencia o global), la cual dispone del mismo banner presentado en las otras interfaces, un menú dividido en varias secciones según la información que puede gestionar y un ejemplo de una lista de registros, en este caso una lista de usuarios del sistema, los cuales puede visualizar, modificar o eliminar. Figura 4.8 - Prototipo en papel y digital de una interfaz del investigador. Figura 4.9 - Prototipo en papel y digital de una lista de registros agregados por un investigador. Capítulo 4 – Marco aplicativo 58 4.2.2.3. Guía de estilo En la guía de estilo se definió la gama de colores utilizados en la aplicación, la tipografía y color de fuente, características de los botones y logos utilizados.  Gama de colores Para la aplicación se utilizó mayormente una gama de colores fríos (azul y verde), para transmitir delicadeza, frescura y serenidad.  Colores principales: son los colores básicos de la aplicación, los que la definen y ocupan la gran mayoría de la misma. En este caso se utilizaron colores azules (ver Figura 4.11) para lograr una sensación de comodidad, tranquilidad y serenidad en el usuario cuando navegara por la aplicación.  Colores secundarios: son los segundos colores predominantes en la aplicación, aunque en mucha menor medida que los principales. En este caso se utilizaron colores verdes (ver Figura 4.12) que mantuvieran equilibrio con los colores principales. Figura 4.11 - Colores principales. Figura 4.10 - Prototipo en papel y digital de una interfaz del administrador. Capítulo 4 – Marco aplicativo 59  Colores destacados: son los colores que se utilizan para resaltar aspectos concretos de la aplicación y llamar la atención del usuario. En este caso se utilizaron colores rojos (ver Figura 4.13), para resaltar algunos elementos de la aplicación como campos requeridos en un formulario, información importante, mensajes de error, entre otros.  Tipografía y color de fuente La tipografía que se utilizó en toda la aplicación fue “Lato”. Para los títulos se utilizó el color azul #007aff y para otros textos el color gris #666666, como se puede observar en la Figura 4.14.  Botones Los botones de la aplicación tienen un estilo sencillo, con esquinas redondeadas y texto en color blanco #ffffff, como se puede observar en la Figura 4.15. Figura 4.14 - Tipografía y color de fuente. Figura 4.12 - Colores secundarios. Figura 4.13 - Colores destacados. Capítulo 4 – Marco aplicativo 60  Logo El logo de la aplicación se muestra en dos versiones, una con la descripción de las siglas SIGIC (Sistema de Gestión de Información Científica), como se observa en la Figura 4.16 y otro sin la descripción, como se observa en la Figura 4.17. Para el logo se utilizó el color turquesa #4bacc6, el azul #007aff y el gris #8e8e8e, los cuales mantienen relación con la gama de colores fríos seleccionados para aplicación. 4.2.2.4. Arquitectura La arquitectura de la aplicación es de tipo cliente–servidor. El cliente (cualquier navegador web) se encarga de iniciar la comunicación con el servidor web a través de la red, emitiendo una petición de una página web de la aplicación, y el servidor web se encargará de devolver dicha página web solicitada por el cliente. Para el desarrollo de la aplicación se utilizó el lenguaje Ruby (versión 2.2.3) y el marco de trabajo Rails (versión 4.2.4). Las razones por la que se seleccionaron estas tecnologías fueron las siguientes:  Ruby y Rails son fáciles de aprender y de usar.  La sintaxis de Ruby es concisa y legible.  Buenas prácticas y lineamientos de calidad.  Ruby dispone de una cantidad enorme de paquetes de terceros (Gemas), que ayudan a reducir el tiempo de desarrollo.  Gran comunidad y colaboradores. Para la parte del diseño de las vistas de la aplicación se utilizó HTML5, CSS3, JavaScript, jQuery, Ajax y Bootstrap, que son lenguajes que se ejecutan e interpretan del lado del cliente, sin la necesidad de tener que hacer una petición al servidor web. Figura 4.16 - Logo con descripción Figura 4.17 - Logo sin descripción Figura 4.15 - Botones. Capítulo 4 – Marco aplicativo 61 Para la construcción de la base de datos que contiene la información de los investigadores de la Facultad de Ciencias se utilizó el Sistema Manejador de Base de Datos PostgreSQL (versión 9.4.5), ya que éste soporta gran número de peticiones simultáneas, tiene gran capacidad de almacenamiento, mantiene su velocidad de respuesta al aumentar el tamaño de la base de datos y ofrece estabilidad y confiabilidad. Finalmente, para realizar la migración de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación, se utilizó la herramienta Pentaho Integration Community Edition (versión 5.4), con la cual se realizaron las transformaciones necesarias para almacenar la información correctamente. En la Figura 4.18 se puede apreciar la arquitectura planteada. 4.2.2.5. Modelo de datos Un modelo de datos muestra de manera gráfica la forma como los datos se relacionan entre sí, formando una estructura en la cual se soporta la aplicación. Para esta primera iteración se diseñó el modelo de datos de la aplicación a partir de una versión inicial de la base de datos del Registro Nacional de Innovación e Investigación (RNII). Dicho modelo de datos tuvo algunas adaptaciones durante el desarrollo de la aplicación, por lo que a continuación se muestra en la Figura 4.19 la primera versión de dicho modelo, un modelo relacional normalizado. Figura 4.18 - Arquitectura de la aplicación. Capítulo 4 – Marco aplicativo 62 Figura 4.19 - Modelo relacional normalizado (primera versión). Capítulo 4 – Marco aplicativo 63 4.2.3. Etapa de prototipaje Para la etapa de prototipaje de esta primera iteración, se realizó un primer prototipo ejecutable de la aplicación, abarcando la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador. Este prototipo se realizó a partir de los artefactos obtenidos en las etapas anteriores. 4.2.3.1. Prototipo ejecutable Se comenzó por construir la base de datos en la que se apoyaría la aplicación según el modelo de datos diseñado en la etapa de análisis. Para ésto se utilizó el Sistema Manejador de Base de Datos PostgreSQL y posteriormente la gema ActiveRecord de Rails para obtener el esquema de dicha base de datos (rake db:schema:dump) y realizar el CRUD (Create, Read, Update, Delete) de cada tabla de manera rápida y sencilla, obteniendo de esta manera los modelos, los controladores y las vistas necesarias para el desarrollo de cada una de las funcionalidades de la aplicación. En la Figura 4.20 se puede observar parte del script SQL de la base de datos de la aplicación y en la Figura 4.21 los comandos de Rails utilizados para realizar el CRUD de cada tabla de la base de datos. Figura 4.20 - Parte del script SQL de la base de datos de la aplicación. Capítulo 4 – Marco aplicativo 64 También se realizaron algunas inserciones en las tablas base de la base de datos, como por ejemplo, la tabla país, estado, municipio, parroquia, área de conocimiento, subárea de conocimiento, disciplina, entre otras, con el fin de poder realizar pruebas durante el desarrollo. En la Figura 4.22 se pueden observar algunas de las inserciones realizadas. Una vez lista la base de datos y las inserciones, se comenzó a diseñar la interfaz principal de la aplicación y las interfaces destinadas al usuario con perfil de investigador, utilizando como base las vistas que se crearon cuando se hizo el CRUD de la base de datos. Utilizando HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails se construyeron todas las vistas que componen este prototipo. Además son adaptativas a cualquier dispositivo en donde se visualicen. Figura 4.21 - Comandos de Rails para el crear CRUD de cada tabla de la base de datos. Figura 4.22 - Script SQL de las inserciones realizadas en la base de datos. Capítulo 4 – Marco aplicativo 65  Interfaz principal En la Figura 4.23 se puede observar la interfaz principal de la aplicación, la cual claramente tuvo diferencias con respecto al diseño planteado en el prototipo en papel, ya que se pensaron nuevas ideas que podrían resultar más atractivas para el usuario, como por ejemplo, un carrusel de imágenes con información relacionada a la aplicación y un conjunto de fotografías de investigadores de la propia Facultad de Ciencias. Cabe destacar que para este primer prototipo, los botones de registro e iniciar sesión no eran funcionales todavía, sino que se accedía directamente a las demás interfaces de la aplicación sin realizar ningún tipo de autenticación.  Interfaces para usuarios investigadores Se construyeron treinta y nueve (39) interfaces para los usuarios investigadores, por lo que a continuación se muestran las más representativas. En la Figura 4.24 se puede observar la interfaz de inicio del investigador, la cual se compone principalmente de un menú dividido en siete (7) secciones donde podrá ingresar toda su información (general, académica, laboral, etc.), y de una ficha con sus datos más básicos. Figura 4.23 - Interfaz principal de la aplicación. Capítulo 4 – Marco aplicativo 66 Las secciones del menú son:  Datos generales.  Formación académica.  Experiencia laboral.  Productos de investigación.  Proyectos de investigación.  Formación de talento.  Participación en eventos. En la Figura 4.25 se puede observar la misma interfaz de inicio pero adaptada a un teléfono móvil. Figura 4.24 - Interfaz de inicio de un investigador. Figura 4.25 - Interfaz de inicio de un investigador en un teléfono móvil. Capítulo 4 – Marco aplicativo 67 A continuación, en la Figura 4.26 se puede observar la interfaz de datos generales del investigador, donde éste podrá actualizar su estado civil, fecha de nacimiento, país de nacimiento, ciudad de nacimiento, domicilio, teléfono de casa, teléfono celular, correo principal, correo alternativo y sitio web. En esta interfaz y en las demás se resalta en color azul la sección donde se encuentra el investigador y se le proporciona una miga de pan para indicarle el recorrido seguido y la forma de regresar. Figura 4.26 - Interfaz de datos generales del investigador. Capítulo 4 – Marco aplicativo 68 En la Figura 4.27 se puede observar la lista de experiencias laborales del investigador, organizada en una tabla que contiene los detalles más importantes de cada experiencia y tres (3) posibles acciones a realizar sobre cada registro: ver, editar, eliminar (ver Figura 4.28). Esta tabla se presenta de igual forma en todas las demás secciones provistas para el investigador, menos en la sección de datos generales. También se presenta un botón verde llamativo para que el investigador pueda agregar una nueva experiencia laboral a su lista. Figura 4.27 - Interfaz con lista de experiencias laborales del investigador. Figura 4.28 – Metáforas de las acciones a realizar sobre un registro. Capítulo 4 – Marco aplicativo 69 En la Figura 4.29 se muestra el formulario para agregar una nueva experiencia laboral, el cual tiene el mismo diseño que el formulario presentado en la Figura 4.26, solo que en este caso la estructura de la interfaz varia un poco, ya que se agregó una columna del lado derecho del formulario, destinada a mostrar un mensaje importante para el investigador. La mayoría de las secciones tiene la misma estructura al agregar y editar algún elemento, menos las sección de datos generales y la sección de formación académica – idiomas. En algunos formularios se presenta un botón verde con el símbolo más (+) al lado de algunos campos, como por ejemplo el campo institución de la Figura 4.29. Dicho botón se dispuso para que el investigador pudiera solicitar agregar una nueva institución que no se encuentre en la lista de instituciones presentada. Dicha solicitud se muestra en un formulario contenido en un modal como se puede observar en las Figuras 4.30. Figura 4.29 - Interfaz para agregar una experiencia laboral. Capítulo 4 – Marco aplicativo 70 Al presionar el botón guardar de la Figura 4.30, se envía un mensaje de solicitud de validación de la institución recién agregada al correo del administrador del sistema. Para enviar este correo fue necesario utilizar la gema ActionMailer de Rails y realizar algunas configuraciones como se muestra en la Figura 4.31. En la Figura 4.32 se puede observar el mensaje que se le muestra al investigador una vez que ha sido enviada la solicitud. Figura 4.30 - Modal para solicitar agregar una institución. Figura 4.32 - Mensaje satisfactorio del envío de solicitud para agregar una institución. Figura 4.31 - Configuraciones para enviar correos con ActionMailer. Capítulo 4 – Marco aplicativo 71 En la Figura 4.33 se muestra la interfaz donde se visualiza en detalle la información de una experiencia laboral agregada. Dicha interfaz permite descargar el documento que respalda la información que fue suministrada para esa experiencia y provee dos botones para facilitar la modificación o eliminación de la misma. Todas las secciones tienen el mismo diseño para visualizar un registro específico. En la Figura 4.34 se presenta el formulario destinado para modificar una experiencia laboral, el cual tiene la misma estructura, diseño y campos que el formulario de agregar experiencia laboral, solo que en este caso los campos ya incluyen la información que fue suministrada anteriormente. Todas las secciones tienen la misma estructura y diseño para modificar un registro específico. Figura 4.33 - Interfaz para visualizar una experiencia laboral. Capítulo 4 – Marco aplicativo 72 Para las interfaces donde se listan los productos, proyectos y participaciones en eventos del investigador, se colocó un buscador encima del botón de agregar, con el fin de facilitar el registro de productos, proyectos o eventos que pueda tener en común con otros investigadores. Por ejemplo, un investigador puede haber participado en un producto que ya agregó uno de sus colegas, por lo tanto, sólo tendría que buscarlo y agregarlo a su lista. En las Figuras 4.35 y 4.36 se puede observar el buscador perteneciente a la sección de productos y su funcionamiento respectivamente. Figura 4.34 - Interfaz para modificar una experiencia laboral. Capítulo 4 – Marco aplicativo 73 Figura 4.35 - Buscador de productos. Figura 4.36 - Funcionamiento del buscador de productos. Capítulo 4 – Marco aplicativo 74 Finalmente, para este prototipo se realizó un formulario de contacto, donde usuarios visitantes o investigadores pueden enviarle un mensaje al administrador del sistema ante cualquier duda, inquietud o irregularidad. Para este formulario también se hizo uso de la gema ActionMailer de Rails. En la Figura 4.37 se puede observar el formulario de contacto. 4.2.3.2. Lista de comprobación Una vez terminado el primer prototipo ejecutable, se aplicó la técnica de evaluación de usabilidad llamada lista de comprobación, para la cual se utilizaron las diez (10) heurísticas de Nielsen como principios para el diseño de la interfaces de usuario. Las diez (10) heurísticas de Nielsen son (Nielsen, 1995): 1. Visibilidad del estado del sistema: el sistema siempre debería mantener informado al usuario de lo que está ocurriendo, a través de retroalimentación apropiada dentro de un tiempo razonable. 2. Relación entre el sistema y el mundo real: el sistema debería hablar el lenguaje de los usuarios mediante palabras, frases y conceptos que sean familiares al usuario, más que con términos relacionados con el sistema. Seguir las convenciones del mundo real, haciendo que la información aparezca en un orden natural y lógico. 3. Control y libertad del usuario: hay ocasiones en que los usuarios elegirán las funciones del sistema por error y necesitarán una “salida de emergencia” claramente Figura 4.37 - Formulario de contacto. Capítulo 4 – Marco aplicativo 75 marcada para dejar el estado no deseado al que accedieron, sin tener que pasar por una serie de pasos. Se deben apoyar las funciones de deshacer y rehacer. 4. Consistencia y estándares: los usuarios no deberían cuestionarse si acciones, situaciones o palabras diferentes significan en realidad la misma cosa; siga las convenciones establecidas. 5. Prevención de errores: mucho mejor que un buen diseño de mensajes de error es realizar un diseño cuidadoso que prevenga la ocurrencia de problemas. 6. Reconocimiento antes que recuerdo: se deben hacer visibles los objetos, acciones y opciones. El usuario no tendría que recordar la información que se le da en una parte del proceso, para seguir adelante. Las instrucciones para el uso del sistema deben estar a la vista o ser fácilmente recuperables cuando sea necesario. 7. Flexibilidad y eficiencia de uso: la presencia de aceleradores, que no son vistos por los usuarios novatos, puede ofrecer una interacción más rápida a los usuarios expertos que la que el sistema puede proveer a los usuarios de todo tipo. Se debe permitir que los usuarios adapten el sistema para usos frecuentes. 8. Estética y diseño minimalista: los diálogos no deben contener información que es irrelevante o poco usada. Cada unidad extra de información en un diálogo, compite con las unidades de información relevante y disminuye su visibilidad relativa. 9. Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: los mensajes de error se deben entregar en un lenguaje claro y simple, indicando en forma precisa el problema y sugerir una solución constructiva al problema. 10. Ayuda y documentación: incluso en los casos en que el sistema pueda ser usado sin documentación, podría ser necesario ofrecer ayuda y documentación. Dicha información debería ser fácil de buscar, estar enfocada en las tareas del usuario, con una lista concreta de pasos a desarrollar y no ser demasiado extensa. Para verificar el cumplimiento de cada principio se describieron algunos ejemplos que muestran cómo se incorporaron en las interfaces diseñadas en este prototipo.  Visibilidad del estado del sistema: cuando un investigador solicita añadir una nueva línea de investigación o institución a la aplicación, se muestra un mensaje de “Espere un momento por favor…” después de presionar el botón guardar, ya que esta solicitud tarda unos segundos en realizarse. La Figura 4.38 muestra el mensaje mencionado. Capítulo 4 – Marco aplicativo 76  Relación entre el sistema y el mundo real: cuando ocurre algún tipo de error en el sistema se muestra un mensaje informativo al investigador con palabras familiares, evitando mensajes del tipo “Error 30452”. En la Figura 4.39 se puede observar un ejemplo de un mensaje de error.  Control y libertad del usuario: el investigador podría presionar por error el botón de eliminar un producto, un proyecto, un curso, etc., pero el sistema le da el control de poder cancelar dicha solicitud, tal y como se puede ver en la Figura 4.40.  Consistencia y estándares: en todas las interfaces donde aparecen listas de registros, se utilizaron las mismas metáforas para las acciones: ver, editar y eliminar. En la Figura 4.41 se pueden ver las metáforas utilizadas en las listas. Figura 4.38 - Mensaje de espera al agregar una línea de investigación. Figura 4.39 - Mensaje de error con palabras familiares. Figura 4.40 - Confirmación antes de eliminar un registro. Figura 4.41 - Metáforas para las acciones: ver, editar y eliminar. Capítulo 4 – Marco aplicativo 77  Prevención de errores: los campos con fechas de culminación que aparecen en algunos formularios, se restringen dependiendo de lo colocado en la fecha de inicio, para que no se pueda colocar una fecha menor, como se puede ver en la Figura 4.42.  Reconocimiento antes que recuerdo: en los formularios se hizo uso de listas desplegables que no sólo previenen errores de escritura, también permiten al investigador reconocer las opciones disponibles en lugar de verse obligado a recordarlas todas. Por ejemplo, en la Figura 4.43 se muestran todas las opciones de áreas de conocimiento. X Flexibilidad y eficiencia de uso: en este prototipo no se incluye ningún tipo de acelerador para usuarios expertos.  Estética y diseño minimalista: los colores utilizados en las interfaces fue limitado para alcanzar el balance entre lo estético y lo minimalista.  Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: en los formularios se hizo uso de advertencias tras un error por parte del usuario. Por ejemplo, si el investigador olvida introducir el archivo de un curso que está agregando y presiona el botón guardar, la aplicación detiene la acción y envía una advertencia, tal como se puede ver en la Figura 4.44. Figura 4.43 - Lista desplegable de áreas de conocimiento. Figura 4.42 - Restricción de una fecha de culminación. Capítulo 4 – Marco aplicativo 78  Ayuda y documentación: para ayudar a el investigador con cualquier duda que se la pueda presentar se colocó dentro de la aplicación un enlace directo al manual de usuario, como se observa en la Figura 4.45. 4.2.3.3. Pensamiento en voz alta Una vez realizada la lista de comprobación, se les presentó el prototipo ejecutable al cliente y a las tutoras académicas (usuarios), y se les pidió que manifestaran en voz alta sus pensamientos, sentimientos y opiniones con respecto al mismo. El cliente y las tutoras manifestaron su satisfacción con el diseño de las interfaces y realizaron sugerencias con respecto a mejorar algunos campos de los formularios de productos y proyectos. También sugirieron cambiar de lugar el buscador que se presenta en la sección de productos, proyectos y participación en eventos, ya que no les parecía intuitiva la función de dicho buscador en la parte de las listas, sino más bien en los respectivos formularios para agregar un nuevo registro. Todas las sugerencias se tomaron en cuenta y se realizaron los cambios necesarios antes de cerrar la iteración. En la Figura 4.46 se puede observar cómo quedó el buscador de productos dentro del formulario para agregar un producto de investigación. Los demás buscadores también fueron cambiados de lugar. Figura 4.45 - Manual de usuario dentro de la aplicación. Figura 4.44 - Advertencia emergente al no agregar el documento que respalda la información suministrada por el investigador. Capítulo 4 – Marco aplicativo 79 4.2.4. Cierre de la iteración Una vez terminada la iteración, se determinó que la forma en que se diseñaron las interfaces y se realizaron las funcionalidades de las mismas era adecuada para realizarse de igual manera en las interfaces faltantes de la aplicación. 4.3. Segunda iteración: interfaz de inicio de sesión e interfaz de solicitud de registro Para la segunda iteración de este proceso de desarrollo se tuvieron como objetivos:  Determinar en la etapa de análisis el diseño y las adaptaciones necesarias para desarrollar las interfaces de inicio de sesión y solicitud de registro que utilizaran los distintos usuarios de la aplicación.  Construir las interfaces de inicio de sesión y solicitud de registro e integrarlas al primer prototipo desarrollado. 4.3.1. Etapa de análisis En esta etapa se llevó a cabo el análisis de las interfaces de inicio de sesión y solicitud de registro, por lo que se realizaron prototipos en papel de dichas interfaces y se adaptó el modelo de datos de la primera iteración. 4.3.1.1. Prototipos en papel Figura 4.46 - Buscador de producto dentro del formulario agregar. Capítulo 4 – Marco aplicativo 80 En el análisis de la aplicación de la primera iteración se realizaron algunos prototipos en papel de varias interfaces, pero ninguno referido al inicio de sesión y solicitud de registro en la aplicación, por lo que en esta iteración se diseñaron nuevos prototipos. En la Figura 4.47 se puede observar un prototipo de la interfaz para iniciar sesión en la aplicación, la cual dispone de un pequeño formulario en el centro de la pantalla donde el usuario colocará el rol con el que desea entrar a la aplicación, su correo de la Facultad de Ciencias y la contraseña del mismo. En la Figura 4.48 se puede observar un prototipo de la interfaz para solicitar registrarse en la aplicación, la cual se compone de una serie de campos que debe rellenar el usuario, incluyendo entre ellos el correo de la Facultad de Ciencias. Figura 4.47 - Prototipo en papel y digital de la interfaz de inicio de sesión. Figura 4.48 - Prototipo en papel y digital de la interfaz de solicitud de registro. Capítulo 4 – Marco aplicativo 81 4.3.1.2. Modelo de datos El modelo de datos de la primera iteración no contempló las relaciones necesarias para que los usuarios tuvieran uno o varios roles en la aplicación y pudieran iniciar sesión con alguno de ellos. Además este modelo incluía una tabla llamada “Investigador”, la cual era limitante, ya que no todo usuario necesariamente tiene que ser investigador, puede ser solo administrador o ambos. A raíz de esto, se decidió acomodar el modelo de datos, cambiando aquellas tablas que incluían la palabra “Investigador” por “Usuario” y creando las tablas “Usuario_Rol” y “Rol”, como se puede observar en la Figura 4.49. Capítulo 4 – Marco aplicativo 82 Figura 4.49- Modelo relacional normalizado (última versión). Capítulo 4 – Marco aplicativo 83 4.3.2. Etapa de prototipaje Para la etapa de prototipaje de esta segunda iteración, se realizó un segundo prototipo ejecutable de la aplicación, donde se incluyó la construcción de la interfaz de inicio de sesión y la interfaz de solicitud de registro. 4.3.2.1. Prototipo ejecutable Se comenzó por modificar la base de datos de la aplicación según la nueva versión del modelo de datos obtenido en la etapa de análisis. Seguidamente, se volvió a hacer uso de la gema ActiveRecord de Rails para obtener el esquema de la nueva base de datos y se realizó el CRUD (Create, Read, Update, Delete) de las tablas que fueron incorporadas. En la Figura 4.50 se puede observar parte del script SQL de la base de datos de la aplicación con la incorporación de las nuevas tablas y en la Figura 4.51 los comandos de Rails para realizar el CRUD de dichas tablas. Figura 4.50 - Parte del script SQL de la base de datos de la aplicación con las nuevas tablas incorporadas. Capítulo 4 – Marco aplicativo 84 También se realizaron las inserciones de los roles “Investigador”, “Administrador de dependencia” y “Administrador global” en la tabla “Rol”. Una vez lista la base de datos y las inserciones, se comenzó a diseñar la interfaz de inicio de sesión, utilizando nuevamente HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails, como se puede ver en la Figura 4.52. Para hacer totalmente funcional esta interfaz, fue necesario utilizar la gema devise_ldap_authenticatable de Rails, la cual permitió verificar contra el directorio de usuarios activos de la Facultad de Ciencias, la autenticidad del correo y la contraseña suministrada en el formulario. Dicha gema utiliza el Protocolo Ligero/Simplificado de Acceso a Directorios para comunicarse y acceder fácilmente a la información del directorio de la Facultad. En la Figura 4.53 se puede observar parte de la configuración que fue necesaria para establecer la comunicación con el directorio de usuarios activos la Facultad de Ciencias y en la Figura 4.54 parte del código que se ejecuta al presionar el botón de iniciar sesión de la Figura 4.52. Figura 4.51 - Comandos de Rails para el crear CRUD de las nuevas tablas de la base de datos Figura 4.52 - Interfaz de inicio de sesión de la aplicación. Capítulo 4 – Marco aplicativo 85 Seguidamente se diseñó y construyó la interfaz de solicitud de registro, la cual cuenta con un mensaje informativo para el usuario (ver Figura 4.55) antes de mostrar el formulario de registro (ver Figura 4.56). Para esta interfaz se hizo uso de la gema ActionMailer de Rails, ya que al presionar el botón de registrarse se envía un correo al administrador del sistema para que valide el registro del usuario. Figura 4.53 - Configuración para establecer conexión con el directorio de usuarios activos de la Facultad de Ciencias. Figura 4.54 - Código que funciona detrás del inicio de sesión. Capítulo 4 – Marco aplicativo 86 4.3.2.2. Pensamiento en voz alta Una vez terminadas las interfaces de inicio de sesión y solicitud de registro, se realizó una reunión con las tutoras académicas (usuarios), las cuales manifestaron su conformidad con dichas interfaces y no sugirieron ningún cambio al respecto. Figura 4.56 - Interfaz de solicitud de registro de la aplicación - Formulario. Figura 4.55 - Interfaz de solicitud de registro de la aplicación – Mensaje informativo. Capítulo 4 – Marco aplicativo 87 4.3.3. Cierre de la iteración Una vez terminada la iteración, se determinó, que la forma en que se diseñaron las interfaces y se realizaron las funcionalidades de las mismas siguió siendo adecuada con respecto a todo lo desarrollado hasta el momento. 4.4. Tercera iteración: interfaces para un usuario con perfil de administrador (de dependencia o global) Para la tercera iteración de este proceso de desarrollo se tuvieron como objetivos:  Determinar en la etapa de análisis el diseño de algunas de las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global).  Construir las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global).  Cargar en la base de datos de la aplicación la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación.  Elaborar el manual de usuario de la aplicación.  Realizar la prueba de aceptación de la aplicación y corregir los errores de usabilidad que se puedan encontrar. 4.4.1. Etapa de análisis En esta etapa se llevó a cabo nuevamente un análisis del diseño de las interfaces destinadas para un usuario con perfil de administrador (de dependencia o global), ya que aunque se había propuesto un prototipo de una interfaz para el administrador en la primera iteración, éste ya no estaba acorde a lo desarrollado hasta el momento. 4.4.1.1. Prototipos en papel Se diseñaron tres (3) nuevos prototipos en papel de algunas interfaces destinadas para un usuario administrador, tomando en consideración la importancia de este perfil sobre la información del sistema. Ser administrador implica tener acceso a la gran mayoría de la información contenida en la base de datos del sistema, por tal motivo se comenzó por definir las secciones del menú Capítulo 4 – Marco aplicativo 88 que serían visibles para este usuario, las cuales serían aquellas secciones que éste necesitaría gestionar con más frecuencia. Las secciones elegidas para el menú fueron: Usuarios, Asignación de roles, Instituciones, Líneas de investigación, Productos de investigación, Proyectos de investigación, Eventos y Otras tablas (ver Figura 4.57). La mayoría de las secciones de las interfaces del administrador tienen el mismo diseño y estructura que las interfaces (listar, agregar, visualizar y modificar un registro) de un investigador, por lo que los siguientes prototipos se enfocaron en las interfaces que variarían un poco en su funcionalidad, como lo son: Asignación de roles y Otras tablas. En la Figura 4.58 se puede observar un prototipo de la interfaz de asignación de roles, la cual contiene una lista organizada con los usuarios de la aplicación y sus roles correspondientes. En la Figura 4.59 se puede observar un prototipo de la interfaz para gestionar otras tablas del sistema, la cual contiene en orden alfabético una lista de enlaces de todas las demás tablas del sistema que el administrador puede gestionar. Figura 4.57 - Prototipo en papel y digital del menú de las interfaces de un administrador. Figura 4.58 - Prototipo en papel y digital de la interfaz de asignación de roles. Capítulo 4 – Marco aplicativo 89 4.4.2. Etapa de prototipaje Para la etapa de prototipaje de esta tercera iteración, se realizó el último prototipo ejecutable de la aplicación, abarcando las interfaces destinadas al usuario con perfil de administrador (de dependencia o global). 4.4.2.1. Prototipo ejecutable  Interfaces para usuarios administradores Para este prototipo ejecutable no fue necesario realizar ningún cambio en el modelo de datos planteado en la iteración anterior, por lo que se procedió directamente a construir todas las interfaces destinadas al usuario con perfil de administrador (de dependencia o global), utilizando nuevamente HTML5, CSS3, JavaScript, jQuery, Ajax, Bootstrap, Ruby y Rails Se construyeron doscientas diecisiete (217) interfaces para un usuario con perfil de administrador, por lo que a continuación se muestran las más representativas. Cabe destacar que todas las interfaces son iguales tanto para un administrador de dependencia como para un administrador global, lo que vería es la permisología de cierta información, ya que un administrador de dependencia solo puede gestionar usuarios e información de usuarios de su misma Dependencia (Escuela/Instituto). En la Figura 4.60 se puede observar la interfaz de inicio de un administrador, la cual se compone principalmente de un menú dividido en ocho (8) secciones que le permite gestionar la información contenida en la base de datos del sistema, y de una ficha con sus datos más básicos. Figura 4.59 - Prototipo en papel y digital de la interfaz para gestionar otras tablas. Capítulo 4 – Marco aplicativo 90 Las secciones del menú son:  Usuarios.  Asignación de roles.  Instituciones.  Línea de investigación.  Productos de investigación.  Proyectos de investigación.  Eventos.  Otras tablas. En la Figura 4.61 se puede observar la lista de los usuarios que puede gestionar el administrador, la cual se encuentra organizada en una tabla que contiene los detalles más importantes de cada usuario y tres (3) o cuatro (4) posibles acciones a realizar sobre cada registro: ver, editar, eliminar y acceder a la cuenta del investigador. La acción de acceder a la cuenta del investigador sólo aparecerá en los usuarios que estén validados y posean el rol de investigador. El administrador tiene la posibilidad de organizar la lista de usuarios a su gusto, ya sea por ID, por documento de identidad o cualquier otro atributo, así como también puede realizar búsquedas en dicha lista filtrando por alguna palabra que proporcione. Es importante resaltar que aquellos usuarios que tenga el campo “Validado” como “NO”, no podrán acceder al sistema hasta que el administrador revise su información y cambie dicho campo a “SI”. Figura 4.60 - Interfaz de inicio de un administrador. Capítulo 4 – Marco aplicativo 91 En la Figura 4.62 se puede observar la interfaz que contiene la lista de los roles que han sido asignados para cada usuario que puede gestionar el administrador. Cada registro puede ser visualizado en detalle o modificado. Figura 4.61 - Interfaz con lista de usuarios que puede gestionar el administrador. Figura 4.62 - Interfaz con la lista de roles asignados a cada usuario. Capítulo 4 – Marco aplicativo 92 En la Figura 4.63 se puede observar la interfaz que contiene la lista de las instituciones registradas en la aplicación, que al igual que las líneas de investigación, tienen que estar en constante revisión, ya que los investigadores pueden realizar solicitudes de nuevas instituciones que deben ser validadas por el administrador. Por último, en la Figura 4.64 se puede observar la interfaz que contiene en orden alfabético una lista de enlaces a todas las demás tablas del sistema que el administrador puede gestionar. La mayoría de las tablas restantes del sistema son tablas bases o tipo como país, estado, municipio, etc., aunque también se incluyen las tablas que contienen la información de los investigadores, como cursos, reconocimientos, etc. El administrador tiene la posibilidad de agregar, modificar o eliminar información (estudios, cursos, productos, etc.) de un investigador desde estas interfaces o accediendo directamente a la cuenta del investigador, como se explicó anteriormente. Figura 4.63 - Interfaz con la lista de instituciones registradas en la aplicación. Capítulo 4 – Marco aplicativo 93  Extracción, transformación y carga de datos Culminadas las interfaces del administrador, se procedió a realizar la migración de la información recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación a la base de datos del sistema, realizando un proceso extracción, transformación y carga con la herramienta Spoon de Pentaho Data Integration. En la Figura 4.65 se muestra parte de la información básica de los investigadores recabada en hojas de cálculo (MS Excel) por la Coordinación de Investigación, la cual pasaría por un proceso de transformación para cargarla en las tablas “Usuario”, “Usuario_Experiencia_Laboral” y “Usuario_Rol” de la base de datos del sistema. Figura 4.64 - Interfaz para gestionar otras tablas. Capítulo 4 – Marco aplicativo 94 Para iniciar la migración se realizó un proceso de calidad de datos, donde se identificó:  Datos faltantes o innecesarios.  Datos almacenados en un formato no estandarizado.  Datos que aportaran información conflictiva.  Datos incorrectos o caducados.  Datos o atributos repetidos.  Resultados, valores o cálculos fuera del rango. Una vez realizada la calidad de datos, se extrajo la información contenida en las hojas de cálculo (MS Excel) con la herramienta Spoon. Seguidamente se procedió a realizar la primera transformación necesaria, la cual consistió en separar el nombre del investigador en cuatro campos: primer nombre, segundo nombre, primer apellido y segundo apellido, para que se ajustara a los campos de la tabla destino. Posteriormente se realizó una segunda transformación, que consistió en crear el correo institucional de cada investigador, ya que las hojas de cálculo (MS Excel) no contenían el correo de ningún usuario y dicho campo en la tabla “Usuario” es obligatorio. Por otra parte, es necesario tener registrado el correo de cada investigador para que éste pueda acceder al sistema. Para crear el correo Ciencias se concatenó el primer nombre, un punto y el primer apellido del investigador más el sufijo @ciens.ucv.ve, ya que es el formato común de los correos creados en la Facultad de Ciencias, aunque en algunos casos dicho formato no se Figura 4.65 - Información básica de los investigadores en hojas de cálculo (MS Excel). Capítulo 4 – Marco aplicativo 95 cumple. A futuro será necesario que un administrador se encargue de revisar los correos creados o que vuelva a solicitar la información de los investigadores a la Coordinación de Investigación pero esta vez actualizada. Una vez realizadas todas las transformaciones, se cargaron los datos en la tabla destino “Usuario”. Los datos cargados fueron: primer nombre, segundo nombre, primer apellido, segundo apellido, tipo de documento de identidad, documento de identidad, genero, estado civil, fecha de nacimiento, Dependencia (Escuela/Instituto) a la que pertenece, correo Ciencias y estado en la Facultad (Activo o Jubilado). En la Figura 4.66 se puede ver la extracción, transformación y carga realizada. Ya cargados todos los usuarios en el sistema como se puede ver en la Figura 4.67, se procedió a asignarles el correspondiente cargo, escalafón y dedicación que tienen la Facultad de Ciencias en la tabla “Usuario_Experiencia” (ver Figura 4.68). Por último, se procedió a asignarles a todos el rol de investigador en la tabla “Usuario_Rol”, como se puede ver en la Figura 4.69. Figura 4.66 - Extracción, Transformación y Carga de la información básica de los investigadores realizada en Spoon. Capítulo 4 – Marco aplicativo 96 Figura 4.67 - Investigadores cargados en la base de datos. Figura 4.68 - Asignación de cargo, escalafón y dedicación a los investigadores realizada con Spoon. Figura 4.69 - Asignación de roles a los investigadores realizada con Spoon. Capítulo 4 – Marco aplicativo 97  Manual de usuario Terminadas las transformaciones, se elaboró el manual de usuario que sería visible para visitantes e investigadores. El manual se puede visualizar en el Anexo 1 de este documento. 4.4.2.2. Lista de comprobación Para verificar el cumplimiento de cada principio de Nielsen en las nuevas interfaces creadas, se describieron algunos ejemplos que muestran cómo se incorporaron.  Visibilidad del estado del sistema: cuando un administrador realiza alguna acción como agregar, modificar o eliminar, el sistema le informa mediante un mensaje satisfactorio que su acción fue realizada. La Figura 4.70 muestra el mensaje mencionado.  Relación entre el sistema y el mundo real: cuando ocurre algún tipo de error en el sistema se muestra un mensaje informativo al administrador con palabras familiares. En la Figura 4.71 se puede observar un ejemplo de un mensaje de error.  Control y libertad del usuario: el administrador podría presionar por error el botón de acceder a la cuenta de un investigador, pero el sistema le da el control de poder cancelar dicha solicitud y quedarse en su cuenta, tal y como se puede ver en la Figura 4.72. Figura 4.72 - Confirmación antes de eliminar un registro. Figura 4.71 - Mensaje de error con palabras familiares. Figura 4.70 - Mensaje satisfactorio al actualizar una información. Capítulo 4 – Marco aplicativo 98  Consistencia y estándares: en todas las interfaces del administrador donde aparecen listas de registros, se utilizaron las mismas metáforas para las acciones: ver, editar, y eliminar. En la Figura 4.73 se pueden ver las metáforas utilizadas en las listas.  Prevención de errores: se limitó la cantidad de caracteres permitidos en los campos de los formularios de la aplicación, para evitar que sobrepasaran el tamaño asignado al correspondiente atributo en la base de datos. En la Figura 4.74 se puede ver que el campo “Código” de un área de conocimiento permite cinco (5) caracteres.  Reconocimiento antes que recuerdo: en los formularios se hizo uso de listas desplegables que no sólo previenen errores de escritura, también permiten al administrador reconocer las opciones disponibles en lugar de verse obligado a recordarlas todas. Por ejemplo, en la Figura 4.75 se muestran todas las Facultades de la Universidad Central de Venezuela. X Flexibilidad y eficiencia de uso: en este prototipo no se incluye ningún tipo de acelerador para usuarios expertos. Figura 4.75 - Lista desplegable de dependencias. Figura 4.73 - Metáforas para las acciones: ver, editar y eliminar. Figura 4.74 - Ejemplo de un campo con limitación de caracteres. Capítulo 4 – Marco aplicativo 99  Estética y diseño minimalista: los colores utilizados en las interfaces fue limitado para alcanzar el balance entre lo estético y lo minimalista.  Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores: en los formularios se hizo uso de advertencias tras un error por parte del usuario. Por ejemplo, si el administrador olvida seleccionar el tipo de institución de una institución que está agregando y presiona el botón guardar, la aplicación detiene la acción y envía una advertencia, tal como se puede ver en la Figura 4.76. X Ayuda y documentación: el administrador no dispone de un manual de administración. 4.4.2.3. Pensamiento en voz alta Una vez terminadas las interfaces destinadas a los usuarios con perfil de administrador (de dependencia o global), se realizó una reunión con el cliente y las tutoras académicas (usuarios), los cuales manifestaron su conformidad con el prototipo presentado. Además, concluyeron que ya estaba listo para pasar por una prueba de aceptación. 4.4.3. Etapa de entrega En esta etapa se llegó a una versión del sistema desarrollado que se consideró listo para pasar por pruebas de funcionalidad y de aceptación. Así, se aplicó primeramente una prueba de funcionalidad y luego una de aceptación para certificar que la aplicación cumpliera con los requisitos de usabilidad exigidos por los usuarios. 4.4.3.1. Prueba de funcionalidad Se realizó un chequeo completo de cada una de las funcionalidades disponibles en la aplicación, revisando en detalle:  El correcto funcionamiento de cada enlace disponible en la aplicación.  La sintaxis y la longitud de cada campo de los formularios.  La validación de campos obligatorios en los formularios.  El correcto funcionamiento de las acciones agregar, visualizar, editar y eliminar una información. Figura 4.76 - Advertencia al no seleccionar un tipo de institución. Capítulo 4 – Marco aplicativo 100  La visualización de mensajes de retroalimentación tras realizar una acción.  La descarga correcta de un documento.  La adecuada visualización del manual de usuario.  La correcta adaptación de las interfaces en distintos dispositivos, haciendo uso del simulador de dispositivos incorporado en el navegador Chrome. Como es normal, se encontraron algunos errores en la aplicación, como por ejemplo la inadecuada longitud de algunos campos, los cuales fueron solucionados. 4.4.3.2. Prueba de aceptación Para la prueba de aceptación se creó un ambiente, en el Centro de Investigación de Sistemas de Información de la Facultad de Ciencias, con las mismas condiciones en que se encontraría la aplicación si estuviera en las instalaciones del usuario. Una vez logrado esto, se le pidió a cada usuario que primeramente utilizara la aplicación de manera espontánea y luego que realizara una serie de actividades específicas, ya que al finalizar la prueba se le aplicaría un cuestionario con preguntas relacionadas a las actividades realizadas y otros aspectos de usabilidad con el fin de conocer su nivel de aceptación hacia la aplicación. La prueba fue realizada a una muestra de quince (15) personas (profesionales del área de computación pertenecientes a la Facultad de Ciencias), la cual se dividió en diez (10) personas que probaron la aplicación como investigadores y cinco (5) como administradores de dependencia o global según su libre elección. Entre El cuestionario se dividió en seis (6) secciones y cada sección con varias preguntas cerradas obligatorias y una pregunta abierta opcional:  Interfaz (8 preguntas cerradas y 1 pregunta abierta)  Navegación (2 preguntas cerradas y 1 pregunta abierta)  Inicio de sesión y registro (2 preguntas cerradas y 1 pregunta abierta)  Logotipo (1 pregunta cerrada y 1 pregunta abierta)  Funcionalidades específicas (3 preguntas cerradas y 1 pregunta abierta)  General (1 pregunta cerrada y 1 pregunta abierta) El cuestionario se puede visualizar en el Anexo 2 de este documento. A continuación se presentan los resultados obtenidos a partir de la realización de esta prueba. Capítulo 4 – Marco aplicativo 101  Interfaz Para la sección “Interfaz” se obtuvieron los resultados mostrados en la Figura 4.77, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar mayores cambios en el diseño de las interfaces.  Navegación Para la sección “Navegación” se obtuvieron los resultados mostrados en la Figura 4.78, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Sin embargo, para algunas personas no fue predecible la respuesta del sistema antes de hacer click sobre un enlace, así que será necesario evaluar este punto. Figura 4.77 - Resultados de las preguntas de la sección de Interfaz. Capítulo 4 – Marco aplicativo 102  Inicio de sesión y registro Para la sección “Inicio de sesión” se obtuvieron los resultados mostrados en la Figura 4.79, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar ningún cambio en este punto. Figura 4.78 - Resultados de las preguntas de la sección de Navegación. Figura 4.79 - Resultados de las preguntas de la sección de Inicio de sesión y registro. Capítulo 4 – Marco aplicativo 103  Logotipo Para la sección “Logotipo” se obtuvieron los resultados mostrados en la Figura 4.80, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con la pregunta que se les hizo. Estas respuestas permiten concluir que no es necesario realizar cambios en logotipo, sin embargo podría actualizarse su diseño en un futuro.  Funcionalidades específicas (investigador) Para la sección “Funcionalidades específicas (investigador)” se obtuvieron los resultados mostrados en la Figura 4.81, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar mayores cambios en este punto, sino aquellos mencionados con voz durante la prueba y los mencionados en las observaciones, como por ejemplo, colocar el asterisco que indica que un campo es obligatorio más grande y colocar el nombre del archivo cargado en un formulario al lado de su respetivo botón de carga. Figura 4.80 - Resultados de las preguntas de la sección de Logotipo. Capítulo 4 – Marco aplicativo 104  Funcionalidades específicas (administrador) Para la sección “Funcionalidades específicas (administrador)” se obtuvieron los resultados mostrados en la Figura 4.82, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con las preguntas que se les hicieron. Estas respuestas permiten concluir que no es necesario realizar ningún cambio. Figura 4.81 - Resultados de las preguntas de la sección de Funcionalidades específicas (investigador). Figura 4.82 - Resultados de las preguntas de la sección de Funcionalidades específicas (administrador). Capítulo 4 – Marco aplicativo 105  General Para la sección “General se obtuvieron los resultados mostrados en la Figura 4.83, donde la mayoría de las personas estuvieron “Completamente de acuerdo” o “De acuerdo” con la pregunta que se les hizo. Estas respuestas permiten concluir que el objetivo de este Trabajo Especial de Grado se cumplió satisfactoriamente. Partiendo de los resultados obtenidos y reflejados en los gráficos anteriores, se puede hacer un promedio de aceptación con base en las respuestas que califican de manera positiva y las que califican de manera negativa a la aplicación. Al hacer este cálculo es posible evidenciar que un porcentaje superior a la mitad de los usuarios tuvo opiniones positivas (“Completamente de acuerdo” o “De acuerdo”) acerca de aspectos de usabilidad de la aplicación. 4.4.3.3. Cierre de la iteración Terminadas las pruebas de funcionalidad y de aceptación y el análisis de ésta última, se realizaron los cambios necesarios en la aplicación, como por ejemplo, colocar el asterisco que indica que un campo es obligatorio más grande, colocar el nombre del archivo cargado en un formulario al lado de su respetivo botón de carga, eliminar un enlace que no era funcional en la interfaz principal, eliminar la redimensión de los campos tipo textarea de los formularios, entre otros pequeños pero importantes detalles que mejoran la funcionalidad y usabilidad del sistema. Por último, se determinó que la aplicación cumplió con los requisitos de usabilidad exigidos, sin embargo, se acordó con el cliente y las tutoras académicas, mantener dicha aplicación en un ambiente de certificación hasta que se realicen más pruebas con profesionales de otras áreas y se dispongan de los equipos necesarios para poder pasarla a producción. Figura 4.83 - Resultados de las preguntas de la sección General. Conclusiones 106 CONCLUSIONES El objetivo de este Trabajo Especial de Grado se cumplió satisfactoriamente, ya que se logró desarrollar una aplicación web usable que permite registrar y gestionar la información (general, académica, laboral, productos de investigación, etc.) de los investigadores de la Facultad de Ciencias de la Universidad Central de Venezuela. El uso parcial de la metodología de desarrollo AgilUs permitió desarrollar en un semestre un producto de software de calidad, adaptado a las necesidades de los usuarios y capaz de brindarles una experiencia agradable y satisfactoria. De igual manera, el marco de trabajo Rails contribuyó considerablemente en el desarrollo ágil de la aplicación, ya que su estructura, simplicidad y las facilidades que ofrece en general, permitieron reducir la complejidad de la codificación y facilitar la reutilización de código, lo cual se tradujo en la entrega más rápida de resultados concretos. Asimismo, el uso de las tecnologías HTML5, CCS3, jQuery, Ajax, Bootstrap y Pentaho Data Integration, facilitó en gran medida el desarrollo de la solución planteada en este trabajo. Por medio de la realización de la prueba de funcionalidad se pudieron encontrar y arreglar errores en la aplicación y gracias a la prueba de aceptación se pudo obtener la opinión de los usuarios en lo que respecta a la usabilidad del sistema y el apoyo que éste brinda al proceso de gestión de información de los investigadores de la Facultad de Ciencias. En general se puede concluir que con esta entrega se otorgan una serie de beneficios a la Coordinación de Investigación y a la Facultad de Ciencias de la UCV, entre los que destacan:  Facilitar el registro y la gestión de la información de los investigadores de la Facultad de Ciencias, de manera rápida, fácil y sencilla.  Tener la información de los investigadores de la Facultad de Ciencias en una base de datos centralizada y estandarizada.  Utilizar a futuro la información de los investigadores para realizar análisis de datos y toma de decisiones por parte de la Coordinación de Investigación.  Permitir el pleno funcionamiento de la aplicación web GENCI-2, ya que ésta se integrará más adelante con la base de datos de los investigadores. Recomendaciones y trabajos futuros 107 RECOMENDACIONES Y TRABAJOS FUTUROS Se recomienda utilizar la aplicación en ambiente de certificación por el tiempo necesario que duren las pruebas con usuarios de otras áreas, con la finalidad de conocer la capacidad y el alcance que ésta pueda tener, para posteriormente realizar un análisis de posibles mejoras y llevarlo a producción. Para desarrollos futuros se recomienda:  Agregar aspectos de accesibilidad a la aplicación, como por ejemplo, cambio de colores, cambio de idioma y cambio del tamaño de la fuente.  Agregar buscadores avanzados en la interfaz principal de la aplicación web, que permitan a usuarios visitantes o investgadores realizar búsquedas detalladas de investigadores, productos o proyectos de investigación.  Crear una funcionalidad que permita extraer la información del investigador y exportarla en forma de Curriculum Vitae.  Crear un módulo de análisis de la información de los investigadores para realizar toma de decisiones.  Extender GENCI-2 para que use la información que almacena esta aplicación. Referencias bibliográficas y digitales 108 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES Acosta A. (2011). AgilUs: un método ágil de desarrollo de software que incorpora la usabilidad. Centro de Ingeniería de Software y Sistemas, Facultad de Ciencias, Universidad Central de Venezuela, Caracas, Venezuela. Adobe Dreamweaver. (2015). Aspectos básicos de las aplicaciones Web. Recuperado en junio de 2015, de: https://helpx.adobe.com/es/dreamweaver/using/web-applications.html Beck K. et al. (2001). Manifiesto por el Desarrollo Ágil de Software. Recuperado en junio 2015, de: http://www.agilemanifesto.org/iso/es/ Borges C. y Rivero A. (2006). Generador de Sitios Web de Centros de Investigación. Centro de Ingeniería de Software y Sistemas, Facultad de Ciencias, Universidad Central de Venezuela, Caracas, Venezuela. Recuperado en julio 2015, de: http://www.coordinv.ciens.ucv.ve/investigacion/genci/index.php Cáceres P. et al. (2001). Procesos ágiles para el desarrollo de aplicaciones web. Departamento de Ciencias Experimentales e Ingeniería, Universidad Rey Juan Carlos, Madrid, España. Recuperado en junio 2015, de: http://www.dlsi.ua.es/~jaime/webe/articulos/s112.pdf Calzada R. (2001). Introducción al Servicio de Directorio. Universidad Carlos III de Madrid, España. Recuperado en mayo 2016, de: http://www.rediris.es/ldap/doc/ldap- intro.pdf Canós J., Letelier P. y Penadés M. (2003). Metodologías Ágiles en el Desarrollo de Software. Universidad Politécnica de Valencia, España. Recuperado en junio 2015, de: http://www.carlosfau.com.ar/nqi/nqifiles/XP_Agil.pdf Consejo Directivo del Observatorio Nacional de Ciencia, Tecnología e Innovación (ONCTI). (2015). Reglamento del Programa de Estímulo a la Innovación e Investigación (PEII). Caracas, Venezuela. Recuperado en julio 2015, de: http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download =119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion- peii&id=11:documentos&Itemid=92 Coordinación de Investigación. (2011). ¿Quiénes Somos?. Caracas, Venezuela: Facultad de Ciencias de la Universidad Central de Venezuela. Recuperado en julio 2015, de http://www.coordinv.ciens.ucv.ve/investigacion/quienes.php https://helpx.adobe.com/es/dreamweaver/using/web-applications.html http://www.agilemanifesto.org/iso/es/ http://www.coordinv.ciens.ucv.ve/investigacion/genci/index.php http://www.dlsi.ua.es/~jaime/webe/articulos/s112.pdf http://www.rediris.es/ldap/doc/ldap-intro.pdf http://www.rediris.es/ldap/doc/ldap-intro.pdf http://www.carlosfau.com.ar/nqi/nqifiles/XP_Agil.pdf http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.oncti.gob.ve/index.php?option=com_phocadownload&view=category&download=119:reglamento-del-programa-de-estimulo-a-la-innovacion-e-investigacion-peii&id=11:documentos&Itemid=92 http://www.coordinv.ciens.ucv.ve/investigacion/quienes.php Referencias bibliográficas y digitales 109 De Luca D. (2010). ¿Qué es CSS3? [Mensaje en un blog]. Recuperado en julio 2015, de: http://html5.dwebapps.com/que-es-css3/ Directorio Nacional de Investigadores e Innovadores (DINA). (2015). ¿Quiénes somos?. Lima, Perú. Recuperado en diciembre 2015, de http://dina.concytec.gob.pe/ EcuRed. (2012). Lenguaje de Marcado de Hipertexto. Cuba. Recuperado en julio 2015, de: http://www.ecured.cu/index.php/Lenguaje_de_Marcado_de_Hipertexto EcuRed. (2012). Directorio Activo. Recuperado en mayo 2016, de: http://www.ecured.cu/Directorio_Activo España M. (2003). Servicios Avanzados de telecomunicación. Madrid, España: Editorial Díaz de Santos S.A. Graterol L., Magrí S y Marín S. (2014). PHP, Python o Ruby ¿Qué son y para qué sirve cada uno? [Mensaje en un blog]. Recuperado en julio 2015, de: http://blog.escuelaweb.net/php-python-o-ruby-para-que-sirve-cada-uno/ Laudon K. y Laudon J. (2004). Sistemas de Información Gerencial. México: Editorial Pearson Educación. Ministerio del Poder Popular para Ciencia, Tecnología e Innovación (MCTI). (21 de marzo de 2011). Gobierno Revolucionario fortalecerá las actividades científico tecnológicas del país. Caracas, Venezuela. Recuperado en julio 2015 de: http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las- actividades-cientifico-tecnologicas-del Nielsen J. (1995). 10 Usability Heuristics for User Interface Design. Recuperado en mayo 2016, de: http://www.useit.com/papers/heuristic/heuristic_list.html Olivares C. (2012). GENCI–2 Gestor de Contenido Modular Para la Coordinación de Investigación De la Facultad de Ciencias de la UCV (tesis de pregrado). Escuela de Computación, Facultad de Ciencias de la Universidad Central de Venezuela, Caracas, Venezuela. Pentaho. (2012). PENTAHO. Recuperado en mayo de 2016, de http://www.pentaho.com/ Piattini M. (1996). Análisis y Diseño Detallado de Aplicaciones Informáticas de Gestión. Madrid, España: Editorial Ra-Ma. Rails Guides. (2015). Ruby on Rails Guides (v4.2.4). Recuperado en julio 2015, de: http://guides.rubyonrails.org/ http://html5.dwebapps.com/que-es-css3/ http://dina.concytec.gob.pe/ http://www.ecured.cu/index.php/Lenguaje_de_Marcado_de_Hipertexto http://www.ecured.cu/Directorio_Activo http://blog.escuelaweb.net/php-python-o-ruby-para-que-sirve-cada-uno/ http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las-actividades-cientifico-tecnologicas-del http://www.mcti.gob.ve/actualidad/noticias/gobierno-revolucionario-fortalecera-las-actividades-cientifico-tecnologicas-del http://www.useit.com/papers/heuristic/heuristic_list.html http://www.pentaho.com/ http://guides.rubyonrails.org/ Referencias bibliográficas y digitales 110 Rivera J. (2012). Pentaho Data Integration (Kettle). Recuperado en mayo 2016, de: http://www.docfoc.com/pentaho-data-integration-56338932d4bf0 Ruby Lang Org. (2015). Acerca de Ruby. Recuperado en julio 2015, de: https://www.ruby-lang.org/es/ Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO). (2011). Instrucciones. Venezuela. Recuperado en julio 2015, de: http://www.saiudo.ci- udo.com.ve/ Sistema de Acreditación de los Investigadores de la Universidad de Oriente (SAI-UDO). (2011). PAIC-UDO. Venezuela. Recuperado en julio 2015, de: http://www.saiudo.ci- udo.com.ve/ Silberschatz A., Korth H. y Sudarshan S. (2002). Fundamentos de Bases de Datos. (4ta ed.). Madrid, España: Mc Graw Hill. Solis J. (2014). ¿Qué es bootstrap y cómo funciona en el diseño web?. Recuperado en mayo 2016, de: http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y- como-funciona-en-el-diseno-web.htm The PostgreSQL Global Development Group. (1996-2015). PostgreSQL. Recuperado en julio 2015, de: http://www.postgresql.org/about/ W3Schools. (2015). AJAX Introduction. Recuperado en julio 2015, de: http://www.w3schools.com/Ajax/ajax_intro.asp 2ndQuadrant Ltd (2001-2015). 2ndQuadrant Professional PostgreSQL. Recuperado en julio 2015, de: http://2ndquadrant.com/es/postgresql/ http://www.docfoc.com/pentaho-data-integration-56338932d4bf0 https://www.ruby-lang.org/es/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.saiudo.ci-udo.com.ve/ http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y-como-funciona-en-el-diseno-web.htm http://www.arweb.com/chucherias/editorial/%C2%BFque-es-bootstrap-y-como-funciona-en-el-diseno-web.htm http://www.postgresql.org/about/ http://www.w3schools.com/Ajax/ajax_intro.asp http://2ndquadrant.com/es/postgresql/ Anexos 111 ANEXOS Anexos 112 ANEXO 1 – Manual de usuario de la aplicación Anexos 113 Anexos 114 Anexos 115 Anexos 116 Anexos 117 Anexos 118 Anexos 119 Anexos 120 Anexos 121 Anexos 122 Anexos 123 Anexos 124 Anexos 125 Anexos 126 Anexos 127 Anexos 128 Anexos 129 Anexos 130 Anexos 131 Anexos 132 Anexos 133 Anexos 134 Anexos 135 Anexos 136 Anexos 137 Anexos 138 Anexos 139 Anexos 140 ANEXO 2 – Cuestionario aplicado en la prueba de aceptación de la aplicación Anexos 141 Anexos 142