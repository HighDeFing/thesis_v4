UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN Desarrollo de un Módulo de Sugerencias de Adquisición y Recomendación de Libros para la Aplicación Web de Gestión de la Bolsa del Libro de la Facultad de Ciencias de la UCV Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por el Br. Edgar O. Vera F. para optar al t́ıtulo de Licenciado en computación. Tutor: Jaime Parada. Caracas, Noviembre 2014 ii Quienes suscriben, miembros del jurado designado por el Consejo de la Escuela de Compu- tación de la Facultad de Ciencias de la Universidad Central de Venezuela, para examinar el Trabajo Especial de Grado titulado: Desarrollo de un Módulo de Sugerencias de Adquisición y Recomendación de Libros para la Aplicación Web de Gestión de la Bolsa del Libro de la Facultad de Ciencias de la UCV, presentado por el bachiller Edgar O. Vera F., C.I.: 17.115.763, a los fines de cumplir con el requisito legal para optar por el t́ıtulo de Licenciado en Computación, dejan constancia de lo siguiente: Léıdo el trabajo por cada uno de los miembros del jurado, se fijó el d́ıa Viernes 21 de Noviembre del 2014, a las 5:00 PM, para que su autor lo defendiera en forma pública, en la Sala 1 de la Escuela de Computación mediante una exposición oral de su contenido. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobarlo con la nota de puntos. En fe de lo cual se levanta la presente Acta, en Caracas a los ventiún (21) d́ıas del mes de Noviembre del año dos mil catorce (2014). Jaime Parada Tutor Prof. Marrero Carmen Jurado Principal Profa. Castillo Zenaida Jurado Principal iii RESUMEN La Bolsa del Libro, es una dependencia adscrita a la Biblioteca Alonso Gamero, ubicada en la Facultad de Ciencias de la Universidad Central de Venezuela. Actualmente, lleva a cabo sus procesos de alquiler de libros, donaciones, registros de ejemplares, solicitud de solvencias y otros, a través de una aplicación Web que tiene dos años en producción. En este Trabajo Especial de Grado se desarrollan modificaciones, actualizaciones y adi- ciciones de módulos al sistema Web de la Bolsa del Libro, solucionando las fallas detectadas previamente por los usuarios. Para ello, se automatizaron nuevos procesos en el módulo de estudiantes y el de administración. Adicionalmente, se implementó un módulo de profesores que permite almacenar sugerencias de libros que podŕıan ser adquiridos por la Bolsa del Libro. Para llevar a cabo estos objetivos, se propone una adaptación del método ágil XP (Pro- gramación Extrema), el cual se caracteriza por su simplicidad y retroalimentación. Palabras claves: Bolsa del Libro, Aplicación Web. Índice general Introducción 1 1. Planteamiento del Problema 4 1.1. Descripción del Problema . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.2. Objetivo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.3. Justificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.4. Alcance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2. Marco Conceptual 8 2.1. Antecedentes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2.2. Módulo de Administradores . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.3. Módulo de Estudiantes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 iv ÍNDICE GENERAL v 2.4. Alquileres (Nivel Funcional - Modulo de Estudiantes) . . . . . . . . . . . . . 26 2.5. Alquileres (Nivel Funcional - Modulo del Administrador) . . . . . . . . . . . 33 3. Marco Tecnológico 38 3.1. Ruby . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.2. Ruby on Rails (RoR) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.3. MySQL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 3.4. Git . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 3.5. JasperReports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 3.6. Jquery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.7. Programación Extrema (XP) . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 3.8. Adaptación XP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 3.8.1. Iteraciones . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3.8.2. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3.8.3. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 3.8.4. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 3.8.5. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 ÍNDICE GENERAL vi 4. Marco Aplicativo 55 4.1. Iteracion 1: Carga de usuarios a la BD y cálculo de estad́ısticas . . . . . . . . 56 4.1.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 4.1.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 4.1.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4.1.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 4.2. Iteracion 2: Liberación de libros pre-alquilados y búsqueda de alquileres . . . 63 4.2.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 4.2.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 4.2.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 4.2.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 4.3. Iteracion 3: Reportes y cambios varios. . . . . . . . . . . . . . . . . . . . . . 69 4.3.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 4.3.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 4.3.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 4.3.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 4.4. Iteracion 4: Historial y cambio de ejemplares. . . . . . . . . . . . . . . . . . 75 ÍNDICE GENERAL vii 4.4.1. Planificacion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 4.4.2. Diseño: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 4.4.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 4.4.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 4.5. Iteración 5: Roles y Solvencias. . . . . . . . . . . . . . . . . . . . . . . . . . 84 4.5.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 4.5.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 4.5.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 4.5.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 4.6. Iteracion 6: Creación del módulo de profesores. . . . . . . . . . . . . . . . . . 91 4.6.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 4.6.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 4.6.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 4.6.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 4.7. Iteracion 7: Materias en la Bolsa del Libro. . . . . . . . . . . . . . . . . . . . 98 4.7.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 4.7.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 ÍNDICE GENERAL viii 4.7.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 4.7.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105 4.8. Iteracion 8: Comentarios por sugerencia. . . . . . . . . . . . . . . . . . . . . 106 4.8.1. Planificacion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106 4.8.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107 4.8.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 4.8.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109 4.9. Iteracion 9: Profesores invitados y difundir libros sugeridos. . . . . . . . . . . 110 4.9.1. Planificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110 4.9.2. Diseño . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 4.9.3. Codificación . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112 4.9.4. Pruebas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 Conclusiones 115 Recomendaciones 118 Apéndice 122 Introducción La Bolsa del Libro de la Facultad de Ciencias, ha desarrollado una aplicación Web que es empleada para la gestión de procesos. Esta aplicación posee un módulo de estudiantes que les permite realizar el pre-alquiler de libros, solicitar solvencias, entre otras funcionalidades. Aśı mismo, existe un módulo de administración en el cual los encargados de la Bolsa pueden procesar automáticamente el alquiler asignando uno o varios ejemplares a los estudiantes, obtener un registro de los libros entregados, facilitar información de los libros que han sido devueltos, permitir el ingreso de nuevos ejemplares, donaciones, configuraciones, auditoŕıas, aśı como obtener los reportes de alquileres, deudores y libros más solicitados, además de almacenar los usuarios que pueden acceder al sistema. En el tiempo que lleva prestando servicios la aplicación de la Bolsa del Libro, sus usuarios han detectado fallas y la necesidad de implementar nuevos procesos que no hab́ıan sido con- templados. Por esta razón, se realiza este Trabajo Especial de Grado que tiene como objetivo principal actualizar el sistema de la Bolsa del Libro dando solución a problemas detectados, desarrollando nuevos procesos en los módulos de estudiantes, modificando las estad́ısticas del sistema en el módulo de administración, integrando nuevas reglas del negocio. De igual manera, se hacen mejoras en términos de eficiencia a los procesos de alguiler, reporte, es- 1 ÍNDICE GENERAL 2 tablecimiento de jerarqúıas y provilegios, y ajustes de diseño. También se implementa un módulo de sugerencias, el cual le permitirá a los profesores proponer libros que puedan ser adquiridos por la Bolsa del Libro. Estructura del Documento A continuación se describe la estructura del documento: Primera Parte: Planteamiento del Problema Se plantea el problema con base en la investigación realizada y se define el objetivo, los objetivos espećıficos del trabajo a realizar y la justificación. Segunda Parte: Marco Conceptual Se describen los aspectos referentes a la Bolsa del Libro de la Facultad de Ciencias de la Universidad Central de Venezuela, desde su perfil, los servicios ofrecidos, los procesos que intervienen para llevar a cabo las tareas cotidianas. Además, se describe de forma más detallada desde la perspectiva de los estudiantes y los administradores el proceso de alquilar un libro como función primordial del sistema. Tercera Parte: Marco Tecnológico Se describen las tecnoloǵıas utilizadas, tales como el lenguaje de programación Ruby, Rails como el framework de desarrollo de aplicaciones Web, el sistema manejador de bases de datos MySQL, Git como sistema que utilizaremos para mantener las versiones de la aplicación, la metodoloǵıa de desarrollo de software utilizada conocida como Pro- gramación Extrema (XP) y la herramienta de JasperReport que nos permitirá realizar los reportes del sistema. ÍNDICE GENERAL 3 Cuarta Parte: Marco Aplicativo Se especifica la adaptación de las fases de XP y las actividades realizadas en cada una de las iteraciones que conforman el desarrollo del sistema, junto con las pruebas de aceptación las cuales fueron especificadas por el cliente. Quinta Parte: Conclusiones y Recomendaciones Se especifica los resultados obtenidos, objetivos alcanzados y recomendaciones para futuros trabajos. Caṕıtulo 1 Planteamiento del Problema 1.1. Descripción del Problema El proceso manual que se desarrollaba anteriormente para la adquisición de libros, signifi- caba un gran esfuerzo tanto para los estudiantes como para los administradores. Al sustituir este sistema por una aplicación Web para la gestion de procesos de la Bolsa del Libro [3], se automatizaron todos los procesos facilitando la prestacion de servicios, ahorrando tiempo y esfuerzo. Los usuarios de la aplicación han presentado una serie de requerimientos y necesidades después de haber trabajado con el sistema desde su inicio, detectándose fallas y la ausencia de nuevas funcionalidades que vayan de la mano con el proceso de alquileres, con la solicitud de solvencias, presentación de reportes, almacenamiento de nuevos libros, ejemplares, y mostrar estad́ısticas que permitan el análisis del comportamiento del sistema. Adicionalmente se 4 CAPÍTULO 1. PLANTEAMIENTO DEL PROBLEMA 5 busca una manera de interacción entre los profesores y el sistema de la Bolsa de Libros con la finalidad de obtener sugerencias para adquisición de nuevos libros. 1.2. Objetivo Objetivo General Actualizar la aplicación de gestión de la Bolsa del Libro e implementar el módulo que permita a los profesores realizar sugerencias. Objetivos Espećıficos Analizar los procesos de la Bolsa del Libro que han presentado fallas. Implementar nuevas reglas de negocio en el módulo de administración. Desarrollar nuevas funcionalidades en la administración de alquileres, ejemplares, re- portes y estad́ısticas. Diseñar e implementar un estructura de control de acceso basado en roles en el módulo de administración. Diseñar e implementar un módulo de sugerencias que cubra las necesidades de los profesores al momento de proponer a la Bolsa del Libro un libro para que sea adquirido. Implementar una funcionalidad que permita calificar una sugerencia. CAPÍTULO 1. PLANTEAMIENTO DEL PROBLEMA 6 1.3. Justificación Hasta el momento se ha observado que es necesario implementar nuevas funcionalidades que estaban presentes en el proceso manual de la Bolsa del Libro y no se contemplaron en el desarrollo de la aplicación Web para la gestion de procesos, con la finalidad de obtener un sistema más completo, que permita ahorrar tiempo, dedicación y esfuerzo, agilizando todas las tareas administrativas, disminuyendo la carga laboral al personal administrativo, además de facilitar al estudiante el acceso a los servicios ofrecidos por la Bolsa del Libro. Por esta razón es necesario capturar los requerimientos que aparecieron desde que se esta usando la aplicacion Web, para posteriormente diseñar un módulo que permita realizar sugerencias para la adquisición de nuevos libros. 1.4. Alcance Actualizar una Aplicación Web de la Bolsa del Libro de la Facultad de Ciencias de la Universidad Central de Venezuela que facilita la tarea de alquilar libros tanto para los estudiantes como para los administradores es nuestra prioridad, mantener los niveles de funcionamiento y mejorar procesos que se estan utilizando. Esta actualización permitira: Solucionar problemas presentados en el proceso de alquiler durante el tiempo en servicio de la aplicación. Mejorar procesos del módulo de administración referentes al area de alquileres, ejem- plares, estad́ısticas, reportes y otros. CAPÍTULO 1. PLANTEAMIENTO DEL PROBLEMA 7 Implementar soluciones a los nuevos requerimientos presentados por el personal de la Bolsa del Libro. Desarrollar un nuevo módulo que cumpla las necesidades de los profesores con respecto a la Bolsa del Libro. Integrar como prioridad en el módulo de profesores un area de sugerencia de libros para ser adquiridos por por la Bolsa del Libro. Caṕıtulo 2 Marco Conceptual En este caṕıtulo se muestran las bases que fundamentan el desarrollo de este Trabajo Especial de Grado. Se comienza describiendo la funcionalidad de la Bolsa del Libro, deta- llando los procesos que la integran y que fueron automatizados en el sistema que se modifica y actualiza en este trabajo. Se explica detalladamente las operaciones que componen módulo de administración y el de estudiantes, mostrando el proceso de alquiler de libros, mediante diagramas de flujo para identificar todos los pasos y puntos de decisión que se realizan hasta completarse cada operación. 2.1. Antecedentes La Bolsa del Libro es una dependencia adscrita a la Biblioteca Alonso Gamero de la Facultad de Ciencias cuyas actividades están enmarcadas en el alquiler semestral de libros de la Biblioteca. 8 CAPÍTULO 2. MARCO CONCEPTUAL 9 En periodos anteriores han existido diferentes planes y proyectos de automatización re- ferentes a la Bolsa, sin embargo no fue hasta el 2012 que se creó un sistema Web para el control de los procesos de La Bolsa del Libro que actualmente está en producción. En el año 2007 M. Araujo y C. Pereira [1] desarrollaron una aplicación de comercio electrónico utilizando Herramientas de Software Libre, implementando un sistema de infor- mación v́ıa Web y un sitio Web para la Bolsa del Libro de la Facultad de Ciencias, con el objetivo principal de automatizar los procesos de manipulación de información, responder a los requerimientos de administración de la Bolsa del Libro, automatizar el proceso del alquiler y compra de libros permitiendo realizar el pago en ĺınea del servicio a los estudiantes de la Facultad de Ciencias de la Universidad Central de Venezuela. Para el año 2011 A. Jiménez y J. Oviedo [2] diseñaron una aplicación de web para la automatización de los procesos de la Bolsa del Libro la cual constaba con módulos de alquiler, libros, ejemplares, pre-alquiler, solvencias, usuarios, auditorias, configuraciones y listados de inventario. Esta solución no llegó a implementarse. En el año 2012 se desarrolló una nueva aplicación Web que buscaba satisfacer las nece- sidades de la Bolsa del Libro, que no hab́ıan sido solventadas en trabajos anteriores. Para ello se diseñó e implementó una aplicación de gestión de procesos y servicios de la Bolsa del Libro de forma automatizada [3]. El trabajo de investigación anterior a este se tomó en con- sideración para crear un nuevo sistema con una versión de Rails más actualizada, un mejor modelo de base de Datos y el uso de herramientas de generación de reportes más adecuadas. Este sistema esta ctualmente en producción y será el punto de partida para los aportes de este Trabajo Especial de Grado. A continuación se describen los módulos que compoten este sistema. CAPÍTULO 2. MARCO CONCEPTUAL 10 2.2. Módulo de Administradores Los usuarios que tienen acceso a este módulo, son los encargados de ingresar toda la información al sistema, el ingreso de libros y sus ejemplares, configuraciones, solvencias, acceso de usuarios y más. Además, en esta área se culmina el proceso de alquiler que iniciaron los estudiantes, permitiéndoles obtener los libros solicitados y guardar un registro digital de dicha transacción. Durante el curso del semestre en este módulo se tiene acceso a gran cantidad de infor- mación estad́ıstico, que permite tener una idea de que libros son más solicitados, cantidad de usuarios que han realizado alquileres agrupados por escuela, datos que al final ayudarán en la toma de decisiones. Figura 2.1: Panel derecho módulo de Administration El panel derecho (ver Figura 2.1) contiene el menú de la aplicación, el cual se divide en: CAPÍTULO 2. MARCO CONCEPTUAL 11 Inicio: Muestra al usuario la vista principal del administrador. Mantenimiento: Esta sección contiene una lista de opciones, las cuales permiten configurar y mantener actualizado el sistema. Reportes: dentro de esta sección se listan los reportes disponibles de la aplicacion. Usuarios: En esta sección se realizan todas las operaciones referentes a los usuarios del sistema. El panel izquierdo solo se encuentra disponible en la vista principal del administrador. En la Figura 2.2 se refleja el total recaudado durante el periodo actual de alquiler y un listado de los libros más alquilados durante dicho periodo. Figura 2.2: Panel Izquierdo Modulo de Administración CAPÍTULO 2. MARCO CONCEPTUAL 12 En la vista principal del módulo de administración, se pueden observar las estad́ısticas del sistema durante el proceso de alquileres, entre las cuales estan: Libros alquilados por área de conocimiento: En la Figura 2.3 podemos observar la distribución de libros alquilados agrupados por área de conocimiento. Figura 2.3: Libros alquilados por área de conocimiento Ejemplares entregados a cada escuela: En la Figura 2.4 podemos observar la canti- dad de libros entregados, agrupados por la escuela del estudiante que retira el libro. Figura 2.4: Ejemplares entregados a cada escuela Cantidad de usuarios por escuela: En la Figura 2.5 podemos visualizar la cantidad de usuarios que han realizado un alquiler agrupados por escuela. CAPÍTULO 2. MARCO CONCEPTUAL 13 Figura 2.5: Cantidad de usuarios por escuela El sistema posee una serie de parámetros que deben ser establecidos para que la aplicación funcione correctamente, esto se maneja desde el area de configuraciones, en la cual podran acceder a todas las configuraciones que se han establecido en el sistema hasta la fecha. El menú principal de las configuraciones muestra un listado de las configuraciones que se han creado durante el uso de la aplicación, el cual posee las opciones para crear, editar, mostrar y eliminar. Al seleccionar la opcion de crear una nueva configuración, se despliega un formulario con los siguientes campos: Figura 2.6. Figura 2.6: Nueva configuración CAPÍTULO 2. MARCO CONCEPTUAL 14 Peŕıodo: Se debe seleccionar el peŕıodo al cual pertenece la configuracion, disponiendo de dos opciones (1 o 2). Año: Año durante la cual la configuración es válida. Fecha de inicio: Se debe seleccionar la fecha de inicio exacta desde cuando es válida la configuración. Fecha fin: Se debe seleccionar la fecha de culminación exacta hasta cuando es válida la configuración. Máximo número de libros: Indica el número máximo de libros que puede alquilar un estudiante durante el lapso de tiempo definido para la configuración. Tiempo prealquiler: Este campo debe contener el tiempo expresado en horas, du- rante el cual los libros estarán reservados, al momento de realizar un prealquiler. Tipo peŕıodo: Este campo posee dos opciones disponibles, normal y extraordinario, siendo extraordinario los periodos intensivos y normal el resto. Activa: Al marcar este campo se indica que la configuración es la que está activa actualmente. Las fechas no deben estar dentro de un lapso de tiempo que ya posea una configuración, solo debe existir una configuración activa y no se podrán realizar alquileres si no existe una configuración válida para la fecha en la cual se intente realizar el alquiler, estas son algunas de las restricciones para poder crear una configuracion correctamente. En la sección de libros se crean, modifican y eliminan los t́ıtulos disponibles en la Bolsa del Libro. Los libros que sean agregados serán empleados para ingresar posteriormente los CAPÍTULO 2. MARCO CONCEPTUAL 15 ejemplares y estaran asociados. El menú principal cuenta con un listado de los t́ıtulos agregados al sistema, el cual posee las opciones para crear, editar, mostrar y eliminar. Al seleccionar la opcion de crear un libro, se permitira incluir un nuevo t́ıtulo dentro del sistema, por lo que es necesario haber agregado editoriales, áreas de conocimiento y dependencias anteriormente en el sistema. En la Figura 2.7 se muestra un formulario de ejemplo con los siguientes campos: Figura 2.7: Nuevo Libro Buscar por ISBN: Este campo será usado para buscar en “Google Books” los datos del libro a través de su ISBN. CAPÍTULO 2. MARCO CONCEPTUAL 16 T́ıtulo: T́ıtulo del libro que se incluirá. Autor: Autor del libro que se incluirá. Imagen: Agrega una imagen almacenada en el computador, la cual será mostrada en los catálogos de libros. Edición: Numero de la edición que incluirá. Lugar de impresión: Lugar de impresión del libro. Año: Año del libro que será incluido. ISBN: Numero Internacional Normalizado del Libro. Editorial: Seleccione una de las editoriales cargadas en el sistema. Área de conocimiento: Seleccione una de las áreas de conocimiento cargadas en el sistema. A través de este campo se podrán filtrar los catálogos, distribuyendo los libros por su área de conocimiento. Dependencia: Seleccione una de las dependencia cargada en el sistema. Entre las restricciones existentes para crear un libro correctamente estan: La cota y el ISBN deben ser únicos. La cota, t́ıtulo, edición y año son campos obliga- torios. En la sección de ejemplares se crean y modifican los ejemplares disponibles en la Bolsa del Libro, cada uno representa un libro f́ısico dentro de la Bolsa del Libro. CAPÍTULO 2. MARCO CONCEPTUAL 17 El menú principal cuenta con un listado de los ejemplares agregados al sistema, el cual posee las opciones para crear, editar, mostrar y eliminar. Al seleccionar la opción de crear, ésta permite incluir un nuevo ejemplar dentro del sistema. Figura 2.8: Nuevo Ejemplar En la Figura 2.8 se muestra un formulario de ejemplo. Los ejemplares deben estar aso- ciados a t́ıtulos de libros previamente cargados en el sistema y los campos a rellenar son: Libro: Se debe indicar el libro al cual estará asociado el ejemplar. CAPÍTULO 2. MARCO CONCEPTUAL 18 Número de ejemplar: Identificador único para el ejemplar asociado a un libro. Costo de Alquiler: Costo en boĺıvares del alquiler del libro por un semestre. Tipo de adquisición: Forma mediante la cual el ejemplar fue adquirido por la Bolsa del Libro. Fecha de Ingreso: Fecha en la cual ingreso el ejemplar a la Bolsa del Libro. Observación: En caso de existir Nro. de Factura: En caso de existir, se indica el número de factura del ejemplar. Estatus Ejemplar: Se indica el estatus que tendrá el ejemplar. Libreŕıa: Libreŕıa de la cual proviene el ejemplar. En la seccion de solvencias el administrador del sistema podrá emitir las solvencias solici- tadas por los estudiantes, disponiendo para ello de un listado donde se encuentran todas las solicitudes. El listado del cual dispondrá el administrador del sistema se puede observar en la Figura 2.9. Los administradores tiene la opción de marcar una solvencia como entregada, cuando se ha hecho. Figura 2.9: Lista de Solvencias CAPÍTULO 2. MARCO CONCEPTUAL 19 El sistema cuenta con una serie de reportes que permiten ver información relevante de las operaciones hechas en el sistema. Los reportes con los que cuenta el sistema son los siguientes: Alquileres por escuela: Muestra el número de total alquileres por escuela. Ejemplares alquilados: emite un listado de todos los ejemplares que se encuentran alquilados agrupados por escuela. Libros adquiridos: muestra los libros adquiridos en un intervalo de tiempo establecido por el usuario. Libros alquilados: muestra el total de libros alquilados, la cantidad y agrupados por escuela. Libros sin alquilar: emite un listado de los libros que no han sido alquilados en un lapso de dos años. Listado de deudores: listado con los deudores de la Bolsa del Libro. Libros disponibles: listado de todos los libros disponibles, agrupados por escuela. Los usuarios existentes pueden ser modificados y eliminados desde el area de usuarios, además de ser creados si es necesario. La opción que permite crear un nuevo usuario a través de un formulario se muestra en la Figura 2.10, los campos son los siguientes: CAPÍTULO 2. MARCO CONCEPTUAL 20 Figura 2.10: Nuevo Usuario Nombre: Se debe indicar el nombre del usuario. Cédula: Identificador único del usuario. Clave: Combinación de caracteres que permite autenticarte en el sistema. Correo: Dirección de correo electrónico del usuario. Unidades de crédito: Número que indica cuantas unidades de creditos ha aprobado el usuario. Rol: Debe indicar funcionalidad que tiene este usuario en el sistema. Puede ser admi- nistrador, estudiante, profesor o inactivo. Dependencia: Se indica la escuela a la cual pertenece el usuario. Las restricciones para crear un usuario correctamente son las sigueintes: Cedula, nombre, clave, correo y rol son campos obligatorios. CAPÍTULO 2. MARCO CONCEPTUAL 21 Cedula y correo deben ser únicos. El usuario no debe tener alquileres o solicitudes cargadas en el sistema. 2.3. Módulo de Estudiantes Los usuarios autenticados en este módulo tendrán la opción de visualizar todos los li- bros disponibles en la bolsa del libro y además podrán pre-alquilarlos, para luego retirarlos f́ısicamente en la Bolsa del Libro. Entre los otros servicios que los estudiantes pueden acceder es al área de solicitud de solvencias, cambio de clave, alquileres realizados y solvencias solicitadas. Todas estas áreas la verán detallas en las siguientes secciones. En la vista principal de este módulo se puede visualizar un catálogo de libros donde se muestran todos los libros disponibles. El catálogo muestra la cantidad existente, titulo, autor, edición, año y costo. Además cuenta con la posibilidad de agrupar por área de conocimiento como se puede ver en la Figura 2.11. Existe la opción de agregar, que permite al estudiante seleccionar un libro y este ser almacenado para ser alquilado. Los libros seleccionados se mostrarán en el panel superior izquierdo de la página. Las restricciones al momento de agregar un libro son: No se pude agregar dos veces el mismo libro. CAPÍTULO 2. MARCO CONCEPTUAL 22 No puede exceder el número máximo de libros estipulados por la administración de la Bolsa del Libro. Figura 2.11: Catalogo de Libros Existe un panel superior izquierdo que muestra los libros que han sido seleccionados del catálogo de libros, mostrando su t́ıtulo y costo asociado, como se observa en la Figura 2.12, solo aparecerá si al menos se ha seleccionado un libro para agregar. Ademas, podrán realizar las siguientes acciones: Figura 2.12: Carrito de Libros CAPÍTULO 2. MARCO CONCEPTUAL 23 Vaciar: Esta acción elimina todos los libros agregados al alquiler en curso. Ver alquiler: Esta opción permite ver la información completa de los libros seleccio- nados, aśı como eliminar los libros que deseemos suprimir de nuestro alquiler. Al seleccionar “alquilar” se muestra el listado de libros que tienes en tu carrito, como se observa en la Figura 2.13 y entre las acciones que se pueden realizar estan: Figura 2.13: Resumen de alquiler Eliminar: Esta acción desvincula el libro de su carrito de libros y hace disponible el mismo para otros usuarios. Alquilar: Esta acción guarda el alquiler en curso, colocándole un estatus de “Pre- alquilado”, cuando el usuario retire los libros de la Bolsa del Libro, entregando el recibo de pago, el estatus del alquiler cambiara a “Alquilado” y una vez que entregue todos los libros su estatus cambiará a “Alquiler Finalizado”. Al confirmar el alquiler podremos ver un mensaje que indica que el alquiler se ha realizado exitosamente y un enlace para observar el comprobante, como se observa en la Figura 2.14. CAPÍTULO 2. MARCO CONCEPTUAL 24 Figura 2.14: Comprobante de Alquiler La Figura 2.15 contiene el menú de los diferentes módulos que posee el usuario con un rol de estudiante y muestra las siguientes opciones: Figura 2.15: Panel Derecho de Estudiantes Catálogo de libros: Permite visualizar todos los libros disponibles en la Bolsa del Libro. CAPÍTULO 2. MARCO CONCEPTUAL 25 Alquileres realizados: Muestra una lista con todos los alquileres realizados por el usuario, como se puede observar en la Figura 2.16. Figura 2.16: Alquileres Realizados Solvencias solicitadas: Muestra un listado con todas las solicitudes de solvencia hechas por el usuario, como se puede observar en la Figura 2.17. Figura 2.17: Solvencias Solicitadas Solicitar solvencia: Los usuarios cuentan con la posibilidad de realizar peticiones de solvencia con la Bolsa del Libro, para ello pueden hacerlo a través del siguiente formu- lario, donde especificarán el motivo de la petición. Ver Figura 2.18. CAPÍTULO 2. MARCO CONCEPTUAL 26 Figura 2.18: Solicitud de Solvencias 2.4. Alquileres (Nivel Funcional - Modulo de Estudian- tes) A partir de aqúı, se mostrará como un usuario observa las diferentes operaciones que puede realizar a través del módulo del estudiante y el conjunto de pasos que se realizan por detrás de la interfaz al ejecutar cada operación. Cada operación se ilustrará a través de un diagrama de flujo, que muestra desde el inicio (cuando se selecciona una opción a traves de la interfaz), punto de tomas de decisiones (puntos donde pueden ocurrir flujos alternos) hasta el final, que es donde se indica al usuario si la ejecución de la operación fue satisfactoria o no. En la Figura 2.19 se engloba todas las operaciones que pueden realizar los usuarios durante el proceso de alquilar libros y mas adelante se detallará el comportamiento de cada uno de estos. CAPÍTULO 2. MARCO CONCEPTUAL 27 Figura 2.19: Flujo de actividades del proceso de alquiler - Modulo del Estudiante CAPÍTULO 2. MARCO CONCEPTUAL 28 Desde que inicia el proceso visualizando el catálogo de libros, el usuario puede pasar por diferentes pasos donde puede ejecutar funcionalidades como agregar un ejemplar, ver alqui- leres, procesar alquileres, vaciar carrito, eliminar un ejemplar o simplemente hacer destacar que un libro que está agotado él “lo queŕıa”. Se realizarán las operaciones siempre y cuando las condiciones estén dadas como lo muestra el diagrama de flujo. Figura 2.20: Catalogo de libros. Carrito de Libros En la Figura 2.20 se observan las 4 opciones que tienen los usuarios: agregar ejemplar, lo queria, ver alquiler y vaciar carrito, cada una desencadena una serie de acciones como veremos a continuación. CAPÍTULO 2. MARCO CONCEPTUAL 29 El comportamiento del sistema cuando un estudiante selecciona “agregar un libro” se puede observar en la Figura 2.21, donde se reflejan las condiciones que pueden generar flujos alternos hasta completar el proceso donde se le informa al usuario si se agregó o no el libro a su carrito. Figura 2.21: Agregar Ejemplar al Carrito En la Figura 2.22 se refleja la situación en la que el estudiante selecciona el botón “Lo queŕıa” y se inicia el proceso de almacenar la cantidad de veces que algún usuario requere este libro al no estar disponible. CAPÍTULO 2. MARCO CONCEPTUAL 30 Figura 2.22: Contador de solicitudes de libro después de agotado Figura 2.23: Vaciar carrito CAPÍTULO 2. MARCO CONCEPTUAL 31 Si el estudiante selecciono “vaciar” el carrito, esto inicia el proceso donde todos los ejemplares relacionados con el carrito (alquiler) pierden esta relación y cambiar su estatus a “Disponibles”, como podemos observar en la Figura 2.23. Al seleccionar el botón “Ver alquiler” se despliega la vista de la Figura 2.24, que refleja todos los ejemplares agregados al carrito y las 2 únicas operaciones que puede realizar: al- quilar o eliminar ejemplares. Figura 2.24: Vista del usuario ejemplares agregados al carrito En la Figura 2.25, se muestra el comportamiento del sistema cuando el estudiante decide seleccionar “Alquilar”, donde los ejemplares pasan a un estatus “pre-alquilado” y se crea por cada ejemplar un registro en la tabla devoluciones con estado “sin devolver”. CAPÍTULO 2. MARCO CONCEPTUAL 32 Figura 2.25: Ejecucion de Alquiler. Cuando se toma la decisión de eliminar un ejemplar del carrito, desaparece la relación ejemplar-carrito y este cambia su estatus a “disponible” para que pueda ser alquilado por otro usuario, como se muestra en la Figura 2.26. CAPÍTULO 2. MARCO CONCEPTUAL 33 Figura 2.26: Eliminar un ejemplar seleccionado 2.5. Alquileres (Nivel Funcional - Modulo del Admi- nistrador) En esta sección se mostrará como un usuario observa las diferentes operaciones que pue- de realizar a través del módulo de administración y el conjunto de pasos que se realizan por detrás de la interfaz al ejecutar cada operación. Toda la información generada por los estudiantes al realizar los pre-alquileres se encuentra en este módulo, de forma tal que los administradores por medio del sistema puedan entregar los libros y si ya se encuentran los CAPÍTULO 2. MARCO CONCEPTUAL 34 libros alquilados, procesar la devolución de los mismos. Este flujo se refleja en la Figura 2.27. Figura 2.27: Proceso Post Alquiler (Administradores) En la Figura 2.28 se observa como el administrador detalla los libros que un estudiante pre-alquilo y ahora se dispone a entregar el ejemplar fisicamente. Una vez el estudiante haya recibido los libros y este conforme, el administrador registra esta acción en el sistema a través del botón “Entregar libros”. Figura 2.28: Funcionalidades Administrativas CAPÍTULO 2. MARCO CONCEPTUAL 35 Si el usuario decide seleccionar “Entregar libros” todos los ejemplares que estén relaciona- dos con este alquiler pasan al estatus “Alquilado” y el alquiler cambia a estado “Alquilado”, como se puede ver en el flujo de la Figura 2.29. Figura 2.29: Entrega de Alquileres Cuando un estudiante se dirige a la Bolsa del Libro con la intención de devolver un libro, el administrador busca el alquiler relacionado y al editarlo, la vista que se desplegará se observa en la Figura 2.30, en la cual se muestra la única opción que tiene el usuario, “devolver” libros. CAPÍTULO 2. MARCO CONCEPTUAL 36 Figura 2.30: Funciones para editar alquiler Figura 2.31: Proceso Devolver Ejemplares CAPÍTULO 2. MARCO CONCEPTUAL 37 Cuando el administrador selecciona el botón “devolver” el sistema inicia los cambios de registros de las tablas ejemplares y devoluciones que sean necesarios para completar el pro- ceso y se considera el caso en el cual el comportamiento pueda variar realizando un paso extra que modifique la tabla alquileres, como se muestra en la Figura 2.31. Caṕıtulo 3 Marco Tecnológico En este caṕıtulo se describen las herramientas tecnológicas utilizadas en el desarrollo de la aplicación Web, tales como: Ruby, Rails, MySQL, Git, Jquery y JasperReport, además se hace una breve descripción de la metodoloǵıa de desarrollo de software usada (Programación Extrema). 3.1. Ruby Es un lenguaje de scripts, multiplataforma, totalmente orientado a objetos. Ruby es un lenguaje de programación interpretado y su implementación oficial es distribuida bajo una licencia de software libre. Ruby es considerado un lenguaje flexible, ya que permite a sus usuarios alterarlo libre- mente. Las partes esenciales de Ruby pueden ser quitadas o redefinidas a placer. Se puede agregar funcionalidad a partes ya existentes. Ruby intenta no restringir al desarrollador. 38 CAPÍTULO 3. MARCO TECNOLÓGICO 39 Ruby tiene un conjunto de funcionalidades entre las que se encuentran las siguientes: [4] Posibilidad de redefinir los operadores (sobrecarga de operadores). Manejo de excepciones, como Java y Python, para facilitar el manejo de errores. Escribir extensiones en C para Ruby es más fácil que hacer lo mismo para Perl o Python, con una API muy elegante para utilizar Ruby desde C. Esto incluye llamadas para embeber Ruby en otros programas, y aśı usarlo como lenguaje de scripting. Ruby no necesita declaraciones de variables. Se utilizan convenciones simples para nombrar y determinar el alcance de las mismas. Posee cuatro niveles de ámbito de variable: global, clase, instancia y local. Puede cargar bibliotecas de extensión dinámicamente si lo permite el sistema operativo. Tiene manejo de hilos (threading) independiente del sistema operativo. De esta forma, tienes soporte multi-hilo en todas las plataformas en las que corre Ruby, sin importar si el sistema operativo lo soporta o no. Ruby es fácilmente portable: se desarrolla mayoritariamente en GNU/Linux, pero corre en varios tipos de UNIX, Mac OS X, Windows 95/98/Me/NT/2000/XP, DOS, BeOS, OS/2, etc. 3.2. Ruby on Rails (RoR) Es un entorno de desarrollo web de código abierto que está optimizado para la satisfacción de los programadores y para la productividad sostenible. Permite escribir un buen código CAPÍTULO 3. MARCO TECNOLÓGICO 40 evitando que se repita trabajo y favoreciendo la convención antes que la configuración. El desarrollo sobre este entorno está basado en dos filosof́ıas, no te repitas (del inglés Don’t repeat yourself, DRY) y convención sobre configuración. DRY significa que las definiciones debeŕıan hacerse una sola vez. Dado que Ruby on Rails es un framework de pila completa, los componentes están integrados de manera que no hace falta establecer puentes entre ellos. Mientras que convención sobre configuración significa que el programador sólo necesita definir aquella configuración que no es convencional. [8] A continuación se explica brevemente cada uno de los componentes del patrón de diseño arquitectónico MVC. Modelo Representa los datos de la aplicación y las reglas para manipular esos datos, en caso de Rails se utilizan principalmente para la gestión de las tablas de base de datos que en la mayoŕıa de los casos corresponde a un modelo en la aplicación, contiene la lógica del negocio. Vista Es la lógica de visualización, es decir, cómo se muestran los datos provenientes del Con- trolador. Con frecuencia en las aplicaciones Web la vista consiste en una cantidad mı́nima de código de algún lenguaje incluido en HTML. El método que se emplea en Rails por defecto es usar Ruby Embebido (archivos .rhtml, desde la versión 2.x en adelante de RoR archivos .html.erb), que son básicamente fragmentos de código HTML código en Ruby. Controlador Administra la navegación entre vistas, procesa las peticiones del usuario desde el navega- CAPÍTULO 3. MARCO TECNOLÓGICO 41 dor web e invocan los modelos de datos mostrando los resultados de dichas peticiones en una plantilla (template) o un redireccionamiento. La implementación del Controlador es maneja- da por el ActionPack de Rails, que contiene la clase ApplicationController. Un controlador en Rails debe heredar de esta clase y definir las acciones como métodos de dicha clase. Los componentes de Rails Action Pack es una gema que contiene Action Controller, Action View y Action Dis- patch. La parte “VC” de “MVC”. Rails está conformado por componentes individuales para el desarrollo web, entre estos: [9] Action Controller: Maneja los controladores de la aplicación, procesando las peti- ciones, extrae los parámetros y los env́ıa a la acción prevista. Incluye la administración de sesiones y la gestión de redireccionamiento. Action View: Maneja las vistas de la aplicación, puede ser creada con HTML y XML, soporta Ajax y Css. Implementa la función de los layouts, que permite especificar un grupo de elementos que se mostrarán en todas las páginas. Action Dispatch : gestiona el enrutamiento de las solicitudes web y las despacha como desee, ya sea a su aplicación o cualquier otra aplicación Rack. Active Record: Maneja los modelos de datos, proporciona independencia de la Ba- se de Datos, funcionalidades básicas CRUD (Create, Read, Update and Delete o en español, Crear, Leer, Actualizar y Eliminar), capacidad de búsqueda, relaciona los modelos entre śı, entre otros servicios, etc. CAPÍTULO 3. MARCO TECNOLÓGICO 42 Action Mailer: Es un framework utilizado para dar servicio de correo electrónico, para enviar, recibir y procesar los correos electrónicos, sin formato o integrando partes sobre plantillas flexibles. Active Resource: Es un framework para la gestión de la conexión entre los objetos de negocio y servicios web. Se implementa una forma de mapa de recursos basados en objetos locales con la semántica CRUD. Railties: Es el código del núcleo Rails que crea nuevas aplicaciones y los conecta con los framework en una sola aplicación. Active Support: Es una extensa colección de clases y extensiones de la biblioteca estándar de Ruby que se utilizan en Rails, tanto por el código del núcleo como de sus aplicaciones. 3.3. MySQL MySQL es un sistema manejador de bases de datos relacional (SMBDR), el cual propor- ciona un servidor de base de datos SQL (Structured Query Language), multihilo, multiusua- rio y robusto. MySQL es capaz de almacenar enormes cantidades de datos, de gran variedad y de distribuirlos para cubrir las necesidades de cualquier tipo de organización, desde pequeños establecimientos comerciales a grandes empresas y organismos administrativos. MySQL es capaz de soportar que varios usuarios se conecten al mismo tiempo y que puedan manipular y administrar las distintas bases de datos existentes y administrar al CAPÍTULO 3. MARCO TECNOLÓGICO 43 SMBDR como tal, en el mismo instante de tiempo. MySQL implementa un protocolo que se encarga de emplear diferentes algoritmos para cifrar los datos que viajan a través de una red pública (ejemplo: Internet), el cual tiene por nombre Capa de Seguridad de Sockets (Secure Sockets Layer - SSL). Este protocolo trabajaŕıa en el cliente y el servidor MySQL. Aśı mismo, maneja gestión de usuarios y contraseñas, en el sentido de qué usuarios tienen acceso a qué tablas y con qué permisos, manteniendo de esta forma un buen nivel de seguridad de los datos. Los clientes pueden conectar con el servidor MySQL usando Sockets TCP/IP en cualquier plataforma. La interfaz para el conector ODBC (My-ODBC) proporciona a MySQL soporte para programas clientes que usen conexiones ODBC (Open Database Connectivity). Proporciona sistemas de almacenamiento transaccionales y no transaccionales (no per- miten hacer “ROLLBACK”). MySQL en su versión 5.0 tiene como caracteŕıstica el manejo de integridad referencial y de transacciones, gracias al motor InnoDB, que permite el manejo de transacciones mediante la sentencia “BEGIN WORK” y finaliza con un “COMMIT” o “ROLLBACK”, o puede terminar en modo “AUTOCOMMIT”. Para trabajar con este mo- tor es necesario especificarlo al momento de la creación de cada una de las tablas, declarando expĺıcitamente que van a ser del tipo InnoDB. El sistema de seguridad en MySQL es referido como el Sistema de Privilegios de Acceso [10]. Permite la autenticación de los usuarios del servidor de MySQL y la verificación de las actividades de todos los usuarios sobre el servidor y las bases de datos. La seguridad en MySQL es aplicada en dos niveles: Nivel de servidor y Nivel de Base de Datos. Cuando un usuario trata de acceder a una base de datos, primero se verifica si el usuario tiene privilegio para acceder al servidor de base de datos, después el servidor verifica si el usuario tiene CAPÍTULO 3. MARCO TECNOLÓGICO 44 privilegios para conectarse a una base de datos. La verificación de conexión al servidor y la verificación de conexión a la base de datos son dos procesos que MySQL siempre lleva a cabo. MySQL realiza la verificación de privilegios del servidor y la base de datos usando unas tablas del sistema llamadas tablas de concesión. Estas tablas contienen toda la información necesaria para aplicar las poĺıticas de seguridad convenientes. Todos los host (otros compu- tadores) y usuarios que se conectan al servidor MySQL deben estar representados en las tablas de concesión. 3.4. Git Git es un sistema de control de versiones o Version Control System (VCS) libre, de código abierto, distribuido y diseñado para manejar desde pequeños a grandes proyectos con rápidez y eficiencia. Caracteŕısticas de GIT La función de Git que realmente lo hace destacar, es su modelo de ramificación; per- mitiendo tener varias ramas locales que pueden ser completamente independientes el uno del otro. Git es rápido. Con Git, casi todas las operaciones se realizan a nivel local, lo que supo- ne una ventaja enorme en la velocidad en sistemas centralizados que constantemente tienen que comunicarse con un servidor en algún lugar. Git se distribuye. Esto significa que en lugar de hacer un “checkout” de la cabecera CAPÍTULO 3. MARCO TECNOLÓGICO 45 actual del código fuente, hace un “clon” de todo el repositorio. El modelo de datos que usa Git garantiza la integridad criptográfica de cada parte de su proyecto. Git tiene la “zona de espera” o “́ındice”. Esta es una zona intermedia en la que se compromete que puede ser formateado y revisado antes de terminar el compromiso. Git es liberado bajo la licencia de código abierto GPLv2. 3.5. JasperReports JasperReports es una herramienta creada por la compañ́ıa JasperSoft, diseñada para la creación de reportes que permite entregar contenido enriquecido al monitor, impresora o archivos PDF, XML, HTML, XLS Y CSV. Está escrito completamente en Java y puede ser usado en aplicaciones Web para generar contenido dinámico. Su propósito principal es ayudar a crear páginas orientadas, documentos listo para imprimir de una manera simple y flexible. JasperReports, aśı como muchas aplicaciones de reportes, usa plantillas estructuradas en múltiples secciones, tal como t́ıtulo, resumen, detalle y página y grupos de encabezado y pies de página. Cada sección tiene un diseño de forma libre en donde puedes colocar varios tipos de elementos, incluyendo imágenes, campos de texto dinámicos y estáticos, ĺıneas y rectángulos. El motor de reportes usa esta plantilla para organizar datos en un archivo XML (JRXML) o crearlo usando un API de libreŕıas. Estos datos pueden venir de distintos oŕıgenes de datos, incluyendo bases de datos relacionales, colecciones, o arreglos de objetos Java o datos XML (ver Figura 3.36). Los usuarios se pueden conectar a la libreŕıa de reportes en una fuentes de datos hechas a la medida implementando una simple interfaz. [7] CAPÍTULO 3. MARCO TECNOLÓGICO 46 Figura 3.36: Proceso de compilación de un reporte Ireport Ireport es un programa para el diseño de reportes visuales que hace uso de JasperReports. Esta libreŕıa es un motor de reportes que puede ser integrada a una aplicación libre o comer- cial para generar los reportes diseñados con Ireport, mostrarlos en la pantalla o exportarlos en un formato final como PDF, OpenOffice, DOCX y muchos otros. Alternativamente, se puede transmitir el resultado a través de una aplicación Web o mandar el documento final directamente a una impresora. JasperReport de alguna manera viene siendo el núcleo de Ireport. [5]. Ireport permite diseñar reportes, JasperReports ejecutar los reportes y generar una salida en una aplicación de Java. 3.6. Jquery jQuery es una biblioteca de JavaScript, creada inicialmente por John Resig, que permite simplificar la manera de interactuar con los documentos HTML, manipular el árbol DOM, manejar eventos, desarrollar animaciones y agregar interacción con la técnica AJAX a páginas CAPÍTULO 3. MARCO TECNOLÓGICO 47 web. jQuery es software libre y de código abierto, posee un doble licenciamiento bajo la Licencia MIT y la Licencia Pública General de GNU v2, permitiendo su uso en proyectos libres y privados. jQuery, al igual que otras bibliotecas, ofrece una serie de funcionalidades basadas en JavaScript que de otra manera requeriŕıan de mucho más código, es decir, con las funciones propias de esta biblioteca se logran grandes resultados en menos tiempo y espacio. En la Figura 3.37 se muestra un ejemplo de como se puede lograr un mismo efecto usando Javascript simple y JQuery. Figura 3.37: Animación en Javascript simple y JQuery CAPÍTULO 3. MARCO TECNOLÓGICO 48 3.7. Programación Extrema (XP) La programación extrema o eXtreme Programming (de ahora en adelante, XP) es una metodoloǵıa de desarrollo de la ingenieŕıa de software formulada por Kent Beck. Es el más destacado de los procesos ágiles de desarrollo de software. Al igual que éstos, la programa- ción extrema se diferencia de las metodoloǵıas tradicionales principalmente en que pone más énfasis en la adaptabilidad que en la previsibilidad. Los defensores de la XP consideran que los cambios de requisitos sobre la marcha son un aspecto natural, inevitable e incluso desea- ble del desarrollo de proyectos. Creen que ser capaz de adaptarse a los cambios de requisitos en cualquier punto de la vida del proyecto es una aproximación mejor y más realista que intentar definir todos los requisitos al comienzo del proyecto e invertir esfuerzos después en controlar los cambios en los requisitos. Se puede considerar la programación extrema como la adopción de las mejores metodo- loǵıas de desarrollo de acuerdo a lo que se pretende llevar a cabo con el proyecto, y aplicarlo de manera dinámica durante el ciclo de vida del software. Practicas Las doce prácticas de la programación extrema tienen su origen en prácticas bien cono- cidas en la ingenieŕıa del software: 1. El juego de la Planificación: Poner en producción las caracteŕısticas más impor- tantes. CAPÍTULO 3. MARCO TECNOLÓGICO 49 2. Versiones Pequeñas: periódicamente, se producen nuevas versiones del sistema. 3. Metáfora del Sistema: descripción general del sistema. 4. Diseño Simple: el sistema se diseña con la máxima simplicidad posible. 5. Pruebas Continuas: los clientes especifican pruebas funcionales. 6. Refactorización: modificar la forma del código sin cambiar su funcionamiento. 7. Programación por parejas: la programación se realizan de a dos programadores por computadora. 8. Posesión Colectiva del Código: cualquier programador puede cambiar cualquier parte del sistema en cualquier momento. 9. Integración continua: los cambios se integran en el código base varias veces por d́ıa. 10. Semana laboral de 40 horas: cada trabajador trabaja no más de 40 horas por semana. 11. Cliente en el Sitio: el equipo de desarrollo tiene acceso todo el tiempo al cliente. 12. Estándares de Codificación: todo el código debe estar escrito de acuerdo a un estándar de codificación. Valores La programación extrema se apoya en cuatro valores fundamentales: CAPÍTULO 3. MARCO TECNOLÓGICO 50 Comunicación: La comunicación se realiza de diferentes formas. Para los programa- dores el código comunica mejor cuanto más simple sea. Si el código es complejo hay que esforzarse para hacerlo inteligible. El código autodocumentado es más fiable que los comentarios ya que éstos últimos pronto quedan desfasados con el código a medida que es modificado. Debe comentarse sólo aquello que no va a variar, por ejemplo el objetivo de una clase o la funcionalidad de un método. Simplicidad: La simplicidad es la base de la programación extrema. Se simplifica el diseño para agilizar el desarrollo y facilitar el mantenimiento. Un diseño complejo del código junto a sucesivas modificaciones por parte de diferentes desarrolladores hacen que la complejidad aumente exponencialmente. Para mantener la simplicidad es nece- saria la refactorización del código, ésta es la manera de mantener el código simple a medida que crece. Retroalimentación: Al estar el cliente integrado en el proyecto, su opinión sobre el estado del proyecto se conoce en tiempo real. Al realizarse ciclos muy cortos tras los cuales se muestran resultados, se minimiza el tener que rehacer partes que no cumplen con los requisitos y ayuda a los programadores a centrarse en lo que es más importante. Coraje: Muchas de las prácticas implican coraje o valent́ıa. Una de ellas es siempre diseñar y programar para hoy y no para mañana. Esto es un esfuerzo para evitar em- pantanarse en el diseño y requerir demasiado tiempo y trabajo para implementar el resto del proyecto. La valent́ıa le permite a los desarrolladores que se sientan cómodos con reconstruir su código cuando sea necesario. Esto significa revisar el sistema exis- tente y modificarlo si con ello los cambios futuros se implementaran más fácilmente. Estándares de Codificación: todo el código debe estar escrito de acuerdo a un estándar de codificación. CAPÍTULO 3. MARCO TECNOLÓGICO 51 Actividades A continuación se describen las actividades de XP: [12] Planificación: Se definen entre el conjunto de desarrolladores y usuarios del sistema una serie de Historias de Usuario que describen las funcionalidades requeridas para el software que se construirá. El desarrollo se divide en iteraciones, cada iteración comienza con un plan para que se elijan las Historias de Usuario a desarrollar. Diseño: Los diseños deben ser sencillos, si alguna parte del sistema es de desarrollo complejo, lo apropiado es dividirla en varias. Si hay fallos en el diseño o malos diseños, estos deben ser corregidos cuanto antes. Codificación: XP argumenta que lo más importante para el desarrollo del producto de software es codificar. Codificar en XP es hacer diagramas que generaran código, scripts para una Aplicación Web o código para una Aplicación que necesita compilarse. Pruebas: Hay que asegurarse de que todo lo que se hace funcione correctamente. Para ello, lo mejor es desarrollar las pruebas desde el momento que se conocen las Historias del Usuario. 3.8. Adaptación XP A continuación se describen las actividades que se realizarán para la adaptación del pro- ceso XP que se utilizó durante el desarrollo de la aplicación Web. CAPÍTULO 3. MARCO TECNOLÓGICO 52 3.8.1. Iteraciones El método XP propone dividir el trabajo en iteraciones, las cuales se enfocan en versiones parciales del sistema hasta llegar al producto final. Los nuevos requerimientos son recibidos progresivamente y son incluidos en una nueva iteración. Las iteraciones pueden ser de dos tipos principalmente: por objetivos o por lapsos de tiempo. En el desarrollo de este Trabajo Especial de Grado, las iteraciones están basadas en objetivos. Los objetivos planteados en cada iteración se establecen según su prioridad. 3.8.2. Planificación Según XP, la actividad de planificación comienza creando una serie de Historias de Usua- rio, en las cuales se describen en una o dos oraciones los requerimientos del sistema en terminoloǵıa del cliente, proporcionando a su vez una estimación del tiempo necesario para el desarrollo. [12] En este trabajo, el formato para escribir las Historias de Usuario se presenta en el Cua- dro 1. La primera columna corresponde al número que sirve como identificador, la segunda es la fecha de inicio y la tercera una breve descripción de los requerimientos que se trabajarán. ID FECHA DESCRIPCION Cuadro 3.1: Lista de historias CAPÍTULO 3. MARCO TECNOLÓGICO 53 3.8.3. Diseño El método de desarrollo Programación Extrema, propone la fase de diseño como una gúıa de implementación para una historia de usuario determinada. Para esta fase, XP recomienda la creación de prototipos y/o diagramas, cuando establecer un diseño para una historia de usuario resulte complicado. Asimismo, promueve aplicar re- factorización, que permita realizar mejoras al diseño del código después que se ha escrito. [12] 3.8.4. Codificación Durante la actividad de codificación, este método sugiere la programación en pareja, que consiste en dos personas en una misma estación de trabajo desarrollando el código de una historia de usuario. Esto ayuda a seguir los estándares de programación, lo cual es otro aspecto requerido por el método de Programación Extrema. Por último se deben realizar frecuentes integraciones de código entre los grupos de trabajo, permitiendo evitar problemas de compatibilidad e interfaz y ayudando al descubrimiento de errores en el sistema. [12] Para el desarrollo de esta aplicación, no se adopta la programación en pareja. Durante el desarrollo se mantiene la consistencia y legibilidad del código para facilitar la compren- sión en el desarrollo de la aplicación, esto pensando en que dicho prototipo será mejorado y ampliado por otros desarrolladores. También se realiza una integración constante del código por medio del sistema de control de versiones Git. CAPÍTULO 3. MARCO TECNOLÓGICO 54 En la presente adaptación del proceso de desarrollo se extraerán y mostrarán partes del código fuente que sean esenciales en la comprensión de la aplicación y la solución a los re- querimientos de las historias de usuario. 3.8.5. Pruebas Las pruebas serán de aceptación en donde el usuario o cliente pone a prueba el sistema y verifica que hayan quedado cubiertos todos los requerimientos. Caṕıtulo 4 Marco Aplicativo Iteracion 0: Levantamiento de Información En esta primera iteración se describe el resultado de las dos primeras reuniones con el equipo de la Bolsa del Libro, donde se recolectaron todas las peticiones de mejoras y cambios a realizar. En una primera reunión se revisó el sistema y junto al listado de fallas se fueron señalando cómo está funcionando y cómo debeŕıa funcionar la aplicación. Después de esta reunión se inició el estudio del código de cada proceso que hab́ıa presentado algún tipo de problema, se hizo un análisis de la base de datos y se procedió a establecer un ambiente de desarrollo similar al que se encuentra en producción. En una segunda reunión, ya teniendo más experiencia de cómo funcionan ciertos procesos 55 CAPÍTULO 4. MARCO APLICATIVO 56 del sistema se realizó una estimación de tiempo y prioridades de los requerimientos. Se plantearon posibles soluciones a ciertos casos y se solicitó más información sobre algunas reglas del negocio que se necesitarón a la hora de actualizar el sistema. 4.1. Iteracion 1: Carga de usuarios a la BD y cálculo de estad́ısticas 4.1.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 1 10-04-2013 Se carga la lista de Control de Estudios a la BD y actualización de tabla usuarios. 2 10-04-2013 Reprogramar el cálculo de las estad́ısticas que se muestran en el módulo de administración. 3 10-04-2013 Permitir observar estad́ısticas y el contador de monto recaudado durante y después de finalizar el semestre. 4 10-04-2013 Por peŕıodo se requiere mantener el valor de todas las estad́ısticas que se muestran al inicio del módulo de administración. Cuadro 4.2: Historia de Usuario. Iteración 1. CAPÍTULO 4. MARCO APLICATIVO 57 4.1.2. Diseño Carga de usuarios a la BD La primera tarea que se completó en esta iteración fue la carga de nuevos usuarios en el sistema. Por ser la segunda vez que se realizaba (la primera fue cuando se puso en producción el sistema) requeŕıa mucha atención y pautas de cómo manejar los usuarios nuevos, antiguos y los que no están inscritos en este semestre. Los usuarios no inscritos se colocaran como “Inactivo”. Los usuarios que están en la tabla “usuarios”de la BD y en la nueva lista de Control de Estudios no se modificaron y aquellos que solo se encuentran en la lista de Control de Estudio se agregaron al sistema. Actualización de estad́ısticas Una vez se tiene la captura de datos correcta para conocer las estad́ısticas de los libros alquilados agrupados por área de conocimiento, ejemplares entregados a cada escuela y la cantidad de usuarios por escuela, solo haćıa falta agregar un formulario donde se muestre los periodos anteriores, donde por defecto el periodo era el actual o el último cursado. Como observamos en la Figura 4.39. Figura 4.39: Selección de periodo para mostrar estad́ısticas CAPÍTULO 4. MARCO APLICATIVO 58 4.1.3. Codificación La lista de usuarios viene dada por Control de Estudios en un archivo de formato Excel, el cual tiene todos los campos que se necesitan en la tabla usuarios. Lo primero que se hizo fue crear una tabla con la misma estructura de la tabla usuarios. Véase la Figura 4.40. Figura 4.40: Estructura tabla de estudiantes inscritos en Control de Estudios Una vez creada la nueva tabla se procedió a cargar la lista proporcionada por Control de Estudio en la tabla denominada “Etlistado”. Esto se logró transformando el archivo a lenguaje SQL para insertar los datos en la BD. La función que cumple esta tabla es almacenar datos temporales, sin modificar directamente la tabla usuarios. Posteriormente se ejecutaron una serie de consultas SQL que se encargaron de actualizar la tabla usuarios. CAPÍTULO 4. MARCO APLICATIVO 59 Lista de Usuarios Inactivos En la Figura 4.41, se observa la consulta SQL que indicará los usuarios que pasaron a estado “inactivo” del sistema porque ya se graduaron, cambiaron de facultad o por alguna razón no están en la lista de estudiantes inscritos en este semestre. Figura 4.41: Lista de Usuarios Inactivos Lista de Usuarios Nuevos En la Figura 4.42, se observa la consulta SQL que indica los usuarios que se agregaron como nuevos al sistema, que no se encontraban registrados en la Bolsa del Libro. Figura 4.42: Lista de Usuarios Nuevos Actualización de Usuarios En la Figura 4.43, se observa la consulta SQL que actualizó la tabla de usuarios, pasando a estado “inactivo” aquellos que estaban en la tabla “inac users”. CAPÍTULO 4. MARCO APLICATIVO 60 Figura 4.43: Actualización de Usuarios: inactivos Nuevos Usuarios de la Bolsa del Libro En la Figura 4.44, se observa la consulta SQL que agregó a la tabla usuarios aquellos registros que se encontraban en la tabla “new list”. Figura 4.44: Nuevos Usuarios de la Bolsa del Libro Las condiciones que se establecieron para mostrar las estad́ısticas parećıan correctas solo al inicio del peŕıodo de alquiler, donde no hab́ıa casi libros sin devolver. Las consultas estaban relacionadas a la tabla alquileres y devoluciones, cuando se entregaban los libros se perd́ıan los datos, ya que el registro de devoluciones con estado “sin devolver” pasaba a “Devuelto”. Para solucionar el problema del cálculo del monto recaudado y los gráficos estad́ısticos del sistema, se tomaron los resultados solo aquellos alquileres que se encontraban condicionados al estado “Alquilado” o “Alquiler finalizado”. Este resultado se agrupo por periodo usando el campo çonfiguracion id 2obtenemos la información necesaria para mostrar las estadisticas correctamente. CAPÍTULO 4. MARCO APLICATIVO 61 En las Figuras 4.45, 4.46, 4.47 y 4.48 se observan las consultas SQL que se realizaron usando la lógica descrita anteriormente para mostrar las estad́ısticas (gráficos porcentuales) y el monto recaudado. Figura 4.45: Libros alquilados agrupados por área de conocimiento Figura 4.46: Ejemplares entregados a cada escuela Figura 4.47: Cantidad de usuarios por escuela CAPÍTULO 4. MARCO APLICATIVO 62 Figura 4.48: Cantidad de usuarios por escuela 4.1.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 1 Ver las gráficas del sis- tema al terminar el periodo. Deben mostrar los datos co- rrectos las gráficas al finali- zar el periodo cursante. Se observan las gráficas per- fectamente, sin perder datos durante todo el periodo. 2 Ver las gráficas del sis- tema de periodos an- teriores. Deben mostrar los datos co- rrectos las gráficas de perio- dos anteriores. Se pueden seleccionar dife- rentes periodos y se obser- van las estad́ısticas de dicho periodo y el monto recauda- do. 3 El contador muestra el monto recaudado al fi- nalizar el periodo. Mantener el contador del monto recaudado. Se tiene el contador del monto recaudado durante y al finalizar el periodo. Cuadro 4.3: Pruebas Iteracion 1 CAPÍTULO 4. MARCO APLICATIVO 63 4.2. Iteracion 2: Liberación de libros pre-alquilados y búsqueda de alquileres 4.2.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 5 10-04-2013 Añadir la búsqueda por “código de alquiler” en el área de alquileres del módulo de administración. 6 17-04-2013 Se requiere liberar los libros que fueron pre-alquilados y no termi- naron el proceso de alquiler. 7 17-04-2013 Se deben liberar solo los alquileres que tengan mas de tres d́ıas en el estado pre-alquilado. Cuadro 4.4: Historia de Usuario. Iteracion 2. 4.2.2. Diseño Liberación de alquileres La solicitud de liberar los alquileres que se encontraban en estado pre-alquilado se re- solvió habilitando un enlace, el cual permite que los ejemplares que estén asociados a estos alquileres puedan ser alquilados por otros usuarios. A esta solución se le agrega la restricción que no permite la liberación de alquileres que tengan menos de tres (3) d́ıas de creación. CAPÍTULO 4. MARCO APLICATIVO 64 Este procedimiento se trató de implementar en el módulo de administración junto algún otro proceso, para que se ejecutara automáticamente. Sin embargo, no se encontró una ubicación adecuada que permitiera diariamente realizar este procedimiento. Por esta razón, se estableció un enlace que permite la ejecución del procedimiento de liberación solo cuando el administrador le parezca necesario. Antes de su ejecución existe un formulario de seguridad solo para establecer que el administrador encargado es el único que puede realizar esta operación, esto podemos observarlo en la Figura 4.49. Figura 4.49: Activación del procedimiento de liberación 4.2.3. Codificación Busqueda por código de alquiler Al momento de plantear la solución para agregar una nueva búsqueda de alquileres por medio de su identificador “código de alquiler”, se necesitó condicionar el tipo de entrada que obteńıamos de la vista; es decir, si la consulta era de tipo numérica y con una cantidad CAPÍTULO 4. MARCO APLICATIVO 65 menor a 5 d́ıgitos la consulta se realizaba por id de alquiler, de lo contrario se manteńıa la búsqueda que se realizaba anteriormente. Este sistema de búsqueda en el módulo de admi- nistración viene dado por una gema de Ruby, que facilita las consultas en la misma tabla o aquellas que estén relacionadas, permitiendo la búsqueda por caracteres o por números. Sin embargo, realizar la búsqueda por ambos tipos en una misma entrada no se contemplaba. Figura 4.50: Búsqueda de alquileres En la Figura 4.50, podremos observar cómo se realizan las búsquedas por “código de alquiler” y con la gema de Ruby. Liberación de alquileres El proceso de liberar alquileres se llevó a cabo por medio de varias consultas SQL que permiten capturar los registros de alquiler que cumplen con la condición de tener más de tres (3) d́ıas de creación. Se separa en cuatro pasos, el primer y segundo paso crean las tablas que contienen los alquileres y ejemplares a cambiar, luego dos procedimientos que se encargan CAPÍTULO 4. MARCO APLICATIVO 66 de ejecutar los cambios. En la Figura 4.51 se muestra la consulta para obtener los alquileres que tengan más de tres (3) d́ıas creados y correspondan al último periodo cursado (no hay periodo activo) o el peŕıodo actual. Figura 4.51: Alquileres por liberar En la Figura 4.52 se muestra la consulta para obtener los ejemplares que estén relacio- nados con cada uno de los alquileres que se encuentran en la tabla antes creada. Figura 4.52: Ejemplares por liberar En las Figuras 4.53 se cambia los ejemplares a “disponible 2aśı liberar aquellos que puedan ser alquilados por otros usuarios. CAPÍTULO 4. MARCO APLICATIVO 67 Figura 4.53: Actualización de ejemplres En la Figura 4.54 y 4.55 se cambia los registros de alquileres y devoluciones al estado “cancelado” para denotar el tipo de procedimiento que se hizo. Figura 4.54: Actualización de registros en devoluciones Figura 4.55: Actualización de alquileres 4.2.4. Pruebas Se muestran las pruebas de esta iteración. CAPÍTULO 4. MARCO APLICATIVO 68 # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 4 Se hace una búsqueda por “código de alqui- ler” usando un núme- ro de 4 d́ıgitos. Se obtiene solo un resultado de existir el código de alqui- ler introducido. Solo se obtiene un resultado que coincide con el número del alquiler. 5 Se hace una búsque- da por nombre, cédu- la, estatus o escuela. Se mantiene la funcionali- dad del sistema antes del cambio. El resultado obtenido es el esperado, se verifica proban- do con los diferentes campos y la consulta arroja la infor- mación correcta. 6 Se realizan alquileres y a continuación se bus- ca liberararlos con la nueva funcionalidad. Los alquileres debeŕıan mantener su estado en ”pre-alquilados”. Al seleccionar ”liberar li- bros pre-alquilados”, no se modificaron los alquileres que se estaban monitorean- do los cuales estaban en el rango de menos de 3 d́ıas de creados. 7 Se realizan alquileres y luego de 4 d́ıas se libe- ran. Los alquileres deben quedar en estado cancelado, y sus ejemplares disponibles. El sistema realiza los cam- bios de registros en las ta- blas ejemplares y alquileres como se esperaba. Cuadro 4.5: Pruebas Iteracion 2. CAPÍTULO 4. MARCO APLICATIVO 69 4.3. Iteracion 3: Reportes y cambios varios. 4.3.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 8 06-05-2013 Reportes en la sección listado de deudores, el formato debe incluir cédula, apellido, nombre, código de alquiler y peŕıodo lectivo. 9 06-05-2013 Crear un nuevo reporte como ajustes personalizados. 10 06-05-2013 En la sección libros, cuando se va a agregar un nuevo libro el sistema no lo permite. 11 06-05-2013 En el módulo de reportes en la sección libros disponibles, cambiar orden del formato, primero autor y luego el t́ıtulo. Organizar cotas en orden consecutivo y creciente. 12 06-05-2013 Buscar por autor en ejemplar, agregar estatus “desincorporado” y probar la eliminación de ejemplares. Cuadro 4.6: Historia de Usuario. Iteracion 3. 4.3.2. Diseño Al trabajar con la solución de la falla que ocurre en el área de libros del módulo de administración (Cuadro 4.6: ID 10), se encontró que la razón por la cual no se pod́ıan almacenar libros en ciertas ocasiones es debido a que el ISBN se hab́ıa establecido como un CAPÍTULO 4. MARCO APLICATIVO 70 campo obligatorio y no debeŕıa serlo, ya que hay libros que no poseen ISBN. Por lo tanto, se resolvió haciendo que este campo no sea obligatorio. Al trabajar en el área de ejemplares para agregar el campo “autor” (Cuadro 4.6: ID 11) en las búsquedas deb́ıamos extender solamente el uso de las búsquedas complejas que tiene instalado el sistema, en el cual al agregar el campo a buscar en su sintaxis, se logra obtener los resultados deseados al buscar por autor. La sintaxis que usa esta gema para realizar las búsquedas depende del atributo “name” del campo input de la vista que tiene la estructura siguiente: name=”search[libro titulo or libro cota or libro autor or estatus ejemplar contains]” Figura 4.56: Reportes personalizados Al trabajar en la nueva tarea que se encarga de generar reportes con datos ajustables (Cuadro 4.6: ID 9) se diseñó una interfaz donde se muestran todas las opciones que tienen CAPÍTULO 4. MARCO APLICATIVO 71 los usuarios para cambiar y obtener los resultados al ejecutar su consulta. Inclusive, si solo quieren visualizar el reporte puede descargarlo en PDF. Para tener una idea más clara de cómo se ve el sistema, observen la Figura 4.56. La importancia de estos reportes radica en la posibilidad de observar la información más concisa por escuela con datos de libros alquilados y total de ejemplares. 4.3.3. Codificación Los cambios en los reportes de lista de deudores y libros disponibles (Cuadro 4.6: ID 8) se resolvieron haciendo cambios en las consultas SQL. En la consulta de la Figura 4.57 podemos observar que se está obteniendo el periodo y a su vez el ID del alquiler, para luego transformarlo en XML y generar el reporte con JasperReport, donde la salida es un archivo PDF. Figura 4.57: Consulta SQL lista de deudores CAPÍTULO 4. MARCO APLICATIVO 72 Al realizar los cambios de libros disponibles (Cuadro 4.6: ID 8) se modificó el archivo “rptListadoLibrosDisponibles.jasper” con la ayuda de Ireport que permite diseñar reportes. La consulta SQL que contiene toda la información de los libros disponibles se observa en la Figura 4.58. Figura 4.58: Consulta SQL de libros disponibles La tarea de mayor costo en tiempo y esfuerzo de esta iteración fue generar un reporte personalizado (Cuadro 4.6: ID 9), ya que se requeŕıa conocer el uso de Ireport y JasperRe- port, uno para diseñar el reporte y el otro para generar el archivo de salida tipo PDF. Entre los reportes que posee el sistema algunos funcionan realizando cálculos en código Java dentro del mismo para mostrarlos en el archivo PDF de salida. Los reportes que se realizan de esta manera, consumen mucho tiempo para generarse debido a estos cálculos. CAPÍTULO 4. MARCO APLICATIVO 73 Por esta razón hemos decidido trabajar con consultas SQL anidadas y complejas, pero se obtuvieron los datos necesarios para mostrarse en el reporte, sin necesidad de ningún cálculo. Para conocer cómo se realiza este proceso, hay que observar la Figura 4.59 y Figura 4.60, que es la muestra de la consulta en los dos casos: cuando se recibe por parámetro la escuela (Figura 4.59) y cuando no (Figura 4.60). Figura 4.59: Consulta SQL sin filtro Hay que destacar que para realizar los reportes personalizados y mostrarlos por pantalla se realiza la misma consulta SQL con las mismas condiciones, con la diferencia de que no se CAPÍTULO 4. MARCO APLICATIVO 74 env́ıan los datos para ser transformados en reportes sino que se env́ıan a la vista. Figura 4.60: Consulta SQL filtrado por escuela 4.3.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 8 Se trata de agregar un libro sin ISBN. El sistema debe permitir agregarlo. Efectivamente, el libro fue agregado con exito. CAPÍTULO 4. MARCO APLICATIVO 75 9 Se trata de agregar un libro con ISBN. El sistema debe permitir agregarlo. Efectivamente, el libro fue agregado con exito. 10 Se realizan búsquedas por autor en el listado de ejemplares. Se deben mostrar todos los ejemplares que pertenecen a dicho autor . El resultado obtenido es el esperado. 11 Se realizan búsquedas por cota, t́ıtulo y es- tatus en el listado de ejemplares, para veri- ficar que la busqueda basica continua fun- cional. Se deben mostrar todos los ejemplares que tienen la co- ta, el titulo del libro busca- do y en su defecto los ejem- plares que coincidan con el estatus tipeado. El resultado obtenido es el esperado. Cuadro 4.7: Pruebas. Iteracion 3. Las pruebas de reportes son solo a nivel visual, exceptuando el “Reporte Personaliza- do”que se toman ciertos libros y se hacen los calculos para corroborar que los datos son correctos. 4.4. Iteracion 4: Historial y cambio de ejemplares. 4.4.1. Planificacion Se muestran las historias de usuario de esta iteración. CAPÍTULO 4. MARCO APLICATIVO 76 ID FECHA DESCRIPCIÓN 13 17-04-2013 Obtener un listado de usuarios que alquilaron un libro. 14 17-04-2013 Cambiar ejemplares antes de alquilar (mientras está en estado pre- alquilado) 15 17-04-2013 Agregar un botón “lo queŕıa” cuando un libro se agota y desarrollar esta operación. Cuadro 4.8: Historia de Usuario. Iteracion 4. 4.4.2. Diseño: Cuando un libro se agota, en el catalogo de libros del modulo de estudiantes, se muestra un nuevo botón llamado “lo queŕıa” (Cuadro 4.8: ID 15), el cual ayuda a contabilizar la cantidad de veces que fue requerido este libro después de agotarse, podemos verlo en la Figura 4.61. Ademas, se habilitó un enlace que al seleccionarlo muestre los usuarios que han alquilado dicho ejemplar. Figura 4.61: Ejemplar agotado con botón “lo queŕıa” CAPÍTULO 4. MARCO APLICATIVO 77 En el área de libros del módulo de administración se muestra la totalidad de la demanda de los libros como un campo, en la Figura 4.62 se puede ver los libros ordenados por cantidad “demanda” y el campo “solicitudes” indica el número total. Figura 4.62: Listado de libros ordenado por demandado El cambio de ejemplares (Cuadro 4.8: ID 14)es la opción habilitada en el área de alquileres del módulo de administración, la cual aparece si el alquiler a editar se encuentra en estatus “pre-alquilado”. El usuario podrá cambiar un ejemplar por otro, según lo indique la lista de opciones que se despliega luego que se marque el botón “cambiar”, como se observa en la Figura 4.63. Ade- mas, se agregó un botón para eliminar ejemplares que le permite al administrador remover ejemplares de un alquiler. CAPÍTULO 4. MARCO APLICATIVO 78 Figura 4.63: Cambio de Ejemplares En este listado de ejemplares por cambiar, pueden encontrarse ejemplares con estatus disponibles o que pertenecen a otro alquiler con estado “pre-alquilado”, ya que en ambos casos los libros se encuentran todav́ıa en estanteŕıa. Cuando se decide el número del ejemplar por el cual se realizara el cambio, se procede a presionar el botón “cambiar” y este ejemplar se asigna al alquiler que se estaba editando. 4.4.3. Codificación Para obtener un listado de usuarios que alquilaron un ejemplar (Cuadro 4.8: ID 13) se realiza por medio de una consulta SQL como se muestra la Figura 4.64, donde se usa la tabla que relaciona un alquiler y un ejemplar llamada “line items”, para obtener los usuarios y al unir la tabla usuarios se obtuvo la información de cada uno. CAPÍTULO 4. MARCO APLICATIVO 79 Figura 4.64: Consulta de historial de usuarios que alquilaron un ejemplar Cada vez que un usuario selecciona el botón “lo queŕıa” (Cuadro 4.8: ID 15)se dispara un evento en Jquery el cual se encarga de ejecutar la petición de sumar una unidad mas al campo demanda que se almacena en la tabla de libros. El evento Jquery es el que observamos en la Figura 4.65, el cual ejecuta un procedimiento llamado “increment likes”. Figura 4.65: Evento Jquery para función “lo queŕıa” El método que incrementa en una unidad el campo demanda de la tabla libro, como se muestra en la Figura 4.66. CAPÍTULO 4. MARCO APLICATIVO 80 Figura 4.66: Agregar +1 al campo demanda Cuando se busca procesar el cambio de un ejemplar (Cuadro 4.8: ID 14), se recibe el parámetro de la vista que indica el número de ejemplar seleccionado para cambiar y depen- diendo de la condición de éste se realizará uno u otro proceso. Si el estatus del ejemplar era “disponible”, se procede a cambiar nuestro ejemplar a “disponible” y el seleccionado pasa a “alquilado”. Si es el otro caso, el cambio se realiza a nivel de alquileres, nuestro alqui- ler lo relacionamos con el ejemplar seleccionado y el alquiler que se relacionaba con este, pasa a nuestro ejemplar. Hay que recordar que se habla de “nuestro alquiler” porque este procedimiento se está realizando en la edición de un alquiler en el módulo de administración. Figura 4.67: Cambio de estatus de ejemplares CAPÍTULO 4. MARCO APLICATIVO 81 En la Figura 4.67 y 4.68, mostramos la consulta que acabamos de explicar. En la cual “line item” es la tabla relación existente entre un alquiler y un ejemplar. Figura 4.68: Cambio de registros relacionados Si existe un caso donde el administrador toma la decisión de eliminar un ejemplar, el sistema comienza cambiando el ejemplar a un estatus ”disponible”, permitiendo que pueda ser adquirido por otro usuario para ser alquilado, se modifican los registros de las tablas devolución, alquileres y lineitems como se muestra en la Figura 4.69, para completar el proceso. CAPÍTULO 4. MARCO APLICATIVO 82 Figura 4.69: Eliminar Ejemplares en Alquileres 4.4.4. Pruebas Se muestran las pruebas de esta iteración. CAPÍTULO 4. MARCO APLICATIVO 83 # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 12 Listar un historial de alquiler de un libro. Los ejemplares mostraran los usuarios que han alqui- lado dicho ejemplar. Se muestran todos los usua- rios que han alquilado dicho libro. 13 Cambiar un ejem- plar mientras esta pre-alquilado. Selec- cionar otro ejemplar pre-alquilado. Al seleccionar otro ejemplar pre-alquilado se intercam- bian solo los ejemplares. Se obtuvo el resultado espe- rado, ya que se hizo segui- miento a los registros en la tabla “line item” de la BD. 14 Cambiar un ejem- plar mientras esta pre-alquilado. Selec- cionar un ejemplar disponible. Al seleccionar cambio de ejemplar se habilita el lista- do de otros ejemplares del mismo libro que estén pre- alquilados o disponibles (en ambos casos están en estan- teŕıa). Al usar un ejemplar disponible Se cambió por un ejemplar disponible. El viejo ejem- plar cambia su estado de pre-alquilado a disponible. 15 Mostrar el botón “lo queŕıa” Debe aparecer el botón “lo queŕıa” y al presionarlo in- crementar el campo deman- da . Apareció el botón y al pre- sionarlo en base de datos se sumo +1 al campo deman- da. Cuadro 4.9: Pruebas. Iteracion 4. CAPÍTULO 4. MARCO APLICATIVO 84 4.5. Iteración 5: Roles y Solvencias. 4.5.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 16 23-05-2013 Establecer prioridades o roles en el módulo de administración para poder visualizar diferentes funcionalidades según el tipo de rol. 17 23-05-2013 En el comprobante de alquiler que genera el sistema cuando el usua- rio realiza un alquiler debeŕıa contener la escuela a la que pertenece el usuario. 18 04-06-2013 Hay un error y se permite solicitar solvencias a los usuarios teniendo libros alquilados. 19 04-06-2013 Cuando el estudiante emita la solvencia indicarle que se realizó la solicitud y darle la opción a ver el PDF que llevará a la bolsa del libro. Cuadro 4.10: Historia de Usuario. Iteracion 5. 4.5.2. Diseño Al realizar cambios en las solvencias para no permitir solicitarlas si se deben libros (Cua- dro 4.10: ID 18), también se añadió la “escuela” en la constancia y al final una ayuda visual, donde se muestra un enlace donde tendrá acceso a la constancia de solvencia en PDF (Cuadro 4.10: ID 19), como lo muestra la Figura 4.70. CAPÍTULO 4. MARCO APLICATIVO 85 Figura 4.70: Notificación, enlace y constancia solicitada. Para establecer prioridades de roles y privilegios (Cuadro 4.10: ID 16), se agregó un nuevo campo en el área de usuarios del módulo de administración. Este nuevo campo se habilita cuando se selecciona en rol la opción “administrador” y despliega 2 opciones a elegir: observador o privilegiado, como se muestra en la Figura 4.71. CAPÍTULO 4. MARCO APLICATIVO 86 Figura 4.71: Extensión de roles administración. Por los momentos, los administradores de tipo “observador” no tienen opción de editar ni eliminar en ningún área del módulo de administración, excepto en el área de solvencias donde tiene la posibilidad de marcar como entregado las solvencias, como se observa en la Figura 4.72. Figura 4.72: Vista administrador “Observador” CAPÍTULO 4. MARCO APLICATIVO 87 4.5.3. Codificación Primero analizaremos el cambio en el comprobante de alquiler (Cuadro 4.10: ID 17), donde se agrega la escuela en la consulta que genera el reporte y en el diseño del mismo se agrega el lugar donde aparecerá al crearse el PDF. Luego se establecieron las restricciones al momento de solicitar solvencias en el módulo de estudiantes (Cuadro 4.10: ID 18), donde se consulta si existe algún libro sin devolver como se observa en la Figura 4.73. Figura 4.73: Función de solvencia Se hace una llamada a esta función que retorna “verdad” o “falso” como condición para de guardar o no la solicitud de solvencia, como se observa en la Figura 4.74. CAPÍTULO 4. MARCO APLICATIVO 88 Figura 4.74: Método para guardar solicitud Al final de esta iteración se analiza el proceso de creación de roles (Cuadro 4.10: ID 16), donde podemos verlo como una variación del modelo de usuarios permitiendo recibir una variable mas que es el campo “vista”, la cual servirá para definir el tipo de privilegio que tienen los administradores. El proceso para implementar los privilegios de usuario en el módulo de administración, inicia cundo el usuario se autentica, se guarda la variable que indica sus privilegios de acceso y por medio de Jquery se deshabilitan las opciones de edición y eliminación, con el evento que se observa en la Figura 4.75. CAPÍTULO 4. MARCO APLICATIVO 89 Figura 4.75: Evento eliminar opción de editar o eliminar Además, para restringir a nivel de servidor, se condiciona las acciones de “edit” y “delete” para ser usadas solo por administradores de tipo “Privilegiado” con la sentencia que se muestra en la Figura 4.76. Figura 4.76: Condicional para edición 4.5.4. Pruebas Se muestran las pruebas de esta iteración. CAPÍTULO 4. MARCO APLICATIVO 90 # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 16 Probar roles de admi- nistración para usua- rios de tipo “Observa- dor” Las funcionalidades de este usuario debeŕıan ser mı́ni- mas y solo poder manipular el área de solvencias. Se logra mantener igual- dad de funcionalidades en el área de solvencias, pa- ra las demás funciones en el módulo de administración solo tiene permiso de obser- var, no puede modificar ni eliminar. 17 Probar roles de admi- nistración con todos los permisos. Todas las funcionalidades de los administradores con todos los derechos deben es- tar permitidas y activas. Una vez establecido el sis- tema de roles se probó las funcionalidades de los ad- ministradores que tienen to- dos permisos “privilegiado” y funcionan perfectamente. 18 Realizar una solvencia como estudiante con “libros alquilados” Al intentar realizar la solici- tud de solvencia, no se per- mite. Se hizo la prueba de solici- tar una solvencia teniendo libros sin entregar, se noti- fica que no se puede realizar la solicitud por no estar sol- vente. 19 Realizar una solvencia como estudiante sin “libros alquilados” Al intentar realizar la solici- tud de solvencia, se permite realizarla. Se permitió realizar la sol- vencia, se mostró la notifica- ción de aprobación y el en- lace para visualizar la cons- tancia en PDF. Cuadro 4.11: Pruebas. Iteracion 5. CAPÍTULO 4. MARCO APLICATIVO 91 4.6. Iteracion 6: Creación del módulo de profesores. 4.6.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 20 21-10-2013 Crear módulo de profesores donde se establezcan diferentes roles. 21 21-10-2013 Crear y administrar las sugerencias de libros de profesores. Cuadro 4.12: Historia de Usuario. Iteracion 6. 4.6.2. Diseño El proceso de creación de roles (Cuadro 4.12: ID 20), es una variación del modelo de usua- rios donde el campo “vista” permitirá identificar el tipo de profesor: normal o coordinador. Véase Figura 4.77. Figura 4.77: Extensión de roles profesores. Cuando un usuario logra autenticarse como profesor se le despliega una vista y un CAPÍTULO 4. MARCO APLICATIVO 92 menú donde podrá revisar sugerencias y/o visualizar la lista de libros que se encuentran en la Bolsa del Libro, como se observa en la Figura 4.78. Figura 4.78: Inicio del Módulo de Profesores Para crear las sugerencias (Cuadro 4.12: ID 21)se diseñó la tabla “sugerencias.en la BD con la estructura que se muestra en la Figura 4.79. Figura 4.79: Estructura de BD: Tabla sugerencias CAPÍTULO 4. MARCO APLICATIVO 93 Para listar, crear, editar o eliminar sugerencias se diseñaron las vistas que dan acceso a cada una de estas operaciones. El listado de sugerencias se puede ver en la Figura 4.80, mientras que el formulario de creación o edición se observa en la Figura 4.81, que permite guardar el ISBN, titulo, autor y una breve descripción del libro a sugerir. Figura 4.80: Listado de sugerencias Figura 4.81: Formulario de sugerencia CAPÍTULO 4. MARCO APLICATIVO 94 4.6.3. Codificación Para establecer el módulo de administración (Cuadro 4.12: ID 20) se creó un nuevo contro- lador “ppal profesores admin controller” que se encarga de gestionar el flujo de información que pasa a las vistas y los procesos que se pueden ejecutar en este módulo. Para acceder al módulo de profesores se modificó el proceso que se encuentra en el con- trolador de “sesión” el cual está encargado de redirigir a los estudiantes, administradores y ahora a los profesores a sus módulos únicamente. El cambio en este proceso se puede observar en la Figura 4.82, que refleja las condiciones que existen para manejar los roles y privilegios de acceso a los módulos. Figura 4.82: Codigo de redirección según el rol Con el uso de “Scaffolding” de Rails se generó todo el código necesario para listar, mostrar, crear, editar o eliminar las sugerencias (Cuadro 4.12: ID 21). Esta instrucción genera el modelo, el controlador, las vistas, estructura en la BD y toda la configuración necesaria para CAPÍTULO 4. MARCO APLICATIVO 95 tener acceso a las acciones y poder almacenar las sugerencias realizadas por sistema. En la vista que despliega la lista de sugerencias se restringieron los permisos para editar y eliminar sugerencias, si la misma no te pertenece. Los métodos que permitirán el manejo de sugerencias se pueden apreciar en las Figu- ras 4.83, 4.84y 4.85. Los cuales son los encargados de crear, editar o eliminar una sugerencia en la BD. Figura 4.83: Código de creación de sugerencias CAPÍTULO 4. MARCO APLICATIVO 96 Figura 4.84: Código de actualización de sugerencias Figura 4.85: Código de eliminación de sugerencias CAPÍTULO 4. MARCO APLICATIVO 97 4.6.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 20 Autenticarse como profesor y mostrar el módulo de profesores. Apenas ingreses al sistema como profesor debes poder ver el módulo de profesores. Al ingresar al sistema como profesor se observan funcio- nalidades de administración como profesor. 21 Se busca la manera de ingresar al módulo de estudiantes o adminis- tración estando auten- ticado como profesor. No se puede acceder a fun- cionalidades de módulos que no sea el de profesores. Se autenticó como profesor, y luego por medio de enla- ces, no se logró acceder a funcionalidades que no per- tenecen al módulo de profe- sores. 22 Creación, edición, eli- minación de sugeren- cias Se debe poder crear una su- gerencia y solo puede editar y/o eliminar sugerencias de el mismo. Se obtienen los resultados esperados, donde no se per- miten modificar sugerencias que no sean propias. Cuadro 4.13: Pruebas. Iteracion 6. CAPÍTULO 4. MARCO APLICATIVO 98 4.7. Iteracion 7: Materias en la Bolsa del Libro. 4.7.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 22 13-11-2013 Crear un listado de materias que se dictan en toda la Facultad. 23 13-11-2013 Agregar a las materias una lista de libros sugeridos en el curso y se encuentren en la Bolsa del Libro. 24 13-11-2013 Crear listas de correos de estudiantes a los cuales se les pueda enviar los libros sugeridos por materias. Cuadro 4.14: Historia de Usuario. Iteracion 7. 4.7.2. Diseño Se crea una tabla donde se guardan todas las materias que se dictan en la Facultad de Ciencias, para esto se diseñó la estructura de la BD (Cuadro 4.14: ID 22), como se muestra en la Figura 4.86. Figura 4.86: Estructura de BD: Tabla materias CAPÍTULO 4. MARCO APLICATIVO 99 Para listar, crear, editar o eliminar materias (Cuadro 4.14: ID 22) se diseñaron las vistas que dan acceso a cada una de estas operaciones. El listado de materias se puede ver en la Figura 4.87, mientras que el formulario de creación o edición se observa en la Figura 4.88, que permite guardar el código, nombre y escuela. Además, se visualiza un campo llamado “libro” (Cuadro 4.14: ID 23) en el cual se va escribiendo el t́ıtulo, el autor o la cota de un libro y se despliega una lista de los libros que coincidan con lo que se está escribiendo. Este listado tiene como fuente la Bolsa del Libro, eso significa que si no se selecciona un libro del listado que aparece, este no será guardado. Figura 4.87: Listado de materias Una vez se tiene seleccionado el libro, se presiona el botón “agregar” y se mostrara el mismo mas abajo (se puede eliminar si ya no se desea agregar este libro). Para finalizar la creación o edición de la materia, se procede a guardar. CAPÍTULO 4. MARCO APLICATIVO 100 Figura 4.88: Editar Materia Luego de crear las materias y una lista de libros, se procede a guardar una lista de estudiantes para enviar v́ıa correo electrónico (Cuadro 4.14: ID 24) la información recolectada en las materias, por lo cual se desarrolló la estructura completa (tabla en la BD, modelo, controladores y vistas) que permiten almacenar la lista de correos electrónicos de aquellas personas a las cuales se quiere enviar los enlaces de los libros sugeridos dado una determinada materia. Se agregó esta nueva opción al menú de profesores y se pueden observar la listas creadas para difundir la información de una materia, como se muestra en la Figura 4.89, que tam- bién refleja las operaciones que se pueden realizar con cada lista (crear, editar, eliminar) y aparecerá la opción de “enviar email” cuando la lista tenga por lo menos una dirección de CAPÍTULO 4. MARCO APLICATIVO 101 correo electrónico guardada. Figura 4.89: Lista de contactos por materias En la Figura 4.90 podemos observar el formulario que permite asignar la materia y agregar la lista de correos separada por comas (,). Figura 4.90: Formulario de env́ıo de información de materias CAPÍTULO 4. MARCO APLICATIVO 102 4.7.3. Codificación La creación de materias y la lista de correos se hicieron mediante el uso de “Scaffolding” de Rails. Con esto tenemos la estructura básica para listar, mostrar, crear, editar y eliminar materias o listas de correos. Sin embargo, para almacenar el listado de libros se realizaron diferentes procesos que permit́ıan listar, agregar o eliminar los libros dentro del formulario de materias. Figura 4.91: Función que lista libros JavaScript Por medio de Jquery capturamos el evento mientras se va escribiendo en el campo “libro” (Cuadro 4.14: ID 23) del formulario de materias. En la Figura 4.91 se hace una llamada a una función “datacomplete” que se encarga de obtener la lista de libros de la Bolsa del Libro como se muestra en la Figura 4.92 gracias al método “autocomplete books” que se define en la Figura 4.93. CAPÍTULO 4. MARCO APLICATIVO 103 Figura 4.92: Función que lista libros de BD Figura 4.93: Función que lista libros de BD CAPÍTULO 4. MARCO APLICATIVO 104 Una vez seleccionado el libro se procede a ejecutar el botón ”agregar” que por medio de Jquery permite añadir la cantidad de libros que se seleccionen, para ser almacenados en la tabla “materia libro” que tiene la estructura mostrada en la Figura 4.94. Figura 4.94: Tabla relación entre libro y materia En la creación o edición de materias el botón de “agregar” solo añade un campo de libro en el formulario, solo al guardar los cambios de materias se modifican los registros de la tabla materia libro. La función del botón agregar la podemos ver en la Figura 4.95. Figura 4.95: Código para agregar libros en materias CAPÍTULO 4. MARCO APLICATIVO 105 En el área de lista de correos por materias del módulo de profesores, se creó la acción “env́ıo de correos” (Cuadro 4.14: ID 24), la cual permite obtener la materia seleccionada y de los libros relacionados crea un enlace a la Bolsa del Libro por cada uno y el contenido del email, se puede ver como la Figura 4.96. Figura 4.96: Contenido del correo electrónico 4.7.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 23 Creación, edición, eli- minación de materias que se dictan en la fa- cultad. Debe poderse crear, editar y eliminar materias. Se logra crear materias, lue- go editarlas. Al final se per- mite eliminarla. CAPÍTULO 4. MARCO APLICATIVO 106 24 Agregar o eliminar li- bros que se asocian a cada materia. Se debe poder agregar y eli- minar libros que se asocia- ron a una materia. En el formulario de crea- ción o edición de una mate- ria se permite agregar una lista de libros y guardarlos. Si nuevamente se editan se logró agregar más libros a la lista e inclusive eliminar li- bros que ya estaban añadi- dos. Cuadro 4.15: Pruebas. Iteracion 7. 4.8. Iteracion 8: Comentarios por sugerencia. 4.8.1. Planificacion Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 25 13-11-2013 Se deben poder generar comentarios de las sugerencias hechas por los profesores, solo deben realizarlas otros profesores. Cuadro 4.16: Historia de Usuario. Iteracion 8. CAPÍTULO 4. MARCO APLICATIVO 107 4.8.2. Diseño Se crea una tabla donde se guardan todos los comentarios realizados al visualizar el detalle de una sugerencia, para esto se diseñó la estructura de la BD, como se muestra en la Figura 4.97. Figura 4.97: Estructura de BD. Tabla comentarios Tal como se muestra en la Figura 4.98 para poder realizar un comentario se debe ingresar en la sugerencia, poder observar la lista de comentarios y llenar el formulario para generar uno nuevo. Es muy simple, solo se escribe el comentario y se puede calificar del 1 al 5, para indicar respalda la sugerencia. Hay que destacar, que un usuario puede eliminar o editar solo sus propios comentarios. CAPÍTULO 4. MARCO APLICATIVO 108 Figura 4.98: Crear, editar o eliminar comentario 4.8.3. Codificación La creación de comentarios se realizó mediante el uso de “Scaffolding” de Rails. Con esto obtenemos la estructura básica para listar, mostrar, crear, editar y eliminar comentarios. La única diferencia es que en este caso, todas las operaciones de comentarios se encuentran inmersas en la vista de sugerencias. Al momento de visualizar una sugerencia debe hacerse una búsqueda de los comentarios que tenga relacionados como se muestra en la Figura 4.99. La edición se realiza en una vista CAPÍTULO 4. MARCO APLICATIVO 109 aparte y la eliminación si se ejecuta desde la misma vista de sugerencia. Figura 4.99: Código para mostrar sugerencia Hay que destacar que al listar las sugerencias también hay información que viene dada por los comentarios, como la calificación (estrellas) que resalta el respaldo de una sugerencia. 4.8.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 25 Se deben poder gene- rar comentarios de las sugerencias Se debe poder crear, editar y/o eliminar un comentario de sugerencia. Los resultados son los espe- rados. CAPÍTULO 4. MARCO APLICATIVO 110 26 No se debe poder edi- tar o eliminar comen- tarios de las sugeren- cias que no sean pro- pias Se debe poder editar y/o eli- minar un comentario de su- gerencia si lo hizo el mismo usuario. Se logra editar y/o eliminar un comentario propio. Sólo se pueden ver los comenta- rios de otros usuarios, no se pueden editar ni eliminar. Cuadro 4.17: Pruebas. Iteracion 8. 4.9. Iteracion 9: Profesores invitados y difundir libros sugeridos. 4.9.1. Planificación Se muestran las historias de usuario de esta iteración. ID FECHA DESCRIPCIÓN 26 22-01-2014 Se debe poder crear un profesor invitado con privilegios limitados, y que solo pueda realizar comentarios sobre las sugerencias 27 22-01-2014 Se puede habilitar la funcionalidad de mandar correos electróni- cos una vez creada una sugerencia para poder difundir a ciertos profesores dicha sugerencia. Cuadro 4.18: Historia de Usuario. Iteracion 9. CAPÍTULO 4. MARCO APLICATIVO 111 4.9.2. Diseño Para crear un profesor invitado (Cuadro 4.18: ID 26), se despliega un formulario como se observa en la Figura 4.100, que permite capturar datos necesarios y aśı ingresar un usua- rio en el sistema. Es necesario conocer nombre, correo y dependencia, luego se enviará la información para autenticarse al correo electrónico proporcionado. Figura 4.100: CrearProfesorInvitado Los privilegios de este tipo de profesor son muy limitados, tan solo puede visualizar sugerencias y dentro de ellas realizar comentarios. No puede realizar sugerencias Para crear el listado de correos electrónicos de profesores que podŕıan hacer comentarios sobre un libro sugerido (Cuadro 4.18: ID 27), se habilitó un campo en el formulario de sugerencias, en el cual podrán agregarse los correos separados por coma (,) y luego desde la lista de sugerencias se tendrá la opción de enviar el email. CAPÍTULO 4. MARCO APLICATIVO 112 4.9.3. Codificación Para crear un profesor invitado (Cuadro 4.18: ID 26) el formulario es muy básico por lo que algunos datos deben crearse en el controlador. “Cedula” y “password” serán creados alea- toriamente, las caracteŕısticas de la “cedula” tiene un formato parecido a este “guest XXXX” donde XXXX son d́ıgitos aleatorios, como se muestra en la Figura 4.101. Figura 4.101: Código para guardar Profesor Invitado En la vista principal de profesores, si ingresa un profesor “invitado” se dejan de mostrar del menú todas las opciones excepto las sugerencias. Dentro de las sugerencias la opción de CAPÍTULO 4. MARCO APLICATIVO 113 crear también esta deshabilitada. 4.9.4. Pruebas Se muestran las pruebas de esta iteración. # DESCRIPCIÓN DEL CASO DE PRUEBAS RESULTADO ESPERADO RESULTADO OBTENIDO 27 Se crea un profesor in- vitado desde el módu- lo de profesores. Ingresa como profesor (Coordinador o Normal) y se crea un profesor invitado. Una vez se ingresa como profesor se crea un profesor invitado agregando su co- rreo electrónico y esto gene- ra un contenido con una ce- dula de invitado y clave pa- ra acceder al sistema. 28 Se hacen comentarios y se prueba restriccio- nes de edición y elimi- nación de un profesor invitado. Al ingresa como profesor in- vitado no se puede eliminar ni editar comentarios que no sean propios. Una vez se ingresa como profesor invitado se pue- de visualizar las sugerencias hechas. Al ver cada sugeren- cia no existe la opción de editar y eliminar comenta- rios de otros usuarios. Tam- poco aparece el botón para crear una sugerencia. CAPÍTULO 4. MARCO APLICATIVO 114 29 Se prueba una lista de correos a los cuales se manda un enlace pa- ra poder ver una suge- rencia. Se debe poder agregar una lista de correos electrónicos y enviar el contenido por co- rreo. Una vez creada o al edi- tar una sugerencia se agregó una lista de correos electrónicos, se guardó, esto habilito y ejecuto la funcionalidad de enviar por correo y llego el correo. Cuadro 4.19: Pruebas. Iteracion 9. Conclusiones Este Trabajo Especial de Grado fue el resultado del estudio de los diversos servicios que presta la aplicación Web de la Bolsa del Libro, la solución a ciertas deficiencias del sistema, el desarrollo de nuevas funcionalidades y el diseño e implementación de un nuevo módulo de profesores. Esta nueva versión del sistema, permite a los administradores visualizar estad́ısticas ac- tuales e históricas, revisión de reportes donde tendrán la posibilidad de filtrar información para mejorar el enfoque, manejar privilegios de usuarios dando la posibilidad de crear un administrador con menos jerarqúıa o privilegios y visualizar información sin poder modifi- carla. Entre otros avances, hay que resaltar la posibilidad que tienen ahora los usuarios del módulo de administración para cambiar o modificar ejemplares antes de ser entregados los libros. Estos procesos no se habian contemplado al momento de automatizar los servicios, pero durante el proceso manual seguramente eran tan obvios que se pasaron por alto. Se realizaron una serie de cambios que permit́ıan visualizar más información en los repor- tes, realizar búsquedas por nuevos parámetros, acomodar formularios y restringir la solicitud de solvencias por parte de los estudiantes si todav́ıa poseen libros alquilados. 115 CAPÍTULO 4. MARCO APLICATIVO 116 Para complementar el sistema se desarrolló un módulo de profesores siguiendo un modelo flexible que permitiese realizar mantenimientos correctivos, adaptativos durante la captura de necesidades. Principalmente fue diseñado para almacenar las sugerencias de los profesores sobre los libros que debeŕıan ser adquiridos por la Bolsa del Libro, luego se agregó una sección que permite ingresar las materias que se dictan en la facultad anexando a cada una la lista de libros recomendados que puedan ser alquilados en la Bolsa. Se crearon dos tipo de jerarqúıa de profesores (normal y coordinador), que actualmente no tienen diferencia pero en algún momento lo tendrán. Las sugerencias que los profesores realicen las podrán visualizar los administradores, sin embargo para dar mayor información sobre dicha propuesta los demás profesores pueden realizar comentarios refutando o apoyando la necesidad de adquirir dicho libro, inclusive se puede estimar del 1 al 5 que tan importante es la sugerencia. Para conocer la opinión de otros profesores que no se encuentran en el sistema pero se presume pueden ser de gran ayuda al momento de calificar un libro sugerido, se agregó la posibilidad de enviar dicha sugerencia a uno o varios contactos por v́ıa correo electrónico y ellos ingresarán a la aplicación como profesores “invitados” para dar su opinión. Este nuevo tipo de profesor se creó con privilegios mı́nimos en el módulo de profesores pero le permitirá visualizar las sugerencias y dar su opinión sobre ellas. La creación de este nuevo profesor, se realiza a través de un formulario, el cual lo agrega al sistema como usuario y le suministra toda la información de ingreso por v́ıa correo electrónico. Para finalizar podemos certificar que los nuevos desarrollos de la aplicación, permitieron actualizar los principales servicios ofrecidos en la Bolsa del Libro, satisfaciendo las necesida- CAPÍTULO 4. MARCO APLICATIVO 117 des actuales de los usuarios a nivel administrativo, estudiantil y docente. Recomendaciones En el área de administración para conocer si un estudiante esta solvente se busca que no tenga ningún ejemplar alquilado, sin embargo seŕıa mejor si al pedir la cedula del usuario el sistema respondiera si este estudiante está en deuda o no, y por medio de un link poder ver su historial de alquileres. Añadir nuevas funcionalidades al Módulo de Pre-Alquiler, permitiendo que en el mismo se efectúe la asignación de los ejemplares solicitados por los estudiantes, tomando en cuenta un estudio socio-económico que facilite dicha asignación. Implementar el Módulo de Venta de Libros. Existe una gran cantidad de libros en la Bolsa del Libro que se deberian vender para obtener fondos. No solo es necesario los fondos sino que tambien hay necesidad de espacio para nuevos libros. Buscar la forma de no tener que imprimir un comprobante, sino que se trabaje con in- formación digital y se mantenga la confiabilidad. 118 CAPÍTULO 4. MARCO APLICATIVO 119 Por último, se plantea la idea de crear un nuevo módulo, o área donde se puedan ingresar libros digitales (Español o Ingles). Bibliograf́ıa [1] Araujo Maŕıa y Pereira Cidalia, Desarrollo de aplicaciones de comercio electróni- co usando software libre. Caso de estudio: Bolsa del Libro de la Facultad de Ciencias de la UCV. T.E.G., Septiembre 2007. 9 [2] Jiménez Andreina y Oviedo Joselyn, Diseńo e Implementación de una Aplicación Web para la automatización de los procesos de la Bolsa del Libro. T.E.G., Septiembre 2011. 9 [3] Perńıa Arcadio A. y Capote Kenny G., Desarrollo de un Sistema Web para El Control de Los Procesos de La Bolsa Del Libro. T.E.G., Octubre 2012. 4, 9 [4] Ruby S, Thomas D, Hansson D., Agile Web Development with Rails. Dallas, Texas: The Pragmatic Bookshelf., (2011). 39 [5] Ireport Getting Started, Obtenido el 14 de julio de 2013, desde http://community.jaspersoft.com/ 46 [6] Bridge from RoR to Jasper, Obtenido el 18 de Julio de 2013, desde http://rubygems.org/gems/jasper-bridge/. 120 BIBLIOGRAFÍA 121 [7] Danciu Teodor and Chirita Lucian., The Definitive Guide to JasperReports, Apress.,(2007). 45 [8] Acerca de Ruby., Consultado el 02 de Julio de 2014, desde www.ruby- lang.org/es/about/ 40 [9] Comenzando con Rails. Componentes., Consultado el 10 de Octubre de 2014, desde http://gomix.fedora-ve.org/projects/ruby/wiki/Comenzando con Rails- componentes/ 41 [10] IBM., Gúıa del Estudiante Base de Datos I., 2007. 43 [11] Extreme Programming. Gentle Introduction., Consultado el 02 de Julio de 2013, desde http://extremeprogramming.org/ [12] Pressman Roger S., Ingenieŕıa del Software. Un enfoque práctico. McGraw Hill In- teramericana, sixth edition, 2006. 51, 52, 53 Apéndice Para el estudiante que continue con el desarrollo de los procesos en la Bolsa del Libro aqúı están algunos consejos: Hay que tener en cuenta que el uso de Git como Sistema Controlador de Versiones o VCS “version-control system”, viene acompañado de una GEMA llamada “Capistrano” que permite subir de manera más simple los cambios al servidor. La secuencia que permite esto es básicamente la siguiente: git add . : detecta los cambios hechos git commit[Aqúı colocar información de los cambios que se van a subir] : Se prepara para subir los cambios detectados y le asigna una información como etiqueta. bundle pack : Se detectan las gemas usadas en el area de desarrollo. git push : Se encarga de subir los cambios al servidor. cap deploy : Este último comando provcara que es sistema deje de estar activo, para solucionar esto, por medio de la consola debemos ubicarnos en el directorio que con- 122 BIBLIOGRAFÍA 123 tiene los cambios que se acaban de subir al servidor y darle los permisos 777. La dirección en el servidor es: cd ../home/rubys/work/bolsadellibro/ Tanto para hacer push como para entrar en el servidor se requieren claves de acceso. Estas seran entregadas en su momento por el Profesor a cargo. JasperReport: esta herramienta permite hacer los reportes de la Bolsa del Libro. Se recomienda instalar ireport y junto a este una version de Java. Introducción Planteamiento del Problema Descripción del Problema Objetivo Justificación Alcance Marco Conceptual Antecedentes Módulo de Administradores Módulo de Estudiantes Alquileres (Nivel Funcional - Modulo de Estudiantes) Alquileres (Nivel Funcional - Modulo del Administrador) Marco Tecnológico Ruby Ruby on Rails (RoR) MySQL Git JasperReports Jquery Programación Extrema (XP) Adaptación XP Iteraciones Planificación Diseño Codificación Pruebas Marco Aplicativo Iteracion 1: Carga de usuarios a la BD y cálculo de estadísticas Planificación Diseño Codificación Pruebas Iteracion 2: Liberación de libros pre-alquilados y búsqueda de alquileres Planificación Diseño Codificación Pruebas Iteracion 3: Reportes y cambios varios. Planificación Diseño Codificación Pruebas Iteracion 4: Historial y cambio de ejemplares. Planificacion Diseño: Codificación Pruebas Iteración 5: Roles y Solvencias. Planificación Diseño Codificación Pruebas Iteracion 6: Creación del módulo de profesores. Planificación Diseño Codificación Pruebas Iteracion 7: Materias en la Bolsa del Libro. Planificación Diseño Codificación Pruebas Iteracion 8: Comentarios por sugerencia. Planificacion Diseño Codificación Pruebas Iteracion 9: Profesores invitados y difundir libros sugeridos. Planificación Diseño Codificación Pruebas Conclusiones Recomendaciones Apéndice