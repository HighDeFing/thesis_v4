Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Trabajo Especial de Grado: Desarrollo de Un Módulo Web Para la Gestión de Planes de Estudio en el Sistema de Gestión Académica CONEST José T. Hernández C. V-16.179.441 Tutora: Prof. Jossie Zambrano Octubre, 2012 2 Resumen La División de Control de Estudios es la dependencia administrativa de la Facultad de Ciencias que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de las licenciaturas de pregrado. La División presta algunos de sus servicios a través del Sistema de Gestión Académica de Control de Estudios (CONEST) facilitando las operaciones de los procesos administrativos de la Facultad. Sin embargo, el sistema CONEST no cuenta con una aplicación que permita gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad. Este Trabajo Especial de Grado tiene como objetivo desarrollar un módulo web del sistema CONEST que permita gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias. Además de automatizar parte del trabajo de verificación de requisitos curriculares realizado por el Departamento de Grado de la División de Control de Estudios. El método ágil de desarrollo de software implementado para estructurar, planificar y controlar el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST es una adaptación de la Programación Extrema. Palabras Clave: Control de Estudios, Gestión de Planes de Estudio, Verificación de Requisitos Curriculares, Aplicación Web, Ruby on Rails. 3 Índice General Resumen ........................................................................................................................................ 2 Introducción .................................................................................................................................. 7 Capítulo 1. Planes de Estudio de la Facultad de Ciencias................................................................. 9 1.1 Licenciatura en Biología ...................................................................................................... 11 1.2 Licenciatura en Computación ............................................................................................. 15 1.3 Licenciatura en Física .......................................................................................................... 17 1.4 Licenciatura en Geoquímica................................................................................................ 21 1.5 Licenciatura en Matemática ............................................................................................... 22 1.6 Licenciatura en Química ..................................................................................................... 26 Capítulo 2. Tecnologías Web ........................................................................................................ 30 2.1 HTML5 ............................................................................................................................... 31 2.2 CSS3 ................................................................................................................................... 32 2.3 jQuery ................................................................................................................................ 33 2.4 Ruby on Rails ...................................................................................................................... 34 2.5 Haml .................................................................................................................................. 35 2.6 Sass .................................................................................................................................... 36 2.7 MySQL ................................................................................................................................ 36 Capítulo 3. Método Ágil de Desarrollo de Software ...................................................................... 37 3.1 Programación Extrema (XP) ................................................................................................ 38 3.2 Adaptación del Método Ágil XP .......................................................................................... 40 3.2.1 Planificación ................................................................................................................ 40 3.2.2 Diseño ......................................................................................................................... 41 3.2.3 Codificación ................................................................................................................. 41 3.2.4 Pruebas ....................................................................................................................... 42 Capítulo 4. Marco Aplicativo ........................................................................................................ 44 4.1 Iteración 0 .......................................................................................................................... 44 4.1.1 Planificación ................................................................................................................ 44 4.1.2 Diseño ......................................................................................................................... 50 4.1.3 Codificación ................................................................................................................. 51 4.1.4 Pruebas ....................................................................................................................... 51 4 4.2 Iteración 1 .......................................................................................................................... 52 4.2.1 Planificación ................................................................................................................ 52 4.2.2 Diseño ......................................................................................................................... 52 4.2.3 Codificación ................................................................................................................. 61 4.2.4 Pruebas ....................................................................................................................... 72 4.3 Iteración 2 .......................................................................................................................... 76 4.3.1 Planificación ................................................................................................................ 76 4.3.2 Diseño ......................................................................................................................... 77 4.3.3 Codificación ................................................................................................................. 80 4.3.4 Pruebas ....................................................................................................................... 87 Conclusiones ................................................................................................................................ 90 Recomendaciones ........................................................................................................................ 92 Referencias Bibliográficas ............................................................................................................ 93 Anexos ......................................................................................................................................... 94 5 Índice de Figuras Figura 1. Plan de Estudio de Biología. ........................................................................................... 13 Figura 2. Componente Docente de Biología. ................................................................................ 15 Figura 3. Plan de Estudio de Computación. .................................................................................. 17 Figura 4. Plan de Estudio de Física. ............................................................................................... 19 Figura 5. Componente Docente de Física. .................................................................................... 21 Figura 6. Plan de Estudio de Geoquímica...................................................................................... 22 Figura 7. Plan de Estudio de Matemática. .................................................................................... 24 Figura 8. Componente Docente de Matemática. .......................................................................... 26 Figura 9. Plan de Estudio de Química. .......................................................................................... 28 Figura 10. Componente Docente de Química. .............................................................................. 29 Figura 11. Arquitectura Cliente-Servidor. ..................................................................................... 31 Figura 12. Ciclo de Vida Para el Desarrollo Ágil de Software. ........................................................ 37 Figura 13. Formato de las Tarjetas de Historias. ........................................................................... 40 Figura 14. Diseño General del Sistema CONEST. ........................................................................... 50 Figura 15. Listado de Planes de Estudio. ....................................................................................... 53 Figura 16. Editar Planes de Estudio. ............................................................................................. 54 Figura 17. Tabla distribucion_requisito_plan. ............................................................................... 55 Figura 18. Listado de Requisitos Curriculares Distribuidos por Semestre. ..................................... 55 Figura 19. Listado de Asignaturas. ................................................................................................ 57 Figura 20. Editar Asignaturas. ...................................................................................................... 58 Figura 21. Tabla materia_en_plan. ............................................................................................... 59 Figura 22. Campos Obligatorios. .................................................................................................. 60 Figura 23. Diálogos Emergentes. .................................................................................................. 60 Figura 24. Mensajes de Confirmación. ......................................................................................... 61 Figura 25. Mensajes de Error. ...................................................................................................... 61 Figura 26. Modelo plan.rb. ........................................................................................................... 61 Figura 27. Vista plan_estudio/index.html.haml. ........................................................................... 62 Figura 28. Vista Parcial plan_estudio/_formulario.html.haml. ...................................................... 63 Figura 29. Método plan_estudio/guardar..................................................................................... 64 Figura 30. Vista Parcial plan_estudio/_notificacion.html.haml. .................................................... 64 6 Figura 31. Método plan_estudio/actualizar. ................................................................................. 64 Figura 32. Método plan_estudio/eliminar. ................................................................................... 65 Figura 33. Método plan_estudio/editar. ...................................................................................... 65 Figura 34. Vista plan_estudio/editar.html.haml. .......................................................................... 66 Figura 35. Script plan_estudio.js.coffee. ....................................................................................... 66 Figura 36. Vista Parcial plan_estudio/_distribucion_requisitos_curriculares.html.haml. ............... 67 Figura 37. Método plan_estudio/crear_requisito_curricular. ....................................................... 68 Figura 38. Modelo requisito_graduacion_plan.rb ......................................................................... 68 Figura 39. Método asignatura/autocomplete. .............................................................................. 69 Figura 40. Script asignatura.js.coffee (Autocomplete). ................................................................. 70 Figura 41. Método asignatura/crear_prelacion. ........................................................................... 71 Figura 42. Método asignatura/buscar_planes_estudio_asignatura. .............................................. 71 Figura 43. Script asignatura.js.coffee (Listas Desplegables)........................................................... 72 Figura 44. Verificación de Requisitos Curriculares. ....................................................................... 77 Figura 45. Asignaturas Aprobadas/Asignaturas No Aprobadas. .................................................... 78 Figura 46. Tabla historial_academico. .......................................................................................... 78 Figura 47. Resultado de la Verificación de Requisitos Curriculares................................................ 79 Figura 48. Tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. ............................... 79 Figura 49. Verificación de la Opción Profesional. .......................................................................... 80 Figura 50. Método plan_estudio/verificar_requisitos (Requisitos Curriculares). ........................... 81 Figura 51. Vista Parcial _verificar_requisitos_academicos.html.erb. ............................................. 84 Figura 52. Método plan_estudio/verificar_requisitos (Opción Profesional). ................................. 85 Figura 53. Vista Parcial _resumen_opcion_profesional.html.erb. ................................................. 86 7 Introducción La Universidad Central de Venezuela (UCV) es la institución de educación superior más antigua de Venezuela, fundada en 1721. En la actualidad, mantiene una matrícula estudiantil que ronda los 54.222 estudiantes de pregrado y 8.317 estudiantes de postgrado, con 4.790 profesores y 4.514 empleados administrativos, distribuidos en 9 Facultades en Caracas, 2 Facultades en Maracay, 5 Núcleos de Estudios supervisados y 12 Estaciones Experimentales en diferentes regiones del país. La UCV ofrece aproximadamente 351 carreras universitarias entre pregrado y postgrado. Las carreras que se imparten en esta casa de estudios están conformadas por un conjunto de asignaturas y requisitos curriculares que se deben satisfacer para obtener un título universitario, lo que se conoce como un plan de estudio. La Facultad de Ciencias de la UCV está integrada por 5 Escuelas, donde se forman licenciados en las siguientes carreras: Biología, Computación, Física, Geoquímica, Matemática y Química. La División de Control de Estudios (DCE) es la dependencia administrativa de la Facultad que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de las licenciaturas de pregrado. El Departamento de Grado de la DCE utiliza los planes de estudio de las distintas licenciaturas cada semestre para verificar que los estudiantes que inscribieron Trabajo Especial de Grado cumplen con todos los requisitos curriculares y las normativas académicas que deben satisfacer para obtener un título universitario en la licenciatura en que se encuentran inscritos. La Facultad de Ciencias ha desarrollado el Sistema de Gestión Académica de Control de Estudios (CONEST) que presta servicio a los estudiantes, profesores y empleados administrativos, facilitando las operaciones de los procesos administrativos de la Facultad. Los trabajadores del Departamento de Grado actualmente realizan todas sus labores con un soporte mínimo del sistema CONEST, verificando de manera manual los requisitos curriculares de cada estudiante con lápices de colores y distintos documentos impresos. Esto representa un mayor esfuerzo humano y aumenta la probabilidad de cometer errores. Es por ello que el objetivo de este Trabajo Especial de Grado es desarrollar un módulo web del sistema CONEST basado en tecnologías web, que automatice el trabajo de verificación de requisitos curriculares del proceso de graduación que se realiza en la DCE, así como la gestión de los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias. Para lograr dicho desarrollo, se utiliza el método ágil de desarrollo de software llamado Programación Extrema (XP), donde se realizan tres iteraciones implementando las fases propuestas en el método. En la primera iteración se analiza de manera general el módulo web, en 8 la segunda iteración se desarrolla la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias, y en la tercera iteración de desarrolla la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Este trabajo de investigación está estructurado de la siguiente manera: Capítulo 1. Planes de Estudio de la Facultad de Ciencias: En este capítulo se describen los planes de estudio y se presentan los resultados del análisis realizado a todos los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias. Capítulo 2. Tecnologías Web: En este capítulo se describen las tecnologías web implementadas en el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. Capítulo 3. Método Ágil de Desarrollo de Software: En este capítulo se describen las metodologías agiles de desarrollo de software, la Programación Extrema (XP), y la adaptación del método ágil XP implementado en el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. Capítulo 4. Marco Aplicativo: En este capítulo se presentan las iteraciones realizadas durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST bajo el método ágil XP, especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. Finalmente, se presentan las conclusiones, las recomendaciones y las referencias bibliográficas. 9 Capítulo 1 Planes de Estudio de la Facultad de Ciencias Un plan de estudio (Teruel, 2000) es de manera general una descripción de los requisitos que se necesitan satisfacer para obtener un título universitario en un área del saber. Estos requisitos incluyen: aprobar el conjunto de asignaturas que la universidad considera obligatorias, el número de créditos que el estudiante debe aprobar en asignaturas electivas, y los requisitos o prelaciones que aplican entre las asignaturas. En la Facultad de Ciencias de la UCV se imparten 6 licenciaturas: Biología, Computación, Física, Geoquímica, Matemática y Química. Los planes de estudio de las licenciaturas de la Facultad son gestionados por la DCE, la cual es una dependencia administrativa que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de los estudiantes regulares de pregrado. La DCE requiere conocer la estructura y los reglamentos de cada uno de los planes de estudio para revisar, validar y procesar decisiones que en materia académica incidan en sus procesos administrativos para su debida implementación. Los planes de estudio son vitales en los procesos de inscripción y graduación, la DCE integra los recursos tanto humanos como tecnológicos para cerciorarse de que cada estudiante cumpla con todos los requisitos y las prelaciones para cursar las asignaturas, y que cada egresado haya cumplido y aprobado con todos los requisitos y normativas académicas para optar por un título universitario en las licenciaturas que ofrece la Facultad de Ciencias. Los planes de estudio de las licenciaturas de la Facultad de Ciencias están conformados por un conjunto de asignaturas y reglas. Una asignatura es una unidad académica que forma parte de una carrera, por lo general dura un período académico de entre 15 y 16 semanas (excepto en el curso intensivo que tiene una duración de 7 u 8 semanas), está dirigida por uno o más docentes, cuenta con una lista fija de estudiantes, y este obtiene una nota y unidades de créditos por cada asignatura aprobada. Sus atributos comunes incluyen: Nombre: Es el nombre completo de la asignatura por el cual es conocida. Ejemplos de nombres de asignaturas son: Sistemas Operativos, Comunicación de Datos, Lenguajes de Programación, etc. Abreviación: Es el nombre corto de la asignatura, se utiliza para mantener la compatibilidad con otros sistemas que están limitados al uso de 15 caracteres. Ejemplos de abreviaciones de asignaturas son: Sist. Operativos, Comun. de Datos, etc. Código: Es una representación numérica de dígitos que permite identificar la asignatura, los primeros 2 dígitos representan la Facultad, los siguientes 2 dígitos representan la Escuela, y los últimos 4 dígitos representan la asignatura. La Facultad de Ciencias está representada por el 10 número 03. Las Escuelas están representadas de la siguiente manera: 01 (Escuela de Biología), 02 (Escuela de Física), 03 (Escuela de Química), 04 (Escuela de Computación), 05 (Escuela de Matemática), y 06 (Escuela de Geoquímica). Ejemplos de códigos de asignaturas son: 03046004, 03046003, 03046204, etc. Unidades de Crédito (UC): Las unidades de crédito se determinan en base al número de horas de clase semanales que un estudiante recibe por asignatura. Estas horas incluyen:  Horas Teóricas (HT): 1 HT equivale a 1 UC.  Horas de Practica (HP): 2 HP equivalen a 1 UC.  Horas de Laboratorio (HL): 3 HL equivalen a 1 UC. Calificación: La nota final de las asignaturas se califica con un número comprendido entre 0 y 20. En la Facultad de Ciencias se utiliza otro método para calificar asignaturas y requisitos curriculares con notaciones alfabéticas: A (Aprobado), AP (Aplazado), EQ (Equivalencia), y RET (Retirado). Tipo: Las asignaturas pueden ser cursadas según las siguientes modalidades: obligatorias, electivas, optativas. Las asignaturas obligatorias son aquellas que todos los estudiantes están obligados a cursar por su importancia en la formación y el desarrollo educativo del estudiante. En general, están ubicadas en la primera mitad de la carrera. Las asignaturas electivas son aquellas que el estudiante puede cursar para profundizar su formación en un determinado campo profesional, pueden ser cursadas como parte de una opción según lo establecido en el reglamento de la licenciatura. Se ubican en los últimos semestres de la carrera. Las asignaturas optativas son aquellas que el estudiante puede cursar para ampliar su formación general, más allá de la pura formación profesional, y no son un requisito en todas las licenciaturas de la Facultad. En general, están ubicadas en los últimos semestres de la carrera. Las asignaturas del Programa de Cooperación Interfacultades (PCI) son otro tipo de asignaturas optativas que el estudiante puede cursar en otras Facultades de la Universidad. Los planes de estudio de las licenciaturas de la Facultad de Ciencias agrupan las asignaturas por semestres, algunas de estas asignaturas guardan una relación de prelación, en función de conocimientos previos que el estudiante debe manejar para cursar las asignaturas. El objetivo del sistema de prelaciones es facilitar el avance del estudiante en la carrera ya que permite integrar y secuenciar conocimientos y habilidades entre asignaturas. Los planes de estudio podrían cambiar con el transcurso del tiempo, a aquellos estudiantes que se encuentran en periodo de transición de un plan de estudio a otro es necesario aplicarles la tabla 11 de convalidaciones y equivalencias, siguiendo las normas acordadas por cada Escuela. Otro caso particular a tomar en cuenta es el de los estudiantes que se están reincorporando o cambiando de carrera, ya que se debe verificar las equivalencias de cada una de las asignaturas que apliquen según el caso. La opción profesional es un conjunto de asignaturas que forman al estudiante en un determinado campo profesional. Las opciones buscan profundizar la formación del estudiante en el área de la carrera de su preferencia, estas opciones son definidas por las Escuelas, soportadas por los centros de investigación y administradas por el o los departamentos. Para optar por una opción el estudiante debe aprobar un número mínimo de asignaturas, el Seminario y el Trabajo Especial de Grado de la opción correspondiente. Además, el estudiante puede cursar asignaturas de cualquier opción bajo la modalidad de electiva, siempre y cuando cumpla con las prelaciones exigidas. Es importante resaltar que cada licenciatura tiene su propio reglamento, por lo que cada plan de estudio exige diferentes requisitos para obtener el título de la carrera. Los estudios de licenciatura en la Facultad de Ciencias tienen una duración de 10 semestres, y 19 unidades de crédito por semestre (en promedio). Además, el componente docente es un convenio que existe con la Facultad de Humanidades y Educación denominado Convenio Cooperativo de Formación Docente que les permite a los estudiantes de las licenciaturas de Biología, Física, Matemática y Química optar por un título universitario de Licenciatura en Educación con una mención científica. El estudiante debe aprobar las asignaturas correspondientes al área científica en la Facultad de Ciencias y las asignaturas correspondientes al área humanística en la Escuela de Educación. A continuación se describen los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias. 1.1 Licenciatura en Biología El plan de estudio de la Licenciatura en Biología se encuentra vigente desde el año 1968. El Licenciado en Biología se encarga de estudiar en el laboratorio y en condiciones naturales el origen, el desarrollo, la estructura y otros aspectos fundamentales de los organismos vivos. El biólogo estudia e investiga diferentes aspectos de las células y los seres vivos. Diseña los experimentos, explora e investiga y aplica los resultados en la solución de problemas en las áreas de biología celular, botánica, ecología, tecnología de alimentos y zoología. El plan de estudio de Biología está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la biología. El ciclo básico tiene una duración de 7 semestres, está conformado por 34 asignaturas obligatorias para un total de 121 unidades de crédito. 12 La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la biología. El ciclo de opción dispone de 3 semestres (VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 60 unidades de crédito distribuidas de la siguiente manera: 25 unidades de crédito en asignaturas obligatorias (Seminario I, Seminario II y Trabajo Especial de Grado), y 35 unidades de crédito en asignaturas electivas. Además, el estudiante deberá cursar Ingles I o presentar un examen de suficiencia con un valor de 4 unidades de crédito, adicionales a las 60 señaladas anteriormente. La Figura 1 muestra el plan de estudio de Biología y las asignaturas que lo integran. 13 Figura 1. Plan de Estudio de Biología. La Escuela de Biología ofrece las siguientes opciones profesionales: Botánica, Biología Celular, Tecnología de Alimentos, Ecología y Zoología. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 18 unidades de crédito en asignaturas correspondientes a la opción de su preferencia, excepto en Tecnología de Alimentos donde es necesario aprobar todas las asignaturas de la opción. Finalmente, para obtener el título de Licenciado en Biología el estudiante debe aprobar al menos 185 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 119 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. La Figura 2 muestra el componente docente de Biología. 14 15 Figura 2. Componente Docente de Biología. 1.2 Licenciatura en Computación El plan de estudio de la Licenciatura en Computación se encuentra vigente desde el año 2004. El Licenciado en Computación ejerce sus tareas profesionales dentro de tres amplias funciones, que se señalan a continuación:  El desarrollo de sistemas y aplicaciones computacionales, donde debe estar preparado para resolver problemas que se presentan en las grandes, medianas, pequeñas organizaciones y a los individuos, proporcionándoles soluciones computacionales y en general sistemas que integren elementos computacionales.  Funciones de gestión de plataforma computacionales y servicios informáticos, a través de esta función ejerce su rol de facilitador de la tecnología computacional. Este puesto de trabajo implica gestionar y administrar recursos informáticos para facilitar y soportar procesos y actividades en organizaciones, instituciones y directamente por usuarios finales.  Investigación e innovación, el profesional cumple esta función a partir de la introducción de la tecnología computacional en las diversas actividades de la sociedad, esto es posible por la búsqueda innovadora y participación en la investigación pura y aplicada, la misma es profundizada, a partir de los estudios de cuarto nivel. El plan de estudio de Computación está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los principios de la computación. El ciclo básico tiene una duración de 5 semestres, está conformado por 21 asignaturas obligatorias para un total de 107 unidades de crédito. La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la computación. El ciclo de opción dispone de 5 semestres (VI, VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 78 unidades de crédito distribuidas de la siguiente manera: 25 unidades de crédito en asignaturas obligatorias (Pasantía, Seminario y Trabajo Especial de Grado), 43 unidades de crédito en asignaturas electivas, y 10 unidades de 16 crédito en asignaturas obligatorias optativas. Además, el estudiante deberá cursar 8 unidades de crédito en asignaturas optativas, adicionales a las 78 señaladas anteriormente. La Figura 3 muestra el plan de estudio de Computación. 17 Figura 3. Plan de Estudio de Computación. La Escuela de Computación ofrece las siguientes opciones profesionales: Sistemas de Información, Bases de Datos, Modelos y Programación Matemática, Ingeniería de Software e Interacción Humano Computador, Sistemas Distribuidos y Paralelos, Inteligencia Artificial, Tecnologías Educativas, Cálculo Científico, Tecnologías en Comunicación y Redes de Computadoras, Computación Gráfica, y Aplicaciones en Internet. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 15 unidades de crédito en asignaturas correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Computación el estudiante debe aprobar al menos 193 unidades de crédito. 1.3 Licenciatura en Física El plan de estudio de la Licenciatura en Física se encuentra vigente desde el año 1977. El Licenciado en Física en cualquier área de actuación, le corresponde ser un profesional que apoyado en conocimientos sólidos y actualizados de la física, debe ser capaz de tratar problemas nuevos y tradicionales, preocupándose por la búsqueda de nuevas formas del saber y del hacer científico y/o tecnológico. El Físico estudia fenómenos de la naturaleza, como la energía en todas sus formas, la estructura de la materia, las leyes que rigen, los movimientos de los cuerpos y la interacción entre ellos. Trabaja en programas multidisciplinarios relacionados con la metalurgia, geofísica, astrofísica, oceanografía, química, electrónica y medicina. A través de la investigación pura y aplicada comprueba y propone nuevas leyes. El plan de estudio de Física está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la física. El ciclo básico tiene una duración de 9 semestres, está conformado por 26 asignaturas obligatorias y 1 asignatura electiva para un total de 142 unidades de crédito. El estudiante puede optar por al menos una de estas electivas: Principios de Biología y Elementos de Computación. 18 La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la física. El ciclo de opción dispone de 4 semestres (VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 35 unidades de crédito distribuidas de la siguiente manera: 15 unidades de crédito en asignaturas obligatorias (Trabajo Especial de Grado), y 20 unidades de crédito en asignaturas obligatorias y electivas (según las opciones). Además, el estudiante deberá cursar Inglés I e Inglés II o presentar un examen de suficiencia con un valor de 8 unidades de crédito, adicionales a las 35 señaladas anteriormente. La Figura 4 muestra el plan de estudio de Física. 19 Figura 4. Plan de Estudio de Física. La Escuela de Física ofrece las siguientes opciones profesionales: Astrofísica, Física Computacional, Física Experimental, Geofísica, Instrumentación, Física Médica y Física Teórica. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 20 unidades de crédito en asignaturas correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Física el estudiante debe aprobar al menos 185 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 111 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. La Figura 5 muestra el componente docente de Física. 20 21 Figura 5. Componente Docente de Física. 1.4 Licenciatura en Geoquímica El plan de estudio de la Licenciatura en Geoquímica se encuentra vigente desde el año 2000. El Licenciado en Geoquímica estudia la composición de los diversos ambientes y materiales que constituyen el planeta, investiga los procesos y leyes que determinan dicha composición. Este profesional contribuye al entendimiento global del sistema tierra y a la búsqueda y uso racional de los materiales naturales requeridos por la sociedad moderna. El plan de estudio de Geoquímica está conformado por 39 asignaturas obligatorias y 4 asignaturas electivas para un total de 191 unidades de crédito distribuidas de la siguiente manera: 171 unidades de crédito en asignaturas obligatorias y electivas, y 20 unidades de crédito en las asignaturas Proyecto Geoquímico I y Proyecto Geoquímico II. La Figura 6 muestra el plan de estudio de Geoquímica. 22 Figura 6. Plan de Estudio de Geoquímica. Finalmente, para obtener el título de Licenciado en Geoquímica el estudiante debe aprobar al menos 191 unidades de crédito. 1.5 Licenciatura en Matemática El plan de estudio de la Licenciatura en Matemática se encuentra vigente desde el año 2004. El Licenciado en Matemática está capacitado para comenzar a realizar labores de investigación y desarrollo de nuevas teorías; conceptos que posteriormente pueden tener aplicación en la ciencia, la industria, la computación, la estadística, etc. Resuelve problemas matemáticos complejos e incidentales en las investigaciones científicas y en las actividades económicas. Ejerce funciones de asesor sobre diversas aplicaciones del análisis matemático. El plan de estudio de Matemática está conformado por 28 asignaturas obligatorias, 3 asignaturas electivas y 2 asignaturas optativas para un total de 194 unidades de crédito distribuidas de la 23 siguiente manera: 160 unidades de crédito en asignaturas obligatorias y electivas, 6 unidades de crédito en asignaturas optativas, y 28 unidades de crédito en las asignaturas Seminario I, Seminario II y Trabajo Especial de Grado. El estudiante puede optar por al menos una de estas asignaturas: Introducción a la Computación, Cálculo Numérico y Cálculo Científico. La Figura 7 muestra el plan de estudio de Matemática. 24 Figura 7. Plan de Estudio de Matemática. Finalmente, para obtener el título de Licenciado en Matemática el estudiante debe aprobar al menos 194 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 101 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. En el III Semestre el estudiante puede optar por al menos una de estas asignaturas: Introducción a la Computación, Cálculo Numérico y Cálculo Científico. En el VI Semestre el estudiante puede optar por al menos una de estas asignaturas: Historia de la Matemática y Filosofía de la Ciencia. Además, la electiva Opción Docente es alguna de las siguientes asignaturas: Funciones Analíticas, Topología, Ecuaciones Diferenciales Ordinarias, Geometría Diferencial, Algebra III o Teoría de la Medida. La Figura 8 muestra el componente docente de Matemática. 25 26 Figura 8. Componente Docente de Matemática. 1.6 Licenciatura en Química El plan de estudio de la Licenciatura en Química se encuentra vigente desde el año 1968. El Licenciado en Química estudia la materia, su composición, propiedades y transformaciones en la estructura. Asesora técnicamente o trabaja en el diseño y modificaciones de procesos químicos, soluciones de problemas industriales, innovación tecnológica, evaluación del impacto ambiental, mejoramiento y síntesis de productos, control de calidad, análisis de productos diversos. El plan de estudio de Química está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la química. El ciclo básico tiene una duración de 8 semestres, está conformado por 27 asignaturas obligatorias para un total de 114 unidades de crédito. La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la química. El ciclo de opción dispone de 5 semestres (VI, VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 69 unidades de crédito distribuidas de la siguiente manera: 39 unidades de crédito en asignaturas obligatorias, y 30 unidades de crédito en las asignaturas Seminario de Investigación y Trabajo Especial de Grado. Además, el estudiante deberá cursar Inglés I e Inglés II o presentar un examen de suficiencia con un valor de 8 unidades de crédito, adicionales a las 69 señaladas anteriormente. La Figura 9 muestra el plan de estudio de Química. 27 28 Figura 9. Plan de Estudio de Química. La Escuela de Química ofrece las siguientes opciones profesionales: Básica, Geoquímica y Tecnología. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 39 unidades de crédito en asignaturas, Seminario de Investigación y el Trabajo Especial de Grado correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Química el estudiante debe aprobar al menos 191 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 116 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educación para optar por el componente docente. La Figura 10 muestra el componente docente de Química. 29 Figura 10. Componente Docente de Química. 30 Capítulo 2 Tecnologías Web Desde el 26 de Febrero de 2007 se encuentra operativo el sistema CONEST, con la finalidad de automatizar la gestión académica de la Facultad de Ciencias de la UCV. El proyecto surge como una iniciativa de la Facultad de Ciencias para resolver una problemática administrativa, potenciar los servicios de gestión académica de la División de Control de Estudios (DCE) y modernizar la infraestructura informática, entre otras cosas, incentivando la participación de forma activa de estudiantes, docentes y personal administrativo que forman parte de esta comunidad. El sistema CONEST es una aplicación web desarrollada con software libre. Las aplicaciones web (Hassani, 2005) son aquellas que se acceden a través de una red tales como internet o una intranet. En otras palabras, es un software de aplicación codificado en un lenguaje soportado por un navegador web y que depende del mismo para ejecutar la aplicación. Las aplicaciones web son populares debido a la accesibilidad de los navegadores web. La capacidad de actualizar y mantener aplicaciones web sin distribuir e instalar software en miles de clientes potenciales y la compatibilidad entre plataformas son otras razones de su popularidad. Las aplicaciones web funcionan en una arquitectura cliente-servidor (Beck, 2005). En las arquitecturas cliente-servidor una aplicación se modela como un conjunto de servicios proporcionados por los servidores y un conjunto de clientes que usan esos servicios. Los clientes necesitan conocer que servidores están disponibles, pero normalmente no conocen la existencia de otros clientes. Con frecuencia clientes y servidores se comunican a través de una red de comunicación en hardwares separados utilizando el Protocolo de Transferencia de Hipertexto (HTTP) (Patrick, 2004) el cual es protocolo de red para sistemas de colaboración de información hipermedia distribuidos. HTTP es la base de la comunicación de datos en la Worl Wide Web (WWW). HTTP funciona como un protocolo petición-respuesta en la arquitectura cliente-servidor. En HTTP un navegador web, por ejemplo, actúa como un cliente, mientras que una aplicación que se está ejecutando en una computadora que hospeda un sitio web actúa como un servidor. El cliente envía un mensaje de solicitud HTTP al servidor. El servidor que almacena contenido, proporciona recursos tales como archivos HTML e imágenes o genera el contenido según sea necesario, o desempeña otras funciones por el cliente, devuelve una respuesta HTTP. Una respuesta contiene información sobre el estado de finalización de la solicitud y puede contener cualquier contenido solicitado por el cliente en el cuerpo del mensaje. La Figura 15 muestra un modelo lógico de una arquitectura cliente-servidor utilizando el protocolo HTTP. 31 Figura 11. Arquitectura Cliente-Servidor. El termino aplicación web generalmente está asociado con las tecnologías web que permiten crear herramientas o servicios que facilitan el intercambio interactivo de información, interoperabilidad, diseño centrado en el usuario y la colaboración en la WWW. Las tecnologías web del lado del cliente permiten que se ejecuten elementos interactivos en el navegador del usuario. Esto hace posible que la navegación del sitio web sea a través de menús dinámicos y las validaciones del lado del cliente. Ciertas operaciones se realizan del lado del cliente debido a que requieren acceso a información o funcionalidades que están disponibles en el cliente pero no en el servidor, o porque el usuario debe ingresar datos. A continuación se describe brevemente y se especifican las características más importantes de las tecnologías web del lado del cliente implementadas en el sistema CONEST: 2.1 HTML5 HTML5 (Hickson, 2010) es la quinta revisión del estándar HTML, actualmente en desarrollo. Como sus predecesores inmediatos (HTML 4.01 y XHTML 1.1), HTML5 es un estándar para estructurar y presentar contenido en la WWW. El estándar incorpora nuevas características como los elementos <canvas>, <audio> y <video> así como la integración de contenido Gráfico Vectorial Escalable (SVG), que están diseñados para mejorar la inclusión y el manejo de contenido gráfico y multimedia en la web sin recurrir a extensiones y sus APIs. Otros elementos nuevos tales como <section>, <article>, <header> y <nav> están diseñados para mejorar la semántica de los documentos. Nuevos atributos también han sido introducidos, y otros removidos, para mejorar y simplificar la semántica de las expresiones. 32 Partes de HTML5 van a estar terminadas e implementadas en los navegadores progresivamente antes de que toda la especificación alcance el estado final de recomendación del World Wide Web Consortium (W3C). HTML5 incluye las siguientes características:  El elemento canvas para el modo inmediato de dibujo 2D.  Reproducción multimedia temporizada.  Bases de datos para almacenamiento sin conexión de red.  Edición de documentos.  Drag-and-drop.  Mensajería entre documentos.  Gestión del historial del navegador.  Microdata. 2.2 CSS3 CSS3 (Bos, 2005) es la tercera especificación del estándar CSS, actualmente en desarrollo. CSS es un lenguaje de hojas de estilo que se utiliza para describir la presentación (el aspecto y el formato) de un documento escrito en un lenguaje de marcado. Su aplicación más común es para estilizar páginas web escritas en HTML y XHTML. CSS3 se basa en sus predecesores (CSS1 y CSS2), incluye una serie de selectores como [att^=""], [att$=""] y [att*=""] que permiten seleccionar elementos específicos de un documento HTML sin tener que depender de identificadores, clases y scripts innecesarios. Otros atributos nuevos tales como font-face, word-wrap, text-shadow, boder-image y rgba mejoran en gran medida el trabajo de los desarrolladores, por lo que algunas de las tareas de CSS que consumen más tiempo son muy sencillas, permitiendo un mejor código, más limpio y ligero. El desarrollo de CSS3 está divido en módulos. La especificación anterior se ha separado en pedazos más pequeños y se han añadido nuevas funcionalidades. Varios de los módulos ya están terminados, incluyendo SVG, Media Queries y Namespaces, mientras que otros todavía están en desarrollo. Las nuevas funciones se incorporarán gradualmente en los navegadores web en los próximos años. CSS3 incluye las siguientes características:  Atributos de textos como font-face para embeber fuentes de letras.  Margen, borde, relleno y posicionamiento para la mayoría de los elementos.  Color y opacidad de textos, fondos y otros elementos.  Diseño de múltiples columnas sin utilizar elementos <div>.  Transiciones y animaciones.  Agregar esquinas redondeadas a elementos HTML sin imágenes de fondo. 33 2.3 jQuery jQuery (The jQuery Project, 2010) es una librería de JavaScript que simplifica la manera de interactuar con los documentos HTML, seleccionar elementos DOM, desarrollar animaciones, manejar eventos y agregar interacción de manera asíncrona con el servidor a páginas web. jQuery al igual que otras librerías, ofrece una serie de funcionalidades basadas en JavaScript que de otra manera requieren de mucho más código, es decir, con esta librería se logran resultados en menos tiempo. jQuery también permite crear extensiones sobre la librería de JavaScript, esto contribuye a la creación de páginas web con funciones nuevas y generalmente muy específicas. jQuery incluye las siguientes características:  Selección de elementos DOM.  Interacción y modificación del árbol DOM.  Manejo de eventos.  Manipulación de CSS.  Efectos y animaciones.  AJAX.  Extensibilidad a través de plugins.  Compatibilidad con todos los navegadores modernos. Al igual que HTML5, jQuery establece una serie de elementos que reflejan el uso típico de los sitios web modernos. La ventaja de HTML5 con respecto a jQuery, es que está diseñado para integrar y presentar contenido multimedia en la web sin recurrir a extensiones de terceros y sus APIs. Sin embargo, la especificación de HTML5 es un trabajo en curso, y partes del estándar aún no están terminadas. jQuery es una solución más consolidada y soportada por todos los navegadores modernos. Las tecnologías web del lado del servidor son comúnmente utilizadas en aplicaciones web interactivas que permiten a los usuarios acceder bases de datos y recuperar o modificar datos que se encuentran alojados en un servidor. El servidor usa lenguajes como Ruby para procesar peticiones de los clientes, interpretar y generar respuestas utilizando información de archivos y bases de datos, y enviarlas de vuelta al cliente en un lenguaje soportado por el navegador. A continuación se describe brevemente y se especifican las características más importantes de las tecnologías web del lado del servidor implementadas en el sistema CONEST. 34 2.4 Ruby on Rails Ruby on Rails (RoR) (Ruby on Rails, 2011) es un framework para desarrollar aplicaciones web escrito en el lenguaje de programación Ruby que esta optimizado para mejorar la productividad y con un mínimo de configuración. RoR incluye herramientas que facilitan las tareas más comunes de desarrollo, como generadores que pueden construir automáticamente algunas de las clases y páginas necesarias para un sitio web básico. También incluye WEBrick, un servidor web sencillo que se distribuye con Ruby, y Rake, un sistema de construcción, distribuido como una gema. Juntos estas herramientas proveen un ambiente de desarrollo. RoR está dividido en varios paquetes, llamados ActiveRecord (un sistema de mapeo objeto- relacional para acceder a la base de datos), ActiveResource (provee servicios web), ActionPack, ActionSupport y ActionMailer. Aparte de los paquetes estándar, los desarrolladores pueden hacer plugins para ampliar los paquetes existentes. RoR supone que hay una “mejor” manera de hacer las cosas, y está diseñado para fomentar esa manera (y en algunos casos para rechazar las alternativas). La filosofía de RoR incluye los siguientes principios:  Don’t Repeat Yourself (DRY): DRY sugiere que escribir el mismo código una y otra vez es una mala práctica de programación.  Convention Over Configuration (CoC): CoC significa que RoR hace suposiciones sobre lo que se quiere hacer y cómo se va a hacerlo, en lugar de exigir que se especifique cada detalle a través de archivos de configuración. Como muchos frameworks web, RoR usa el patrón de diseño arquitectónico Modelo-Vista- Controlador (MVC) para organizar la programación de las aplicaciones web. MVC es una arquitectura de software, considerado actualmente como un patrón de arquitectura utilizado en la ingeniería de software. El patrón aísla la lógica de negocio de la aplicación de su interfaz de usuario, permitiendo el desarrollo, prueba y mantenimiento de cada uno de manera independiente. A continuación se describe brevemente los componentes del patrón de diseño arquitectónico MVC: Modelo: Un modelo representa la información (datos) de la aplicación y las reglas para manipular esos datos. En el caso de RoR, los modelos se utilizan principalmente para gestionar la interacción con las tablas en la base de datos. En muchos casos, una tabla en la base de datos corresponderá a un modelo en la aplicación. La mayor parte de la lógica de negocio de la aplicación se concentra en los modelos. 35 Vista: Las vistas representan las interfaces de usuario de una aplicación, generalmente son documentos HTML con código Ruby embebido que sólo realiza tareas relacionadas con la presentación de los datos. Las vistas se encargan de proporcionar datos al navegador web u otras herramientas que se utilicen para realizar peticiones a la aplicación. Controlador: Los controladores proveen un enlace entre los modelos y las vistas. En RoR, los controladores son responsables de procesar las peticiones entrantes desde el navegador web, interrogar a los modelos para obtener datos, y pasar dichos datos a la vista para que pueda presentarlos. 2.5 Haml Haml (Haml, 2011) es un lenguaje de enmarcado liviano que se utiliza para describir el XHTML de cualquier documento web sin el uso de codificación en línea tradicional. Está diseñado para resolver muchas de las fallas en los motores de plantillas, a la vez que hace el enmarcado tan limpio como se pueda. Haml funciona en sustitución de sistemas de plantillas de páginas tales como RHTML. Sin embargo, Haml evita la necesidad de codificar XHTML explícitamente en la plantilla, porque el mismo es una descripción del XHTML, con código para generar contenido dinámicamente. La filosofía de Haml incluye los siguientes principios:  El enmarcado debe ser limpio: El enmarcado no debe ser utilizado simplemente como una herramienta para hacer que los navegadores desplieguen una página de la manera en que su autor lo desea. Lo que se despliega no es lo único que la gente tiene que ver; también tienen que ver, modificar y entender el enmarcado. Por lo tanto, el enmarcado debe ser tan amigable y agradable como el resultado desplegado.  El enmarcado debe ser DRY: XHTML implica muchas repeticiones. La mayoría de los elementos tienen que ser nombrados al menos dos veces; una vez antes de su contenido y una vez después. ERB agrega aún más repeticiones y caracteres innecesarios. Haml evita todo esto apoyándose en la indentación, no el texto, para determinar donde los elementos y bloques de código comienzan y terminan. Esto no solo resulta en plantillas más pequeñas, sino también hace que el código sea más limpio.  El enmarcado debe estar bien indentado: Uno de los principales problemas de los lenguajes de plantillas tradicionales es que no solo no fomentan el código bien indentado, sino que activamente lo hacen difícil, o hasta imposible, de escribir. El resultado es confuso, XHTML ilegible. Haml formatea las etiquetas para que estén bien identadas y reflejen la estructura subyacente del documento.  La estructura XHTML debe ser clara: XML y XHTML son formatos construidos sobre el concepto de documentos estructurados. Esa estructura es reflejada en el enmarcado, y debería ser reflejada igualmente en el meta-enmarcado, como Haml. Debido a que la lógica de Haml está basada en la indentación de los elementos hijos, esta estructura se mantiene naturalmente, haciendo que el documento sea más fácil de leer y mas entendible para las personas. 36 2.6 Sass Sass (Sass, 2011) es un metalenguaje de hojas de estilo. Es un lenguaje de scripting que es interpretado a CSS. SassScript es el lenguaje de scripting propiamente. Sass consiste de dos sintaxis. La sintaxis original, llamada “la sintaxis indentada” usa una sintaxis similar a la de Haml. Utiliza la indentación para separar bloques de código y saltos de línea para separar reglas. La nueva sintaxis “SCSS” usa un formato de bloques similar al de CSS. Utiliza corchetes para denotar bloques de código y punto y coma para separar reglas dentro de un bloque. Sass extiende CSS al proveer varios mecanismos disponibles en otros lenguajes de programación más tradicionales, particularmente lenguajes orientado a objetos, pero que no están disponibles en CSS3 como tal. Cuando SassScript es interpretado, crea un bloque de reglas de CSS para varios selectores definidos por el archivo Sass. El interpretador Sass traduce SassScript a CSS. Adicionalmente, Sass puede monitorear un archivo Sass (.sass o .scss) y traducirlo a un archivo .css. Sass incluye las siguientes características:  Variables.  Indentación.  Mixins.  Parametros.  Herencia de selectores. 2.7 MySQL MySQL (Obfusco, 2003) es un Sistema Manejador de Base de Datos Relacional (RDBMS) que se ejecuta como un servidor que facilita el acceso de múltiples usuarios a una serie de base de datos. MySQL está escrito en C y C++, funciona en muchas plataformas diferentes, incluyendo Linux, Solaris, Symbian, Mac OS X y Microsoft Windows, entre otros. MySQL es principalmente un RDBMS y por lo tanto no posee una interfaz grafica de usuario para administrar base de datos o gestionar los datos que contiene adentro. Los usuarios pueden usar las herramientas de línea de comandos incluidas, o descargarse un software o aplicación web para administrar base de datos, construir la estructura de base de datos, y gestionar los registros de datos. MySQL incluye las siguientes características:  Soporte de múltiples plataformas.  Stored procedure.  Triggers.  Indexación de texto completo.  Motores de almacenamiento independientes (MyISAM para las consultas, InnoDB para las transacciones, MySQL Archive para almacenar el historial de datos). 37 Capítulo 3 Método Ágil de Desarrollo de Software El sistema CONEST se construyó utilizando un método ágil de desarrollo de software. El desarrollo ágil de software (Asierra, 2004) es un marco de trabajo conceptual usado en la ingeniería de software para estructurar, planificar y controlar el proceso de desarrollo en sistemas de información. El software se desarrolla en unidades de tiempo llamadas iteraciones, la cual debe durar de una a cuatro semanas. Cada iteración del ciclo de vida incluye: planificación, análisis de requerimientos, diseño, codificación, revisión y documentación. La Figura 16 muestra el ciclo de vida general para el desarrollo ágil de software. Figura 12. Ciclo de Vida Para el Desarrollo Ágil de Software. (Fuente: http://sdc.net.au/services/application-development.aspx). Las metodologías ágiles de desarrollo de software están diseñadas para producir software útil de forma rápida. Generalmente, son procesos en los que se entrelazan la especificación, el desarrollo y las pruebas. El software no se desarrolla y utiliza en su totalidad, sino en una serie de incrementos, donde en cada incremento se incluye nuevas funcionalidades al sistema. Ejemplos de metodologías de desarrollo de software ágiles son: RAD, SCRUM y XP. Todos los métodos ágiles comparten un conjunto de principios:  Participación del cliente: Los clientes deben estar fuertemente implicados en todo el proceso de desarrollo. Su papel es proporcionar y priorizar nuevos requerimientos del sistema y evaluar las iteraciones del sistema.  Entrega incremental: El software se desarrolla en incrementos, donde el cliente especifica los requerimientos a incluir en cada incremento. http://sdc.net.au/services/application-development.aspx 38  Personas ante procesos: Se deben reconocer y explotar las habilidades del equipo de desarrollo. Se les debe dejar desarrollar sus propias formas de trabajar, sin procesos formales, a los miembros del equipo.  Aceptar el cambio: Se debe contar con que los requerimientos del sistema cambian, por lo que el sistema se diseña para dar cabida a estos cambios.  Mantener la simplicidad: Se debe centrar en la simplicidad tanto en el software a desarrollar como en el proceso de desarrollo. Donde sea posible, se trabaja activamente para eliminar la complejidad del sistema. El método ágil de desarrollo de software utilizado para controlar el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST es una adaptación de la Programación Extrema. A continuación se describe brevemente y se especifican las características más importantes de la Programación Extrema. 3.1 Programación Extrema (XP) La Programación Extrema (XP) (Beck, 2005) es posiblemente el método ágil más conocido y ampliamente utilizado. En XP todos los requerimientos se expresan como escenarios (llamados historias de usuarios), los cuales se implementan directamente como una serie de tareas. Los programadores trabajan en parejas y desarrollan pruebas para cada tarea antes de escribir el código. Todas las pruebas se deben ejecutar satisfactoriamente cuando el código nuevo se integre al sistema. XP implica varias prácticas:  Planificación incremental: Los requerimientos se registran en tarjetas de historias y las historias a incluir en una entrega se determinan según el tiempo disponible y su prioridad relativa. Los desarrolladores dividen estas historias en tareas de desarrollo.  Entregas pequeñas: El mínimo conjunto útil de funcionalidad que proporcione valor de negocio se desarrolla primero. Las entregas del sistema son frecuentes e incrementalmente añaden funcionalidad a la primera entrega.  Diseño sencillo: Solo se lleva a cabo el diseño necesario para cumplir los requerimientos actuales.  Desarrollo previamente probado: Se utiliza un sistema de pruebas de unidad automatizado para escribir pruebas para nuevas funcionalidades antes de que estas se implementen.  Refactorización: Se espera que todos los desarrolladores refactoricen el código continuamente tan pronto como encuentren posibles mejoras en el código. Esto conserva el código sencillo y mantenible.  Programación en parejas: Los desarrolladores trabajan es parejas, verificando cada uno el trabajo del otro y proporcionando la ayuda necesaria para hacer siempre un buen trabajo. 39  Propiedad colectiva: Las parejas de desarrolladores trabajan en todas las áreas del sistema, de modo que no desarrollen islas de conocimientos y todos los desarrolladores posean todo el código. Cualquiera puede cambiar cualquier cosa.  Integración continua: En cuanto acaba el trabajo en un área, se integra en el sistema entero. Después de la integración, se deben pasar al sistema todas las pruebas de unidad.  Ritmo sostenible: No se consideran aceptables grandes cantidades de horas extras, ya que a menudo el efecto que tienen es que se reduce la calidad del código y la productividad a medio plazo.  Cliente presente: Debe estar disponible al equipo de XP un representante de los usuarios finales del sistema (el cliente) a tiempo completo. En un proceso de programación extrema, el cliente es miembro del equipo de desarrolladores y es responsable de formular al equipo los requerimientos del sistema para su implementación. Una vez que se han desarrollado las tarjetas de historias, el equipo de desarrolladores las divide en tareas y estima el esfuerzo y recursos requeridos para su implementación. El cliente establece entonces la prioridad de las historias a implementar, eligiendo aquellas historias que pueden ser utilizadas inmediatamente para entregar un apoyo útil al negocio. Cuando los requerimientos cambian, las historias sin implementar también cambian o se pueden descartar. Si se requieren cambios en un sistema que ya se ha entregado, se desarrollan nuevas tarjetas de historias y, de nuevo, el cliente decide si estos cambios tienen prioridad sobre nuevas funcionalidades. XP adopta un enfoque “extremo” para el desarrollo iterativo. Se pueden construir varias veces al día nuevas versiones del software y los incrementos se entregan al cliente cada dos meses aproximadamente. Cuando un programador construye el sistema para crear una versión nueva, debe ejecutar todas las pruebas automatizadas existentes además de las pruebas para las funcionalidades nuevas. El nuevo software generado solamente se acepta si se ejecutan satisfactoriamente todas las pruebas. Para evitar algunos de los problemas de las pruebas y de las validaciones del sistema. XP pone más énfasis en el proceso de pruebas que otros métodos ágiles. Las pruebas del sistema son fundamentales en XP, en la que se ha desarrollado un enfoque que reduce la probabilidad de producir nuevos incrementos del sistema que introduzcan errores en el software existente. Las características clave de las pruebas en XP son:  Desarrollo previamente probado.  Desarrollo de pruebas incremental a partir de los escenarios.  Participación del usuario en el desarrollo de las pruebas y en la validación.  El uso de bancos de pruebas automatizadas. A continuación se describe la adaptación del método ágil XP utilizado en el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 40 3.2 Adaptación del Método Ágil XP Las prácticas del método ágil XP se agrupan en cuatro fases; Planificación (incremental), Diseño (sencillo y refactorización), Codificación (entregas pequeñas, cliente presente, integración continua, ritmo sostenible, programación en parejas y propiedad colectiva) y Pruebas (desarrollo previamente probado). A continuación se describe como se implementaron las prácticas del método ágil XP en cada fase durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 3.2.1 Planificación En la fase de planificación se desarrollan las tarjetas de historias, las cuales deben ser definidas con la participación del cliente para que proporcionen y prioricen los requerimientos. Los requerimientos relacionados con la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y sus normativas, que inciden en el proceso de graduación de los estudiantes regulares de pregrado se registraron en tarjetas de historias. Las tarjetas de historias están conformadas por un nombre, una descripción y el número de días estimado para desarrollar el requerimiento. La Figura 17 muestra el formato de las tarjetas de historias. Figura 13. Formato de las Tarjetas de Historias. Las tarjetas de historias no se dividieron en tareas de desarrollo por simplicidad y para reducir la documentación. En esta fase también se planifican las entregas de los requerimientos del módulo web mediante iteraciones programadas, las cuales dividen la implementación de las tarjetas de historias y se entregan al cliente al final de cada iteración para hacer pruebas y correcciones. 41 Las iteraciones tienen una duración de tres meses, y las historias a incluir en una entrega se determinan según el número de días estimado para desarrollar los requerimientos y su prioridad relativa. 3.2.2 Diseño En la fase de diseño se esquematiza el módulo web, enfocándose en cubrir las necesidades inmediatas del cliente, ni más ni menos. En cada iteración se entregó el mayor valor de negocio produciendo el código más sencillo que cumpliera con los requerimientos definidos en las tarjetas de historias. En esta fase también se revisó constantemente el código, refinando los diseños que se consideraron necesarios cuando se encontraban posibles mejoras en el código, con el fin de minimizar en lo posible las ineficiencias. 3.2.3 Codificación En la fase de codificación se desarrolla el módulo web en incrementos según la planificación de las entregas, creando un programa sencillo que aportara valor de negocio rápidamente, que se actualizaba de manera frecuente añadiendo funcionalidades a la primera entrega. El módulo web se desarrolló siguiendo los estándares de codificación del sistema CONEST, para asegurar la consistencia, facilitar la comprensión y la refactorización del código. A continuación se describe brevemente el estándar de codificación para el desarrollo del sistema CONEST. Las reglas generales para escribir y documentar el código incluyen:  En español.  Sin eñes, acentos o caracteres especiales.  Sustituir las eñes por enes.  Omitir los acentos.  Identar el código con 2 espacios en blanco.  Usar comentarios para documentar cada método.  Dejar un espacio en blanco antes y después de un signo igual, excepto en los parámetros por defecto de un método.  No dejar espacios en blanco después de un método. 42 Las reglas generales para nombrar directorios, archivos, atributos, variables y constantes incluyen:  Directorios, archivos, atributos y variables en minúscula.  Constantes en mayúscula.  Separar nombres compuestos con sub guiones. Las reglas generales para nombrar clases incluyen:  De manera capital (Primera letra en mayúscula y el resto en minúscula).  No separar nombres compuestos. Las reglas generales para nombrar métodos y parámetros incluyen:  En minúscula.  Separar nombres compuestos con sub guiones.  Sí un método retorna un booleano debe terminar en ?.  Sí un método modifica un objeto debe terminar en !.  Sí un método arroja una excepción de error debe terminar en !.  Sí un método no tiene parámetros debe terminar sin (). Es importante resaltar que el cliente estuvo presente durante toda la fase de codificación del proyecto, trabajando activamente para revisar los requerimientos, las funcionalidades, señalar las prioridades y responder las preguntas del programador. Se integró una versión completa del módulo web al sistema CONEST al final de la fase de codificación del proyecto. Se trabajó 30 horas semanales, distribuidas entre los cinco días de la semana en jornadas diurnas, trabajando horas extras solo cuando se consideraba necesario. El módulo web fue desarrollado por un solo programador, el cual trabajó todas las áreas del modulo web, impidiendo el desarrollo de islas de conocimientos. 3.2.4 Pruebas En la fase de pruebas se implementan pruebas funcionales y de aceptación al final de cada iteración, estas se generaron a partir de las tarjetas de historias que se desarrollaban durante una iteración. Se definen los datos de entrada y los resultados esperados para cada tarjeta de historia, y el cliente verifica el correcto funcionamiento del requerimiento que se está probando. Cuando se da 43 por buena la prueba de aceptación, se considera que la historia correspondiente se ha completado. El sistema de pruebas de unidad automatizado no se implementó para favorecer la productividad y las entregas rápidas y constantes durante el desarrollo del proyecto. 44 Capítulo 4 Marco Aplicativo En este capítulo se describe el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. El método ágil de desarrollo de software utilizado para estructurar, planificar y controlar el proceso de desarrollo de este Trabajo Especial de Grado es una adaptación de la Programación Extrema (XP). Es importante resaltar que algunas prácticas del método ágil XP no se aplicaron en este proyecto tales como el desarrollo previamente probado, la programación en parejas, la propiedad colectiva y la integración continua. Sin embargo, se aplicaron el resto de las prácticas tales como la planificación incremental, las entregas pequeñas, el diseño sencillo, la refactorización, el ritmo sostenible y la presencia del cliente. Debido al método ágil de desarrollo de software utilizado en este Trabajo Especial de Grado, fue necesario definir y desarrollar un conjunto de iteraciones, en las cuales el software se desarrolla en incrementos. A continuación, se describen las iteraciones realizadas durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 4.1 Iteración 0 En esta iteración se analiza de manera general el módulo web; se realiza un levantamiento de los requerimientos necesarios para la implementación, se desarrollan las tarjetas de historias y se esquematiza su funcionamiento. 4.1.1 Planificación Los planes de estudio de las licenciaturas de la Facultad de Ciencias se estudiaron para determinar las características comunes y las diferencias de cada plan de estudio. Además, se analizó el proceso de graduación que lleva a cabo la DCE mediante entrevistas con los trabajadores del Departamento de Grado, para determinar la manera en que los planes de estudio influyen en dicho proceso. El Departamento de Grado de la DCE utiliza los planes de estudio de las distintas licenciaturas cada semestre para verificar que los estudiantes que inscribieron Trabajo Especial de Grado cumplen con todos los requisitos curriculares y las normativas académicas que deben satisfacer para obtener un título universitario en la licenciatura en que se encuentran inscritos. En el proceso de graduación se verifican los siguientes requisitos curriculares:  Aprobar el conjunto de asignaturas obligatorias.  Aprobar el número de créditos en asignaturas electivas. 45  Convalidaciones y equivalencias entre asignaturas, en caso de que aplique.  Opciones profesionales.  Componente docente.  Servicio comunitario. Es importante resaltar que los trabajadores del Departamento de Grado realizan todas sus labores con un soporte mínimo del sistema CONEST, verificando de manera manual los requisitos curriculares de cada estudiante con lápices de colores y distintos documentos impresos. Esto representa un mayor esfuerzo humano y aumenta la probabilidad de cometer errores. Posteriormente, con el soporte y la supervisión de los tutores se estableció como el módulo web debe gestionar los planes de estudio para facilitar y simplificar las operaciones de los procesos de gestión académica de la DCE. Y por último, se revisó la base de datos actual del sistema CONEST para evaluar el soporte que provee y determinar las estructuras de datos necesarias para desarrollar las nuevas funcionalidades que incorporará el módulo web para la gestión de planes de estudio al sistema CONEST. Tras estudiar los planes de estudio de las licenciaturas de la Facultad de Ciencias y el proceso de graduación de la DCE, se determinó que el módulo web para la gestión de planes de estudio en el sistema CONEST debe satisfacer los siguientes requerimientos:  Gestionar los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias; requisitos curriculares, distribución de los requisitos curriculares por semestre, asignaturas, prelaciones, convalidaciones y equivalencias, y opciones profesionales.  Automatizar la verificación de requisitos curriculares del proceso de graduación del Departamento de Grado de la DCE.  Aplicar un conjunto de pruebas para verificar el correcto funcionamiento del módulo web.  Integrar el módulo web con el resto del sistema CONEST. Las tarjetas de historias se desarrollan a partir de los requerimientos. En este Trabajo Especial de Grado se definieron las siguientes tarjetas de historias: 1. Diseñar una interfaz gráfica para verificar requisitos curriculares 1 Día Definir la información necesaria y el formato adecuado para verificar requisitos curriculares en el módulo web 2. Diseñar las estructuras de datos para verificar requisitos curriculares 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la verificación de requisitos curriculares en el módulo web 46 3. Desarrollar la verificación de asignaturas obligatorias 2 Días Verificar que un estudiante haya aprobado las asignaturas obligatorias en una carrera 4. Desarrollar la verificación de asignaturas obligatorias optativas 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas obligatorias optativas en una carrera 5. Desarrollar la verificación de asignaturas electivas 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas electivas en una carrera 6. Desarrollar la verificación de asignaturas complementarias 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas complementarias en una carrera 7. Desarrollar la verificación de laboratorios 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de laboratorio en una carrera 8. Desarrollar la verificación de pasantías 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de pasantía en una carrera 9. Desarrollar la verificación de seminarios 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de seminario en una carrera 10. Desarrollar la verificación de TEG 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de trabajo especial de grado en una carrera 11. Desarrollar la verificación del servicio comunitario 1 Día Verificar que un estudiante haya aprobado las asignaturas del servicio comunitario en una carrera 12. Desarrollar la verificación de asignaturas excedentes 1 Día Verificar si un estudiante ha aprobado más asignaturas electivas y/o asignaturas complementarias que las que se requieren en una carrera 13. Desarrollar la verificación de convalidaciones 1 Día Verificar si un estudiante ha aprobado una asignatura que haya sido convalidada por otra asignatura obligatoria en una carrera 14. Diseñar una interfaz gráfica para la cabecera 1 Día Diseñar un prototipo de interfaz para la cabecera de la vista para verificar requisitos curriculares 47 15. Revisar los requisitos curriculares de la Licenciatura en Biología 1 Día Definir los requisitos curriculares del plan de estudio de Biología que se verificaran en el módulo web 16. Revisar los requisitos curriculares de la Licenciatura en Computación 1 Día Definir los requisitos curriculares del plan de estudio de Computación que se verificaran en el módulo web 17. Revisar los requisitos curriculares de la Licenciatura en Física 1 Día Definir los requisitos curriculares del plan de estudio de Física que se verificaran en el módulo web 18. Revisar los requisitos curriculares de la Licenciatura en Geoquímica 1 Día Definir los requisitos curriculares del plan de estudio de Geoquímica que se verificaran en el módulo web 19. Revisar los requisitos curriculares de la Licenciatura en Matemática 1 Día Definir los requisitos curriculares del plan de estudio de Matemática que se verificaran en el módulo web 20. Revisar los requisitos curriculares de la Licenciatura en Química 1 Día Definir los requisitos curriculares del plan de estudio de Química que se verificaran en el módulo web 21. Desarrollar un script de bases de datos 1 Día Crear un script de bases de datos que contenga las asignaturas aprobadas por un estudiante de Computación 22. Refactorizar el código para verificar requisitos curriculares 1 Día Revisar y refinar el algoritmo para verificar requisitos curriculares 23. Diseñar una interfaz gráfica para el resumen 1 Día Diseñar un prototipo de interfaz para el resumen de la vista para verificar requisitos curriculares 24. Desarrollar el resumen de los datos académicos 1 Día Mostrar los datos académicos de un estudiante en una carrera 25. Desarrollar el resumen de la verificación de los requisitos curriculares 1 Día Mostrar el resultado de la verificación de los requisitos curriculares de un estudiante en una carrera 26. Diseñar las estructuras de datos para verificar opciones profesionales 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la verificación de opciones profesionales en el módulo web 48 27. Desarrollar el resumen de la verificación de la opción profesional 1 Día Mostrar el resultado de la verificación de la opción profesional de un estudiante en una carrera 28. Desarrollar el resumen general 1 Día Mostrar el resultado general de la verificación de los requisitos curriculares y la verificación de la opción profesional de un estudiante en una carrera 29. Refactorizar el código para mostrar los resúmenes 1 Día Revisar y refinar el algoritmo para mostrar el resumen de la verificación de requisitos curriculares y el resumen de la verificación de opciones profesionales 30. Desarrollar la selección de un estudiante y una carrera 1 Día Crear un formulario para seleccionar un estudiante y una carrera que haya cursado en la Facultad de Ciencias 31. Migrar el módulo web al sistema CONEST 3.1 2 Días Migrar las funcionalidades del módulo web desarrolladas en el sistema CONEST 3.0 al sistema CONEST 3.1 32. Diseñar las estructuras de datos para distribuir requisitos curriculares 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la distribución de requisitos curriculares en el módulo web 33. Desarrollar el listado de planes de estudio 1 Día Listar los planes de estudio 34. Desarrollar la creación de planes de estudio 1 Día Crear un formulario para crear un plan de estudio 35. Desarrollar la edición de planes de estudio 1 Día Crear un formulario para editar un plan de estudio 36. Desarrollar la eliminación de planes de estudio 1 Día Eliminar un plan de estudio 37. Desarrollar el listado de requisitos curriculares 1 Día Listar los requisitos curriculares de un plan de estudio 38. Desarrollar la creación de requisitos curriculares 1 Día Crear un formulario para crear un requisito curricular en un plan de estudio 39. Desarrollar la edición de requisitos curriculares 1 Día Crear un formulario para editar un requisito curricular de un plan de estudio 49 40. Desarrollar la eliminación de requisitos curriculares 1 Día Eliminar un requisito curricular de un plan de estudio 41. Desarrollar el listado de requisitos curriculares distribuidos por semestre 1 Día Listar los requisitos curriculares de un plan de estudio distribuidos por semestre 42. Desarrollar la distribución de requisitos curriculares por semestre 1 Día Distribuir los requisitos curriculares de un plan de estudio por semestre 43. Desarrollar la redistribución de requisitos curriculares por semestre 1 Día Redistribuir los requisitos curriculares de un plan de estudio en un semestre 44. Desarrollar la eliminación de requisitos curriculares distribuidos por semestre 1 Día Eliminar un requisito curricular de un plan de estudio en un semestre 45. Desarrollar el listado de asignaturas 1 Día Listar las asignaturas 46. Desarrollar la creación de asignaturas 1 Día Crear un formulario para crear una asignatura 47. Desarrollar la edición de asignaturas 1 Día Crear un formulario para editar una asignatura 48. Desarrollar la eliminación de asignaturas 1 Día Eliminar una asignatura 49. Desarrollar el listado de asignaturas de un plan de estudio 1 Día Listar las asignaturas de un plan de estudio 50. Desarrollar la asignación de asignaturas de un plan de estudio 1 Día Asignar una asignatura a un plan de estudio 51. Desarrollar la edición de asignaturas de un plan de estudio 1 Día Editar las asignaturas de un plan de estudio 52. Desarrollar la eliminación de asignaturas de un plan de estudio 1 Día Eliminar una asignatura de un plan de estudio 53. Desarrollar un PDF para la vista para verificar requisitos curriculares 1 Día Crear un documento PDF que contenga la verificación de los requisitos curriculares y el resumen de la verificación de los requisitos curriculares de un estudiante en una carrera 50 54. Desarrollar las validaciones 2 Días Validar el formato de todos los campos de los formularios del módulo web 55. Desarrollar los mensajes de error 1 Día Crear los mensajes de error de todos los formularios del módulo web 56. Desarrollar los mensajes de confirmación 1 Día Crear los mensajes de confirmación de todos los formularios del módulo web 57. Desarrollar un script de bases de datos 1 Día Crear un script de bases de datos que contenga las tablas, atributos, restricciones y asociaciones para soportar todas las funcionalidades del módulo web 4.1.2 Diseño El sistema CONEST cuenta con una interfaz gráfica sencilla y organizada, que representa la información y las acciones disponibles a un usuario mediante iconos e indicadores visuales, y permite a los usuarios interactuar con el sistema a través de la manipulación directa de los elementos de la interfaz, para acceder las funcionalidades básicas del sistema y satisfacer los requerimientos respectivos. El módulo web para la gestión de planes de estudio se desarrolló siguiendo la apariencia general y las técnicas de interacción del sistema CONEST para asegurar la consistencia, facilitar el aprendizaje y disminuir la carga cognitiva de los usuarios. El módulo web resuelve la problemática administrativa de los requerimientos solicitados por los trabajadores de la DCE. La Figura 14 muestra el diseño general del sistema CONEST. Figura 14. Diseño General del Sistema CONEST. 51 El módulo web para la gestión de planes de estudio en el sistema CONEST se desarrolló utilizando las herramientas tecnológicas que fueron descritas en el capítulo 2:  Lenguaje de programación Ruby, versión 1.9.7.  Framework para aplicaciones web Rails, versión 3.1.0.  Gestor de paquetes RubyGems, versión 1.6.2.  Lenguaje de enmarcado Haml, versión 3.1.2.  Lenguaje de hojas de estilo Sass, versión 3.1.7.  Lenguaje de programación CoffeScript, versión 3.1.0.  Librería de JavaScript jQuery, versión 1.6.2.  Manejador de bases de datos relacional MySQL, versión 5.1. 4.1.3 Codificación La mayor parte de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias en el módulo web se realiza a través de listados y formularios. Los listados muestran los registros de la base de datos organizados en filas, y los usuarios pueden seleccionar un registro del listado para revisar sus datos detalladamente. Los formularios muestran los datos particulares de los registros, de los cuales se toman los datos ingresados por los usuarios, se realizan las validaciones correspondientes y se almacenan en la base de datos. El módulo web se desarrolló siguiendo las guías de Ruby on Rails para evitar malas prácticas de programación y las vulnerabilidades de seguridad en el software. 4.1.4 Pruebas Las pruebas funcionales se generaron a partir de las tarjetas de historias. Se definieron los datos de entrada y los resultados esperados para cada prueba, y los tutores, que son usuarios finales del sistema, verificaron el correcto funcionamiento de los requerimientos que se estaban probando al final de cada iteración. Las pruebas de aceptación están dirigidas a los trabajadores de la DCE, los cuales realizaron una serie de tareas relacionadas con la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Además, respondieron una encuesta para evaluar los requerimientos funcionales y los requerimientos no funcionales del módulo web. 52 4.2 Iteración 1 En esta iteración se describe el proceso de desarrollo de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias en el módulo web, siguiendo las prácticas del método ágil XP; especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. 4.2.1 Planificación Descripción Diseñar la interfaz gráfica, las estructuras de datos y desarrollar un algoritmo para gestionar los planes de estudio Tarjetas de Historias 32. Diseñar las estructuras de datos para distribuir requisitos curriculares 33. Desarrollar el listado de planes de estudio 34. Desarrollar la creación de planes de estudio 35. Desarrollar la edición de planes de estudio 36. Desarrollar la eliminación de planes de estudio 37. Desarrollar el listado de requisitos curriculares 38. Desarrollar la creación de requisitos curriculares 39. Desarrollar la edición de requisitos curriculares 40. Desarrollar la eliminación de requisitos curriculares 41. Desarrollar el listado de requisitos curriculares distribuidos por semestre 42. Desarrollar la distribución de requisitos curriculares por semestre 43. Desarrollar la redistribución de requisitos curriculares por semestre 44. Desarrollar la eliminación de requisitos curriculares distribuidos por semestre 45. Desarrollar el listado de asignaturas 46. Desarrollar la creación de asignaturas 47. Desarrollar la edición de asignaturas 48. Desarrollar la eliminación de asignaturas 49. Desarrollar el listado de asignaturas de un plan de estudio 50. Desarrollar la asignación de asignaturas de un plan de estudio 51. Desarrollar la edición de asignaturas de un plan de estudio 52. Desarrollar la eliminación de asignaturas de un plan de estudio 54. Desarrollar las validaciones 55. Desarrollar los mensajes de error 56. Desarrollar los mensajes de confirmación 31. Migrar el módulo web al sistema CONEST 3.1 Tiempo Estimado 27 Días 4.2.2 Diseño Como se mencionó anteriormente, la mayor parte de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias se realiza a través de listados y formularios. 53 El listado de planes de estudio muestra todos los planes de estudio en la base de datos organizados en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes de los planes de estudio. A partir de la segunda fila, se muestran los planes de estudio, las columnas de estas filas muestran los datos particulares de cada plan de estudio que correspondan con los atributos de la cabecera. La última columna de las filas de los planes de estudio, muestran un icono para eliminar el plan de estudio correspondiente. Al colocar el cursor sobre el icono, se muestra una descripción emergente para informar al usuario sobre la funcionalidad del icono. Los usuarios deberán hacer clic en el icono, y confirmar la acción para eliminar un plan de estudio de la base de datos. Los planes de estudio del listado se pueden ordenar alfabéticamente de manera descendiente y ascendiente por atributo, mediante unos iconos que se encuentran en cada columna de la cabecera. Luego del listado, se muestra un enlace para crear un plan de estudio nuevo. La Figura 15 muestra el listado de planes de estudio. Figura 15. Listado de Planes de Estudio. Los usuarios pueden crear un plan de estudio nuevo por medio de un formulario. El formulario muestra todos los atributos de los planes de estudio mediante campos de entrada, los cuales deben ser llenados por los usuarios con la información solicitada, que se almacenará para su uso posterior o manipulación. 54 Los usuarios también pueden seleccionar un plan de estudio del listado para revisar sus datos particulares tales como el nombre, la carrera a la que pertenece, el régimen de estudio y la fecha de aplicación. Además, se muestra toda la información relacionada con los planes de estudio, como los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales, con la finalidad de acceder convenientemente y gestionar las distintas características de los planes de estudio en un solo lugar. Se utilizó un menú de acordeones para organizar de manera estructurada las características de los planes de estudio. Los usuarios pueden minimizar y maximizar los acordeones para mostrar su contenido cuando sea necesario. Esta técnica permite mostrar una gran cantidad de información en poco espacio. La Figura 16 muestra la página web para editar planes de estudio. Figura 16. Editar Planes de Estudio. Se pueden gestionar los datos particulares de los requisitos curriculares de los planes de estudio tales como el tipo de asignatura, el número mínimo de unidades de crédito y el número mínimo de asignaturas que se deben aprobar. En la Facultad de Ciencias existen diferentes tipos de asignaturas tales como las obligatorias, obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario. Cada licenciatura exige aprobar un número de asignaturas de diferentes tipos para obtener el título de la carrera. Además, dichas asignaturas están distribuidas en 10 55 semestres. Se creó la tabla distribucion_requisito_plan en la base de datos para poder distribuir los requisitos curriculares de un plan de estudio por semestre. La Figura 17 muestra la tabla distribucion_requisito_plan. Figura 17. Tabla distribucion_requisito_plan. El listado de requisitos curriculares distribuidos por semestre muestra el número de asignaturas que se deben aprobar en cada semestre, de los requisitos curriculares de un plan de estudio organizados en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran los 10 semestres de la carrera. A partir de la segunda fila, se muestran los requisitos curriculares, las columnas de estas filas muestran el número de asignaturas requeridas por cada requisito curricular que correspondan con el semestre de la cabecera. La última columna de las filas de los requisitos curriculares de un plan de estudio, muestran el número total de asignaturas distribuidas del número total de asignaturas que se deben aprobar del requisito curricular correspondiente. La Figura 18 muestra el listado de requisitos curriculares distribuidos por semestre. Figura 18. Listado de Requisitos Curriculares Distribuidos por Semestre. 56 Se pueden gestionar los datos particulares de los requisitos curriculares de un plan de estudio distribuidos por semestre tales como el tipo de asignatura, el semestre, y el número de asignaturas que se deben aprobar en dicho semestre. También se pueden gestionar los datos particulares de los requisitos curriculares de las opciones profesionales registradas en un plan de estudio tales como el tipo de asignatura, el número mínimo de unidades de crédito y el número mínimo de asignaturas que se deben aprobar. La gestión de los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales de los planes de estudio, se realiza de manera similar a la gestión de los planes de estudio. El listado de asignaturas muestra todas las asignaturas en la base de datos organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes de las asignaturas. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. La última columna de las filas de las asignaturas, muestran un icono para eliminar la asignatura correspondiente. Al colocar el cursor sobre el icono, se muestra una descripción emergente para informar al usuario sobre la funcionalidad del icono. Los usuarios deberán hacer clic en el icono, y confirmar la acción para eliminar una asignatura de la base de datos. Las asignaturas del listado se pueden ordenar alfabéticamente de manera descendiente y ascendiente por atributo, mediante unos iconos que se encuentran en cada columna de la cabecera. Luego del listado, se muestra un enlace para crear una asignatura nueva. Es importante resaltar que existen más de 1900 registros de asignaturas en la base de datos, por este motivo, se utilizó un sistema de paginación para dividir los registros en conjuntos discretos. Esta técnica permite mostrar en el listado un número limitado de asignaturas en varias páginas. Los usuarios pueden navegar a través de las diferentes páginas para mostrar su contenido cuando sea necesario. Además, los usuarios pueden buscar asignaturas por nombre por medio de una barra de búsqueda que se encuentra antes del listado. La Figura 19 muestra el listado de asignaturas. 57 Figura 19. Listado de Asignaturas. Los usuarios pueden crear una asignatura nueva por medio de un formulario. El formulario muestra todos los atributos de las asignaturas mediante campos de entrada, los cuales deben ser llenados por los usuarios con la información solicitada, que se almacenará para su uso posterior o manipulación. Los usuarios también pueden seleccionar una asignatura del listado para revisar sus datos particulares tales como el código, el departamento al que pertenece, el nombre y el nombre corto. Además, se muestra toda la información relacionada con las asignaturas tales como los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales, con la finalidad de acceder convenientemente y gestionar las distintas características de las asignaturas en un solo lugar. 58 Se utilizó un menú de acordeones para organizar de manera estructurada las características de las asignaturas. Los usuarios pueden minimizar y maximizar los acordeones para mostrar su contenido cuando sea necesario. La Figura 20 muestra la página web para editar asignaturas. Figura 20. Editar Asignaturas. Existen asignaturas que se pueden cursar bajo diferentes modalidades en la misma carrera. De este modo, la asignatura Aplicaciones con la Tecnología Internet se puede cursar como obligatoria optativa o como electiva en la carrera de Computación, por ejemplo. Se crearon los campos tipo_materia_id y es_tipo_principal en la tabla materia_en_plan para poder registrar una asignatura varias veces en el mismo plan de estudio con tipos de asignaturas diferentes. Otro caso particular a tomar en cuenta es el de las asignaturas obligatorias y sus convalidaciones, el campo es_tipo_principal permite determinar cuáles son las asignaturas obligatorias de una carrera y cuáles son las asignaturas por las cuales son convalidadas. La Figura 21 muestra la tabla materia_en_plan. 59 Figura 21. Tabla materia_en_plan. Se pueden gestionar los datos particulares de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, el tipo de asignatura, el método de calificación, el número de unidades de crédito que se obtienen por aprobarla, el número de horas teóricas, el número de horas de práctica y el número de horas de laboratorios que reciben los estudiantes en clases semanales, el semestre, si requiere un aula y un horario, si puede ser reparada, si es de servicio, si se programa un examen final, el número de unidades de créditos aprobados requeridos para cursarla y si puede ser retirada. También se pueden gestionar los datos particulares de las prelaciones de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, la asignatura que se debe aprobar con anterioridad para poder cursarla y si dicha asignatura se puede cursar en paralelo. Además, se pueden gestionar los datos particulares de las convalidaciones de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, y la asignatura por la cual es convalidada. También se pueden gestionar los datos particulares de las asignaturas registradas en las opciones profesionales de un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, la opción profesional y el tipo de asignatura. 60 La gestión de los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales de las asignaturas registradas en un plan de estudio se realiza de manera similar a la gestión de las asignaturas. El módulo web mantiene a los usuarios informados sobre el estado de las operaciones que están realizando, a través de retroalimentación adecuada dentro de un plazo razonable de tiempo. Los formularios están diseñados para comprobar que los campos obligatorios están llenos. Si los campos no lo están, se muestra una notificación emergente que indica la obligatoriedad, en la esquina superior derecha de cada uno de ellos. Además, no se puede enviar un formulario al servidor hasta que todos los campos obligatorios estén llenos. La Figura 22 muestra la notificación emergente para indicar los campos obligatorios de los formularios. Figura 22. Campos Obligatorios. Los diálogos muestran mensajes complementarios sobre la información llenada por los usuarios en los campos de entrada de un formulario. Se utilizan en su mayoría con las listas desplegables, en las cuales las opciones disponibles dependen de los valores de otros campos de entrada, para informar a los usuarios que no hay ninguna opción disponible para los valores seleccionados. La Figura 23 muestra el dialogo emergente utilizado junto con las listas desplegables en cascada. Figura 23. Diálogos Emergentes. Los mensajes de confirmación y error están expresados en un lenguaje sencillo (sin código), con palabras, frases y expresiones que indiquen con precisión el resultado de la operación realizada, 61 así como también pueden sugerir una solución constructiva en caso de que sea necesario. Las Figuras 24 y 25 muestran los mensajes de confirmación y error respectivamente. Figura 24. Mensajes de Confirmación. Figura 25. Mensajes de Error. 4.2.3 Codificación Los planes de estudio se representan en el módulo web para la gestión de planes de estudio en el sistema CONEST por medio del modelo plan.rb, en el cual se definen las propiedades generales de los planes de estudio tales como la clave primaria, las asociaciones entre modelos, las validaciones, las retrollamadas y los métodos de la lógica de negocio. La Figura 26 muestra el modelo plan.rb. Figura 26. Modelo plan.rb. 62 Para mostrar el listado de planes de estudio, primero se buscan todos los registros en la base de datos, en el método index del controlador plan_estudio_controller.rb. Luego, en la vista index.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de los planes de estudio contiene algún registro o si está vacía. Si la variable no está vacía, se itera sobre el conjunto de resultados, y se muestra en una tabla los datos particulares así como los enlaces para editar, activar y eliminar el plan de estudio correspondiente. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún registro y un enlace para crear un plan de estudio nuevo. El estilo de la tabla y la funcionalidad para ordenar alfabéticamente las columnas se obtienen a través de la clase tablesorter. Además, se enlaza la hoja de estilo plan_estudio.css.scss para incorporar las reglas de presentación requeridas por la vista. La Figura 27 muestra la vista index.html.haml (Ver Figura 15). Figura 27. Vista plan_estudio/index.html.haml. Para crear un plan de estudio, primero se crea una instancia nueva, en el método crear del controlador plan_estudio_controller.rb. Luego, en la vista crear.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. 63 Los atributos de los planes de estudio se muestran en la vista parcial _formulario.html.haml mediante campos de entrada. Los campos de entrada se llenan dependiendo de la acción que se esté realizando, de este modo, los usuarios llenan todos los campos de entrada del formulario cuando estén creando un plan de estudio nuevo, pero no podrán modificar la información de los campos de entrada correspondientes a la clave primaria cuando estén editando un plan de estudio existente. El estilo de las notificaciones emergentes y la funcionalidad para indicar los campos obligatorios de los formularios se obtienen a través de la clase valídate[required]. La Figura 28 muestra la vista parcial _formulario.html.haml (Ver Figura 16). Figura 28. Vista Parcial plan_estudio/_formulario.html.haml. Para guardar un plan de estudio nuevo, primero se guarda la información de los campos de entrada del formulario, en el método guardar del controlador plan_estudio_controller.rb. Luego, se intenta almacenar el registro en la base de datos. Si ninguna de las validaciones falla y la operación de inserción en la base de datos se realiza exitosamente, se redirige a la vista index.html.haml y se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 29 muestra el método guardar. 64 Figura 29. Método plan_estudio/guardar. Los mensajes de confirmación y error se muestran en la vista parcial _notificacion.html.haml. Los estilos de los mensajes se obtienen a través de las clases ui-state-highlight.ui-corner-all y ui-state- error.ui-corner-all respectivamente. La Figura 30 muestra la vista parcial _notificacion.html.haml. Figura 30. Vista Parcial plan_estudio/_notificacion.html.haml. Para editar un plan de estudio, primero se busca el registro seleccionado del listado en la base de datos, en el método editar del controlador plan_estudio_controller.rb. Luego, en la vista editar.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardaron los datos particulares del plan de estudio que se mostrarán en los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Para actualizar un plan de estudio existente, primero se busca el registro en la base de datos, en el método actualizar del controlador plan_estudio_controller.rb. Luego, se intenta almacenar los cambios en el registro en la base de datos. Si ninguna de las validaciones falla y la operación de actualización en la base de datos se realiza exitosamente, se redirige a la vista index.html.haml y se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 31 muestra un fragmento del método actualizar. Figura 31. Método plan_estudio/actualizar. 65 Para eliminar un plan de estudio existente, primero se busca el registro en la base de datos, en el método eliminar del controlador plan_estudio_controller.rb. Luego, se intenta borrar el registro de la base datos. Si ninguna de las retrollamadas falla y la operación de eliminación en la base de datos se realiza exitosamente, se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 32 muestra el método eliminar. Figura 32. Método plan_estudio/eliminar. En el método editar del controlador plan_estudio_controller.rb, también se buscan todos los requisitos curriculares, el número de asignaturas que los estudiantes deben aprobar en cada semestre de la carrera por requisito curricular y las opciones profesionales de un plan de estudio. La Figura 33 muestra un fragmento del método editar. Figura 33. Método plan_estudio/editar. El algoritmo para buscar el número de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG que se deben aprobar en cada semestre, es similar al algoritmo para buscar el número de asignaturas obligatorias, que se muestra en la figura anterior. 66 En la vista editar.html.haml, se muestran todos los listados relacionados con los planes de estudio tales como el listado de requisitos curriculares, el listado de requisitos curriculares distribuidos por semestre y el listado de opciones profesionales, organizados en un menú de acordeones. La Figura 34 muestra un fragmento de la vista editar.html.haml (Ver Anexo I). Figura 34. Vista plan_estudio/editar.html.haml. El estilo de los acordeones y la funcionalidad para minimizar y maximizar su contenido se obtienen a través de las clases acordeon y contenido-acordeon, las cuales se desarrollaron en el script plan_estudio.js.coffee. La Figura 35 muestra un fragmento del script plan_estudio.js.coffee. Figura 35. Script plan_estudio.js.coffee. 67 El listado de requisitos curriculares distribuidos por semestre, se muestra en la vista parcial _distribucion_requisitos_curriculares.html.haml. Se itera sobre el conjunto de requisitos curriculares del plan de estudio, y dentro de un ciclo, se determina la distribución del número de asignaturas del requisito curricular correspondiente en cada semestre de la carrera. Además, se muestra el número total de asignaturas distribuidas del número mínimo de asignaturas que se deben aprobar en dicho requisito curricular. La Figura 36 muestra un fragmento de la vista parcial _distribucion_requisitos_curriculares.html.haml. Figura 36. Vista Parcial plan_estudio/_distribucion_requisitos_curriculares.html.haml. El algoritmo para determinar la distribución de las asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG en cada semestre, es similar al algoritmo para determinar la distribución de las asignaturas obligatorias, que se muestra en la figura anterior. Los tipos de asignaturas se restringen cuando se crea un requisito curricular nuevo en un plan de estudio, para prevenir que se registre un tipo de asignatura varias veces en el mismo plan de estudio. La Figura 37 muestra el método crear_requisito_curricular. 68 Figura 37. Método plan_estudio/crear_requisito_curricular. Luego, en la vista crear_requisito_curricular.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de los tipos de asignaturas contiene algún elemento o si está vacía. Si no está vacía, se muestra un formulario, en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún elemento y un enlace para regresar a la vista editar.html.haml (Ver Anexo II). Antes de guardar un requisito curricular en la base de datos, se verifica que el número mínimo de unidades de crédito y el número mínimo de asignaturas del requisito curricular no sean iguales a cero simultáneamente. Antes de actualizar un requisito curricular en la base de datos, también se verifica que el número mínimo de asignaturas que se deben aprobar no sea menor que el número total de asignaturas distribuidas en los 10 semestres de la carrera. La Figura 38 muestra un fragmento del modelo requisito_graduacion_plan.rb. Figura 38. Modelo requisito_graduacion_plan.rb Además, antes de guardar o actualizar la distribución de un requisito curricular en la base de datos, se verifica que el número total de asignaturas distribuidas en los 10 semestres de la carrera no sea mayor que el número mínimo de asignaturas que se deben aprobar en el requisito curricular correspondiente, en el modelo distribucion_requisito_plan.rb. 69 Los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales de los planes de estudio, así como los requisitos curriculares de las opciones profesionales son similares a los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio. Las asignaturas se representan en el módulo web para la gestión de planes de estudio en el sistema CONEST por medio del modelo materia.rb, en el cual se definen las propiedades generales de las asignaturas tales como la clave primaria, las asociaciones entre modelos, las validaciones, las retrollamadas y los métodos de la lógica de negocio. Para mostrar el listado de asignaturas, primero se buscan todos los registros en la base de datos en conjuntos (de 50 asignaturas cada uno), en el método index del controlador asignatura_controller.rb. Luego, en la vista index.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de las asignaturas contiene algún registro o si está vacía. Si la variable no está vacía, se itera sobre el primer conjunto de resultados, y se muestra en una tabla los datos particulares así como los enlaces para editar y eliminar la asignatura correspondiente. Luego de la tabla, se muestran los enlaces para navegar a través de los diferentes conjuntos de asignaturas. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún registro y un enlace para crear una asignatura nueva. El estilo de los enlaces y la funcionalidad para mostrar el contenido de los diferentes conjuntos de asignaturas en el listado se obtienen a través de la gema Kaminari. Para buscar una asignatura por nombre, primero se buscan todos los registros cuyo nombre contenga la cadena de caracteres que el usuario ingresó en la barra de búsqueda, de manera asíncrona en la base de datos a medida que vaya tecleando, en el método autocomplete del controlador asignatura_controller.rb. Luego, se muestran las asignaturas en un listado emergente debajo de la barra de búsqueda. La Figura 39 muestra el método autocomplete. Figura 39. Método asignatura/autocomplete. 70 El estilo del listado emergente y la funcionalidad para buscar asíncronamente las asignaturas en la base de datos se obtienen a través de la librería jQuery, la cual se implementó en el script asignatura.js.coffee. La Figura 40 muestra un fragmento del script asignatura.js.coffee. Figura 40. Script asignatura.js.coffee (Autocomplete). Posteriormente, en el método buscar_asignatura del controlador asignatura_controller.rb, se determina si la asignatura que seleccionó el usuario del listado emergente es válida o si es inválida. Si la asignatura es válida, se redirige a la vista editar.html.haml. Si la asignatura no es válida, se muestra un mensaje de error. En el método editar del controlador asignatura_controller.rb, se busca la asignatura seleccionada del listado en la base de datos, así como los planes de estudio y las opciones profesionales en los que está registrada, las prelaciones y las convalidaciones. En la vista editar.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardaron los datos particulares de la asignatura que se mostrarán en los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Además, se muestran los listados relacionados con las asignaturas tales como el listado de planes de estudio, el listado de prelaciones, el listado de convalidaciones y el listado de opciones profesionales, organizados en un menú de acordeones (Ver Anexo III). Las carreras se restringen cuando se crea una prelación de una asignatura, para cerciorarse de que solo se puedan registrar prelaciones en los planes de estudio en los cuales está registrada la asignatura. La Figura 41 muestra el método crear_prelacion. 71 Figura 41. Método asignatura/crear_prelacion. Luego, en la vista crear_prelacion.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de las carreras contiene algún elemento o si está vacía. Si no está vacía, se muestra un formulario, en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún elemento y un enlace para regresar a la vista editar.html.haml. La lista desplegable de planes de estudio del formulario mencionado anteriormente se llena dinámicamente dependiendo del valor de la lista desplegable de carreras. Se buscan todos los planes de estudio en los que está registrada la asignatura que pertenezcan a la carrera que el usuario selecciono en la lista desplegable, de manera asíncrona en la base de datos cuando el usuario seleccione una opción, en el método buscar_planes_estudio_asignatura del controlador asignatura_controller.rb. La Figura 42 muestra el método buscar_planes_estudio_asignatura. Figura 42. Método asignatura/buscar_planes_estudio_asignatura. La funcionalidad para buscar asíncronamente los planes de estudio en la base de datos se obtiene a través de la librería jQuery, la cual se implementó en el script asignatura.js.coffee. Además, se determina si la variable donde se guardó el resultado de la búsqueda de los planes de estudio contiene algún elemento o si está vacía. Si la variable no está vacía, se llenan las opciones de la lista desplegable con los planes de estudio. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún plan de estudio para la carrera seleccionada en un dialogo emergente. La Figura 43 muestra otro fragmento del script asignatura.js.coffee. 72 Figura 43. Script asignatura.js.coffee (Listas Desplegables). Por último, los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales de una asignatura es similar a los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio. 4.2.4 Pruebas Las pruebas funcionales de esta iteración se basan en la creación, edición y eliminación de planes de estudio, asignaturas y opciones profesionales, así como la gestión de las características particulares de cada uno de ellos. Caso de Prueba Resultado Esperado Resultado Obtenido Crear un plan de estudio Crear un plan de estudio nuevo Se guardó la información básica del plan de estudio y se mostró un mensaje de confirmación Editar un plan de estudio Modificar un plan de estudio existente Se actualizó la información básica del plan de estudio y se mostró un mensaje de confirmación Eliminar un plan de estudio Eliminar un plan de estudio existente Se borró la información básica del plan de estudio y se mostró un mensaje de confirmación Activar un plan de estudio Registrar el plan de estudio activo de la carrera Se registró el plan de estudio como el plan activo de la carrera y se mostró un mensaje de confirmación Intentar eliminar un Tratar de eliminar un plan Se canceló la acción correctamente y se 73 plan de estudio activo de estudio activo mostró un mensaje de error Crear un requisito curricular Crear un requisito curricular nuevo en un plan de estudio Se guardó el requisito curricular en el plan de estudio y se mostró un mensaje de confirmación Editar un requisito curricular Modificar un requisito curricular de un plan de estudio Se actualizó el requisito curricular del plan de estudio y se mostró un mensaje de confirmación Eliminar un requisito curricular Eliminar un requisito curricular de un plan de estudio Se borró el requisito curricular del plan de estudio y se mostró un mensaje de confirmación Distribuir un requisito curricular Distribuir un requisito curricular de un plan de estudio por semestres Se guardó el número de asignaturas en cada semestre de un requisito curricular y se mostró un mensaje de confirmación Redistribuir un requisito curricular Redistribuir un requisito curricular de un plan de estudio por semestres Se actualizó el número de asignaturas en cada semestre de un requisito curricular y se mostró un mensaje de confirmación Intentar distribuir un número mayor de asignaturas Tratar de distribuir un número de asignaturas mayor que el requerido por un requisito curricular Se canceló la acción correctamente y se mostró un mensaje de error Crear una opción profesional Crear una opción profesional nueva Se guardó la información básica de la opción profesional y se mostró un mensaje de confirmación Editar una opción profesional Modificar una opción profesional existente Se actualizó la información básica de la opción profesional y se mostró un mensaje de confirmación Eliminar una opción profesional Eliminar una opción profesional existente Se borró la información básica de la opción profesional y se mostró un mensaje de confirmación Registrar una opción profesional Registrar una opción profesional en un plan de estudio Se registró la opción profesional en el plan de estudio y se mostró un mensaje de confirmación Editar un registro de una opción profesional Modificar una opción profesional registrada en un plan de estudio Se actualizó la opción profesional registrada en el plan de estudio y se mostró un mensaje de confirmación Eliminar un registro de una opción profesional Eliminar una opción profesional registrada en un plan de estudio Se borró la opción profesional registrada en el plan de estudio y se mostró un mensaje de confirmación Crear un requisito curricular en una opción profesional Crear un requisito curricular nuevo en una opción profesional Se guardó el requisito curricular en la opción profesional y se mostró un mensaje de confirmación Editar un requisito curricular de una opción profesional Modificar un requisito curricular de una opción profesional Se actualizó el requisito curricular de la opción profesional y se mostró un mensaje de confirmación Eliminar un requisito curricular de una opción profesional Eliminar un requisito curricular de una opción profesional Se borró el requisito curricular de la opción profesional y se mostró un mensaje de confirmación 74 Crear una asignatura Crear una asignatura nueva Se guardó la información básica de la asignatura y se mostró un mensaje de confirmación Editar una asignatura Modificar una asignatura existente Se actualizó la información básica de la asignatura y se mostró un mensaje de confirmación Eliminar una asignatura Eliminar una asignatura existente Se borró la información básica de la asignatura y se mostró un mensaje de confirmación Registrar una asignatura Registrar una asignatura en un plan de estudio Se registro la asignatura en el plan de estudio y se mostro un mensaje de confirmación Editar un registro de una asignatura Modificar una asignatura registrada en un plan de estudio Se actualizó la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar un registro de una asignatura Eliminar una asignatura registrada en un plan de estudio Se borró la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Activar el tipo principal de una asignatura Registrar el tipo principal de una asignatura en un plan de estudio Se registró cual es el tipo principal de una asignatura registrada varias veces en el mismo plan de estudio y se mostró un mensaje de confirmación Intentar eliminar el tipo principal de una asignatura Tratar de eliminar el registro principal de una asignatura en un plan de estudio Se canceló la acción correctamente y se mostro un mensaje de error Crear una prelación Crear una prelación nueva de una asignatura registrada en un plan de estudio Se guardó la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Editar una prelación Modificar una prelación de una asignatura registrada en un plan de estudio Se actualizó la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar una prelación Eliminar una prelación de una asignatura registrada en un plan de estudio Se borró la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Crear una convalidación Crear una convalidación nueva de una asignatura registrada en un plan de estudio Se guardó la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Editar una convalidación Modificar una convalidación de una asignatura registrada en un plan de estudio Se actualizó la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar una convalidación Eliminar una convalidación de una asignatura registrada en un plan de Se borró la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de 75 estudio confirmación Registrar una asignatura en una opción profesional Registrar una asignatura en una opción profesional de un plan de estudio Se registró la asignatura en la opción profesional y se mostro un mensaje de confirmación Editar un registro de una asignatura en una opción profesional Modificar una asignatura registrada en una opción profesional de un plan de estudio Se actualizó la asignatura registrada en la opción profesional y se mostro un mensaje de confirmación Eliminar un registro de una asignatura en una opción profesional Eliminar una asignatura registrada en una opción profesional de un plan de estudio Se borró la asignatura registrada en la opción profesional y se mostro un mensaje de confirmación 76 4.3 Iteración 2 En esta iteración se describe el proceso de desarrollo de la verificación de los requisitos curriculares de los estudiantes regulares de pregrado en el módulo web, siguiendo las prácticas del método ágil XP; especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. 4.3.1 Planificación Descripción Diseñar la interfaz gráfica, las estructuras de datos y desarrollar un algoritmo para verificar los requisitos curriculares de los estudiantes Tarjetas de Historias 1. Diseñar una interfaz gráfica para verificar requisitos curriculares 2. Diseñar las estructuras de datos para verificar requisitos curriculares 3. Desarrollar la verificación de asignaturas obligatorias 4. Desarrollar la verificación de asignaturas obligatorias optativas 5. Desarrollar la verificación de asignaturas electivas 6. Desarrollar la verificación de asignaturas complementarias 7. Desarrollar la verificación de laboratorios 8. Desarrollar la verificación de pasantías 9. Desarrollar la verificación de seminarios 10. Desarrollar la verificación de TEG 11. Desarrollar la verificación del servicio comunitario 12. Desarrollar la verificación de asignaturas excedentes 13. Desarrollar la verificación de convalidaciones 14. Diseñar una interfaz gráfica para la cabecera 15. Revisar los requisitos curriculares de la Licenciatura en Biología 16. Revisar los requisitos curriculares de la Licenciatura en Computación 17. Revisar los requisitos curriculares de la Licenciatura en Física 18. Revisar los requisitos curriculares de la Licenciatura en Geoquímica 19. Revisar los requisitos curriculares de la Licenciatura en Matemática 20. Revisar los requisitos curriculares de la Licenciatura en Química 21. Desarrollar un script de bases de datos 22. Refactorizar el código para verificar requisitos curriculares 23. Diseñar una interfaz gráfica para el resumen 24. Desarrollar el resumen de los datos académicos 25. Desarrollar el resumen de la verificación de los requisitos curriculares 26. Diseñar las estructuras de datos para verificar opciones profesionales 27. Desarrollar el resumen de la verificación de la opción profesional 28. Desarrollar el resumen general 29. Refactorizar el código para mostrar los resúmenes 30. Desarrollar la selección de un estudiante y una carrera 53. Desarrollar un PDF para la vista para verificar requisitos curriculares 57. Desarrollar un script de bases de datos Tiempo Estimado 33 Días 77 4.3.2 Diseño Los trabajadores del Departamento de Grado de la DCE verifican los requisitos curriculares de los estudiantes regulares de pregrado utilizando distintos documentos impresos, entre los cuales se destacan los planes de estudio de las licenciaturas de la Facultad de Ciencias y los kardex de los estudiantes. La página web para verificar requisitos curriculares muestra todas las asignaturas (tanto aprobadas como no aprobadas por un estudiante) de una carrera organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes del kardex. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. Las asignaturas están agrupadas por semestre, de manera similar al plan de estudio de la licenciatura correspondiente. La Figura 44 muestra un fragmento de la página web para verificar requisitos curriculares. Figura 44. Verificación de Requisitos Curriculares. 78 Se utilizaron diferentes colores y grados de opacidad para diferenciar las asignaturas aprobadas y las asignaturas que aún no han sido aprobadas por un estudiante en una carrera. La Figura 45 muestra el efecto utilizado para diferenciar las asignaturas aprobadas y las no aprobadas. Figura 45. Asignaturas Aprobadas/Asignaturas No Aprobadas. Una asignatura se puede registrar varias veces en el mismo plan de estudio con tipos de asignaturas diferentes. Se creó el campo tipo_materia_id en la tabla historial_academico para poder determinar los tipos de las asignaturas aprobadas por un estudiante en una carrera. La Figura 46 muestra la tabla historial_academico. Figura 46. Tabla historial_academico. Las asignaturas del servicio comunitario se muestran luego de las asignaturas de un plan de estudio, así como el excedente de asignaturas electivas y/o complementarias, en caso de que un estudiante haya aprobado más asignaturas que las requeridas en una carrera. El resumen de la verificación de los requisitos curriculares muestra el número de asignaturas que se deben aprobar (por cada requisito curricular) en una carrera organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos que se verificaron de los requisitos curriculares. A partir de la segunda fila, se muestran los tipos de asignaturas de los requisitos curriculares, las columnas de estas filas muestran el resultado de la verificación de cada requisito curricular que corresponda con los atributos de la 79 cabecera. Se utilizaron iconos visuales para señalar los requisitos curriculares que un estudiante no satisface. La Figura 47 muestra el resumen de la verificación de los requisitos curriculares. Figura 47. Resultado de la Verificación de Requisitos Curriculares. Existen opciones profesionales que se pueden obtener en diferentes planes de estudio. De este modo, la opción profesional Aplicaciones con la Tecnología Internet se puede obtener en los planes de estudio de Computación de los años 2000 y 2004, por ejemplo. Se crearon las tablas opcion, opcion_plan y requisito_graduacion_opcion_plan en la base de datos para poder registrar una opción profesional en varios planes de estudio, así como sus requisitos curriculares. La Figura 48 muestra las tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. Figura 48. Tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. El resumen de la verificación de la opción profesional muestra todas las asignaturas (tanto aprobadas como no aprobadas por un estudiante) de una opción profesional organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos de las asignaturas. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. La Figura 49 muestra el resumen de la verificación de la opción profesional. 80 Figura 49. Verificación de la Opción Profesional. Por último, se muestra el resultado general de la verificación de los requisitos curriculares de un estudiante en una carrera, en el cual se muestra un mensaje indicando si satisface o no satisface todos los requisitos curriculares necesarios para obtener un título universitario. 4.3.3 Codificación Para verificar los requisitos curriculares de un estudiante en una carrera, primero se busca el plan de estudio activo de la carrera, las asignaturas obligatorias, el número mínimo de unidades de crédito y el número mínimo de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario que se deben aprobar, las convalidaciones y las asignaturas que ha aprobado en la base de datos, en el método verificar_requisitos del controlador plan_estudio_controller.rb. La Figura 50 muestra un fragmento del método verificar_requisitos. 81 Figura 50. Método plan_estudio/verificar_requisitos (Requisitos Curriculares). 82 El algoritmo para buscar el número de asignaturas electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario que se deben aprobar en una carrera, es similar al algoritmo para buscar el número de asignaturas obligatorias optativas que se deben aprobar, que se muestra en la figura anterior. Además, el algoritmo para buscar las asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario aprobadas por un estudiante en una carrera, es similar al algoritmo para buscar las asignaturas obligatorias aprobadas por un estudiante, que se muestra en la figura anterior. Es importante resaltar que las asignaturas de tipo método y PCI son consideradas como asignaturas electivas y complementarias respectivamente, en caso de que un estudiante haya aprobado alguna asignatura de estos tipos en una carrera. Luego, en la vista parcial _verificar_requisitos_academicos.html.erb, se verifica dentro de un ciclo si un estudiante ha aprobado todas las asignaturas obligatorias (o las asignaturas por las cuales han sido convalidadas) y el número de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG requeridas en cada semestre de una carrera. La Figura 51 muestra un fragmento de la vista parcial _verificar_requisitos_academicos.html.erb (Ver Figura 44). 83 84 Figura 51. Vista Parcial _verificar_requisitos_academicos.html.erb. El algoritmo para verificar si un estudiante ha aprobado el número de asignaturas electivas, complementarias, laboratorios, pasantías, seminarios y TEG en cada semestre de una carrera, es similar al algoritmo para verificar si ha aprobado el número de asignaturas obligatorias optativas, que se muestra en la figura anterior. En la vista parcial _verificar_servicio_comunitario.html.erb, se verifica si un estudiante ha aprobado mas asignaturas electivas y/o complementarias que las requeridas en una carrera, así como se verifica si ha aprobado todas las asignaturas del servicio comunitario. En el método verificar_requisitos del controlador plan_estudio_controller.rb, también se determina la opción profesional de un estudiante en una carrera, en función de los seminarios y TEG que haya aprobado o inscrito en el semestre en curso. Además, se buscan todos los requisitos curriculares de la opción profesional en la base de datos. La Figura 52 muestra otro fragmento del método verificar_requisitos. 85 Figura 52. Método plan_estudio/verificar_requisitos (Opción Profesional). El algoritmo para buscar los TEG que se deben aprobar en una opción profesional, es similar al algoritmo para buscar los seminarios que se deben aprobar, que se muestra en la figura anterior. En la vista parcial _resumen_opcion_profesional.html.erb, se verifica dentro de un ciclo si un estudiante ha aprobado todas las asignaturas electivas, seminarios y TEG que se deben aprobar en una opción profesional. La Figura 53 muestra un fragmento de la vista parcial _resumen_opcion_profesional.html.erb (Ver Figura 49). 86 Figura 53. Vista Parcial _resumen_opcion_profesional.html.erb. Por último, en la vista _revision_requisitos_notas.erb, se verifica si un estudiante satisface todos los requisitos curriculares para obtener el título de una carrera, y se muestran cada uno de los requisitos curriculares que no satisface en caso contrario. 87 4.3.4 Pruebas Las pruebas funcionales de esta iteración se basan en la verificación de los requisitos curriculares de los estudiantes regulares de pregrado de la Facultad de Ciencias. Caso de Prueba Resultado Esperado Resultado Obtenido Buscar un estudiante con una carrera Buscar un estudiante inscrito en una sola carrera Se buscó la carrera en la cual está inscrito el estudiante para verificar sus requisitos curriculares Buscar un estudiante con más de una carrera Buscar un estudiante inscrito en más de una carrera Se buscaron las carreras en las cuales está inscrito el estudiante y se mostraron en un dialogo emergente Buscar un estudiante sin carrera Buscar un estudiante que no esté inscrito en ninguna carrera Se mostro un mensaje de error en un dialogo emergente Verificar los requisitos de un estudiante de primer semestre Verificar los requisitos curriculares de un estudiante del primer semestre de una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Biología Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Biología Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Computación Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Computación Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Física Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Física Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Geoquímica Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Geoquímica Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Matemática Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Matemática Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Química Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Química Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante con convalidaciones Verificar los requisitos curriculares de un estudiante con asignaturas convalidadas en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular 88 Verificar los requisitos de un estudiante con excedente de asignaturas Verificar los requisitos curriculares de un estudiante que haya aprobado más asignaturas que las requeridas en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante sin opción Verificar los requisitos curriculares de un estudiante sin opción profesional en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante con opción Verificar los requisitos curriculares de un estudiante con opción profesional en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular En esta iteración también se realizaron las pruebas de aceptación (con cuatro trabajadores de la DCE), las cuales se basan en la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Las principales funcionalidades del módulo web se dividieron en tres grupos diferentes, con el fin de permitir que los trabajadores que participaran en las pruebas, probaran las funcionalidades específicas del módulo web que correspondieran con las labores de su trabajo. En las pruebas de aceptación los trabajadores de la DCE realizaron las siguientes tareas: Planes de Estudio 1. Crear plan de estudio con datos introducidos por el usuario 2. Activar plan de estudio 3. Intentar eliminar plan de estudio activo 4. Crear requisito curricular con datos introducidos por el usuario 5. Distribuir requisito curricular con datos introducidos por el usuario 6. Editar distribución requisito curricular con datos introducidos por el usuario 7. Intentar editar distribución requisito curricular con total asignaturas distribuidas > mínimo asignaturas 8. Intentar editar requisito curricular con mínimo asignaturas < total asignaturas distribuidas Asignaturas 1. Crear asignatura con datos introducidos por el usuario 2. Registrar asignatura en plan de estudio con datos introducidos por el usuario 3. Activar asignatura principal 4. Intentar eliminar asignatura principal 5. Crear convalidación con datos introducidos por el usuario 6. Buscar asignatura 89 7. Registrar asignatura en opción profesional con datos introducidos por el usuario Opciones Profesionales/Verificación Requisitos Curriculares 1. Crear opción profesional con datos introducidos por el usuario 2. Registrar opción profesional en plan de estudio con datos introducidos por el usuario 3. Crear requisito curricular opción profesional con datos introducidos por el usuario 4. Intentar eliminar profesional con registros historial académico 5. Buscar estudiante predefinido 6. Validar requisitos curriculares de estudiante predefinido Luego de realizar las pruebas de aceptación, los trabajadores de la DCE respondieron una encuesta para evaluar los requerimientos funcionales y los requerimientos no funcionales del módulo web. A continuación se presenta el resultado de la encuesta realizada por los trabajadores de la DCE: 100% 100% 75% 100% 100% 0% 0% 0% 0% 0% 0% 0% 25% 0% 0% Accesibilidad Usabilidad Tolerancia a Fallos Interfaz de Usuario Agrupación de la Información Bueno Moderado Malo 90 Conclusiones El objetivo general de este Trabajo Especial de Grado es desarrollar un módulo web basado en tecnologías web, que permita gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias, así como automatizar el trabajo de verificación de requisitos curriculares del proceso de graduación realizado por la División de Control de Estudios (DCE). Se facilitaron las labores de los trabajadores del Departamento de Grado de la DCE mediante la automatización de la verificación de los requisitos curriculares de los estudiantes regulares de pregrado de la Facultad de Ciencias, delegando las labores monótonas al módulo web, permitiendo que los trabajadores se dediquen a labores más importantes. Además, los estudiantes de la Facultad de Ciencias pueden verificar los requisitos curriculares de su carrera y generar los documentos PDF relacionados, desde cualquier computadora que disponga de una conexión a internet. El sistema CONEST no contaba con una aplicación que permitiera gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias, este trabajo se realizaba manipulando directamente la base de datos del sistema CONEST. Esto representa un mayor esfuerzo humano, y requiere de una persona con conocimientos tecnológicos para realizar el trabajo sin comprometer la integridad de la base de datos. En este sentido, se simplificó y se redujo la carga de trabajo de los administradores de la DCE mediante la automatización de la gestión de los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias, estos se estudiaron para determinar las características comunes y las diferencias de cada plan de estudio, así como las validaciones y las relaciones entre las asignaturas y las opciones profesionales que los conforman. Al contar con las funcionalidades que ofrece el módulo web, los administradores de la DCE deben cumplir un perfil más general para gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias en el sistema CONEST. Se realizaron un conjunto de pruebas funcionales para verificar el correcto funcionamiento del módulo web con la participación de los tutores (que son usuarios finales del sistema). Además, se realizaron las pruebas de aceptación con los trabajadores de la DCE. Los resultados de estas pruebas fueron positivos, y los usuarios que participaron en las mismas mostraron interés en utilizar las funcionalidades del módulo web para realizar sus labores. El módulo web no se puso en producción con el resto del sistema CONEST, debido a los cambios realizados en las estructuras de datos durante el desarrollo de este proyecto. Estos cambios afectarían el funcionamiento del resto de los módulos del sistema CONEST sin una migración previa de la base de datos y la refactorización de la codificación. El módulo web para la gestión de planes de estudio en el sistema CONEST se desarrolló utilizando tecnologías web actuales, entre las cuales se destacan el lenguaje de programación Ruby y el 91 framework de desarrollo de aplicaciones web Rails. Esta experiencia fue muy enriquecedora ya que pude profundizar mis conocimientos previos del framework y mejorar mis habilidades para desarrollar aplicaciones web siguiendo las prácticas de programación recomendadas en las páginas de Ruby on Rails Guides y Rails on Rails Screencasts. Es importante resaltar que durante el proceso de desarrollo de este Trabajo Especial de Grado, se publicó una actualización importante del framework Rails (versión 3.1). Por este motivo, se actualizó el framework y se refactorizó el código del módulo web para cumplir con los estándares de programación de la nueva versión de Rails. Otro aspecto importante a tomar en cuenta, es la adaptación del método ágil XP implementado para estructurar, planificar y controlar el proceso de desarrollo del módulo web. Algunas prácticas del método ágil XP no se aplicaron en este proyecto tales como el desarrollo previamente probado, la programación en parejas, la propiedad colectiva y la integración continua. Sin embargo, se aplicaron el resto de las prácticas del método, lo cual facilitó la planificación y las entregas del proyecto, dividiendo los requerimientos en iteraciones, que se fueron desarrollando progresivamente según su prioridad. Finalmente, gracias al desarrollo de este Trabajo Especial de Grado se cumplieron satisfactoriamente los principales objetivos de este proyecto, logrando un aporte significativo al sistema CONEST, ya que hasta el momento no contaba con una aplicación que permitiera gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias, así como verificar los requisitos curriculares de los estudiantes regulares de pregrado. 92 Recomendaciones A pesar de los beneficios que ahora pueden disfrutar los trabajadores de la DCE y los estudiantes de pregrado de la Facultad de Ciencias a través del módulo web para la gestión de planes de estudio en el sistema CONEST, se pueden considerar algunas mejoras y nuevas funcionalidades que permitan el mantenimiento preventivo y correctivo del sistema CONEST, como las que se mencionan a continuación:  Los planes de estudio están intrínsecamente relacionados con los procesos administrativos y las normativas académicas de las licenciaturas de la Facultad de Ciencias, por este motivo, se recomienda refactorizar el sistema CONEST para que soporte los cambios realizados en las estructuras de datos durante el desarrollo de este Trabajo Especial de Grado. Siendo el módulo de inscripción, uno de los más afectados ya que este debe determinar cuáles son las asignaturas que puede cursar un estudiante basándose en su avance en la carrera, considerando las prelaciones entre las asignaturas y el tipo principal de las asignaturas registradas múltiples veces en un mismo plan de estudio, ambas, características fundamentales desarrolladas en el módulo web para la gestión de planes de estudio en el sistema CONEST.  En el caso de las convalidaciones, los Consejos de Escuela de la Facultad de Ciencias aprueban las convalidaciones generales de las asignaturas que correspondan con su carrera, los trabajadores de la DCE no cuentan con un mecanismo para conocer las convalidaciones aprobadas por los distintos Consejos de Escuela, por este motivo, se recomienda desarrollar una aplicación que le permita a los trabajadores de la DCE conocer los detalles de las nuevas convalidaciones para registrarlas en el módulo web.  Con respecto a la verificación de requisitos curriculares, cada semestre se verifican los requisitos curriculares de los estudiantes que inscribieron TEG. Los trabajadores del Departamento de Grado de la DCE utilizan un documento impreso, para conocer cuáles son dichos estudiantes. Se recomienda desarrollar una aplicación que le permita a los trabajadores del Departamento de Grado consultar cuáles son los estudiantes que inscribieron TEG en el semestre actual, así como imprimir el historial académico y la verificación de requisitos curriculares correspondientes, en caso de ser necesario.  El componente docente es un convenio que existe con la Facultad de Humanidades y Educación que les permite a los estudiantes de las licenciaturas de Biología, Física, Matemática y Química optar por un título universitario de Licenciatura en Educación con una mención científica. Se recomienda crear los planes de estudio de los componentes docentes que ofrece la Facultad de Ciencias utilizando el módulo web para poder verificar los requisitos curriculares de los estudiantes inscritos en dichas carreras. 93 Referencias Bibliográficas Asierra. (14 de Junio de 2004). Desarrollo ágil de software - Wikipedia, la enciclopedia libre. Recuperado el 15 de Enero de 2011, de Wikipedia, la enciclopedia libre: http://es.wikipedia.org/wiki/Desarrollo_%C3%A1gil_de_software Beck, K. (2005). Extreme Programming Explained: Embrace Change. Boston: Pearson Education, Inc. Bos, B. (15 de Diciembre de 2005). CSS current work & how to participate. Recuperado el 20 de Diciembre de 2010, de World Wide Web Consortium (W3C): http://www.w3.org/Style/CSS/current-work.en.html Haml. (2011). #haml.about. Recuperado el 23 de Mayo de 2011, de #haml: http://haml-lang.com/ Hassani, K. (3 de Abril de 2005). Web application - Wikipedia, the free encyclopedia. Recuperado el 18 de Enero de 2011, de http://en.wikipedia.org/wiki/Web_application Hickson, I. (19 de Octubre de 2010). HTML5. Recuperado el 20 de Diciembre de 2010, de World Wide Web Consortium (W3C): http://dev.w3.org/html5/spec/Overview.html Obfusco, F. (24 de Noviembre de 2003). MySQL - Wikipedia, the free encyclopedia. Recuperado el 20 de Diciembre de 2010, de Wikipedia, the free encyclopedia: http://en.wikipedia.org/wiki/MySQL Patrick. (27 de Julio de 2004). Hypertext Transfer Protocol - Wikipedia, the free encyclopedia. Recuperado el 20 de Diciembre de 2010, de Wikipedia, the free encyclopedia: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol Ruby on Rails. (2011). http://rubyonrails.org/documentation. Recuperado el 20 de Diciembre de 2010, de http://rubyonrails.org: http://rubyonrails.org/documentation Sass. (2011). Sass - Syntactically Awesome Stylesheets. Recuperado el 23 de Mayo de 2011, de Sass - Syntactically Awesome Stylesheets: http://sass-lang.com/about.html Teruel, A. (20 de Septiembre de 2000). Justificaciones del diseño de Delta Pensum 1.x: Las clases Pensum, Calendario Curricular. Recuperado el 22 de Febrero de 2010, de http://www.ldc.usb.ve/~teruel/ci4712/dp/dp1x/whyPensum.html The jQuery Project. (2010). Main Page - jQuery JavaScript Library. Recuperado el 20 de Diciembre de 2010, de jQuery: The Write Less, Do More, JavaScript Library: http://docs.jquery.com/Main_Page 94 Anexo I: Editar Plan de Estudio 95 Anexo II: Crear Requisito Curricular 96 Anexo III: Editar AsignaturaUniversidad Central de Venezuela Facultad de Ciencias Escuela de Computación Trabajo Especial de Grado: Desarrollo de Un Módulo Web Para la Gestión de Planes de Estudio en el Sistema de Gestión Académica CONEST José T. Hernández C. V-16.179.441 Tutora: Prof. Jossie Zambrano Octubre, 2012 2 Resumen La División de Control de Estudios es la dependencia administrativa de la Facultad de Ciencias que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de las licenciaturas de pregrado. La División presta algunos de sus servicios a través del Sistema de Gestión Académica de Control de Estudios (CONEST) facilitando las operaciones de los procesos administrativos de la Facultad. Sin embargo, el sistema CONEST no cuenta con una aplicación que permita gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad. Este Trabajo Especial de Grado tiene como objetivo desarrollar un módulo web del sistema CONEST que permita gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias. Además de automatizar parte del trabajo de verificación de requisitos curriculares realizado por el Departamento de Grado de la División de Control de Estudios. El método ágil de desarrollo de software implementado para estructurar, planificar y controlar el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST es una adaptación de la Programación Extrema. Palabras Clave: Control de Estudios, Gestión de Planes de Estudio, Verificación de Requisitos Curriculares, Aplicación Web, Ruby on Rails. 3 Índice General Resumen ........................................................................................................................................ 2 Introducción .................................................................................................................................. 7 Capítulo 1. Planes de Estudio de la Facultad de Ciencias................................................................. 9 1.1 Licenciatura en Biología ...................................................................................................... 11 1.2 Licenciatura en Computación ............................................................................................. 15 1.3 Licenciatura en Física .......................................................................................................... 17 1.4 Licenciatura en Geoquímica................................................................................................ 21 1.5 Licenciatura en Matemática ............................................................................................... 22 1.6 Licenciatura en Química ..................................................................................................... 26 Capítulo 2. Tecnologías Web ........................................................................................................ 30 2.1 HTML5 ............................................................................................................................... 31 2.2 CSS3 ................................................................................................................................... 32 2.3 jQuery ................................................................................................................................ 33 2.4 Ruby on Rails ...................................................................................................................... 34 2.5 Haml .................................................................................................................................. 35 2.6 Sass .................................................................................................................................... 36 2.7 MySQL ................................................................................................................................ 36 Capítulo 3. Método Ágil de Desarrollo de Software ...................................................................... 37 3.1 Programación Extrema (XP) ................................................................................................ 38 3.2 Adaptación del Método Ágil XP .......................................................................................... 40 3.2.1 Planificación ................................................................................................................ 40 3.2.2 Diseño ......................................................................................................................... 41 3.2.3 Codificación ................................................................................................................. 41 3.2.4 Pruebas ....................................................................................................................... 42 Capítulo 4. Marco Aplicativo ........................................................................................................ 44 4.1 Iteración 0 .......................................................................................................................... 44 4.1.1 Planificación ................................................................................................................ 44 4.1.2 Diseño ......................................................................................................................... 50 4.1.3 Codificación ................................................................................................................. 51 4.1.4 Pruebas ....................................................................................................................... 51 4 4.2 Iteración 1 .......................................................................................................................... 52 4.2.1 Planificación ................................................................................................................ 52 4.2.2 Diseño ......................................................................................................................... 52 4.2.3 Codificación ................................................................................................................. 61 4.2.4 Pruebas ....................................................................................................................... 72 4.3 Iteración 2 .......................................................................................................................... 76 4.3.1 Planificación ................................................................................................................ 76 4.3.2 Diseño ......................................................................................................................... 77 4.3.3 Codificación ................................................................................................................. 80 4.3.4 Pruebas ....................................................................................................................... 87 Conclusiones ................................................................................................................................ 90 Recomendaciones ........................................................................................................................ 92 Referencias Bibliográficas ............................................................................................................ 93 Anexos ......................................................................................................................................... 94 5 Índice de Figuras Figura 1. Plan de Estudio de Biología. ........................................................................................... 13 Figura 2. Componente Docente de Biología. ................................................................................ 15 Figura 3. Plan de Estudio de Computación. .................................................................................. 17 Figura 4. Plan de Estudio de Física. ............................................................................................... 19 Figura 5. Componente Docente de Física. .................................................................................... 21 Figura 6. Plan de Estudio de Geoquímica...................................................................................... 22 Figura 7. Plan de Estudio de Matemática. .................................................................................... 24 Figura 8. Componente Docente de Matemática. .......................................................................... 26 Figura 9. Plan de Estudio de Química. .......................................................................................... 28 Figura 10. Componente Docente de Química. .............................................................................. 29 Figura 11. Arquitectura Cliente-Servidor. ..................................................................................... 31 Figura 12. Ciclo de Vida Para el Desarrollo Ágil de Software. ........................................................ 37 Figura 13. Formato de las Tarjetas de Historias. ........................................................................... 40 Figura 14. Diseño General del Sistema CONEST. ........................................................................... 50 Figura 15. Listado de Planes de Estudio. ....................................................................................... 53 Figura 16. Editar Planes de Estudio. ............................................................................................. 54 Figura 17. Tabla distribucion_requisito_plan. ............................................................................... 55 Figura 18. Listado de Requisitos Curriculares Distribuidos por Semestre. ..................................... 55 Figura 19. Listado de Asignaturas. ................................................................................................ 57 Figura 20. Editar Asignaturas. ...................................................................................................... 58 Figura 21. Tabla materia_en_plan. ............................................................................................... 59 Figura 22. Campos Obligatorios. .................................................................................................. 60 Figura 23. Diálogos Emergentes. .................................................................................................. 60 Figura 24. Mensajes de Confirmación. ......................................................................................... 61 Figura 25. Mensajes de Error. ...................................................................................................... 61 Figura 26. Modelo plan.rb. ........................................................................................................... 61 Figura 27. Vista plan_estudio/index.html.haml. ........................................................................... 62 Figura 28. Vista Parcial plan_estudio/_formulario.html.haml. ...................................................... 63 Figura 29. Método plan_estudio/guardar..................................................................................... 64 Figura 30. Vista Parcial plan_estudio/_notificacion.html.haml. .................................................... 64 6 Figura 31. Método plan_estudio/actualizar. ................................................................................. 64 Figura 32. Método plan_estudio/eliminar. ................................................................................... 65 Figura 33. Método plan_estudio/editar. ...................................................................................... 65 Figura 34. Vista plan_estudio/editar.html.haml. .......................................................................... 66 Figura 35. Script plan_estudio.js.coffee. ....................................................................................... 66 Figura 36. Vista Parcial plan_estudio/_distribucion_requisitos_curriculares.html.haml. ............... 67 Figura 37. Método plan_estudio/crear_requisito_curricular. ....................................................... 68 Figura 38. Modelo requisito_graduacion_plan.rb ......................................................................... 68 Figura 39. Método asignatura/autocomplete. .............................................................................. 69 Figura 40. Script asignatura.js.coffee (Autocomplete). ................................................................. 70 Figura 41. Método asignatura/crear_prelacion. ........................................................................... 71 Figura 42. Método asignatura/buscar_planes_estudio_asignatura. .............................................. 71 Figura 43. Script asignatura.js.coffee (Listas Desplegables)........................................................... 72 Figura 44. Verificación de Requisitos Curriculares. ....................................................................... 77 Figura 45. Asignaturas Aprobadas/Asignaturas No Aprobadas. .................................................... 78 Figura 46. Tabla historial_academico. .......................................................................................... 78 Figura 47. Resultado de la Verificación de Requisitos Curriculares................................................ 79 Figura 48. Tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. ............................... 79 Figura 49. Verificación de la Opción Profesional. .......................................................................... 80 Figura 50. Método plan_estudio/verificar_requisitos (Requisitos Curriculares). ........................... 81 Figura 51. Vista Parcial _verificar_requisitos_academicos.html.erb. ............................................. 84 Figura 52. Método plan_estudio/verificar_requisitos (Opción Profesional). ................................. 85 Figura 53. Vista Parcial _resumen_opcion_profesional.html.erb. ................................................. 86 7 Introducción La Universidad Central de Venezuela (UCV) es la institución de educación superior más antigua de Venezuela, fundada en 1721. En la actualidad, mantiene una matrícula estudiantil que ronda los 54.222 estudiantes de pregrado y 8.317 estudiantes de postgrado, con 4.790 profesores y 4.514 empleados administrativos, distribuidos en 9 Facultades en Caracas, 2 Facultades en Maracay, 5 Núcleos de Estudios supervisados y 12 Estaciones Experimentales en diferentes regiones del país. La UCV ofrece aproximadamente 351 carreras universitarias entre pregrado y postgrado. Las carreras que se imparten en esta casa de estudios están conformadas por un conjunto de asignaturas y requisitos curriculares que se deben satisfacer para obtener un título universitario, lo que se conoce como un plan de estudio. La Facultad de Ciencias de la UCV está integrada por 5 Escuelas, donde se forman licenciados en las siguientes carreras: Biología, Computación, Física, Geoquímica, Matemática y Química. La División de Control de Estudios (DCE) es la dependencia administrativa de la Facultad que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de las licenciaturas de pregrado. El Departamento de Grado de la DCE utiliza los planes de estudio de las distintas licenciaturas cada semestre para verificar que los estudiantes que inscribieron Trabajo Especial de Grado cumplen con todos los requisitos curriculares y las normativas académicas que deben satisfacer para obtener un título universitario en la licenciatura en que se encuentran inscritos. La Facultad de Ciencias ha desarrollado el Sistema de Gestión Académica de Control de Estudios (CONEST) que presta servicio a los estudiantes, profesores y empleados administrativos, facilitando las operaciones de los procesos administrativos de la Facultad. Los trabajadores del Departamento de Grado actualmente realizan todas sus labores con un soporte mínimo del sistema CONEST, verificando de manera manual los requisitos curriculares de cada estudiante con lápices de colores y distintos documentos impresos. Esto representa un mayor esfuerzo humano y aumenta la probabilidad de cometer errores. Es por ello que el objetivo de este Trabajo Especial de Grado es desarrollar un módulo web del sistema CONEST basado en tecnologías web, que automatice el trabajo de verificación de requisitos curriculares del proceso de graduación que se realiza en la DCE, así como la gestión de los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias. Para lograr dicho desarrollo, se utiliza el método ágil de desarrollo de software llamado Programación Extrema (XP), donde se realizan tres iteraciones implementando las fases propuestas en el método. En la primera iteración se analiza de manera general el módulo web, en 8 la segunda iteración se desarrolla la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias, y en la tercera iteración de desarrolla la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Este trabajo de investigación está estructurado de la siguiente manera: Capítulo 1. Planes de Estudio de la Facultad de Ciencias: En este capítulo se describen los planes de estudio y se presentan los resultados del análisis realizado a todos los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias. Capítulo 2. Tecnologías Web: En este capítulo se describen las tecnologías web implementadas en el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. Capítulo 3. Método Ágil de Desarrollo de Software: En este capítulo se describen las metodologías agiles de desarrollo de software, la Programación Extrema (XP), y la adaptación del método ágil XP implementado en el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. Capítulo 4. Marco Aplicativo: En este capítulo se presentan las iteraciones realizadas durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST bajo el método ágil XP, especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. Finalmente, se presentan las conclusiones, las recomendaciones y las referencias bibliográficas. 9 Capítulo 1 Planes de Estudio de la Facultad de Ciencias Un plan de estudio (Teruel, 2000) es de manera general una descripción de los requisitos que se necesitan satisfacer para obtener un título universitario en un área del saber. Estos requisitos incluyen: aprobar el conjunto de asignaturas que la universidad considera obligatorias, el número de créditos que el estudiante debe aprobar en asignaturas electivas, y los requisitos o prelaciones que aplican entre las asignaturas. En la Facultad de Ciencias de la UCV se imparten 6 licenciaturas: Biología, Computación, Física, Geoquímica, Matemática y Química. Los planes de estudio de las licenciaturas de la Facultad son gestionados por la DCE, la cual es una dependencia administrativa que se encarga de coordinar y supervisar los procesos relacionados con la inscripción, control de notas y graduación de los estudiantes regulares de pregrado. La DCE requiere conocer la estructura y los reglamentos de cada uno de los planes de estudio para revisar, validar y procesar decisiones que en materia académica incidan en sus procesos administrativos para su debida implementación. Los planes de estudio son vitales en los procesos de inscripción y graduación, la DCE integra los recursos tanto humanos como tecnológicos para cerciorarse de que cada estudiante cumpla con todos los requisitos y las prelaciones para cursar las asignaturas, y que cada egresado haya cumplido y aprobado con todos los requisitos y normativas académicas para optar por un título universitario en las licenciaturas que ofrece la Facultad de Ciencias. Los planes de estudio de las licenciaturas de la Facultad de Ciencias están conformados por un conjunto de asignaturas y reglas. Una asignatura es una unidad académica que forma parte de una carrera, por lo general dura un período académico de entre 15 y 16 semanas (excepto en el curso intensivo que tiene una duración de 7 u 8 semanas), está dirigida por uno o más docentes, cuenta con una lista fija de estudiantes, y este obtiene una nota y unidades de créditos por cada asignatura aprobada. Sus atributos comunes incluyen: Nombre: Es el nombre completo de la asignatura por el cual es conocida. Ejemplos de nombres de asignaturas son: Sistemas Operativos, Comunicación de Datos, Lenguajes de Programación, etc. Abreviación: Es el nombre corto de la asignatura, se utiliza para mantener la compatibilidad con otros sistemas que están limitados al uso de 15 caracteres. Ejemplos de abreviaciones de asignaturas son: Sist. Operativos, Comun. de Datos, etc. Código: Es una representación numérica de dígitos que permite identificar la asignatura, los primeros 2 dígitos representan la Facultad, los siguientes 2 dígitos representan la Escuela, y los últimos 4 dígitos representan la asignatura. La Facultad de Ciencias está representada por el 10 número 03. Las Escuelas están representadas de la siguiente manera: 01 (Escuela de Biología), 02 (Escuela de Física), 03 (Escuela de Química), 04 (Escuela de Computación), 05 (Escuela de Matemática), y 06 (Escuela de Geoquímica). Ejemplos de códigos de asignaturas son: 03046004, 03046003, 03046204, etc. Unidades de Crédito (UC): Las unidades de crédito se determinan en base al número de horas de clase semanales que un estudiante recibe por asignatura. Estas horas incluyen:  Horas Teóricas (HT): 1 HT equivale a 1 UC.  Horas de Practica (HP): 2 HP equivalen a 1 UC.  Horas de Laboratorio (HL): 3 HL equivalen a 1 UC. Calificación: La nota final de las asignaturas se califica con un número comprendido entre 0 y 20. En la Facultad de Ciencias se utiliza otro método para calificar asignaturas y requisitos curriculares con notaciones alfabéticas: A (Aprobado), AP (Aplazado), EQ (Equivalencia), y RET (Retirado). Tipo: Las asignaturas pueden ser cursadas según las siguientes modalidades: obligatorias, electivas, optativas. Las asignaturas obligatorias son aquellas que todos los estudiantes están obligados a cursar por su importancia en la formación y el desarrollo educativo del estudiante. En general, están ubicadas en la primera mitad de la carrera. Las asignaturas electivas son aquellas que el estudiante puede cursar para profundizar su formación en un determinado campo profesional, pueden ser cursadas como parte de una opción según lo establecido en el reglamento de la licenciatura. Se ubican en los últimos semestres de la carrera. Las asignaturas optativas son aquellas que el estudiante puede cursar para ampliar su formación general, más allá de la pura formación profesional, y no son un requisito en todas las licenciaturas de la Facultad. En general, están ubicadas en los últimos semestres de la carrera. Las asignaturas del Programa de Cooperación Interfacultades (PCI) son otro tipo de asignaturas optativas que el estudiante puede cursar en otras Facultades de la Universidad. Los planes de estudio de las licenciaturas de la Facultad de Ciencias agrupan las asignaturas por semestres, algunas de estas asignaturas guardan una relación de prelación, en función de conocimientos previos que el estudiante debe manejar para cursar las asignaturas. El objetivo del sistema de prelaciones es facilitar el avance del estudiante en la carrera ya que permite integrar y secuenciar conocimientos y habilidades entre asignaturas. Los planes de estudio podrían cambiar con el transcurso del tiempo, a aquellos estudiantes que se encuentran en periodo de transición de un plan de estudio a otro es necesario aplicarles la tabla 11 de convalidaciones y equivalencias, siguiendo las normas acordadas por cada Escuela. Otro caso particular a tomar en cuenta es el de los estudiantes que se están reincorporando o cambiando de carrera, ya que se debe verificar las equivalencias de cada una de las asignaturas que apliquen según el caso. La opción profesional es un conjunto de asignaturas que forman al estudiante en un determinado campo profesional. Las opciones buscan profundizar la formación del estudiante en el área de la carrera de su preferencia, estas opciones son definidas por las Escuelas, soportadas por los centros de investigación y administradas por el o los departamentos. Para optar por una opción el estudiante debe aprobar un número mínimo de asignaturas, el Seminario y el Trabajo Especial de Grado de la opción correspondiente. Además, el estudiante puede cursar asignaturas de cualquier opción bajo la modalidad de electiva, siempre y cuando cumpla con las prelaciones exigidas. Es importante resaltar que cada licenciatura tiene su propio reglamento, por lo que cada plan de estudio exige diferentes requisitos para obtener el título de la carrera. Los estudios de licenciatura en la Facultad de Ciencias tienen una duración de 10 semestres, y 19 unidades de crédito por semestre (en promedio). Además, el componente docente es un convenio que existe con la Facultad de Humanidades y Educación denominado Convenio Cooperativo de Formación Docente que les permite a los estudiantes de las licenciaturas de Biología, Física, Matemática y Química optar por un título universitario de Licenciatura en Educación con una mención científica. El estudiante debe aprobar las asignaturas correspondientes al área científica en la Facultad de Ciencias y las asignaturas correspondientes al área humanística en la Escuela de Educación. A continuación se describen los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias. 1.1 Licenciatura en Biología El plan de estudio de la Licenciatura en Biología se encuentra vigente desde el año 1968. El Licenciado en Biología se encarga de estudiar en el laboratorio y en condiciones naturales el origen, el desarrollo, la estructura y otros aspectos fundamentales de los organismos vivos. El biólogo estudia e investiga diferentes aspectos de las células y los seres vivos. Diseña los experimentos, explora e investiga y aplica los resultados en la solución de problemas en las áreas de biología celular, botánica, ecología, tecnología de alimentos y zoología. El plan de estudio de Biología está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la biología. El ciclo básico tiene una duración de 7 semestres, está conformado por 34 asignaturas obligatorias para un total de 121 unidades de crédito. 12 La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la biología. El ciclo de opción dispone de 3 semestres (VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 60 unidades de crédito distribuidas de la siguiente manera: 25 unidades de crédito en asignaturas obligatorias (Seminario I, Seminario II y Trabajo Especial de Grado), y 35 unidades de crédito en asignaturas electivas. Además, el estudiante deberá cursar Ingles I o presentar un examen de suficiencia con un valor de 4 unidades de crédito, adicionales a las 60 señaladas anteriormente. La Figura 1 muestra el plan de estudio de Biología y las asignaturas que lo integran. 13 Figura 1. Plan de Estudio de Biología. La Escuela de Biología ofrece las siguientes opciones profesionales: Botánica, Biología Celular, Tecnología de Alimentos, Ecología y Zoología. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 18 unidades de crédito en asignaturas correspondientes a la opción de su preferencia, excepto en Tecnología de Alimentos donde es necesario aprobar todas las asignaturas de la opción. Finalmente, para obtener el título de Licenciado en Biología el estudiante debe aprobar al menos 185 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 119 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. La Figura 2 muestra el componente docente de Biología. 14 15 Figura 2. Componente Docente de Biología. 1.2 Licenciatura en Computación El plan de estudio de la Licenciatura en Computación se encuentra vigente desde el año 2004. El Licenciado en Computación ejerce sus tareas profesionales dentro de tres amplias funciones, que se señalan a continuación:  El desarrollo de sistemas y aplicaciones computacionales, donde debe estar preparado para resolver problemas que se presentan en las grandes, medianas, pequeñas organizaciones y a los individuos, proporcionándoles soluciones computacionales y en general sistemas que integren elementos computacionales.  Funciones de gestión de plataforma computacionales y servicios informáticos, a través de esta función ejerce su rol de facilitador de la tecnología computacional. Este puesto de trabajo implica gestionar y administrar recursos informáticos para facilitar y soportar procesos y actividades en organizaciones, instituciones y directamente por usuarios finales.  Investigación e innovación, el profesional cumple esta función a partir de la introducción de la tecnología computacional en las diversas actividades de la sociedad, esto es posible por la búsqueda innovadora y participación en la investigación pura y aplicada, la misma es profundizada, a partir de los estudios de cuarto nivel. El plan de estudio de Computación está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los principios de la computación. El ciclo básico tiene una duración de 5 semestres, está conformado por 21 asignaturas obligatorias para un total de 107 unidades de crédito. La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la computación. El ciclo de opción dispone de 5 semestres (VI, VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 78 unidades de crédito distribuidas de la siguiente manera: 25 unidades de crédito en asignaturas obligatorias (Pasantía, Seminario y Trabajo Especial de Grado), 43 unidades de crédito en asignaturas electivas, y 10 unidades de 16 crédito en asignaturas obligatorias optativas. Además, el estudiante deberá cursar 8 unidades de crédito en asignaturas optativas, adicionales a las 78 señaladas anteriormente. La Figura 3 muestra el plan de estudio de Computación. 17 Figura 3. Plan de Estudio de Computación. La Escuela de Computación ofrece las siguientes opciones profesionales: Sistemas de Información, Bases de Datos, Modelos y Programación Matemática, Ingeniería de Software e Interacción Humano Computador, Sistemas Distribuidos y Paralelos, Inteligencia Artificial, Tecnologías Educativas, Cálculo Científico, Tecnologías en Comunicación y Redes de Computadoras, Computación Gráfica, y Aplicaciones en Internet. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 15 unidades de crédito en asignaturas correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Computación el estudiante debe aprobar al menos 193 unidades de crédito. 1.3 Licenciatura en Física El plan de estudio de la Licenciatura en Física se encuentra vigente desde el año 1977. El Licenciado en Física en cualquier área de actuación, le corresponde ser un profesional que apoyado en conocimientos sólidos y actualizados de la física, debe ser capaz de tratar problemas nuevos y tradicionales, preocupándose por la búsqueda de nuevas formas del saber y del hacer científico y/o tecnológico. El Físico estudia fenómenos de la naturaleza, como la energía en todas sus formas, la estructura de la materia, las leyes que rigen, los movimientos de los cuerpos y la interacción entre ellos. Trabaja en programas multidisciplinarios relacionados con la metalurgia, geofísica, astrofísica, oceanografía, química, electrónica y medicina. A través de la investigación pura y aplicada comprueba y propone nuevas leyes. El plan de estudio de Física está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la física. El ciclo básico tiene una duración de 9 semestres, está conformado por 26 asignaturas obligatorias y 1 asignatura electiva para un total de 142 unidades de crédito. El estudiante puede optar por al menos una de estas electivas: Principios de Biología y Elementos de Computación. 18 La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la física. El ciclo de opción dispone de 4 semestres (VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 35 unidades de crédito distribuidas de la siguiente manera: 15 unidades de crédito en asignaturas obligatorias (Trabajo Especial de Grado), y 20 unidades de crédito en asignaturas obligatorias y electivas (según las opciones). Además, el estudiante deberá cursar Inglés I e Inglés II o presentar un examen de suficiencia con un valor de 8 unidades de crédito, adicionales a las 35 señaladas anteriormente. La Figura 4 muestra el plan de estudio de Física. 19 Figura 4. Plan de Estudio de Física. La Escuela de Física ofrece las siguientes opciones profesionales: Astrofísica, Física Computacional, Física Experimental, Geofísica, Instrumentación, Física Médica y Física Teórica. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 20 unidades de crédito en asignaturas correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Física el estudiante debe aprobar al menos 185 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 111 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. La Figura 5 muestra el componente docente de Física. 20 21 Figura 5. Componente Docente de Física. 1.4 Licenciatura en Geoquímica El plan de estudio de la Licenciatura en Geoquímica se encuentra vigente desde el año 2000. El Licenciado en Geoquímica estudia la composición de los diversos ambientes y materiales que constituyen el planeta, investiga los procesos y leyes que determinan dicha composición. Este profesional contribuye al entendimiento global del sistema tierra y a la búsqueda y uso racional de los materiales naturales requeridos por la sociedad moderna. El plan de estudio de Geoquímica está conformado por 39 asignaturas obligatorias y 4 asignaturas electivas para un total de 191 unidades de crédito distribuidas de la siguiente manera: 171 unidades de crédito en asignaturas obligatorias y electivas, y 20 unidades de crédito en las asignaturas Proyecto Geoquímico I y Proyecto Geoquímico II. La Figura 6 muestra el plan de estudio de Geoquímica. 22 Figura 6. Plan de Estudio de Geoquímica. Finalmente, para obtener el título de Licenciado en Geoquímica el estudiante debe aprobar al menos 191 unidades de crédito. 1.5 Licenciatura en Matemática El plan de estudio de la Licenciatura en Matemática se encuentra vigente desde el año 2004. El Licenciado en Matemática está capacitado para comenzar a realizar labores de investigación y desarrollo de nuevas teorías; conceptos que posteriormente pueden tener aplicación en la ciencia, la industria, la computación, la estadística, etc. Resuelve problemas matemáticos complejos e incidentales en las investigaciones científicas y en las actividades económicas. Ejerce funciones de asesor sobre diversas aplicaciones del análisis matemático. El plan de estudio de Matemática está conformado por 28 asignaturas obligatorias, 3 asignaturas electivas y 2 asignaturas optativas para un total de 194 unidades de crédito distribuidas de la 23 siguiente manera: 160 unidades de crédito en asignaturas obligatorias y electivas, 6 unidades de crédito en asignaturas optativas, y 28 unidades de crédito en las asignaturas Seminario I, Seminario II y Trabajo Especial de Grado. El estudiante puede optar por al menos una de estas asignaturas: Introducción a la Computación, Cálculo Numérico y Cálculo Científico. La Figura 7 muestra el plan de estudio de Matemática. 24 Figura 7. Plan de Estudio de Matemática. Finalmente, para obtener el título de Licenciado en Matemática el estudiante debe aprobar al menos 194 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 101 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educacion para optar por el componente docente. En el III Semestre el estudiante puede optar por al menos una de estas asignaturas: Introducción a la Computación, Cálculo Numérico y Cálculo Científico. En el VI Semestre el estudiante puede optar por al menos una de estas asignaturas: Historia de la Matemática y Filosofía de la Ciencia. Además, la electiva Opción Docente es alguna de las siguientes asignaturas: Funciones Analíticas, Topología, Ecuaciones Diferenciales Ordinarias, Geometría Diferencial, Algebra III o Teoría de la Medida. La Figura 8 muestra el componente docente de Matemática. 25 26 Figura 8. Componente Docente de Matemática. 1.6 Licenciatura en Química El plan de estudio de la Licenciatura en Química se encuentra vigente desde el año 1968. El Licenciado en Química estudia la materia, su composición, propiedades y transformaciones en la estructura. Asesora técnicamente o trabaja en el diseño y modificaciones de procesos químicos, soluciones de problemas industriales, innovación tecnológica, evaluación del impacto ambiental, mejoramiento y síntesis de productos, control de calidad, análisis de productos diversos. El plan de estudio de Química está estructurado en dos partes. La primera parte corresponde al ciclo básico de la carrera, su objetivo es brindar una formación básica de los grandes principios de la química. El ciclo básico tiene una duración de 8 semestres, está conformado por 27 asignaturas obligatorias para un total de 114 unidades de crédito. La segunda parte corresponde al ciclo de opción de la carrera, su objetivo es profundizar la formación del estudiante en un determinado campo profesional dentro del campo de la química. El ciclo de opción dispone de 5 semestres (VI, VII, VIII, IX, X), para la aprobación de las asignaturas correspondientes a las opciones, con 69 unidades de crédito distribuidas de la siguiente manera: 39 unidades de crédito en asignaturas obligatorias, y 30 unidades de crédito en las asignaturas Seminario de Investigación y Trabajo Especial de Grado. Además, el estudiante deberá cursar Inglés I e Inglés II o presentar un examen de suficiencia con un valor de 8 unidades de crédito, adicionales a las 69 señaladas anteriormente. La Figura 9 muestra el plan de estudio de Química. 27 28 Figura 9. Plan de Estudio de Química. La Escuela de Química ofrece las siguientes opciones profesionales: Básica, Geoquímica y Tecnología. Para optar por una opción profesional el estudiante debe aprobar un mínimo de 39 unidades de crédito en asignaturas, Seminario de Investigación y el Trabajo Especial de Grado correspondientes a la opción de su preferencia. Finalmente, para obtener el título de Licenciado en Química el estudiante debe aprobar al menos 191 unidades de crédito. Para los estudiantes que deseen ingresar al Programa Cooperativo de Formacion Docente, deben tener aprobadas todas las asignaturas hasta el 5to semestre inclusive. El estudiante debe cursar 116 unidades de crédito en asignaturas dictadas por la Facultad de Ciencias y 52 unidades de crédito en asignaturas dictadas por la Escuela de Educación para optar por el componente docente. La Figura 10 muestra el componente docente de Química. 29 Figura 10. Componente Docente de Química. 30 Capítulo 2 Tecnologías Web Desde el 26 de Febrero de 2007 se encuentra operativo el sistema CONEST, con la finalidad de automatizar la gestión académica de la Facultad de Ciencias de la UCV. El proyecto surge como una iniciativa de la Facultad de Ciencias para resolver una problemática administrativa, potenciar los servicios de gestión académica de la División de Control de Estudios (DCE) y modernizar la infraestructura informática, entre otras cosas, incentivando la participación de forma activa de estudiantes, docentes y personal administrativo que forman parte de esta comunidad. El sistema CONEST es una aplicación web desarrollada con software libre. Las aplicaciones web (Hassani, 2005) son aquellas que se acceden a través de una red tales como internet o una intranet. En otras palabras, es un software de aplicación codificado en un lenguaje soportado por un navegador web y que depende del mismo para ejecutar la aplicación. Las aplicaciones web son populares debido a la accesibilidad de los navegadores web. La capacidad de actualizar y mantener aplicaciones web sin distribuir e instalar software en miles de clientes potenciales y la compatibilidad entre plataformas son otras razones de su popularidad. Las aplicaciones web funcionan en una arquitectura cliente-servidor (Beck, 2005). En las arquitecturas cliente-servidor una aplicación se modela como un conjunto de servicios proporcionados por los servidores y un conjunto de clientes que usan esos servicios. Los clientes necesitan conocer que servidores están disponibles, pero normalmente no conocen la existencia de otros clientes. Con frecuencia clientes y servidores se comunican a través de una red de comunicación en hardwares separados utilizando el Protocolo de Transferencia de Hipertexto (HTTP) (Patrick, 2004) el cual es protocolo de red para sistemas de colaboración de información hipermedia distribuidos. HTTP es la base de la comunicación de datos en la Worl Wide Web (WWW). HTTP funciona como un protocolo petición-respuesta en la arquitectura cliente-servidor. En HTTP un navegador web, por ejemplo, actúa como un cliente, mientras que una aplicación que se está ejecutando en una computadora que hospeda un sitio web actúa como un servidor. El cliente envía un mensaje de solicitud HTTP al servidor. El servidor que almacena contenido, proporciona recursos tales como archivos HTML e imágenes o genera el contenido según sea necesario, o desempeña otras funciones por el cliente, devuelve una respuesta HTTP. Una respuesta contiene información sobre el estado de finalización de la solicitud y puede contener cualquier contenido solicitado por el cliente en el cuerpo del mensaje. La Figura 15 muestra un modelo lógico de una arquitectura cliente-servidor utilizando el protocolo HTTP. 31 Figura 11. Arquitectura Cliente-Servidor. El termino aplicación web generalmente está asociado con las tecnologías web que permiten crear herramientas o servicios que facilitan el intercambio interactivo de información, interoperabilidad, diseño centrado en el usuario y la colaboración en la WWW. Las tecnologías web del lado del cliente permiten que se ejecuten elementos interactivos en el navegador del usuario. Esto hace posible que la navegación del sitio web sea a través de menús dinámicos y las validaciones del lado del cliente. Ciertas operaciones se realizan del lado del cliente debido a que requieren acceso a información o funcionalidades que están disponibles en el cliente pero no en el servidor, o porque el usuario debe ingresar datos. A continuación se describe brevemente y se especifican las características más importantes de las tecnologías web del lado del cliente implementadas en el sistema CONEST: 2.1 HTML5 HTML5 (Hickson, 2010) es la quinta revisión del estándar HTML, actualmente en desarrollo. Como sus predecesores inmediatos (HTML 4.01 y XHTML 1.1), HTML5 es un estándar para estructurar y presentar contenido en la WWW. El estándar incorpora nuevas características como los elementos <canvas>, <audio> y <video> así como la integración de contenido Gráfico Vectorial Escalable (SVG), que están diseñados para mejorar la inclusión y el manejo de contenido gráfico y multimedia en la web sin recurrir a extensiones y sus APIs. Otros elementos nuevos tales como <section>, <article>, <header> y <nav> están diseñados para mejorar la semántica de los documentos. Nuevos atributos también han sido introducidos, y otros removidos, para mejorar y simplificar la semántica de las expresiones. 32 Partes de HTML5 van a estar terminadas e implementadas en los navegadores progresivamente antes de que toda la especificación alcance el estado final de recomendación del World Wide Web Consortium (W3C). HTML5 incluye las siguientes características:  El elemento canvas para el modo inmediato de dibujo 2D.  Reproducción multimedia temporizada.  Bases de datos para almacenamiento sin conexión de red.  Edición de documentos.  Drag-and-drop.  Mensajería entre documentos.  Gestión del historial del navegador.  Microdata. 2.2 CSS3 CSS3 (Bos, 2005) es la tercera especificación del estándar CSS, actualmente en desarrollo. CSS es un lenguaje de hojas de estilo que se utiliza para describir la presentación (el aspecto y el formato) de un documento escrito en un lenguaje de marcado. Su aplicación más común es para estilizar páginas web escritas en HTML y XHTML. CSS3 se basa en sus predecesores (CSS1 y CSS2), incluye una serie de selectores como [att^=""], [att$=""] y [att*=""] que permiten seleccionar elementos específicos de un documento HTML sin tener que depender de identificadores, clases y scripts innecesarios. Otros atributos nuevos tales como font-face, word-wrap, text-shadow, boder-image y rgba mejoran en gran medida el trabajo de los desarrolladores, por lo que algunas de las tareas de CSS que consumen más tiempo son muy sencillas, permitiendo un mejor código, más limpio y ligero. El desarrollo de CSS3 está divido en módulos. La especificación anterior se ha separado en pedazos más pequeños y se han añadido nuevas funcionalidades. Varios de los módulos ya están terminados, incluyendo SVG, Media Queries y Namespaces, mientras que otros todavía están en desarrollo. Las nuevas funciones se incorporarán gradualmente en los navegadores web en los próximos años. CSS3 incluye las siguientes características:  Atributos de textos como font-face para embeber fuentes de letras.  Margen, borde, relleno y posicionamiento para la mayoría de los elementos.  Color y opacidad de textos, fondos y otros elementos.  Diseño de múltiples columnas sin utilizar elementos <div>.  Transiciones y animaciones.  Agregar esquinas redondeadas a elementos HTML sin imágenes de fondo. 33 2.3 jQuery jQuery (The jQuery Project, 2010) es una librería de JavaScript que simplifica la manera de interactuar con los documentos HTML, seleccionar elementos DOM, desarrollar animaciones, manejar eventos y agregar interacción de manera asíncrona con el servidor a páginas web. jQuery al igual que otras librerías, ofrece una serie de funcionalidades basadas en JavaScript que de otra manera requieren de mucho más código, es decir, con esta librería se logran resultados en menos tiempo. jQuery también permite crear extensiones sobre la librería de JavaScript, esto contribuye a la creación de páginas web con funciones nuevas y generalmente muy específicas. jQuery incluye las siguientes características:  Selección de elementos DOM.  Interacción y modificación del árbol DOM.  Manejo de eventos.  Manipulación de CSS.  Efectos y animaciones.  AJAX.  Extensibilidad a través de plugins.  Compatibilidad con todos los navegadores modernos. Al igual que HTML5, jQuery establece una serie de elementos que reflejan el uso típico de los sitios web modernos. La ventaja de HTML5 con respecto a jQuery, es que está diseñado para integrar y presentar contenido multimedia en la web sin recurrir a extensiones de terceros y sus APIs. Sin embargo, la especificación de HTML5 es un trabajo en curso, y partes del estándar aún no están terminadas. jQuery es una solución más consolidada y soportada por todos los navegadores modernos. Las tecnologías web del lado del servidor son comúnmente utilizadas en aplicaciones web interactivas que permiten a los usuarios acceder bases de datos y recuperar o modificar datos que se encuentran alojados en un servidor. El servidor usa lenguajes como Ruby para procesar peticiones de los clientes, interpretar y generar respuestas utilizando información de archivos y bases de datos, y enviarlas de vuelta al cliente en un lenguaje soportado por el navegador. A continuación se describe brevemente y se especifican las características más importantes de las tecnologías web del lado del servidor implementadas en el sistema CONEST. 34 2.4 Ruby on Rails Ruby on Rails (RoR) (Ruby on Rails, 2011) es un framework para desarrollar aplicaciones web escrito en el lenguaje de programación Ruby que esta optimizado para mejorar la productividad y con un mínimo de configuración. RoR incluye herramientas que facilitan las tareas más comunes de desarrollo, como generadores que pueden construir automáticamente algunas de las clases y páginas necesarias para un sitio web básico. También incluye WEBrick, un servidor web sencillo que se distribuye con Ruby, y Rake, un sistema de construcción, distribuido como una gema. Juntos estas herramientas proveen un ambiente de desarrollo. RoR está dividido en varios paquetes, llamados ActiveRecord (un sistema de mapeo objeto- relacional para acceder a la base de datos), ActiveResource (provee servicios web), ActionPack, ActionSupport y ActionMailer. Aparte de los paquetes estándar, los desarrolladores pueden hacer plugins para ampliar los paquetes existentes. RoR supone que hay una “mejor” manera de hacer las cosas, y está diseñado para fomentar esa manera (y en algunos casos para rechazar las alternativas). La filosofía de RoR incluye los siguientes principios:  Don’t Repeat Yourself (DRY): DRY sugiere que escribir el mismo código una y otra vez es una mala práctica de programación.  Convention Over Configuration (CoC): CoC significa que RoR hace suposiciones sobre lo que se quiere hacer y cómo se va a hacerlo, en lugar de exigir que se especifique cada detalle a través de archivos de configuración. Como muchos frameworks web, RoR usa el patrón de diseño arquitectónico Modelo-Vista- Controlador (MVC) para organizar la programación de las aplicaciones web. MVC es una arquitectura de software, considerado actualmente como un patrón de arquitectura utilizado en la ingeniería de software. El patrón aísla la lógica de negocio de la aplicación de su interfaz de usuario, permitiendo el desarrollo, prueba y mantenimiento de cada uno de manera independiente. A continuación se describe brevemente los componentes del patrón de diseño arquitectónico MVC: Modelo: Un modelo representa la información (datos) de la aplicación y las reglas para manipular esos datos. En el caso de RoR, los modelos se utilizan principalmente para gestionar la interacción con las tablas en la base de datos. En muchos casos, una tabla en la base de datos corresponderá a un modelo en la aplicación. La mayor parte de la lógica de negocio de la aplicación se concentra en los modelos. 35 Vista: Las vistas representan las interfaces de usuario de una aplicación, generalmente son documentos HTML con código Ruby embebido que sólo realiza tareas relacionadas con la presentación de los datos. Las vistas se encargan de proporcionar datos al navegador web u otras herramientas que se utilicen para realizar peticiones a la aplicación. Controlador: Los controladores proveen un enlace entre los modelos y las vistas. En RoR, los controladores son responsables de procesar las peticiones entrantes desde el navegador web, interrogar a los modelos para obtener datos, y pasar dichos datos a la vista para que pueda presentarlos. 2.5 Haml Haml (Haml, 2011) es un lenguaje de enmarcado liviano que se utiliza para describir el XHTML de cualquier documento web sin el uso de codificación en línea tradicional. Está diseñado para resolver muchas de las fallas en los motores de plantillas, a la vez que hace el enmarcado tan limpio como se pueda. Haml funciona en sustitución de sistemas de plantillas de páginas tales como RHTML. Sin embargo, Haml evita la necesidad de codificar XHTML explícitamente en la plantilla, porque el mismo es una descripción del XHTML, con código para generar contenido dinámicamente. La filosofía de Haml incluye los siguientes principios:  El enmarcado debe ser limpio: El enmarcado no debe ser utilizado simplemente como una herramienta para hacer que los navegadores desplieguen una página de la manera en que su autor lo desea. Lo que se despliega no es lo único que la gente tiene que ver; también tienen que ver, modificar y entender el enmarcado. Por lo tanto, el enmarcado debe ser tan amigable y agradable como el resultado desplegado.  El enmarcado debe ser DRY: XHTML implica muchas repeticiones. La mayoría de los elementos tienen que ser nombrados al menos dos veces; una vez antes de su contenido y una vez después. ERB agrega aún más repeticiones y caracteres innecesarios. Haml evita todo esto apoyándose en la indentación, no el texto, para determinar donde los elementos y bloques de código comienzan y terminan. Esto no solo resulta en plantillas más pequeñas, sino también hace que el código sea más limpio.  El enmarcado debe estar bien indentado: Uno de los principales problemas de los lenguajes de plantillas tradicionales es que no solo no fomentan el código bien indentado, sino que activamente lo hacen difícil, o hasta imposible, de escribir. El resultado es confuso, XHTML ilegible. Haml formatea las etiquetas para que estén bien identadas y reflejen la estructura subyacente del documento.  La estructura XHTML debe ser clara: XML y XHTML son formatos construidos sobre el concepto de documentos estructurados. Esa estructura es reflejada en el enmarcado, y debería ser reflejada igualmente en el meta-enmarcado, como Haml. Debido a que la lógica de Haml está basada en la indentación de los elementos hijos, esta estructura se mantiene naturalmente, haciendo que el documento sea más fácil de leer y mas entendible para las personas. 36 2.6 Sass Sass (Sass, 2011) es un metalenguaje de hojas de estilo. Es un lenguaje de scripting que es interpretado a CSS. SassScript es el lenguaje de scripting propiamente. Sass consiste de dos sintaxis. La sintaxis original, llamada “la sintaxis indentada” usa una sintaxis similar a la de Haml. Utiliza la indentación para separar bloques de código y saltos de línea para separar reglas. La nueva sintaxis “SCSS” usa un formato de bloques similar al de CSS. Utiliza corchetes para denotar bloques de código y punto y coma para separar reglas dentro de un bloque. Sass extiende CSS al proveer varios mecanismos disponibles en otros lenguajes de programación más tradicionales, particularmente lenguajes orientado a objetos, pero que no están disponibles en CSS3 como tal. Cuando SassScript es interpretado, crea un bloque de reglas de CSS para varios selectores definidos por el archivo Sass. El interpretador Sass traduce SassScript a CSS. Adicionalmente, Sass puede monitorear un archivo Sass (.sass o .scss) y traducirlo a un archivo .css. Sass incluye las siguientes características:  Variables.  Indentación.  Mixins.  Parametros.  Herencia de selectores. 2.7 MySQL MySQL (Obfusco, 2003) es un Sistema Manejador de Base de Datos Relacional (RDBMS) que se ejecuta como un servidor que facilita el acceso de múltiples usuarios a una serie de base de datos. MySQL está escrito en C y C++, funciona en muchas plataformas diferentes, incluyendo Linux, Solaris, Symbian, Mac OS X y Microsoft Windows, entre otros. MySQL es principalmente un RDBMS y por lo tanto no posee una interfaz grafica de usuario para administrar base de datos o gestionar los datos que contiene adentro. Los usuarios pueden usar las herramientas de línea de comandos incluidas, o descargarse un software o aplicación web para administrar base de datos, construir la estructura de base de datos, y gestionar los registros de datos. MySQL incluye las siguientes características:  Soporte de múltiples plataformas.  Stored procedure.  Triggers.  Indexación de texto completo.  Motores de almacenamiento independientes (MyISAM para las consultas, InnoDB para las transacciones, MySQL Archive para almacenar el historial de datos). 37 Capítulo 3 Método Ágil de Desarrollo de Software El sistema CONEST se construyó utilizando un método ágil de desarrollo de software. El desarrollo ágil de software (Asierra, 2004) es un marco de trabajo conceptual usado en la ingeniería de software para estructurar, planificar y controlar el proceso de desarrollo en sistemas de información. El software se desarrolla en unidades de tiempo llamadas iteraciones, la cual debe durar de una a cuatro semanas. Cada iteración del ciclo de vida incluye: planificación, análisis de requerimientos, diseño, codificación, revisión y documentación. La Figura 16 muestra el ciclo de vida general para el desarrollo ágil de software. Figura 12. Ciclo de Vida Para el Desarrollo Ágil de Software. (Fuente: http://sdc.net.au/services/application-development.aspx). Las metodologías ágiles de desarrollo de software están diseñadas para producir software útil de forma rápida. Generalmente, son procesos en los que se entrelazan la especificación, el desarrollo y las pruebas. El software no se desarrolla y utiliza en su totalidad, sino en una serie de incrementos, donde en cada incremento se incluye nuevas funcionalidades al sistema. Ejemplos de metodologías de desarrollo de software ágiles son: RAD, SCRUM y XP. Todos los métodos ágiles comparten un conjunto de principios:  Participación del cliente: Los clientes deben estar fuertemente implicados en todo el proceso de desarrollo. Su papel es proporcionar y priorizar nuevos requerimientos del sistema y evaluar las iteraciones del sistema.  Entrega incremental: El software se desarrolla en incrementos, donde el cliente especifica los requerimientos a incluir en cada incremento. http://sdc.net.au/services/application-development.aspx 38  Personas ante procesos: Se deben reconocer y explotar las habilidades del equipo de desarrollo. Se les debe dejar desarrollar sus propias formas de trabajar, sin procesos formales, a los miembros del equipo.  Aceptar el cambio: Se debe contar con que los requerimientos del sistema cambian, por lo que el sistema se diseña para dar cabida a estos cambios.  Mantener la simplicidad: Se debe centrar en la simplicidad tanto en el software a desarrollar como en el proceso de desarrollo. Donde sea posible, se trabaja activamente para eliminar la complejidad del sistema. El método ágil de desarrollo de software utilizado para controlar el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST es una adaptación de la Programación Extrema. A continuación se describe brevemente y se especifican las características más importantes de la Programación Extrema. 3.1 Programación Extrema (XP) La Programación Extrema (XP) (Beck, 2005) es posiblemente el método ágil más conocido y ampliamente utilizado. En XP todos los requerimientos se expresan como escenarios (llamados historias de usuarios), los cuales se implementan directamente como una serie de tareas. Los programadores trabajan en parejas y desarrollan pruebas para cada tarea antes de escribir el código. Todas las pruebas se deben ejecutar satisfactoriamente cuando el código nuevo se integre al sistema. XP implica varias prácticas:  Planificación incremental: Los requerimientos se registran en tarjetas de historias y las historias a incluir en una entrega se determinan según el tiempo disponible y su prioridad relativa. Los desarrolladores dividen estas historias en tareas de desarrollo.  Entregas pequeñas: El mínimo conjunto útil de funcionalidad que proporcione valor de negocio se desarrolla primero. Las entregas del sistema son frecuentes e incrementalmente añaden funcionalidad a la primera entrega.  Diseño sencillo: Solo se lleva a cabo el diseño necesario para cumplir los requerimientos actuales.  Desarrollo previamente probado: Se utiliza un sistema de pruebas de unidad automatizado para escribir pruebas para nuevas funcionalidades antes de que estas se implementen.  Refactorización: Se espera que todos los desarrolladores refactoricen el código continuamente tan pronto como encuentren posibles mejoras en el código. Esto conserva el código sencillo y mantenible.  Programación en parejas: Los desarrolladores trabajan es parejas, verificando cada uno el trabajo del otro y proporcionando la ayuda necesaria para hacer siempre un buen trabajo. 39  Propiedad colectiva: Las parejas de desarrolladores trabajan en todas las áreas del sistema, de modo que no desarrollen islas de conocimientos y todos los desarrolladores posean todo el código. Cualquiera puede cambiar cualquier cosa.  Integración continua: En cuanto acaba el trabajo en un área, se integra en el sistema entero. Después de la integración, se deben pasar al sistema todas las pruebas de unidad.  Ritmo sostenible: No se consideran aceptables grandes cantidades de horas extras, ya que a menudo el efecto que tienen es que se reduce la calidad del código y la productividad a medio plazo.  Cliente presente: Debe estar disponible al equipo de XP un representante de los usuarios finales del sistema (el cliente) a tiempo completo. En un proceso de programación extrema, el cliente es miembro del equipo de desarrolladores y es responsable de formular al equipo los requerimientos del sistema para su implementación. Una vez que se han desarrollado las tarjetas de historias, el equipo de desarrolladores las divide en tareas y estima el esfuerzo y recursos requeridos para su implementación. El cliente establece entonces la prioridad de las historias a implementar, eligiendo aquellas historias que pueden ser utilizadas inmediatamente para entregar un apoyo útil al negocio. Cuando los requerimientos cambian, las historias sin implementar también cambian o se pueden descartar. Si se requieren cambios en un sistema que ya se ha entregado, se desarrollan nuevas tarjetas de historias y, de nuevo, el cliente decide si estos cambios tienen prioridad sobre nuevas funcionalidades. XP adopta un enfoque “extremo” para el desarrollo iterativo. Se pueden construir varias veces al día nuevas versiones del software y los incrementos se entregan al cliente cada dos meses aproximadamente. Cuando un programador construye el sistema para crear una versión nueva, debe ejecutar todas las pruebas automatizadas existentes además de las pruebas para las funcionalidades nuevas. El nuevo software generado solamente se acepta si se ejecutan satisfactoriamente todas las pruebas. Para evitar algunos de los problemas de las pruebas y de las validaciones del sistema. XP pone más énfasis en el proceso de pruebas que otros métodos ágiles. Las pruebas del sistema son fundamentales en XP, en la que se ha desarrollado un enfoque que reduce la probabilidad de producir nuevos incrementos del sistema que introduzcan errores en el software existente. Las características clave de las pruebas en XP son:  Desarrollo previamente probado.  Desarrollo de pruebas incremental a partir de los escenarios.  Participación del usuario en el desarrollo de las pruebas y en la validación.  El uso de bancos de pruebas automatizadas. A continuación se describe la adaptación del método ágil XP utilizado en el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 40 3.2 Adaptación del Método Ágil XP Las prácticas del método ágil XP se agrupan en cuatro fases; Planificación (incremental), Diseño (sencillo y refactorización), Codificación (entregas pequeñas, cliente presente, integración continua, ritmo sostenible, programación en parejas y propiedad colectiva) y Pruebas (desarrollo previamente probado). A continuación se describe como se implementaron las prácticas del método ágil XP en cada fase durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 3.2.1 Planificación En la fase de planificación se desarrollan las tarjetas de historias, las cuales deben ser definidas con la participación del cliente para que proporcionen y prioricen los requerimientos. Los requerimientos relacionados con la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y sus normativas, que inciden en el proceso de graduación de los estudiantes regulares de pregrado se registraron en tarjetas de historias. Las tarjetas de historias están conformadas por un nombre, una descripción y el número de días estimado para desarrollar el requerimiento. La Figura 17 muestra el formato de las tarjetas de historias. Figura 13. Formato de las Tarjetas de Historias. Las tarjetas de historias no se dividieron en tareas de desarrollo por simplicidad y para reducir la documentación. En esta fase también se planifican las entregas de los requerimientos del módulo web mediante iteraciones programadas, las cuales dividen la implementación de las tarjetas de historias y se entregan al cliente al final de cada iteración para hacer pruebas y correcciones. 41 Las iteraciones tienen una duración de tres meses, y las historias a incluir en una entrega se determinan según el número de días estimado para desarrollar los requerimientos y su prioridad relativa. 3.2.2 Diseño En la fase de diseño se esquematiza el módulo web, enfocándose en cubrir las necesidades inmediatas del cliente, ni más ni menos. En cada iteración se entregó el mayor valor de negocio produciendo el código más sencillo que cumpliera con los requerimientos definidos en las tarjetas de historias. En esta fase también se revisó constantemente el código, refinando los diseños que se consideraron necesarios cuando se encontraban posibles mejoras en el código, con el fin de minimizar en lo posible las ineficiencias. 3.2.3 Codificación En la fase de codificación se desarrolla el módulo web en incrementos según la planificación de las entregas, creando un programa sencillo que aportara valor de negocio rápidamente, que se actualizaba de manera frecuente añadiendo funcionalidades a la primera entrega. El módulo web se desarrolló siguiendo los estándares de codificación del sistema CONEST, para asegurar la consistencia, facilitar la comprensión y la refactorización del código. A continuación se describe brevemente el estándar de codificación para el desarrollo del sistema CONEST. Las reglas generales para escribir y documentar el código incluyen:  En español.  Sin eñes, acentos o caracteres especiales.  Sustituir las eñes por enes.  Omitir los acentos.  Identar el código con 2 espacios en blanco.  Usar comentarios para documentar cada método.  Dejar un espacio en blanco antes y después de un signo igual, excepto en los parámetros por defecto de un método.  No dejar espacios en blanco después de un método. 42 Las reglas generales para nombrar directorios, archivos, atributos, variables y constantes incluyen:  Directorios, archivos, atributos y variables en minúscula.  Constantes en mayúscula.  Separar nombres compuestos con sub guiones. Las reglas generales para nombrar clases incluyen:  De manera capital (Primera letra en mayúscula y el resto en minúscula).  No separar nombres compuestos. Las reglas generales para nombrar métodos y parámetros incluyen:  En minúscula.  Separar nombres compuestos con sub guiones.  Sí un método retorna un booleano debe terminar en ?.  Sí un método modifica un objeto debe terminar en !.  Sí un método arroja una excepción de error debe terminar en !.  Sí un método no tiene parámetros debe terminar sin (). Es importante resaltar que el cliente estuvo presente durante toda la fase de codificación del proyecto, trabajando activamente para revisar los requerimientos, las funcionalidades, señalar las prioridades y responder las preguntas del programador. Se integró una versión completa del módulo web al sistema CONEST al final de la fase de codificación del proyecto. Se trabajó 30 horas semanales, distribuidas entre los cinco días de la semana en jornadas diurnas, trabajando horas extras solo cuando se consideraba necesario. El módulo web fue desarrollado por un solo programador, el cual trabajó todas las áreas del modulo web, impidiendo el desarrollo de islas de conocimientos. 3.2.4 Pruebas En la fase de pruebas se implementan pruebas funcionales y de aceptación al final de cada iteración, estas se generaron a partir de las tarjetas de historias que se desarrollaban durante una iteración. Se definen los datos de entrada y los resultados esperados para cada tarjeta de historia, y el cliente verifica el correcto funcionamiento del requerimiento que se está probando. Cuando se da 43 por buena la prueba de aceptación, se considera que la historia correspondiente se ha completado. El sistema de pruebas de unidad automatizado no se implementó para favorecer la productividad y las entregas rápidas y constantes durante el desarrollo del proyecto. 44 Capítulo 4 Marco Aplicativo En este capítulo se describe el proceso de desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. El método ágil de desarrollo de software utilizado para estructurar, planificar y controlar el proceso de desarrollo de este Trabajo Especial de Grado es una adaptación de la Programación Extrema (XP). Es importante resaltar que algunas prácticas del método ágil XP no se aplicaron en este proyecto tales como el desarrollo previamente probado, la programación en parejas, la propiedad colectiva y la integración continua. Sin embargo, se aplicaron el resto de las prácticas tales como la planificación incremental, las entregas pequeñas, el diseño sencillo, la refactorización, el ritmo sostenible y la presencia del cliente. Debido al método ágil de desarrollo de software utilizado en este Trabajo Especial de Grado, fue necesario definir y desarrollar un conjunto de iteraciones, en las cuales el software se desarrolla en incrementos. A continuación, se describen las iteraciones realizadas durante el desarrollo del módulo web para la gestión de planes de estudio en el sistema CONEST. 4.1 Iteración 0 En esta iteración se analiza de manera general el módulo web; se realiza un levantamiento de los requerimientos necesarios para la implementación, se desarrollan las tarjetas de historias y se esquematiza su funcionamiento. 4.1.1 Planificación Los planes de estudio de las licenciaturas de la Facultad de Ciencias se estudiaron para determinar las características comunes y las diferencias de cada plan de estudio. Además, se analizó el proceso de graduación que lleva a cabo la DCE mediante entrevistas con los trabajadores del Departamento de Grado, para determinar la manera en que los planes de estudio influyen en dicho proceso. El Departamento de Grado de la DCE utiliza los planes de estudio de las distintas licenciaturas cada semestre para verificar que los estudiantes que inscribieron Trabajo Especial de Grado cumplen con todos los requisitos curriculares y las normativas académicas que deben satisfacer para obtener un título universitario en la licenciatura en que se encuentran inscritos. En el proceso de graduación se verifican los siguientes requisitos curriculares:  Aprobar el conjunto de asignaturas obligatorias.  Aprobar el número de créditos en asignaturas electivas. 45  Convalidaciones y equivalencias entre asignaturas, en caso de que aplique.  Opciones profesionales.  Componente docente.  Servicio comunitario. Es importante resaltar que los trabajadores del Departamento de Grado realizan todas sus labores con un soporte mínimo del sistema CONEST, verificando de manera manual los requisitos curriculares de cada estudiante con lápices de colores y distintos documentos impresos. Esto representa un mayor esfuerzo humano y aumenta la probabilidad de cometer errores. Posteriormente, con el soporte y la supervisión de los tutores se estableció como el módulo web debe gestionar los planes de estudio para facilitar y simplificar las operaciones de los procesos de gestión académica de la DCE. Y por último, se revisó la base de datos actual del sistema CONEST para evaluar el soporte que provee y determinar las estructuras de datos necesarias para desarrollar las nuevas funcionalidades que incorporará el módulo web para la gestión de planes de estudio al sistema CONEST. Tras estudiar los planes de estudio de las licenciaturas de la Facultad de Ciencias y el proceso de graduación de la DCE, se determinó que el módulo web para la gestión de planes de estudio en el sistema CONEST debe satisfacer los siguientes requerimientos:  Gestionar los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias; requisitos curriculares, distribución de los requisitos curriculares por semestre, asignaturas, prelaciones, convalidaciones y equivalencias, y opciones profesionales.  Automatizar la verificación de requisitos curriculares del proceso de graduación del Departamento de Grado de la DCE.  Aplicar un conjunto de pruebas para verificar el correcto funcionamiento del módulo web.  Integrar el módulo web con el resto del sistema CONEST. Las tarjetas de historias se desarrollan a partir de los requerimientos. En este Trabajo Especial de Grado se definieron las siguientes tarjetas de historias: 1. Diseñar una interfaz gráfica para verificar requisitos curriculares 1 Día Definir la información necesaria y el formato adecuado para verificar requisitos curriculares en el módulo web 2. Diseñar las estructuras de datos para verificar requisitos curriculares 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la verificación de requisitos curriculares en el módulo web 46 3. Desarrollar la verificación de asignaturas obligatorias 2 Días Verificar que un estudiante haya aprobado las asignaturas obligatorias en una carrera 4. Desarrollar la verificación de asignaturas obligatorias optativas 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas obligatorias optativas en una carrera 5. Desarrollar la verificación de asignaturas electivas 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas electivas en una carrera 6. Desarrollar la verificación de asignaturas complementarias 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas complementarias en una carrera 7. Desarrollar la verificación de laboratorios 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de laboratorio en una carrera 8. Desarrollar la verificación de pasantías 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de pasantía en una carrera 9. Desarrollar la verificación de seminarios 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de seminario en una carrera 10. Desarrollar la verificación de TEG 1 Día Verificar que un estudiante haya aprobado el número de créditos en asignaturas de trabajo especial de grado en una carrera 11. Desarrollar la verificación del servicio comunitario 1 Día Verificar que un estudiante haya aprobado las asignaturas del servicio comunitario en una carrera 12. Desarrollar la verificación de asignaturas excedentes 1 Día Verificar si un estudiante ha aprobado más asignaturas electivas y/o asignaturas complementarias que las que se requieren en una carrera 13. Desarrollar la verificación de convalidaciones 1 Día Verificar si un estudiante ha aprobado una asignatura que haya sido convalidada por otra asignatura obligatoria en una carrera 14. Diseñar una interfaz gráfica para la cabecera 1 Día Diseñar un prototipo de interfaz para la cabecera de la vista para verificar requisitos curriculares 47 15. Revisar los requisitos curriculares de la Licenciatura en Biología 1 Día Definir los requisitos curriculares del plan de estudio de Biología que se verificaran en el módulo web 16. Revisar los requisitos curriculares de la Licenciatura en Computación 1 Día Definir los requisitos curriculares del plan de estudio de Computación que se verificaran en el módulo web 17. Revisar los requisitos curriculares de la Licenciatura en Física 1 Día Definir los requisitos curriculares del plan de estudio de Física que se verificaran en el módulo web 18. Revisar los requisitos curriculares de la Licenciatura en Geoquímica 1 Día Definir los requisitos curriculares del plan de estudio de Geoquímica que se verificaran en el módulo web 19. Revisar los requisitos curriculares de la Licenciatura en Matemática 1 Día Definir los requisitos curriculares del plan de estudio de Matemática que se verificaran en el módulo web 20. Revisar los requisitos curriculares de la Licenciatura en Química 1 Día Definir los requisitos curriculares del plan de estudio de Química que se verificaran en el módulo web 21. Desarrollar un script de bases de datos 1 Día Crear un script de bases de datos que contenga las asignaturas aprobadas por un estudiante de Computación 22. Refactorizar el código para verificar requisitos curriculares 1 Día Revisar y refinar el algoritmo para verificar requisitos curriculares 23. Diseñar una interfaz gráfica para el resumen 1 Día Diseñar un prototipo de interfaz para el resumen de la vista para verificar requisitos curriculares 24. Desarrollar el resumen de los datos académicos 1 Día Mostrar los datos académicos de un estudiante en una carrera 25. Desarrollar el resumen de la verificación de los requisitos curriculares 1 Día Mostrar el resultado de la verificación de los requisitos curriculares de un estudiante en una carrera 26. Diseñar las estructuras de datos para verificar opciones profesionales 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la verificación de opciones profesionales en el módulo web 48 27. Desarrollar el resumen de la verificación de la opción profesional 1 Día Mostrar el resultado de la verificación de la opción profesional de un estudiante en una carrera 28. Desarrollar el resumen general 1 Día Mostrar el resultado general de la verificación de los requisitos curriculares y la verificación de la opción profesional de un estudiante en una carrera 29. Refactorizar el código para mostrar los resúmenes 1 Día Revisar y refinar el algoritmo para mostrar el resumen de la verificación de requisitos curriculares y el resumen de la verificación de opciones profesionales 30. Desarrollar la selección de un estudiante y una carrera 1 Día Crear un formulario para seleccionar un estudiante y una carrera que haya cursado en la Facultad de Ciencias 31. Migrar el módulo web al sistema CONEST 3.1 2 Días Migrar las funcionalidades del módulo web desarrolladas en el sistema CONEST 3.0 al sistema CONEST 3.1 32. Diseñar las estructuras de datos para distribuir requisitos curriculares 1 Día Diseñar las tablas, atributos, restricciones y asociaciones necesarias para soportar la distribución de requisitos curriculares en el módulo web 33. Desarrollar el listado de planes de estudio 1 Día Listar los planes de estudio 34. Desarrollar la creación de planes de estudio 1 Día Crear un formulario para crear un plan de estudio 35. Desarrollar la edición de planes de estudio 1 Día Crear un formulario para editar un plan de estudio 36. Desarrollar la eliminación de planes de estudio 1 Día Eliminar un plan de estudio 37. Desarrollar el listado de requisitos curriculares 1 Día Listar los requisitos curriculares de un plan de estudio 38. Desarrollar la creación de requisitos curriculares 1 Día Crear un formulario para crear un requisito curricular en un plan de estudio 39. Desarrollar la edición de requisitos curriculares 1 Día Crear un formulario para editar un requisito curricular de un plan de estudio 49 40. Desarrollar la eliminación de requisitos curriculares 1 Día Eliminar un requisito curricular de un plan de estudio 41. Desarrollar el listado de requisitos curriculares distribuidos por semestre 1 Día Listar los requisitos curriculares de un plan de estudio distribuidos por semestre 42. Desarrollar la distribución de requisitos curriculares por semestre 1 Día Distribuir los requisitos curriculares de un plan de estudio por semestre 43. Desarrollar la redistribución de requisitos curriculares por semestre 1 Día Redistribuir los requisitos curriculares de un plan de estudio en un semestre 44. Desarrollar la eliminación de requisitos curriculares distribuidos por semestre 1 Día Eliminar un requisito curricular de un plan de estudio en un semestre 45. Desarrollar el listado de asignaturas 1 Día Listar las asignaturas 46. Desarrollar la creación de asignaturas 1 Día Crear un formulario para crear una asignatura 47. Desarrollar la edición de asignaturas 1 Día Crear un formulario para editar una asignatura 48. Desarrollar la eliminación de asignaturas 1 Día Eliminar una asignatura 49. Desarrollar el listado de asignaturas de un plan de estudio 1 Día Listar las asignaturas de un plan de estudio 50. Desarrollar la asignación de asignaturas de un plan de estudio 1 Día Asignar una asignatura a un plan de estudio 51. Desarrollar la edición de asignaturas de un plan de estudio 1 Día Editar las asignaturas de un plan de estudio 52. Desarrollar la eliminación de asignaturas de un plan de estudio 1 Día Eliminar una asignatura de un plan de estudio 53. Desarrollar un PDF para la vista para verificar requisitos curriculares 1 Día Crear un documento PDF que contenga la verificación de los requisitos curriculares y el resumen de la verificación de los requisitos curriculares de un estudiante en una carrera 50 54. Desarrollar las validaciones 2 Días Validar el formato de todos los campos de los formularios del módulo web 55. Desarrollar los mensajes de error 1 Día Crear los mensajes de error de todos los formularios del módulo web 56. Desarrollar los mensajes de confirmación 1 Día Crear los mensajes de confirmación de todos los formularios del módulo web 57. Desarrollar un script de bases de datos 1 Día Crear un script de bases de datos que contenga las tablas, atributos, restricciones y asociaciones para soportar todas las funcionalidades del módulo web 4.1.2 Diseño El sistema CONEST cuenta con una interfaz gráfica sencilla y organizada, que representa la información y las acciones disponibles a un usuario mediante iconos e indicadores visuales, y permite a los usuarios interactuar con el sistema a través de la manipulación directa de los elementos de la interfaz, para acceder las funcionalidades básicas del sistema y satisfacer los requerimientos respectivos. El módulo web para la gestión de planes de estudio se desarrolló siguiendo la apariencia general y las técnicas de interacción del sistema CONEST para asegurar la consistencia, facilitar el aprendizaje y disminuir la carga cognitiva de los usuarios. El módulo web resuelve la problemática administrativa de los requerimientos solicitados por los trabajadores de la DCE. La Figura 14 muestra el diseño general del sistema CONEST. Figura 14. Diseño General del Sistema CONEST. 51 El módulo web para la gestión de planes de estudio en el sistema CONEST se desarrolló utilizando las herramientas tecnológicas que fueron descritas en el capítulo 2:  Lenguaje de programación Ruby, versión 1.9.7.  Framework para aplicaciones web Rails, versión 3.1.0.  Gestor de paquetes RubyGems, versión 1.6.2.  Lenguaje de enmarcado Haml, versión 3.1.2.  Lenguaje de hojas de estilo Sass, versión 3.1.7.  Lenguaje de programación CoffeScript, versión 3.1.0.  Librería de JavaScript jQuery, versión 1.6.2.  Manejador de bases de datos relacional MySQL, versión 5.1. 4.1.3 Codificación La mayor parte de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias en el módulo web se realiza a través de listados y formularios. Los listados muestran los registros de la base de datos organizados en filas, y los usuarios pueden seleccionar un registro del listado para revisar sus datos detalladamente. Los formularios muestran los datos particulares de los registros, de los cuales se toman los datos ingresados por los usuarios, se realizan las validaciones correspondientes y se almacenan en la base de datos. El módulo web se desarrolló siguiendo las guías de Ruby on Rails para evitar malas prácticas de programación y las vulnerabilidades de seguridad en el software. 4.1.4 Pruebas Las pruebas funcionales se generaron a partir de las tarjetas de historias. Se definieron los datos de entrada y los resultados esperados para cada prueba, y los tutores, que son usuarios finales del sistema, verificaron el correcto funcionamiento de los requerimientos que se estaban probando al final de cada iteración. Las pruebas de aceptación están dirigidas a los trabajadores de la DCE, los cuales realizaron una serie de tareas relacionadas con la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Además, respondieron una encuesta para evaluar los requerimientos funcionales y los requerimientos no funcionales del módulo web. 52 4.2 Iteración 1 En esta iteración se describe el proceso de desarrollo de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias en el módulo web, siguiendo las prácticas del método ágil XP; especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. 4.2.1 Planificación Descripción Diseñar la interfaz gráfica, las estructuras de datos y desarrollar un algoritmo para gestionar los planes de estudio Tarjetas de Historias 32. Diseñar las estructuras de datos para distribuir requisitos curriculares 33. Desarrollar el listado de planes de estudio 34. Desarrollar la creación de planes de estudio 35. Desarrollar la edición de planes de estudio 36. Desarrollar la eliminación de planes de estudio 37. Desarrollar el listado de requisitos curriculares 38. Desarrollar la creación de requisitos curriculares 39. Desarrollar la edición de requisitos curriculares 40. Desarrollar la eliminación de requisitos curriculares 41. Desarrollar el listado de requisitos curriculares distribuidos por semestre 42. Desarrollar la distribución de requisitos curriculares por semestre 43. Desarrollar la redistribución de requisitos curriculares por semestre 44. Desarrollar la eliminación de requisitos curriculares distribuidos por semestre 45. Desarrollar el listado de asignaturas 46. Desarrollar la creación de asignaturas 47. Desarrollar la edición de asignaturas 48. Desarrollar la eliminación de asignaturas 49. Desarrollar el listado de asignaturas de un plan de estudio 50. Desarrollar la asignación de asignaturas de un plan de estudio 51. Desarrollar la edición de asignaturas de un plan de estudio 52. Desarrollar la eliminación de asignaturas de un plan de estudio 54. Desarrollar las validaciones 55. Desarrollar los mensajes de error 56. Desarrollar los mensajes de confirmación 31. Migrar el módulo web al sistema CONEST 3.1 Tiempo Estimado 27 Días 4.2.2 Diseño Como se mencionó anteriormente, la mayor parte de la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias se realiza a través de listados y formularios. 53 El listado de planes de estudio muestra todos los planes de estudio en la base de datos organizados en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes de los planes de estudio. A partir de la segunda fila, se muestran los planes de estudio, las columnas de estas filas muestran los datos particulares de cada plan de estudio que correspondan con los atributos de la cabecera. La última columna de las filas de los planes de estudio, muestran un icono para eliminar el plan de estudio correspondiente. Al colocar el cursor sobre el icono, se muestra una descripción emergente para informar al usuario sobre la funcionalidad del icono. Los usuarios deberán hacer clic en el icono, y confirmar la acción para eliminar un plan de estudio de la base de datos. Los planes de estudio del listado se pueden ordenar alfabéticamente de manera descendiente y ascendiente por atributo, mediante unos iconos que se encuentran en cada columna de la cabecera. Luego del listado, se muestra un enlace para crear un plan de estudio nuevo. La Figura 15 muestra el listado de planes de estudio. Figura 15. Listado de Planes de Estudio. Los usuarios pueden crear un plan de estudio nuevo por medio de un formulario. El formulario muestra todos los atributos de los planes de estudio mediante campos de entrada, los cuales deben ser llenados por los usuarios con la información solicitada, que se almacenará para su uso posterior o manipulación. 54 Los usuarios también pueden seleccionar un plan de estudio del listado para revisar sus datos particulares tales como el nombre, la carrera a la que pertenece, el régimen de estudio y la fecha de aplicación. Además, se muestra toda la información relacionada con los planes de estudio, como los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales, con la finalidad de acceder convenientemente y gestionar las distintas características de los planes de estudio en un solo lugar. Se utilizó un menú de acordeones para organizar de manera estructurada las características de los planes de estudio. Los usuarios pueden minimizar y maximizar los acordeones para mostrar su contenido cuando sea necesario. Esta técnica permite mostrar una gran cantidad de información en poco espacio. La Figura 16 muestra la página web para editar planes de estudio. Figura 16. Editar Planes de Estudio. Se pueden gestionar los datos particulares de los requisitos curriculares de los planes de estudio tales como el tipo de asignatura, el número mínimo de unidades de crédito y el número mínimo de asignaturas que se deben aprobar. En la Facultad de Ciencias existen diferentes tipos de asignaturas tales como las obligatorias, obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario. Cada licenciatura exige aprobar un número de asignaturas de diferentes tipos para obtener el título de la carrera. Además, dichas asignaturas están distribuidas en 10 55 semestres. Se creó la tabla distribucion_requisito_plan en la base de datos para poder distribuir los requisitos curriculares de un plan de estudio por semestre. La Figura 17 muestra la tabla distribucion_requisito_plan. Figura 17. Tabla distribucion_requisito_plan. El listado de requisitos curriculares distribuidos por semestre muestra el número de asignaturas que se deben aprobar en cada semestre, de los requisitos curriculares de un plan de estudio organizados en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran los 10 semestres de la carrera. A partir de la segunda fila, se muestran los requisitos curriculares, las columnas de estas filas muestran el número de asignaturas requeridas por cada requisito curricular que correspondan con el semestre de la cabecera. La última columna de las filas de los requisitos curriculares de un plan de estudio, muestran el número total de asignaturas distribuidas del número total de asignaturas que se deben aprobar del requisito curricular correspondiente. La Figura 18 muestra el listado de requisitos curriculares distribuidos por semestre. Figura 18. Listado de Requisitos Curriculares Distribuidos por Semestre. 56 Se pueden gestionar los datos particulares de los requisitos curriculares de un plan de estudio distribuidos por semestre tales como el tipo de asignatura, el semestre, y el número de asignaturas que se deben aprobar en dicho semestre. También se pueden gestionar los datos particulares de los requisitos curriculares de las opciones profesionales registradas en un plan de estudio tales como el tipo de asignatura, el número mínimo de unidades de crédito y el número mínimo de asignaturas que se deben aprobar. La gestión de los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales de los planes de estudio, se realiza de manera similar a la gestión de los planes de estudio. El listado de asignaturas muestra todas las asignaturas en la base de datos organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes de las asignaturas. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. La última columna de las filas de las asignaturas, muestran un icono para eliminar la asignatura correspondiente. Al colocar el cursor sobre el icono, se muestra una descripción emergente para informar al usuario sobre la funcionalidad del icono. Los usuarios deberán hacer clic en el icono, y confirmar la acción para eliminar una asignatura de la base de datos. Las asignaturas del listado se pueden ordenar alfabéticamente de manera descendiente y ascendiente por atributo, mediante unos iconos que se encuentran en cada columna de la cabecera. Luego del listado, se muestra un enlace para crear una asignatura nueva. Es importante resaltar que existen más de 1900 registros de asignaturas en la base de datos, por este motivo, se utilizó un sistema de paginación para dividir los registros en conjuntos discretos. Esta técnica permite mostrar en el listado un número limitado de asignaturas en varias páginas. Los usuarios pueden navegar a través de las diferentes páginas para mostrar su contenido cuando sea necesario. Además, los usuarios pueden buscar asignaturas por nombre por medio de una barra de búsqueda que se encuentra antes del listado. La Figura 19 muestra el listado de asignaturas. 57 Figura 19. Listado de Asignaturas. Los usuarios pueden crear una asignatura nueva por medio de un formulario. El formulario muestra todos los atributos de las asignaturas mediante campos de entrada, los cuales deben ser llenados por los usuarios con la información solicitada, que se almacenará para su uso posterior o manipulación. Los usuarios también pueden seleccionar una asignatura del listado para revisar sus datos particulares tales como el código, el departamento al que pertenece, el nombre y el nombre corto. Además, se muestra toda la información relacionada con las asignaturas tales como los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales, con la finalidad de acceder convenientemente y gestionar las distintas características de las asignaturas en un solo lugar. 58 Se utilizó un menú de acordeones para organizar de manera estructurada las características de las asignaturas. Los usuarios pueden minimizar y maximizar los acordeones para mostrar su contenido cuando sea necesario. La Figura 20 muestra la página web para editar asignaturas. Figura 20. Editar Asignaturas. Existen asignaturas que se pueden cursar bajo diferentes modalidades en la misma carrera. De este modo, la asignatura Aplicaciones con la Tecnología Internet se puede cursar como obligatoria optativa o como electiva en la carrera de Computación, por ejemplo. Se crearon los campos tipo_materia_id y es_tipo_principal en la tabla materia_en_plan para poder registrar una asignatura varias veces en el mismo plan de estudio con tipos de asignaturas diferentes. Otro caso particular a tomar en cuenta es el de las asignaturas obligatorias y sus convalidaciones, el campo es_tipo_principal permite determinar cuáles son las asignaturas obligatorias de una carrera y cuáles son las asignaturas por las cuales son convalidadas. La Figura 21 muestra la tabla materia_en_plan. 59 Figura 21. Tabla materia_en_plan. Se pueden gestionar los datos particulares de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, el tipo de asignatura, el método de calificación, el número de unidades de crédito que se obtienen por aprobarla, el número de horas teóricas, el número de horas de práctica y el número de horas de laboratorios que reciben los estudiantes en clases semanales, el semestre, si requiere un aula y un horario, si puede ser reparada, si es de servicio, si se programa un examen final, el número de unidades de créditos aprobados requeridos para cursarla y si puede ser retirada. También se pueden gestionar los datos particulares de las prelaciones de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, la asignatura que se debe aprobar con anterioridad para poder cursarla y si dicha asignatura se puede cursar en paralelo. Además, se pueden gestionar los datos particulares de las convalidaciones de las asignaturas registradas en un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, y la asignatura por la cual es convalidada. También se pueden gestionar los datos particulares de las asignaturas registradas en las opciones profesionales de un plan de estudio tales como la carrera y el plan de estudio a los que pertenece, la opción profesional y el tipo de asignatura. 60 La gestión de los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales de las asignaturas registradas en un plan de estudio se realiza de manera similar a la gestión de las asignaturas. El módulo web mantiene a los usuarios informados sobre el estado de las operaciones que están realizando, a través de retroalimentación adecuada dentro de un plazo razonable de tiempo. Los formularios están diseñados para comprobar que los campos obligatorios están llenos. Si los campos no lo están, se muestra una notificación emergente que indica la obligatoriedad, en la esquina superior derecha de cada uno de ellos. Además, no se puede enviar un formulario al servidor hasta que todos los campos obligatorios estén llenos. La Figura 22 muestra la notificación emergente para indicar los campos obligatorios de los formularios. Figura 22. Campos Obligatorios. Los diálogos muestran mensajes complementarios sobre la información llenada por los usuarios en los campos de entrada de un formulario. Se utilizan en su mayoría con las listas desplegables, en las cuales las opciones disponibles dependen de los valores de otros campos de entrada, para informar a los usuarios que no hay ninguna opción disponible para los valores seleccionados. La Figura 23 muestra el dialogo emergente utilizado junto con las listas desplegables en cascada. Figura 23. Diálogos Emergentes. Los mensajes de confirmación y error están expresados en un lenguaje sencillo (sin código), con palabras, frases y expresiones que indiquen con precisión el resultado de la operación realizada, 61 así como también pueden sugerir una solución constructiva en caso de que sea necesario. Las Figuras 24 y 25 muestran los mensajes de confirmación y error respectivamente. Figura 24. Mensajes de Confirmación. Figura 25. Mensajes de Error. 4.2.3 Codificación Los planes de estudio se representan en el módulo web para la gestión de planes de estudio en el sistema CONEST por medio del modelo plan.rb, en el cual se definen las propiedades generales de los planes de estudio tales como la clave primaria, las asociaciones entre modelos, las validaciones, las retrollamadas y los métodos de la lógica de negocio. La Figura 26 muestra el modelo plan.rb. Figura 26. Modelo plan.rb. 62 Para mostrar el listado de planes de estudio, primero se buscan todos los registros en la base de datos, en el método index del controlador plan_estudio_controller.rb. Luego, en la vista index.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de los planes de estudio contiene algún registro o si está vacía. Si la variable no está vacía, se itera sobre el conjunto de resultados, y se muestra en una tabla los datos particulares así como los enlaces para editar, activar y eliminar el plan de estudio correspondiente. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún registro y un enlace para crear un plan de estudio nuevo. El estilo de la tabla y la funcionalidad para ordenar alfabéticamente las columnas se obtienen a través de la clase tablesorter. Además, se enlaza la hoja de estilo plan_estudio.css.scss para incorporar las reglas de presentación requeridas por la vista. La Figura 27 muestra la vista index.html.haml (Ver Figura 15). Figura 27. Vista plan_estudio/index.html.haml. Para crear un plan de estudio, primero se crea una instancia nueva, en el método crear del controlador plan_estudio_controller.rb. Luego, en la vista crear.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. 63 Los atributos de los planes de estudio se muestran en la vista parcial _formulario.html.haml mediante campos de entrada. Los campos de entrada se llenan dependiendo de la acción que se esté realizando, de este modo, los usuarios llenan todos los campos de entrada del formulario cuando estén creando un plan de estudio nuevo, pero no podrán modificar la información de los campos de entrada correspondientes a la clave primaria cuando estén editando un plan de estudio existente. El estilo de las notificaciones emergentes y la funcionalidad para indicar los campos obligatorios de los formularios se obtienen a través de la clase valídate[required]. La Figura 28 muestra la vista parcial _formulario.html.haml (Ver Figura 16). Figura 28. Vista Parcial plan_estudio/_formulario.html.haml. Para guardar un plan de estudio nuevo, primero se guarda la información de los campos de entrada del formulario, en el método guardar del controlador plan_estudio_controller.rb. Luego, se intenta almacenar el registro en la base de datos. Si ninguna de las validaciones falla y la operación de inserción en la base de datos se realiza exitosamente, se redirige a la vista index.html.haml y se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 29 muestra el método guardar. 64 Figura 29. Método plan_estudio/guardar. Los mensajes de confirmación y error se muestran en la vista parcial _notificacion.html.haml. Los estilos de los mensajes se obtienen a través de las clases ui-state-highlight.ui-corner-all y ui-state- error.ui-corner-all respectivamente. La Figura 30 muestra la vista parcial _notificacion.html.haml. Figura 30. Vista Parcial plan_estudio/_notificacion.html.haml. Para editar un plan de estudio, primero se busca el registro seleccionado del listado en la base de datos, en el método editar del controlador plan_estudio_controller.rb. Luego, en la vista editar.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardaron los datos particulares del plan de estudio que se mostrarán en los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Para actualizar un plan de estudio existente, primero se busca el registro en la base de datos, en el método actualizar del controlador plan_estudio_controller.rb. Luego, se intenta almacenar los cambios en el registro en la base de datos. Si ninguna de las validaciones falla y la operación de actualización en la base de datos se realiza exitosamente, se redirige a la vista index.html.haml y se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 31 muestra un fragmento del método actualizar. Figura 31. Método plan_estudio/actualizar. 65 Para eliminar un plan de estudio existente, primero se busca el registro en la base de datos, en el método eliminar del controlador plan_estudio_controller.rb. Luego, se intenta borrar el registro de la base datos. Si ninguna de las retrollamadas falla y la operación de eliminación en la base de datos se realiza exitosamente, se muestra un mensaje de confirmación. En caso contrario, se muestra un mensaje de error. La Figura 32 muestra el método eliminar. Figura 32. Método plan_estudio/eliminar. En el método editar del controlador plan_estudio_controller.rb, también se buscan todos los requisitos curriculares, el número de asignaturas que los estudiantes deben aprobar en cada semestre de la carrera por requisito curricular y las opciones profesionales de un plan de estudio. La Figura 33 muestra un fragmento del método editar. Figura 33. Método plan_estudio/editar. El algoritmo para buscar el número de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG que se deben aprobar en cada semestre, es similar al algoritmo para buscar el número de asignaturas obligatorias, que se muestra en la figura anterior. 66 En la vista editar.html.haml, se muestran todos los listados relacionados con los planes de estudio tales como el listado de requisitos curriculares, el listado de requisitos curriculares distribuidos por semestre y el listado de opciones profesionales, organizados en un menú de acordeones. La Figura 34 muestra un fragmento de la vista editar.html.haml (Ver Anexo I). Figura 34. Vista plan_estudio/editar.html.haml. El estilo de los acordeones y la funcionalidad para minimizar y maximizar su contenido se obtienen a través de las clases acordeon y contenido-acordeon, las cuales se desarrollaron en el script plan_estudio.js.coffee. La Figura 35 muestra un fragmento del script plan_estudio.js.coffee. Figura 35. Script plan_estudio.js.coffee. 67 El listado de requisitos curriculares distribuidos por semestre, se muestra en la vista parcial _distribucion_requisitos_curriculares.html.haml. Se itera sobre el conjunto de requisitos curriculares del plan de estudio, y dentro de un ciclo, se determina la distribución del número de asignaturas del requisito curricular correspondiente en cada semestre de la carrera. Además, se muestra el número total de asignaturas distribuidas del número mínimo de asignaturas que se deben aprobar en dicho requisito curricular. La Figura 36 muestra un fragmento de la vista parcial _distribucion_requisitos_curriculares.html.haml. Figura 36. Vista Parcial plan_estudio/_distribucion_requisitos_curriculares.html.haml. El algoritmo para determinar la distribución de las asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG en cada semestre, es similar al algoritmo para determinar la distribución de las asignaturas obligatorias, que se muestra en la figura anterior. Los tipos de asignaturas se restringen cuando se crea un requisito curricular nuevo en un plan de estudio, para prevenir que se registre un tipo de asignatura varias veces en el mismo plan de estudio. La Figura 37 muestra el método crear_requisito_curricular. 68 Figura 37. Método plan_estudio/crear_requisito_curricular. Luego, en la vista crear_requisito_curricular.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de los tipos de asignaturas contiene algún elemento o si está vacía. Si no está vacía, se muestra un formulario, en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún elemento y un enlace para regresar a la vista editar.html.haml (Ver Anexo II). Antes de guardar un requisito curricular en la base de datos, se verifica que el número mínimo de unidades de crédito y el número mínimo de asignaturas del requisito curricular no sean iguales a cero simultáneamente. Antes de actualizar un requisito curricular en la base de datos, también se verifica que el número mínimo de asignaturas que se deben aprobar no sea menor que el número total de asignaturas distribuidas en los 10 semestres de la carrera. La Figura 38 muestra un fragmento del modelo requisito_graduacion_plan.rb. Figura 38. Modelo requisito_graduacion_plan.rb Además, antes de guardar o actualizar la distribución de un requisito curricular en la base de datos, se verifica que el número total de asignaturas distribuidas en los 10 semestres de la carrera no sea mayor que el número mínimo de asignaturas que se deben aprobar en el requisito curricular correspondiente, en el modelo distribucion_requisito_plan.rb. 69 Los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los requisitos curriculares, la distribución de los requisitos curriculares por semestre y las opciones profesionales de los planes de estudio, así como los requisitos curriculares de las opciones profesionales son similares a los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio. Las asignaturas se representan en el módulo web para la gestión de planes de estudio en el sistema CONEST por medio del modelo materia.rb, en el cual se definen las propiedades generales de las asignaturas tales como la clave primaria, las asociaciones entre modelos, las validaciones, las retrollamadas y los métodos de la lógica de negocio. Para mostrar el listado de asignaturas, primero se buscan todos los registros en la base de datos en conjuntos (de 50 asignaturas cada uno), en el método index del controlador asignatura_controller.rb. Luego, en la vista index.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de las asignaturas contiene algún registro o si está vacía. Si la variable no está vacía, se itera sobre el primer conjunto de resultados, y se muestra en una tabla los datos particulares así como los enlaces para editar y eliminar la asignatura correspondiente. Luego de la tabla, se muestran los enlaces para navegar a través de los diferentes conjuntos de asignaturas. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún registro y un enlace para crear una asignatura nueva. El estilo de los enlaces y la funcionalidad para mostrar el contenido de los diferentes conjuntos de asignaturas en el listado se obtienen a través de la gema Kaminari. Para buscar una asignatura por nombre, primero se buscan todos los registros cuyo nombre contenga la cadena de caracteres que el usuario ingresó en la barra de búsqueda, de manera asíncrona en la base de datos a medida que vaya tecleando, en el método autocomplete del controlador asignatura_controller.rb. Luego, se muestran las asignaturas en un listado emergente debajo de la barra de búsqueda. La Figura 39 muestra el método autocomplete. Figura 39. Método asignatura/autocomplete. 70 El estilo del listado emergente y la funcionalidad para buscar asíncronamente las asignaturas en la base de datos se obtienen a través de la librería jQuery, la cual se implementó en el script asignatura.js.coffee. La Figura 40 muestra un fragmento del script asignatura.js.coffee. Figura 40. Script asignatura.js.coffee (Autocomplete). Posteriormente, en el método buscar_asignatura del controlador asignatura_controller.rb, se determina si la asignatura que seleccionó el usuario del listado emergente es válida o si es inválida. Si la asignatura es válida, se redirige a la vista editar.html.haml. Si la asignatura no es válida, se muestra un mensaje de error. En el método editar del controlador asignatura_controller.rb, se busca la asignatura seleccionada del listado en la base de datos, así como los planes de estudio y las opciones profesionales en los que está registrada, las prelaciones y las convalidaciones. En la vista editar.html.haml, se muestra un formulario en el cual se especifica la variable donde se guardaron los datos particulares de la asignatura que se mostrarán en los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Además, se muestran los listados relacionados con las asignaturas tales como el listado de planes de estudio, el listado de prelaciones, el listado de convalidaciones y el listado de opciones profesionales, organizados en un menú de acordeones (Ver Anexo III). Las carreras se restringen cuando se crea una prelación de una asignatura, para cerciorarse de que solo se puedan registrar prelaciones en los planes de estudio en los cuales está registrada la asignatura. La Figura 41 muestra el método crear_prelacion. 71 Figura 41. Método asignatura/crear_prelacion. Luego, en la vista crear_prelacion.html.haml, se determina si la variable donde se guardó el resultado de la búsqueda de las carreras contiene algún elemento o si está vacía. Si no está vacía, se muestra un formulario, en el cual se especifica la variable donde se guardará la información de los campos de entrada, la acción que se ejecutará cuando se envié el formulario al servidor, el identificador y la vista parcial de los campos de entrada. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún elemento y un enlace para regresar a la vista editar.html.haml. La lista desplegable de planes de estudio del formulario mencionado anteriormente se llena dinámicamente dependiendo del valor de la lista desplegable de carreras. Se buscan todos los planes de estudio en los que está registrada la asignatura que pertenezcan a la carrera que el usuario selecciono en la lista desplegable, de manera asíncrona en la base de datos cuando el usuario seleccione una opción, en el método buscar_planes_estudio_asignatura del controlador asignatura_controller.rb. La Figura 42 muestra el método buscar_planes_estudio_asignatura. Figura 42. Método asignatura/buscar_planes_estudio_asignatura. La funcionalidad para buscar asíncronamente los planes de estudio en la base de datos se obtiene a través de la librería jQuery, la cual se implementó en el script asignatura.js.coffee. Además, se determina si la variable donde se guardó el resultado de la búsqueda de los planes de estudio contiene algún elemento o si está vacía. Si la variable no está vacía, se llenan las opciones de la lista desplegable con los planes de estudio. Si la variable está vacía, se muestra un mensaje indicando que no se encontró ningún plan de estudio para la carrera seleccionada en un dialogo emergente. La Figura 43 muestra otro fragmento del script asignatura.js.coffee. 72 Figura 43. Script asignatura.js.coffee (Listas Desplegables). Por último, los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio, las prelaciones, las convalidaciones y las opciones profesionales de una asignatura es similar a los algoritmos para listar, crear, guardar, editar, actualizar y eliminar los planes de estudio. 4.2.4 Pruebas Las pruebas funcionales de esta iteración se basan en la creación, edición y eliminación de planes de estudio, asignaturas y opciones profesionales, así como la gestión de las características particulares de cada uno de ellos. Caso de Prueba Resultado Esperado Resultado Obtenido Crear un plan de estudio Crear un plan de estudio nuevo Se guardó la información básica del plan de estudio y se mostró un mensaje de confirmación Editar un plan de estudio Modificar un plan de estudio existente Se actualizó la información básica del plan de estudio y se mostró un mensaje de confirmación Eliminar un plan de estudio Eliminar un plan de estudio existente Se borró la información básica del plan de estudio y se mostró un mensaje de confirmación Activar un plan de estudio Registrar el plan de estudio activo de la carrera Se registró el plan de estudio como el plan activo de la carrera y se mostró un mensaje de confirmación Intentar eliminar un Tratar de eliminar un plan Se canceló la acción correctamente y se 73 plan de estudio activo de estudio activo mostró un mensaje de error Crear un requisito curricular Crear un requisito curricular nuevo en un plan de estudio Se guardó el requisito curricular en el plan de estudio y se mostró un mensaje de confirmación Editar un requisito curricular Modificar un requisito curricular de un plan de estudio Se actualizó el requisito curricular del plan de estudio y se mostró un mensaje de confirmación Eliminar un requisito curricular Eliminar un requisito curricular de un plan de estudio Se borró el requisito curricular del plan de estudio y se mostró un mensaje de confirmación Distribuir un requisito curricular Distribuir un requisito curricular de un plan de estudio por semestres Se guardó el número de asignaturas en cada semestre de un requisito curricular y se mostró un mensaje de confirmación Redistribuir un requisito curricular Redistribuir un requisito curricular de un plan de estudio por semestres Se actualizó el número de asignaturas en cada semestre de un requisito curricular y se mostró un mensaje de confirmación Intentar distribuir un número mayor de asignaturas Tratar de distribuir un número de asignaturas mayor que el requerido por un requisito curricular Se canceló la acción correctamente y se mostró un mensaje de error Crear una opción profesional Crear una opción profesional nueva Se guardó la información básica de la opción profesional y se mostró un mensaje de confirmación Editar una opción profesional Modificar una opción profesional existente Se actualizó la información básica de la opción profesional y se mostró un mensaje de confirmación Eliminar una opción profesional Eliminar una opción profesional existente Se borró la información básica de la opción profesional y se mostró un mensaje de confirmación Registrar una opción profesional Registrar una opción profesional en un plan de estudio Se registró la opción profesional en el plan de estudio y se mostró un mensaje de confirmación Editar un registro de una opción profesional Modificar una opción profesional registrada en un plan de estudio Se actualizó la opción profesional registrada en el plan de estudio y se mostró un mensaje de confirmación Eliminar un registro de una opción profesional Eliminar una opción profesional registrada en un plan de estudio Se borró la opción profesional registrada en el plan de estudio y se mostró un mensaje de confirmación Crear un requisito curricular en una opción profesional Crear un requisito curricular nuevo en una opción profesional Se guardó el requisito curricular en la opción profesional y se mostró un mensaje de confirmación Editar un requisito curricular de una opción profesional Modificar un requisito curricular de una opción profesional Se actualizó el requisito curricular de la opción profesional y se mostró un mensaje de confirmación Eliminar un requisito curricular de una opción profesional Eliminar un requisito curricular de una opción profesional Se borró el requisito curricular de la opción profesional y se mostró un mensaje de confirmación 74 Crear una asignatura Crear una asignatura nueva Se guardó la información básica de la asignatura y se mostró un mensaje de confirmación Editar una asignatura Modificar una asignatura existente Se actualizó la información básica de la asignatura y se mostró un mensaje de confirmación Eliminar una asignatura Eliminar una asignatura existente Se borró la información básica de la asignatura y se mostró un mensaje de confirmación Registrar una asignatura Registrar una asignatura en un plan de estudio Se registro la asignatura en el plan de estudio y se mostro un mensaje de confirmación Editar un registro de una asignatura Modificar una asignatura registrada en un plan de estudio Se actualizó la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar un registro de una asignatura Eliminar una asignatura registrada en un plan de estudio Se borró la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Activar el tipo principal de una asignatura Registrar el tipo principal de una asignatura en un plan de estudio Se registró cual es el tipo principal de una asignatura registrada varias veces en el mismo plan de estudio y se mostró un mensaje de confirmación Intentar eliminar el tipo principal de una asignatura Tratar de eliminar el registro principal de una asignatura en un plan de estudio Se canceló la acción correctamente y se mostro un mensaje de error Crear una prelación Crear una prelación nueva de una asignatura registrada en un plan de estudio Se guardó la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Editar una prelación Modificar una prelación de una asignatura registrada en un plan de estudio Se actualizó la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar una prelación Eliminar una prelación de una asignatura registrada en un plan de estudio Se borró la prelación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Crear una convalidación Crear una convalidación nueva de una asignatura registrada en un plan de estudio Se guardó la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Editar una convalidación Modificar una convalidación de una asignatura registrada en un plan de estudio Se actualizó la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de confirmación Eliminar una convalidación Eliminar una convalidación de una asignatura registrada en un plan de Se borró la convalidación de la asignatura registrada en el plan de estudio y se mostro un mensaje de 75 estudio confirmación Registrar una asignatura en una opción profesional Registrar una asignatura en una opción profesional de un plan de estudio Se registró la asignatura en la opción profesional y se mostro un mensaje de confirmación Editar un registro de una asignatura en una opción profesional Modificar una asignatura registrada en una opción profesional de un plan de estudio Se actualizó la asignatura registrada en la opción profesional y se mostro un mensaje de confirmación Eliminar un registro de una asignatura en una opción profesional Eliminar una asignatura registrada en una opción profesional de un plan de estudio Se borró la asignatura registrada en la opción profesional y se mostro un mensaje de confirmación 76 4.3 Iteración 2 En esta iteración se describe el proceso de desarrollo de la verificación de los requisitos curriculares de los estudiantes regulares de pregrado en el módulo web, siguiendo las prácticas del método ágil XP; especificando la planificación, el diseño, la codificación y las pruebas de las tarjetas de historias correspondientes. 4.3.1 Planificación Descripción Diseñar la interfaz gráfica, las estructuras de datos y desarrollar un algoritmo para verificar los requisitos curriculares de los estudiantes Tarjetas de Historias 1. Diseñar una interfaz gráfica para verificar requisitos curriculares 2. Diseñar las estructuras de datos para verificar requisitos curriculares 3. Desarrollar la verificación de asignaturas obligatorias 4. Desarrollar la verificación de asignaturas obligatorias optativas 5. Desarrollar la verificación de asignaturas electivas 6. Desarrollar la verificación de asignaturas complementarias 7. Desarrollar la verificación de laboratorios 8. Desarrollar la verificación de pasantías 9. Desarrollar la verificación de seminarios 10. Desarrollar la verificación de TEG 11. Desarrollar la verificación del servicio comunitario 12. Desarrollar la verificación de asignaturas excedentes 13. Desarrollar la verificación de convalidaciones 14. Diseñar una interfaz gráfica para la cabecera 15. Revisar los requisitos curriculares de la Licenciatura en Biología 16. Revisar los requisitos curriculares de la Licenciatura en Computación 17. Revisar los requisitos curriculares de la Licenciatura en Física 18. Revisar los requisitos curriculares de la Licenciatura en Geoquímica 19. Revisar los requisitos curriculares de la Licenciatura en Matemática 20. Revisar los requisitos curriculares de la Licenciatura en Química 21. Desarrollar un script de bases de datos 22. Refactorizar el código para verificar requisitos curriculares 23. Diseñar una interfaz gráfica para el resumen 24. Desarrollar el resumen de los datos académicos 25. Desarrollar el resumen de la verificación de los requisitos curriculares 26. Diseñar las estructuras de datos para verificar opciones profesionales 27. Desarrollar el resumen de la verificación de la opción profesional 28. Desarrollar el resumen general 29. Refactorizar el código para mostrar los resúmenes 30. Desarrollar la selección de un estudiante y una carrera 53. Desarrollar un PDF para la vista para verificar requisitos curriculares 57. Desarrollar un script de bases de datos Tiempo Estimado 33 Días 77 4.3.2 Diseño Los trabajadores del Departamento de Grado de la DCE verifican los requisitos curriculares de los estudiantes regulares de pregrado utilizando distintos documentos impresos, entre los cuales se destacan los planes de estudio de las licenciaturas de la Facultad de Ciencias y los kardex de los estudiantes. La página web para verificar requisitos curriculares muestra todas las asignaturas (tanto aprobadas como no aprobadas por un estudiante) de una carrera organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos más relevantes del kardex. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. Las asignaturas están agrupadas por semestre, de manera similar al plan de estudio de la licenciatura correspondiente. La Figura 44 muestra un fragmento de la página web para verificar requisitos curriculares. Figura 44. Verificación de Requisitos Curriculares. 78 Se utilizaron diferentes colores y grados de opacidad para diferenciar las asignaturas aprobadas y las asignaturas que aún no han sido aprobadas por un estudiante en una carrera. La Figura 45 muestra el efecto utilizado para diferenciar las asignaturas aprobadas y las no aprobadas. Figura 45. Asignaturas Aprobadas/Asignaturas No Aprobadas. Una asignatura se puede registrar varias veces en el mismo plan de estudio con tipos de asignaturas diferentes. Se creó el campo tipo_materia_id en la tabla historial_academico para poder determinar los tipos de las asignaturas aprobadas por un estudiante en una carrera. La Figura 46 muestra la tabla historial_academico. Figura 46. Tabla historial_academico. Las asignaturas del servicio comunitario se muestran luego de las asignaturas de un plan de estudio, así como el excedente de asignaturas electivas y/o complementarias, en caso de que un estudiante haya aprobado más asignaturas que las requeridas en una carrera. El resumen de la verificación de los requisitos curriculares muestra el número de asignaturas que se deben aprobar (por cada requisito curricular) en una carrera organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos que se verificaron de los requisitos curriculares. A partir de la segunda fila, se muestran los tipos de asignaturas de los requisitos curriculares, las columnas de estas filas muestran el resultado de la verificación de cada requisito curricular que corresponda con los atributos de la 79 cabecera. Se utilizaron iconos visuales para señalar los requisitos curriculares que un estudiante no satisface. La Figura 47 muestra el resumen de la verificación de los requisitos curriculares. Figura 47. Resultado de la Verificación de Requisitos Curriculares. Existen opciones profesionales que se pueden obtener en diferentes planes de estudio. De este modo, la opción profesional Aplicaciones con la Tecnología Internet se puede obtener en los planes de estudio de Computación de los años 2000 y 2004, por ejemplo. Se crearon las tablas opcion, opcion_plan y requisito_graduacion_opcion_plan en la base de datos para poder registrar una opción profesional en varios planes de estudio, así como sus requisitos curriculares. La Figura 48 muestra las tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. Figura 48. Tablas opcion, opcion_plan y requisito_graduacion_opcion_plan. El resumen de la verificación de la opción profesional muestra todas las asignaturas (tanto aprobadas como no aprobadas por un estudiante) de una opción profesional organizadas en filas. En la primera fila se muestra la cabecera, las columnas de la primera fila muestran la denominación de los atributos de las asignaturas. A partir de la segunda fila, se muestran las asignaturas, las columnas de estas filas muestran los datos particulares de cada asignatura que correspondan con los atributos de la cabecera. La Figura 49 muestra el resumen de la verificación de la opción profesional. 80 Figura 49. Verificación de la Opción Profesional. Por último, se muestra el resultado general de la verificación de los requisitos curriculares de un estudiante en una carrera, en el cual se muestra un mensaje indicando si satisface o no satisface todos los requisitos curriculares necesarios para obtener un título universitario. 4.3.3 Codificación Para verificar los requisitos curriculares de un estudiante en una carrera, primero se busca el plan de estudio activo de la carrera, las asignaturas obligatorias, el número mínimo de unidades de crédito y el número mínimo de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario que se deben aprobar, las convalidaciones y las asignaturas que ha aprobado en la base de datos, en el método verificar_requisitos del controlador plan_estudio_controller.rb. La Figura 50 muestra un fragmento del método verificar_requisitos. 81 Figura 50. Método plan_estudio/verificar_requisitos (Requisitos Curriculares). 82 El algoritmo para buscar el número de asignaturas electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario que se deben aprobar en una carrera, es similar al algoritmo para buscar el número de asignaturas obligatorias optativas que se deben aprobar, que se muestra en la figura anterior. Además, el algoritmo para buscar las asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios, TEG y servicio comunitario aprobadas por un estudiante en una carrera, es similar al algoritmo para buscar las asignaturas obligatorias aprobadas por un estudiante, que se muestra en la figura anterior. Es importante resaltar que las asignaturas de tipo método y PCI son consideradas como asignaturas electivas y complementarias respectivamente, en caso de que un estudiante haya aprobado alguna asignatura de estos tipos en una carrera. Luego, en la vista parcial _verificar_requisitos_academicos.html.erb, se verifica dentro de un ciclo si un estudiante ha aprobado todas las asignaturas obligatorias (o las asignaturas por las cuales han sido convalidadas) y el número de asignaturas obligatorias optativas, electivas, complementarias, laboratorios, pasantías, seminarios y TEG requeridas en cada semestre de una carrera. La Figura 51 muestra un fragmento de la vista parcial _verificar_requisitos_academicos.html.erb (Ver Figura 44). 83 84 Figura 51. Vista Parcial _verificar_requisitos_academicos.html.erb. El algoritmo para verificar si un estudiante ha aprobado el número de asignaturas electivas, complementarias, laboratorios, pasantías, seminarios y TEG en cada semestre de una carrera, es similar al algoritmo para verificar si ha aprobado el número de asignaturas obligatorias optativas, que se muestra en la figura anterior. En la vista parcial _verificar_servicio_comunitario.html.erb, se verifica si un estudiante ha aprobado mas asignaturas electivas y/o complementarias que las requeridas en una carrera, así como se verifica si ha aprobado todas las asignaturas del servicio comunitario. En el método verificar_requisitos del controlador plan_estudio_controller.rb, también se determina la opción profesional de un estudiante en una carrera, en función de los seminarios y TEG que haya aprobado o inscrito en el semestre en curso. Además, se buscan todos los requisitos curriculares de la opción profesional en la base de datos. La Figura 52 muestra otro fragmento del método verificar_requisitos. 85 Figura 52. Método plan_estudio/verificar_requisitos (Opción Profesional). El algoritmo para buscar los TEG que se deben aprobar en una opción profesional, es similar al algoritmo para buscar los seminarios que se deben aprobar, que se muestra en la figura anterior. En la vista parcial _resumen_opcion_profesional.html.erb, se verifica dentro de un ciclo si un estudiante ha aprobado todas las asignaturas electivas, seminarios y TEG que se deben aprobar en una opción profesional. La Figura 53 muestra un fragmento de la vista parcial _resumen_opcion_profesional.html.erb (Ver Figura 49). 86 Figura 53. Vista Parcial _resumen_opcion_profesional.html.erb. Por último, en la vista _revision_requisitos_notas.erb, se verifica si un estudiante satisface todos los requisitos curriculares para obtener el título de una carrera, y se muestran cada uno de los requisitos curriculares que no satisface en caso contrario. 87 4.3.4 Pruebas Las pruebas funcionales de esta iteración se basan en la verificación de los requisitos curriculares de los estudiantes regulares de pregrado de la Facultad de Ciencias. Caso de Prueba Resultado Esperado Resultado Obtenido Buscar un estudiante con una carrera Buscar un estudiante inscrito en una sola carrera Se buscó la carrera en la cual está inscrito el estudiante para verificar sus requisitos curriculares Buscar un estudiante con más de una carrera Buscar un estudiante inscrito en más de una carrera Se buscaron las carreras en las cuales está inscrito el estudiante y se mostraron en un dialogo emergente Buscar un estudiante sin carrera Buscar un estudiante que no esté inscrito en ninguna carrera Se mostro un mensaje de error en un dialogo emergente Verificar los requisitos de un estudiante de primer semestre Verificar los requisitos curriculares de un estudiante del primer semestre de una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Biología Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Biología Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Computación Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Computación Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Física Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Física Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Geoquímica Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Geoquímica Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Matemática Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Matemática Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante de Química Verificar los requisitos curriculares de un estudiante que este terminando la carrera de Química Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante con convalidaciones Verificar los requisitos curriculares de un estudiante con asignaturas convalidadas en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular 88 Verificar los requisitos de un estudiante con excedente de asignaturas Verificar los requisitos curriculares de un estudiante que haya aprobado más asignaturas que las requeridas en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante sin opción Verificar los requisitos curriculares de un estudiante sin opción profesional en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular Verificar los requisitos de un estudiante con opción Verificar los requisitos curriculares de un estudiante con opción profesional en una carrera Se verificaron los requisitos curriculares del estudiante y se mostró el resumen curricular En esta iteración también se realizaron las pruebas de aceptación (con cuatro trabajadores de la DCE), las cuales se basan en la gestión de los planes de estudio de las licenciaturas de la Facultad de Ciencias y la verificación de los requisitos curriculares de los estudiantes regulares de pregrado. Las principales funcionalidades del módulo web se dividieron en tres grupos diferentes, con el fin de permitir que los trabajadores que participaran en las pruebas, probaran las funcionalidades específicas del módulo web que correspondieran con las labores de su trabajo. En las pruebas de aceptación los trabajadores de la DCE realizaron las siguientes tareas: Planes de Estudio 1. Crear plan de estudio con datos introducidos por el usuario 2. Activar plan de estudio 3. Intentar eliminar plan de estudio activo 4. Crear requisito curricular con datos introducidos por el usuario 5. Distribuir requisito curricular con datos introducidos por el usuario 6. Editar distribución requisito curricular con datos introducidos por el usuario 7. Intentar editar distribución requisito curricular con total asignaturas distribuidas > mínimo asignaturas 8. Intentar editar requisito curricular con mínimo asignaturas < total asignaturas distribuidas Asignaturas 1. Crear asignatura con datos introducidos por el usuario 2. Registrar asignatura en plan de estudio con datos introducidos por el usuario 3. Activar asignatura principal 4. Intentar eliminar asignatura principal 5. Crear convalidación con datos introducidos por el usuario 6. Buscar asignatura 89 7. Registrar asignatura en opción profesional con datos introducidos por el usuario Opciones Profesionales/Verificación Requisitos Curriculares 1. Crear opción profesional con datos introducidos por el usuario 2. Registrar opción profesional en plan de estudio con datos introducidos por el usuario 3. Crear requisito curricular opción profesional con datos introducidos por el usuario 4. Intentar eliminar profesional con registros historial académico 5. Buscar estudiante predefinido 6. Validar requisitos curriculares de estudiante predefinido Luego de realizar las pruebas de aceptación, los trabajadores de la DCE respondieron una encuesta para evaluar los requerimientos funcionales y los requerimientos no funcionales del módulo web. A continuación se presenta el resultado de la encuesta realizada por los trabajadores de la DCE: 100% 100% 75% 100% 100% 0% 0% 0% 0% 0% 0% 0% 25% 0% 0% Accesibilidad Usabilidad Tolerancia a Fallos Interfaz de Usuario Agrupación de la Información Bueno Moderado Malo 90 Conclusiones El objetivo general de este Trabajo Especial de Grado es desarrollar un módulo web basado en tecnologías web, que permita gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias, así como automatizar el trabajo de verificación de requisitos curriculares del proceso de graduación realizado por la División de Control de Estudios (DCE). Se facilitaron las labores de los trabajadores del Departamento de Grado de la DCE mediante la automatización de la verificación de los requisitos curriculares de los estudiantes regulares de pregrado de la Facultad de Ciencias, delegando las labores monótonas al módulo web, permitiendo que los trabajadores se dediquen a labores más importantes. Además, los estudiantes de la Facultad de Ciencias pueden verificar los requisitos curriculares de su carrera y generar los documentos PDF relacionados, desde cualquier computadora que disponga de una conexión a internet. El sistema CONEST no contaba con una aplicación que permitiera gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias, este trabajo se realizaba manipulando directamente la base de datos del sistema CONEST. Esto representa un mayor esfuerzo humano, y requiere de una persona con conocimientos tecnológicos para realizar el trabajo sin comprometer la integridad de la base de datos. En este sentido, se simplificó y se redujo la carga de trabajo de los administradores de la DCE mediante la automatización de la gestión de los planes de estudio de las licenciaturas que ofrece la Facultad de Ciencias, estos se estudiaron para determinar las características comunes y las diferencias de cada plan de estudio, así como las validaciones y las relaciones entre las asignaturas y las opciones profesionales que los conforman. Al contar con las funcionalidades que ofrece el módulo web, los administradores de la DCE deben cumplir un perfil más general para gestionar los planes de estudio de las licenciaturas de la Facultad de Ciencias en el sistema CONEST. Se realizaron un conjunto de pruebas funcionales para verificar el correcto funcionamiento del módulo web con la participación de los tutores (que son usuarios finales del sistema). Además, se realizaron las pruebas de aceptación con los trabajadores de la DCE. Los resultados de estas pruebas fueron positivos, y los usuarios que participaron en las mismas mostraron interés en utilizar las funcionalidades del módulo web para realizar sus labores. El módulo web no se puso en producción con el resto del sistema CONEST, debido a los cambios realizados en las estructuras de datos durante el desarrollo de este proyecto. Estos cambios afectarían el funcionamiento del resto de los módulos del sistema CONEST sin una migración previa de la base de datos y la refactorización de la codificación. El módulo web para la gestión de planes de estudio en el sistema CONEST se desarrolló utilizando tecnologías web actuales, entre las cuales se destacan el lenguaje de programación Ruby y el 91 framework de desarrollo de aplicaciones web Rails. Esta experiencia fue muy enriquecedora ya que pude profundizar mis conocimientos previos del framework y mejorar mis habilidades para desarrollar aplicaciones web siguiendo las prácticas de programación recomendadas en las páginas de Ruby on Rails Guides y Rails on Rails Screencasts. Es importante resaltar que durante el proceso de desarrollo de este Trabajo Especial de Grado, se publicó una actualización importante del framework Rails (versión 3.1). Por este motivo, se actualizó el framework y se refactorizó el código del módulo web para cumplir con los estándares de programación de la nueva versión de Rails. Otro aspecto importante a tomar en cuenta, es la adaptación del método ágil XP implementado para estructurar, planificar y controlar el proceso de desarrollo del módulo web. Algunas prácticas del método ágil XP no se aplicaron en este proyecto tales como el desarrollo previamente probado, la programación en parejas, la propiedad colectiva y la integración continua. Sin embargo, se aplicaron el resto de las prácticas del método, lo cual facilitó la planificación y las entregas del proyecto, dividiendo los requerimientos en iteraciones, que se fueron desarrollando progresivamente según su prioridad. Finalmente, gracias al desarrollo de este Trabajo Especial de Grado se cumplieron satisfactoriamente los principales objetivos de este proyecto, logrando un aporte significativo al sistema CONEST, ya que hasta el momento no contaba con una aplicación que permitiera gestionar los planes de estudio de las distintas licenciaturas que ofrece la Facultad de Ciencias, así como verificar los requisitos curriculares de los estudiantes regulares de pregrado. 92 Recomendaciones A pesar de los beneficios que ahora pueden disfrutar los trabajadores de la DCE y los estudiantes de pregrado de la Facultad de Ciencias a través del módulo web para la gestión de planes de estudio en el sistema CONEST, se pueden considerar algunas mejoras y nuevas funcionalidades que permitan el mantenimiento preventivo y correctivo del sistema CONEST, como las que se mencionan a continuación:  Los planes de estudio están intrínsecamente relacionados con los procesos administrativos y las normativas académicas de las licenciaturas de la Facultad de Ciencias, por este motivo, se recomienda refactorizar el sistema CONEST para que soporte los cambios realizados en las estructuras de datos durante el desarrollo de este Trabajo Especial de Grado. Siendo el módulo de inscripción, uno de los más afectados ya que este debe determinar cuáles son las asignaturas que puede cursar un estudiante basándose en su avance en la carrera, considerando las prelaciones entre las asignaturas y el tipo principal de las asignaturas registradas múltiples veces en un mismo plan de estudio, ambas, características fundamentales desarrolladas en el módulo web para la gestión de planes de estudio en el sistema CONEST.  En el caso de las convalidaciones, los Consejos de Escuela de la Facultad de Ciencias aprueban las convalidaciones generales de las asignaturas que correspondan con su carrera, los trabajadores de la DCE no cuentan con un mecanismo para conocer las convalidaciones aprobadas por los distintos Consejos de Escuela, por este motivo, se recomienda desarrollar una aplicación que le permita a los trabajadores de la DCE conocer los detalles de las nuevas convalidaciones para registrarlas en el módulo web.  Con respecto a la verificación de requisitos curriculares, cada semestre se verifican los requisitos curriculares de los estudiantes que inscribieron TEG. Los trabajadores del Departamento de Grado de la DCE utilizan un documento impreso, para conocer cuáles son dichos estudiantes. Se recomienda desarrollar una aplicación que le permita a los trabajadores del Departamento de Grado consultar cuáles son los estudiantes que inscribieron TEG en el semestre actual, así como imprimir el historial académico y la verificación de requisitos curriculares correspondientes, en caso de ser necesario.  El componente docente es un convenio que existe con la Facultad de Humanidades y Educación que les permite a los estudiantes de las licenciaturas de Biología, Física, Matemática y Química optar por un título universitario de Licenciatura en Educación con una mención científica. Se recomienda crear los planes de estudio de los componentes docentes que ofrece la Facultad de Ciencias utilizando el módulo web para poder verificar los requisitos curriculares de los estudiantes inscritos en dichas carreras. 93 Referencias Bibliográficas Asierra. (14 de Junio de 2004). Desarrollo ágil de software - Wikipedia, la enciclopedia libre. Recuperado el 15 de Enero de 2011, de Wikipedia, la enciclopedia libre: http://es.wikipedia.org/wiki/Desarrollo_%C3%A1gil_de_software Beck, K. (2005). Extreme Programming Explained: Embrace Change. Boston: Pearson Education, Inc. Bos, B. (15 de Diciembre de 2005). CSS current work & how to participate. Recuperado el 20 de Diciembre de 2010, de World Wide Web Consortium (W3C): http://www.w3.org/Style/CSS/current-work.en.html Haml. (2011). #haml.about. Recuperado el 23 de Mayo de 2011, de #haml: http://haml-lang.com/ Hassani, K. (3 de Abril de 2005). Web application - Wikipedia, the free encyclopedia. Recuperado el 18 de Enero de 2011, de http://en.wikipedia.org/wiki/Web_application Hickson, I. (19 de Octubre de 2010). HTML5. Recuperado el 20 de Diciembre de 2010, de World Wide Web Consortium (W3C): http://dev.w3.org/html5/spec/Overview.html Obfusco, F. (24 de Noviembre de 2003). MySQL - Wikipedia, the free encyclopedia. Recuperado el 20 de Diciembre de 2010, de Wikipedia, the free encyclopedia: http://en.wikipedia.org/wiki/MySQL Patrick. (27 de Julio de 2004). Hypertext Transfer Protocol - Wikipedia, the free encyclopedia. Recuperado el 20 de Diciembre de 2010, de Wikipedia, the free encyclopedia: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol Ruby on Rails. (2011). http://rubyonrails.org/documentation. Recuperado el 20 de Diciembre de 2010, de http://rubyonrails.org: http://rubyonrails.org/documentation Sass. (2011). Sass - Syntactically Awesome Stylesheets. Recuperado el 23 de Mayo de 2011, de Sass - Syntactically Awesome Stylesheets: http://sass-lang.com/about.html Teruel, A. (20 de Septiembre de 2000). Justificaciones del diseño de Delta Pensum 1.x: Las clases Pensum, Calendario Curricular. Recuperado el 22 de Febrero de 2010, de http://www.ldc.usb.ve/~teruel/ci4712/dp/dp1x/whyPensum.html The jQuery Project. (2010). Main Page - jQuery JavaScript Library. Recuperado el 20 de Diciembre de 2010, de jQuery: The Write Less, Do More, JavaScript Library: http://docs.jquery.com/Main_Page 94 Anexo I: Editar Plan de Estudio 95 Anexo II: Crear Requisito Curricular 96 Anexo III: Editar Asignatura