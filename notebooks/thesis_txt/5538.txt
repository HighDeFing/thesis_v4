TESIS_Garcia_Riverox UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela. Trabajo especial de grado presentado ante la ilustre Universidad Central de Venezuela por Br. Lorena Rivero. Br. Jonathan García. Para optar al título de Licenciado en Computación Tutora: Profa. Mercy Ospina Octubre 2013 Pág - ii ACTA Quienes suscriben, miembros del jurado designado por el Consejo de la Escuela de Computación, para examinar el Trabajo Especial de Grado titulado “Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela.” y presentado por los Bachilleres Lorena Elisa Rivero Perdomo C.I: 19064474 y Jonathan Eduardo García Laguado C.I: 17160622, a los fines de optar al título de Licenciado en Computación, dejamos constancia de lo siguiente: Leído como fue dicho trabajo, por cada uno de los miembros del jurado, se fijó el día 25 de octubre de 2013 a las 3:00pm horas, para que los autores lo defendieran en forma pública, lo que estos hicieron en la Sala 01 de la Escuela de Computación, mediante una presentación oral de su contenido, luego de lo cual respondieron a las preguntas formuladas. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobar con la nota de ____ puntos. En fe de lo cual se levanta la presente Acta, en Caracas el día ___ de octubre de 2013 ___________________________________ Profa. Mercy Ospina Torres (Tutora) _________________________ _____________________ Prof. Robinson Rivas Profa. Claudia León (Jurado) (Jurado) Pág - iii Agradecimientos y dedicatorias A mis padres Elda y Jesus por educarme y guiarme por el camino correcto. A la ilustre Universidad Central de Venezuela por permitirme desarrollar esta carrera universitaria. A mi profesores que me enseñaron y formaron a lo largo de este periplo académico, en especial a la profesora Yusneyi Carballo que siempre estuvo allí cuando la necesité. A mi tu tutora Mercy Ospina que me guió en la realización de este trabajo. A mi compañera Lorena Rivero, con quien formé un gran equipo que nos permitió desarrollar con éxito este trabajo especial de grado. A mi novia por su apoyo y comprensión durante el tiempo invertido en esta tesis. A mis amigos, con quien compartí horas de estudios y vivencias a lo largo de mi estadía en la universidad. Jonathan García Pág - iv Agradecimientos y dedicatorias El éxito es cuando la inversión en tus metas da frutos… Quiero agradecer a todas aquellas personas que de alguna manera estuvieron a mi lado en mi vida universitaria. Amigos y compañeros con los que me formé y que hoy en día comparten la misma experiencia que yo. A todos aquellos amigos cercanos que supieron expresar sus buenos deseos hacia mi éxito que hasta su laptop me prestaron. A mi mejor amigo, mi novio y mi futuro colega Francisco, quien me brindó su apoyo incondicional cuando más lo necesite. Muchas gracias a la Ilustre Universidad Central de Venezuela por todo el conocimiento, principios y valores que me inculcó. A mi tutora Mercy y demás profesores que son ejemplos a seguir y que siguen luchando porque el conocimiento llegue a mentes brillantes y enseñar a sus alumnos a ser grandes profesionales y luchar por un mejor futuro. Pero hoy más que nunca les agradezco y les dedico mi trabajo y esfuerzo a mis padres Elda, Alberto y Olga y a mi hermana Vanessa que me han enseñado todo lo que sé y que han sido el mejor ejemplo de cuando querer es poder. Lorena Rivero Pág - v Resumen El patrimonio cultural define a los pueblos y representa su herencia histórica, por lo cual es importante su preservación. El patrimonio cultural se ha clasificado como tangible (obras materiales) o intangible (generación y transmisión de conocimiento, costumbres, etc.), dentro de este último se define el patrimonio digital como aquel que ha sido originado de manera digital y abarca recursos como contenido Web, bases de datos, libros digitales, material multimedia, grabaciones, programas informáticos, entre otros. Entre éstos se tienen las paginas Web que se diferencian de cualquier otro tipo de recurso digital por su naturaleza cambiante y su estructura de hiperenlaces, por lo que su preservación tiene características propias y retos que deben ser abarcados por los Archivos Web, los cuales son sistemas de información cuya finalidad es la preservación histórica de estos recursos conocidos como patrimonio Web. El presente Trabajo Especial de Grado propone la implementación de los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la salvaguarda de contenido cultural, educativo y que en general sea significativo para la herencia cultural de Venezuela. Para la adquisición del contenido se adoptó una estrategia de archivado del lado del cliente utilizando como herramienta el rastreador Heritrix. El contenido recuperado por el rastreador se almacena en contenedores Web que usan un formato para Archivos Web denominado WARC, los cuales son indexados utilizando la plataforma de búsqueda Solr. Para el almacenamiento se adoptó una estrategia de archivado con servidor Web, lo que significa almacenar la respuesta que proporciona el servidor Web del sitio a cosechar. Además se implementaron dos aplicaciones en Ruby on Rails una de ellas para administrar los trabajos de rastreos, y la otra para la búsqueda y visualización de métricas de los contenidos almacenados. Palabras clave: Archivo Web, preservación Web, WARC, cosecha, almacenamiento, rastreo, Heritrix, indexación, Solr. Pág - vi Tabla de Contenido AGRADECIMIENTOS Y DEDICATORIAS.......................................................................................III RESUMEN............................................................................................................................................. V ÍNDICE DE FIGURAS ......................................................................................................................VIII ÍNDICE DE TABLAS......................................................................................................................... XII INTRODUCCIÓN ............................................................................................................................. XIV CAPÍTULO I PLANTEAMIENTO DEL PROBLEMA ....................................................................... 1 JUSTIFICACIÓN .................................................................................................................................................................. 4 OBJETIVOS GENERALES: ................................................................................................................................................ 5 OBJETIVOS ESPECÍFICOS: ............................................................................................................................................... 5 ALCANCE ............................................................................................................................................................................ 6 2.1 PRESERVACIÓN WEB............................................................................................................................................... 7 2.2 MODELO OAIS.......................................................................................................................................................10 2 .3 ADQUISICIÓN ..........................................................................................................................................................18 2.4ALMACENAMIENTO.................................................................................................................................................21 2.5 INDEXACIÓN Y MOTORES DE BÚSQUEDA. ........................................................................................................24 2.6 FORMATOS DE DOCUMENTOS PARA ALMACENAMIENTO ............................................................................25 2.7 HERRAMIENTAS UTILIZADAS PARA LLEVAR A CABO LA PRESERVACIÓN WEB ........................................29 2.7.1. Heritrix .........................................................................................................................................................29 2.7.2 Solr...................................................................................................................................................................35 2.7.3 WARCTools ..................................................................................................................................................38 2.7.4 REST (Representational State Transfer) .......................................................................................39 2.8 RESUMEN DE USO DE MÉTODOS Y HERRAMIENTAS .......................................................................................39 2.9 ESTADO DEL ARTE..................................................................................................................................................41 CAPÍTULO III MARCO METODOLÓGICO .................................................................................... 47 3.1 METODOLOGÍA DE DESARROLLO DE SOFTWARE ...........................................................................................47 3.2 METODOLOGÍA AUP .............................................................................................................................................48 3.2.1 Disciplinas o Iteraciones........................................................................................................................48 3.2.2 Fases................................................................................................................................................................49 3.2.3 Entrega de versiones incrementales en el tiempo .....................................................................51 3.3 ARQUITECTURA DE SOFTWARE BASADA EN COMPONENTES.......................................................................51 CAPÍTULO IV DESARROLLO DE LA APLICACIÓN ..................................................................... 55 4.1 OBJETIVO DE LA APLICACIÓN ..............................................................................................................................55 4.2 METAS DE LA APLICACIÓN ...................................................................................................................................55 4.3 ALCANCE DE LA APLICACIÓN ...............................................................................................................................55 4.4 ADAPTACIÓN DE LA METODOLOGÍA AUP USANDO UNA ARQUITECTURA DE SOFTWARE BASADA EN COMPONENTES ................................................................................................................................................................................56 4.4 1 Fase de Inicio .............................................................................................................................................56 4.4.2 Fase de Elaboración.................................................................................................................................59 Pág - vii 4.4.3 Fase de Construcción............................................................................................................................ 101 4.4.4 Fase de transición.................................................................................................................................. 116 CONCLUSIONES ..............................................................................................................................134 RECOMENDACIONES.....................................................................................................................136 BIBLIOGRAFÍA ...............................................................................................................................137 ANEXO A INSTALACIÓN DE HERITRIX VERSIÓN 3.1.1........................................................141 ANEXO B INSTALACIÓN DE DEVISE ..........................................................................................144 ANEXO C INSTALACIÓN Y CONFIGURACIÓN DE SOLR..........................................................147 ANEXO D INSTALACIÓN Y CONFIGURACIÓN DE WARCTOOLS. .........................................149 Pág - viii Índice de Figuras Figura 1. Países que hospedan iniciativas de preservación Web [16] ............................................. 2 Figura 2. Ambiente OAIS ................................................................................................................................. 11 Figura 3. Modelo de Referencia OAIS ......................................................................................................... 12 Figura 4. Obtención de la información de los datos, traducido de [19] ........................................ 13 Figura 5. Paquete de Información, traducido de [19] .......................................................................... 14 Figura 6. Flujo de datos de un OAIS, traducido de [19]....................................................................... 15 Figura 7. El modelo de Modelo de referencia OAIS............................................................................... 16 Figura 8. Arquitectura funcional propuesta por la IIPC, basada en el modelo OAIS [2] ....... 17 Figura 9. Archivado del lado del cliente .................................................................................................... 20 Figura 10. Primera línea de un rastreo, traducido de [2] ................................................................... 21 Figura 11. Archivado con Servidor Web [2]. ........................................................................................... 23 Figura 12. Ejemplo de un Archivo WARC [7] .......................................................................................... 26 Figura 13. Encabezado WARC [7]. ............................................................................................................... 28 Figura 14. Arquitectura de Heritrix [26]................................................................................................... 31 Figura 15. Configuración de una semilla................................................................................................... 34 Figura 16. Índice Directo e Invertido [39]................................................................................................ 35 Figura 17. Arquitectura de Solr [38]........................................................................................................... 37 Figura 18. Resumen de métodos y herramientas de adquisición usadas por iniciativas de preservación web a nivel mundial [30]..................................................................................................... 40 Figura 19. Resumen de métodos y estándares de almacenamiento usados por iniciativas de preservación web a nivel mundial [30]..................................................................................................... 40 Figura 20. Resumen de indizadores usados por las iniciativas de preservación Web a nivek mundial [30]. ....................................................................................................................................................... 41 Figura 21. Portuguese Web Archive .......................................................................................................... 43 Figura 22. Library of Congress...................................................................................................................... 44 Figura 23. UK Web Archive ............................................................................................................................ 46 Figura 24. Ciclo de vida de Ágil UP [31]. ................................................................................................... 48 Figura 25. Componente de software........................................................................................................... 51 Figura 26. Arquitectura inicial del prototipo a implementar ........................................................... 58 Figura 27. Prototipo de interfaz Registrarse........................................................................................... 60 Figura 28. Prototipo de interfaz Iniciar Sesión....................................................................................... 61 Figura 29. Prototipo de interfaz Lista de solicitudes de rastreo ..................................................... 61 Figura 30. Prototipo de interfaz Solicitud de rastreo .......................................................................... 62 Figura 31. Prototipo de interfaz Editar solicitud de rastreo ............................................................. 63 Figura 32. Ver versiones de un rastreo ..................................................................................................... 63 Pág - ix Figura 33. Hacer búsqueda por URL........................................................................................................... 64 Figura 34. Lista contenedores disponibles .............................................................................................. 64 Figura 35. Listar métricas de adquisición ................................................................................................ 65 Figura 36. Listar métricas del contenedor ............................................................................................... 66 Figura 37. Diagrama de componentes módulo de adquisición ........................................................ 67 Figura 38 Diagrama de componentes módulo de gestión de almacenamiento......................... 68 Figura 39. Diagrama de componentes del prototipo de preservación web ................................ 69 Figura 40. Diagrama de actividades Crear rastreo ............................................................................... 70 Figura 41. Diagrama de actividades Generar rastreo .......................................................................... 71 Figura 42 Diagrama de actividades Verificar fin de rastreo.............................................................. 72 Figura 43. Diagrama de Actividades Generador de Índices............................................................... 73 Figura 44. Diagrama de actividades módulo de almacenamiento .................................................. 74 Figura 45. Diagrama de casos de uso módulo de adquisición .......................................................... 75 Figura 46. Diagrama de casos de uso módulo de almacenamiento................................................ 86 Figura 47. Diagrama de secuencia Registrar Usuario.......................................................................... 91 Figura 48. Diagrama de secuencia Iniciar Sesión .................................................................................. 92 Figura 49. Diagrama de secuencia Recuperar Contraseña ................................................................ 92 Figura 50. Diagrama de secuencia Cambiar Contraseña .................................................................... 93 Figura 51. Diagrama de secuencia Consultar lista de solicitudes de rastreos............................ 93 Figura 52. Diagrama de secuencia Crear Solicitud de Rastreo......................................................... 94 Figura 53. Diagrama de secuencia Editar Solicitud de Rastreo ....................................................... 94 Figura 54. Diagrama de secuencia Desactivar Solicitud de rastreo................................................ 95 Figura 55. Diagrama de secuencia Generar Rastreo............................................................................. 95 Figura 56. Diagrama de secuencia Verificar Fin de Rastreo.............................................................. 96 Figura 57. Diagrama de secuencia Consultar Versiones de Solicitud de Rastreo ..................... 96 Figura 58. Diagrama de secuencia Indexar Sitios Rastreados .......................................................... 97 Figura 59. Diagrama de secuencia Almacenar Métricas ..................................................................... 98 Figura 60. Diagrama de secuencia hacer Búsqueda por URL ........................................................... 98 Figura 61. Diagrama de secuencia Listar métricas del contenedor................................................ 99 Figura 62. Diagrama de secuencia Listar métricas de Adquisición ................................................ 99 Figura 63. Diagrama de secuencia Listar métricas del contenedor..............................................100 Figura 64. Modelo relacional de la base de datos utilizada en la aplicación............................101 Figura 65. Formulario para creación de rastreos................................................................................102 Figura 66. Formulario para la edición de rastreos..............................................................................103 Figura 67. Código del Modelo Rastreo ....................................................................................................103 Figura 68. Edición del archivo de configuración del rastreo ..........................................................104 Figura 69 Agregar solicitud del rastreo al crontab............................................................................105 Figura 70. Versiones de un rastreo ...........................................................................................................105 Pág - x Figura 71. Generar rastreo ...........................................................................................................................106 Figura 72. Invocación de script para inserción en base de datos..................................................106 Figura 73. Script insert_database.sh.........................................................................................................106 Figura 74. Ejemplo de archivo rastreos_activos.txt............................................................................107 Figura 75. Verificados de rastreos finalizados......................................................................................108 Figura 76. Script udpate_version.sh..........................................................................................................108 Figura 77. Listado de contenedores Disponibles.................................................................................109 Figura 78. Tabla de Métricas de Adquisición de un contenedor. .................................................110 Figura 79. Métricas de un contenedor WARC .......................................................................................111 Figura 80. Ejemplo formato Archivo de rastreos por indexar.......................................................112 Figura 81. Código Shell script Procesar Archivo..................................................................................113 Figura 82. Archivo resultado de la ejecución de la herramienta WARCTools........................114 Figura 83. Código Shell Script para Almacenar Métricas del contenedor..................................115 Figura 84. Validación de datos de entrada. ............................................................................................118 Figura 85. Job creado exitosamente..........................................................................................................119 Figura 86. Semilla en el archivo de configuración del job................................................................119 Figura 87. Solicitud de rastreo almacenada en el crontab...............................................................120 Figura 88. Rastreo colocado en ejecución ..............................................................................................121 Figura 89. Rastreos finalizados...................................................................................................................122 Figura 90. Rastreos por indexer................................................................................................................122 Figura 91. XML de Indexación de contenedores rastreados por Solr. .........................................124 Figura 92. Salida estándar de los estados de indexación del Generador de Índices..............125 Figura 93. Consulta de tiempos de indexación de la plataforma Solr..........................................126 Figura 94. Consultando la cantidad de líneas en el archivo y registros en Base de Datos. .127 Figura 95. Lista de contenedores indexados. ........................................................................................128 Figura 96. Tiempos de Indexación por contenedor............................................................................128 Figura 97. KB/seg dependiendo del peso del contenedor. ..............................................................133 Figura 98. Descomprimir Heritrix .............................................................................................................141 Figura 99. Heritrix permisos .......................................................................................................................141 Figura 100. Comando para ejecutar Heritrix ........................................................................................141 Figura 101. Crear Job......................................................................................................................................142 Figura 102. Construir Job..............................................................................................................................142 Figura 103. Lanzar Job ...................................................................................................................................143 Figura 104. Despausar job............................................................................................................................143 Figura 105. Gem devise..................................................................................................................................144 Figura 106. Comando bundle install.........................................................................................................144 Figura 107. Instalar devise...........................................................................................................................144 Figura 108. Configurar correo ....................................................................................................................145 Pág - xi Figura 109. Generar modelo ........................................................................................................................145 Figura 110. Modelo User ...............................................................................................................................145 Figura 111. Migración ....................................................................................................................................146 Figura 112. Comando rake ...........................................................................................................................146 Figura 113. Solr configurar ubicación de la data ................................................................................147 Figura 114. Solr Crear contexto..................................................................................................................147 Figura 115. Página Principal de Administración. ................................................................................148 Figura 116. Archivo schema.xml de configuración de Solr..............................................................148 Pág - xii Índice de Tablas Tabla 1. Caso de uso Registrar Usuario ..................................................................................................... 75 Tabla 2. Caso de uso Iniciar Sesión ............................................................................................................. 76 Tabla 3. Caso de uso Cambiar Contraseña................................................................................................ 77 Tabla 4. Caso de uso Recuperar Contraseña............................................................................................ 78 Tabla 5. Caso de uso Consultar lista de solicitudes de rastreo......................................................... 79 Tabla 6. Caso de uso Crear solicitud de rastreo ..................................................................................... 80 Tabla 7. Caso de uso Editar Solicitud de rastreo.................................................................................... 81 Tabla 8. Caso de uso Desactivar solicitud de rastreo ........................................................................... 82 Tabla 9. Caso de uso Generar rastreo......................................................................................................... 83 Tabla 10. Caso de uso Verificar Fin de Rastreos .................................................................................... 84 Tabla 11. Caso de uso Consultar Versiones de una Solicitud de Rastreo ..................................... 84 Tabla 12. Caso de uso Indexar Sitios Cosechados ................................................................................. 87 Tabla 13. Caso de uso Almacenar Métricas.............................................................................................. 87 Tabla 14. Caso de uso Hacer Búsqueda por URL ................................................................................... 88 Tabla 15. Caso de uso Listar Contenedores Disponibles .................................................................... 89 Tabla 16. Caso de uso Listar Métricas del Contenedor........................................................................ 89 Tabla 17. Caso de uso Listar Métricas de Adquisición........................................................................ 90 Tabla 18. Prueba Validación de datos de entrada ...............................................................................117 Tabla 19. Prueba creación de job y su archivo de configuración .................................................118 Tabla 20. Prueba colocación de rastreo en ejecución........................................................................120 Tabla 21. Prueba verificar rastreos finalizados ...................................................................................121 Tabla 22. Prueba verificar Indexar Sitios rastreados.........................................................................123 Tabla 23. Prueba verificar Tiempos de Indexación ............................................................................125 Tabla 24. Prueba Verificar Métricas recolectadas..............................................................................126 Tabla 25. Prueba verificar procesos y métricas de Indexación......................................................127 Tabla 26. Duración de rastreo por peso de contenedores asociado a la URL www.fmn.gob.ve .................................................................................................................................................................................129 Tabla 27. Duración de rastreo por peso de contenedores asociado a la URL www.ivic.gob.ve .................................................................................................................................................................................129 Tabla 28. Duración de rastreo por peso de contenedores asociado a la URL www.luz.edu.ve .................................................................................................................................................................................130 Tabla 29. Duración de rastreo por peso de contenedores asociado a la URLwww.mcti.gob.ve .................................................................................................................................................................................130 Tabla 30. Duración de rastreo por peso de contenedores asociado a la URL www.pdvsalaestancia.com...........................................................................................................................130 Tabla 31. Duración de rastreo por peso de contenedores asociado a la URL www.uc.edu.ve Pág - xiii .................................................................................................................................................................................131 Tabla 32. Duración de rastreo por peso de contenedores asociado a la URL www.ucv.ve.131 Tabla 33. Duración de rastreo por peso de contenedores asociado a la URL www.udo.edu.ve .................................................................................................................................................................................131 Tabla 34. Duración de rastreo por peso de contenedores asociado a la URL www.ula.ve..132 Tabla 35. Duración de rastreo por peso de contenedores asociado a la URL www.usb.ve.132 Introducción Pág - xiv Introducción El patrimonio cultural es la herencia cultural propia del pasado de una comunidad, con la cual viven y que se transmite a la generaciones presentes y futuras [3], este patrimonio puede ser tanto tangible (objetos arqueológicos, artísticos, religiosos, entre otros) como intangible (costumbres, tradiciones, conocimiento científico, entre otros). En este último entraría la categoría de patrimonio digital, el cual está en formato digital y abarca muchos ámbitos como páginas Web, material multimedia, grabaciones, programas informáticos, entre otros. Dentro del patrimonio digital se puede resaltar aquel publicado en la Web, denominado patrimonio Web, el cual ha tomado una gran relevancia debido a que se ha convertido en una valiosa fuente de información, pero que tiene una naturaleza inestable y efímera, por lo que no hay garantía de que un contenido que hoy se encuentre en línea se mantenga a través del tiempo, esto hace imprescindible que se busquen mecanismos para la preservación del patrimonio Web. La preservación del patrimonio Web o preservación Web es un tema que se ha venido desarrollando de manera amplia en los últimos años debido a que en la Web se encuentra publicada información relevante para la historia, investigación científica y otras ramas del saber, este contenido puede ser útil en la actualidad y en el futuro tanto para consultas informativas como para realizar trabajos de investigación, para evitar que esta información se pierda es necesaria su preservación. Lograr la preservación es posible mediante ambientes seguros e independientes a los servidores originales, llamados Archivos Web. Algunos países han creado iniciativas de preservación Web que en su mayoría son locales (abarcan dominios de una región o país específico), y algunos pocos casos que preservan contenido distinto al del país de origen o por demanda de países y organizaciones como es el caso del Internet Archive [11]. El surgimiento de estas iniciativas locales se fundamenta en el interés de cada país en preservar sus documentos y en la necesidad de limitar el ámbito de preservación debido al hecho que un archivado de toda la Web se considera prácticamente inviable por el tamaño y crecimiento continuo de esta, ya que se requeriría gran cantidad de recursos de procesamiento y almacenamiento para llevarlo a cabo. Sin embargo, organizaciones como la “International Internet Preservation Consortium” (IIPC) [27], están realizando esfuerzos para la estandarización e integración de los Archivos Web con el objetivo que este conjunto de iniciativas locales puedan formar Introducción Pág - xv a futuro un Archivo Web global distribuido, fomentando el desarrollo y uso de herramientas comunes, técnicas y normas que permitan la creación de Archivos Web internacionales. El presente trabajo especial de grado propone el desarrollo e implementación de los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la preservación de sitios Web de Venezuela, basados en estándares y usando tecnología de software libre. Este documento está divido en 4 capítulos , en el capítulo I se hace el planteamiento del problema donde se describe la problemática general asociada a la preservación Web y los problemas específicos que esta investigación considera para dar solución, además se justifica y se delimita el alcance de este trabajo especial de grado. En el capítulo II se encuentra el marco teórico donde se realiza la explicación de los distintos conceptos que permiten comprender la investigación. En el capítulo III se describe la metodología de desarrollo AUP (Proceso Unificado Ágil, Agile Unified Process). En el capítulo IV se detallan todos los aspectos concernientes al desarrollo de la aplicación. Por último se dan las conclusiones y recomendaciones a tomar en consideración para futuras extensiones de este proyecto. Capítulo I Planteamiento del Problema Pág - 1 Capítulo I Planteamiento del problema La “World Wide Web”, (la Web) es un medio omnipresente y efímero donde cada vez en mayor grado se almacenan recursos educativo, científicos, artísticos, investigativos, entre otros, que son frutos del saber o de la expresión de los seres humanos. Muchos de estos recursos sólo se encuentran en formato Web y para existir dependen del servidor Web donde están alojados, por lo que en cualquier momento pueden dejar de estar disponibles en línea, ya sea porque el propietario del sitio decidió eliminarlos o cambiarlos de ubicación. Para que el conocimiento asociado a este recurso no se pierda es necesaria su preservación, la cual puede ser considerada una necesidad cultural e histórica, para poder poner este conocimiento a disposición de presentes y futuras generaciones. La Web tiene características particulares que obligan a adaptar al caso las prácticas tradicionales de conservación de patrimonio cultural para poder ser usadas, por ello es necesario contar con técnicas, políticas y la infraestructura adecuada a la naturaleza de los recursos Web para poder llevar a cabo la preservación. El tamaño de la información publicada en la Web ha ido creciendo con el pasar de los años, y las facilidades que brinda la Internet para publicar información permite que sea probable que cada día estos números se encuentren en aumento, el hecho de ser un medio de publicación tan difundido da pie a que tome una gran relevancia. Sin embargo, la persistencia de la información almacenada en la Web no está garantizada, de hecho es todo lo contrario, las páginas son realmente efímeras debido a la obsolescencia, la modificación accidental, o la actualización o eliminación por parte del autor. Estudios han demostrado que alrededor del 80% de las páginas son actualizadas o desaparecen luego de 1 año [16]. La UNESCO (La Organización de las Naciones Unidas para la Educación, la Ciencia y la Cultura) ha venido revisando las limitantes que afectan la preservación, con objeto de definir una norma que guíe los esfuerzos de preservación en la era digital, en su 31º reunión se aprueba la resolución para comenzar con una campaña internacional para salvaguardar la memoria digital en peligro de desaparición [1]. Tomando conciencia de la importancia de preservar la Web, muchos países se han esforzado en desarrollar lo que se ha denominado iniciativas de preservación Web cuyo objetivo es preservar la Web de sus propios países, aunque algunas tienen un alcance mayor. En el portal de la International Internet Preservation Consortium (IIPC) están reseñadas las iniciativas de los países miembros que han construido sus Archivos Digitales. Capítulo I Planteamiento del Problema Pág - 2 Figura 1. Países que hospedan iniciativas de preservación Web [16] En la Figura 1 se puede apreciar los países que han realizado iniciativas para la preservación Web oficiales, este estudio fue realizado por Gomes, Miranda y Costa [16] y actualizado por Ospina Torres y León Luna [30]. Como se puede observar en la Figura 1 no se encontró información sobre alguna iniciativa oficial que realice la preservación de la Web de Venezuela sin embargo existe una investigación [42] donde se describen los lineamientos para la construcción de un archivo histórico de la información digital producida en Venezuela. Debido a que no existe una iniciativa oficial, en este trabajo especial de grado se plantea desarrollar los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la preservación de páginas Web de Venezuela, enmarcadas en el proyecto PI-03-8139-2011/P financiado por el Consejo de Desarrollo Científico y Humanístico (CDCH). Existen múltiples enfoques y técnicas para adquirir y almacenar el contenido que se quiere preservar, por lo que es necesario analizar cada una de ellas para poder determinar cuáles son más adecuadas a las necesidades del prototipo de preservación que se quiere construir. Así mismo como parte del diseño de los módulos se estudiaron y seleccionaron Capítulo I Planteamiento del Problema Pág - 3 herramientas desarrolladas y/o aprobadas por organismos como la Internet Archive o la IIPC. Para el uso efectivo de estas herramientas es indispensable tener conocimientos técnicos de las mismas, además su integración y configuración pueden llegar a ser muy complejas, por lo que parte del objetivo del desarrollo de estos módulos es lograr una integración transparente al usuario final y facilitar la configuración por medio de interfaces para cada una de las funciones y que a su vez se puedan visualizar los resultados de llevar a cabo las tareas asociadas a dichas funciones, consideradas métricas del Archivo Web. Capítulo I Planteamiento del Problema Pág - 4 Justificación Al lograr la preservación Web se estaría garantizando la disponibilidad del contenido que en caso de dejar de estar en línea pueda ser utilizado en investigaciones presentes y futuras, así como para consultas de carácter informativo, logrando así que la persistencia de contenido de interés no se vea afectada por las características inestables de la web en cuanto a lo efímero que puede llegar a ser una publicación. El desarrollo del prototipo de preservación Web planteado en este trabajo especial de grado está enfocado específicamente a la salvaguarda de sitios Web de Venezuela, de páginas que contengan aspectos históricos, culturales, sociales, entre otros. Para llevar a cabo la adquisición y el almacenamiento de sitios Web es necesario tener conocimientos técnicos de las herramientas utilizadas, el módulo de adquisición planteado en este proyecto, permite que los usuarios puedan configurar y controlar la tarea de adquisición y ver métricas de los rastreos ocultando la complejidad inherente a esta tarea, a través de una aplicación Web que permite suscribir solicitudes de rastreo de sitios Web. Para el módulo de gestión de almacenamiento, el sistema es quien se encarga de indexar los contenedores a través de tareas programadas regularmente. El usuario podrá consultar la URL de su preferencia y poder ver un listado de las distintas versiones que fueron rastreadas y visualizar de una manera sencilla las métricas correspondientes a cada contenedor sin necesidad de tener conocimientos sobre el uso de las herramientas para lograr esta tarea, cabe destacar que las métricas se almacenan en distintas ubicaciones y formatos. Capítulo I Planteamiento del Problema Pág - 5 Objetivos Generales: Desarrollar e implementar los módulos de adquisición y gestión de almacenamiento de sitios Web para un prototipo de archivo Web. Objetivos Específicos: 1. Implementación de la arquitectura básica del prototipo de archivo Web usando como base la arquitectura propuesta por Ospina y León [30] y el modelo de referencia de la IIPC (International Internet Preservation Consortium) 2. Adaptar el método de desarrollo AUP( Agile Unified Process )en una arquitectura basada en componentes 3. Desarrollar el módulo de adquisición usando el método de adquisición del lado del cliente 4. Desarrollar el módulo de gestión de almacenamiento de archivos WARC. 5. Determinar y almacenar métricas de adquisición y almacenamiento. 6. Realizar pruebas de conformidad. Capítulo I Planteamiento del Problema Pág - 6 Alcance Este trabajo especial de grado propone la creación de los módulos de adquisición y de gestión de almacenamiento de un prototipo para realizar el archivado de sitios Web de Venezuela, y hacer disponibles al módulo de acceso los contenidos preservados, el cual no forma parte de este trabajo. Al momento de hacer la adquisición del contenido se toma en cuenta la frecuencia de rastreo configurada por el usuario por lo que no se contempla duplicidad de contenido. Dentro del alcance de este Trabajo Especial de Grado se contempla ubicar las métricas relevantes recolectadas durante la adquisición y el almacenamiento del contenido con el fin de mostrarlas dentro de la aplicación de Consulta, cabe destacar que se hará análisis sobre algunas de estas métricas. En el desarrollo del protototipo se utilizaron y configuraron componentes existentes, que fueron integrados con componentes desarrollados con la finalidad de lograr la automatización del proceso de rastreo y la indexación del contenido rastreado. Capítulo II Marco Conceptual Pág - 7 Capítulo II Marco Conceptual En este capítulo se describen los conceptos que permiten entender el trabajo realizado. 2.1 Preservación Web La preservación Web puede definirse como el proceso de recolectar información disponible en la World Wide Web, almacenarla en un formato de archivo, y garantizar que el contenido pueda ser consultado posteriormente [27]. A continuación se definirá el patrimonio Web, como se puede preservar y la problemática asociada a la preservación de este tipo de recursos. 2.1.1 Patrimonio Web El patrimonio cultural puede ser considerado como la herencia cultural propia del pasado de una comunidad, con la que ésta vive en la actualidad y que transmite a las generaciones presentes y futuras [1]. La UNESCO ha clasificado el patrimonio en tangible (objetos arqueológicos, históricos, artísticos, etnográficos, entre otros) e intangible (Expresiones y prácticas culturales, constituido, entre otros elementos, por la poesía, los ritos, los modos de vida, investigación científica) Una vertiente moderna del patrimonio es aquella que no sólo toma en cuenta las memorias pasada sino también los testimonios presentes, lo cuales se almacenan cada vez más en formato digital. Estos objetos digitales pueden ser textos, bases de datos, imágenes fijas o en movimiento, grabaciones sonoras, material gráfico, programas informáticos o páginas Web. El patrimonio Web es un subconjunto del patrimonio digital, incluye a los documentos Web así como los elementos que la constituyen (hojas de estilo, imágenes, scripts). Para preservar este tipo de patrimonio hay que contar con técnicas y la infraestructura adecuada. El patrimonio Web y en general el patrimonio digital tiene problemas asociados a su preservación, estos problemas no son sólo de carácter técnico sino que también tienen dimensiones sociales y de organización, por esta razón la UNESCO se interesó, ya que entre sus objetivos tiene el fomentar y permitir la preservación del patrimonio cultural, Capítulo II Marco Conceptual Pág - 8 científico e informativo de los pueblos del mundo. La UNESCO ha elaborado una estrategia para promover la preservación digital, que se articula en torno a: • Un amplio proceso de consultas con los gobiernos, responsables de la formulación de políticas, productores de información, instituciones y expertos encargados del patrimonio, fabricantes de programas informáticos y organismos de normalización. • La difusión de directrices técnicas. • La ejecución de proyectos piloto. • La preparación de un proyecto de carta para la preservación del patrimonio digital, que se someterá a la aprobación de la Conferencia General en su 32ª reunión. 2.1.2. Cómo preservar la Web La preservación Web, conocida también como Web Archiving es el proceso de coleccionar parte del patrimonio Web y asegurar que esta colección sea preservada para futuras consultas e investigaciones. Esta preservación debe garantizar que el contenido pueda ser reproducido similar a como funcionaba en su entorno operativo, por ello el conjunto de páginas seleccionadas para ser conservadas son mantenidas completas, es decir, acompañadas de imágenes, formatos de archivos, gráficas, entre otros. Los lugares donde se realiza la preservación y se guardan los contenidos se denominan Archivos de la Web o Archivos Web. Para llevar a cabo la preservación web hay que llevar a cabo las siguientes tareas: • Selección: Como cualquier otro material que quiera ser preservado es necesario definir un criterio de selección, por ejemplo bibliotecas nacionales pueden centrarse en preservar páginas que traten sobre herencia cultural, las universidades pueden centrarse en coleccionar sitios web que estén orientados a la investigación o aspectos educativos, los criterios de selección se adaptan a las necesidades de la organización encargada de llevar a cabo la preservación. • Adquisición: Los sitios web son recuperados utilizando un software para descargar imágenes, documentos, archivos HTML y otros archivos necesarios para reproducir fielmente el sitios web tal cual se veía en el momento en que fue capturado, este software también se encarga de coleccionar metadata asociada al proceso de recolección. Capítulo II Marco Conceptual Pág - 9 • Almacenamiento e indexación: La preservación web tiene entre sus objetivos preservar el contenido cosechado sin que sufra modificaciones. Para lograr esta meta las herramientas, estándares, políticas y mejores prácticas deben estar presentes en el lugar que se encargará de la gestión de los archivos web a través del tiempo. En este aspecto, también se contemplan las medidas a utilizar para facilitar la posterior búsqueda del contenido preservado. • Acceso: Los archivos web requieren herramientas de software especiales para su uso, los usuarios pueden ver los sitios web archivados página por página, o colecciones enteras pueden ser procesadas como datos, revelando las características generales de las colecciones. 2.1.3 Problemáticas asociadas a la preservación Web La preservación web tiene retos tanto a nivel de gestión como a nivel técnico, que pueden actuar como limitante. A continuación se detalla la problemática asociada a la adquisición del contenido a preservar: • Políticas de exclusión: Los sitios Web pueden tener políticas de exclusión respecto a los rastreadores (software encargado de obtener el contenido) esto puede hacer que sitios enteros sean inaccesibles para el rastreador o que se bloquean ciertas partes que no permitan obtener todo el contenido, como por ejemplo hojas de estilo o imágenes que son importantes para la apariencia del sitio Web. Si esta problemática se presenta una opción sería contactar a los propietarios de los sitios Web para que permitan hacer el rastreo, pero según datos del IIPC solo entre el 30- 50% de los propietarios responden, esta baja tasa de respuesta afecta la posibilidad de realizar el rastreo. • Alcance del dominio: No todas las páginas Web de un país están identificadas por su dominio, por ejemplo en Venezuela no todas las direcciones terminan en “.ve” que es el dominio perteneciente a Venezuela, por lo que es complicado delimitar cuando una página que tenga un dominio genérico como (“.com” o “.net”) es venezolana. • Web Oculta: Según Julies Masanés [2] a veces es complicado, incluso imposible para los rastreadores buscar la ruta de acceso a algunos documentos de un sitio Web, como los archivos que sólo se puede acceder a través de una interacción compleja (como el envío de una consulta a un formulario) por lo que no podrán ser Capítulo II Marco Conceptual Pág - 10 recuperados por un rastreador web. Esta porción de la Web, llamada "Web oculta" o "Web profunda" la cual se estima [5] que es más grande que la “Web superficial”. En cuanto al almacenamiento e indexación, a continuación se detalla la problemática asociada: • Elección de la política de indexación: Dependiendo de las políticas internas del proyecto se debe elegir que método de indexación vaya a utilizarse. Se tienen tres tipos: basado en palabra clave (URL), basado en contenido ayudado por un motor de búsqueda como Yahoo o Google y a través de minería de Datos. Como primer prototipo de Archivado Web se decide tomar una indexación por palabra clave (URL). • Cambios en la política: Si el equipo de trabajo decide realizar un cambio en las políticas de almacenamiento e Indexación, acarrearía un cambio técnico en la configuración realizada ya que esta no cambia con el tiempo. • Campos a indexar: Las herramientas que proveen la indexación, permiten indexar solamente texto, dejando por fuera los tipos de datos complejos [2]. Es por esto, que debe realizarse operaciones previas para ubicar cuales son los campos adecuados para identificar el documento de manera única en el índice. • Muestra de métricas: Para que el usuario visualice las métricas pertinentes se debe hacer uso de herramientas no nativas al sistema como tal, lo que implican un procesamiento y carga adicional sobre el sistema. La mayoría de estas herramientas, a pesar de ser consideradas muy buenas en su clase aún se encuentran el ambiente de calidad. 2.2 Modelo OAIS El modelo para un Sistema de Información para Archivos Abiertos (Open Archival Information System OAIS) es un intento a proporcionar un marco de alto nivel para el desarrollo y la comparación de archivos digitales o repositorios [17] Este modelo de referencia se dice que es abierto (Open), porque se hizo para ser accesible al público, donde cualquiera pueda participar. Un sistema de información de archivos, en una organización que consiste en un conjunto de personas y sistemas, que han aceptado la responsabilidad de preservar la información y hacerla accesible para una Capítulo II Marco Conceptual Pág - 11 comunidad designada. Esta definición enfatiza dos funciones principales para el archivo, la primera, preservar la información y la segunda, proveer acceso a la información archivada. El modelo referencial OAIS consiste de tres partes, que aunque están separadas se relacionan entre sí, cada una centrada alrededor del concepto de un archivo OAIS. La primera parte describe el ambiente externo dentro del cual el modelo OAIS opera. La segunda parte describe los componentes funcionales o los mecanismos internos con los cuales se hacen cumplir con las responsabilidades de la preservación siguiendo el modelo OAIS. La tercera parte describe la información de los objetos que son procesados, administrados y diseminados o difundido por el OAIS. 2.2.1 Ambiente OAIS Un archivo de tipo OAIS debe actuar en cooperación con estos actores externos para el cumplimiento de su misión. El modelo de referencia identifica y describe las entidades externas que constituyen el entorno del ambiente OAIS, y caracteriza a las interfaces entre estas entidades y el OAIS. Figura 2. Ambiente OAIS, traducido de [19] La Figura 2 muestra el ambiente OAIS. El ambiente comprende tres distintas entidades externas y caracteriza las interfaces entre estas entidades y el Archivo: 1. Productor: rol desempeñado por las personas o los sistemas cliente, que proporcionan la información a ser conservada 2. Consumidor: rol desempeñado por las personas o los sistemas cliente, que interactúan con los servicios de OAIS para encontrar y adquirir información conservada de interés 3. Gestión: responsable del manejo de los componentes funcionales y las políticas del Archivo, no así del día a día de las operaciones del archivo. Capítulo II Marco Conceptual Pág - 12 2.2.2 El modelo Funcional. Este modelo identifica y describe el conjunto básico de mecanismos que permiten al Archivo cumplir con su principal objetivo de preservar la información a largo plazo y hacerla disponible. En término más generales, describe la gama de actividades que deben llevarse a cabo por un Archivo. En él se definen seis capas de servicio de alto nivel o componentes funcionales, que en conjunto cumplen el rol doble del OAIS: preservar y proveer acceso a la información custodiada. A continuación se muestra en la Figura 3 el modelo de Referencia OAIS. Figura 3. Modelo de Referencia OAIS, traducido de [19] • Ingreso: acepta presentaciones de los productores y los prepara para el almacenamiento y la gestión dentro del archivo. • Almacenamiento del Archivo: para el almacenamiento, mantenimiento y recuperación de contenido del Archivo. • Gestión de datos: Maneja repositorios de las metadatos que describe la información almacenada en el Archivo, realiza la gestión de información sobre el Archivo y sus propiedades. • Administración: Maneja las operaciones cotidianas del Archivo y coordina las actividades de los demás componentes funcionales del OAIS. • Planificación de preservación: vigilancia del medio ambiente de la OAIS para garantizar la conservación a largo plazo de los contenidos del Archivo. • Acceso: el apoyo a los consumidores (usuarios) en la búsqueda y recuperación de contenidos del Archivo. 2.2.3 Modelo de información Capítulo II Marco Conceptual Pág - 13 Además de la descripción de los componentes funcionales de un archivo de tipo OAIS, este modelo también provee una descripción de alto nivel de los objeto de información manejados por el archivo. El modelo de información OAIS está construido alrededor del concepto de paquete de información y cómo esta estructura se transforma y mueve a través del archivo. 2.2.3.1 La información La información se define como cualquier tipo de conocimiento que se pueden intercambiar, y es expresada o representada por un tipo de datos, que puede incluir información adicional acerca de su significado. En general, se puede decir que "los datos interpretados con su representación de información, proporcionan información”. Figura 4. Obtención de la información de los datos, traducido de [19] Para poder interpretar correctamente la información es necesario poseer conocimientos base que permita entender la información recibida. En la Figura 4 se puede observar el flujo de objeto de datos y su conversión a objeto de información. 2.2.3.2 Paquete de información Un paquete de información está conformado por Información de Contenido e Información de Descripción de Preservación (PDI)como se muestra en la Figura , la Información de Contenido y la PDI están encapsulados y son identificables por la Información de Paquete. El paquete resultante es reconocible gracias a la Información Descriptiva. Capítulo II Marco Conceptual Pág - 14 Figura 5. Paquete de Información, traducido de [19] La Información de Contenido es la información que es el objetivo original de conservación. Se compone de los Objetos de Datos de Contenido (CDA) y su representación de información asociada necesaria para hacer a los CDA comprensibles a la comunidad determinada. La Información de Descripción de Preservación es necesaria para preservar la Información de Contenido, para asegurarse de que está claramente identificada, y para entender el entorno en el que se creó. La información de Descripción de Preservación se divide en cuatro tipos de información de preservación llamado procedencia, contexto, referencia y la fijación. Estas se describen a continuación: • Procedencia: describe la fuente de la información de contenido, que ha tenido la custodia de la misma desde su origen y su historia (incluyendo la historia de procesamiento). • El contexto: describe cómo la información de contenido se relaciona a otra información fuera del paquete de información. • La Referencia: ofrece uno o más identificadores, o sistemas de identificadores, por lo que la información de contenido puede ser identificada de forma única. • La fijación: proporciona un contenedor, o escudo protector, que protege la Información de contenido de la alteración no documentado La información de Paquete es esa información que, ya sea real o lógicamente, une, identifica y relaciona la Información de Contenido y la PDI. La información descriptiva es esa información que se utiliza para descubrir cuál paquete tiene la información de contenido de interés. Dependiendo de la configuración, esto puede no ser más que un título descriptivo del paquete de información que aparece en Capítulo II Marco Conceptual Pág - 15 algunos mensajes, o puede ser un conjunto de índices. 2.2.3.3 Variantes del paquete de información. Es necesario distinguir entre un paquete de información que se conserva en un OAIS y los paquetes de información que son enviados y difundidos desde un OAIS. Estas variantes pueden deberse a que estos pueden estar organizados de manera muy diferente a como el OAIS organiza la información que preserva. Por último, el OAIS puede proporcionar información a los consumidores que no incluyan toda la representación de información o la totalidad de la PDI. Estas variantes se conocen como el Paquete de Información de Envío al OAIS (SIP), el Paquete de Información del Archivo (AIP), y el Paquete de Información de difusión (DIP) que se muestran en la Figura 6. Figura 6. Flujo de datos de un OAIS, traducido de [19] El modelo de información asociado al modelo funcional forma el modelo de referencia, que se muestra en la Figura 7. Capítulo II Marco Conceptual Pág - 16 Figura 7. El modelo de referencia OAIS 2.2.4 Adaptación del modelo OAIS en la implementación de archivos Web La IIPC tiene entre sus metas fomentar el desarrollo y uso de herramientas comunes, técnicas y normas que permitan la creación de archivos Web internacionales [27], es por ello que propone una arquitectura funcional para Archivos Web basada en el modelo OAIS, la cual se muestra en la Figura 8. Capítulo II Marco Conceptual Pág - 17 Figura 8. Arquitectura funcional propuesta por la IIPC, basada en el modelo OAIS [2] En la definición de esta arquitectura se agrupan componentes o herramientas que tienen la función de realizar las tareas de un Archivo Web (estas tareas están descritas en la sección 2.1.2 del presente documento) de la siguiente manera [30]: • Herramienta de ingreso de datos(Data ingest tools) se encarga del ingreso de datos, labor que consiste en la adquisición de los sitios Web seleccionados • El proceso de selección es propio de las políticas de cada archivo sin embargo se apoya en las herramientas de ingresos de datos para definir un repositorio de los sitios web a preservar así como la frecuencia con que deben hacerse • Para la indexación del contenido a preservar se hace uso de herramientas desarrolladas para llevar a cabo esta tarea • El almacenamiento es llevado a cabo por las herramientas de almacenamiento (storage tools) y los manejadores de contenido. • Y el acceso a se hace a través de las herramientas de acceso (access tools) Capítulo II Marco Conceptual Pág - 18 A continuación se describen las tareas, métodos y herramientas utilizadas para crear un archivo Web. 2 .3 Adquisición El término adquisición designa los diferentes medios técnicos utilizados para obtener el contenido a ser preservado, la captura del contenido se puede hacer tanto en línea como fuera de línea (se obtienen los archivos directamente del servidor), muchas veces se necesita más de un enfoque para obtener el contenido, es por ello que existen varios métodos de adquisición. 2.3.1 Métodos de Adquisición Desde el punto de vista técnico, esta fase de interacción con el productor o servidor Web, no es una tarea sencilla. La razón es que no basta un solo enfoque para cubrir eficientemente la gran variedad de técnicas de publicación en Web. El principal obstáculo que las herramientas de adquisición tienen que superar es la incapacidad del protocolo HTTP para proporcionar una copia masiva de los contenidos del servidor. Existen tres tipos de métodos de adquisición, el proceso de recolección se puede hacer de forma remota como cliente, cerca de la salida del servidor o por acceso directo a los archivos del servidor. La primera opción se hace con rastreadores o araña web, que es derivada y adaptada de la tecnología de los motores de búsqueda y proporcionan una herramienta poderosa para la captura desde el lado del cliente. El rastreador es para el servidor Web un cliente como cualquier otro, por eso se utiliza el término "archivado del lado del cliente" para este método de adquisición. Dependiendo de la arquitectura backend del servidor Web y el nivel de interacción con el cliente, los rastreadores pueden capturar la página Web completa, o solo algunas partes de ella. La parte restante fuera del alcance de los rastreadores es conocida como "Web profunda" o "Web oculta"[5]. Existen dos métodos alternativos para adquirir el contenido, pero han sido menos aplicados y permanecen en investigación. Ambos métodos necesitan ser operados desde el lado del servidor, por lo que requiere no sólo autorización sino también una participación activa del propietario del sitio. El primero se basa en los usuarios del sitio, aprovechando su ruta de navegación y la exploración de los contenidos del sitio para archivarlos. Como se basa en el registro de las transacciones realizadas entre los usuarios de un sitio y el servidor, recibe el nombre de "archivo de transacciones". El segundo consiste Capítulo II Marco Conceptual Pág - 19 en copiar directamente desde el propietario o editor todos los archivos que componen el sitio Web. Recibe el nombre de "archivo del lado del servidor". Estas técnicas son más complicadas que el archivado del lado del cliente, porque requieren como se mencionó anteriormente la participación activa de los productores o propietarios del sitio Web. Se recomienda no aplicar estas técnicas a gran escala pero se pueden aplicar en los casos en que el rastreador no logra captar con precisión el contenido que desea [2]. En el prototipo de preservación Web planteado en el presente trabajo se utilizará el archivado del lado del cliente, el cual se detalla en la siguiente sección. 2.3.1.1 Archivado del lado del cliente Este es el principal método de adquisición tanto por su simplicidad, como por su escalabilidad y adaptación a un entorno cliente-servidor como se muestra en la Figura 9. Los rastreadores se adaptan a lo que es la forma habitual de acceder a la Web (peticiones http). Esto permite el archivado de cualquier sitio que sea accesible libremente ya sea en la Web tradicional en intranets o extranets, es necesario que el rastreador obtenga la autorización correspondiente. Este método no sólo adopta la misma posición de usuarios normales de la Web, sino que también imita su forma de interacción con los servidores. Los rastreadores comienzan desde las páginas semillas, las analizan, extraen los enlaces y buscan los documentos enlazados. A continuación, reiteran este proceso con los documentos traídos y sigue el procedimiento siempre que haya vínculos a explorar, entonces encuentran más documentos dentro del alcance definido. Cada página tiene por lo tanto que ser "descubierta" por extracción de enlaces desde otras páginas. Capítulo II Marco Conceptual Pág - 20 Figura 9. Archivado del lado del cliente La tecnología de rastreo ha sido desarrollada originalmente para fines de indexación. Su aplicación para el archivado Web, a pesar de que reutilizan la mayoría de sus aspectos implica varios cambios. El primero es que los rastreadores para archivado trataran de buscar todos los archivos independientemente de su formato para archivar una versión completa de los sitios, al contrario de los rastreadores de motores de búsqueda que suelen buscar sólo los archivos que pueden indexar. La segunda diferencia tiene que ver con la gestión temporal de los rastreos. Para evitar la sobrecarga de los servidores Web, los rastreadores respetan normas de cortesía (se establece un retardo fijo entre dos peticiones, por lo general de varios segundos, o un retardo que depende del tiempo de respuesta del servidor, [9]). Esto implica que una captura Web puede durar varios minutos en el mejor caso, varias horas o incluso días. Este retraso plantea un problema de la consistencia temporal de la captura del sitio, que puede sufrir cambios durante el tiempo que está siendo capturado. Esto afecta a los rastreadores de archivado porque el rastreo debe proporcionar el contenido y no solo la dirección al mismo., los documentos web deben ser rastreados en su conjunto, con o sin su coherencia interna, siendo el único contexto para la navegación y la interpretación. Capítulo II Marco Conceptual Pág - 21 Esto tiene consecuencias de largo alcance en lo que respecta que la política de rastreo. Como la cortesía con los servidores siempre ha sido un cuello de botella para el rastreo, los rastreadores han estado utilizando prioridad de rastreo principalmente en amplitud (breadth-first), con algunas variantes principalmente destinadas a rastrear las "mejores" primeras páginas, pero esta estrategia de planificación de rastreo tiene el inconveniente de aumentar la discrepancia temporal de los rastreadores a nivel de sitio [2]. Dado el retardo entre las solicitudes y los recursos disponibles para rastrear, se tiene que encontrar el número óptimo de sitios para iniciar y al mismo tiempo asegurar que la frecuencia de solicitud será establecida por las normas de cortesía, sin retardos innecesarios entre las solicitudes. La Figura 10 muestra la línea frontal" (front-line) de un rastreo, cuyo tamaño corresponde a la asignación óptima de los recursos de rastreo. Figura 10. Primera línea de un rastreo, traducido de [2] 2.4 Almacenamiento Realizar una copia de un sitio Web es una tarea compleja, ya que un sitio Web puede ser tan simple como un único archivo o una de las colecciones más complejas de artefactos de software que cooperan entre sí [2]. Capítulo II Marco Conceptual Pág - 22 Lo ideal al momento de realizar la copia sería que el archivo fuera isomorfo al original (misma estructura jerárquica, nombres de archivos, mecanismos de enlaces, formato), pero por razones prácticas, esto casi nunca sucede. Esta es la razón por la cual los responsables de los Archivos Web adoptan estrategias de transformación. Estas transformaciones pueden afectar el direccionamiento, los mecanismos de enlazado y los formatos, así como la representación del objeto en sí. 2.4.1 Métodos de Almacenamiento Hasta ahora se han adoptado tres estrategias para la estructuración de Archivos web. La primera estrategia es crear una copia local de los archivos del sitio y navegar a través de esta copia de la misma manera como en la Web. La segunda es ejecutar un servidor Web y servir el contenido en este entorno a los navegadores del usuario. La tercera opción es volver a organizar los documentos según diferentes lógicas (no web) de nombramiento, direccionamiento y representación. Para el presente trabajo, la estrategia adoptada fue la de Archivado con Servidor Web, la cual será descrita en la siguiente sección. Cabe destacar que la elección del método siempre dependerá de los alcances y objetivos del proyecto. 2.4.1.1 Archivado con Servidor Web Esta opción permite evitar las limitaciones en cuanto al tamaño del Sistema de Archivo, que es crucial para la preservación Web a gran escala. Se basa en el archivado de la respuesta, las respuestas del servidor original se almacenan sin cambios en contenedores de archivos WARC (formato de archivo Web ARChive que será explicado en detalle en la sección 2.6.1 del presente documento), que permite servirlos más tarde a los usuarios del archivo con un servidor HTTP. Un archivo WARC registra una secuencia de archivos Web cosechados, cada página está precedida por un encabezado que describe brevemente el contenido de cosecha y su longitud. Capítulo II Marco Conceptual Pág - 23 Figura 11. Archivado con Servidor Web [2]. Como podemos ver en la Figura 11, con el Archivado con Servidor Web el sitio original se rastrea y las respuestas se almacenan sin cambios en el contenedor WARC. Lo que permite evadir el mapeo del archivo del sistema para la asignación de nombres por convenio y el cambio de la estructura del enlace. El acceso requiere que un Servidor Web obtenga lo que esté almacenado en los contenedores y los envía como una respuesta al usuario final, permitiendo que la navegación por el sitio web se pueda hacer tal cual como fue rastreado. La principal ventaja de la utilización de contenedores WARC es la posibilidad de superar la limitación del sistema de archivos de almacenamiento en términos de tamaño ya que se almacenan menos archivos individuales en el sistema de archivo [2]. La desventaja de este enfoque se basa en que es imposible el acceso directo a los archivos almacenados. Son necesarias dos capas extra de aplicación para acceder al contenido: un sistema de índice para archivos WARC y un servidor Web. Estas dos capas no son muy complejas, pero requieren la ejecución de un ambiente de acceso, que puede ser difícil de configurar y mantener en organizaciones pequeñas. Este método es apropiado para la preservación Web a mediana y gran escala, así como para los pequeños archivos que se ocupan de la preservación de la autenticidad del contenido. Como estos métodos almacenan las respuestas del servidor original, como llega Capítulo II Marco Conceptual Pág - 24 del cliente, sin ningún tipo de transformación, en realidad ofrece más fidelidad que los otros métodos 2.5 Indexación y Motores de Búsqueda. Para garantizar un orden y facilitar el acceso a estos contenedores se hace uso de índices. Estos disminuyen los tiempos de búsqueda y facilitan el proceso dentro del repositorio. Una indexación basada en un archivo Web será acumulativa y dependerá de la política de recolección que se tenga y se tendrá una referencia de todos los documentos que se han cosechado y almacenado en el archivo. La mayoría de las herramientas de acceso a la Web están basadas en indexación automática, que no es más que la indexación que se realiza a través de procedimientos algorítmicos. Existen varios tipos de indexación automática y cuando la Web fue ganando popularidad se utilizaron tres tipos diferentes: el primero fue un simple estilo de índice parte-de-atrás-del-libro, como en muchos libros escolares donde las palabras claves están vinculadas a una página o un capítulo, cabe destacar que para la Web las palabras claves están vinculadas a una URL. El segundo tipo sería indexando las palabras claves en conjunto con árboles objetos de los sitios revisados y el tercero se realizaría con los motores de búsqueda más la indexación [2]. Para este trabajo especial de grado, la indexación está basada en palabra clave con la ayuda de una plataforma de búsqueda, siendo la URL del sitio cosechado la clave de indexación. Al momento de la consulta, se coloca la URL deseada y se obtendrá como resultado todas las versiones correspondientes a la misma. 2.5.1 Acceso. El acceder a un archivo Web se refiere a la acción de hacer una consulta por parte de los usuarios. Existe una gran necesidad de proveer métodos para acceder a un archivo Web. Puede ser un acceso proveniente de una dirección URL, un motor de busqueda o de Minería de Datos. Sin importar cuál sea el método utilizado se debe crear una interfaz gráfica para el usuario. Para almacenar los archivos se utiliza un registro de encabezado con una identificación única que se basa generalmente en la dirección del archivo y una marca de tiempo, esta marca de tiempo se utiliza para señalar las distintas versiones que pueda tener Capítulo II Marco Conceptual Pág - 25 el archivo hasta el momento que se haga la búsqueda por parte del usuario. La función que realiza la búsqueda devuelve una lista de referencias que enlazan con el archivo y se utilizan como punto de entrada para el usuario. En la actualidad, la mayoría de los archivos utilizan este método para proporcionar acceso a los documentos ya que es relativamente más sencillo indexar los registros de las cabeceras de la manera antes mencionada. 2.6 Formatos de Documentos para Almacenamiento El contenido Web que se quiere preservar es almacenado en un formato de archivo apropiado para este tipo de contenido, uno de los más utilizados es el formato WARC el cual se explica en la siguiente sección. 2.6.1 Formato WARC El formato WARC (Web ARChive) es un estándar abierto, documentado públicamente, desarrollado bajo los auspicios de la IIPC. Presentado en mayo de 2005 como un elemento de trabajo a través de la norma ISO TC46/SC4, fue aprobado como un estándar internacional en mayo de 2009 [7] Este formato especifica un método para combinar múltiples fuentes digitales dentro de un archivo agregado conjuntamente con información relacionada. La fuente está fechada e identificada por la URL de la misma, precedida por cabeceras de texto plano. Por convención, un archivo con este formato debe ser nombrado con la extensión “.warc” y tener el encabezado MIME, el cual indica el tipo de medio que representa el contenido del mensaje “MIME-type” con valor “application/warc”. Este formato es una extensión del formato ARC, usado por el Internet Archive para almacenar la información cosechada por los rastreadores Web tales como Heritrix. EL formato WARC generaliza el formato ARC para obtener un mejor soporte en cuanto a la cosecha, el acceso y el intercambio de necesidades de las organizaciones encargadas del archivado Web. Además del contenido Web cosechado, el formato almacena información secundaria tal como la metadata correspondiente, detección de eventos de manera abreviada y transformaciones realizadas. En la fase de producción se utiliza para la accesibilidad Web del contenido archivado, representa el estado final que será difundido a través de Internet a un agente de usuario (navegador Web). Capítulo II Marco Conceptual Pág - 26 Con la creación de este formato se busca añadir nuevas características, tales como: • El almacenamiento de las cabeceras de petición del protocolo HTTP. • El almacenamiento de metadata arbitraria. • La asignación de un identificador para cada archivo de contenido. • La gestión de duplicados y de registros migrados y la segmentación de los registros. El formato WARC está hecho para almacenar todo tipo de contenido Web, ya sea obtenido por el protocolo HTTP o por cualquier otro protocolo. Entre sus principales características se tienen: • Guarda contenido junto a la información de los protocolos de cosecha. • Guarda metadatos enlazados a otros datos. • Permite compresión de datos y preservar integridad de los registros. • Permite manejos de registros de gran tamaño. • Es capaz de detectar duplicados dentro de un mismo contenedor y hacer transformaciones posteriores de un archivo. En la Figura 12 se puede observar un ejemplo de un archivo WARC. Figura 12. Ejemplo de un Archivo WARC [7] El formato WARC es la concatenación de uno o más registros WARC. Un registro consiste en un encabezado de información de ese registro seguido de bloque del contenido. Existen 8 tipos de WARC definidos: Capítulo II Marco Conceptual Pág - 27 • Warcinfo: Este tipo de registro describe a los registros subsiguientes a él. Típicamente, aparece una vez al comienzo del contenedor WARC. Para un archivo Web, comúnmente contiene la descripción del rastreador Web. Un archivo WARC contiene otros archivos WARC más pequeños y no es estrictamente necesario que estos contengan su propio registro “warcinfo”. También, para permitir la concatenación de archivos WARC dentro de una WARC más grande, está permitido que el registro “warcinfo” aparezca en el medio de este archivo. El campo “subject-uri” de este tipo de registro debería estar referido a un nombre URI, sintetizado si es necesario, que es quien representa o hace referencia con el WARC en sí. • Response: Contiene una respuesta completa del protocolo, tal como una respuesta HTTP incluyendo los encabezados y el contenido. • Resource: Este tipo de registro contiene un recurso, sin la respuesta completa del protocolo. • Request: Es el que mantiene la forma en la cual el contenido primario de un registro fue solicitado. Para el caso de un rastreador Web, este conservará la petición HTTP. • Metadata: Este tipo de registro posee el contenido creado en orden de describir o explicar el recurso que se ha cosechado. Casi siempre hará referencia a otro registro de otro tipo, aunque se le permite, en caso de ser necesario, tener registro de otro tipo de registro “metadata”. • Revisit: Este tipo de registro no es común, pero hace referencia al registro que describe el reconocimiento del contenido que ya ha sido cosechado e incluye un bloque abreviado que debe ser interpretado con relación a su registro anterior. Un registro “revisit” debería ser utilizado solamente cuando mientras se esté interpretando otro registro, se solicita consultar el registro anterior al mismo. 2.6.1.1 Encabezado WARC En la Figura 13 se puede observar el encabezado que tiene un archivo WARC. Se procederá a dar explicación de cada uno de los parámetros involucrados. Capítulo II Marco Conceptual Pág - 28 Figura 13. Encabezado WARC [7]. • warc-id: Es un parámetro fijo con el valor “warc/0.9”, que aparece en primer lugar en todos los registros y da inicio al archivo WARC mismo. Sirve para identificar el formato de archivo y la versión, y para asistir en la recuperación de errores cuando un proceso de lectura de un archivo WARC falla al buscar el siguiente bloque que se espera. • data-length: Representa el número de octetos en el registro, empezando con la letra “w” en el primer token. • subject-uri: Hace referencia a la URI original que ha sido cosechada por el rastreador Web. • creation-date: Es un parámetro de 14 dígitos que representan la captura de tiempo o timestamp en el formato “YYYYMMDDhhmmss” en la cual se dio inicio a la creación del registro. • content-type: Da a conocer que tipo de contenido posee el registro en el cual se está navegando. • record-id: Es un identificador asignado al registro que es globalmente único para su segmento. No se rige por ningún estándar en específico pero debería ser una URI legal que claramente indique su documento y registro que representa. • 2.6.1.2 Estándar del nombre del archivo o contenedor WARC y Recomendaciones. Es de ayuda seguir un estándar de instituciones que hacen imposible o muy poco probable que los nombres de los WARC agregados estén duplicados. La convención usada por el Internet Archive con los archivos WARC sigue el siguiente patrón: Capítulo II Marco Conceptual Pág - 29 Prefix-Timestamp-Serial-Crawlhost.warc.gz • Prefix: Es una abreviación que hace alusión al proyecto o rastreador Web que ha creado el archivo WARC. • Timestamp: Es una cadena de 14 dígitos que representan la captura de tiempo en formato GMT. Esta fecha representa el momento en el cual se comenzó el rastreo. • Serial: En un número de serial incremental, que en la mayoría de los casos es única. • Crawlhost: Hace referencia al nombre de dominio o a la dirección IP de la máquina que crea el archivo WARC. 2.7 Herramientas utilizadas para llevar a cabo la preservación web En base a los métodos seleccionados se realizó una revisión de una serie de herramientas de software libre que soportan dichos métodos y se escogieron las siguientes. 2.7.1. Heritrix Heritrix es un rastreador (o crawler) de archivos web a través de Internet. Su licencia es open-source y está escrito completamente en JAVA. Su interfaz de configuración es accesible usando un navegador Web, también puede ser lanzado desde línea de comandos usando un API REST (a partir de la versión 3), actualmente el rastreador cuenta con 2 versiones estables la 1.1.14 y la 3.x . Arquitectura Heritrix fue diseñado como un Framework de rastreo genérico donde diversos componentes pueden ser conectados. Los rastreos son configurables, para ello se eligen y configuran un conjunto de componentes específicos y se ponen en funcionamiento, la ejecución de un rastreo repite el siguiente proceso recursivamente (este proceso es común en todos los rastreadores Web) 1. Elegir un URI de entre todas las programadas 2. Buscar el URI 3. Analizar o archivar los resultados 4. Seleccionar los URI descubiertos que sean de interés, y sumarlos a los ya programados 5. Se termina el procesamiento de la URI actual y se repite el proceso Capítulo II Marco Conceptual Pág - 30 Los 3 componentes principales de Heritrix son: 1. El Alcance (Scope), 2. La Frontera (Frontier) 3. La cadena de procesamiento (ProcessorChains). A continuación de describen cada uno de ellos: • Alcance: Se encarga de validar si una URI esta fuera o dentro de las reglas de rastreo, el alcance incluye las semillas: URI que se usan para iniciar el rastreo, el alcance también interviene en la selección de URis mencionadas en el paso 4 del proceso de rastreo. • Frontera: Es el responsable de seleccionar el siguiente URI a ser procesado, además lleva un registros de las URIs cosechadas y otro de las URIs que ya han sido procesadas, estos registros se implementan con colas. • Cadena de procesamiento: Son un conjunto de procesadores modulares que realizan tareas específicas en cada URI, esto incluye; búsqueda del URI, análisis de los resultados devueltos y pase de URIs descubiertas a la frontera En la Figura 14 se describe la arquitectura de Heritrix: Capítulo II Marco Conceptual Pág - 31 Figura 14. Arquitectura de Heritrix [26] La Web Administrative Console puede ser vista como una aplicación independiente (standalone), su funcionalidad es la de permitir elegir los componentes de un rastreo y especificar los parámetros de un Crawlorder, con la Web Administrative Console es posible ver el estado del rastreo actual, sus logs y generar reportes. En caso de que Heritrix se utilice por línea de comando la Web Administrative Console no es necesaria. Un rastreo es iniciado cuando el CrawlController aprueba la Crawlorder, el CrawlController crea una instancia de todos los módulos necesarios para el rastreo, la Web AdministrativeConsole controla el rastreo a través del CrawlController. El CrawlOrder contiene suficiente información para crear el ámbito de aplicación. Datos tales como: el alcance, la semilla con la cual el Frontier iniciará el rastreo e Capítulo II Marco Conceptual Pág - 32 información de qué hacer con las URIs que sean descubiertas posteriormente. El Frontier es el responsable de ordenar los URIs a ser visitados, así como de asegurarse que las URIs no sean revisadas innecesariamente y moderar las visitas que el rastreador hace a cualquier sitio remoto. Se consiguen estos objetivos mediante el mantenimiento de una serie de colas internas de URIs para ser visitados y una lista de todos los URIs que ya han sido visitados o encolados. El rastreador Heritrix es multiproceso, por lo que un rastreo se puede ejecutar de manera concurrente. Cada subproceso de trabajo se denomina ToeThread y mientras se mantiene un rastreo activo cada ToeThread recorre los pasos que corresponden al proceso genérico de rastreo descrito anteriormente. Cada URI es representada por una instancia de CrawlURI, se empaqueta la URI con información adicional recogida durante el procesos de rastreo, los componentes del sistema comunican su progreso y la salida a través de CrawlURI, que lleva los resultados de procesamientos anteriores, para ser revisados posteriormente y finalmente el CrawlURI regresa a la frontera para influir en futuros reintentos o programación de rastreos El ServerCache contiene datos persistentes acerca de los servidores a través de CrawlURI. Contiene cualquier número de entidades CrawlServer recogiendo información como direcciones IP, política de exclusión de robots, capacidad de respuesta histórica y estadísticas de rastreos del host. La funcionalidad global de un rastreador con respecto a una URI programada es en gran parte especificada por la serie de procesadores configurados para ejecutarse, cada procesador a su vez realiza sus tareas marcando el estado del CrawlURI y retornando, las tareas realizadas varían en función del tipo de URI, historia o el contenido recuperado. Los procesadores se agrupan en cinco cadenas: • Procesadores en el PrefetchChain reciben el CrawlURI antes de resolver cualquier actividad de red o de ir a buscar la URI, Por lo general cada procesador demora, reordena o veta la tramitación posterior de una CrawlURI , por ejemplo para asegurar que las políticas de exclusión de robots se captan y son consideradas antes de que la URI sea procesada • Procesadores en el FetchChain , la actividad de red intenta adquirir el recurso que se refiere a un CrawlURI, es el caso típico de una transacción HTTP, un procesador de búsqueda llenará la demanda y respuesta en el buffers de la CrawlURI o indicará Capítulo II Marco Conceptual Pág - 33 cualquier condición de error que impida que el buffer sea llenado • Procesadores en el ExtractChain realizan seguimiento al procesamiento de un CrawlURI que busca las URIs ya finalizadas, extrayendo característica de interés, por lo general estos son nuevos URIs que también pueden ser elegibles para ser visitados, En este paso las URIs solo se descubren, no se evalúan • Procesadores en el WriteChain almacenan el resultado del rastreo –retornando contenido o características importantes – para almacenamiento permanente. El rastreador estándar simplemente escribe los datos en el formato de archivos de Internet, conocidos como archivos ARC o WARC, sin embargo terceros han creado procesadores que escriben los datos en otros formatos o indexan los resultados del rastreo • Por último, procesadores en el PostProcessChain realiza el mantenimiento final de las acciones de rastreo en el CrawlURI como las pruebas descubiertas. Principales Características Heritrix tiene las siguientes características: • Recoge contenido vía HTTP recursivamente de múltiples sitios Web en un solo rastreo, con cientos a miles de sitios Web independientes y millones de recursos distintos. • Ubicaciones de salidas ajustables para los registros, archivos comprimidos, informes y archivos temporales. • Se pueden configurar los bytes máximo de descargas, número máximo de documentos a descargar, y tiempo máximo para pasar el rastreo. • Número configurable de hilos de rastreo (trabajadores). • Configuración de cortesía que permite establecer un tiempo mínimo/máximo entre las solicitudes. • Por cada rastreo se crean archivos log que permiten verificar problemas, errores, URIs cosechadas, estadísticas, entre otros. • En la versión 3.x sólo está disponible BdbFrontier como implementación de Frontier, se visitan las URIs y se descubren nuevas páginas aplicando búsqueda en anchura. • La versión 3.x de Heritrix está basada en el spring java framework [14], este framework define unas estructuras llamadas bean, los bean son componentes configurables que constan de propiedades y otros beans, cada beans es Capítulo II Marco Conceptual Pág - 34 representado como un elemento XML, los archivos de configuración de los jobs están conformados por beans, en la Figura 15 se ejemplifica la configuración de un bean. Figura 15. Configuración de una semilla. • API REST: Heritrix 3.1.1 usa REST para exponer sus funcionalidades, la implementación REST de Heritrix está basada en Restlet que es un framework RestFul para java [15] Heritrix expone esta API a través de HTTPS, con este protocolo se hacen peticiones para recuperar o modificar configuraciones y manejos de rastreos. Cualquier cliente que soporte HTTPS puede ser usado para invocar el API REST, ejemplos de clientes de línea de comandos serian curl y wget. Limitaciones de Heritrix Las principales limitaciones actuales para tener en cuenta son: • Oficialmente sólo soportado y probado en Linux. Capítulo II Marco Conceptual Pág - 35 • Cada ejecución de rastreo es independiente, sin apoyo para programar revisita programada para un área de interés. • Capacidad limitada de rastreos ante fallas del sistema/hardware. 2.7.2 Solr Es una plataforma o motor de búsqueda de código abierto escrita en java y basada en el proyecto Apache Lucene, una librería que proporciona búsquedas de texto de alto rendimiento haciendo uso de índices invertidos, lo que logra una mayor velocidad y flexibilidad en la búsqueda de cadenas de texto y menor dependencia del tamaño del índice. Algunas de las características principales de Solr son: • Búsquedas de texto completo • Provee búsquedas dinámicas y distribuidas • La integración de bases de datos y replicación de índices. Como se ha comentado anteriormente Solr hace uso de un Índice Invertido[40], una estructura de datos de índice de almacenamiento de una asignación de contenido, como palabras o números, a sus ubicaciones en un archivo de base de datos o en un documento o conjunto de documentos. El objetivo de un índice invertido es permitir rápidas búsquedas de texto completo, a un costo de procesamiento mayor cuando se añade un documento a la base de datos. Se puede explicar el concepto de forma gráfica a través de la Figura 16. Figura 16. Índice Directo e Invertido [39] Capítulo II Marco Conceptual Pág - 36 Para las consultas, posee una interfaz HTTP con la posibilidad de configurar las respuestas en formatos como XML/XSLT, JSON, Python, Ruby, PHP, Velocity, binary, entre otras. Permite ordenar por cualquier número o campos y por funciones complejas de los campos numéricos. Hace uso del analizador de consultas DisMax (Disjunction Max) para obtener resultados de alta relevancia de consultas introducidas por el usuario [20]. La plataforma de Búsqueda se divide en dos grandes partes, el Índice y el Servidor: • El índice es el sistema de archivo que almacena la información. Esta sección contiene la configuración de Solr y la definición de la estructura de datos. • El Servidor es donde se proporciona el acceso a los índices y las características adicionales. También se admite la instalación de plugins para añadir funcionalidades. Solr realiza búsqueda por facetas basadas en valores únicos de campo, consultas explícitas, rangos de fechas y rangos numéricos. Da la posibilidad de dar al usuario sugerencias sobre la ortografía en las consultas. Entre otras características importantes que posee Solr se tiene: • Maneja campos estadísticos numéricos como mínimo, máximo, promedio (avg) y desviación estándar. • Combina consultas derivadas de diferentes sintaxis. • Sugiere de manera automáticas funcionalidades de para completar las consultas de los usuarios. • Permite la configuración de los resultados de mayor puntuación para una consulta. • Optimización en cuanto al desempeño. Indexación Para llevar a cabo la indexación es necesario colocar dentro del archivo que define las estructuras de datos a indexar llamado schema.xml el campo que se desea indexar. La definición de este se realiza siguiendo la siguiente sintaxis: <field name=“nombre de campo" type=“tipo de dato" /> Los tipos de datos están definidos por las clases de java, sin embargo Solr da la libertad de crear un nuevo tipo de dato en caso que se necesite. Además de los parámetros ya visto, la plataforma acepta parámetros adicionales para permitir la flexibilidad de la Capítulo II Marco Conceptual Pág - 37 indexación: • default: Valor a usar si no se recibe ninguno • required: Define si un campo es obligatorio. • indexed: Determina si un campo es buscable u ordenable. • stored: Determina si un campo se puede recuperar en una consulta. • multiValued: El campo contiene más de un valor. Figura 17. Arquitectura de Solr [38] En la Figura 17 se puede observar la arquitectura de Solr. En un primer nivel se tiene las librerías en las cuales está basada esta plataforma de búsqueda como se ha mencionado anteriormente (librería de Lucene). En el nivel superior Solr se divide en módulos, en la siguiente sección se describirán aquellos más destacados: • Manejador de Peticiones o Request Handlers: Este módulo maneja las peticiones a través de HTTP, el componente que recibe esta petición es el denominado componente select. Los otros módulos no son tan comunes y se especializan en el análisis profundo de la petición. • Componentes de Búsquedas o Search Components: forman parte del manejador de Búsquedas y se encarga de las consultas, las búsquedas en facetas, el resaltado de consultas y las estadísticas. • Manejador de Actualización o Update Handlers: maneja las peticiones de indexación. Capítulo II Marco Conceptual Pág - 38 • Escritores de Respuesta: Este módulo se encarga de dar la respuesta en el estándar que se desee o se solicite, se dispone de XML, JSON y binario. • Manejador de Peticiones de Extracción: que se encarga de la indexación de formatos enriquecidos, como lo es PDF o WORD, a través de la ayuda de un componente propio de Lucene llamado Apache Tika. Gracias a estos módulos es que se puede hacer uso de todas las características destacadas de Solr, como la habilidad de esta plataforma para retornar la lista de resultados de la búsqueda de un query, su completitud en cuanto al esquema de datos puesto que maneja tipos numéricos, campos dinámicos y claves únicas entre otros. 2.7.3 WARCTools Los WARC Tools es una herramienta de código abierto que proporciona una librería, un conjunto de líneas de comando de terminal, plug-ins para los servidores web y una documentación general para la manipulación de los archivos Web contenidos en WARCs. La idea principal de los WARC Tools es facilitar y promover la adopción del formato de archivo WARC (visto anteriormente) para el almacenamiento de los archivos Web. El proyecto es liderado por Hanzo Archives [41], en colaboración con el equipo de trabajo del Internet Archive y soportado por el International Internet Preservation Consortium (IIPC) [27] Las herramientas que proporcionan los WARC Tools son manejadas a través de scripts que a su vez son programables, es decir que pueden ser modificadas según sean las necesidades de la organización que las utilice. Para el presente Trabajo Especial de Grado se hizo uso del conjunto de líneas de comando a través de la terminal del sistema y el uso de shell script. A continuación se dará a conocer los comandos que esta herramienta proporciona: • arc2warc: Dado un archivo ARC, este comando crea un archivo WARC (aunque no es de buena calidad y está aún en desarrollo). Se dice que no es de calidad ya que este tipo de WARC no tendría los encabezados HTTP que son característicos en este. • warc2warc: Da como resultado un archivo WARC, dando como resultado otro archivo WARC, hace la compresión a warc.gz • warcdump: Lanza como resultado el contenido del archivo WARC por salida estándar Capítulo II Marco Conceptual Pág - 39 • warcextract: Lanza por salida estándar el contenido de la metadata que existe en el archivo WARC. • warcindex: Crea un índice referencial del archivo WARC, en el podemos ver campos como identificador (warc-id), desplazamiento (offset), tipo de contenido (content- type), ruta (URI), tamaño (content-length), entre otros. • warcunpack_ia: Lanza como resultado un directorio que se crea a partir de una regeneración de la estructura del sitio original, no necesariamente es la misma, mas sin embargo este mismo realiza la transformación de las direcciones relativas. • warcvalid: Verifica la correctitud de un archivo WARC. 2.7.4 REST (Representational State Transfer) Es una técnica de arquitectura software para sistemas hipermedia distribuidos como la World Wide Web[12], REST está basado en el concepto de representación de recursos , un recurso es cualquier concepto coherente y significativo que pueda ser utilizado y es accedido utilizando un identificador global, un URI es un ejemplo de recurso, para manipular los recursos los componentes de la red (cliente y servidor) se comunican a través de una interfaz estándar (el protocolo HTTP ) e intercambian representaciones de estos recursos , un ejemplo de representación de recurso es una página HTML Los sistemas que siguen los principios de REST se llaman Restful, e implementan un API web que sigue los siguientes principios: • El URI es la base para la web API , por ejemplo http://example.com/resources/ • La Web API soporta internet media type, con frecuencia se usa JSON pero otros tipos de datos son posibles. • Soporta un conjunto de operaciones asociados a los métodos HTTP (GET, PUT, POST, DELETE). • El API debe ser hypertext driven [13]. 2.8 Resumen de uso de métodos y herramientas En [30] Ospina Torres y León Luna realizan un estudio comparativo de un total de 52 iniciativas de preservación web mostrando un resumen de los métodos y herramientas utilizados por estas iniciativas para realizar la adquisición y el almacenamiento de sitios web. Como se puede apreciar en la Figura 18 el método de adquisición descrito en la sección 2.3.1.1 de este documento es el más utilizado y Heritrix es el rastreador más usado Capítulo II Marco Conceptual Pág - 40 Figura 18. Resumen de métodos y herramientas de adquisición usadas por iniciativas de preservación web a nivel mundial [30] Como se puede observar en la Figura 19 el método más utilizado para el almacenamiento es el que usa servidor web descrito en la sección 2.4.1.1 de este documento. Figura 19. Resumen de métodos y estándares de almacenamiento usados por iniciativas de preservación web a nivel mundial [30] En la Figura 20 se muestra un resumen de uso encuanto a los indizadores utilizados por las iniciativas. Se puede notar que el indizador más utilizado es NutchWAX aunque en este trabajo especial de grado se utiliza Solr, el cual será explicado en la sección 2.7.2. La razón por la que se utliza Solr es porque NutchWAX soporta únicamente formato de documento ARC y en este trabajo especial de grado se utiliza el formato WARC (explicado en la sección 2.6), además NutchWAX no es capaz de soportar grandes cantidades de información, característica que no presenta una limitación para Solr. Capítulo II Marco Conceptual Pág - 41 Figura 20. Resumen de indizadores usados por las iniciativas de preservación Web a nivek mundial [30]. Una vez descritas las herramientas y su porcentaje de uso se hará una descripción de algunas iniciativas estudiadas para conocer el estado del arte en el dominio de Archivos Web. 2.9 Estado del arte Como se mencionó en el planteamiento del problema muchos países el mundo cuentan con iniciativas de preservación web en [4] se puede revisar una lista de estas iniciativas. Varias de estas iniciativas nos sirvieron de referencia a lo largo del desarrollo de este trabajo especial de grado, tanto por su funcionamiento como por la información técnica brindada, a continuación se hará reseña de tres de ellas. 2.9.1 Portuguese Web Archive Este proyecto surge como una iniciativa para archivar la Web portuguesa, el proyecto está a cargo de la FCCN (Foundation for National Scientific Computing), el PWA (Portuguese Web Archive) proporciona acceso a datos históricos y culturales preservados de la web portuguesa, con la existencia de la PWa se busca [39]: • Contribuir al uso de portugués como lenguaje de comunicación en la Web. • Proporcionar acceso a contenido Web de interés para trabajos científicos en diferentes campos como: historia, sociología o lengua. Capítulo II Marco Conceptual Pág - 42 • Reducir la dependencia de Portugal en cuanto al uso de servicios extranjeros para el procesamiento y búsqueda de datos en la Web. • Fuentes de evidencias en casos judiciales que requieran información publicada en la Web pero que ya no está disponible en línea. Herramientas utilizadas • Heritrix: para implementar el rastreo • Hadoop: Una plataforma de software para distribuir computo que implementa el paradigma de programación de Google llamado MapReduce, para soportar el procesamiento de cluster. • Wayback Machine: para soportar indexación por URL y búsquedas. • NutchWak: para permitir indexar por términos y realizar búsquedas. Las estadísticas que se extraen del contenido de los archivos son almacenadas en una base de datos relacional PostgreSQL, además desarrollaron dos sistemas: ARC replicator (rARC) y el Grid Appliance for the Archive (GAppA), los cuales tienen planeado lanzarlos como proyectos open-source. El rARC es un sistema distribuido que permite la replicación de archivos ARC, esto se hace con la idea de no tener toda la data centralizada y así tener mecanismo de respaldo ante la pérdida o corrupción de la data original. El GappA es una plataforma de software diseñada para proporcionar acceso remoto a la data archivada y así permitir la cooperación de varios cluster de computadoras. En la Figura 21 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Capítulo II Marco Conceptual Pág - 43 Figura 21. Portuguese Web Archive 2.9.2 Library of Congress Web Archives La Biblioteca del Congreso preserva y proporciona acceso permanente a los artefactos culturales de Estados Unidos. Esto incluye los materiales digitales, como Internet. En el año 2000 la biblioteca del congreso creó un proyecto piloto para recoger y preservar los sitios Web, se formó un equipo multidisciplinario del personal de la biblioteca con el fin de idear estrategias para evaluar, seleccionar, coleccionar, catalogar y proporcionar acceso al material recogido, desde el año 2003 forma parte de la IIPC. Entre otros archivos temáticos hechos por la biblioteca del congreso se pude mencionar: Elecciones nacionales Estados Unidos, la guerra de Irak y los acontecimientos del 11 de septiembre. Herramientas utilizadas: La biblioteca utiliza software de código abierto como base para algunas herramientas: • Heritrix para rastrear el contenido a preservar. • Wayback para desplegar el contenido preservado. Capítulo II Marco Conceptual Pág - 44 Las posibilidades técnicas para la adquisición, el acceso y almacenamiento se basan en plataformas abiertas como Linux. En la Figura 22 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Figura 22. Library of Congress 2.9.3 UK Web Archive El archivo del reino unido contiene los sitios web que reflejan la diversidad de vida, intereses, y actividades del reino unido, los sitios web de su país se encuentran en constante cambio e incluso algunos desaparecen por eso su objetivo es recopilar, salvaguardar y dar acceso permanente a los principales sitios del reino unido para la generaciones futuras. Entre las características de este proyecto se puede mencionar • Cuenta con un sistema para postulación de sitios web por parte del cualquier usuario, estas postulaciones son luego revisadas y de acuerdo a algunos criterios unas son aprobadas y otras desechadas. • Intentan trabajar en conjunto con los propietarios de los sitios web al momento de hacer la preservación, esto lo hacen en caso de necesitar permisos. • Presentan estadísticas de sitios web preservados por mes. Capítulo II Marco Conceptual Pág - 45 • Físicamente los archivos preservados se encuentran en la biblioteca británica Herramientas utilizadas • Heritrix versión 1.14.4, lo hacen con una política de cortesía que no sobrecargue los servidores web, tomando un delayfactor de 5, por ejemplo si buscar la última URL tomó 800 milisegundos, la siguiente solicitud se hará en 4000 milisegundos (4 segundos), en cuantos a los archivos robots.txt se respetan completamente, y existen limitaciones del número de URL a descargar y el tamaño. • Web Curator Tool (WCT) que fue desarrollado en conjunto por la biblioteca nacional de Nueva Zelanda y la biblioteca británica bajo el auspicio del IIPC. • Utilizar la WTC permite a las personas encargadas de realizar el archivado , manejar el flujo de trabajo siguiendo los siguientes procesos: o Autorización del rastreo: Obtener permisos para obtener el contenido web. o Selección, alcance y planificación: Como, cuando y con qué frecuencia debe realizarse el rastreo. o Descripción: Agregar metadata descriptive. o Rastreo: Realizar la descarga de los sitios web usando Heritrix. o Asegurar calidad: Asegurarse que el rastreo se realizó como se esperaba. En la Figura 23 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Capítulo II Marco Conceptual Pág - 46 Figura 23. UK Web Archive Capítulo III Marco Metodológico Pág - 47 Capítulo III Marco Metodológico En esta sección se explicará que es una metodología de desarrollo de software, además se explicará la metodología seleccionada para la implementación del prototipo de preservación Web. 3.1 Metodología de Desarrollo de Software Realizar un proyecto de desarrollo de software no es una tarea trivial, por ello se deben utilizar técnicas, marcos de trabajo y métodos que faciliten esta tarea formalmente una metodología de desarrollo de software es: “Un marco de trabajo usado para estructurar, planificar y controlar el proceso de desarrollo es un sistema de información” [35] Kenneth Laudon [36] menciona que una buena metodología de desarrollo puede establecer la disciplina necesaria para el desarrollo de un software solo si establece estándares para los requerimientos, equipos de trabajo, diseño, programación y pruebas. Las características deseables que debe tener una metodología son las siguientes [35]: • Debe cubrir todo el ciclo de desarrollo • Verificaciones intermedias • planificación y control • Comunicación efectiva • Contener actividades que mejoren el proceso de desarrollo • Soporte al mantenimiento En cuanto a los tipos de metodología de desarrollo existen claramente dos vertientes: las metodologías tradicionales y las metodologías ágiles, las tradicionales se caracterizan por ser rígidas lo que hace que cambios sobre la marcha sean costosos o difíciles de lograr, por otro lado las metodologías ágiles se centran en adaptación a las situaciones de los proyectos, y para que esta adaptación sea exitosa debe hacerse de forma incremental [37], también vale destacar que en las metodología ágiles se le da mucha importancia a la retroalimentación continua con el cliente, para tratar avances y cambios en el proyecto. En la siguiente sección se explicará en qué consiste la metodología AUP, utilizada en este trabajo especial de grado. Capítulo III Marco Metodológico Pág - 48 3.2 Metodología AUP Ágil UP (Agile Unified Process, AUP) es un proceso de ingeniería de software completo basado en la simplificación del Rational Unified Process (RUP) de IBM. Cuenta con un enfoque disciplinado hacia las prácticas de pruebas industriales para el diseño de software y sistemas dentro de una organización de desarrollo. Este enfoque aplica técnicas ágiles e incluyen desarrollo basado en pruebas (TDD), Modelado basado en desarrollo ágil (AMDD), gestión de cambios ágil, y refactorización de base de datos para mejorar su productividad. El ciclo de vida de Agile UP es serial en lo grande e iterativo en lo pequeño, liberando entregables incrementales en el tiempo. El ciclo de vida de AUP se muestra en la Figura 24. Figura 24. Ciclo de vida de Ágil UP [31]. 3.2.1 Disciplinas o Iteraciones. a) Modelado: La meta de ésta disciplina es entender el negocio de la organización, el dominio del problema que el proyecto aborda e identificar una solución viable para abordar el dominio del problema. No es necesario crear todos los modelos que existan para trabajar en un sistema pero es importante que se tenga en el proyecto aquellos que sean adecuados para la situación Su objetivo es crear modelos que son solamente lo suficientemente Capítulo III Marco Metodológico Pág - 49 buenos para su situación a la mano, siempre puede ir atrás y mejorar su objetivo después cuando necesite más detalles o la situación de cambios. b) Implementación: La meta de ésta disciplina es transformar los modelos en un código ejecutable y realizar una prueba de nivel básico en una unidad particular de prueba. c) Pruebas: La meta de ésta disciplina es ejecutar una evaluación de los objetivos para asegurar la calidad. Esto incluye encontrar defectos, validar que el sistema funcione como fue diseñado y verificar que los requerimientos están completos. d) Despliegue: La meta de ésta disciplina es planificar la entrega del sistema y ejecutar el plan para que el sistema esté disponible para los usuarios finales. e) Administración de la ConFiguración: La meta de ésta disciplina es administrar el acceso a los entregables o productos del proyecto. Esto incluye no sólo el rastreo de versiones del producto en el tiempo, sino que también incluye controlar y administrar los cambios que ocurran. f) Administración del Proyecto: La meta de ésta disciplina es dirigir las actividades que se llevan a cabo en el proyecto. Esto incluye administración del riesgo, la dirección de personas (asignar tareas, seguimiento de los procesos, etc.), y coordinar con los sistemas y personas fuera del alcance del proyecto para que el este termine a tiempo y dentro del presupuesto. g) Ambiente o entorno: La meta de ésta disciplina es apoyar el resto de los esfuerzos para garantizar que, el proceso adecuado, la orientación (normas y directrices) y herramientas (hardware, software, etc.) estén disponibles para el equipo según sea necesario. 3.2.2 Fases Las fases son implementadas de una forma serial a lo largo de un proyecto de Agile UP. Estas fases son: 1) Inicio: El objetivo principal de la fase de inicio es definir el alcance del proyecto, donde se establecen los límites desde dónde el equipo operará. También se realiza un potencial de arquitectura de la aplicación para así obtener financiamiento y la aceptación de las partes interesadas. Principales actividades que se deben realizarpara esta fase: Capítulo III Marco Metodológico Pág - 50 • Modelado de diagramas de casos de uso y diagrama de clases • Diseño de prototipos de interfaz • Realizar plan de pruebas iniciales • Iniciar plan de despliegue • Estimar riesgos y factibiidad del proyecto 2) Elaboración: El principal objetivo de la fase de elaboración es probar la arquitectura del sistema que se va a desarrollar. El punto es asegurar que el equipo puede desarrollar un sistema que pueda satisfacer los requisitos planteados. En esta fase, el equipo también se prepara para la Fase de Construcción. Se comienza con la creación del ambiente propicio para la Construcción mediante la configuración de hardware, software y herramientas. Principales actividades que se deben realizarpara esta fase: • Modelar la arquitectura • Implementar la arquitectura • Validar la arquitectura • Actualizar plan del proyecto 3) Construcción: El objetivo de la fase de Construcción consiste en construir software de trabajo, en una base regular e incremental que cumpla las necesidades prioritarias de los interesados en el proyecto. Principales actividades que se deben realizar para esta fase: • Documentación • Primeras pruebas • Desarrollo de interfaces de activos legados • Evolucionar el entorno de trabajo 4) Transición: Se enfoca en llevar el sistema a producción. Se debe realizar pruebas extensivas a lo largo de esta fase, incluyendo las pruebas beta. Una buena afinación del proyecto tiene lugar en esta fase, incluyendo el trabajo dirigido a los defectos no tan relevantes. El tiempo y esfuerzo necesarios en la Transición varía según el desarrollo del proyecto completo. Capítulo III Marco Metodológico Pág - 51 Principales actividades que se deben realizar para esta fase: • Finalizar documentación • Corregir defectos • Finalizar el paquete de entrega o liberación 3.2.3 Entrega de versiones incrementales en el tiempo Los equipos de desarrollo AUP suelen emitir revisiones al final de cada iteración en escenarios de reproducción, cosa que no sucede en el enfoque “big bang”, donde se cumple con la entrega de todos los programas a la vez. Una versión de desarrollo de una aplicación es algo que podría ser liberado en producción si pasa a través de un módulo de aseguramiento de calidad (también llamado ambiente QA), las pruebas y procesos de despliegue, en pre-producción. 3.3 Arquitectura de software basada en componentes La arquitectura basada en componentes consiste en una rama de la Ingeniería de software que se enfoca principalmente en la descomposición del software en componentes funcionales [34]. Esta descomposición permite convertir componentes pre-existentes en piezas más grandes de software. Un Componente es un elemento de un sistema software que ofrece un conjunto de servicios, o funcionalidades, a través de interfaces definidas [34]. La Figura 25 muestra la notación UML utilizada para representar un componente, las funcionalidades que el componente provee a través de una interfaz son representadas con un círculo al final de una línea desde el componente (1) Figura 25. Componente de software Capítulo III Marco Metodológico Pág - 52 Para especificar los servicios que necesita unos componentes se utiliza una interfaz representada con un semicírculo al final de una línea desde el componente (2) El proceso de construcción de una pieza de software con componentes ya existentes, da origen al principio de reutilización del software, mediante el cual se promueve que los componentes sean implementados de una forma que permita su utilización funcional sobre diferentes sistemas en el futuro. Un componente de software es similar a una caja negra, en donde para el exterior se tiene una especificación general, la cual es independiente de la especificación interna [33]. Existen tres conceptos ligados a la definición de un componente: • Interior del componente: es una pieza de software que cumple con un conjunto de propiedades y que se encuentra conformada como un artefacto del cual se espera que sea reutilizable. • Exterior del componente: es una interface que cumple con un conjunto de propiedades y provee un servicio a usuarios humanos u otros artefactos de software. • Relación interior-exterior: proceso de relación entre el interior y exterior del componente, aquí son claves conceptos como especificación, implementación y encapsulación. Existen 4 principios que definen a un componente de software como elemento de la arquitectura [33]: • Múltiple uso: Un componente debe ser significativo es decir, debe estar dentro de un contexto que permita que su funcionalidad sea útil en la creación de distintas piezas de software. • Contexto no específico: La especificación de un componente debe estar planteada forma general que permita su adaptación en distintos sistemas, sin que el contexto tenga prioridad. • Encapsulación: Especificación interna o implementación del componente, no es investigable a través de la interfaz. El resto de componentes o piezas de software dentro de un sistema no se ven afectados por cambios en el diseño de uno de los componentes. Capítulo III Marco Metodológico Pág - 53 • Una unidad independiente de desarrollo con su propio control de versiones: Permite que un componente pueda ser desarrollado de manera independiente, cambiando el diseño o agregando nuevas funcionalidades, sin afectar significativamente el resto del sistema. Existen 3 aspectos fundamentales respecto a la estructura de la arquitectura basada en componentes 1. El nombre de los componentes: Debe identificar las funcionalidades de un componente así como su uso que tiene como software, generalmente se siguen convenciones, estándares para facilitar la identificación de los componentes. 2. La interface de los componentes: La inteface puede ser vista como el área de intercambio entre el interior y el exterior de un componente de software, a través de la interfaz es que se puede acceder a las funcionalidades que brinda el componente de software más sin embargo no se puede acceder a sus especificación interna, además de la interfaz se debe proporcionar documentación relacionada a como se debe utilizar el componente. 3. Cuerpo y código de Implementación: Es el área del componente donde se encuentra el código o implementación de los servicios y funcionalidades brindados por el componente, debe cumplir con el principio de encapsulación. En la estructura de la arquitectura basada en componentes existen 2 procesos fundamentales para el desarrollo [33]: 1. Ensamblajes de sistema a partir de componentes de software: Este proceso está compuesto por 4 actividades: • Análisis de los componentes: En esta fase de determinar qué tan adecuado es un componte para la construcción del sistema: Esta evaluación se realiza de acuerdo a un conjunto de métricas y criterios establecidos por los analistas y diseñadores de la arquitectura • Adaptación de los componentes: Es posible que el componente esté orientado hacia cierto contexto, atado a funcionalidades específicas , es por ello que en necesario adaptar el componente: Existen 3 maneras de adaptar un componente i. White-Box: cuando el componente debe ser reescrito para operar en Capítulo III Marco Metodológico Pág - 54 conjunto con el resto de componentes del sistema. ii. Grey-Box: cuando el componente incorpora su propio API (Programming Interface). iii. Black-Box: cuando el componente no posee un API. Una interfaz completamente independiente es construida para acceder a los servicios del componente. • Ensamblaje de los componentes: Se integran los componentes a través de la estructura mediante la cual fueron definidos • Mantenimiento: Una vez el funcionamiento ya está en funcionamiento puede que sea necesario hacer cambios en los componentes ya sea por nuevos requerimientos o inconvenientes con los mismos , estos cambios pueden consistir en la reescritura o sustitución del componente 2. Reusabilidad: La capacidad de poder utilizar una pieza de software dentro de otro sistema es una de las características más importantes en una arquitectura basada en componentes, para lograr la reutilización es necesario un esfuerzo extra de los desarrolladores basado en lo siguiente • Una documentación completa de cada atributo y funcionalidad del componente • Una etapa de pruebas organizada y certera que certifique el correcto funcionamiento del componente. • Una definición de comprobaciones precisa para el chequeo de cada parámetro de entrada (input) del componente. • Un manejo de notificaciones de errores preciso, que advierta de la existencia de estos de una forma apropiada. • Desarrollar teniendo en cuenta que el componente puede ser requerido para trabajar en muchos contextos muy diferentes unos de otros (tomar en cuenta la eficiencia, uso de memoria y recursos). Capítulo IV Desarrollo de la Aplicación Pág - 55 Capítulo IV Desarrollo de la aplicación En este capítulo se describirán los objetivos generales y específicos de la aplicación así como la adaptación de la metodología de desarrollo de software Proceso Unificado Ágil dentro del paradigma de desarrollo Basado en Componentes, durante el desarrollo de los módulos de Adquisición y gestión de Almacenamiento. 4.1 Objetivo de la aplicación Los módulos desarrollados para el presente Trabajo Especial de Grado tienen como objetivo satisfacer las necesidades del proyecto asignado a la Facultad de Ciencias de la UCV, de realizar un prototipo para un archivado Web de Venezuela, esta aplicación proporciona los módulos de Adquisición y gestión de Almacenamiento, los cuales permiten realizar suscripciones de rastreos para cosechar sitios web y almacenarlos de forma indexada, además se proporciona la opción de realizar búsquedas mediante el uso de URL. 4.2 Metas de la aplicación • Proporcionar una interfaz administrativa para la suscripción y configuración de rastreos. • Crear el módulo de adquisición para realizar el rastreo de sitios web. • Crear el módulo de Gestión de Almacenamiento para los sitios que han sido cosechados. • Integrar los módulos de adquisición y gestión de almacenamiento desarrollados. • Crear una aplicación para consulta de los sitios rastreados, y conocer sus características principales y las métricas asociadas. • Hacer uso de tecnologías existentes para el desarrollo de los módulos correspondientes. 4.3 Alcance de la aplicación Este desarrollo representa la primera versión del prototipo de Archivo Web que Capítulo IV Desarrollo de la Aplicación Pág - 56 implementa las funcionalidades básicas para adquirir y almacenar sitios web. Debido a que se adopta como política que los sitios Web a preservar sean de investigación científica, educativos o en general representativos de la cultura venezolana, el usuario debe indicar a cual de las categorías anteriores pertenece la pagina web a rastrear, sin embargo no se cuenta con un mecanismo que valide de manera automática que el sitio Web pertenece efectivamente a esta categoría. Se tendrá un espacio limitado para el almacenamiento de los WARC file que hayan sido recolectado a lo largo del proceso de rastreo y el acceso a los documentos en el archivo será a través de direcciones URL, no se proporcionaran otras opciones de búsqueda. Se contará con una interfaz de usuario para la suscripción de rastreos, también se contará con una interfaz para la visualización de las métricas de los WARC file cosechados. 4.4 Adaptación de la metodología AUP usando una arquitectura de software basada en componentes Para el desarrollo del prototipo de Archivado Web se implementaron las fases que sigue la metodología Ágil Up, como se mencionó anteriormente esta metodología sigue los principios de la Modelación Ágil y nos da la oportunidad de crear de manera rápida y sencilla la documentación del proyecto. También se hace uso de los artefactos o entregables UML para explicar cómo se adapta la metodología AUP en una arquitectura de Software Basada en Componentes. A continuación se describe la adaptación de las fases del Proceso Unificado Ágil (AUP) del presente trabajo especial de grado. 4.4 1 Fase de Inicio En esta fase, como se ha descrito anteriormente se indican los requerimientos, objetivos y alcance de la aplicación. 4.4.1.1 Requisitos funcionales: • Registrarse • Iniciar sesión • Crear solicitud de rastreo • Editar solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 57 • Desactivar solicitud de rastreo • Visualizar información de las solicitudes creadas • Almacenar contenedores WARC • Indexar contenedores WARC • Consultar los contenedores indexados. • Consultar las métricas correspondientes a los contenedores y su adquisición Estos requisitos serán explicados en detalle en la sección 4.4.2.4 donde se encuentran los casos de uso 4.4.1.2 Usuario del Sistema Este prototipo debe contar con funcionalidades que permitan el rastreo de sitios web que serán almacenados en contenedores Web e indexados en el sistema para así facilitar la búsqueda por URL. Por tal motivo, el prototipo está diseñado para dos tipos de usuarios: • Usuarios Administrativos: Representa aquellos usuarios que podrán realizar el rastreo de sitios Web • Usuarios Públicos: Representa aquellos usuarios que podrán acceder a consultar las métricas de los sitios web cosechados. 4.4.1.3 Arquitectura inicial de la aplicación Como se ha indicado anteriormente el prototipo realizado se basa en una arquitectura basada en componentes, la cual se visualiza en la Figura 26. Capítulo IV Desarrollo de la Aplicación Pág - 58 Figura 26. Arquitectura inicial del prototipo a implementar 4.4.1.4 Entorno de trabajo Luego de realizar las gestiones pertinentes se obtuvieron los recursos necesarios para adquirir el hardware donde correrá el prototipo de preservación web, se cuenta con un servidor que fue dividido en cinco máquinas virtuales, adicionalmente fue adquirido un disco duro de 1 Terabyte que fue dividido y asignado a cuatro de las máquinas virtuales, este espacio de almacenamiento es necesario para almacenar los archivos WARC cosechados, desde este mismo momento se toma en cuenta la escalabilidad del sistema desde el punto de vista del espacio de almacenamiento, si más espacio es requerido es posible integrar discos duros adicionales. A cada una de las máquinas virtuales se le asignó un nombre y una dirección IP: • ImagenSolr - 190.169.69.154 • Heritrix1 - 190.169.69.155 • Heritrix2 - 190.169.69.156 • Heritrix3 - 190.169.69.157 • Heritrix4 - 190.169.69.158 Capítulo IV Desarrollo de la Aplicación Pág - 59 El software requerido y/o seleccionado es el siguiente: • Sistema Operativo Linux-debian • Lenguaje de programación Ruby y su framework Rails • Rastreador Heritrix • Plataforma de búsqueda Solr • Servidor de base de datos MySQL • Librerías y herramienta WARCTools 4.4.2 Fase de Elaboración En esta fase se diseña y modela la arquitectura del sistema la cual debe dar soporte para lograr la implementación de todos los requerimientos. 4.4.2.1 Prototipos de interfaz de usuario. A continuación se muestran los prototipos de interfaces de usuario diseñados para el sistema. Registrarse Como se puede observar en la Figura 27 se cuenta con un formulario que el usuario debe completar para poder registrarse en el sistema. Capítulo IV Desarrollo de la Aplicación Pág - 60 Figura 27. Prototipo de interfaz Registrarse Iniciar sesión Como se puede observar en la Figura 28 se cuenta con un formulario que tiene 2 campos que el usuario debe completar para iniciar sesión en el sistema. Capítulo IV Desarrollo de la Aplicación Pág - 61 Figura 28. Prototipo de interfaz Iniciar Sesión Lista de solicitudes de rastreo En esta interfaz se puede visualizar de forma tabular los datos de las solicitudes de rastreo que el usuario ha creado, esto se puede apreciar en la Figura 29, adicionalmente se cuenta con un botón para crear nuevas solicitudes de rastreo Figura 29. Prototipo de interfaz Lista de solicitudes de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 62 Crear solicitud de rastreo Como se puede ver en la Figura 30, se cuenta con un formulario que permite crear solicitudes de rastreo Figura 30. Prototipo de interfaz Solicitud de rastreo Editar solicitud de rastreo Como se puede ver en la Figura 31, se cuenta con un formulario que permite editar una solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 63 Figura 31. Prototipo de interfaz Editar solicitud de rastreo Visualizar versiones de un rastreo Como se puede ver en la Figura 32 los datos de las versiones de una solicitud de rastreo son mostrados de forma tabular Figura 32. Ver versiones de un rastreo Hacer búsqueda por URL Capítulo IV Desarrollo de la Aplicación Pág - 64 En esta Figura 33 puede apreciarse un campo de entrada de texto para que el usuario coloque como lo indica el ejemplo la URL que se desea consultar los contenedores. Figura 33. Hacer búsqueda por URL. Listar Componentes Disponibles En la Figura 34 se visualiza que las coincidencias con la URL indicada se listaran de manera tabular con la opción de poder visualizar las métricas de adquisición y del contenedor correspondiente. Figura 34. Lista contenedores disponibles Capítulo IV Desarrollo de la Aplicación Pág - 65 Listar Métricas de Adquisición En la Figura 35 se aprecia una lista donde se ubica la información pertinente con las métricas del proceso de adquisición Figura 35. Listar métricas de adquisición Listar métricas del contenedor En la Figura 36 se aprecia la lista de documentos encontrados dentro del contenedor con sus características principales. Capítulo IV Desarrollo de la Aplicación Pág - 66 Figura 36. Listar métricas del contenedor Capítulo IV Desarrollo de la Aplicación Pág - 67 4.4.2.2 Diagramas de componentes Como se ha comentado anteriormente se decidió utilizar una arquitectura basada en componentes, en la Figura 37 se puede apreciar el diagrama de componentes del módulo de adquisición. Figura 37. Diagrama de componentes módulo de adquisición En la Figura 38 se puede apreciar el diagrama de componentes correspondiente al módulo de gestión de almacenamiento Capítulo IV Desarrollo de la Aplicación Pág - 68 Figura 38 Diagrama de componentes módulo de gestión de almacenamiento En la Figura 39 se puede observar el diagrama de componentes de todo el sistema, esta arquitectura sigue el modelo de referencia de la IIPC que se mostró en la Figura 8 del presente documento. Capítulo IV Desarrollo de la Aplicación Pág - 69 Figura 39. Diagrama de componentes del prototipo de preservación web Capítulo IV Desarrollo de la Aplicación Pág - 70 4.4.2.3 Diagramas de actividades En esta sección se describe las principales actividades que realiza el sistema Crear rastreo En la Figura 40 se muestran todos los pasos necesarios para crear una solicitud de rastreo Figura 40. Diagrama de actividades Crear rastreo Capítulo IV Desarrollo de la Aplicación Pág - 71 Generar rastreo Una vez se encuentra registrada una solicitud de rastreo debe ser colocada en ejecución, en la Figura 41 se pueden observar los pasos necesarios para completar esta actividad Figura 41. Diagrama de actividades Generar rastreo Capítulo IV Desarrollo de la Aplicación Pág - 72 Verificar fin de rastreo Para verificar que rastreos han finalizado se siguen la serie de pasos mostrados en la Figura 42. Figura 42 Diagrama de actividades Verificar fin de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 73 Generar Índices Para la generación de Índices se siguen la serie de pasos mostrados en la Figura 43 Figura 43. Diagrama de Actividades Generador de Índices Capítulo IV Desarrollo de la Aplicación Pág - 74 Almacenar Métricas Para el Almacenamiento de métricas se siguen la serie de pasos mostrados en la Figura 44. Figura 44. Diagrama de actividades módulo de almacenamiento 4.4.2.4 Casos de uso Por cuestiones de legibilidad y mayor entendimiento se decidió separar los casos de uso por módulo, es decir, casos de usos para el módulo de adquisición y casos de uso para el módulo de almacenamiento. Casos de uso módulo de adquisición En la Figura 45 se puede apreciar el diagrama de casos de uso para el módulo de adquisición. Capítulo IV Desarrollo de la Aplicación Pág - 75 Figura 45. Diagrama de casos de uso módulo de adquisición A continuación se encuentra la especificación de los casos de uso del módulo de adquisición: Tabla 1. Caso de uso Registrar Usuario Nombre: Registrar usuario Autor: Jonathan García Número de CU CU-1 Capítulo IV Desarrollo de la Aplicación Pág - 76 Descripción: Le permite al usuario registrarse en la aplicación Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de registrarse 3. El usuario introduce los datos solicitados 4. El sistema valida los datos 5. Se le notifica al usuario que su registro fue exitoso 6. Se le envía un correo electrónico para la activación de la cuenta Flujo Alternativo: 1. 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario se ha registrado Tabla 2. Caso de uso Iniciar Sesión Nombre: Iniciar Sesión Autor: Jonathan García Número de CU CU-2 Capítulo IV Desarrollo de la Aplicación Pág - 77 Descripción: Le permite al usuario iniciar sesión en el sistema Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de iniciar sesión 3. El usuario introduce los datos solicitados 4. El sistema valida los datos 5. Se le notifica al usuario que su inicio de sesión fue exitoso 6. Se redirecciona al usuario al inicio de la aplicación Flujo Alternativo: 1. 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha iniciado sesión en la aplicación Tabla 3. Caso de uso Cambiar Contraseña Nombre: Cambiar contraseña Autor: Jonathan García Número de CU CU-3 Capítulo IV Desarrollo de la Aplicación Pág - 78 Descripción: Le permite al usuario cambiar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario selecciona la opción de cambiar contraseña 2. El usuario introduce su contraseña actual y la nueva contraseña 3. El sistema valida los datos 4. El sistema almacena la nueva contraseña Flujo Alternativo: 4.1 Si las contraseñas no coinciden se le notifica al usuario Post-condiciones: El usuario ha cambiado su contraseña Tabla 4. Caso de uso Recuperar Contraseña Nombre: Recuperar contraseña Autor: Jonathan García Número de CU CU-4 Capítulo IV Desarrollo de la Aplicación Pág - 79 Descripción: Le permite al usuario recuperar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de recuperar contraseña 3. El usuario introduce su correo electrónico 4. El sistema valida los datos 5. Se le envía un correo electrónico al usuario con las instrucciones para recuperar su contraseña Flujo Alternativo: 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha recuperado su contraseña Tabla 5. Caso de uso Consultar lista de solicitudes de rastreo Nombre: Consultar lista de Solicitudes de rastreo Autor: Jonathan García Número de CU CU-5 Capítulo IV Desarrollo de la Aplicación Pág - 80 Descripción: Le permite al usuario recuperar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 5. El usuario ingresa a la aplicación 6. El usuario selecciona la opción de recuperar contraseña 7. El usuario introduce su correo electrónico 8. El sistema valida los datos 9. Se le envía un correo electrónico al usuario con las instrucciones para recuperar su contraseña Flujo Alternativo: 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha recuperado su contraseña Tabla 6. Caso de uso Crear solicitud de rastreo Nombre: Crear solicitud de rastreo Autor: Jonathan García Número de CU CU-6 Capítulo IV Desarrollo de la Aplicación Pág - 81 Descripción: Permite crear una solicitud de rastreo Actores: Usuario Pre-condiciones: CU-2 Flujo Normal: 1. El usuario selecciona la opción de crear una solicitud de rastreo 2. El usuario introduce los parámetros de configuración del rastreo 3. El sistema valida los datos 4. La solicitud de rastreo es almacenada en base de datos 5. Se asigna el rastreo a una de las máquinas virtuales 6. En la máquina virtual seleccionada se crea un job con los parámetros proporcionados por el usuario 7. la solicitud de rastreo se agrega en el crontab de la máquina virtual seleccionada Flujo Alternativo: 4.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: Se ha creado una nueva solicitud de rastreo. Tabla 7. Caso de uso Editar Solicitud de rastreo Nombre: Editar solicitud de rastreo Autor: Jonathan García Número de CU CU-7 Capítulo IV Desarrollo de la Aplicación Pág - 82 Descripción: Permite editar una solicitud de rastreo Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona el rastreo a editar 2. Se cargan los parámetros del rastreo 3. El usuario modifica los parámetros del rastreo 4. Se almacenan en base de datos los nuevos parámetros 5. Se modifica en la máquina virtual respectiva el archivo de parámetros configuración del job asociado al rastreo 6. Si la frecuencia del rastreo fue cambiada , se edita la entrada en el crontab de la máquina virtual Flujo Alternativo: Post-condiciones: Se ha editado una solicitud de rastreo Tabla 8. Caso de uso Desactivar solicitud de rastreo Nombre: Desactivar solicitud de rastreo Autor: Jonathan García Número de CU CU-8 Capítulo IV Desarrollo de la Aplicación Pág - 83 Descripción: Permite desactivar una solicitud de rastreo Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona la opción de desactivar solicitud de rastreo 2. Se le pregunta al usuario si está seguro de desactivar la solicitud de rastreo 3. Si la respuesta del usuario es afirmativa se marca en base de datos la solicitud como inactiva 4. Si la solicitud de rastreo es periódica, se elimina del administrador de tareas programadas la tarea asociada. Flujo Alternativo: Post-condiciones: Se le ha eliminado una solicitud de rastreo Tabla 9. Caso de uso Generar rastreo Nombre: Generar rastreo Autor: Jonathan García Número de CU CU-9 Descripción: Ejecutar un rastreo programado Actores: sistema Pre-condiciones: Flujo Normal: 1. El crontab del sistema ejecuta un script para colocar el rastreo en ejecución 2. Se valida que el rastreo pudo ser colocado en ejecución 3. Se almacena en base de datos, los datos asociados a la versión del rastreo que se acaba de colocar en ejecución Flujo Alternativo: Post-condiciones: Se ha colocado en ejecución un rastreo programado Capítulo IV Desarrollo de la Aplicación Pág - 84 Tabla 10. Caso de uso Verificar Fin de Rastreos Nombre: Verificar fin de rastreos Autor: Jonathan García Número de CU CU-10 Descripción: Se verifica que rastreos han finalizado y se marcan para ser indexados Actores: Sistema Pre-condiciones: Flujo Normal: 1. Se lee el archivo que contiene la lista de rastreos activos 2. Se recupera el archivo log asociado a un rastreo 3. Se parsea el archivo log para obtener el estatus en el que se encuentra el rastreo 4. Si el estatus es igual a “finish” , se coloca una entrada en el archivo de rastreos por indexar y se borra del archivo de rastreos activos 5. Se repite el proceso desde el paso 2 hasta que toda la lista de rastreos en activos haya sido procesada Flujo Alternativo: Post-condiciones: Se ha comprobado que rastreos han finalizado y se han marcado para ser indexados Tabla 11. Caso de uso Consultar Versiones de una Solicitud de Rastreo Nombre: Consultar versiones de solicitud de rastreo Autor: Jonathan García Número de CU CU-11 Capítulo IV Desarrollo de la Aplicación Pág - 85 Descripción: Consultar datos de un rastreo Actores: usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona un rastreo para consultar sus versiones 2. Se leen de base de datos las versiones asociadas al rastreo 3. Se le muestran los datos al usuario de forma tabular Flujo Alternativo: Post-condiciones: Se han consultado las versiones de una solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 86 Casos de uso módulo de gestión de almacenamiento En la Figura 46 se puede apreciar el diagrama de casos de uso para el módulo de gestión de almacenamiento Figura 46. Diagrama de casos de uso módulo de almacenamiento A continuación se encuentra la especificación de los casos de uso del módulo de almacenamiento Capítulo IV Desarrollo de la Aplicación Pág - 87 Tabla 12. Caso de uso Indexar Sitios Cosechados Nombre: Indexar Sitios Cosechados Autor: Lorena Rivero Número de CU CU- 12 Descripción: Permite indexar en la plataforma de búsqueda Solr los contenedores que hayan sido previamente cosechados Actores: Sistema Operativo Pre-condiciones: Se debe tener programado una tarea en el crontab del sistema Linux y un directorio home y un contenedor previamente cosechado Flujo Normal: 1. El sistema ejecuta el script de indexado según se haya programado en el controlador de tareas. 2. Se verifica si se tiene algo que indexar. 3. En caso de haber contenedores a indexar se agrega en el índice de la plataforma de búsqueda 4. Se elimina el registro temporal para optimizar almacenamiento. Flujo Alternativo: 3.1 Si no se tiene que indexar, no se agrega nada en la plataforma de búsqueda y el proceso muere. Post-condiciones: Se ha verificado contenedores a indexar y añadidos en el índice de la plataforma de búsqueda. Tabla 13. Caso de uso Almacenar Métricas Nombre: Almacenar Métricas Autor: Lorena Rivero Número de CU CU-13 Capítulo IV Desarrollo de la Aplicación Pág - 88 Descripción: Permite almacenar en la Base de Datos las métricas pertinentes a los contenedores WARC cosechados e indexados previamente. Actores: Sistema Operativo Pre-condiciones: CU-12 Flujo Normal: 1. Se hace la llamada a la herramienta WARCTools para obtener las estadísticas y métricas del contenedor 2. Dichas métricas son almacenadas en la Base de Datos registrando el id del contenedor como identificador. Flujo Alternativo: Post-condiciones: Se ha almacenado en Base de Datos las métricas pertinentes a un contenedor seleccionado. Tabla 14. Caso de uso Hacer Búsqueda por URL Nombre: Hacer Búsqueda por URL Autor: Lorena Rivero Número de CU CU- 14 Descripción: Permite al usuario hacer una búsqueda de los contenedores existentes en el repositorio. Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario ingresa en el campo de búsqueda una URL que desee verificar si se ha cosechado 2. La plataforma de búsqueda verifica si existe un registro de esa URL Flujo Alternativo: Post-condiciones: El usuario habrá realizado una consulta para verificar la existencia de contenedores según la URL deseada. Capítulo IV Desarrollo de la Aplicación Pág - 89 Tabla 15. Caso de uso Listar Contenedores Disponibles Nombre: Listar Contenedores Disponibles Autor: Lorena Rivero Número de CU CU- 15 Descripción: Lista los resultados encontrados según la consulta que se haya realizado Actores: Usuario Pre-condiciones: CU-14 Flujo Normal: 1. Se procesa la URL que el usuario ingreso en la entrada de texto. 2. Se lista los contenedores disponibles en el sistema según la coincidencia. Flujo Alternativo: 2.1 En caso que no ocurran incidencias con la consulta realizada por el usuario, se muestra un mensaje que indica que no hay incidencias. Post-condiciones: El sistema habrá listado todas las coincidencia existentes para la consulta realizada Tabla 16. Caso de uso Listar Métricas del Contenedor Nombre: Listar Métricas del Contenedor Autor: Lorena Rivero Número de CU CU-16 Capítulo IV Desarrollo de la Aplicación Pág - 90 Descripción: Permite consultar las métricas existentes de un contenedor seleccionado. Actores: Usuario Pre-condiciones: CU-15 Flujo Normal: 1. El usuario selecciona el warcid del contenedor al que desea consultar. 2. El sistema hace consulta a la base de datos y muestra la lista de contenedores. Flujo Alternativo: Post-condiciones: El usuario habrá consultado las métricas del contenedor que este haya seleccionado. Tabla 17. Caso de uso Listar Métricas de Adquisición Nombre: Listar Métricas de Adquisición Autor: Lorena Rivero Número de CU CU-17 Descripción: Permite consultar las métricas de adquisición o cosecha del contenedor seleccionado Actores: Usuario Pre-condiciones: CU-15 Flujo Normal: 1. El usuario selecciona la opción de visualizar métricas de adquisición. 2. El sistema ubica los archivos de información y lista las métricas relevantes del proceso de Adquisición. Flujo Alternativo Post-condiciones: El usuario habrá consultado las métricas de adquisición y cosecha de un contenedor en específico. Capítulo IV Desarrollo de la Aplicación Pág - 91 4.4.2.5 Diagramas de secuencia Por cada caso de uso se diseñó un diagrama de secuencia para ilustrar de mejor manera su funcionamiento, al igual que los casos de uso fueron separados por módulos. Diagramas de secuencia módulo de adquisición Los diagramas pertenecientes al módulo de adquisición son los siguientes Figura 47. Diagrama de secuencia Registrar Usuario Capítulo IV Desarrollo de la Aplicación Pág - 92 Figura 48. Diagrama de secuencia Iniciar Sesión Figura 49. Diagrama de secuencia Recuperar Contraseña Capítulo IV Desarrollo de la Aplicación Pág - 93 Figura 50. Diagrama de secuencia Cambiar Contraseña Figura 51. Diagrama de secuencia Consultar lista de solicitudes de rastreos Capítulo IV Desarrollo de la Aplicación Pág - 94 Figura 52. Diagrama de secuencia Crear Solicitud de Rastreo Figura 53. Diagrama de secuencia Editar Solicitud de Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 95 Figura 54. Diagrama de secuencia Desactivar Solicitud de rastreo Figura 55. Diagrama de secuencia Generar Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 96 Figura 56. Diagrama de secuencia Verificar Fin de Rastreo Figura 57. Diagrama de secuencia Consultar Versiones de Solicitud de Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 97 Diagramas de secuencia módulo de gestión de almacenamiento Los diagramas pertenecientes al módulo de gestión de almacenamiento son los siguientes: Figura 58. Diagrama de secuencia Indexar Sitios Rastreados Capítulo IV Desarrollo de la Aplicación Pág - 98 Figura 59. Diagrama de secuencia Almacenar Métricas Figura 60. Diagrama de secuencia hacer Búsqueda por URL Capítulo IV Desarrollo de la Aplicación Pág - 99 Figura 61. Diagrama de secuencia Listar métricas del contenedor Figura 62. Diagrama de secuencia Listar métricas de Adquisición Capítulo IV Desarrollo de la Aplicación Pág - 100 Figura 63. Diagrama de secuencia Listar métricas del contenedor 4.4.2.6 Modelo de datos Se diseñó y construyó una base de datos para almacenar los datos propios de la preservación, y que además permita cumplir con la política del archivo, en esta base de datos están las semillas o URLs de los sitios a preservar, los datos de configuración de los rastreos y la frecuencia de rastreo, además almacena las métricas y datos descriptivos de las versiones. El modelo relacional de la base de datos usada en la aplicación puede verse en la Figura 64. Capítulo IV Desarrollo de la Aplicación Pág - 101 Figura 64. Modelo relacional de la base de datos utilizada en la aplicación 4.4.3 Fase de Construcción En este punto se explica cómo se llevó a cabo la implementación de los requerimientos del prototipo de preservación web, adaptando el desarrollo a una arquitectura basada en componentes. Implementación de componentes Para el desarrollo del prototipo de preservación web se utilizó software existente tales como el rastreador Heritrix, la plataforma de búsqueda Solr, la librería de software libre WARCTools, la base de datos MySQL y el programador de tareas automáticas cron del sistema operativo Debian. Adicionalmente se implementaron varios componentes para cubrir todos los requerimientos que el prototipo debe satisfacer, a continuación se explicará cómo fue llevada a cabo la implementación de cada uno de ellos. Capítulo IV Desarrollo de la Aplicación Pág - 102 Aplicación administrativa Se desarrolló una aplicación administrativa para gestionar la creación y configuración de rastreos, consultar su estatus y una vez finalizados visualizar algunas de sus métricas. Esta aplicación fue implementada utilizando el lenguaje Ruby y su framework Rails, para la persistencia de datos se utilizó la base de datos MySQL. La aplicación cuenta con autenticación y registro de usuarios, para implementar esta funcionalidad se utilizó la gema devise (para información de instalación y configuración revisar la sección A-2 del anexo) Las opciones para gestionar los rastreos se describen a continuación: Crear rastreo, Editar rastreo Para la creación y edición de rastreos se utilizó un mismo formulario, los datos que el usuario debe introducir se pueden ver en la Figura 65. Figura 65. Formulario para creación de rastreos. Capítulo IV Desarrollo de la Aplicación Pág - 103 En caso de que el usuario quiera editar un rastreo, en el formulario se cargan sus datos asociados, tal como se puede apreciar en la Figura 66. Figura 66. Formulario para la edición de rastreos Luego de que el usuario decide crear o editar un rastreo, se crea una instancia del modelo que representa a los rastreos Figura 67. Código del Modelo Rastreo Como se puede apreciar en la Figura 67, el modelo tiene las siguientes validaciones: • Formato de la URL • Presencia de los campos nombre y URL Luego de que el modelo es validado se procede a seleccionar la máquina virtual donde residirá el job asociado al rastreo, la selección se hace utilizando turno rotatorio. Seguidamente se edita el archivo de configuración del job crawler-beans.cxml, para ello se utilizó la gema nokogiri, como se mencionó en las características de Heritrix sus archivos de configuración están basados en beans que tienen estructura XML , con este Capítulo IV Desarrollo de la Aplicación Pág - 104 gema lo que se hace es localizar los tag correspondientes a las configuraciones seleccionadas y asignarles el valor introducido por el usuario, luego de que el archivo de configuración es editado se utiliza el comando scp para moverlo a la máquina virtual donde se encuentra su job, parte del código que implementa esta funcionalidad se puede visualizar en la Figura 68. Figura 68. Edición del archivo de configuración del rastreo Seguidamente se ejecuta el script agregar_cron.sh para crear una entrada en el crontab de la máquina virtual seleccionada, donde se especifica la frecuencia con que se ejecutará la solicitud de rastreo, tal como se puede ver en la Figura 69. Capítulo IV Desarrollo de la Aplicación Pág - 105 Figura 69 Agregar solicitud del rastreo al crontab Desactivar rastreo Esta opción permite desactivar una solicitud de rastreo, su implementación consiste en eliminar del crontab de la máquina virtual donde fue asignado su entrada correspondiente. Visualizar versiones de un rastreo Esta opción permite visualizar de forma tabular todas las versiones pertenecientes a una solicitud de rastreo, tal como se puede apreciar en la Figura 70. Figura 70. Versiones de un rastreo Generador de rastreos Este componente fue implementado utilizando el lenguaje shell script, en él se declaran los comandos necesarios para interactuar con el Api rest de Heritrix con el fin de colocar en ejecución un rastreo programado. Capítulo IV Desarrollo de la Aplicación Pág - 106 Figura 71. Generar rastreo En la Figura 71 se pueden apreciar los comandos necesarios para colocar un rastreo en ejecución: Con el comando build se lee el archivo de configuración y se crean todas las instancias necesarias y el entorno para que el rastreo pueda ser colocado en ejecución Con el comando launch se le da la orden a Heritrix de que cree las instancias necesarias para crear una nueva versión del rastreo Con el comando unpause el rastreo se coloca en progreso (por defecto heritrix ‘lanza los rastreos con estatus de pause’) Antes de correr estos comando se valida que no exista una versión del job en ejecución, ya que solo puede estar en progreso una versión del job en un momento dado, si se encuentra una versión en progreso el script finaliza Adicionalmente a las llamadas al Api rest de heritrix , se hace conexión con la base de datos MySQL para insertar los datos correspondiente a la versión del rastreo que se acaba de colocar en ejecución, en la Figura 72 se puede apreciar el código que invoca al script que se encarga de hacer la inserción en base de datos. Figura 72. Invocación de script para inserción en base de datos El código del script insert_databse.sh se puede apreciar en la Figura 72: Figura 73. Script insert_database.sh Capítulo IV Desarrollo de la Aplicación Pág - 107 Verificador de rastreos finalizados Este componente fue implementado utilizando el lenguaje shell script, es ejecutado periódicamente por el crontab del sistema, la periodicidad de ejecución se decidió de que fuese de 2 veces por día Internamente se lee un archivo llamado <rastreos_activos>.txt que contiene una lista de los rastreos que se encuentran en progreso, en la Figura 74 se puede ver un ejemplo de cómo son las entradas de este archivo Figura 74. Ejemplo de archivo rastreos_activos.txt Para verificar en qué estatus se encuentra un rastreo, se revisa en el directorio correspondiente a la versión del job si existe el directorio reports, si este directorio existe quiere decir que el rastreo finalizó y debe ser indexado, seguidamente el rastreo se marca como por indexar, es decir, se agrega una entrada a la lista de rastreos por indexar en el archivo <ip_maquina>.txt, en la Figura 75 se puede visualizar parte del código que implementa esta funcionalidad Capítulo IV Desarrollo de la Aplicación Pág - 108 Figura 75. Verificados de rastreos finalizados Además se insertan en base de datos los datos de duración y tamaño de la versión del rastreo, así como su warc id, en la Figura 76 se puede ver el código que implementa esta funcionalidad Figura 76. Script udpate_version.sh Aplicación de Consulta Se desarrolló una aplicación para permitir al usuario consultar la información relevante sobre los contenedores que fueron cosechados, las métricas de cada contenedor y las métricas del proceso de adquisición correspondientes al mismo. Esta aplicación fue implementada utilizando el lenguaje Ruby y su framework Rails, para la persistencia de datos referidos a las métricas sobre el contenedor se utilizó la base de datos MySQL y la plataforma de búsqueda Solr para poder llevar a cabo el proceso de indexación y consulta de los contenedores disponibles. Capítulo IV Desarrollo de la Aplicación Pág - 109 Lo primero que se debe hacer al momento de consultar los contenedores disponibles es colocar en el campo de entrada de texto la URL (palabra clave) del sitio al cual se le ha realizado el proceso de adquisición. Como se muestra en la Figura 77. En caso que exista coincidencia con la palabra clave se muestra una lista con todos los contenedores con los que se encontró relación mostrando la información más relevante, además de las métricas de adquisición y de los contenedores en particular. Figura 77. Listado de contenedores Disponibles. La información que se despliega en primer momento es toda la información que fue almacenada en el índice de la plataforma Solr, esta información abarca: • Id Del WARC. • URL. • Ruta donde se encuentra el WARC. • Máquina en la cual se almacenó el WARC. • Fecha de Inicio del proceso de rastreo. • Fecha en la que finalizó el rastreo. • Fecha en la que se llevó a cabo la indexación. • Nombre del WARC Además de la información anterior, la aplicación tiene dos opciones para mostrar métricas de dos tipos distintos. Estas métricas provienen de la búsqueda realizada dentro de los archivos informativos que se obtienen del proceso de adquisición y de la navegación superficial sobre los contenedores gracias a la herramienta WARCTools. Estas métricas se dividen en dos tipos: Capítulo IV Desarrollo de la Aplicación Pág - 110 Métricas del proceso de Adquisición: Se muestra la información correspondiente al proceso de adquisición del contenedor seleccionado tal como se puede apreciar en la Figura 78. En esta sección se muestra información sobre: • Por tipo de formato, se tiene cuántos documentos existen y cuanto ocupan en espacio medido en bytes. • Tiempo que tardó siendo rastreado. • Cuántas semillas han sido rastreadas para ese contenedor. Cabe destacar que por políticas del prototipo se determinó utilizar una sola por contenedor. • Host que han sido visitados para el rastreo. Depende de las redirecciones que se consigan en el sitio a rastrear. • Cantidad de URLs procesadas y cuantas procesadas con o sin éxito o han sido descartadas. • Total de bytes que han sido cosechados. • Promedio de tiempo de cosecha de URL por segundo y cantidad de KB por segundo. Figura 78. Tabla de Métricas de Adquisición de un contenedor. Además de las métricas de Adquisición se ofrece una tabla con información adicional que complementa todo lo que se puede saber sobre el proceso de adquisición. Métricas del contenedor: Se muestra la información del contenedor y de cómo ha sido cosechado en el formato WARC. 1. Tiempo que tardó en indexarlo en la plataforma de búsqueda Solr. 2. Información resumida sobre el contenedor: Capítulo IV Desarrollo de la Aplicación Pág - 111 a. Por cada tipo de WARC encontrado, la cantidad existente dentro del mismo (los tipos de WARC han sido detallados en secciones anteriores). b. Cantidad de extensiones DNS, cabeceras de información de tipo WARC, que poseen información sobre los documentos y cantidad de documentos HTTP. 3. Información detallada de cada documento encontrado dentro del contenedor WARC. a. Offset o desplazamiento dentro del contenedor b. WARC type c. URI que corresponde a ese documento dentro de contenedor. d. El tamaño del documento e. Formato que posee el documento en específico 4. Tiempo de respuesta de la búsqueda medido en milisegundos. En la Figura 79 se puede ver un ejemplo de la información de las métricas del contenedor para un WARC en específico. Figura 79. Métricas de un contenedor WARC Generador de Índices Este componente está constituido por un script que verifica 4 (cuatro) archivos de texto, cada uno ubicado en su respectiva máquina de Heritrix, estos archivos representan los contenedores que se encuentren pendientes para indexar por cada máquina, cada archivo lleva como nombre la IP de la máquina asociada. Estos archivos poseen un formato Capítulo IV Desarrollo de la Aplicación Pág - 112 predeterminado por el equipo de trabajo para que el prototipo sea capaz de procesarlos de manera correcta. En la Figura 80 se muestra un ejemplo del formato utilizado para estos archivos. Figura 80. Ejemplo formato Archivo de rastreos por indexar Como puede apreciarse en la Figura 80, el formato que se utiliza para indicar que hay un contenedor por indexar consiste en la ruta completa donde se encuentra la carpeta raíz del contenedor WARC. El componente de Generar Índices, lee los archivos de texto antes mencionados y en caso de que estos no estén vacíos se procede a recolectar la información correspondiente dentro de las rutas que indica cada línea del archivo, para llevar a cabo el proceso de indexación. En la Figura 81 se puede visualizar un extracto del código correspondiente a la implementación. Capítulo IV Desarrollo de la Aplicación Pág - 113 Figura 81. Código Shell script Procesar Archivo. Luego que se realice la recolección de información pertinente se crea la petición HTTP hacia Solr para que indexe el contenedor indicado. Una vez realizada la indexación se escribe una línea en el archivo de contenedores procesados para indicar que fue indexado correctamente además se borra la línea correspondiente a este en el archivo de contenedores por indexar. Este proceso se coloca en el administrador de tareas programadas CRON para que se ejecute diariamente a las doce de la madrugada (12:00 am). Almacenamiento de métricas Este componente se constituye también por un Shell Script, que se ejecutará cada vez que el verificador de archivos pendientes e indexación lo haga, ya que los parámetros de entrada necesarios para la ejecución provienen de este componente. El componente recibe como parámetros el archivo resultado de la llamada a la librería de WARCTools, que contiene la información sobre los documentos que se encuentran dentro del contenedor WARC, el ID del archivo WARC, el tiempo de indexación por contenedor y la ruta del archivo. Capítulo IV Desarrollo de la Aplicación Pág - 114 Al ejecutar el programa se inserta en la base de Datos el tiempo de indexación para el contenedor al que se le están almacenando las métricas, cabe destacar que este tiempo se almacena en milisegundos. Luego, se hace una navegación sobre el archivo de texto antes mencionado y se procesa la información encontrada para así realizar una petición de inserción sobre la base de datos. El archivo contiene información como: • Ruta del contenedor • Desplazamiento del documento en particular dentro del contenedor (offset). • Tipo de WARC, que se han comentado anteriormente. • URI del documento en particular. • ID del registro WARC • Tipo de contenido (dns, http, warc). • El tamaño del documento. En la Figura 82 se muestra un ejemplo de la información que contiene el archivo que arroja como salida la herramienta WARCTool. Figura 82. Archivo resultado de la ejecución de la herramienta WARCTools. De este archivo se desea almacenar en base de Datos la información más relevante para poder realizar agrupación sobre esta información y poder extraer información de interés para el usuario final brindado la oportunidad de que pueda realizar análisis sobre Capítulo IV Desarrollo de la Aplicación Pág - 115 estos datos. En la Figura 83 se puede observar el código que implementa esta funcionalidad Figura 83. Código Shell Script para Almacenar Métricas del contenedor. Capítulo IV Desarrollo de la Aplicación Pág - 116 4.4.4 Fase de transición En esta sección se explicará cómo fue realizada la transición desde el entorno de desarrollo hacia el entorno de producción, se explicará qué pruebas se realizaron para validar el prototipo y se mostrará información de métricas pertenecientes a los rastreos realizados en las pruebas y los tiempos de indexación de los contenedores. Además se mostrará información relevante asociada a los contenedores WARC y a los documentos contenidos dentro del mismo. 4.4.4.1 Puesta en producción del prototipo de preservación web En este punto se hace la transición desde el entorno de desarrollo hacia el entorno de producción, a continuación se listan las máquinas virtuales y se menciona que componentes del sistema fueron alojados en cada una de ellas: • Heritrix 1: En esta máquina se encuentra la aplicación administrativa para configuración de rastreos y Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 2: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 3: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 4: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Imagen Solr: En esta máquina se encuentra la aplicación de consulta, el servidor de base de datos MySQL y el software correspondiente a la plataforma de búsqueda Solr. 4.4.4.2 Pruebas Funcionales En esta sección se muestran las pruebas realizadas para verificarel comportamiento del prototipo y el cumplimiento de los requisitos funcionales. Lista de sitios Web a cosechar Para hacer pruebas en el prototipo se decidió elaborar una lista de sitios web a cosechar, estos sitios son pertenecientes a universidades venezolanas así como a instituciones culturales y/o investigativas, la lista es la siguiente: Capítulo IV Desarrollo de la Aplicación Pág - 117 • Universidad Central de Venezuela http://www.ucv.ve/ • Universidad Simón Bolívar http://www.usb.ve/ • Universidad de Oriente http://www.udo.edu.ve/ • Universidad de los Andes http://www.ula.ve/ • Universidad de Carabobo http://www.uc.edu.ve/ • Universidad del Zulia http://www.luz.edu.ve/ • PDVSA la estancia http://www.pdvsalaestancia.com/ • Instituto Venezolano de Investigaciones Científicas (IVIC) http://www.ivic.gob.ve/ • Ministerios de Ciencia, Tecnología e innovación (MCTI) http://www.mcti.gob.ve/ • Fundación Museos Nacionales http://www.fmn.gob.ve/ Casos de prueba Tabla 18. Prueba Validación de datos de entrada Nombre Validación de datos de entrada Tipo Prueba del sistema Descripción Verificar que los datos de entrada tengan el formato adecuado Procedimiento Cuando se quiere crear una solicitud de rastreo es necesario que los datos tengan el formato adecuado , si esto no ocurre se le informa al usuario que existen errores en los datos introducidos Existen 3 escenarios de cómo los datos pueden ser introducidos: • El usuario deja los campos de formulario en blanco • El usuario introduce datos con un formato incorrecto • El usuario introduce datos con un formato correcto Resultado de la prueba Si el usuario introduce datos con formato incorrecto o los deja en blanco se le muestra un mensaje de error como el que puede apreciarse en la Figura 84 Capítulo IV Desarrollo de la Aplicación Pág - 118 Figura 84. Validación de datos de entrada. Tabla 19. Prueba creación de job y su archivo de configuración Nombre Job creado en la máquina virtual seleccionada y que su archivo de configuración reciba los parámetros de forma exitosa Tipo Prueba del sistema Descripción Se desea verificar que un job es creado correctamente en la máquina virtual donde fue asignado, además se quiere verificar que el archivo de configuración del job contiene los valores proporcionados por el usuario Capítulo IV Desarrollo de la Aplicación Pág - 119 Procedimiento Cuando se hace la creación de una solicitud de rastreo, se selecciona por turno rotatorio en que máquina debe ser creado el job, seguidamente se crea el job en la máquina seleccionada Si un rastreo es creado de forma exitosa se hace una inspección sobre el archivo de configuración del job asociado al rastreo, tal que se valide que los parámetros introducidos por el usuario se encuentren en el archivo de configuración Se crea un trabajo de rastreo por cada entrada de la lista de sitios web a cosechar y se va verificando si el archivo de configuración del job posee los parámetros especificados Resultado de la prueba Cuando un job se crea de forma exitosa , se crea una carpeta asociada tal como se puede ver en la Figura 85 Cuando el archivo de configuración con la semilla introducida por el usuario se puede ver en la Figura 86. Se hicieron las pruebas con la lista de sitios web a cosechar mencionada anteriormente y se pudo observar que todos los job fueron creados y configurados exitosamente Figura 85. Job creado exitosamente Figura 86. Semilla en el archivo de configuración del job Capítulo IV Desarrollo de la Aplicación Pág - 120 Tabla 20. Prueba colocación de rastreo en ejecución Nombre Rastreo colocado en ejecución cuando se ejecuta el crontab Tipo Prueba del sistema Descripción Cuando una solicitud de rastreo almacenada en el crontab es ejecutada se desea verificar que el proceso fue exitoso Procedimiento Luego de que las solicitudes de rastreo almacenadas en el crontab del sistema son ejecutados, se verifica que cada job sea colocado en ejecución de forma exitosa , cuando esto sucede se crea un carpeta como la que se puede ver en la Figura 88 las solicitudes de rastreos con almacenadas en el crontab tal como se puede apreciar en la Figura 87 Resultado de la prueba Se tomaron como casos de pruebas la lista de sitios web a cosechar descrita anteriormente y el resultado fue el siguiente: Para la primera corrida cada job fue colocado en ejecución de forma satisfactoria , para ejecuciones subsiguientes se pudo observar que el si una versión del job se encuentra en progreso , y se intenta colocar en ejecución otra versión del mismo job heritrix lanza un error. Por ello se colocó un validación de que sólo puede estar en ejecución una sola versión por job. F igura 87. Solicitud de rastreo almacenada en el crontab Capítulo IV Desarrollo de la Aplicación Pág - 121 Figura 88. Rastreo colocado en ejecución Tabla 21. Prueba verificar rastreos finalizados Nombre Verificación de rastreos finalizados Tipo Prueba del sistema Descripción Cuando una solicitud de rastreo almacenada en el crontab es ejecutada se quiere verificar que el proceso fue exitoso Procedimiento Se toma como entrada la lista de rastreos activos y se ejecuta el script encargado de verificar rastreos finalizados , seguidamente se revisa la lista de rastreos por indexar para verificar que efectivamente todos los rastreos que estaban en la lista de activos y hayan finalizado se encuentren en esta lista Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 89 y se obtuvo como salida la lista que puede verse en la Figura 90, revisando ambas listas se puede observar que son iguales por lo que para este el proceso de verificar finalizados funcionó correctamente Capítulo IV Desarrollo de la Aplicación Pág - 122 Figura 89. Rastreos finalizados Figura 90. Rastreos por indexar. Capítulo IV Desarrollo de la Aplicación Pág - 123 Tabla 22. Prueba verificar Indexar Sitios rastreados. Nombre Indexar Sitios rastreados Tipo Prueba del sistema Descripción Cuando existe contenedores en lista de pendientes se quiere verificar que efectivamente haya sido indexado. Procedimiento Se toma como entrada la lista de rastreos por indexar y se ejecuta el script encargado de verificar si hay contenedores pendientes por indexar, seguidamente se procesa la información que va a ser indexada y se procede a realizar la petición HTTP hacia Solr. Se revisa la lista de índices en la plataforma para verificar que efectivamente todos los contenedores que estaban en la lista de pendientes hayan sido indexados. En caso que los contenedores no cuenten con toda la información no se realiza el proceso de indexación. Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 90 y se obtuvo como salida el XML de Solr que puede verse en la Figura 91. Revisando ambas listas se puede observar que la cantidad de contenedores en lista de pendientes han sido indexados y cuentan con la información de los contenedores correspondientes. Se prueba el caso en el que uno de los contenedores no cuenten con información suficiente para la indexación (Figura 92.) , o que los datos tengan formato incorrecto si algunos de estos eventos ocurre el sistema advierte que no se llevará a cabo la petición a Solr y no se borra de la lista de pendientes por indexar. Capítulo IV Desarrollo de la Aplicación Pág - 124 Figura 91. XML de Indexación de contenedores rastreados por Solr. Capítulo IV Desarrollo de la Aplicación Pág - 125 Figura 92. Salida estándar de los estados de indexación del Generador de Índices. Tabla 23. Prueba verificar Tiempos de Indexación Nombre Tiempos de Indexación Tipo Prueba del sistema Descripción Cuando se lleva a cabo el proceso de indexación se verifica que efectivamente existe un valor asociado en la Base de Datos sobre cuánto tarda Solr el indexar los valores correspondientes del contenedor. Procedimiento Se toma como entrada la respuesta XML sobre el estado de la indexación realizada por Solr. SI existe el valor correspondiente se almacena en Base de Datos, en caso de no encontrarse el valor determina que no se llevó a cabo la indexación y el sistema advierte que no se lleva a cabo el proceso. Capítulo IV Desarrollo de la Aplicación Pág - 126 Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 89 y se obtuvo como salida el XML de Solr con el estado de la petición. En la Figura 93 se muestra la consulta de los tiempos de indexación de aquellas versiones o contenedores que han sido procesados (Lista mostrada en la Figura 89). En caso que haya un problema se hace la advertencia mostrada anteriormente en la Figura 91. Figura 93. Consulta de tiempos de indexación de la plataforma Solr. Tabla 24. Prueba Verificar Métricas recolectadas. Nombre Métricas recolectadas. Tipo Prueba del sistema Descripción Cuando se hace la invocación a la herramienta WARCTools y con el archivo de salida que provee este, se hace la recolección de esas métricas en Base de Datos. Procedimiento Se toma como entrada el archivo resultante de la llamada a la librería WARCTools y se verifica que todas las líneas de tal archivo han sido procesadas de manera tal que se cumple su almacenamiento en la Base de Datos. Capítulo IV Desarrollo de la Aplicación Pág - 127 Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 82 y se obtiene como resultado el almacenamiento en Base de Datos. Como puede apreciarse en la Figura 94. Se realiza una consulta a la Base de Datos y un conteo de las líneas del archivo y se muestra que todas las métricas se han almacenado. Existe una diferencia de una línea entre estos ya que la primera línea del archivo corresponde a la descripción de las líneas posteriores. Figura 94. Consultando la cantidad de líneas en el archivo y registros en Base de Datos. Tabla 25. Prueba verificar procesos y métricas de Indexación. Nombre Verificar proceso y métricas de indexación Tipo Prueba del sistema Descripción Verificar que los rastreos culminados sean efectivamente indexados y que se almacenan las métricas del proceso Procedimiento Ya realizado el proceso completo de indexación, se verifica que aquellos contenedores en la lista de procesados no se encuentren en la lista de pendientes por indexar. Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 90 y se obtiene como resultado la lista en la Figura 95. Donde puede apreciarse que aquellos contenedores que se encuentran en la lista de pendientes efectivamente están en la de procesados y se han eliminado de la lista de pendientes para no volver a ser procesados. Capítulo IV Desarrollo de la Aplicación Pág - 128 Figura 95. Lista de contenedores indexados. Análisis de tiempos de rastreo e indexación: Una vez realizada las pruebas pertinentes, se muestra el resultado de rendimiento de las misma. Cabe destacar para estos resultados se cuenta con un universo de 62 contenedores de distintos tamaños. En cuanto al tiempo de indexación de los contenedores en la Figura 96. Se muestra cuantos milisegundos tardó en llevarse a cabo el proceso de indexación. Figura 96. Tiempos de Indexación por contenedor. Capítulo IV Desarrollo de la Aplicación Pág - 129 En la Figura 96. Se aprecia que existe un máximo aproximado de 690 milisegundos en lo que tardaría Solr en indexar un contenedor y un mínimo de 200 milisegundos. Gracias a las 62 muestras que se tienen, nos indican que el proceso de indexación tardaría en promedio 391.67 milisegundos en indexar un contenedor. Cabe destacar que estos tiempos no dependen del tamaño del contenedor puesto que la indexación viene dada por la información que se recauda a través de los reportes que vienen en conjunto con el WARC. A continuación se muestran los tiempos de rastreo medido en segundos de los contenedores agrupados por la URL que representan (medido en KB) Tabla 26. Duración de rastreo por peso de contenedores asociado a la URL www.fmn.gob.ve www.fmn.gob.ve Peso MB Duración de Rastreo (Min) 0,059 49,87 61 41,88 61 44,83 61 45,14 61 35,32 61 34,85 61 37,46 Promedio 41,33 D. Estándar 5,67285013 Tabla 27. Duración de rastreo por peso de contenedores asociado a la URL www.ivic.gob.ve www.ivic.gob.ve Peso MB Duración de Rastreo (Min) 5017,6 1229,13 5017,6 1145,67 5017,6 1178,65 5017,6 1075,17 Promedio 1157,155 D. Estándar 64,5390866 Capítulo IV Desarrollo de la Aplicación Pág - 130 Tabla 28. Duración de rastreo por peso de contenedores asociado a la URL www.luz.edu.ve www.luz.edu.ve Peso MB Duración de Rastreo (Min) 68 1091,84 68 451,37 68 435,98 68 436,21 68 436 68 436 68 435,98 Promedio 531.91 D. Estándar 246,971447 Tabla 29. Duración de rastreo por peso de contenedores asociado a la URLwww.mcti.gob.ve www.mcti.gob.ve Peso MB Duración de Rastreo (Min) 47 372,89 52 389,91 52 386,41 51 383,58 51 383,58 52 389,61 Promedio 384,33 D. Estándar 6,25043678 Tabla 30. Duración de rastreo por peso de contenedores asociado a la URL www.pdvsalaestancia.com www.pdvsalaestancia.com Peso MB Duración de Rastreo (Min) 1228,8 731,52 1228,8 708,13 1228,8 731,32 1228,8 694,73 1228,8 699,70 1228,8 691 Capítulo IV Desarrollo de la Aplicación Pág - 131 213 176,81 Promedio 4433,21 D. Estándar 201,969317 Tabla 31. Duración de rastreo por peso de contenedores asociado a la URL www.uc.edu.ve www.uc.edu.ve Peso MB Duración de Rastreo (Min) 0,64 1140 1,1 1140 1,1 1140 Promedio 1140 D. Estándar 0 Tabla 32. Duración de rastreo por peso de contenedores asociado a la URL www.ucv.ve www.ucv.ve Peso MB Duración de Rastreo (Min) 4300,8 1440 4300,8 1440 4505,6 1440 Promedio 1440 D. Estándar 0 Tabla 33. Duración de rastreo por peso de contenedores asociado a la URL www.udo.edu.ve www.udo.edu.ve Peso MB Duración de Rastreo (Min) 212 1440 212 1440 212 1440 203 718,45 203 708,92 212 713.93 63 728,10 Promedio 1079,245 D. Estándar 395,23 Capítulo IV Desarrollo de la Aplicación Pág - 132 Tabla 34. Duración de rastreo por peso de contenedores asociado a la URL www.ula.ve www.ula.ve Peso MB Duración de Rastreo (Min) 62 826,86 62 442,55 62 442,59 62 444,44 62 796,52 62 469,62 62 468,18 Promedio 555,82 D. Estándar 175,38 Tabla 35. Duración de rastreo por peso de contenedores asociado a la URL www.usb.ve www.usb.ve Peso MB Duración de Rastreo (Min) 249 435,30 246 436,35 248 435,87 248 435,29 249 435,89 249 435,89 249 435,89 Promedio 435,78 D. Estándar 0,37 En las tablas anteriormente expuestas (Tabla 26-35), se aprecia que a medida que va aumentando el tamaño de los contenedores va aumentando el tiempo en el que rastreador cosecha el sitio. Cabe destacar que, a pesar de no haber un cambio considerable en los tamaños de los contenedores por URL (medido en MB), el tiempo es bastante variante. Una de las razones por las cuales esto puede suceder es que el rastreador debe esperar la respuesta de los servidores en donde se encuentran alojados los sitios para poder procesar cada documento y almacenarlo dentro del contenedor WARC, por lo tanto se depende de la conexión hacia internet que se dispone que puede llegar a ser inestables por factores externos propios de la red de la región. Capítulo IV Desarrollo de la Aplicación Pág - 133 A continuación, en la Figura 97, se muestra un gráfico de dispersión que muestra el tiempo de duración de los contenedores a medida que va aumentado el tamaño de los mismos. Figura 97. KB/seg dependiendo del peso del contenedor. Efectivamente, en la Figura 97, se corrobora que a medida que los contenedores van aumentando de tamaño se observa un crecimiento del tiempo que toma rastrearlos, lo cual es un resultado esperado, más sin embargo, existen casos en los que esto no se cumple. Estas excepciones puede venir unidas tanto a problemas en la conexión de internet como a procesamiento, ya que cada máquina procesa los contenedores a velocidades distintas. Con los casos expuesto se concluye que a pesar de haber excepciones en el tiempo de rastreo de contenedores, el rastreador suele seguir un comportamiento esperado por el equipo de trabajo ya que se toma como premisa que entre mayor tamaño de contenedor mayor tiempo se tomará en ser rastreado. Conclusiones y Recomendaciones Pág - 134 Conclusiones Al concluir la realización de este trabajo especial de grado titulado “Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela.” Se cuenta con un prototipo para realizar el rastreo y almacenamiento de sitios Web de índole cultural, educativa o que en general sean representativos de las manifestaciones y cultura venezolana. El prototipo fue desarrollado siguiendo una arquitectura basada en componentes tal como se pudo ver en la fase de elaboración del desarrollo con Ágil UP usando como base la arquitectura propuesta por Ospina y León [30] y el modelo de referencia de la IIPC que se mostró en la Figura 8 , así el OAIS productor está conformado por Heritrix y la aplicación administrativa , el OAIS archivo está conformado por los contenedores WARC y su gestión que se realiza a través de la plataforma de Búsqueda Solr y los script necesarios para lograr las tareas de gestión de almacenamiento del archivo, el OAIS consumidor no está dentro del alcance de este trabajo y se considera en trabajos futuros que se integrarán a este prototipo. Con la aplicación administrativa para configuración de rastreo se facilita al usuario todos los aspectos relacionados a la creación y configuración de rastreos que de otra manera deberían hacerse de forma manual y requeriría tener conocimientos sobre las herramientas utilizadas y los componentes internos del rastreador, en este caso de Heritrix. Así mismo también permite consultar información acerca de rastreos anteriores. Con la indexación a través de Solr se realiza el manejo de los documentos almacenados dentro del Archivo Web para poder consultarlos y con la aplicación de consulta se ayuda al usuario a visualizar los contenedores disponibles en el sistema sin la necesidad de conocer la sintaxis de consulta con la que trabaja Solr. Además, la aplicación procesa los distintos archivos de información dentro de los componentes y muestra las características principales y métricas relevantes sobre el contenido dentro de un archivo Web así como del proceso de adquisición llevado a cabo por el rastreador. Se realizó un esfuerzo para realizar la configuración e integración de las herramientas utilizadas, cabe destacar que esta tarea no fue sencilla debido a que en algunos casos la documentación era escasa y limitada, además el intento de comunicación con las personas que le dan mantenimiento a las herramientas no fue satisfactorio, para lograr la integración de estas herramientas fue necesario desarrollar componentes Conclusiones y Recomendaciones Pág - 135 adicionales que permitiesen automatizar el proceso de rastreo e indexación de contenido. Las métricas tienen como finalidad mostrarle al usuario las características más relevantes sobre los contenedores y su proceso de rastreo, para poder proveer datos significativos para futuros análisis sobre los mismos. Cabe destacar que estos análisis se encuentran fuera del alcance de este Trabajo Especial de Grado, pero se le facilita a futuros proyectos la búsqueda de todos los datos necesarios y disponibles en el sistema de manera que esto no presente una limitación al momento de realizar estos análisis, también ahorrando el proceso adicional de conocer los componentes en su totalidad para poder obtener estos datos. Con las pruebas que se le hicieron al prototipo se pudo comprobar que cumple con los requisitos funcionales planteados, como son la creación y generación de rastreos, comprobación de rastreos finalizados así como la indexación de contenedores y el almacenamiento de métricas. Se hizo una revisión de la lista de iniciativas de preservación Web [4] y se pudo observar que solo 3 iniciativas utilizan las mismas herramientas y formatos usados en este trabajo especial de grado (Heritrix, Solr y WARC), el lograr configurar y engranar estas herramientas consideramos es un punto de valor dentro de nuestro trabajo. El desarrollar este trabajo especial de grado nos dejo varias enseñanzas tanto es aspectos metodológicos como en aspectos técnicos, en este último apartado se puede mencionar los conocimientos obtenidos para la configuración de tareas automáticas bajo un ambiente linux, así como la programación en lenguaje shell script. Conclusiones y Recomendaciones Pág - 136 Recomendaciones Utilización de hadoop para cómputo distribuido Para la gestión y asignación de rastreos se puede utilizar una plataforma de cómputo distribuido como hadoop que equilibre la carga de una manera más eficiente. Agregar más opciones a la configuración de rastreos Se puede agregar una pestaña de opciones avanzadas a la creación de rastreos, brindado así la oportunidad de tener mayor control sobre las propiedades que tendrá el mismo. Agregar más espacio de almacenamiento Se pueden agregar disco duros adicionales para ampliar el espacio de almacenamiento, y así poder almacenar una mayor cantidad de rastreos. Hacer la indexación de texto completo Se puede implementar un índice de texto completo para ampliar el alcance del proyecto y hacer una consulta más amplia sobre los contenedores. Esto podría lograrse unificando el proceso de rastreo con el proceso de indexación, es decir, al momento de rastrear una página se le indexa primero. Agregar un programador de tareas nativo de la aplicación Se puede reemplazar el componente CRON (administrador de tareas programadas) con un administrador de tareas que esté unido a la aplicación administrativa para la creación y configuración de rastreos. Referencias Bibliográficas Pág - 137 Bibliografía [1]. Organización de las Naciones Unidas para la Educación, la Ciencia y la Cultura. DIRECTRICES PARA LA PRESERVACIÓN DEL PATRIMONIO DIGITAL. Australia: Biblioteca Nacional de Australia, 2003. [2]. Masanès, Julien.Web Archive. New York: Springer, 2006. ISBN-10 3-540-23338- 5. [3]. Patrimonio Cultural: recuperado en febrero de 2013. Disponible en: http://es.wikipedia.org/wiki/Patrimonio_culturalhttp://netpreserve.org/ [4]. List of Web archiving initiatives. recuperado en febrero de 2013. Disponible en:https://en.wikipedia.org/wiki/List_of_Web_archiving_initiativeshttps://en.w ikipedia.org/wiki/List_of_Web_archiving_initiatives [5]. https://en.wikipedia.org/wiki/List_of_Web_archiving_initiatives Bergman, M. K. (2001), “he deep web: Surfacing hidden value”, Journal of Electronic Publishing [6]. Montojo, V. (06 de 2010).Archivistica. Recuperado en febrero de 2013. Disponible en: http://www.archivistica.net/Textos/CONCEPTO_ARCHIVO.pdfhttp://www.archi vistica.net/Textos/CONCEPTO_ARCHIVO.pdf [7]. http://www.archivistica.net/Textos/CONCEPTO_ARCHIVO.pdfWARC file, recuperado en febrero de 2013. Disponible en: [http://www.digitalpreservation.gov/formats/fdd/fdd000236.shtml] [8]. URI, recuperado en febrero de 2013. Disponible en: http://tools.ietf.org/html/rfc3986http://tools.ietf.org/html/rfc3986 [9]. Roche, X. Copying web sites. In J. Masanès Heidelberg New York: Springer. [aut. libro] Masanes Julien. Web Archiving. s.l.: Springer, 2006, pág. 234. [10]. Heritrix. consultado en febrero 2013. Disponible en: https://webarchive.jira.com/wiki/display/Heritrix/Heritrix https://webarchive.jira.com/wiki/display/Heritrix/Heritrix consultado en febrero 2013 [11]. Internet Archive.Consultado en Referencias Bibliográficas Pág - 138 febrero de 2013. Disponible en:[http://www.archive.org/] [12]. Representational state transfer. recuperado en febrero de 2013. Disponible en: http://es.wikipedia.org/wiki/Representational_State_Transfer [13]. Hypertext driven. recuperado en febrero de 2013. Disponible en: http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven [14]. Spring java framework. recuperado en febrero de 2013. Disponible en: http://www.springsource.org/ [15]. Restlet. recuperado en febrero de 2013. Disponible en: http://en.wikipedia.org/wiki/Restlet [16]. Gomes, D., Miranda, J., Costa, M.A survey on web archiving initiatives, Foundation for National Scientific Computing (FCCN). Recuperado en febrero de 2013 [17]. Consultative Committe for Space Data System.Reference Model for an Open Archival Information System. 2002. CCSDS 650.0-B-1. Recuperado en febrero de 2013. [http://public.ccsds.org/publications/archive/650x0b1.PDF] [18]. Norma ISO 14721:2003, Recuperado en febrero de 2013. Disponible en: [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnu mber=24683] [19]. Reference model for an open archival information system, Magenta book, june 2012.Recuperado en febrero de 2013. Disponible en: [http://public.ccsds.org/publications/archive/650x0m2.pdf] [20]. Apache Solr, Recuperado en octubre de 2011. Disponible en: [http://lucene.apache.org/solr/] Consultado en octubre de 2011. [21]. Solr Wiki. Recuperado en Noviembre de 2011. Disponible en: [http://wiki.apache.org/solr/FrontPage] [22]. Lucene Apache. Recuperado en octubre de 2011. Disponible en: [http://lucene.apache.org/]. [23]. Daniel Gomes, André Nogueira, João Miranda, Miguel Costa.A survey on web archiving initiatives, Foundation for National Scientific Computing (FCCN). [24]. Smiley, D., Pugh, E. Apache Solr 3 Enterprise Search Referencias Bibliográficas Pág - 139 Server. Birmingham - Mumbai, 2011. ISBN 978-1-84951-606-8. [25]. Rafał Kuć. Apache Solr 3.1 Cookbook. Birmingham - Mumbai, 2011. ISBN 978-1- 849512-18-3. [26]. An Introduction to Heritrix An open source archival quality web crawler, Recuperado en noviembre de 2011. Disponible en: http://www.iwaw.net/04/Mohr.pdf [27]. IIPC (International Internet Preservation Consortium).Recuperado en noviembre de 2011. Disponible en: http://netpreserve.org/http://netpreserve.org/. [28]. A technique for measuring the relative size and overlap of public Web search engines, recuperado en febrero de 2013.Disponible en: http://netpreserve.org/http://www7.scu.edu.au/1937/com1937.htm. [29]. The Indexable Web is More than 11.5 billion pages, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://homepage.cs.uiowa.edu/~asignori/papers/th e-indexable-web-is-more-than-11.5-billion-pages/size-indexable-web.pdf. [30]. Ospina Torres, M.H. y León Luna, C.P. (2013). Una arquitectura basada en software libre para archivos web. En la Revista Venezolana de Información, Tecnología y Conocimiento, 10 (1), 53-72, recuperado en junio de 2013. Disponible en: http://netpreserve.org/http://revistas.luz.edu.ve/index.php/enlace/article/vie wFile/12755/12326. [31]. The Agile Unified Process, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://www.ambysoft.com/unifiedprocess/agileUP.html [32]. Agile Alliance, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://www.agilealliance.org/. [33]. Desarrollo de software basado en componentes, recuperado en febrero de 2013.Disponible en: http://netpreserve.org/http://webdelprofesor.ula.ve/ingenieria/jonas/Product os/Publicaciones/Congresos/CAC03%20Desarrollo%20de%20componentes.pdf . Referencias Bibliográficas Pág - 140 [34]. Ingeniería de software basada en componentes, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://es.wikipedia.org/wiki/Ingenier%C3%ADa_de_sof tware_basada_en_componentes. [35]. Metodologías para el desarrollo de software, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://wiki.monagas.udo.edu.ve/index.php/Metodolog %C3%ADas_para_el_desarrollo_de_software [36]. Kenneth Laudon, Sistema de información gerencial, pearson educación 2004. [37]. Roger Pressman , Ingeniería del software, 5ta edición,ISBN: 8448132149 [38]. Solr Architecture, Recuperado en febrero de 2013. Disponible en: http://www.docstoc.com/docs/98318767/Solr-Architecture- %28PowerPoint%29, [39]. Portuguese Web Archive, recuperado en febrero de 2013. Disponible en: http://sobre.arquivo.pt/about-the-archive/goals. [40]. Introduction to Solr, Consultado en Junio de 2013.Disponible en: http://es.slideshare.net/erikhatcher/introduction-to-solr-9213241, [41]. Inverted index, recuperado en febrero de 2013. Disponible en: http://en.wikipedia.org/wiki/Inverted_index [42]. Hanzo Archive, recuperado en junio de 2013. Disponible en: http://www.hanzoarchives.com/ [43]. Lineamientos Generales para la Construcción de un Archivo Histórico de la Información Digital producida en Venezuela. Andrés Sanoja, Claudia León y Gustavo Torres. Disponible en: http://gppd.inf.ufrgs.br/CLCAR2010files/slides/12.pdf Anexos Pág - 141 Anexo A Instalación de Heritrix versión 3.1.1 Se descarga Heritrix de su página web: http://builds.archive.org:8080/maven2/org/archive/heritrix/heritrix/3.1.1/h eritrix-3.1.1-dist.zip. Una vez descargado se descomprime el archivo, usando el comando que puede apreciarse en la Figura 98. Figura 98. Descomprimir Heritrix • JAVA_HOME,: Debe apuntar al directorio de instalación de JRE 1.6, por ejemplo JAVA_HOME=/usr/local/java/jre • HERITRIX_HOME: debe apuntar al directorio de instalación de heritrix, por ejemplo HERITRIX_HOME=/home/user/heritrix3.1.1 • JAVA_OPTS: Esta variable es usada para definir la cantidad de memoria asignada a heritrix, por ejemplo un valor igual a -Xmx1024M, indica que se está asignando 1Gb de memoria Adicionalmente se le debe dar permiso de ejecución al archivo HERITRIX_HOME/bin/heritrix, como se muestra en la Figura 99. Figura 99. Heritrix permisos Ejecutar Heritrix Para ejecutar Heritrix se usa el comando que se puede apreciar en la Figura 100. Figura 100. Comando para ejecutar Heritrix API REST Anexos Pág - 142 Heritrix usa REST para exponer sus funcionalidades, la implementación REST de heritrix está basada en Restlet que es un framework RestFul para java. Heritrix expone esta API a través de HTTPS, a través de este protocolo se hacen peticiones para recuperar o modificar configuraciones y manejos de rastreos. Cualquier cliente que soporte HTTPS puede ser usado para invocar el API REST, por ejemplo se puede usar el cliente de línea de comandos curl. CrearJobs Para crear un nuevo job se utiliza el comando que puede apreciarse en la Figura 101. Figura 101. Crear Job Dónde: createpath: Nombre del job <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix Construir el Job Luego de que un job es creado se debe leer el archivo de configuración necesario para correr el rastreo, a partir de las especificaciones dictadas en este archivo se construye el job, el comando utilizado puede apreciarse en la Figura 102. Figura 102. Construir Job Dónde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob>: Nombre del job Anexos Pág - 143 Lanzar el job Una vez el job ha sido construido, es necesario lanzarlo o ponerlo a correr, para ello se usa el comando que puede apreciarse en la Figura 103. Figura 103. Lanzar Job donde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob> : Nombre del job Quitar la pausa a un job Por defecto el rastreo es lanzando en modo pausa, por lo que es necesario quitarle la pausa para que pueda comenzar a procesar, el comando usado puede apreciarse en la Figura 104. Figura 104. Despausar job donde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob>: Nombre del job Anexos Pág - 144 Anexo B Instalación de devise Pasos de instalación tomados de:http://railscasts.com/episodes/209- introducing-devise?language=es&view=asciicast Para instalar y configurar la gema devise se deben seguir los siguientes pasos: Descargar la gema En el archivo Gemfile se añade una entrada correspondiente a la gema como se puede apreciar en la Figura 105. Figura 105. Gem devise Seguidamente desde la línea de comando se debe ejecutar el comando que se puede ver en la Figura 106. Figura 106. Comando bundle install Comenzará el proceso de descarga y la gema será instalada automáticamente Correr el generador de instalación Es necesario correr el generador de instalación para poder personalizar la gema, en la línea de comando debe ejecutarse el comando que puede apreciarse en la Figura 107. Figura 107. Instalar devise El mensaje de instalación indicará que se debe ir al archivo Anexos Pág - 145 /config/environments/development.rb y configurar la opción host, para desarrollo se puede utilizar localhost, tal como puede apreciarse en la Figura 108 Figura 108. Configurar correo Crear el modelo Para la autenticación es necesario crear un modelo User, para lograr eso se puede utilizar el generador de devise, como se puede ver en la Figura 109. Figura 109. Generar modelo Este comando genera el modelo, una migración y una ruta El modelo generado se puede ver en la Figura 110 Figura 110. Modelo User Y la migración en la Figura 111 Anexos Pág - 146 Figura 111. Migración Correr la migración Para correr la migración se debe ejecutar rake desde línea de comando que tal como puede verse en la Figura 112. Figura 112. Comando rake Luego de ejecutar estos pasos la gema estará instalada y configurada, lista para ser usada. Anexos Pág - 147 Anexo C Instalación y configuración de Solr Solr para funcionar necesita las siguientes dependencias: Java 1.6, Tomcat 6. Para instalar y configurar Solr se deben seguir los siguientes pasos: 1. Descargar Solr a través del URL 2. http://apache.claz.org/lucene/solr/3.6.2. 3. Descomprimir el archivo. 4. Copiar la carpeta de Solr en el directorio de preferencia y colocar los derechos de lectura y ejecución para el usuario que ejecuta el servidor Web Tomcat. 5. Configurar el archivo solrconfig.xml indicando en qué directorio estará ubicada la data, tal como se puede ver en la Figura 113. Figura 113. Solr configurar ubicación de la data 6. Crear un contexto Tomcat donde se indique dónde estará ubicada la carpeta donde se ejecutará la plataforma, cuál es su carpeta raíz y donde está el contenedor .war, tal como se puede apreciar en la Figura 114 Figura 114. Solr Crear contexto 7. Iniciar el Servidor Web Tomcat: Si la configuración se hizo de forma correcta, al entrar a la dirección http://<ip_maquina>:8080/solr/ se podrá apreciar la interfaz gráfica del solr , tal como puede verse en la Figura 115 Anexos Pág - 148 Figura 115. Página Principal de Administración. 8. Cambiar el archivo schema.xml para personalizar: Si se desea modificar o personalizar el esquema de datos debe modificarse el archivo schema.xml de la forma que se muestra en la Figura 116. Figura 116. Archivo schema.xml de configuración de Solr. Anexos Pág - 149 Anexo D Instalación y configuración de WARCTools. 1. Descargar Hanzo Warc Tools. Disponible en: http://code.hanzoarchives.com/warc-tools/downloads 2. Instalar dependencias: • Python Setup tools (python3-setuptools and python-setuptools) • Python Unittest (python-unittest2) • Python 2.6 3. Extraer archive con el siguiente comando $ tar -xvf hanzo-warc-tools-f8cd94bebe53.tar.gz 4. Dentro del archive extraído ejecutar los siguientes comandos para instalar como comando propios del Sistema Operativo: $ ./setup.py build $ ./setup.py install 5. Ahora se tendrá disponible los siguientes comandos de: warcvalid.py warcdump.py warcfilter.py warc2warc.py arc2warc.py warcindex.pyTESIS_Garcia_Riverox UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela. Trabajo especial de grado presentado ante la ilustre Universidad Central de Venezuela por Br. Lorena Rivero. Br. Jonathan García. Para optar al título de Licenciado en Computación Tutora: Profa. Mercy Ospina Octubre 2013 Pág - ii ACTA Quienes suscriben, miembros del jurado designado por el Consejo de la Escuela de Computación, para examinar el Trabajo Especial de Grado titulado “Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela.” y presentado por los Bachilleres Lorena Elisa Rivero Perdomo C.I: 19064474 y Jonathan Eduardo García Laguado C.I: 17160622, a los fines de optar al título de Licenciado en Computación, dejamos constancia de lo siguiente: Leído como fue dicho trabajo, por cada uno de los miembros del jurado, se fijó el día 25 de octubre de 2013 a las 3:00pm horas, para que los autores lo defendieran en forma pública, lo que estos hicieron en la Sala 01 de la Escuela de Computación, mediante una presentación oral de su contenido, luego de lo cual respondieron a las preguntas formuladas. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobar con la nota de ____ puntos. En fe de lo cual se levanta la presente Acta, en Caracas el día ___ de octubre de 2013 ___________________________________ Profa. Mercy Ospina Torres (Tutora) _________________________ _____________________ Prof. Robinson Rivas Profa. Claudia León (Jurado) (Jurado) Pág - iii Agradecimientos y dedicatorias A mis padres Elda y Jesus por educarme y guiarme por el camino correcto. A la ilustre Universidad Central de Venezuela por permitirme desarrollar esta carrera universitaria. A mi profesores que me enseñaron y formaron a lo largo de este periplo académico, en especial a la profesora Yusneyi Carballo que siempre estuvo allí cuando la necesité. A mi tu tutora Mercy Ospina que me guió en la realización de este trabajo. A mi compañera Lorena Rivero, con quien formé un gran equipo que nos permitió desarrollar con éxito este trabajo especial de grado. A mi novia por su apoyo y comprensión durante el tiempo invertido en esta tesis. A mis amigos, con quien compartí horas de estudios y vivencias a lo largo de mi estadía en la universidad. Jonathan García Pág - iv Agradecimientos y dedicatorias El éxito es cuando la inversión en tus metas da frutos… Quiero agradecer a todas aquellas personas que de alguna manera estuvieron a mi lado en mi vida universitaria. Amigos y compañeros con los que me formé y que hoy en día comparten la misma experiencia que yo. A todos aquellos amigos cercanos que supieron expresar sus buenos deseos hacia mi éxito que hasta su laptop me prestaron. A mi mejor amigo, mi novio y mi futuro colega Francisco, quien me brindó su apoyo incondicional cuando más lo necesite. Muchas gracias a la Ilustre Universidad Central de Venezuela por todo el conocimiento, principios y valores que me inculcó. A mi tutora Mercy y demás profesores que son ejemplos a seguir y que siguen luchando porque el conocimiento llegue a mentes brillantes y enseñar a sus alumnos a ser grandes profesionales y luchar por un mejor futuro. Pero hoy más que nunca les agradezco y les dedico mi trabajo y esfuerzo a mis padres Elda, Alberto y Olga y a mi hermana Vanessa que me han enseñado todo lo que sé y que han sido el mejor ejemplo de cuando querer es poder. Lorena Rivero Pág - v Resumen El patrimonio cultural define a los pueblos y representa su herencia histórica, por lo cual es importante su preservación. El patrimonio cultural se ha clasificado como tangible (obras materiales) o intangible (generación y transmisión de conocimiento, costumbres, etc.), dentro de este último se define el patrimonio digital como aquel que ha sido originado de manera digital y abarca recursos como contenido Web, bases de datos, libros digitales, material multimedia, grabaciones, programas informáticos, entre otros. Entre éstos se tienen las paginas Web que se diferencian de cualquier otro tipo de recurso digital por su naturaleza cambiante y su estructura de hiperenlaces, por lo que su preservación tiene características propias y retos que deben ser abarcados por los Archivos Web, los cuales son sistemas de información cuya finalidad es la preservación histórica de estos recursos conocidos como patrimonio Web. El presente Trabajo Especial de Grado propone la implementación de los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la salvaguarda de contenido cultural, educativo y que en general sea significativo para la herencia cultural de Venezuela. Para la adquisición del contenido se adoptó una estrategia de archivado del lado del cliente utilizando como herramienta el rastreador Heritrix. El contenido recuperado por el rastreador se almacena en contenedores Web que usan un formato para Archivos Web denominado WARC, los cuales son indexados utilizando la plataforma de búsqueda Solr. Para el almacenamiento se adoptó una estrategia de archivado con servidor Web, lo que significa almacenar la respuesta que proporciona el servidor Web del sitio a cosechar. Además se implementaron dos aplicaciones en Ruby on Rails una de ellas para administrar los trabajos de rastreos, y la otra para la búsqueda y visualización de métricas de los contenidos almacenados. Palabras clave: Archivo Web, preservación Web, WARC, cosecha, almacenamiento, rastreo, Heritrix, indexación, Solr. Pág - vi Tabla de Contenido AGRADECIMIENTOS Y DEDICATORIAS.......................................................................................III RESUMEN............................................................................................................................................. V ÍNDICE DE FIGURAS ......................................................................................................................VIII ÍNDICE DE TABLAS......................................................................................................................... XII INTRODUCCIÓN ............................................................................................................................. XIV CAPÍTULO I PLANTEAMIENTO DEL PROBLEMA ....................................................................... 1 JUSTIFICACIÓN .................................................................................................................................................................. 4 OBJETIVOS GENERALES: ................................................................................................................................................ 5 OBJETIVOS ESPECÍFICOS: ............................................................................................................................................... 5 ALCANCE ............................................................................................................................................................................ 6 2.1 PRESERVACIÓN WEB............................................................................................................................................... 7 2.2 MODELO OAIS.......................................................................................................................................................10 2 .3 ADQUISICIÓN ..........................................................................................................................................................18 2.4ALMACENAMIENTO.................................................................................................................................................21 2.5 INDEXACIÓN Y MOTORES DE BÚSQUEDA. ........................................................................................................24 2.6 FORMATOS DE DOCUMENTOS PARA ALMACENAMIENTO ............................................................................25 2.7 HERRAMIENTAS UTILIZADAS PARA LLEVAR A CABO LA PRESERVACIÓN WEB ........................................29 2.7.1. Heritrix .........................................................................................................................................................29 2.7.2 Solr...................................................................................................................................................................35 2.7.3 WARCTools ..................................................................................................................................................38 2.7.4 REST (Representational State Transfer) .......................................................................................39 2.8 RESUMEN DE USO DE MÉTODOS Y HERRAMIENTAS .......................................................................................39 2.9 ESTADO DEL ARTE..................................................................................................................................................41 CAPÍTULO III MARCO METODOLÓGICO .................................................................................... 47 3.1 METODOLOGÍA DE DESARROLLO DE SOFTWARE ...........................................................................................47 3.2 METODOLOGÍA AUP .............................................................................................................................................48 3.2.1 Disciplinas o Iteraciones........................................................................................................................48 3.2.2 Fases................................................................................................................................................................49 3.2.3 Entrega de versiones incrementales en el tiempo .....................................................................51 3.3 ARQUITECTURA DE SOFTWARE BASADA EN COMPONENTES.......................................................................51 CAPÍTULO IV DESARROLLO DE LA APLICACIÓN ..................................................................... 55 4.1 OBJETIVO DE LA APLICACIÓN ..............................................................................................................................55 4.2 METAS DE LA APLICACIÓN ...................................................................................................................................55 4.3 ALCANCE DE LA APLICACIÓN ...............................................................................................................................55 4.4 ADAPTACIÓN DE LA METODOLOGÍA AUP USANDO UNA ARQUITECTURA DE SOFTWARE BASADA EN COMPONENTES ................................................................................................................................................................................56 4.4 1 Fase de Inicio .............................................................................................................................................56 4.4.2 Fase de Elaboración.................................................................................................................................59 Pág - vii 4.4.3 Fase de Construcción............................................................................................................................ 101 4.4.4 Fase de transición.................................................................................................................................. 116 CONCLUSIONES ..............................................................................................................................134 RECOMENDACIONES.....................................................................................................................136 BIBLIOGRAFÍA ...............................................................................................................................137 ANEXO A INSTALACIÓN DE HERITRIX VERSIÓN 3.1.1........................................................141 ANEXO B INSTALACIÓN DE DEVISE ..........................................................................................144 ANEXO C INSTALACIÓN Y CONFIGURACIÓN DE SOLR..........................................................147 ANEXO D INSTALACIÓN Y CONFIGURACIÓN DE WARCTOOLS. .........................................149 Pág - viii Índice de Figuras Figura 1. Países que hospedan iniciativas de preservación Web [16] ............................................. 2 Figura 2. Ambiente OAIS ................................................................................................................................. 11 Figura 3. Modelo de Referencia OAIS ......................................................................................................... 12 Figura 4. Obtención de la información de los datos, traducido de [19] ........................................ 13 Figura 5. Paquete de Información, traducido de [19] .......................................................................... 14 Figura 6. Flujo de datos de un OAIS, traducido de [19]....................................................................... 15 Figura 7. El modelo de Modelo de referencia OAIS............................................................................... 16 Figura 8. Arquitectura funcional propuesta por la IIPC, basada en el modelo OAIS [2] ....... 17 Figura 9. Archivado del lado del cliente .................................................................................................... 20 Figura 10. Primera línea de un rastreo, traducido de [2] ................................................................... 21 Figura 11. Archivado con Servidor Web [2]. ........................................................................................... 23 Figura 12. Ejemplo de un Archivo WARC [7] .......................................................................................... 26 Figura 13. Encabezado WARC [7]. ............................................................................................................... 28 Figura 14. Arquitectura de Heritrix [26]................................................................................................... 31 Figura 15. Configuración de una semilla................................................................................................... 34 Figura 16. Índice Directo e Invertido [39]................................................................................................ 35 Figura 17. Arquitectura de Solr [38]........................................................................................................... 37 Figura 18. Resumen de métodos y herramientas de adquisición usadas por iniciativas de preservación web a nivel mundial [30]..................................................................................................... 40 Figura 19. Resumen de métodos y estándares de almacenamiento usados por iniciativas de preservación web a nivel mundial [30]..................................................................................................... 40 Figura 20. Resumen de indizadores usados por las iniciativas de preservación Web a nivek mundial [30]. ....................................................................................................................................................... 41 Figura 21. Portuguese Web Archive .......................................................................................................... 43 Figura 22. Library of Congress...................................................................................................................... 44 Figura 23. UK Web Archive ............................................................................................................................ 46 Figura 24. Ciclo de vida de Ágil UP [31]. ................................................................................................... 48 Figura 25. Componente de software........................................................................................................... 51 Figura 26. Arquitectura inicial del prototipo a implementar ........................................................... 58 Figura 27. Prototipo de interfaz Registrarse........................................................................................... 60 Figura 28. Prototipo de interfaz Iniciar Sesión....................................................................................... 61 Figura 29. Prototipo de interfaz Lista de solicitudes de rastreo ..................................................... 61 Figura 30. Prototipo de interfaz Solicitud de rastreo .......................................................................... 62 Figura 31. Prototipo de interfaz Editar solicitud de rastreo ............................................................. 63 Figura 32. Ver versiones de un rastreo ..................................................................................................... 63 Pág - ix Figura 33. Hacer búsqueda por URL........................................................................................................... 64 Figura 34. Lista contenedores disponibles .............................................................................................. 64 Figura 35. Listar métricas de adquisición ................................................................................................ 65 Figura 36. Listar métricas del contenedor ............................................................................................... 66 Figura 37. Diagrama de componentes módulo de adquisición ........................................................ 67 Figura 38 Diagrama de componentes módulo de gestión de almacenamiento......................... 68 Figura 39. Diagrama de componentes del prototipo de preservación web ................................ 69 Figura 40. Diagrama de actividades Crear rastreo ............................................................................... 70 Figura 41. Diagrama de actividades Generar rastreo .......................................................................... 71 Figura 42 Diagrama de actividades Verificar fin de rastreo.............................................................. 72 Figura 43. Diagrama de Actividades Generador de Índices............................................................... 73 Figura 44. Diagrama de actividades módulo de almacenamiento .................................................. 74 Figura 45. Diagrama de casos de uso módulo de adquisición .......................................................... 75 Figura 46. Diagrama de casos de uso módulo de almacenamiento................................................ 86 Figura 47. Diagrama de secuencia Registrar Usuario.......................................................................... 91 Figura 48. Diagrama de secuencia Iniciar Sesión .................................................................................. 92 Figura 49. Diagrama de secuencia Recuperar Contraseña ................................................................ 92 Figura 50. Diagrama de secuencia Cambiar Contraseña .................................................................... 93 Figura 51. Diagrama de secuencia Consultar lista de solicitudes de rastreos............................ 93 Figura 52. Diagrama de secuencia Crear Solicitud de Rastreo......................................................... 94 Figura 53. Diagrama de secuencia Editar Solicitud de Rastreo ....................................................... 94 Figura 54. Diagrama de secuencia Desactivar Solicitud de rastreo................................................ 95 Figura 55. Diagrama de secuencia Generar Rastreo............................................................................. 95 Figura 56. Diagrama de secuencia Verificar Fin de Rastreo.............................................................. 96 Figura 57. Diagrama de secuencia Consultar Versiones de Solicitud de Rastreo ..................... 96 Figura 58. Diagrama de secuencia Indexar Sitios Rastreados .......................................................... 97 Figura 59. Diagrama de secuencia Almacenar Métricas ..................................................................... 98 Figura 60. Diagrama de secuencia hacer Búsqueda por URL ........................................................... 98 Figura 61. Diagrama de secuencia Listar métricas del contenedor................................................ 99 Figura 62. Diagrama de secuencia Listar métricas de Adquisición ................................................ 99 Figura 63. Diagrama de secuencia Listar métricas del contenedor..............................................100 Figura 64. Modelo relacional de la base de datos utilizada en la aplicación............................101 Figura 65. Formulario para creación de rastreos................................................................................102 Figura 66. Formulario para la edición de rastreos..............................................................................103 Figura 67. Código del Modelo Rastreo ....................................................................................................103 Figura 68. Edición del archivo de configuración del rastreo ..........................................................104 Figura 69 Agregar solicitud del rastreo al crontab............................................................................105 Figura 70. Versiones de un rastreo ...........................................................................................................105 Pág - x Figura 71. Generar rastreo ...........................................................................................................................106 Figura 72. Invocación de script para inserción en base de datos..................................................106 Figura 73. Script insert_database.sh.........................................................................................................106 Figura 74. Ejemplo de archivo rastreos_activos.txt............................................................................107 Figura 75. Verificados de rastreos finalizados......................................................................................108 Figura 76. Script udpate_version.sh..........................................................................................................108 Figura 77. Listado de contenedores Disponibles.................................................................................109 Figura 78. Tabla de Métricas de Adquisición de un contenedor. .................................................110 Figura 79. Métricas de un contenedor WARC .......................................................................................111 Figura 80. Ejemplo formato Archivo de rastreos por indexar.......................................................112 Figura 81. Código Shell script Procesar Archivo..................................................................................113 Figura 82. Archivo resultado de la ejecución de la herramienta WARCTools........................114 Figura 83. Código Shell Script para Almacenar Métricas del contenedor..................................115 Figura 84. Validación de datos de entrada. ............................................................................................118 Figura 85. Job creado exitosamente..........................................................................................................119 Figura 86. Semilla en el archivo de configuración del job................................................................119 Figura 87. Solicitud de rastreo almacenada en el crontab...............................................................120 Figura 88. Rastreo colocado en ejecución ..............................................................................................121 Figura 89. Rastreos finalizados...................................................................................................................122 Figura 90. Rastreos por indexer................................................................................................................122 Figura 91. XML de Indexación de contenedores rastreados por Solr. .........................................124 Figura 92. Salida estándar de los estados de indexación del Generador de Índices..............125 Figura 93. Consulta de tiempos de indexación de la plataforma Solr..........................................126 Figura 94. Consultando la cantidad de líneas en el archivo y registros en Base de Datos. .127 Figura 95. Lista de contenedores indexados. ........................................................................................128 Figura 96. Tiempos de Indexación por contenedor............................................................................128 Figura 97. KB/seg dependiendo del peso del contenedor. ..............................................................133 Figura 98. Descomprimir Heritrix .............................................................................................................141 Figura 99. Heritrix permisos .......................................................................................................................141 Figura 100. Comando para ejecutar Heritrix ........................................................................................141 Figura 101. Crear Job......................................................................................................................................142 Figura 102. Construir Job..............................................................................................................................142 Figura 103. Lanzar Job ...................................................................................................................................143 Figura 104. Despausar job............................................................................................................................143 Figura 105. Gem devise..................................................................................................................................144 Figura 106. Comando bundle install.........................................................................................................144 Figura 107. Instalar devise...........................................................................................................................144 Figura 108. Configurar correo ....................................................................................................................145 Pág - xi Figura 109. Generar modelo ........................................................................................................................145 Figura 110. Modelo User ...............................................................................................................................145 Figura 111. Migración ....................................................................................................................................146 Figura 112. Comando rake ...........................................................................................................................146 Figura 113. Solr configurar ubicación de la data ................................................................................147 Figura 114. Solr Crear contexto..................................................................................................................147 Figura 115. Página Principal de Administración. ................................................................................148 Figura 116. Archivo schema.xml de configuración de Solr..............................................................148 Pág - xii Índice de Tablas Tabla 1. Caso de uso Registrar Usuario ..................................................................................................... 75 Tabla 2. Caso de uso Iniciar Sesión ............................................................................................................. 76 Tabla 3. Caso de uso Cambiar Contraseña................................................................................................ 77 Tabla 4. Caso de uso Recuperar Contraseña............................................................................................ 78 Tabla 5. Caso de uso Consultar lista de solicitudes de rastreo......................................................... 79 Tabla 6. Caso de uso Crear solicitud de rastreo ..................................................................................... 80 Tabla 7. Caso de uso Editar Solicitud de rastreo.................................................................................... 81 Tabla 8. Caso de uso Desactivar solicitud de rastreo ........................................................................... 82 Tabla 9. Caso de uso Generar rastreo......................................................................................................... 83 Tabla 10. Caso de uso Verificar Fin de Rastreos .................................................................................... 84 Tabla 11. Caso de uso Consultar Versiones de una Solicitud de Rastreo ..................................... 84 Tabla 12. Caso de uso Indexar Sitios Cosechados ................................................................................. 87 Tabla 13. Caso de uso Almacenar Métricas.............................................................................................. 87 Tabla 14. Caso de uso Hacer Búsqueda por URL ................................................................................... 88 Tabla 15. Caso de uso Listar Contenedores Disponibles .................................................................... 89 Tabla 16. Caso de uso Listar Métricas del Contenedor........................................................................ 89 Tabla 17. Caso de uso Listar Métricas de Adquisición........................................................................ 90 Tabla 18. Prueba Validación de datos de entrada ...............................................................................117 Tabla 19. Prueba creación de job y su archivo de configuración .................................................118 Tabla 20. Prueba colocación de rastreo en ejecución........................................................................120 Tabla 21. Prueba verificar rastreos finalizados ...................................................................................121 Tabla 22. Prueba verificar Indexar Sitios rastreados.........................................................................123 Tabla 23. Prueba verificar Tiempos de Indexación ............................................................................125 Tabla 24. Prueba Verificar Métricas recolectadas..............................................................................126 Tabla 25. Prueba verificar procesos y métricas de Indexación......................................................127 Tabla 26. Duración de rastreo por peso de contenedores asociado a la URL www.fmn.gob.ve .................................................................................................................................................................................129 Tabla 27. Duración de rastreo por peso de contenedores asociado a la URL www.ivic.gob.ve .................................................................................................................................................................................129 Tabla 28. Duración de rastreo por peso de contenedores asociado a la URL www.luz.edu.ve .................................................................................................................................................................................130 Tabla 29. Duración de rastreo por peso de contenedores asociado a la URLwww.mcti.gob.ve .................................................................................................................................................................................130 Tabla 30. Duración de rastreo por peso de contenedores asociado a la URL www.pdvsalaestancia.com...........................................................................................................................130 Tabla 31. Duración de rastreo por peso de contenedores asociado a la URL www.uc.edu.ve Pág - xiii .................................................................................................................................................................................131 Tabla 32. Duración de rastreo por peso de contenedores asociado a la URL www.ucv.ve.131 Tabla 33. Duración de rastreo por peso de contenedores asociado a la URL www.udo.edu.ve .................................................................................................................................................................................131 Tabla 34. Duración de rastreo por peso de contenedores asociado a la URL www.ula.ve..132 Tabla 35. Duración de rastreo por peso de contenedores asociado a la URL www.usb.ve.132 Introducción Pág - xiv Introducción El patrimonio cultural es la herencia cultural propia del pasado de una comunidad, con la cual viven y que se transmite a la generaciones presentes y futuras [3], este patrimonio puede ser tanto tangible (objetos arqueológicos, artísticos, religiosos, entre otros) como intangible (costumbres, tradiciones, conocimiento científico, entre otros). En este último entraría la categoría de patrimonio digital, el cual está en formato digital y abarca muchos ámbitos como páginas Web, material multimedia, grabaciones, programas informáticos, entre otros. Dentro del patrimonio digital se puede resaltar aquel publicado en la Web, denominado patrimonio Web, el cual ha tomado una gran relevancia debido a que se ha convertido en una valiosa fuente de información, pero que tiene una naturaleza inestable y efímera, por lo que no hay garantía de que un contenido que hoy se encuentre en línea se mantenga a través del tiempo, esto hace imprescindible que se busquen mecanismos para la preservación del patrimonio Web. La preservación del patrimonio Web o preservación Web es un tema que se ha venido desarrollando de manera amplia en los últimos años debido a que en la Web se encuentra publicada información relevante para la historia, investigación científica y otras ramas del saber, este contenido puede ser útil en la actualidad y en el futuro tanto para consultas informativas como para realizar trabajos de investigación, para evitar que esta información se pierda es necesaria su preservación. Lograr la preservación es posible mediante ambientes seguros e independientes a los servidores originales, llamados Archivos Web. Algunos países han creado iniciativas de preservación Web que en su mayoría son locales (abarcan dominios de una región o país específico), y algunos pocos casos que preservan contenido distinto al del país de origen o por demanda de países y organizaciones como es el caso del Internet Archive [11]. El surgimiento de estas iniciativas locales se fundamenta en el interés de cada país en preservar sus documentos y en la necesidad de limitar el ámbito de preservación debido al hecho que un archivado de toda la Web se considera prácticamente inviable por el tamaño y crecimiento continuo de esta, ya que se requeriría gran cantidad de recursos de procesamiento y almacenamiento para llevarlo a cabo. Sin embargo, organizaciones como la “International Internet Preservation Consortium” (IIPC) [27], están realizando esfuerzos para la estandarización e integración de los Archivos Web con el objetivo que este conjunto de iniciativas locales puedan formar Introducción Pág - xv a futuro un Archivo Web global distribuido, fomentando el desarrollo y uso de herramientas comunes, técnicas y normas que permitan la creación de Archivos Web internacionales. El presente trabajo especial de grado propone el desarrollo e implementación de los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la preservación de sitios Web de Venezuela, basados en estándares y usando tecnología de software libre. Este documento está divido en 4 capítulos , en el capítulo I se hace el planteamiento del problema donde se describe la problemática general asociada a la preservación Web y los problemas específicos que esta investigación considera para dar solución, además se justifica y se delimita el alcance de este trabajo especial de grado. En el capítulo II se encuentra el marco teórico donde se realiza la explicación de los distintos conceptos que permiten comprender la investigación. En el capítulo III se describe la metodología de desarrollo AUP (Proceso Unificado Ágil, Agile Unified Process). En el capítulo IV se detallan todos los aspectos concernientes al desarrollo de la aplicación. Por último se dan las conclusiones y recomendaciones a tomar en consideración para futuras extensiones de este proyecto. Capítulo I Planteamiento del Problema Pág - 1 Capítulo I Planteamiento del problema La “World Wide Web”, (la Web) es un medio omnipresente y efímero donde cada vez en mayor grado se almacenan recursos educativo, científicos, artísticos, investigativos, entre otros, que son frutos del saber o de la expresión de los seres humanos. Muchos de estos recursos sólo se encuentran en formato Web y para existir dependen del servidor Web donde están alojados, por lo que en cualquier momento pueden dejar de estar disponibles en línea, ya sea porque el propietario del sitio decidió eliminarlos o cambiarlos de ubicación. Para que el conocimiento asociado a este recurso no se pierda es necesaria su preservación, la cual puede ser considerada una necesidad cultural e histórica, para poder poner este conocimiento a disposición de presentes y futuras generaciones. La Web tiene características particulares que obligan a adaptar al caso las prácticas tradicionales de conservación de patrimonio cultural para poder ser usadas, por ello es necesario contar con técnicas, políticas y la infraestructura adecuada a la naturaleza de los recursos Web para poder llevar a cabo la preservación. El tamaño de la información publicada en la Web ha ido creciendo con el pasar de los años, y las facilidades que brinda la Internet para publicar información permite que sea probable que cada día estos números se encuentren en aumento, el hecho de ser un medio de publicación tan difundido da pie a que tome una gran relevancia. Sin embargo, la persistencia de la información almacenada en la Web no está garantizada, de hecho es todo lo contrario, las páginas son realmente efímeras debido a la obsolescencia, la modificación accidental, o la actualización o eliminación por parte del autor. Estudios han demostrado que alrededor del 80% de las páginas son actualizadas o desaparecen luego de 1 año [16]. La UNESCO (La Organización de las Naciones Unidas para la Educación, la Ciencia y la Cultura) ha venido revisando las limitantes que afectan la preservación, con objeto de definir una norma que guíe los esfuerzos de preservación en la era digital, en su 31º reunión se aprueba la resolución para comenzar con una campaña internacional para salvaguardar la memoria digital en peligro de desaparición [1]. Tomando conciencia de la importancia de preservar la Web, muchos países se han esforzado en desarrollar lo que se ha denominado iniciativas de preservación Web cuyo objetivo es preservar la Web de sus propios países, aunque algunas tienen un alcance mayor. En el portal de la International Internet Preservation Consortium (IIPC) están reseñadas las iniciativas de los países miembros que han construido sus Archivos Digitales. Capítulo I Planteamiento del Problema Pág - 2 Figura 1. Países que hospedan iniciativas de preservación Web [16] En la Figura 1 se puede apreciar los países que han realizado iniciativas para la preservación Web oficiales, este estudio fue realizado por Gomes, Miranda y Costa [16] y actualizado por Ospina Torres y León Luna [30]. Como se puede observar en la Figura 1 no se encontró información sobre alguna iniciativa oficial que realice la preservación de la Web de Venezuela sin embargo existe una investigación [42] donde se describen los lineamientos para la construcción de un archivo histórico de la información digital producida en Venezuela. Debido a que no existe una iniciativa oficial, en este trabajo especial de grado se plantea desarrollar los módulos de adquisición y gestión de almacenamiento de un prototipo de Archivo Web para la preservación de páginas Web de Venezuela, enmarcadas en el proyecto PI-03-8139-2011/P financiado por el Consejo de Desarrollo Científico y Humanístico (CDCH). Existen múltiples enfoques y técnicas para adquirir y almacenar el contenido que se quiere preservar, por lo que es necesario analizar cada una de ellas para poder determinar cuáles son más adecuadas a las necesidades del prototipo de preservación que se quiere construir. Así mismo como parte del diseño de los módulos se estudiaron y seleccionaron Capítulo I Planteamiento del Problema Pág - 3 herramientas desarrolladas y/o aprobadas por organismos como la Internet Archive o la IIPC. Para el uso efectivo de estas herramientas es indispensable tener conocimientos técnicos de las mismas, además su integración y configuración pueden llegar a ser muy complejas, por lo que parte del objetivo del desarrollo de estos módulos es lograr una integración transparente al usuario final y facilitar la configuración por medio de interfaces para cada una de las funciones y que a su vez se puedan visualizar los resultados de llevar a cabo las tareas asociadas a dichas funciones, consideradas métricas del Archivo Web. Capítulo I Planteamiento del Problema Pág - 4 Justificación Al lograr la preservación Web se estaría garantizando la disponibilidad del contenido que en caso de dejar de estar en línea pueda ser utilizado en investigaciones presentes y futuras, así como para consultas de carácter informativo, logrando así que la persistencia de contenido de interés no se vea afectada por las características inestables de la web en cuanto a lo efímero que puede llegar a ser una publicación. El desarrollo del prototipo de preservación Web planteado en este trabajo especial de grado está enfocado específicamente a la salvaguarda de sitios Web de Venezuela, de páginas que contengan aspectos históricos, culturales, sociales, entre otros. Para llevar a cabo la adquisición y el almacenamiento de sitios Web es necesario tener conocimientos técnicos de las herramientas utilizadas, el módulo de adquisición planteado en este proyecto, permite que los usuarios puedan configurar y controlar la tarea de adquisición y ver métricas de los rastreos ocultando la complejidad inherente a esta tarea, a través de una aplicación Web que permite suscribir solicitudes de rastreo de sitios Web. Para el módulo de gestión de almacenamiento, el sistema es quien se encarga de indexar los contenedores a través de tareas programadas regularmente. El usuario podrá consultar la URL de su preferencia y poder ver un listado de las distintas versiones que fueron rastreadas y visualizar de una manera sencilla las métricas correspondientes a cada contenedor sin necesidad de tener conocimientos sobre el uso de las herramientas para lograr esta tarea, cabe destacar que las métricas se almacenan en distintas ubicaciones y formatos. Capítulo I Planteamiento del Problema Pág - 5 Objetivos Generales: Desarrollar e implementar los módulos de adquisición y gestión de almacenamiento de sitios Web para un prototipo de archivo Web. Objetivos Específicos: 1. Implementación de la arquitectura básica del prototipo de archivo Web usando como base la arquitectura propuesta por Ospina y León [30] y el modelo de referencia de la IIPC (International Internet Preservation Consortium) 2. Adaptar el método de desarrollo AUP( Agile Unified Process )en una arquitectura basada en componentes 3. Desarrollar el módulo de adquisición usando el método de adquisición del lado del cliente 4. Desarrollar el módulo de gestión de almacenamiento de archivos WARC. 5. Determinar y almacenar métricas de adquisición y almacenamiento. 6. Realizar pruebas de conformidad. Capítulo I Planteamiento del Problema Pág - 6 Alcance Este trabajo especial de grado propone la creación de los módulos de adquisición y de gestión de almacenamiento de un prototipo para realizar el archivado de sitios Web de Venezuela, y hacer disponibles al módulo de acceso los contenidos preservados, el cual no forma parte de este trabajo. Al momento de hacer la adquisición del contenido se toma en cuenta la frecuencia de rastreo configurada por el usuario por lo que no se contempla duplicidad de contenido. Dentro del alcance de este Trabajo Especial de Grado se contempla ubicar las métricas relevantes recolectadas durante la adquisición y el almacenamiento del contenido con el fin de mostrarlas dentro de la aplicación de Consulta, cabe destacar que se hará análisis sobre algunas de estas métricas. En el desarrollo del protototipo se utilizaron y configuraron componentes existentes, que fueron integrados con componentes desarrollados con la finalidad de lograr la automatización del proceso de rastreo y la indexación del contenido rastreado. Capítulo II Marco Conceptual Pág - 7 Capítulo II Marco Conceptual En este capítulo se describen los conceptos que permiten entender el trabajo realizado. 2.1 Preservación Web La preservación Web puede definirse como el proceso de recolectar información disponible en la World Wide Web, almacenarla en un formato de archivo, y garantizar que el contenido pueda ser consultado posteriormente [27]. A continuación se definirá el patrimonio Web, como se puede preservar y la problemática asociada a la preservación de este tipo de recursos. 2.1.1 Patrimonio Web El patrimonio cultural puede ser considerado como la herencia cultural propia del pasado de una comunidad, con la que ésta vive en la actualidad y que transmite a las generaciones presentes y futuras [1]. La UNESCO ha clasificado el patrimonio en tangible (objetos arqueológicos, históricos, artísticos, etnográficos, entre otros) e intangible (Expresiones y prácticas culturales, constituido, entre otros elementos, por la poesía, los ritos, los modos de vida, investigación científica) Una vertiente moderna del patrimonio es aquella que no sólo toma en cuenta las memorias pasada sino también los testimonios presentes, lo cuales se almacenan cada vez más en formato digital. Estos objetos digitales pueden ser textos, bases de datos, imágenes fijas o en movimiento, grabaciones sonoras, material gráfico, programas informáticos o páginas Web. El patrimonio Web es un subconjunto del patrimonio digital, incluye a los documentos Web así como los elementos que la constituyen (hojas de estilo, imágenes, scripts). Para preservar este tipo de patrimonio hay que contar con técnicas y la infraestructura adecuada. El patrimonio Web y en general el patrimonio digital tiene problemas asociados a su preservación, estos problemas no son sólo de carácter técnico sino que también tienen dimensiones sociales y de organización, por esta razón la UNESCO se interesó, ya que entre sus objetivos tiene el fomentar y permitir la preservación del patrimonio cultural, Capítulo II Marco Conceptual Pág - 8 científico e informativo de los pueblos del mundo. La UNESCO ha elaborado una estrategia para promover la preservación digital, que se articula en torno a: • Un amplio proceso de consultas con los gobiernos, responsables de la formulación de políticas, productores de información, instituciones y expertos encargados del patrimonio, fabricantes de programas informáticos y organismos de normalización. • La difusión de directrices técnicas. • La ejecución de proyectos piloto. • La preparación de un proyecto de carta para la preservación del patrimonio digital, que se someterá a la aprobación de la Conferencia General en su 32ª reunión. 2.1.2. Cómo preservar la Web La preservación Web, conocida también como Web Archiving es el proceso de coleccionar parte del patrimonio Web y asegurar que esta colección sea preservada para futuras consultas e investigaciones. Esta preservación debe garantizar que el contenido pueda ser reproducido similar a como funcionaba en su entorno operativo, por ello el conjunto de páginas seleccionadas para ser conservadas son mantenidas completas, es decir, acompañadas de imágenes, formatos de archivos, gráficas, entre otros. Los lugares donde se realiza la preservación y se guardan los contenidos se denominan Archivos de la Web o Archivos Web. Para llevar a cabo la preservación web hay que llevar a cabo las siguientes tareas: • Selección: Como cualquier otro material que quiera ser preservado es necesario definir un criterio de selección, por ejemplo bibliotecas nacionales pueden centrarse en preservar páginas que traten sobre herencia cultural, las universidades pueden centrarse en coleccionar sitios web que estén orientados a la investigación o aspectos educativos, los criterios de selección se adaptan a las necesidades de la organización encargada de llevar a cabo la preservación. • Adquisición: Los sitios web son recuperados utilizando un software para descargar imágenes, documentos, archivos HTML y otros archivos necesarios para reproducir fielmente el sitios web tal cual se veía en el momento en que fue capturado, este software también se encarga de coleccionar metadata asociada al proceso de recolección. Capítulo II Marco Conceptual Pág - 9 • Almacenamiento e indexación: La preservación web tiene entre sus objetivos preservar el contenido cosechado sin que sufra modificaciones. Para lograr esta meta las herramientas, estándares, políticas y mejores prácticas deben estar presentes en el lugar que se encargará de la gestión de los archivos web a través del tiempo. En este aspecto, también se contemplan las medidas a utilizar para facilitar la posterior búsqueda del contenido preservado. • Acceso: Los archivos web requieren herramientas de software especiales para su uso, los usuarios pueden ver los sitios web archivados página por página, o colecciones enteras pueden ser procesadas como datos, revelando las características generales de las colecciones. 2.1.3 Problemáticas asociadas a la preservación Web La preservación web tiene retos tanto a nivel de gestión como a nivel técnico, que pueden actuar como limitante. A continuación se detalla la problemática asociada a la adquisición del contenido a preservar: • Políticas de exclusión: Los sitios Web pueden tener políticas de exclusión respecto a los rastreadores (software encargado de obtener el contenido) esto puede hacer que sitios enteros sean inaccesibles para el rastreador o que se bloquean ciertas partes que no permitan obtener todo el contenido, como por ejemplo hojas de estilo o imágenes que son importantes para la apariencia del sitio Web. Si esta problemática se presenta una opción sería contactar a los propietarios de los sitios Web para que permitan hacer el rastreo, pero según datos del IIPC solo entre el 30- 50% de los propietarios responden, esta baja tasa de respuesta afecta la posibilidad de realizar el rastreo. • Alcance del dominio: No todas las páginas Web de un país están identificadas por su dominio, por ejemplo en Venezuela no todas las direcciones terminan en “.ve” que es el dominio perteneciente a Venezuela, por lo que es complicado delimitar cuando una página que tenga un dominio genérico como (“.com” o “.net”) es venezolana. • Web Oculta: Según Julies Masanés [2] a veces es complicado, incluso imposible para los rastreadores buscar la ruta de acceso a algunos documentos de un sitio Web, como los archivos que sólo se puede acceder a través de una interacción compleja (como el envío de una consulta a un formulario) por lo que no podrán ser Capítulo II Marco Conceptual Pág - 10 recuperados por un rastreador web. Esta porción de la Web, llamada "Web oculta" o "Web profunda" la cual se estima [5] que es más grande que la “Web superficial”. En cuanto al almacenamiento e indexación, a continuación se detalla la problemática asociada: • Elección de la política de indexación: Dependiendo de las políticas internas del proyecto se debe elegir que método de indexación vaya a utilizarse. Se tienen tres tipos: basado en palabra clave (URL), basado en contenido ayudado por un motor de búsqueda como Yahoo o Google y a través de minería de Datos. Como primer prototipo de Archivado Web se decide tomar una indexación por palabra clave (URL). • Cambios en la política: Si el equipo de trabajo decide realizar un cambio en las políticas de almacenamiento e Indexación, acarrearía un cambio técnico en la configuración realizada ya que esta no cambia con el tiempo. • Campos a indexar: Las herramientas que proveen la indexación, permiten indexar solamente texto, dejando por fuera los tipos de datos complejos [2]. Es por esto, que debe realizarse operaciones previas para ubicar cuales son los campos adecuados para identificar el documento de manera única en el índice. • Muestra de métricas: Para que el usuario visualice las métricas pertinentes se debe hacer uso de herramientas no nativas al sistema como tal, lo que implican un procesamiento y carga adicional sobre el sistema. La mayoría de estas herramientas, a pesar de ser consideradas muy buenas en su clase aún se encuentran el ambiente de calidad. 2.2 Modelo OAIS El modelo para un Sistema de Información para Archivos Abiertos (Open Archival Information System OAIS) es un intento a proporcionar un marco de alto nivel para el desarrollo y la comparación de archivos digitales o repositorios [17] Este modelo de referencia se dice que es abierto (Open), porque se hizo para ser accesible al público, donde cualquiera pueda participar. Un sistema de información de archivos, en una organización que consiste en un conjunto de personas y sistemas, que han aceptado la responsabilidad de preservar la información y hacerla accesible para una Capítulo II Marco Conceptual Pág - 11 comunidad designada. Esta definición enfatiza dos funciones principales para el archivo, la primera, preservar la información y la segunda, proveer acceso a la información archivada. El modelo referencial OAIS consiste de tres partes, que aunque están separadas se relacionan entre sí, cada una centrada alrededor del concepto de un archivo OAIS. La primera parte describe el ambiente externo dentro del cual el modelo OAIS opera. La segunda parte describe los componentes funcionales o los mecanismos internos con los cuales se hacen cumplir con las responsabilidades de la preservación siguiendo el modelo OAIS. La tercera parte describe la información de los objetos que son procesados, administrados y diseminados o difundido por el OAIS. 2.2.1 Ambiente OAIS Un archivo de tipo OAIS debe actuar en cooperación con estos actores externos para el cumplimiento de su misión. El modelo de referencia identifica y describe las entidades externas que constituyen el entorno del ambiente OAIS, y caracteriza a las interfaces entre estas entidades y el OAIS. Figura 2. Ambiente OAIS, traducido de [19] La Figura 2 muestra el ambiente OAIS. El ambiente comprende tres distintas entidades externas y caracteriza las interfaces entre estas entidades y el Archivo: 1. Productor: rol desempeñado por las personas o los sistemas cliente, que proporcionan la información a ser conservada 2. Consumidor: rol desempeñado por las personas o los sistemas cliente, que interactúan con los servicios de OAIS para encontrar y adquirir información conservada de interés 3. Gestión: responsable del manejo de los componentes funcionales y las políticas del Archivo, no así del día a día de las operaciones del archivo. Capítulo II Marco Conceptual Pág - 12 2.2.2 El modelo Funcional. Este modelo identifica y describe el conjunto básico de mecanismos que permiten al Archivo cumplir con su principal objetivo de preservar la información a largo plazo y hacerla disponible. En término más generales, describe la gama de actividades que deben llevarse a cabo por un Archivo. En él se definen seis capas de servicio de alto nivel o componentes funcionales, que en conjunto cumplen el rol doble del OAIS: preservar y proveer acceso a la información custodiada. A continuación se muestra en la Figura 3 el modelo de Referencia OAIS. Figura 3. Modelo de Referencia OAIS, traducido de [19] • Ingreso: acepta presentaciones de los productores y los prepara para el almacenamiento y la gestión dentro del archivo. • Almacenamiento del Archivo: para el almacenamiento, mantenimiento y recuperación de contenido del Archivo. • Gestión de datos: Maneja repositorios de las metadatos que describe la información almacenada en el Archivo, realiza la gestión de información sobre el Archivo y sus propiedades. • Administración: Maneja las operaciones cotidianas del Archivo y coordina las actividades de los demás componentes funcionales del OAIS. • Planificación de preservación: vigilancia del medio ambiente de la OAIS para garantizar la conservación a largo plazo de los contenidos del Archivo. • Acceso: el apoyo a los consumidores (usuarios) en la búsqueda y recuperación de contenidos del Archivo. 2.2.3 Modelo de información Capítulo II Marco Conceptual Pág - 13 Además de la descripción de los componentes funcionales de un archivo de tipo OAIS, este modelo también provee una descripción de alto nivel de los objeto de información manejados por el archivo. El modelo de información OAIS está construido alrededor del concepto de paquete de información y cómo esta estructura se transforma y mueve a través del archivo. 2.2.3.1 La información La información se define como cualquier tipo de conocimiento que se pueden intercambiar, y es expresada o representada por un tipo de datos, que puede incluir información adicional acerca de su significado. En general, se puede decir que "los datos interpretados con su representación de información, proporcionan información”. Figura 4. Obtención de la información de los datos, traducido de [19] Para poder interpretar correctamente la información es necesario poseer conocimientos base que permita entender la información recibida. En la Figura 4 se puede observar el flujo de objeto de datos y su conversión a objeto de información. 2.2.3.2 Paquete de información Un paquete de información está conformado por Información de Contenido e Información de Descripción de Preservación (PDI)como se muestra en la Figura , la Información de Contenido y la PDI están encapsulados y son identificables por la Información de Paquete. El paquete resultante es reconocible gracias a la Información Descriptiva. Capítulo II Marco Conceptual Pág - 14 Figura 5. Paquete de Información, traducido de [19] La Información de Contenido es la información que es el objetivo original de conservación. Se compone de los Objetos de Datos de Contenido (CDA) y su representación de información asociada necesaria para hacer a los CDA comprensibles a la comunidad determinada. La Información de Descripción de Preservación es necesaria para preservar la Información de Contenido, para asegurarse de que está claramente identificada, y para entender el entorno en el que se creó. La información de Descripción de Preservación se divide en cuatro tipos de información de preservación llamado procedencia, contexto, referencia y la fijación. Estas se describen a continuación: • Procedencia: describe la fuente de la información de contenido, que ha tenido la custodia de la misma desde su origen y su historia (incluyendo la historia de procesamiento). • El contexto: describe cómo la información de contenido se relaciona a otra información fuera del paquete de información. • La Referencia: ofrece uno o más identificadores, o sistemas de identificadores, por lo que la información de contenido puede ser identificada de forma única. • La fijación: proporciona un contenedor, o escudo protector, que protege la Información de contenido de la alteración no documentado La información de Paquete es esa información que, ya sea real o lógicamente, une, identifica y relaciona la Información de Contenido y la PDI. La información descriptiva es esa información que se utiliza para descubrir cuál paquete tiene la información de contenido de interés. Dependiendo de la configuración, esto puede no ser más que un título descriptivo del paquete de información que aparece en Capítulo II Marco Conceptual Pág - 15 algunos mensajes, o puede ser un conjunto de índices. 2.2.3.3 Variantes del paquete de información. Es necesario distinguir entre un paquete de información que se conserva en un OAIS y los paquetes de información que son enviados y difundidos desde un OAIS. Estas variantes pueden deberse a que estos pueden estar organizados de manera muy diferente a como el OAIS organiza la información que preserva. Por último, el OAIS puede proporcionar información a los consumidores que no incluyan toda la representación de información o la totalidad de la PDI. Estas variantes se conocen como el Paquete de Información de Envío al OAIS (SIP), el Paquete de Información del Archivo (AIP), y el Paquete de Información de difusión (DIP) que se muestran en la Figura 6. Figura 6. Flujo de datos de un OAIS, traducido de [19] El modelo de información asociado al modelo funcional forma el modelo de referencia, que se muestra en la Figura 7. Capítulo II Marco Conceptual Pág - 16 Figura 7. El modelo de referencia OAIS 2.2.4 Adaptación del modelo OAIS en la implementación de archivos Web La IIPC tiene entre sus metas fomentar el desarrollo y uso de herramientas comunes, técnicas y normas que permitan la creación de archivos Web internacionales [27], es por ello que propone una arquitectura funcional para Archivos Web basada en el modelo OAIS, la cual se muestra en la Figura 8. Capítulo II Marco Conceptual Pág - 17 Figura 8. Arquitectura funcional propuesta por la IIPC, basada en el modelo OAIS [2] En la definición de esta arquitectura se agrupan componentes o herramientas que tienen la función de realizar las tareas de un Archivo Web (estas tareas están descritas en la sección 2.1.2 del presente documento) de la siguiente manera [30]: • Herramienta de ingreso de datos(Data ingest tools) se encarga del ingreso de datos, labor que consiste en la adquisición de los sitios Web seleccionados • El proceso de selección es propio de las políticas de cada archivo sin embargo se apoya en las herramientas de ingresos de datos para definir un repositorio de los sitios web a preservar así como la frecuencia con que deben hacerse • Para la indexación del contenido a preservar se hace uso de herramientas desarrolladas para llevar a cabo esta tarea • El almacenamiento es llevado a cabo por las herramientas de almacenamiento (storage tools) y los manejadores de contenido. • Y el acceso a se hace a través de las herramientas de acceso (access tools) Capítulo II Marco Conceptual Pág - 18 A continuación se describen las tareas, métodos y herramientas utilizadas para crear un archivo Web. 2 .3 Adquisición El término adquisición designa los diferentes medios técnicos utilizados para obtener el contenido a ser preservado, la captura del contenido se puede hacer tanto en línea como fuera de línea (se obtienen los archivos directamente del servidor), muchas veces se necesita más de un enfoque para obtener el contenido, es por ello que existen varios métodos de adquisición. 2.3.1 Métodos de Adquisición Desde el punto de vista técnico, esta fase de interacción con el productor o servidor Web, no es una tarea sencilla. La razón es que no basta un solo enfoque para cubrir eficientemente la gran variedad de técnicas de publicación en Web. El principal obstáculo que las herramientas de adquisición tienen que superar es la incapacidad del protocolo HTTP para proporcionar una copia masiva de los contenidos del servidor. Existen tres tipos de métodos de adquisición, el proceso de recolección se puede hacer de forma remota como cliente, cerca de la salida del servidor o por acceso directo a los archivos del servidor. La primera opción se hace con rastreadores o araña web, que es derivada y adaptada de la tecnología de los motores de búsqueda y proporcionan una herramienta poderosa para la captura desde el lado del cliente. El rastreador es para el servidor Web un cliente como cualquier otro, por eso se utiliza el término "archivado del lado del cliente" para este método de adquisición. Dependiendo de la arquitectura backend del servidor Web y el nivel de interacción con el cliente, los rastreadores pueden capturar la página Web completa, o solo algunas partes de ella. La parte restante fuera del alcance de los rastreadores es conocida como "Web profunda" o "Web oculta"[5]. Existen dos métodos alternativos para adquirir el contenido, pero han sido menos aplicados y permanecen en investigación. Ambos métodos necesitan ser operados desde el lado del servidor, por lo que requiere no sólo autorización sino también una participación activa del propietario del sitio. El primero se basa en los usuarios del sitio, aprovechando su ruta de navegación y la exploración de los contenidos del sitio para archivarlos. Como se basa en el registro de las transacciones realizadas entre los usuarios de un sitio y el servidor, recibe el nombre de "archivo de transacciones". El segundo consiste Capítulo II Marco Conceptual Pág - 19 en copiar directamente desde el propietario o editor todos los archivos que componen el sitio Web. Recibe el nombre de "archivo del lado del servidor". Estas técnicas son más complicadas que el archivado del lado del cliente, porque requieren como se mencionó anteriormente la participación activa de los productores o propietarios del sitio Web. Se recomienda no aplicar estas técnicas a gran escala pero se pueden aplicar en los casos en que el rastreador no logra captar con precisión el contenido que desea [2]. En el prototipo de preservación Web planteado en el presente trabajo se utilizará el archivado del lado del cliente, el cual se detalla en la siguiente sección. 2.3.1.1 Archivado del lado del cliente Este es el principal método de adquisición tanto por su simplicidad, como por su escalabilidad y adaptación a un entorno cliente-servidor como se muestra en la Figura 9. Los rastreadores se adaptan a lo que es la forma habitual de acceder a la Web (peticiones http). Esto permite el archivado de cualquier sitio que sea accesible libremente ya sea en la Web tradicional en intranets o extranets, es necesario que el rastreador obtenga la autorización correspondiente. Este método no sólo adopta la misma posición de usuarios normales de la Web, sino que también imita su forma de interacción con los servidores. Los rastreadores comienzan desde las páginas semillas, las analizan, extraen los enlaces y buscan los documentos enlazados. A continuación, reiteran este proceso con los documentos traídos y sigue el procedimiento siempre que haya vínculos a explorar, entonces encuentran más documentos dentro del alcance definido. Cada página tiene por lo tanto que ser "descubierta" por extracción de enlaces desde otras páginas. Capítulo II Marco Conceptual Pág - 20 Figura 9. Archivado del lado del cliente La tecnología de rastreo ha sido desarrollada originalmente para fines de indexación. Su aplicación para el archivado Web, a pesar de que reutilizan la mayoría de sus aspectos implica varios cambios. El primero es que los rastreadores para archivado trataran de buscar todos los archivos independientemente de su formato para archivar una versión completa de los sitios, al contrario de los rastreadores de motores de búsqueda que suelen buscar sólo los archivos que pueden indexar. La segunda diferencia tiene que ver con la gestión temporal de los rastreos. Para evitar la sobrecarga de los servidores Web, los rastreadores respetan normas de cortesía (se establece un retardo fijo entre dos peticiones, por lo general de varios segundos, o un retardo que depende del tiempo de respuesta del servidor, [9]). Esto implica que una captura Web puede durar varios minutos en el mejor caso, varias horas o incluso días. Este retraso plantea un problema de la consistencia temporal de la captura del sitio, que puede sufrir cambios durante el tiempo que está siendo capturado. Esto afecta a los rastreadores de archivado porque el rastreo debe proporcionar el contenido y no solo la dirección al mismo., los documentos web deben ser rastreados en su conjunto, con o sin su coherencia interna, siendo el único contexto para la navegación y la interpretación. Capítulo II Marco Conceptual Pág - 21 Esto tiene consecuencias de largo alcance en lo que respecta que la política de rastreo. Como la cortesía con los servidores siempre ha sido un cuello de botella para el rastreo, los rastreadores han estado utilizando prioridad de rastreo principalmente en amplitud (breadth-first), con algunas variantes principalmente destinadas a rastrear las "mejores" primeras páginas, pero esta estrategia de planificación de rastreo tiene el inconveniente de aumentar la discrepancia temporal de los rastreadores a nivel de sitio [2]. Dado el retardo entre las solicitudes y los recursos disponibles para rastrear, se tiene que encontrar el número óptimo de sitios para iniciar y al mismo tiempo asegurar que la frecuencia de solicitud será establecida por las normas de cortesía, sin retardos innecesarios entre las solicitudes. La Figura 10 muestra la línea frontal" (front-line) de un rastreo, cuyo tamaño corresponde a la asignación óptima de los recursos de rastreo. Figura 10. Primera línea de un rastreo, traducido de [2] 2.4 Almacenamiento Realizar una copia de un sitio Web es una tarea compleja, ya que un sitio Web puede ser tan simple como un único archivo o una de las colecciones más complejas de artefactos de software que cooperan entre sí [2]. Capítulo II Marco Conceptual Pág - 22 Lo ideal al momento de realizar la copia sería que el archivo fuera isomorfo al original (misma estructura jerárquica, nombres de archivos, mecanismos de enlaces, formato), pero por razones prácticas, esto casi nunca sucede. Esta es la razón por la cual los responsables de los Archivos Web adoptan estrategias de transformación. Estas transformaciones pueden afectar el direccionamiento, los mecanismos de enlazado y los formatos, así como la representación del objeto en sí. 2.4.1 Métodos de Almacenamiento Hasta ahora se han adoptado tres estrategias para la estructuración de Archivos web. La primera estrategia es crear una copia local de los archivos del sitio y navegar a través de esta copia de la misma manera como en la Web. La segunda es ejecutar un servidor Web y servir el contenido en este entorno a los navegadores del usuario. La tercera opción es volver a organizar los documentos según diferentes lógicas (no web) de nombramiento, direccionamiento y representación. Para el presente trabajo, la estrategia adoptada fue la de Archivado con Servidor Web, la cual será descrita en la siguiente sección. Cabe destacar que la elección del método siempre dependerá de los alcances y objetivos del proyecto. 2.4.1.1 Archivado con Servidor Web Esta opción permite evitar las limitaciones en cuanto al tamaño del Sistema de Archivo, que es crucial para la preservación Web a gran escala. Se basa en el archivado de la respuesta, las respuestas del servidor original se almacenan sin cambios en contenedores de archivos WARC (formato de archivo Web ARChive que será explicado en detalle en la sección 2.6.1 del presente documento), que permite servirlos más tarde a los usuarios del archivo con un servidor HTTP. Un archivo WARC registra una secuencia de archivos Web cosechados, cada página está precedida por un encabezado que describe brevemente el contenido de cosecha y su longitud. Capítulo II Marco Conceptual Pág - 23 Figura 11. Archivado con Servidor Web [2]. Como podemos ver en la Figura 11, con el Archivado con Servidor Web el sitio original se rastrea y las respuestas se almacenan sin cambios en el contenedor WARC. Lo que permite evadir el mapeo del archivo del sistema para la asignación de nombres por convenio y el cambio de la estructura del enlace. El acceso requiere que un Servidor Web obtenga lo que esté almacenado en los contenedores y los envía como una respuesta al usuario final, permitiendo que la navegación por el sitio web se pueda hacer tal cual como fue rastreado. La principal ventaja de la utilización de contenedores WARC es la posibilidad de superar la limitación del sistema de archivos de almacenamiento en términos de tamaño ya que se almacenan menos archivos individuales en el sistema de archivo [2]. La desventaja de este enfoque se basa en que es imposible el acceso directo a los archivos almacenados. Son necesarias dos capas extra de aplicación para acceder al contenido: un sistema de índice para archivos WARC y un servidor Web. Estas dos capas no son muy complejas, pero requieren la ejecución de un ambiente de acceso, que puede ser difícil de configurar y mantener en organizaciones pequeñas. Este método es apropiado para la preservación Web a mediana y gran escala, así como para los pequeños archivos que se ocupan de la preservación de la autenticidad del contenido. Como estos métodos almacenan las respuestas del servidor original, como llega Capítulo II Marco Conceptual Pág - 24 del cliente, sin ningún tipo de transformación, en realidad ofrece más fidelidad que los otros métodos 2.5 Indexación y Motores de Búsqueda. Para garantizar un orden y facilitar el acceso a estos contenedores se hace uso de índices. Estos disminuyen los tiempos de búsqueda y facilitan el proceso dentro del repositorio. Una indexación basada en un archivo Web será acumulativa y dependerá de la política de recolección que se tenga y se tendrá una referencia de todos los documentos que se han cosechado y almacenado en el archivo. La mayoría de las herramientas de acceso a la Web están basadas en indexación automática, que no es más que la indexación que se realiza a través de procedimientos algorítmicos. Existen varios tipos de indexación automática y cuando la Web fue ganando popularidad se utilizaron tres tipos diferentes: el primero fue un simple estilo de índice parte-de-atrás-del-libro, como en muchos libros escolares donde las palabras claves están vinculadas a una página o un capítulo, cabe destacar que para la Web las palabras claves están vinculadas a una URL. El segundo tipo sería indexando las palabras claves en conjunto con árboles objetos de los sitios revisados y el tercero se realizaría con los motores de búsqueda más la indexación [2]. Para este trabajo especial de grado, la indexación está basada en palabra clave con la ayuda de una plataforma de búsqueda, siendo la URL del sitio cosechado la clave de indexación. Al momento de la consulta, se coloca la URL deseada y se obtendrá como resultado todas las versiones correspondientes a la misma. 2.5.1 Acceso. El acceder a un archivo Web se refiere a la acción de hacer una consulta por parte de los usuarios. Existe una gran necesidad de proveer métodos para acceder a un archivo Web. Puede ser un acceso proveniente de una dirección URL, un motor de busqueda o de Minería de Datos. Sin importar cuál sea el método utilizado se debe crear una interfaz gráfica para el usuario. Para almacenar los archivos se utiliza un registro de encabezado con una identificación única que se basa generalmente en la dirección del archivo y una marca de tiempo, esta marca de tiempo se utiliza para señalar las distintas versiones que pueda tener Capítulo II Marco Conceptual Pág - 25 el archivo hasta el momento que se haga la búsqueda por parte del usuario. La función que realiza la búsqueda devuelve una lista de referencias que enlazan con el archivo y se utilizan como punto de entrada para el usuario. En la actualidad, la mayoría de los archivos utilizan este método para proporcionar acceso a los documentos ya que es relativamente más sencillo indexar los registros de las cabeceras de la manera antes mencionada. 2.6 Formatos de Documentos para Almacenamiento El contenido Web que se quiere preservar es almacenado en un formato de archivo apropiado para este tipo de contenido, uno de los más utilizados es el formato WARC el cual se explica en la siguiente sección. 2.6.1 Formato WARC El formato WARC (Web ARChive) es un estándar abierto, documentado públicamente, desarrollado bajo los auspicios de la IIPC. Presentado en mayo de 2005 como un elemento de trabajo a través de la norma ISO TC46/SC4, fue aprobado como un estándar internacional en mayo de 2009 [7] Este formato especifica un método para combinar múltiples fuentes digitales dentro de un archivo agregado conjuntamente con información relacionada. La fuente está fechada e identificada por la URL de la misma, precedida por cabeceras de texto plano. Por convención, un archivo con este formato debe ser nombrado con la extensión “.warc” y tener el encabezado MIME, el cual indica el tipo de medio que representa el contenido del mensaje “MIME-type” con valor “application/warc”. Este formato es una extensión del formato ARC, usado por el Internet Archive para almacenar la información cosechada por los rastreadores Web tales como Heritrix. EL formato WARC generaliza el formato ARC para obtener un mejor soporte en cuanto a la cosecha, el acceso y el intercambio de necesidades de las organizaciones encargadas del archivado Web. Además del contenido Web cosechado, el formato almacena información secundaria tal como la metadata correspondiente, detección de eventos de manera abreviada y transformaciones realizadas. En la fase de producción se utiliza para la accesibilidad Web del contenido archivado, representa el estado final que será difundido a través de Internet a un agente de usuario (navegador Web). Capítulo II Marco Conceptual Pág - 26 Con la creación de este formato se busca añadir nuevas características, tales como: • El almacenamiento de las cabeceras de petición del protocolo HTTP. • El almacenamiento de metadata arbitraria. • La asignación de un identificador para cada archivo de contenido. • La gestión de duplicados y de registros migrados y la segmentación de los registros. El formato WARC está hecho para almacenar todo tipo de contenido Web, ya sea obtenido por el protocolo HTTP o por cualquier otro protocolo. Entre sus principales características se tienen: • Guarda contenido junto a la información de los protocolos de cosecha. • Guarda metadatos enlazados a otros datos. • Permite compresión de datos y preservar integridad de los registros. • Permite manejos de registros de gran tamaño. • Es capaz de detectar duplicados dentro de un mismo contenedor y hacer transformaciones posteriores de un archivo. En la Figura 12 se puede observar un ejemplo de un archivo WARC. Figura 12. Ejemplo de un Archivo WARC [7] El formato WARC es la concatenación de uno o más registros WARC. Un registro consiste en un encabezado de información de ese registro seguido de bloque del contenido. Existen 8 tipos de WARC definidos: Capítulo II Marco Conceptual Pág - 27 • Warcinfo: Este tipo de registro describe a los registros subsiguientes a él. Típicamente, aparece una vez al comienzo del contenedor WARC. Para un archivo Web, comúnmente contiene la descripción del rastreador Web. Un archivo WARC contiene otros archivos WARC más pequeños y no es estrictamente necesario que estos contengan su propio registro “warcinfo”. También, para permitir la concatenación de archivos WARC dentro de una WARC más grande, está permitido que el registro “warcinfo” aparezca en el medio de este archivo. El campo “subject-uri” de este tipo de registro debería estar referido a un nombre URI, sintetizado si es necesario, que es quien representa o hace referencia con el WARC en sí. • Response: Contiene una respuesta completa del protocolo, tal como una respuesta HTTP incluyendo los encabezados y el contenido. • Resource: Este tipo de registro contiene un recurso, sin la respuesta completa del protocolo. • Request: Es el que mantiene la forma en la cual el contenido primario de un registro fue solicitado. Para el caso de un rastreador Web, este conservará la petición HTTP. • Metadata: Este tipo de registro posee el contenido creado en orden de describir o explicar el recurso que se ha cosechado. Casi siempre hará referencia a otro registro de otro tipo, aunque se le permite, en caso de ser necesario, tener registro de otro tipo de registro “metadata”. • Revisit: Este tipo de registro no es común, pero hace referencia al registro que describe el reconocimiento del contenido que ya ha sido cosechado e incluye un bloque abreviado que debe ser interpretado con relación a su registro anterior. Un registro “revisit” debería ser utilizado solamente cuando mientras se esté interpretando otro registro, se solicita consultar el registro anterior al mismo. 2.6.1.1 Encabezado WARC En la Figura 13 se puede observar el encabezado que tiene un archivo WARC. Se procederá a dar explicación de cada uno de los parámetros involucrados. Capítulo II Marco Conceptual Pág - 28 Figura 13. Encabezado WARC [7]. • warc-id: Es un parámetro fijo con el valor “warc/0.9”, que aparece en primer lugar en todos los registros y da inicio al archivo WARC mismo. Sirve para identificar el formato de archivo y la versión, y para asistir en la recuperación de errores cuando un proceso de lectura de un archivo WARC falla al buscar el siguiente bloque que se espera. • data-length: Representa el número de octetos en el registro, empezando con la letra “w” en el primer token. • subject-uri: Hace referencia a la URI original que ha sido cosechada por el rastreador Web. • creation-date: Es un parámetro de 14 dígitos que representan la captura de tiempo o timestamp en el formato “YYYYMMDDhhmmss” en la cual se dio inicio a la creación del registro. • content-type: Da a conocer que tipo de contenido posee el registro en el cual se está navegando. • record-id: Es un identificador asignado al registro que es globalmente único para su segmento. No se rige por ningún estándar en específico pero debería ser una URI legal que claramente indique su documento y registro que representa. • 2.6.1.2 Estándar del nombre del archivo o contenedor WARC y Recomendaciones. Es de ayuda seguir un estándar de instituciones que hacen imposible o muy poco probable que los nombres de los WARC agregados estén duplicados. La convención usada por el Internet Archive con los archivos WARC sigue el siguiente patrón: Capítulo II Marco Conceptual Pág - 29 Prefix-Timestamp-Serial-Crawlhost.warc.gz • Prefix: Es una abreviación que hace alusión al proyecto o rastreador Web que ha creado el archivo WARC. • Timestamp: Es una cadena de 14 dígitos que representan la captura de tiempo en formato GMT. Esta fecha representa el momento en el cual se comenzó el rastreo. • Serial: En un número de serial incremental, que en la mayoría de los casos es única. • Crawlhost: Hace referencia al nombre de dominio o a la dirección IP de la máquina que crea el archivo WARC. 2.7 Herramientas utilizadas para llevar a cabo la preservación web En base a los métodos seleccionados se realizó una revisión de una serie de herramientas de software libre que soportan dichos métodos y se escogieron las siguientes. 2.7.1. Heritrix Heritrix es un rastreador (o crawler) de archivos web a través de Internet. Su licencia es open-source y está escrito completamente en JAVA. Su interfaz de configuración es accesible usando un navegador Web, también puede ser lanzado desde línea de comandos usando un API REST (a partir de la versión 3), actualmente el rastreador cuenta con 2 versiones estables la 1.1.14 y la 3.x . Arquitectura Heritrix fue diseñado como un Framework de rastreo genérico donde diversos componentes pueden ser conectados. Los rastreos son configurables, para ello se eligen y configuran un conjunto de componentes específicos y se ponen en funcionamiento, la ejecución de un rastreo repite el siguiente proceso recursivamente (este proceso es común en todos los rastreadores Web) 1. Elegir un URI de entre todas las programadas 2. Buscar el URI 3. Analizar o archivar los resultados 4. Seleccionar los URI descubiertos que sean de interés, y sumarlos a los ya programados 5. Se termina el procesamiento de la URI actual y se repite el proceso Capítulo II Marco Conceptual Pág - 30 Los 3 componentes principales de Heritrix son: 1. El Alcance (Scope), 2. La Frontera (Frontier) 3. La cadena de procesamiento (ProcessorChains). A continuación de describen cada uno de ellos: • Alcance: Se encarga de validar si una URI esta fuera o dentro de las reglas de rastreo, el alcance incluye las semillas: URI que se usan para iniciar el rastreo, el alcance también interviene en la selección de URis mencionadas en el paso 4 del proceso de rastreo. • Frontera: Es el responsable de seleccionar el siguiente URI a ser procesado, además lleva un registros de las URIs cosechadas y otro de las URIs que ya han sido procesadas, estos registros se implementan con colas. • Cadena de procesamiento: Son un conjunto de procesadores modulares que realizan tareas específicas en cada URI, esto incluye; búsqueda del URI, análisis de los resultados devueltos y pase de URIs descubiertas a la frontera En la Figura 14 se describe la arquitectura de Heritrix: Capítulo II Marco Conceptual Pág - 31 Figura 14. Arquitectura de Heritrix [26] La Web Administrative Console puede ser vista como una aplicación independiente (standalone), su funcionalidad es la de permitir elegir los componentes de un rastreo y especificar los parámetros de un Crawlorder, con la Web Administrative Console es posible ver el estado del rastreo actual, sus logs y generar reportes. En caso de que Heritrix se utilice por línea de comando la Web Administrative Console no es necesaria. Un rastreo es iniciado cuando el CrawlController aprueba la Crawlorder, el CrawlController crea una instancia de todos los módulos necesarios para el rastreo, la Web AdministrativeConsole controla el rastreo a través del CrawlController. El CrawlOrder contiene suficiente información para crear el ámbito de aplicación. Datos tales como: el alcance, la semilla con la cual el Frontier iniciará el rastreo e Capítulo II Marco Conceptual Pág - 32 información de qué hacer con las URIs que sean descubiertas posteriormente. El Frontier es el responsable de ordenar los URIs a ser visitados, así como de asegurarse que las URIs no sean revisadas innecesariamente y moderar las visitas que el rastreador hace a cualquier sitio remoto. Se consiguen estos objetivos mediante el mantenimiento de una serie de colas internas de URIs para ser visitados y una lista de todos los URIs que ya han sido visitados o encolados. El rastreador Heritrix es multiproceso, por lo que un rastreo se puede ejecutar de manera concurrente. Cada subproceso de trabajo se denomina ToeThread y mientras se mantiene un rastreo activo cada ToeThread recorre los pasos que corresponden al proceso genérico de rastreo descrito anteriormente. Cada URI es representada por una instancia de CrawlURI, se empaqueta la URI con información adicional recogida durante el procesos de rastreo, los componentes del sistema comunican su progreso y la salida a través de CrawlURI, que lleva los resultados de procesamientos anteriores, para ser revisados posteriormente y finalmente el CrawlURI regresa a la frontera para influir en futuros reintentos o programación de rastreos El ServerCache contiene datos persistentes acerca de los servidores a través de CrawlURI. Contiene cualquier número de entidades CrawlServer recogiendo información como direcciones IP, política de exclusión de robots, capacidad de respuesta histórica y estadísticas de rastreos del host. La funcionalidad global de un rastreador con respecto a una URI programada es en gran parte especificada por la serie de procesadores configurados para ejecutarse, cada procesador a su vez realiza sus tareas marcando el estado del CrawlURI y retornando, las tareas realizadas varían en función del tipo de URI, historia o el contenido recuperado. Los procesadores se agrupan en cinco cadenas: • Procesadores en el PrefetchChain reciben el CrawlURI antes de resolver cualquier actividad de red o de ir a buscar la URI, Por lo general cada procesador demora, reordena o veta la tramitación posterior de una CrawlURI , por ejemplo para asegurar que las políticas de exclusión de robots se captan y son consideradas antes de que la URI sea procesada • Procesadores en el FetchChain , la actividad de red intenta adquirir el recurso que se refiere a un CrawlURI, es el caso típico de una transacción HTTP, un procesador de búsqueda llenará la demanda y respuesta en el buffers de la CrawlURI o indicará Capítulo II Marco Conceptual Pág - 33 cualquier condición de error que impida que el buffer sea llenado • Procesadores en el ExtractChain realizan seguimiento al procesamiento de un CrawlURI que busca las URIs ya finalizadas, extrayendo característica de interés, por lo general estos son nuevos URIs que también pueden ser elegibles para ser visitados, En este paso las URIs solo se descubren, no se evalúan • Procesadores en el WriteChain almacenan el resultado del rastreo –retornando contenido o características importantes – para almacenamiento permanente. El rastreador estándar simplemente escribe los datos en el formato de archivos de Internet, conocidos como archivos ARC o WARC, sin embargo terceros han creado procesadores que escriben los datos en otros formatos o indexan los resultados del rastreo • Por último, procesadores en el PostProcessChain realiza el mantenimiento final de las acciones de rastreo en el CrawlURI como las pruebas descubiertas. Principales Características Heritrix tiene las siguientes características: • Recoge contenido vía HTTP recursivamente de múltiples sitios Web en un solo rastreo, con cientos a miles de sitios Web independientes y millones de recursos distintos. • Ubicaciones de salidas ajustables para los registros, archivos comprimidos, informes y archivos temporales. • Se pueden configurar los bytes máximo de descargas, número máximo de documentos a descargar, y tiempo máximo para pasar el rastreo. • Número configurable de hilos de rastreo (trabajadores). • Configuración de cortesía que permite establecer un tiempo mínimo/máximo entre las solicitudes. • Por cada rastreo se crean archivos log que permiten verificar problemas, errores, URIs cosechadas, estadísticas, entre otros. • En la versión 3.x sólo está disponible BdbFrontier como implementación de Frontier, se visitan las URIs y se descubren nuevas páginas aplicando búsqueda en anchura. • La versión 3.x de Heritrix está basada en el spring java framework [14], este framework define unas estructuras llamadas bean, los bean son componentes configurables que constan de propiedades y otros beans, cada beans es Capítulo II Marco Conceptual Pág - 34 representado como un elemento XML, los archivos de configuración de los jobs están conformados por beans, en la Figura 15 se ejemplifica la configuración de un bean. Figura 15. Configuración de una semilla. • API REST: Heritrix 3.1.1 usa REST para exponer sus funcionalidades, la implementación REST de Heritrix está basada en Restlet que es un framework RestFul para java [15] Heritrix expone esta API a través de HTTPS, con este protocolo se hacen peticiones para recuperar o modificar configuraciones y manejos de rastreos. Cualquier cliente que soporte HTTPS puede ser usado para invocar el API REST, ejemplos de clientes de línea de comandos serian curl y wget. Limitaciones de Heritrix Las principales limitaciones actuales para tener en cuenta son: • Oficialmente sólo soportado y probado en Linux. Capítulo II Marco Conceptual Pág - 35 • Cada ejecución de rastreo es independiente, sin apoyo para programar revisita programada para un área de interés. • Capacidad limitada de rastreos ante fallas del sistema/hardware. 2.7.2 Solr Es una plataforma o motor de búsqueda de código abierto escrita en java y basada en el proyecto Apache Lucene, una librería que proporciona búsquedas de texto de alto rendimiento haciendo uso de índices invertidos, lo que logra una mayor velocidad y flexibilidad en la búsqueda de cadenas de texto y menor dependencia del tamaño del índice. Algunas de las características principales de Solr son: • Búsquedas de texto completo • Provee búsquedas dinámicas y distribuidas • La integración de bases de datos y replicación de índices. Como se ha comentado anteriormente Solr hace uso de un Índice Invertido[40], una estructura de datos de índice de almacenamiento de una asignación de contenido, como palabras o números, a sus ubicaciones en un archivo de base de datos o en un documento o conjunto de documentos. El objetivo de un índice invertido es permitir rápidas búsquedas de texto completo, a un costo de procesamiento mayor cuando se añade un documento a la base de datos. Se puede explicar el concepto de forma gráfica a través de la Figura 16. Figura 16. Índice Directo e Invertido [39] Capítulo II Marco Conceptual Pág - 36 Para las consultas, posee una interfaz HTTP con la posibilidad de configurar las respuestas en formatos como XML/XSLT, JSON, Python, Ruby, PHP, Velocity, binary, entre otras. Permite ordenar por cualquier número o campos y por funciones complejas de los campos numéricos. Hace uso del analizador de consultas DisMax (Disjunction Max) para obtener resultados de alta relevancia de consultas introducidas por el usuario [20]. La plataforma de Búsqueda se divide en dos grandes partes, el Índice y el Servidor: • El índice es el sistema de archivo que almacena la información. Esta sección contiene la configuración de Solr y la definición de la estructura de datos. • El Servidor es donde se proporciona el acceso a los índices y las características adicionales. También se admite la instalación de plugins para añadir funcionalidades. Solr realiza búsqueda por facetas basadas en valores únicos de campo, consultas explícitas, rangos de fechas y rangos numéricos. Da la posibilidad de dar al usuario sugerencias sobre la ortografía en las consultas. Entre otras características importantes que posee Solr se tiene: • Maneja campos estadísticos numéricos como mínimo, máximo, promedio (avg) y desviación estándar. • Combina consultas derivadas de diferentes sintaxis. • Sugiere de manera automáticas funcionalidades de para completar las consultas de los usuarios. • Permite la configuración de los resultados de mayor puntuación para una consulta. • Optimización en cuanto al desempeño. Indexación Para llevar a cabo la indexación es necesario colocar dentro del archivo que define las estructuras de datos a indexar llamado schema.xml el campo que se desea indexar. La definición de este se realiza siguiendo la siguiente sintaxis: <field name=“nombre de campo" type=“tipo de dato" /> Los tipos de datos están definidos por las clases de java, sin embargo Solr da la libertad de crear un nuevo tipo de dato en caso que se necesite. Además de los parámetros ya visto, la plataforma acepta parámetros adicionales para permitir la flexibilidad de la Capítulo II Marco Conceptual Pág - 37 indexación: • default: Valor a usar si no se recibe ninguno • required: Define si un campo es obligatorio. • indexed: Determina si un campo es buscable u ordenable. • stored: Determina si un campo se puede recuperar en una consulta. • multiValued: El campo contiene más de un valor. Figura 17. Arquitectura de Solr [38] En la Figura 17 se puede observar la arquitectura de Solr. En un primer nivel se tiene las librerías en las cuales está basada esta plataforma de búsqueda como se ha mencionado anteriormente (librería de Lucene). En el nivel superior Solr se divide en módulos, en la siguiente sección se describirán aquellos más destacados: • Manejador de Peticiones o Request Handlers: Este módulo maneja las peticiones a través de HTTP, el componente que recibe esta petición es el denominado componente select. Los otros módulos no son tan comunes y se especializan en el análisis profundo de la petición. • Componentes de Búsquedas o Search Components: forman parte del manejador de Búsquedas y se encarga de las consultas, las búsquedas en facetas, el resaltado de consultas y las estadísticas. • Manejador de Actualización o Update Handlers: maneja las peticiones de indexación. Capítulo II Marco Conceptual Pág - 38 • Escritores de Respuesta: Este módulo se encarga de dar la respuesta en el estándar que se desee o se solicite, se dispone de XML, JSON y binario. • Manejador de Peticiones de Extracción: que se encarga de la indexación de formatos enriquecidos, como lo es PDF o WORD, a través de la ayuda de un componente propio de Lucene llamado Apache Tika. Gracias a estos módulos es que se puede hacer uso de todas las características destacadas de Solr, como la habilidad de esta plataforma para retornar la lista de resultados de la búsqueda de un query, su completitud en cuanto al esquema de datos puesto que maneja tipos numéricos, campos dinámicos y claves únicas entre otros. 2.7.3 WARCTools Los WARC Tools es una herramienta de código abierto que proporciona una librería, un conjunto de líneas de comando de terminal, plug-ins para los servidores web y una documentación general para la manipulación de los archivos Web contenidos en WARCs. La idea principal de los WARC Tools es facilitar y promover la adopción del formato de archivo WARC (visto anteriormente) para el almacenamiento de los archivos Web. El proyecto es liderado por Hanzo Archives [41], en colaboración con el equipo de trabajo del Internet Archive y soportado por el International Internet Preservation Consortium (IIPC) [27] Las herramientas que proporcionan los WARC Tools son manejadas a través de scripts que a su vez son programables, es decir que pueden ser modificadas según sean las necesidades de la organización que las utilice. Para el presente Trabajo Especial de Grado se hizo uso del conjunto de líneas de comando a través de la terminal del sistema y el uso de shell script. A continuación se dará a conocer los comandos que esta herramienta proporciona: • arc2warc: Dado un archivo ARC, este comando crea un archivo WARC (aunque no es de buena calidad y está aún en desarrollo). Se dice que no es de calidad ya que este tipo de WARC no tendría los encabezados HTTP que son característicos en este. • warc2warc: Da como resultado un archivo WARC, dando como resultado otro archivo WARC, hace la compresión a warc.gz • warcdump: Lanza como resultado el contenido del archivo WARC por salida estándar Capítulo II Marco Conceptual Pág - 39 • warcextract: Lanza por salida estándar el contenido de la metadata que existe en el archivo WARC. • warcindex: Crea un índice referencial del archivo WARC, en el podemos ver campos como identificador (warc-id), desplazamiento (offset), tipo de contenido (content- type), ruta (URI), tamaño (content-length), entre otros. • warcunpack_ia: Lanza como resultado un directorio que se crea a partir de una regeneración de la estructura del sitio original, no necesariamente es la misma, mas sin embargo este mismo realiza la transformación de las direcciones relativas. • warcvalid: Verifica la correctitud de un archivo WARC. 2.7.4 REST (Representational State Transfer) Es una técnica de arquitectura software para sistemas hipermedia distribuidos como la World Wide Web[12], REST está basado en el concepto de representación de recursos , un recurso es cualquier concepto coherente y significativo que pueda ser utilizado y es accedido utilizando un identificador global, un URI es un ejemplo de recurso, para manipular los recursos los componentes de la red (cliente y servidor) se comunican a través de una interfaz estándar (el protocolo HTTP ) e intercambian representaciones de estos recursos , un ejemplo de representación de recurso es una página HTML Los sistemas que siguen los principios de REST se llaman Restful, e implementan un API web que sigue los siguientes principios: • El URI es la base para la web API , por ejemplo http://example.com/resources/ • La Web API soporta internet media type, con frecuencia se usa JSON pero otros tipos de datos son posibles. • Soporta un conjunto de operaciones asociados a los métodos HTTP (GET, PUT, POST, DELETE). • El API debe ser hypertext driven [13]. 2.8 Resumen de uso de métodos y herramientas En [30] Ospina Torres y León Luna realizan un estudio comparativo de un total de 52 iniciativas de preservación web mostrando un resumen de los métodos y herramientas utilizados por estas iniciativas para realizar la adquisición y el almacenamiento de sitios web. Como se puede apreciar en la Figura 18 el método de adquisición descrito en la sección 2.3.1.1 de este documento es el más utilizado y Heritrix es el rastreador más usado Capítulo II Marco Conceptual Pág - 40 Figura 18. Resumen de métodos y herramientas de adquisición usadas por iniciativas de preservación web a nivel mundial [30] Como se puede observar en la Figura 19 el método más utilizado para el almacenamiento es el que usa servidor web descrito en la sección 2.4.1.1 de este documento. Figura 19. Resumen de métodos y estándares de almacenamiento usados por iniciativas de preservación web a nivel mundial [30] En la Figura 20 se muestra un resumen de uso encuanto a los indizadores utilizados por las iniciativas. Se puede notar que el indizador más utilizado es NutchWAX aunque en este trabajo especial de grado se utiliza Solr, el cual será explicado en la sección 2.7.2. La razón por la que se utliza Solr es porque NutchWAX soporta únicamente formato de documento ARC y en este trabajo especial de grado se utiliza el formato WARC (explicado en la sección 2.6), además NutchWAX no es capaz de soportar grandes cantidades de información, característica que no presenta una limitación para Solr. Capítulo II Marco Conceptual Pág - 41 Figura 20. Resumen de indizadores usados por las iniciativas de preservación Web a nivek mundial [30]. Una vez descritas las herramientas y su porcentaje de uso se hará una descripción de algunas iniciativas estudiadas para conocer el estado del arte en el dominio de Archivos Web. 2.9 Estado del arte Como se mencionó en el planteamiento del problema muchos países el mundo cuentan con iniciativas de preservación web en [4] se puede revisar una lista de estas iniciativas. Varias de estas iniciativas nos sirvieron de referencia a lo largo del desarrollo de este trabajo especial de grado, tanto por su funcionamiento como por la información técnica brindada, a continuación se hará reseña de tres de ellas. 2.9.1 Portuguese Web Archive Este proyecto surge como una iniciativa para archivar la Web portuguesa, el proyecto está a cargo de la FCCN (Foundation for National Scientific Computing), el PWA (Portuguese Web Archive) proporciona acceso a datos históricos y culturales preservados de la web portuguesa, con la existencia de la PWa se busca [39]: • Contribuir al uso de portugués como lenguaje de comunicación en la Web. • Proporcionar acceso a contenido Web de interés para trabajos científicos en diferentes campos como: historia, sociología o lengua. Capítulo II Marco Conceptual Pág - 42 • Reducir la dependencia de Portugal en cuanto al uso de servicios extranjeros para el procesamiento y búsqueda de datos en la Web. • Fuentes de evidencias en casos judiciales que requieran información publicada en la Web pero que ya no está disponible en línea. Herramientas utilizadas • Heritrix: para implementar el rastreo • Hadoop: Una plataforma de software para distribuir computo que implementa el paradigma de programación de Google llamado MapReduce, para soportar el procesamiento de cluster. • Wayback Machine: para soportar indexación por URL y búsquedas. • NutchWak: para permitir indexar por términos y realizar búsquedas. Las estadísticas que se extraen del contenido de los archivos son almacenadas en una base de datos relacional PostgreSQL, además desarrollaron dos sistemas: ARC replicator (rARC) y el Grid Appliance for the Archive (GAppA), los cuales tienen planeado lanzarlos como proyectos open-source. El rARC es un sistema distribuido que permite la replicación de archivos ARC, esto se hace con la idea de no tener toda la data centralizada y así tener mecanismo de respaldo ante la pérdida o corrupción de la data original. El GappA es una plataforma de software diseñada para proporcionar acceso remoto a la data archivada y así permitir la cooperación de varios cluster de computadoras. En la Figura 21 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Capítulo II Marco Conceptual Pág - 43 Figura 21. Portuguese Web Archive 2.9.2 Library of Congress Web Archives La Biblioteca del Congreso preserva y proporciona acceso permanente a los artefactos culturales de Estados Unidos. Esto incluye los materiales digitales, como Internet. En el año 2000 la biblioteca del congreso creó un proyecto piloto para recoger y preservar los sitios Web, se formó un equipo multidisciplinario del personal de la biblioteca con el fin de idear estrategias para evaluar, seleccionar, coleccionar, catalogar y proporcionar acceso al material recogido, desde el año 2003 forma parte de la IIPC. Entre otros archivos temáticos hechos por la biblioteca del congreso se pude mencionar: Elecciones nacionales Estados Unidos, la guerra de Irak y los acontecimientos del 11 de septiembre. Herramientas utilizadas: La biblioteca utiliza software de código abierto como base para algunas herramientas: • Heritrix para rastrear el contenido a preservar. • Wayback para desplegar el contenido preservado. Capítulo II Marco Conceptual Pág - 44 Las posibilidades técnicas para la adquisición, el acceso y almacenamiento se basan en plataformas abiertas como Linux. En la Figura 22 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Figura 22. Library of Congress 2.9.3 UK Web Archive El archivo del reino unido contiene los sitios web que reflejan la diversidad de vida, intereses, y actividades del reino unido, los sitios web de su país se encuentran en constante cambio e incluso algunos desaparecen por eso su objetivo es recopilar, salvaguardar y dar acceso permanente a los principales sitios del reino unido para la generaciones futuras. Entre las características de este proyecto se puede mencionar • Cuenta con un sistema para postulación de sitios web por parte del cualquier usuario, estas postulaciones son luego revisadas y de acuerdo a algunos criterios unas son aprobadas y otras desechadas. • Intentan trabajar en conjunto con los propietarios de los sitios web al momento de hacer la preservación, esto lo hacen en caso de necesitar permisos. • Presentan estadísticas de sitios web preservados por mes. Capítulo II Marco Conceptual Pág - 45 • Físicamente los archivos preservados se encuentran en la biblioteca británica Herramientas utilizadas • Heritrix versión 1.14.4, lo hacen con una política de cortesía que no sobrecargue los servidores web, tomando un delayfactor de 5, por ejemplo si buscar la última URL tomó 800 milisegundos, la siguiente solicitud se hará en 4000 milisegundos (4 segundos), en cuantos a los archivos robots.txt se respetan completamente, y existen limitaciones del número de URL a descargar y el tamaño. • Web Curator Tool (WCT) que fue desarrollado en conjunto por la biblioteca nacional de Nueva Zelanda y la biblioteca británica bajo el auspicio del IIPC. • Utilizar la WTC permite a las personas encargadas de realizar el archivado , manejar el flujo de trabajo siguiendo los siguientes procesos: o Autorización del rastreo: Obtener permisos para obtener el contenido web. o Selección, alcance y planificación: Como, cuando y con qué frecuencia debe realizarse el rastreo. o Descripción: Agregar metadata descriptive. o Rastreo: Realizar la descarga de los sitios web usando Heritrix. o Asegurar calidad: Asegurarse que el rastreo se realizó como se esperaba. En la Figura 23 se puede apreciar la interfaz con la que cuenta esta iniciativa de preservación web. Capítulo II Marco Conceptual Pág - 46 Figura 23. UK Web Archive Capítulo III Marco Metodológico Pág - 47 Capítulo III Marco Metodológico En esta sección se explicará que es una metodología de desarrollo de software, además se explicará la metodología seleccionada para la implementación del prototipo de preservación Web. 3.1 Metodología de Desarrollo de Software Realizar un proyecto de desarrollo de software no es una tarea trivial, por ello se deben utilizar técnicas, marcos de trabajo y métodos que faciliten esta tarea formalmente una metodología de desarrollo de software es: “Un marco de trabajo usado para estructurar, planificar y controlar el proceso de desarrollo es un sistema de información” [35] Kenneth Laudon [36] menciona que una buena metodología de desarrollo puede establecer la disciplina necesaria para el desarrollo de un software solo si establece estándares para los requerimientos, equipos de trabajo, diseño, programación y pruebas. Las características deseables que debe tener una metodología son las siguientes [35]: • Debe cubrir todo el ciclo de desarrollo • Verificaciones intermedias • planificación y control • Comunicación efectiva • Contener actividades que mejoren el proceso de desarrollo • Soporte al mantenimiento En cuanto a los tipos de metodología de desarrollo existen claramente dos vertientes: las metodologías tradicionales y las metodologías ágiles, las tradicionales se caracterizan por ser rígidas lo que hace que cambios sobre la marcha sean costosos o difíciles de lograr, por otro lado las metodologías ágiles se centran en adaptación a las situaciones de los proyectos, y para que esta adaptación sea exitosa debe hacerse de forma incremental [37], también vale destacar que en las metodología ágiles se le da mucha importancia a la retroalimentación continua con el cliente, para tratar avances y cambios en el proyecto. En la siguiente sección se explicará en qué consiste la metodología AUP, utilizada en este trabajo especial de grado. Capítulo III Marco Metodológico Pág - 48 3.2 Metodología AUP Ágil UP (Agile Unified Process, AUP) es un proceso de ingeniería de software completo basado en la simplificación del Rational Unified Process (RUP) de IBM. Cuenta con un enfoque disciplinado hacia las prácticas de pruebas industriales para el diseño de software y sistemas dentro de una organización de desarrollo. Este enfoque aplica técnicas ágiles e incluyen desarrollo basado en pruebas (TDD), Modelado basado en desarrollo ágil (AMDD), gestión de cambios ágil, y refactorización de base de datos para mejorar su productividad. El ciclo de vida de Agile UP es serial en lo grande e iterativo en lo pequeño, liberando entregables incrementales en el tiempo. El ciclo de vida de AUP se muestra en la Figura 24. Figura 24. Ciclo de vida de Ágil UP [31]. 3.2.1 Disciplinas o Iteraciones. a) Modelado: La meta de ésta disciplina es entender el negocio de la organización, el dominio del problema que el proyecto aborda e identificar una solución viable para abordar el dominio del problema. No es necesario crear todos los modelos que existan para trabajar en un sistema pero es importante que se tenga en el proyecto aquellos que sean adecuados para la situación Su objetivo es crear modelos que son solamente lo suficientemente Capítulo III Marco Metodológico Pág - 49 buenos para su situación a la mano, siempre puede ir atrás y mejorar su objetivo después cuando necesite más detalles o la situación de cambios. b) Implementación: La meta de ésta disciplina es transformar los modelos en un código ejecutable y realizar una prueba de nivel básico en una unidad particular de prueba. c) Pruebas: La meta de ésta disciplina es ejecutar una evaluación de los objetivos para asegurar la calidad. Esto incluye encontrar defectos, validar que el sistema funcione como fue diseñado y verificar que los requerimientos están completos. d) Despliegue: La meta de ésta disciplina es planificar la entrega del sistema y ejecutar el plan para que el sistema esté disponible para los usuarios finales. e) Administración de la ConFiguración: La meta de ésta disciplina es administrar el acceso a los entregables o productos del proyecto. Esto incluye no sólo el rastreo de versiones del producto en el tiempo, sino que también incluye controlar y administrar los cambios que ocurran. f) Administración del Proyecto: La meta de ésta disciplina es dirigir las actividades que se llevan a cabo en el proyecto. Esto incluye administración del riesgo, la dirección de personas (asignar tareas, seguimiento de los procesos, etc.), y coordinar con los sistemas y personas fuera del alcance del proyecto para que el este termine a tiempo y dentro del presupuesto. g) Ambiente o entorno: La meta de ésta disciplina es apoyar el resto de los esfuerzos para garantizar que, el proceso adecuado, la orientación (normas y directrices) y herramientas (hardware, software, etc.) estén disponibles para el equipo según sea necesario. 3.2.2 Fases Las fases son implementadas de una forma serial a lo largo de un proyecto de Agile UP. Estas fases son: 1) Inicio: El objetivo principal de la fase de inicio es definir el alcance del proyecto, donde se establecen los límites desde dónde el equipo operará. También se realiza un potencial de arquitectura de la aplicación para así obtener financiamiento y la aceptación de las partes interesadas. Principales actividades que se deben realizarpara esta fase: Capítulo III Marco Metodológico Pág - 50 • Modelado de diagramas de casos de uso y diagrama de clases • Diseño de prototipos de interfaz • Realizar plan de pruebas iniciales • Iniciar plan de despliegue • Estimar riesgos y factibiidad del proyecto 2) Elaboración: El principal objetivo de la fase de elaboración es probar la arquitectura del sistema que se va a desarrollar. El punto es asegurar que el equipo puede desarrollar un sistema que pueda satisfacer los requisitos planteados. En esta fase, el equipo también se prepara para la Fase de Construcción. Se comienza con la creación del ambiente propicio para la Construcción mediante la configuración de hardware, software y herramientas. Principales actividades que se deben realizarpara esta fase: • Modelar la arquitectura • Implementar la arquitectura • Validar la arquitectura • Actualizar plan del proyecto 3) Construcción: El objetivo de la fase de Construcción consiste en construir software de trabajo, en una base regular e incremental que cumpla las necesidades prioritarias de los interesados en el proyecto. Principales actividades que se deben realizar para esta fase: • Documentación • Primeras pruebas • Desarrollo de interfaces de activos legados • Evolucionar el entorno de trabajo 4) Transición: Se enfoca en llevar el sistema a producción. Se debe realizar pruebas extensivas a lo largo de esta fase, incluyendo las pruebas beta. Una buena afinación del proyecto tiene lugar en esta fase, incluyendo el trabajo dirigido a los defectos no tan relevantes. El tiempo y esfuerzo necesarios en la Transición varía según el desarrollo del proyecto completo. Capítulo III Marco Metodológico Pág - 51 Principales actividades que se deben realizar para esta fase: • Finalizar documentación • Corregir defectos • Finalizar el paquete de entrega o liberación 3.2.3 Entrega de versiones incrementales en el tiempo Los equipos de desarrollo AUP suelen emitir revisiones al final de cada iteración en escenarios de reproducción, cosa que no sucede en el enfoque “big bang”, donde se cumple con la entrega de todos los programas a la vez. Una versión de desarrollo de una aplicación es algo que podría ser liberado en producción si pasa a través de un módulo de aseguramiento de calidad (también llamado ambiente QA), las pruebas y procesos de despliegue, en pre-producción. 3.3 Arquitectura de software basada en componentes La arquitectura basada en componentes consiste en una rama de la Ingeniería de software que se enfoca principalmente en la descomposición del software en componentes funcionales [34]. Esta descomposición permite convertir componentes pre-existentes en piezas más grandes de software. Un Componente es un elemento de un sistema software que ofrece un conjunto de servicios, o funcionalidades, a través de interfaces definidas [34]. La Figura 25 muestra la notación UML utilizada para representar un componente, las funcionalidades que el componente provee a través de una interfaz son representadas con un círculo al final de una línea desde el componente (1) Figura 25. Componente de software Capítulo III Marco Metodológico Pág - 52 Para especificar los servicios que necesita unos componentes se utiliza una interfaz representada con un semicírculo al final de una línea desde el componente (2) El proceso de construcción de una pieza de software con componentes ya existentes, da origen al principio de reutilización del software, mediante el cual se promueve que los componentes sean implementados de una forma que permita su utilización funcional sobre diferentes sistemas en el futuro. Un componente de software es similar a una caja negra, en donde para el exterior se tiene una especificación general, la cual es independiente de la especificación interna [33]. Existen tres conceptos ligados a la definición de un componente: • Interior del componente: es una pieza de software que cumple con un conjunto de propiedades y que se encuentra conformada como un artefacto del cual se espera que sea reutilizable. • Exterior del componente: es una interface que cumple con un conjunto de propiedades y provee un servicio a usuarios humanos u otros artefactos de software. • Relación interior-exterior: proceso de relación entre el interior y exterior del componente, aquí son claves conceptos como especificación, implementación y encapsulación. Existen 4 principios que definen a un componente de software como elemento de la arquitectura [33]: • Múltiple uso: Un componente debe ser significativo es decir, debe estar dentro de un contexto que permita que su funcionalidad sea útil en la creación de distintas piezas de software. • Contexto no específico: La especificación de un componente debe estar planteada forma general que permita su adaptación en distintos sistemas, sin que el contexto tenga prioridad. • Encapsulación: Especificación interna o implementación del componente, no es investigable a través de la interfaz. El resto de componentes o piezas de software dentro de un sistema no se ven afectados por cambios en el diseño de uno de los componentes. Capítulo III Marco Metodológico Pág - 53 • Una unidad independiente de desarrollo con su propio control de versiones: Permite que un componente pueda ser desarrollado de manera independiente, cambiando el diseño o agregando nuevas funcionalidades, sin afectar significativamente el resto del sistema. Existen 3 aspectos fundamentales respecto a la estructura de la arquitectura basada en componentes 1. El nombre de los componentes: Debe identificar las funcionalidades de un componente así como su uso que tiene como software, generalmente se siguen convenciones, estándares para facilitar la identificación de los componentes. 2. La interface de los componentes: La inteface puede ser vista como el área de intercambio entre el interior y el exterior de un componente de software, a través de la interfaz es que se puede acceder a las funcionalidades que brinda el componente de software más sin embargo no se puede acceder a sus especificación interna, además de la interfaz se debe proporcionar documentación relacionada a como se debe utilizar el componente. 3. Cuerpo y código de Implementación: Es el área del componente donde se encuentra el código o implementación de los servicios y funcionalidades brindados por el componente, debe cumplir con el principio de encapsulación. En la estructura de la arquitectura basada en componentes existen 2 procesos fundamentales para el desarrollo [33]: 1. Ensamblajes de sistema a partir de componentes de software: Este proceso está compuesto por 4 actividades: • Análisis de los componentes: En esta fase de determinar qué tan adecuado es un componte para la construcción del sistema: Esta evaluación se realiza de acuerdo a un conjunto de métricas y criterios establecidos por los analistas y diseñadores de la arquitectura • Adaptación de los componentes: Es posible que el componente esté orientado hacia cierto contexto, atado a funcionalidades específicas , es por ello que en necesario adaptar el componente: Existen 3 maneras de adaptar un componente i. White-Box: cuando el componente debe ser reescrito para operar en Capítulo III Marco Metodológico Pág - 54 conjunto con el resto de componentes del sistema. ii. Grey-Box: cuando el componente incorpora su propio API (Programming Interface). iii. Black-Box: cuando el componente no posee un API. Una interfaz completamente independiente es construida para acceder a los servicios del componente. • Ensamblaje de los componentes: Se integran los componentes a través de la estructura mediante la cual fueron definidos • Mantenimiento: Una vez el funcionamiento ya está en funcionamiento puede que sea necesario hacer cambios en los componentes ya sea por nuevos requerimientos o inconvenientes con los mismos , estos cambios pueden consistir en la reescritura o sustitución del componente 2. Reusabilidad: La capacidad de poder utilizar una pieza de software dentro de otro sistema es una de las características más importantes en una arquitectura basada en componentes, para lograr la reutilización es necesario un esfuerzo extra de los desarrolladores basado en lo siguiente • Una documentación completa de cada atributo y funcionalidad del componente • Una etapa de pruebas organizada y certera que certifique el correcto funcionamiento del componente. • Una definición de comprobaciones precisa para el chequeo de cada parámetro de entrada (input) del componente. • Un manejo de notificaciones de errores preciso, que advierta de la existencia de estos de una forma apropiada. • Desarrollar teniendo en cuenta que el componente puede ser requerido para trabajar en muchos contextos muy diferentes unos de otros (tomar en cuenta la eficiencia, uso de memoria y recursos). Capítulo IV Desarrollo de la Aplicación Pág - 55 Capítulo IV Desarrollo de la aplicación En este capítulo se describirán los objetivos generales y específicos de la aplicación así como la adaptación de la metodología de desarrollo de software Proceso Unificado Ágil dentro del paradigma de desarrollo Basado en Componentes, durante el desarrollo de los módulos de Adquisición y gestión de Almacenamiento. 4.1 Objetivo de la aplicación Los módulos desarrollados para el presente Trabajo Especial de Grado tienen como objetivo satisfacer las necesidades del proyecto asignado a la Facultad de Ciencias de la UCV, de realizar un prototipo para un archivado Web de Venezuela, esta aplicación proporciona los módulos de Adquisición y gestión de Almacenamiento, los cuales permiten realizar suscripciones de rastreos para cosechar sitios web y almacenarlos de forma indexada, además se proporciona la opción de realizar búsquedas mediante el uso de URL. 4.2 Metas de la aplicación • Proporcionar una interfaz administrativa para la suscripción y configuración de rastreos. • Crear el módulo de adquisición para realizar el rastreo de sitios web. • Crear el módulo de Gestión de Almacenamiento para los sitios que han sido cosechados. • Integrar los módulos de adquisición y gestión de almacenamiento desarrollados. • Crear una aplicación para consulta de los sitios rastreados, y conocer sus características principales y las métricas asociadas. • Hacer uso de tecnologías existentes para el desarrollo de los módulos correspondientes. 4.3 Alcance de la aplicación Este desarrollo representa la primera versión del prototipo de Archivo Web que Capítulo IV Desarrollo de la Aplicación Pág - 56 implementa las funcionalidades básicas para adquirir y almacenar sitios web. Debido a que se adopta como política que los sitios Web a preservar sean de investigación científica, educativos o en general representativos de la cultura venezolana, el usuario debe indicar a cual de las categorías anteriores pertenece la pagina web a rastrear, sin embargo no se cuenta con un mecanismo que valide de manera automática que el sitio Web pertenece efectivamente a esta categoría. Se tendrá un espacio limitado para el almacenamiento de los WARC file que hayan sido recolectado a lo largo del proceso de rastreo y el acceso a los documentos en el archivo será a través de direcciones URL, no se proporcionaran otras opciones de búsqueda. Se contará con una interfaz de usuario para la suscripción de rastreos, también se contará con una interfaz para la visualización de las métricas de los WARC file cosechados. 4.4 Adaptación de la metodología AUP usando una arquitectura de software basada en componentes Para el desarrollo del prototipo de Archivado Web se implementaron las fases que sigue la metodología Ágil Up, como se mencionó anteriormente esta metodología sigue los principios de la Modelación Ágil y nos da la oportunidad de crear de manera rápida y sencilla la documentación del proyecto. También se hace uso de los artefactos o entregables UML para explicar cómo se adapta la metodología AUP en una arquitectura de Software Basada en Componentes. A continuación se describe la adaptación de las fases del Proceso Unificado Ágil (AUP) del presente trabajo especial de grado. 4.4 1 Fase de Inicio En esta fase, como se ha descrito anteriormente se indican los requerimientos, objetivos y alcance de la aplicación. 4.4.1.1 Requisitos funcionales: • Registrarse • Iniciar sesión • Crear solicitud de rastreo • Editar solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 57 • Desactivar solicitud de rastreo • Visualizar información de las solicitudes creadas • Almacenar contenedores WARC • Indexar contenedores WARC • Consultar los contenedores indexados. • Consultar las métricas correspondientes a los contenedores y su adquisición Estos requisitos serán explicados en detalle en la sección 4.4.2.4 donde se encuentran los casos de uso 4.4.1.2 Usuario del Sistema Este prototipo debe contar con funcionalidades que permitan el rastreo de sitios web que serán almacenados en contenedores Web e indexados en el sistema para así facilitar la búsqueda por URL. Por tal motivo, el prototipo está diseñado para dos tipos de usuarios: • Usuarios Administrativos: Representa aquellos usuarios que podrán realizar el rastreo de sitios Web • Usuarios Públicos: Representa aquellos usuarios que podrán acceder a consultar las métricas de los sitios web cosechados. 4.4.1.3 Arquitectura inicial de la aplicación Como se ha indicado anteriormente el prototipo realizado se basa en una arquitectura basada en componentes, la cual se visualiza en la Figura 26. Capítulo IV Desarrollo de la Aplicación Pág - 58 Figura 26. Arquitectura inicial del prototipo a implementar 4.4.1.4 Entorno de trabajo Luego de realizar las gestiones pertinentes se obtuvieron los recursos necesarios para adquirir el hardware donde correrá el prototipo de preservación web, se cuenta con un servidor que fue dividido en cinco máquinas virtuales, adicionalmente fue adquirido un disco duro de 1 Terabyte que fue dividido y asignado a cuatro de las máquinas virtuales, este espacio de almacenamiento es necesario para almacenar los archivos WARC cosechados, desde este mismo momento se toma en cuenta la escalabilidad del sistema desde el punto de vista del espacio de almacenamiento, si más espacio es requerido es posible integrar discos duros adicionales. A cada una de las máquinas virtuales se le asignó un nombre y una dirección IP: • ImagenSolr - 190.169.69.154 • Heritrix1 - 190.169.69.155 • Heritrix2 - 190.169.69.156 • Heritrix3 - 190.169.69.157 • Heritrix4 - 190.169.69.158 Capítulo IV Desarrollo de la Aplicación Pág - 59 El software requerido y/o seleccionado es el siguiente: • Sistema Operativo Linux-debian • Lenguaje de programación Ruby y su framework Rails • Rastreador Heritrix • Plataforma de búsqueda Solr • Servidor de base de datos MySQL • Librerías y herramienta WARCTools 4.4.2 Fase de Elaboración En esta fase se diseña y modela la arquitectura del sistema la cual debe dar soporte para lograr la implementación de todos los requerimientos. 4.4.2.1 Prototipos de interfaz de usuario. A continuación se muestran los prototipos de interfaces de usuario diseñados para el sistema. Registrarse Como se puede observar en la Figura 27 se cuenta con un formulario que el usuario debe completar para poder registrarse en el sistema. Capítulo IV Desarrollo de la Aplicación Pág - 60 Figura 27. Prototipo de interfaz Registrarse Iniciar sesión Como se puede observar en la Figura 28 se cuenta con un formulario que tiene 2 campos que el usuario debe completar para iniciar sesión en el sistema. Capítulo IV Desarrollo de la Aplicación Pág - 61 Figura 28. Prototipo de interfaz Iniciar Sesión Lista de solicitudes de rastreo En esta interfaz se puede visualizar de forma tabular los datos de las solicitudes de rastreo que el usuario ha creado, esto se puede apreciar en la Figura 29, adicionalmente se cuenta con un botón para crear nuevas solicitudes de rastreo Figura 29. Prototipo de interfaz Lista de solicitudes de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 62 Crear solicitud de rastreo Como se puede ver en la Figura 30, se cuenta con un formulario que permite crear solicitudes de rastreo Figura 30. Prototipo de interfaz Solicitud de rastreo Editar solicitud de rastreo Como se puede ver en la Figura 31, se cuenta con un formulario que permite editar una solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 63 Figura 31. Prototipo de interfaz Editar solicitud de rastreo Visualizar versiones de un rastreo Como se puede ver en la Figura 32 los datos de las versiones de una solicitud de rastreo son mostrados de forma tabular Figura 32. Ver versiones de un rastreo Hacer búsqueda por URL Capítulo IV Desarrollo de la Aplicación Pág - 64 En esta Figura 33 puede apreciarse un campo de entrada de texto para que el usuario coloque como lo indica el ejemplo la URL que se desea consultar los contenedores. Figura 33. Hacer búsqueda por URL. Listar Componentes Disponibles En la Figura 34 se visualiza que las coincidencias con la URL indicada se listaran de manera tabular con la opción de poder visualizar las métricas de adquisición y del contenedor correspondiente. Figura 34. Lista contenedores disponibles Capítulo IV Desarrollo de la Aplicación Pág - 65 Listar Métricas de Adquisición En la Figura 35 se aprecia una lista donde se ubica la información pertinente con las métricas del proceso de adquisición Figura 35. Listar métricas de adquisición Listar métricas del contenedor En la Figura 36 se aprecia la lista de documentos encontrados dentro del contenedor con sus características principales. Capítulo IV Desarrollo de la Aplicación Pág - 66 Figura 36. Listar métricas del contenedor Capítulo IV Desarrollo de la Aplicación Pág - 67 4.4.2.2 Diagramas de componentes Como se ha comentado anteriormente se decidió utilizar una arquitectura basada en componentes, en la Figura 37 se puede apreciar el diagrama de componentes del módulo de adquisición. Figura 37. Diagrama de componentes módulo de adquisición En la Figura 38 se puede apreciar el diagrama de componentes correspondiente al módulo de gestión de almacenamiento Capítulo IV Desarrollo de la Aplicación Pág - 68 Figura 38 Diagrama de componentes módulo de gestión de almacenamiento En la Figura 39 se puede observar el diagrama de componentes de todo el sistema, esta arquitectura sigue el modelo de referencia de la IIPC que se mostró en la Figura 8 del presente documento. Capítulo IV Desarrollo de la Aplicación Pág - 69 Figura 39. Diagrama de componentes del prototipo de preservación web Capítulo IV Desarrollo de la Aplicación Pág - 70 4.4.2.3 Diagramas de actividades En esta sección se describe las principales actividades que realiza el sistema Crear rastreo En la Figura 40 se muestran todos los pasos necesarios para crear una solicitud de rastreo Figura 40. Diagrama de actividades Crear rastreo Capítulo IV Desarrollo de la Aplicación Pág - 71 Generar rastreo Una vez se encuentra registrada una solicitud de rastreo debe ser colocada en ejecución, en la Figura 41 se pueden observar los pasos necesarios para completar esta actividad Figura 41. Diagrama de actividades Generar rastreo Capítulo IV Desarrollo de la Aplicación Pág - 72 Verificar fin de rastreo Para verificar que rastreos han finalizado se siguen la serie de pasos mostrados en la Figura 42. Figura 42 Diagrama de actividades Verificar fin de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 73 Generar Índices Para la generación de Índices se siguen la serie de pasos mostrados en la Figura 43 Figura 43. Diagrama de Actividades Generador de Índices Capítulo IV Desarrollo de la Aplicación Pág - 74 Almacenar Métricas Para el Almacenamiento de métricas se siguen la serie de pasos mostrados en la Figura 44. Figura 44. Diagrama de actividades módulo de almacenamiento 4.4.2.4 Casos de uso Por cuestiones de legibilidad y mayor entendimiento se decidió separar los casos de uso por módulo, es decir, casos de usos para el módulo de adquisición y casos de uso para el módulo de almacenamiento. Casos de uso módulo de adquisición En la Figura 45 se puede apreciar el diagrama de casos de uso para el módulo de adquisición. Capítulo IV Desarrollo de la Aplicación Pág - 75 Figura 45. Diagrama de casos de uso módulo de adquisición A continuación se encuentra la especificación de los casos de uso del módulo de adquisición: Tabla 1. Caso de uso Registrar Usuario Nombre: Registrar usuario Autor: Jonathan García Número de CU CU-1 Capítulo IV Desarrollo de la Aplicación Pág - 76 Descripción: Le permite al usuario registrarse en la aplicación Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de registrarse 3. El usuario introduce los datos solicitados 4. El sistema valida los datos 5. Se le notifica al usuario que su registro fue exitoso 6. Se le envía un correo electrónico para la activación de la cuenta Flujo Alternativo: 1. 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario se ha registrado Tabla 2. Caso de uso Iniciar Sesión Nombre: Iniciar Sesión Autor: Jonathan García Número de CU CU-2 Capítulo IV Desarrollo de la Aplicación Pág - 77 Descripción: Le permite al usuario iniciar sesión en el sistema Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de iniciar sesión 3. El usuario introduce los datos solicitados 4. El sistema valida los datos 5. Se le notifica al usuario que su inicio de sesión fue exitoso 6. Se redirecciona al usuario al inicio de la aplicación Flujo Alternativo: 1. 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha iniciado sesión en la aplicación Tabla 3. Caso de uso Cambiar Contraseña Nombre: Cambiar contraseña Autor: Jonathan García Número de CU CU-3 Capítulo IV Desarrollo de la Aplicación Pág - 78 Descripción: Le permite al usuario cambiar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario selecciona la opción de cambiar contraseña 2. El usuario introduce su contraseña actual y la nueva contraseña 3. El sistema valida los datos 4. El sistema almacena la nueva contraseña Flujo Alternativo: 4.1 Si las contraseñas no coinciden se le notifica al usuario Post-condiciones: El usuario ha cambiado su contraseña Tabla 4. Caso de uso Recuperar Contraseña Nombre: Recuperar contraseña Autor: Jonathan García Número de CU CU-4 Capítulo IV Desarrollo de la Aplicación Pág - 79 Descripción: Le permite al usuario recuperar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 1. El usuario ingresa a la aplicación 2. El usuario selecciona la opción de recuperar contraseña 3. El usuario introduce su correo electrónico 4. El sistema valida los datos 5. Se le envía un correo electrónico al usuario con las instrucciones para recuperar su contraseña Flujo Alternativo: 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha recuperado su contraseña Tabla 5. Caso de uso Consultar lista de solicitudes de rastreo Nombre: Consultar lista de Solicitudes de rastreo Autor: Jonathan García Número de CU CU-5 Capítulo IV Desarrollo de la Aplicación Pág - 80 Descripción: Le permite al usuario recuperar su contraseña Actores: Usuario Pre-condiciones: CU-1 Flujo Normal: 5. El usuario ingresa a la aplicación 6. El usuario selecciona la opción de recuperar contraseña 7. El usuario introduce su correo electrónico 8. El sistema valida los datos 9. Se le envía un correo electrónico al usuario con las instrucciones para recuperar su contraseña Flujo Alternativo: 5.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: El usuario ha recuperado su contraseña Tabla 6. Caso de uso Crear solicitud de rastreo Nombre: Crear solicitud de rastreo Autor: Jonathan García Número de CU CU-6 Capítulo IV Desarrollo de la Aplicación Pág - 81 Descripción: Permite crear una solicitud de rastreo Actores: Usuario Pre-condiciones: CU-2 Flujo Normal: 1. El usuario selecciona la opción de crear una solicitud de rastreo 2. El usuario introduce los parámetros de configuración del rastreo 3. El sistema valida los datos 4. La solicitud de rastreo es almacenada en base de datos 5. Se asigna el rastreo a una de las máquinas virtuales 6. En la máquina virtual seleccionada se crea un job con los parámetros proporcionados por el usuario 7. la solicitud de rastreo se agrega en el crontab de la máquina virtual seleccionada Flujo Alternativo: 4.1 Si hay un error en los datos se le notifica al usuario que debe corregirlos Post-condiciones: Se ha creado una nueva solicitud de rastreo. Tabla 7. Caso de uso Editar Solicitud de rastreo Nombre: Editar solicitud de rastreo Autor: Jonathan García Número de CU CU-7 Capítulo IV Desarrollo de la Aplicación Pág - 82 Descripción: Permite editar una solicitud de rastreo Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona el rastreo a editar 2. Se cargan los parámetros del rastreo 3. El usuario modifica los parámetros del rastreo 4. Se almacenan en base de datos los nuevos parámetros 5. Se modifica en la máquina virtual respectiva el archivo de parámetros configuración del job asociado al rastreo 6. Si la frecuencia del rastreo fue cambiada , se edita la entrada en el crontab de la máquina virtual Flujo Alternativo: Post-condiciones: Se ha editado una solicitud de rastreo Tabla 8. Caso de uso Desactivar solicitud de rastreo Nombre: Desactivar solicitud de rastreo Autor: Jonathan García Número de CU CU-8 Capítulo IV Desarrollo de la Aplicación Pág - 83 Descripción: Permite desactivar una solicitud de rastreo Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona la opción de desactivar solicitud de rastreo 2. Se le pregunta al usuario si está seguro de desactivar la solicitud de rastreo 3. Si la respuesta del usuario es afirmativa se marca en base de datos la solicitud como inactiva 4. Si la solicitud de rastreo es periódica, se elimina del administrador de tareas programadas la tarea asociada. Flujo Alternativo: Post-condiciones: Se le ha eliminado una solicitud de rastreo Tabla 9. Caso de uso Generar rastreo Nombre: Generar rastreo Autor: Jonathan García Número de CU CU-9 Descripción: Ejecutar un rastreo programado Actores: sistema Pre-condiciones: Flujo Normal: 1. El crontab del sistema ejecuta un script para colocar el rastreo en ejecución 2. Se valida que el rastreo pudo ser colocado en ejecución 3. Se almacena en base de datos, los datos asociados a la versión del rastreo que se acaba de colocar en ejecución Flujo Alternativo: Post-condiciones: Se ha colocado en ejecución un rastreo programado Capítulo IV Desarrollo de la Aplicación Pág - 84 Tabla 10. Caso de uso Verificar Fin de Rastreos Nombre: Verificar fin de rastreos Autor: Jonathan García Número de CU CU-10 Descripción: Se verifica que rastreos han finalizado y se marcan para ser indexados Actores: Sistema Pre-condiciones: Flujo Normal: 1. Se lee el archivo que contiene la lista de rastreos activos 2. Se recupera el archivo log asociado a un rastreo 3. Se parsea el archivo log para obtener el estatus en el que se encuentra el rastreo 4. Si el estatus es igual a “finish” , se coloca una entrada en el archivo de rastreos por indexar y se borra del archivo de rastreos activos 5. Se repite el proceso desde el paso 2 hasta que toda la lista de rastreos en activos haya sido procesada Flujo Alternativo: Post-condiciones: Se ha comprobado que rastreos han finalizado y se han marcado para ser indexados Tabla 11. Caso de uso Consultar Versiones de una Solicitud de Rastreo Nombre: Consultar versiones de solicitud de rastreo Autor: Jonathan García Número de CU CU-11 Capítulo IV Desarrollo de la Aplicación Pág - 85 Descripción: Consultar datos de un rastreo Actores: usuario Pre-condiciones: Flujo Normal: 1. El usuario selecciona un rastreo para consultar sus versiones 2. Se leen de base de datos las versiones asociadas al rastreo 3. Se le muestran los datos al usuario de forma tabular Flujo Alternativo: Post-condiciones: Se han consultado las versiones de una solicitud de rastreo Capítulo IV Desarrollo de la Aplicación Pág - 86 Casos de uso módulo de gestión de almacenamiento En la Figura 46 se puede apreciar el diagrama de casos de uso para el módulo de gestión de almacenamiento Figura 46. Diagrama de casos de uso módulo de almacenamiento A continuación se encuentra la especificación de los casos de uso del módulo de almacenamiento Capítulo IV Desarrollo de la Aplicación Pág - 87 Tabla 12. Caso de uso Indexar Sitios Cosechados Nombre: Indexar Sitios Cosechados Autor: Lorena Rivero Número de CU CU- 12 Descripción: Permite indexar en la plataforma de búsqueda Solr los contenedores que hayan sido previamente cosechados Actores: Sistema Operativo Pre-condiciones: Se debe tener programado una tarea en el crontab del sistema Linux y un directorio home y un contenedor previamente cosechado Flujo Normal: 1. El sistema ejecuta el script de indexado según se haya programado en el controlador de tareas. 2. Se verifica si se tiene algo que indexar. 3. En caso de haber contenedores a indexar se agrega en el índice de la plataforma de búsqueda 4. Se elimina el registro temporal para optimizar almacenamiento. Flujo Alternativo: 3.1 Si no se tiene que indexar, no se agrega nada en la plataforma de búsqueda y el proceso muere. Post-condiciones: Se ha verificado contenedores a indexar y añadidos en el índice de la plataforma de búsqueda. Tabla 13. Caso de uso Almacenar Métricas Nombre: Almacenar Métricas Autor: Lorena Rivero Número de CU CU-13 Capítulo IV Desarrollo de la Aplicación Pág - 88 Descripción: Permite almacenar en la Base de Datos las métricas pertinentes a los contenedores WARC cosechados e indexados previamente. Actores: Sistema Operativo Pre-condiciones: CU-12 Flujo Normal: 1. Se hace la llamada a la herramienta WARCTools para obtener las estadísticas y métricas del contenedor 2. Dichas métricas son almacenadas en la Base de Datos registrando el id del contenedor como identificador. Flujo Alternativo: Post-condiciones: Se ha almacenado en Base de Datos las métricas pertinentes a un contenedor seleccionado. Tabla 14. Caso de uso Hacer Búsqueda por URL Nombre: Hacer Búsqueda por URL Autor: Lorena Rivero Número de CU CU- 14 Descripción: Permite al usuario hacer una búsqueda de los contenedores existentes en el repositorio. Actores: Usuario Pre-condiciones: Flujo Normal: 1. El usuario ingresa en el campo de búsqueda una URL que desee verificar si se ha cosechado 2. La plataforma de búsqueda verifica si existe un registro de esa URL Flujo Alternativo: Post-condiciones: El usuario habrá realizado una consulta para verificar la existencia de contenedores según la URL deseada. Capítulo IV Desarrollo de la Aplicación Pág - 89 Tabla 15. Caso de uso Listar Contenedores Disponibles Nombre: Listar Contenedores Disponibles Autor: Lorena Rivero Número de CU CU- 15 Descripción: Lista los resultados encontrados según la consulta que se haya realizado Actores: Usuario Pre-condiciones: CU-14 Flujo Normal: 1. Se procesa la URL que el usuario ingreso en la entrada de texto. 2. Se lista los contenedores disponibles en el sistema según la coincidencia. Flujo Alternativo: 2.1 En caso que no ocurran incidencias con la consulta realizada por el usuario, se muestra un mensaje que indica que no hay incidencias. Post-condiciones: El sistema habrá listado todas las coincidencia existentes para la consulta realizada Tabla 16. Caso de uso Listar Métricas del Contenedor Nombre: Listar Métricas del Contenedor Autor: Lorena Rivero Número de CU CU-16 Capítulo IV Desarrollo de la Aplicación Pág - 90 Descripción: Permite consultar las métricas existentes de un contenedor seleccionado. Actores: Usuario Pre-condiciones: CU-15 Flujo Normal: 1. El usuario selecciona el warcid del contenedor al que desea consultar. 2. El sistema hace consulta a la base de datos y muestra la lista de contenedores. Flujo Alternativo: Post-condiciones: El usuario habrá consultado las métricas del contenedor que este haya seleccionado. Tabla 17. Caso de uso Listar Métricas de Adquisición Nombre: Listar Métricas de Adquisición Autor: Lorena Rivero Número de CU CU-17 Descripción: Permite consultar las métricas de adquisición o cosecha del contenedor seleccionado Actores: Usuario Pre-condiciones: CU-15 Flujo Normal: 1. El usuario selecciona la opción de visualizar métricas de adquisición. 2. El sistema ubica los archivos de información y lista las métricas relevantes del proceso de Adquisición. Flujo Alternativo Post-condiciones: El usuario habrá consultado las métricas de adquisición y cosecha de un contenedor en específico. Capítulo IV Desarrollo de la Aplicación Pág - 91 4.4.2.5 Diagramas de secuencia Por cada caso de uso se diseñó un diagrama de secuencia para ilustrar de mejor manera su funcionamiento, al igual que los casos de uso fueron separados por módulos. Diagramas de secuencia módulo de adquisición Los diagramas pertenecientes al módulo de adquisición son los siguientes Figura 47. Diagrama de secuencia Registrar Usuario Capítulo IV Desarrollo de la Aplicación Pág - 92 Figura 48. Diagrama de secuencia Iniciar Sesión Figura 49. Diagrama de secuencia Recuperar Contraseña Capítulo IV Desarrollo de la Aplicación Pág - 93 Figura 50. Diagrama de secuencia Cambiar Contraseña Figura 51. Diagrama de secuencia Consultar lista de solicitudes de rastreos Capítulo IV Desarrollo de la Aplicación Pág - 94 Figura 52. Diagrama de secuencia Crear Solicitud de Rastreo Figura 53. Diagrama de secuencia Editar Solicitud de Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 95 Figura 54. Diagrama de secuencia Desactivar Solicitud de rastreo Figura 55. Diagrama de secuencia Generar Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 96 Figura 56. Diagrama de secuencia Verificar Fin de Rastreo Figura 57. Diagrama de secuencia Consultar Versiones de Solicitud de Rastreo Capítulo IV Desarrollo de la Aplicación Pág - 97 Diagramas de secuencia módulo de gestión de almacenamiento Los diagramas pertenecientes al módulo de gestión de almacenamiento son los siguientes: Figura 58. Diagrama de secuencia Indexar Sitios Rastreados Capítulo IV Desarrollo de la Aplicación Pág - 98 Figura 59. Diagrama de secuencia Almacenar Métricas Figura 60. Diagrama de secuencia hacer Búsqueda por URL Capítulo IV Desarrollo de la Aplicación Pág - 99 Figura 61. Diagrama de secuencia Listar métricas del contenedor Figura 62. Diagrama de secuencia Listar métricas de Adquisición Capítulo IV Desarrollo de la Aplicación Pág - 100 Figura 63. Diagrama de secuencia Listar métricas del contenedor 4.4.2.6 Modelo de datos Se diseñó y construyó una base de datos para almacenar los datos propios de la preservación, y que además permita cumplir con la política del archivo, en esta base de datos están las semillas o URLs de los sitios a preservar, los datos de configuración de los rastreos y la frecuencia de rastreo, además almacena las métricas y datos descriptivos de las versiones. El modelo relacional de la base de datos usada en la aplicación puede verse en la Figura 64. Capítulo IV Desarrollo de la Aplicación Pág - 101 Figura 64. Modelo relacional de la base de datos utilizada en la aplicación 4.4.3 Fase de Construcción En este punto se explica cómo se llevó a cabo la implementación de los requerimientos del prototipo de preservación web, adaptando el desarrollo a una arquitectura basada en componentes. Implementación de componentes Para el desarrollo del prototipo de preservación web se utilizó software existente tales como el rastreador Heritrix, la plataforma de búsqueda Solr, la librería de software libre WARCTools, la base de datos MySQL y el programador de tareas automáticas cron del sistema operativo Debian. Adicionalmente se implementaron varios componentes para cubrir todos los requerimientos que el prototipo debe satisfacer, a continuación se explicará cómo fue llevada a cabo la implementación de cada uno de ellos. Capítulo IV Desarrollo de la Aplicación Pág - 102 Aplicación administrativa Se desarrolló una aplicación administrativa para gestionar la creación y configuración de rastreos, consultar su estatus y una vez finalizados visualizar algunas de sus métricas. Esta aplicación fue implementada utilizando el lenguaje Ruby y su framework Rails, para la persistencia de datos se utilizó la base de datos MySQL. La aplicación cuenta con autenticación y registro de usuarios, para implementar esta funcionalidad se utilizó la gema devise (para información de instalación y configuración revisar la sección A-2 del anexo) Las opciones para gestionar los rastreos se describen a continuación: Crear rastreo, Editar rastreo Para la creación y edición de rastreos se utilizó un mismo formulario, los datos que el usuario debe introducir se pueden ver en la Figura 65. Figura 65. Formulario para creación de rastreos. Capítulo IV Desarrollo de la Aplicación Pág - 103 En caso de que el usuario quiera editar un rastreo, en el formulario se cargan sus datos asociados, tal como se puede apreciar en la Figura 66. Figura 66. Formulario para la edición de rastreos Luego de que el usuario decide crear o editar un rastreo, se crea una instancia del modelo que representa a los rastreos Figura 67. Código del Modelo Rastreo Como se puede apreciar en la Figura 67, el modelo tiene las siguientes validaciones: • Formato de la URL • Presencia de los campos nombre y URL Luego de que el modelo es validado se procede a seleccionar la máquina virtual donde residirá el job asociado al rastreo, la selección se hace utilizando turno rotatorio. Seguidamente se edita el archivo de configuración del job crawler-beans.cxml, para ello se utilizó la gema nokogiri, como se mencionó en las características de Heritrix sus archivos de configuración están basados en beans que tienen estructura XML , con este Capítulo IV Desarrollo de la Aplicación Pág - 104 gema lo que se hace es localizar los tag correspondientes a las configuraciones seleccionadas y asignarles el valor introducido por el usuario, luego de que el archivo de configuración es editado se utiliza el comando scp para moverlo a la máquina virtual donde se encuentra su job, parte del código que implementa esta funcionalidad se puede visualizar en la Figura 68. Figura 68. Edición del archivo de configuración del rastreo Seguidamente se ejecuta el script agregar_cron.sh para crear una entrada en el crontab de la máquina virtual seleccionada, donde se especifica la frecuencia con que se ejecutará la solicitud de rastreo, tal como se puede ver en la Figura 69. Capítulo IV Desarrollo de la Aplicación Pág - 105 Figura 69 Agregar solicitud del rastreo al crontab Desactivar rastreo Esta opción permite desactivar una solicitud de rastreo, su implementación consiste en eliminar del crontab de la máquina virtual donde fue asignado su entrada correspondiente. Visualizar versiones de un rastreo Esta opción permite visualizar de forma tabular todas las versiones pertenecientes a una solicitud de rastreo, tal como se puede apreciar en la Figura 70. Figura 70. Versiones de un rastreo Generador de rastreos Este componente fue implementado utilizando el lenguaje shell script, en él se declaran los comandos necesarios para interactuar con el Api rest de Heritrix con el fin de colocar en ejecución un rastreo programado. Capítulo IV Desarrollo de la Aplicación Pág - 106 Figura 71. Generar rastreo En la Figura 71 se pueden apreciar los comandos necesarios para colocar un rastreo en ejecución: Con el comando build se lee el archivo de configuración y se crean todas las instancias necesarias y el entorno para que el rastreo pueda ser colocado en ejecución Con el comando launch se le da la orden a Heritrix de que cree las instancias necesarias para crear una nueva versión del rastreo Con el comando unpause el rastreo se coloca en progreso (por defecto heritrix ‘lanza los rastreos con estatus de pause’) Antes de correr estos comando se valida que no exista una versión del job en ejecución, ya que solo puede estar en progreso una versión del job en un momento dado, si se encuentra una versión en progreso el script finaliza Adicionalmente a las llamadas al Api rest de heritrix , se hace conexión con la base de datos MySQL para insertar los datos correspondiente a la versión del rastreo que se acaba de colocar en ejecución, en la Figura 72 se puede apreciar el código que invoca al script que se encarga de hacer la inserción en base de datos. Figura 72. Invocación de script para inserción en base de datos El código del script insert_databse.sh se puede apreciar en la Figura 72: Figura 73. Script insert_database.sh Capítulo IV Desarrollo de la Aplicación Pág - 107 Verificador de rastreos finalizados Este componente fue implementado utilizando el lenguaje shell script, es ejecutado periódicamente por el crontab del sistema, la periodicidad de ejecución se decidió de que fuese de 2 veces por día Internamente se lee un archivo llamado <rastreos_activos>.txt que contiene una lista de los rastreos que se encuentran en progreso, en la Figura 74 se puede ver un ejemplo de cómo son las entradas de este archivo Figura 74. Ejemplo de archivo rastreos_activos.txt Para verificar en qué estatus se encuentra un rastreo, se revisa en el directorio correspondiente a la versión del job si existe el directorio reports, si este directorio existe quiere decir que el rastreo finalizó y debe ser indexado, seguidamente el rastreo se marca como por indexar, es decir, se agrega una entrada a la lista de rastreos por indexar en el archivo <ip_maquina>.txt, en la Figura 75 se puede visualizar parte del código que implementa esta funcionalidad Capítulo IV Desarrollo de la Aplicación Pág - 108 Figura 75. Verificados de rastreos finalizados Además se insertan en base de datos los datos de duración y tamaño de la versión del rastreo, así como su warc id, en la Figura 76 se puede ver el código que implementa esta funcionalidad Figura 76. Script udpate_version.sh Aplicación de Consulta Se desarrolló una aplicación para permitir al usuario consultar la información relevante sobre los contenedores que fueron cosechados, las métricas de cada contenedor y las métricas del proceso de adquisición correspondientes al mismo. Esta aplicación fue implementada utilizando el lenguaje Ruby y su framework Rails, para la persistencia de datos referidos a las métricas sobre el contenedor se utilizó la base de datos MySQL y la plataforma de búsqueda Solr para poder llevar a cabo el proceso de indexación y consulta de los contenedores disponibles. Capítulo IV Desarrollo de la Aplicación Pág - 109 Lo primero que se debe hacer al momento de consultar los contenedores disponibles es colocar en el campo de entrada de texto la URL (palabra clave) del sitio al cual se le ha realizado el proceso de adquisición. Como se muestra en la Figura 77. En caso que exista coincidencia con la palabra clave se muestra una lista con todos los contenedores con los que se encontró relación mostrando la información más relevante, además de las métricas de adquisición y de los contenedores en particular. Figura 77. Listado de contenedores Disponibles. La información que se despliega en primer momento es toda la información que fue almacenada en el índice de la plataforma Solr, esta información abarca: • Id Del WARC. • URL. • Ruta donde se encuentra el WARC. • Máquina en la cual se almacenó el WARC. • Fecha de Inicio del proceso de rastreo. • Fecha en la que finalizó el rastreo. • Fecha en la que se llevó a cabo la indexación. • Nombre del WARC Además de la información anterior, la aplicación tiene dos opciones para mostrar métricas de dos tipos distintos. Estas métricas provienen de la búsqueda realizada dentro de los archivos informativos que se obtienen del proceso de adquisición y de la navegación superficial sobre los contenedores gracias a la herramienta WARCTools. Estas métricas se dividen en dos tipos: Capítulo IV Desarrollo de la Aplicación Pág - 110 Métricas del proceso de Adquisición: Se muestra la información correspondiente al proceso de adquisición del contenedor seleccionado tal como se puede apreciar en la Figura 78. En esta sección se muestra información sobre: • Por tipo de formato, se tiene cuántos documentos existen y cuanto ocupan en espacio medido en bytes. • Tiempo que tardó siendo rastreado. • Cuántas semillas han sido rastreadas para ese contenedor. Cabe destacar que por políticas del prototipo se determinó utilizar una sola por contenedor. • Host que han sido visitados para el rastreo. Depende de las redirecciones que se consigan en el sitio a rastrear. • Cantidad de URLs procesadas y cuantas procesadas con o sin éxito o han sido descartadas. • Total de bytes que han sido cosechados. • Promedio de tiempo de cosecha de URL por segundo y cantidad de KB por segundo. Figura 78. Tabla de Métricas de Adquisición de un contenedor. Además de las métricas de Adquisición se ofrece una tabla con información adicional que complementa todo lo que se puede saber sobre el proceso de adquisición. Métricas del contenedor: Se muestra la información del contenedor y de cómo ha sido cosechado en el formato WARC. 1. Tiempo que tardó en indexarlo en la plataforma de búsqueda Solr. 2. Información resumida sobre el contenedor: Capítulo IV Desarrollo de la Aplicación Pág - 111 a. Por cada tipo de WARC encontrado, la cantidad existente dentro del mismo (los tipos de WARC han sido detallados en secciones anteriores). b. Cantidad de extensiones DNS, cabeceras de información de tipo WARC, que poseen información sobre los documentos y cantidad de documentos HTTP. 3. Información detallada de cada documento encontrado dentro del contenedor WARC. a. Offset o desplazamiento dentro del contenedor b. WARC type c. URI que corresponde a ese documento dentro de contenedor. d. El tamaño del documento e. Formato que posee el documento en específico 4. Tiempo de respuesta de la búsqueda medido en milisegundos. En la Figura 79 se puede ver un ejemplo de la información de las métricas del contenedor para un WARC en específico. Figura 79. Métricas de un contenedor WARC Generador de Índices Este componente está constituido por un script que verifica 4 (cuatro) archivos de texto, cada uno ubicado en su respectiva máquina de Heritrix, estos archivos representan los contenedores que se encuentren pendientes para indexar por cada máquina, cada archivo lleva como nombre la IP de la máquina asociada. Estos archivos poseen un formato Capítulo IV Desarrollo de la Aplicación Pág - 112 predeterminado por el equipo de trabajo para que el prototipo sea capaz de procesarlos de manera correcta. En la Figura 80 se muestra un ejemplo del formato utilizado para estos archivos. Figura 80. Ejemplo formato Archivo de rastreos por indexar Como puede apreciarse en la Figura 80, el formato que se utiliza para indicar que hay un contenedor por indexar consiste en la ruta completa donde se encuentra la carpeta raíz del contenedor WARC. El componente de Generar Índices, lee los archivos de texto antes mencionados y en caso de que estos no estén vacíos se procede a recolectar la información correspondiente dentro de las rutas que indica cada línea del archivo, para llevar a cabo el proceso de indexación. En la Figura 81 se puede visualizar un extracto del código correspondiente a la implementación. Capítulo IV Desarrollo de la Aplicación Pág - 113 Figura 81. Código Shell script Procesar Archivo. Luego que se realice la recolección de información pertinente se crea la petición HTTP hacia Solr para que indexe el contenedor indicado. Una vez realizada la indexación se escribe una línea en el archivo de contenedores procesados para indicar que fue indexado correctamente además se borra la línea correspondiente a este en el archivo de contenedores por indexar. Este proceso se coloca en el administrador de tareas programadas CRON para que se ejecute diariamente a las doce de la madrugada (12:00 am). Almacenamiento de métricas Este componente se constituye también por un Shell Script, que se ejecutará cada vez que el verificador de archivos pendientes e indexación lo haga, ya que los parámetros de entrada necesarios para la ejecución provienen de este componente. El componente recibe como parámetros el archivo resultado de la llamada a la librería de WARCTools, que contiene la información sobre los documentos que se encuentran dentro del contenedor WARC, el ID del archivo WARC, el tiempo de indexación por contenedor y la ruta del archivo. Capítulo IV Desarrollo de la Aplicación Pág - 114 Al ejecutar el programa se inserta en la base de Datos el tiempo de indexación para el contenedor al que se le están almacenando las métricas, cabe destacar que este tiempo se almacena en milisegundos. Luego, se hace una navegación sobre el archivo de texto antes mencionado y se procesa la información encontrada para así realizar una petición de inserción sobre la base de datos. El archivo contiene información como: • Ruta del contenedor • Desplazamiento del documento en particular dentro del contenedor (offset). • Tipo de WARC, que se han comentado anteriormente. • URI del documento en particular. • ID del registro WARC • Tipo de contenido (dns, http, warc). • El tamaño del documento. En la Figura 82 se muestra un ejemplo de la información que contiene el archivo que arroja como salida la herramienta WARCTool. Figura 82. Archivo resultado de la ejecución de la herramienta WARCTools. De este archivo se desea almacenar en base de Datos la información más relevante para poder realizar agrupación sobre esta información y poder extraer información de interés para el usuario final brindado la oportunidad de que pueda realizar análisis sobre Capítulo IV Desarrollo de la Aplicación Pág - 115 estos datos. En la Figura 83 se puede observar el código que implementa esta funcionalidad Figura 83. Código Shell Script para Almacenar Métricas del contenedor. Capítulo IV Desarrollo de la Aplicación Pág - 116 4.4.4 Fase de transición En esta sección se explicará cómo fue realizada la transición desde el entorno de desarrollo hacia el entorno de producción, se explicará qué pruebas se realizaron para validar el prototipo y se mostrará información de métricas pertenecientes a los rastreos realizados en las pruebas y los tiempos de indexación de los contenedores. Además se mostrará información relevante asociada a los contenedores WARC y a los documentos contenidos dentro del mismo. 4.4.4.1 Puesta en producción del prototipo de preservación web En este punto se hace la transición desde el entorno de desarrollo hacia el entorno de producción, a continuación se listan las máquinas virtuales y se menciona que componentes del sistema fueron alojados en cada una de ellas: • Heritrix 1: En esta máquina se encuentra la aplicación administrativa para configuración de rastreos y Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 2: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 3: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Heritrix 4: Heritrix, generador de rastreos, verificador de rastreos finalizados y herramientas WARCTools. • Imagen Solr: En esta máquina se encuentra la aplicación de consulta, el servidor de base de datos MySQL y el software correspondiente a la plataforma de búsqueda Solr. 4.4.4.2 Pruebas Funcionales En esta sección se muestran las pruebas realizadas para verificarel comportamiento del prototipo y el cumplimiento de los requisitos funcionales. Lista de sitios Web a cosechar Para hacer pruebas en el prototipo se decidió elaborar una lista de sitios web a cosechar, estos sitios son pertenecientes a universidades venezolanas así como a instituciones culturales y/o investigativas, la lista es la siguiente: Capítulo IV Desarrollo de la Aplicación Pág - 117 • Universidad Central de Venezuela http://www.ucv.ve/ • Universidad Simón Bolívar http://www.usb.ve/ • Universidad de Oriente http://www.udo.edu.ve/ • Universidad de los Andes http://www.ula.ve/ • Universidad de Carabobo http://www.uc.edu.ve/ • Universidad del Zulia http://www.luz.edu.ve/ • PDVSA la estancia http://www.pdvsalaestancia.com/ • Instituto Venezolano de Investigaciones Científicas (IVIC) http://www.ivic.gob.ve/ • Ministerios de Ciencia, Tecnología e innovación (MCTI) http://www.mcti.gob.ve/ • Fundación Museos Nacionales http://www.fmn.gob.ve/ Casos de prueba Tabla 18. Prueba Validación de datos de entrada Nombre Validación de datos de entrada Tipo Prueba del sistema Descripción Verificar que los datos de entrada tengan el formato adecuado Procedimiento Cuando se quiere crear una solicitud de rastreo es necesario que los datos tengan el formato adecuado , si esto no ocurre se le informa al usuario que existen errores en los datos introducidos Existen 3 escenarios de cómo los datos pueden ser introducidos: • El usuario deja los campos de formulario en blanco • El usuario introduce datos con un formato incorrecto • El usuario introduce datos con un formato correcto Resultado de la prueba Si el usuario introduce datos con formato incorrecto o los deja en blanco se le muestra un mensaje de error como el que puede apreciarse en la Figura 84 Capítulo IV Desarrollo de la Aplicación Pág - 118 Figura 84. Validación de datos de entrada. Tabla 19. Prueba creación de job y su archivo de configuración Nombre Job creado en la máquina virtual seleccionada y que su archivo de configuración reciba los parámetros de forma exitosa Tipo Prueba del sistema Descripción Se desea verificar que un job es creado correctamente en la máquina virtual donde fue asignado, además se quiere verificar que el archivo de configuración del job contiene los valores proporcionados por el usuario Capítulo IV Desarrollo de la Aplicación Pág - 119 Procedimiento Cuando se hace la creación de una solicitud de rastreo, se selecciona por turno rotatorio en que máquina debe ser creado el job, seguidamente se crea el job en la máquina seleccionada Si un rastreo es creado de forma exitosa se hace una inspección sobre el archivo de configuración del job asociado al rastreo, tal que se valide que los parámetros introducidos por el usuario se encuentren en el archivo de configuración Se crea un trabajo de rastreo por cada entrada de la lista de sitios web a cosechar y se va verificando si el archivo de configuración del job posee los parámetros especificados Resultado de la prueba Cuando un job se crea de forma exitosa , se crea una carpeta asociada tal como se puede ver en la Figura 85 Cuando el archivo de configuración con la semilla introducida por el usuario se puede ver en la Figura 86. Se hicieron las pruebas con la lista de sitios web a cosechar mencionada anteriormente y se pudo observar que todos los job fueron creados y configurados exitosamente Figura 85. Job creado exitosamente Figura 86. Semilla en el archivo de configuración del job Capítulo IV Desarrollo de la Aplicación Pág - 120 Tabla 20. Prueba colocación de rastreo en ejecución Nombre Rastreo colocado en ejecución cuando se ejecuta el crontab Tipo Prueba del sistema Descripción Cuando una solicitud de rastreo almacenada en el crontab es ejecutada se desea verificar que el proceso fue exitoso Procedimiento Luego de que las solicitudes de rastreo almacenadas en el crontab del sistema son ejecutados, se verifica que cada job sea colocado en ejecución de forma exitosa , cuando esto sucede se crea un carpeta como la que se puede ver en la Figura 88 las solicitudes de rastreos con almacenadas en el crontab tal como se puede apreciar en la Figura 87 Resultado de la prueba Se tomaron como casos de pruebas la lista de sitios web a cosechar descrita anteriormente y el resultado fue el siguiente: Para la primera corrida cada job fue colocado en ejecución de forma satisfactoria , para ejecuciones subsiguientes se pudo observar que el si una versión del job se encuentra en progreso , y se intenta colocar en ejecución otra versión del mismo job heritrix lanza un error. Por ello se colocó un validación de que sólo puede estar en ejecución una sola versión por job. F igura 87. Solicitud de rastreo almacenada en el crontab Capítulo IV Desarrollo de la Aplicación Pág - 121 Figura 88. Rastreo colocado en ejecución Tabla 21. Prueba verificar rastreos finalizados Nombre Verificación de rastreos finalizados Tipo Prueba del sistema Descripción Cuando una solicitud de rastreo almacenada en el crontab es ejecutada se quiere verificar que el proceso fue exitoso Procedimiento Se toma como entrada la lista de rastreos activos y se ejecuta el script encargado de verificar rastreos finalizados , seguidamente se revisa la lista de rastreos por indexar para verificar que efectivamente todos los rastreos que estaban en la lista de activos y hayan finalizado se encuentren en esta lista Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 89 y se obtuvo como salida la lista que puede verse en la Figura 90, revisando ambas listas se puede observar que son iguales por lo que para este el proceso de verificar finalizados funcionó correctamente Capítulo IV Desarrollo de la Aplicación Pág - 122 Figura 89. Rastreos finalizados Figura 90. Rastreos por indexar. Capítulo IV Desarrollo de la Aplicación Pág - 123 Tabla 22. Prueba verificar Indexar Sitios rastreados. Nombre Indexar Sitios rastreados Tipo Prueba del sistema Descripción Cuando existe contenedores en lista de pendientes se quiere verificar que efectivamente haya sido indexado. Procedimiento Se toma como entrada la lista de rastreos por indexar y se ejecuta el script encargado de verificar si hay contenedores pendientes por indexar, seguidamente se procesa la información que va a ser indexada y se procede a realizar la petición HTTP hacia Solr. Se revisa la lista de índices en la plataforma para verificar que efectivamente todos los contenedores que estaban en la lista de pendientes hayan sido indexados. En caso que los contenedores no cuenten con toda la información no se realiza el proceso de indexación. Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 90 y se obtuvo como salida el XML de Solr que puede verse en la Figura 91. Revisando ambas listas se puede observar que la cantidad de contenedores en lista de pendientes han sido indexados y cuentan con la información de los contenedores correspondientes. Se prueba el caso en el que uno de los contenedores no cuenten con información suficiente para la indexación (Figura 92.) , o que los datos tengan formato incorrecto si algunos de estos eventos ocurre el sistema advierte que no se llevará a cabo la petición a Solr y no se borra de la lista de pendientes por indexar. Capítulo IV Desarrollo de la Aplicación Pág - 124 Figura 91. XML de Indexación de contenedores rastreados por Solr. Capítulo IV Desarrollo de la Aplicación Pág - 125 Figura 92. Salida estándar de los estados de indexación del Generador de Índices. Tabla 23. Prueba verificar Tiempos de Indexación Nombre Tiempos de Indexación Tipo Prueba del sistema Descripción Cuando se lleva a cabo el proceso de indexación se verifica que efectivamente existe un valor asociado en la Base de Datos sobre cuánto tarda Solr el indexar los valores correspondientes del contenedor. Procedimiento Se toma como entrada la respuesta XML sobre el estado de la indexación realizada por Solr. SI existe el valor correspondiente se almacena en Base de Datos, en caso de no encontrarse el valor determina que no se llevó a cabo la indexación y el sistema advierte que no se lleva a cabo el proceso. Capítulo IV Desarrollo de la Aplicación Pág - 126 Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 89 y se obtuvo como salida el XML de Solr con el estado de la petición. En la Figura 93 se muestra la consulta de los tiempos de indexación de aquellas versiones o contenedores que han sido procesados (Lista mostrada en la Figura 89). En caso que haya un problema se hace la advertencia mostrada anteriormente en la Figura 91. Figura 93. Consulta de tiempos de indexación de la plataforma Solr. Tabla 24. Prueba Verificar Métricas recolectadas. Nombre Métricas recolectadas. Tipo Prueba del sistema Descripción Cuando se hace la invocación a la herramienta WARCTools y con el archivo de salida que provee este, se hace la recolección de esas métricas en Base de Datos. Procedimiento Se toma como entrada el archivo resultante de la llamada a la librería WARCTools y se verifica que todas las líneas de tal archivo han sido procesadas de manera tal que se cumple su almacenamiento en la Base de Datos. Capítulo IV Desarrollo de la Aplicación Pág - 127 Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 82 y se obtiene como resultado el almacenamiento en Base de Datos. Como puede apreciarse en la Figura 94. Se realiza una consulta a la Base de Datos y un conteo de las líneas del archivo y se muestra que todas las métricas se han almacenado. Existe una diferencia de una línea entre estos ya que la primera línea del archivo corresponde a la descripción de las líneas posteriores. Figura 94. Consultando la cantidad de líneas en el archivo y registros en Base de Datos. Tabla 25. Prueba verificar procesos y métricas de Indexación. Nombre Verificar proceso y métricas de indexación Tipo Prueba del sistema Descripción Verificar que los rastreos culminados sean efectivamente indexados y que se almacenan las métricas del proceso Procedimiento Ya realizado el proceso completo de indexación, se verifica que aquellos contenedores en la lista de procesados no se encuentren en la lista de pendientes por indexar. Resultado de la prueba Se tomó como entrada la lista que puede apreciarse en la Figura 90 y se obtiene como resultado la lista en la Figura 95. Donde puede apreciarse que aquellos contenedores que se encuentran en la lista de pendientes efectivamente están en la de procesados y se han eliminado de la lista de pendientes para no volver a ser procesados. Capítulo IV Desarrollo de la Aplicación Pág - 128 Figura 95. Lista de contenedores indexados. Análisis de tiempos de rastreo e indexación: Una vez realizada las pruebas pertinentes, se muestra el resultado de rendimiento de las misma. Cabe destacar para estos resultados se cuenta con un universo de 62 contenedores de distintos tamaños. En cuanto al tiempo de indexación de los contenedores en la Figura 96. Se muestra cuantos milisegundos tardó en llevarse a cabo el proceso de indexación. Figura 96. Tiempos de Indexación por contenedor. Capítulo IV Desarrollo de la Aplicación Pág - 129 En la Figura 96. Se aprecia que existe un máximo aproximado de 690 milisegundos en lo que tardaría Solr en indexar un contenedor y un mínimo de 200 milisegundos. Gracias a las 62 muestras que se tienen, nos indican que el proceso de indexación tardaría en promedio 391.67 milisegundos en indexar un contenedor. Cabe destacar que estos tiempos no dependen del tamaño del contenedor puesto que la indexación viene dada por la información que se recauda a través de los reportes que vienen en conjunto con el WARC. A continuación se muestran los tiempos de rastreo medido en segundos de los contenedores agrupados por la URL que representan (medido en KB) Tabla 26. Duración de rastreo por peso de contenedores asociado a la URL www.fmn.gob.ve www.fmn.gob.ve Peso MB Duración de Rastreo (Min) 0,059 49,87 61 41,88 61 44,83 61 45,14 61 35,32 61 34,85 61 37,46 Promedio 41,33 D. Estándar 5,67285013 Tabla 27. Duración de rastreo por peso de contenedores asociado a la URL www.ivic.gob.ve www.ivic.gob.ve Peso MB Duración de Rastreo (Min) 5017,6 1229,13 5017,6 1145,67 5017,6 1178,65 5017,6 1075,17 Promedio 1157,155 D. Estándar 64,5390866 Capítulo IV Desarrollo de la Aplicación Pág - 130 Tabla 28. Duración de rastreo por peso de contenedores asociado a la URL www.luz.edu.ve www.luz.edu.ve Peso MB Duración de Rastreo (Min) 68 1091,84 68 451,37 68 435,98 68 436,21 68 436 68 436 68 435,98 Promedio 531.91 D. Estándar 246,971447 Tabla 29. Duración de rastreo por peso de contenedores asociado a la URLwww.mcti.gob.ve www.mcti.gob.ve Peso MB Duración de Rastreo (Min) 47 372,89 52 389,91 52 386,41 51 383,58 51 383,58 52 389,61 Promedio 384,33 D. Estándar 6,25043678 Tabla 30. Duración de rastreo por peso de contenedores asociado a la URL www.pdvsalaestancia.com www.pdvsalaestancia.com Peso MB Duración de Rastreo (Min) 1228,8 731,52 1228,8 708,13 1228,8 731,32 1228,8 694,73 1228,8 699,70 1228,8 691 Capítulo IV Desarrollo de la Aplicación Pág - 131 213 176,81 Promedio 4433,21 D. Estándar 201,969317 Tabla 31. Duración de rastreo por peso de contenedores asociado a la URL www.uc.edu.ve www.uc.edu.ve Peso MB Duración de Rastreo (Min) 0,64 1140 1,1 1140 1,1 1140 Promedio 1140 D. Estándar 0 Tabla 32. Duración de rastreo por peso de contenedores asociado a la URL www.ucv.ve www.ucv.ve Peso MB Duración de Rastreo (Min) 4300,8 1440 4300,8 1440 4505,6 1440 Promedio 1440 D. Estándar 0 Tabla 33. Duración de rastreo por peso de contenedores asociado a la URL www.udo.edu.ve www.udo.edu.ve Peso MB Duración de Rastreo (Min) 212 1440 212 1440 212 1440 203 718,45 203 708,92 212 713.93 63 728,10 Promedio 1079,245 D. Estándar 395,23 Capítulo IV Desarrollo de la Aplicación Pág - 132 Tabla 34. Duración de rastreo por peso de contenedores asociado a la URL www.ula.ve www.ula.ve Peso MB Duración de Rastreo (Min) 62 826,86 62 442,55 62 442,59 62 444,44 62 796,52 62 469,62 62 468,18 Promedio 555,82 D. Estándar 175,38 Tabla 35. Duración de rastreo por peso de contenedores asociado a la URL www.usb.ve www.usb.ve Peso MB Duración de Rastreo (Min) 249 435,30 246 436,35 248 435,87 248 435,29 249 435,89 249 435,89 249 435,89 Promedio 435,78 D. Estándar 0,37 En las tablas anteriormente expuestas (Tabla 26-35), se aprecia que a medida que va aumentando el tamaño de los contenedores va aumentando el tiempo en el que rastreador cosecha el sitio. Cabe destacar que, a pesar de no haber un cambio considerable en los tamaños de los contenedores por URL (medido en MB), el tiempo es bastante variante. Una de las razones por las cuales esto puede suceder es que el rastreador debe esperar la respuesta de los servidores en donde se encuentran alojados los sitios para poder procesar cada documento y almacenarlo dentro del contenedor WARC, por lo tanto se depende de la conexión hacia internet que se dispone que puede llegar a ser inestables por factores externos propios de la red de la región. Capítulo IV Desarrollo de la Aplicación Pág - 133 A continuación, en la Figura 97, se muestra un gráfico de dispersión que muestra el tiempo de duración de los contenedores a medida que va aumentado el tamaño de los mismos. Figura 97. KB/seg dependiendo del peso del contenedor. Efectivamente, en la Figura 97, se corrobora que a medida que los contenedores van aumentando de tamaño se observa un crecimiento del tiempo que toma rastrearlos, lo cual es un resultado esperado, más sin embargo, existen casos en los que esto no se cumple. Estas excepciones puede venir unidas tanto a problemas en la conexión de internet como a procesamiento, ya que cada máquina procesa los contenedores a velocidades distintas. Con los casos expuesto se concluye que a pesar de haber excepciones en el tiempo de rastreo de contenedores, el rastreador suele seguir un comportamiento esperado por el equipo de trabajo ya que se toma como premisa que entre mayor tamaño de contenedor mayor tiempo se tomará en ser rastreado. Conclusiones y Recomendaciones Pág - 134 Conclusiones Al concluir la realización de este trabajo especial de grado titulado “Implementación de los módulos de adquisición y almacenamiento de un prototipo para el archivado de sitios Web en Venezuela.” Se cuenta con un prototipo para realizar el rastreo y almacenamiento de sitios Web de índole cultural, educativa o que en general sean representativos de las manifestaciones y cultura venezolana. El prototipo fue desarrollado siguiendo una arquitectura basada en componentes tal como se pudo ver en la fase de elaboración del desarrollo con Ágil UP usando como base la arquitectura propuesta por Ospina y León [30] y el modelo de referencia de la IIPC que se mostró en la Figura 8 , así el OAIS productor está conformado por Heritrix y la aplicación administrativa , el OAIS archivo está conformado por los contenedores WARC y su gestión que se realiza a través de la plataforma de Búsqueda Solr y los script necesarios para lograr las tareas de gestión de almacenamiento del archivo, el OAIS consumidor no está dentro del alcance de este trabajo y se considera en trabajos futuros que se integrarán a este prototipo. Con la aplicación administrativa para configuración de rastreo se facilita al usuario todos los aspectos relacionados a la creación y configuración de rastreos que de otra manera deberían hacerse de forma manual y requeriría tener conocimientos sobre las herramientas utilizadas y los componentes internos del rastreador, en este caso de Heritrix. Así mismo también permite consultar información acerca de rastreos anteriores. Con la indexación a través de Solr se realiza el manejo de los documentos almacenados dentro del Archivo Web para poder consultarlos y con la aplicación de consulta se ayuda al usuario a visualizar los contenedores disponibles en el sistema sin la necesidad de conocer la sintaxis de consulta con la que trabaja Solr. Además, la aplicación procesa los distintos archivos de información dentro de los componentes y muestra las características principales y métricas relevantes sobre el contenido dentro de un archivo Web así como del proceso de adquisición llevado a cabo por el rastreador. Se realizó un esfuerzo para realizar la configuración e integración de las herramientas utilizadas, cabe destacar que esta tarea no fue sencilla debido a que en algunos casos la documentación era escasa y limitada, además el intento de comunicación con las personas que le dan mantenimiento a las herramientas no fue satisfactorio, para lograr la integración de estas herramientas fue necesario desarrollar componentes Conclusiones y Recomendaciones Pág - 135 adicionales que permitiesen automatizar el proceso de rastreo e indexación de contenido. Las métricas tienen como finalidad mostrarle al usuario las características más relevantes sobre los contenedores y su proceso de rastreo, para poder proveer datos significativos para futuros análisis sobre los mismos. Cabe destacar que estos análisis se encuentran fuera del alcance de este Trabajo Especial de Grado, pero se le facilita a futuros proyectos la búsqueda de todos los datos necesarios y disponibles en el sistema de manera que esto no presente una limitación al momento de realizar estos análisis, también ahorrando el proceso adicional de conocer los componentes en su totalidad para poder obtener estos datos. Con las pruebas que se le hicieron al prototipo se pudo comprobar que cumple con los requisitos funcionales planteados, como son la creación y generación de rastreos, comprobación de rastreos finalizados así como la indexación de contenedores y el almacenamiento de métricas. Se hizo una revisión de la lista de iniciativas de preservación Web [4] y se pudo observar que solo 3 iniciativas utilizan las mismas herramientas y formatos usados en este trabajo especial de grado (Heritrix, Solr y WARC), el lograr configurar y engranar estas herramientas consideramos es un punto de valor dentro de nuestro trabajo. El desarrollar este trabajo especial de grado nos dejo varias enseñanzas tanto es aspectos metodológicos como en aspectos técnicos, en este último apartado se puede mencionar los conocimientos obtenidos para la configuración de tareas automáticas bajo un ambiente linux, así como la programación en lenguaje shell script. Conclusiones y Recomendaciones Pág - 136 Recomendaciones Utilización de hadoop para cómputo distribuido Para la gestión y asignación de rastreos se puede utilizar una plataforma de cómputo distribuido como hadoop que equilibre la carga de una manera más eficiente. Agregar más opciones a la configuración de rastreos Se puede agregar una pestaña de opciones avanzadas a la creación de rastreos, brindado así la oportunidad de tener mayor control sobre las propiedades que tendrá el mismo. Agregar más espacio de almacenamiento Se pueden agregar disco duros adicionales para ampliar el espacio de almacenamiento, y así poder almacenar una mayor cantidad de rastreos. Hacer la indexación de texto completo Se puede implementar un índice de texto completo para ampliar el alcance del proyecto y hacer una consulta más amplia sobre los contenedores. Esto podría lograrse unificando el proceso de rastreo con el proceso de indexación, es decir, al momento de rastrear una página se le indexa primero. Agregar un programador de tareas nativo de la aplicación Se puede reemplazar el componente CRON (administrador de tareas programadas) con un administrador de tareas que esté unido a la aplicación administrativa para la creación y configuración de rastreos. Referencias Bibliográficas Pág - 137 Bibliografía [1]. Organización de las Naciones Unidas para la Educación, la Ciencia y la Cultura. DIRECTRICES PARA LA PRESERVACIÓN DEL PATRIMONIO DIGITAL. Australia: Biblioteca Nacional de Australia, 2003. [2]. Masanès, Julien.Web Archive. New York: Springer, 2006. ISBN-10 3-540-23338- 5. [3]. Patrimonio Cultural: recuperado en febrero de 2013. Disponible en: http://es.wikipedia.org/wiki/Patrimonio_culturalhttp://netpreserve.org/ [4]. List of Web archiving initiatives. recuperado en febrero de 2013. Disponible en:https://en.wikipedia.org/wiki/List_of_Web_archiving_initiativeshttps://en.w ikipedia.org/wiki/List_of_Web_archiving_initiatives [5]. https://en.wikipedia.org/wiki/List_of_Web_archiving_initiatives Bergman, M. K. (2001), “he deep web: Surfacing hidden value”, Journal of Electronic Publishing [6]. Montojo, V. (06 de 2010).Archivistica. Recuperado en febrero de 2013. Disponible en: http://www.archivistica.net/Textos/CONCEPTO_ARCHIVO.pdfhttp://www.archi vistica.net/Textos/CONCEPTO_ARCHIVO.pdf [7]. http://www.archivistica.net/Textos/CONCEPTO_ARCHIVO.pdfWARC file, recuperado en febrero de 2013. Disponible en: [http://www.digitalpreservation.gov/formats/fdd/fdd000236.shtml] [8]. URI, recuperado en febrero de 2013. Disponible en: http://tools.ietf.org/html/rfc3986http://tools.ietf.org/html/rfc3986 [9]. Roche, X. Copying web sites. In J. Masanès Heidelberg New York: Springer. [aut. libro] Masanes Julien. Web Archiving. s.l.: Springer, 2006, pág. 234. [10]. Heritrix. consultado en febrero 2013. Disponible en: https://webarchive.jira.com/wiki/display/Heritrix/Heritrix https://webarchive.jira.com/wiki/display/Heritrix/Heritrix consultado en febrero 2013 [11]. Internet Archive.Consultado en Referencias Bibliográficas Pág - 138 febrero de 2013. Disponible en:[http://www.archive.org/] [12]. Representational state transfer. recuperado en febrero de 2013. Disponible en: http://es.wikipedia.org/wiki/Representational_State_Transfer [13]. Hypertext driven. recuperado en febrero de 2013. Disponible en: http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven [14]. Spring java framework. recuperado en febrero de 2013. Disponible en: http://www.springsource.org/ [15]. Restlet. recuperado en febrero de 2013. Disponible en: http://en.wikipedia.org/wiki/Restlet [16]. Gomes, D., Miranda, J., Costa, M.A survey on web archiving initiatives, Foundation for National Scientific Computing (FCCN). Recuperado en febrero de 2013 [17]. Consultative Committe for Space Data System.Reference Model for an Open Archival Information System. 2002. CCSDS 650.0-B-1. Recuperado en febrero de 2013. [http://public.ccsds.org/publications/archive/650x0b1.PDF] [18]. Norma ISO 14721:2003, Recuperado en febrero de 2013. Disponible en: [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnu mber=24683] [19]. Reference model for an open archival information system, Magenta book, june 2012.Recuperado en febrero de 2013. Disponible en: [http://public.ccsds.org/publications/archive/650x0m2.pdf] [20]. Apache Solr, Recuperado en octubre de 2011. Disponible en: [http://lucene.apache.org/solr/] Consultado en octubre de 2011. [21]. Solr Wiki. Recuperado en Noviembre de 2011. Disponible en: [http://wiki.apache.org/solr/FrontPage] [22]. Lucene Apache. Recuperado en octubre de 2011. Disponible en: [http://lucene.apache.org/]. [23]. Daniel Gomes, André Nogueira, João Miranda, Miguel Costa.A survey on web archiving initiatives, Foundation for National Scientific Computing (FCCN). [24]. Smiley, D., Pugh, E. Apache Solr 3 Enterprise Search Referencias Bibliográficas Pág - 139 Server. Birmingham - Mumbai, 2011. ISBN 978-1-84951-606-8. [25]. Rafał Kuć. Apache Solr 3.1 Cookbook. Birmingham - Mumbai, 2011. ISBN 978-1- 849512-18-3. [26]. An Introduction to Heritrix An open source archival quality web crawler, Recuperado en noviembre de 2011. Disponible en: http://www.iwaw.net/04/Mohr.pdf [27]. IIPC (International Internet Preservation Consortium).Recuperado en noviembre de 2011. Disponible en: http://netpreserve.org/http://netpreserve.org/. [28]. A technique for measuring the relative size and overlap of public Web search engines, recuperado en febrero de 2013.Disponible en: http://netpreserve.org/http://www7.scu.edu.au/1937/com1937.htm. [29]. The Indexable Web is More than 11.5 billion pages, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://homepage.cs.uiowa.edu/~asignori/papers/th e-indexable-web-is-more-than-11.5-billion-pages/size-indexable-web.pdf. [30]. Ospina Torres, M.H. y León Luna, C.P. (2013). Una arquitectura basada en software libre para archivos web. En la Revista Venezolana de Información, Tecnología y Conocimiento, 10 (1), 53-72, recuperado en junio de 2013. Disponible en: http://netpreserve.org/http://revistas.luz.edu.ve/index.php/enlace/article/vie wFile/12755/12326. [31]. The Agile Unified Process, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://www.ambysoft.com/unifiedprocess/agileUP.html [32]. Agile Alliance, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://www.agilealliance.org/. [33]. Desarrollo de software basado en componentes, recuperado en febrero de 2013.Disponible en: http://netpreserve.org/http://webdelprofesor.ula.ve/ingenieria/jonas/Product os/Publicaciones/Congresos/CAC03%20Desarrollo%20de%20componentes.pdf . Referencias Bibliográficas Pág - 140 [34]. Ingeniería de software basada en componentes, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://es.wikipedia.org/wiki/Ingenier%C3%ADa_de_sof tware_basada_en_componentes. [35]. Metodologías para el desarrollo de software, recuperado en febrero de 2013. Disponible en: http://netpreserve.org/http://wiki.monagas.udo.edu.ve/index.php/Metodolog %C3%ADas_para_el_desarrollo_de_software [36]. Kenneth Laudon, Sistema de información gerencial, pearson educación 2004. [37]. Roger Pressman , Ingeniería del software, 5ta edición,ISBN: 8448132149 [38]. Solr Architecture, Recuperado en febrero de 2013. Disponible en: http://www.docstoc.com/docs/98318767/Solr-Architecture- %28PowerPoint%29, [39]. Portuguese Web Archive, recuperado en febrero de 2013. Disponible en: http://sobre.arquivo.pt/about-the-archive/goals. [40]. Introduction to Solr, Consultado en Junio de 2013.Disponible en: http://es.slideshare.net/erikhatcher/introduction-to-solr-9213241, [41]. Inverted index, recuperado en febrero de 2013. Disponible en: http://en.wikipedia.org/wiki/Inverted_index [42]. Hanzo Archive, recuperado en junio de 2013. Disponible en: http://www.hanzoarchives.com/ [43]. Lineamientos Generales para la Construcción de un Archivo Histórico de la Información Digital producida en Venezuela. Andrés Sanoja, Claudia León y Gustavo Torres. Disponible en: http://gppd.inf.ufrgs.br/CLCAR2010files/slides/12.pdf Anexos Pág - 141 Anexo A Instalación de Heritrix versión 3.1.1 Se descarga Heritrix de su página web: http://builds.archive.org:8080/maven2/org/archive/heritrix/heritrix/3.1.1/h eritrix-3.1.1-dist.zip. Una vez descargado se descomprime el archivo, usando el comando que puede apreciarse en la Figura 98. Figura 98. Descomprimir Heritrix • JAVA_HOME,: Debe apuntar al directorio de instalación de JRE 1.6, por ejemplo JAVA_HOME=/usr/local/java/jre • HERITRIX_HOME: debe apuntar al directorio de instalación de heritrix, por ejemplo HERITRIX_HOME=/home/user/heritrix3.1.1 • JAVA_OPTS: Esta variable es usada para definir la cantidad de memoria asignada a heritrix, por ejemplo un valor igual a -Xmx1024M, indica que se está asignando 1Gb de memoria Adicionalmente se le debe dar permiso de ejecución al archivo HERITRIX_HOME/bin/heritrix, como se muestra en la Figura 99. Figura 99. Heritrix permisos Ejecutar Heritrix Para ejecutar Heritrix se usa el comando que se puede apreciar en la Figura 100. Figura 100. Comando para ejecutar Heritrix API REST Anexos Pág - 142 Heritrix usa REST para exponer sus funcionalidades, la implementación REST de heritrix está basada en Restlet que es un framework RestFul para java. Heritrix expone esta API a través de HTTPS, a través de este protocolo se hacen peticiones para recuperar o modificar configuraciones y manejos de rastreos. Cualquier cliente que soporte HTTPS puede ser usado para invocar el API REST, por ejemplo se puede usar el cliente de línea de comandos curl. CrearJobs Para crear un nuevo job se utiliza el comando que puede apreciarse en la Figura 101. Figura 101. Crear Job Dónde: createpath: Nombre del job <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix Construir el Job Luego de que un job es creado se debe leer el archivo de configuración necesario para correr el rastreo, a partir de las especificaciones dictadas en este archivo se construye el job, el comando utilizado puede apreciarse en la Figura 102. Figura 102. Construir Job Dónde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob>: Nombre del job Anexos Pág - 143 Lanzar el job Una vez el job ha sido construido, es necesario lanzarlo o ponerlo a correr, para ello se usa el comando que puede apreciarse en la Figura 103. Figura 103. Lanzar Job donde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob> : Nombre del job Quitar la pausa a un job Por defecto el rastreo es lanzando en modo pausa, por lo que es necesario quitarle la pausa para que pueda comenzar a procesar, el comando usado puede apreciarse en la Figura 104. Figura 104. Despausar job donde: <usuario>: usuario de heritrix <contrasena>: contraseña del usuario heritrix <HeritrixHost>: Host donde está corriendo heritrix <nombreJob>: Nombre del job Anexos Pág - 144 Anexo B Instalación de devise Pasos de instalación tomados de:http://railscasts.com/episodes/209- introducing-devise?language=es&view=asciicast Para instalar y configurar la gema devise se deben seguir los siguientes pasos: Descargar la gema En el archivo Gemfile se añade una entrada correspondiente a la gema como se puede apreciar en la Figura 105. Figura 105. Gem devise Seguidamente desde la línea de comando se debe ejecutar el comando que se puede ver en la Figura 106. Figura 106. Comando bundle install Comenzará el proceso de descarga y la gema será instalada automáticamente Correr el generador de instalación Es necesario correr el generador de instalación para poder personalizar la gema, en la línea de comando debe ejecutarse el comando que puede apreciarse en la Figura 107. Figura 107. Instalar devise El mensaje de instalación indicará que se debe ir al archivo Anexos Pág - 145 /config/environments/development.rb y configurar la opción host, para desarrollo se puede utilizar localhost, tal como puede apreciarse en la Figura 108 Figura 108. Configurar correo Crear el modelo Para la autenticación es necesario crear un modelo User, para lograr eso se puede utilizar el generador de devise, como se puede ver en la Figura 109. Figura 109. Generar modelo Este comando genera el modelo, una migración y una ruta El modelo generado se puede ver en la Figura 110 Figura 110. Modelo User Y la migración en la Figura 111 Anexos Pág - 146 Figura 111. Migración Correr la migración Para correr la migración se debe ejecutar rake desde línea de comando que tal como puede verse en la Figura 112. Figura 112. Comando rake Luego de ejecutar estos pasos la gema estará instalada y configurada, lista para ser usada. Anexos Pág - 147 Anexo C Instalación y configuración de Solr Solr para funcionar necesita las siguientes dependencias: Java 1.6, Tomcat 6. Para instalar y configurar Solr se deben seguir los siguientes pasos: 1. Descargar Solr a través del URL 2. http://apache.claz.org/lucene/solr/3.6.2. 3. Descomprimir el archivo. 4. Copiar la carpeta de Solr en el directorio de preferencia y colocar los derechos de lectura y ejecución para el usuario que ejecuta el servidor Web Tomcat. 5. Configurar el archivo solrconfig.xml indicando en qué directorio estará ubicada la data, tal como se puede ver en la Figura 113. Figura 113. Solr configurar ubicación de la data 6. Crear un contexto Tomcat donde se indique dónde estará ubicada la carpeta donde se ejecutará la plataforma, cuál es su carpeta raíz y donde está el contenedor .war, tal como se puede apreciar en la Figura 114 Figura 114. Solr Crear contexto 7. Iniciar el Servidor Web Tomcat: Si la configuración se hizo de forma correcta, al entrar a la dirección http://<ip_maquina>:8080/solr/ se podrá apreciar la interfaz gráfica del solr , tal como puede verse en la Figura 115 Anexos Pág - 148 Figura 115. Página Principal de Administración. 8. Cambiar el archivo schema.xml para personalizar: Si se desea modificar o personalizar el esquema de datos debe modificarse el archivo schema.xml de la forma que se muestra en la Figura 116. Figura 116. Archivo schema.xml de configuración de Solr. Anexos Pág - 149 Anexo D Instalación y configuración de WARCTools. 1. Descargar Hanzo Warc Tools. Disponible en: http://code.hanzoarchives.com/warc-tools/downloads 2. Instalar dependencias: • Python Setup tools (python3-setuptools and python-setuptools) • Python Unittest (python-unittest2) • Python 2.6 3. Extraer archive con el siguiente comando $ tar -xvf hanzo-warc-tools-f8cd94bebe53.tar.gz 4. Dentro del archive extraído ejecutar los siguientes comandos para instalar como comando propios del Sistema Operativo: $ ./setup.py build $ ./setup.py install 5. Ahora se tendrá disponible los siguientes comandos de: warcvalid.py warcdump.py warcfilter.py warc2warc.py arc2warc.py warcindex.py