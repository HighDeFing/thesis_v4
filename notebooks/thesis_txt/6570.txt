UNIVERSIDAD CENTRAL DE VENEZUELA UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CENTRO DE ENSEÑANZA ASISTIDA POR COMPUTADOR - CENEAC Desarrollo del Módulo de Gestión de Información para las actividades de extensión realizadas en el CENEAC UCV Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela por el Bachiller Carlos Eduardo Riera Ave (C.I. 18.004.591) para optar al título de Licenciado en Computación Tutora: Profa. Yusneyi Y. Carballo Barrera Ciudad Universitaria de Caracas, 11 de Octubre de 2017 Agradecimientos y Dedicatorias A mi madre y mi tía abuela, Carolina Ave y María Josefina Cabarga, por sus inmensurables esfuerzos y sacrificios. A mi abuela Delia Cabarga. A mi novia Sol Turipe, por brindarme su amor, su gran paciencia y apoyo. A mis amigos del colegio y la universidad, Elio Márquez, Anthony Herrera, Guillermo Galarraga, Carlos Romero y Daniel Ulian. A los amigos que he conocido trabajando, Joaquín Molina, Frank Travieso, Rafael Machado y Carlos Pereira. A mi perra Susi, cada vez que la veo me hace sonreír. A mi gato Tobi, sé que en el fondo me quiere, a pesar de las miradas de odio. Y por último, pero no por menos importante, a mí tutora Yusneyi Carballo, por aceptar ser mi tutora, confiar en mí, guiarme y apoyarme. Resumen Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Centro de Enseñanza Asistida por Computador - CENEAC Desarrollo del Módulo de Gestión de Información de las actividades de extensión realizadas en el CENEAC UCV Autor: Carlos Eduardo Riera Ave, 1987cr@gmail.com Tutora: Profa. Yusneyi Carballo Barrera, yusneyi.carballo@ciens.ucv.ve Fecha: 11 de Octubre de 2017 RESUMEN El objetivo del presente Trabajo Especial de Grado es el desarrollo de un módulo de gestión de información centrado las actividades de extensión que se desarrollan en el Centro de Enseñanza Asistida por Computador, en conjunto con CENEAC Producciones, empresa de la Universidad Central de Venezuela. La aplicación desarrollada permitirá la planificación de cursos y diplomados, así como la gestión de la información académica y administrativa asociada a estas actividades de formación de talento humano, de sus participantes e instructores. Para la creación del módulo se utilizaron diversas herramientas y tecnologías, destacando los marcos de trabajo (frameworks) Laravel, Yii2 y la librería Bootstrap, lo cual permite entregar un producto que puede utilizarse en múltiples dispositivos. La principal motivación para el desarrollo de aplicaciones de este tipo es facilitar la gestión de procesos y dar visibilidad a los servicios y productos que la Universidad Central de Venezuela está en la capacidad de ofrecer. Palabras Clave: Gestión de información, Gestión de actividades de formación, Formación de Talento Humano, Actividades de Extensión UCV. Índice ÍNDICE RESUMEN ................................................................................................................ 4 ÍNDICE ................................................................................................................... 5 ÍNDICE DE FIGURAS ............................................................................................... 7 ÍNDICE DE TABLAS ............................................................................................... 10 INTRODUCCIÓN ...................................................................................................... I CAPÍTULO I. PLANTEAMIENTO DEL PROBLEMA....................................................... 1 1. CONTEXTO ........................................................................................................... 1 1.1. PLANTEAMIENTO DEL PROBLEMA ................................................................................ 1 1.2. OBJETIVOS DE TRABAJO ESPECIAL DE GRADO ............................................................... 5 OBJETIVO GENERAL .................................................................................................... 5 OBJETIVOS ESPECÍFICOS .............................................................................................. 6 1.3. PRINCIPALES REQUERIMIENTOS ................................................................................ 6 CAPÍTULO II. MARCO TEÓRICO Y ANTECEDENTES .................................................. 8 2.1. BASES CONCEPTUALES .......................................................................................... 8 2.2. TECNOLOGÍAS DEL LADO DEL CLIENTE ....................................................................... 11 2.3. TECNOLOGÍAS DEL LADO DEL SERVIDOR .................................................................... 12 2.4. HERRAMIENTAS DE APOYO AL DESARROLLO DE SOFTWARE ............................................... 14 2.3 ANTECEDENTES .................................................................................................. 14 2.3.1 COURSERA ..................................................................................................... 14 2.3.2 ESCUELA WEB ................................................................................................ 18 2.3.3 SISTEMA ACTUAL DE GESTIÓN DE CURSOS DEL CENEAC ............................................... 21 CAPÍTULO III. MARCO METODOLÓGICO ............................................................... 25 3.1. METODOLOGÍAS ÁÓN PARA LA SELECCIÓN DE SCRUM ............................................................ 30 3.4. ADAPTACIÓN DE LA METODOLOGÍA ........................................................................... 31 CAPÍTULO IV. MARCO APLICATIVO....................................................................... 32 4.1. PRINCIPALES REQUERIMIENTOS .............................................................................. 32 4.2. PLATAFORMA UTILIZADA PARA EL DESARROLLO ............................................................. 33 4.3. PLATAFORMA NECESARIA PARA UTILIZAR LA APLICACIÓN .................................................. 33 Índice 4.4. SELECCIÓN DE LAS TECNOLOGÍAS ............................................................................ 33 4.5. APLICACIÓN DE LA METODOLOGÍA SCRUM .................................................................. 34 4.5.1. PILA DEL PRODUCTO ........................................................................................ 34 4.5.2. SPRINTS ...................................................................................................... 35 4.6. DESCRIPCIÓN DE LA APLICACIÓN ............................................................................ 42 4.6.1. PRINCIPALES FUNCIONALIDADES .......................................................................... 42 4.6.2. PATRONES DE INTERFAZ E INTERACCIÓN UTILIZADOS .................................................. 49 4.6.3. MANUAL GENERAL DE USO Y PRINCIPALES INTERFACES ................................................. 53 4.6.4. PRUEBAS REALIZADAS ..................................................................................... 84 CONCLUSIONES Y RECOMENDACIONES ................................................................ 90 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES ..................................................... 91 ANEXO 1. MODELO DE BASE DE DATOS ................................................................. 94 ANEXO 2. ROLES Y PERMISOS .............................................................................. 95 ANEXO 3. PROTOTIPOS DE INTERFAZ ................................................................... 96 Índice de Tablas ÍNDICE DE FIGURAS Figura 1 - Ejemplo de la lista de asistencia del CENEAC ...................................... 2 Figura 2 - Planilla de datos .............................................................................. 3 Figura 3 - Listado provisional de participantes ................................................... 4 Figura 4 - Diagrama Cliente Servidor................................................................ 9 Figura 5 - Diagrama Modelo Vista Controlador ................................................. 10 Figura 6 - Catálogo de Cursos y Programas especializados ................................ 15 Figura 7 - Interfaz de Cursos de una Aplicación ............................................... 16 Figura 8 - Interfaz de pago de un Curso ......................................................... 17 Figura 9 - Interfaz de detalles de un Curso ..................................................... 18 Figura 10 - Interfaz de inscripción .................................................................. 19 Figura 11 - Correo de bienvenida ................................................................... 19 Figura 12 - Interfaz de próximos Cursos ......................................................... 20 Figura 13 - Interfaz de registro de pago ......................................................... 21 Figura 14 - Interfaz de inicio de sesión ........................................................... 22 Figura 15 - Interfaz principal del Sistema ........................................................ 22 Figura 16 - Interfaz de agregar cursos al cronograma ...................................... 23 Figura 17 - Interfaz de modificar Cronograma ................................................. 23 Figura 18 - Interfaz de Seguimiento de Cotizaciones ........................................ 24 Figura 19 – Representación de la plantilla base ............................................... 40 Figura 20 - Diagrama de secuencia correspondiente al flujo de Importar Preinscritos ................................................................................................................. 42 Figura 21 - Columna de acciones ................................................................... 43 Figura 22 - Ventana emergente para el envío de correos personales .................. 43 Figura 23 - Botón que despliega le ventana emergentes para el envío de correos a listas .......................................................................................................... 44 Figura 24 - Ventana emergente para el envío de correos a listas........................ 44 Figura 25 - Diagrama de secuencia del proceso de Postulación y Aprobado de Postulación de Instructores ........................................................................... 46 Figura 26 - Diagrama de secuencia del proceso de Preinscripción e Inscripción .... 47 Figura 27 - Diagrama de secuencia del proceso de Reporte de Pagos ................. 48 Figura 28 - Campo select antes y después de aplicarle Select2 .......................... 49 Figura 29 - Campo input después de aplicarle jQuery Timepicker ....................... 49 Índice de Tablas Figura 30 - Campo input después de aplicarle Bootstrap Datepicker ................... 50 Figura 31 - Campo input después de aplicarle Date Range Picker ....................... 51 Figura 32 - Campo input del tipo checkbox antes y después de aplicarle Bootstrap Toggle ........................................................................................................ 51 Figura 33 - Campo de área de texto después de aplicarle CKEditor .................... 52 Figura 34 - Barra de progreso generada por Nprogress ..................................... 52 Figura 35 - Notificación generada por Toastr ................................................... 52 Figura 36 – Interfaz de ingreso al Módulo ....................................................... 53 Figura 37 – Interfaz de Bienvenida ................................................................ 54 Figura 38 – Menú Lateral .............................................................................. 54 Figura 39 – Menú de Usuarios desplegado ...................................................... 55 Figura 40 – Lista de Usuarios ........................................................................ 55 Figura 41 – Lista de Participantes .................................................................. 56 Figura 42 – Menú de Roles y Permisos desplegado ........................................... 56 Figura 43 – Interfaz de asignación de Roles y Permisos a un usuario .................. 57 Figura 44 – Lista de Roles ............................................................................. 57 Figura 45 – Interfaz de asignación de Roles y Permisos a un Rol ........................ 58 Figura 46 – Menú de Instructores desplegado .................................................. 58 Figura 47 – Interfaz de creación de Instructores Asignados ............................... 59 Figura 48 – Lista de Instructores Postulados ................................................... 59 Figura 49 – Menú de Cursos desplegado ......................................................... 60 Figura 50 – Lista de entradas del Cronograma ................................................. 61 Figura 51 – Interfaz de creación de Cronograma .............................................. 62 Figura 52 – Detalle de Cronograma – Pestaña de Preinscritos ............................ 63 Figura 53 – Interfaz de detalle de Pago .......................................................... 64 Figura 54 – Interfaz de actualizar Pago ........................................................... 65 Figura 55 – Detalle de Cronograma – Pestaña de Inscritos ................................ 66 Figura 56 – Detalle de Cronograma – Pestaña de Instructores Postulados ........... 66 Figura 57 – Lista de asistencia generada......................................................... 67 Figura 58 – Interfaz de creación de Curso ....................................................... 68 Figura 59 – Menú de Listas desplegado........................................................... 68 Figura 60 – Lista de todos los Interesados ...................................................... 69 Figura 61 - Interfaz de generación de respaldos .............................................. 70 Figura 62 - Interfaz Principal – parte superior ................................................. 71 Índice de Tablas Figura 63 - Interfaz Principal – parte media .................................................... 72 Figura 64 - Interfaz Principal – parte inferior ................................................... 72 Figura 65 - Interfaz de Inicio de Sesión .......................................................... 73 Figura 66 - Formulario de Registro ................................................................. 73 Figura 67 – Formulario de Reestablecer Contraseña ......................................... 74 Figura 68 - Interfaz de Empresa .................................................................... 75 Figura 69 - Interfaz de Cursos ....................................................................... 76 Figura 70 - Interfaz de detalle de Curso .......................................................... 77 Figura 71 - Interfaz de Cronograma ............................................................... 78 Figura 72 – Cabecera de vista de detalle de Cronograma .................................. 78 Figura 73 - Interfaz de Mis Cursos ................................................................. 80 Figura 74 - Interfaz de Notificar Pago ............................................................. 81 Figura 75 – Interfaz de Modificar Datos .......................................................... 82 Figura 76 – Interfaz de Contacto ................................................................... 83 Figura 77 - Modelo de Base de Datos ............................................................. 94 Figura 78 – Lista de Roles y Permisos del Módulo de Gestión ............................. 95 Figura 79 – Prototipo de interfaz de la página principal del Sitio Público .............. 96 Figura 80 – Prototipos de interfaz de las páginas de Curso y Detalle de Curso ..... 97 Figura 81 – Prototipos de interfaz de las páginas de Cronograma y Detalle de Cronograma ................................................................................................ 97 Figura 82 – Prototipos de interfaz de interfaz de Mis Cursos .............................. 98 Índice de Tablas ÍNDICE DE TABLAS Tabla 1 - Diferencias entre metodologías Ágiles y no ÁgilesError! Bookmark not defined. Tabla 2 – Pila del Producto ............................................................................ 34 Tabla 3 – Modelo de evaluación ..................................................................... 84 Tabla 4 –Sprint 1, Ciclo 1 de pruebas ............................................................. 84 Tabla 5 – Sprint 2, Ciclo 1 de pruebas ............................................................ 85 Tabla 6 – Sprint 2, Ciclo 2 de pruebas ............................................................ 85 Tabla 7 – Sprint 3, Ciclo 1 de pruebas ............................................................ 85 Tabla 8 – Sprint 3, Ciclo 2 de pruebas ............................................................ 85 Tabla 9 – Sprint 4, Ciclo 1 de pruebas ............................................................ 86 Tabla 10 – Sprint 4, Ciclo 2 de pruebas .......................................................... 86 Tabla 11 – Sprint 5, Ciclo 1 de pruebas .......................................................... 87 Tabla 12 – Sprint 5, Ciclo 2 de pruebas .......................................................... 87 Tabla 13 – Sprint 6, Ciclo 2 de pruebas .......................................................... 88 Tabla 14– Sprint 6, Ciclo 2 de pruebas ........................................................... 88 Tabla 15 – Sprint 9, Ciclo 1 de pruebas .......................................................... 88 Tabla 16 – Sprint 10, Ciclo 1 de pruebas ........................................................ 88 Tabla 17– Sprint 11, Ciclo 1 de pruebas ......................................................... 89 Tabla 18– Sprint 11, Ciclo 2 de pruebas ......................................................... 89 Introducción i INTRODUCCIÓN El gran avance de la tecnología ha dado paso a la evolución informática. Las tecnologías han tenido que evolucionar de la mano a las necesidades humanas para solventar nuevos problemas que se han presentado. Muchas empresas han utilizado esta evolución a su favor, usando la tecnología para simplificar y dinamizar sus procesos a través de la automatización. En el caso del Centro de Enseñanza Asistida por Computador, CENEAC, centro de investigación adscrito a la Escuela de Computación de la Facultad de Ciencias, Universidad Central de Venezuela, se ha presentado una desactualización tecnológica, desaprovechando así, las ventajas ofrecidas por las tecnologías modernas. Debido a la falta de automatización de procesos que se realizan el CENEAC, surge la necesidad del desarrollo de un Módulo de Gestión de Información que permitirá una administración integrada y centralizada de la gestión de actividades de extensión. La aplicación desarrollada permitirá la planificación de cursos y diplomados, así como la gestión de la información académica y administrativa asociada a estas actividades de formación de talento humano, de sus participantes e instructores. Para cumplir con los objetivos planteados, este trabajo TEG documenta la investigación a través de 4 capítulos, estructurados de la siguiente manera: En el capítulo I se presenta la situación actual del CENEAC, el planteamiento del problema y se exponen los objetivos generales y específicos de la investigación. En el capítulo II se definen los conceptos relacionados a la investigación que corresponden a lo que es el marco conceptual, las herramientas de desarrollo y los antecedentes. En el capítulo III se describen la metodología a seguir para el desarrollo del TEG. En el capítulo IV se presenta la solución a los problemas planteados en el capítulo I y los detalles de la aplicación desarrollada. Finalmente, se presentan las conclusiones, recomendaciones y las fuentes consultadas. Capítulo I. Planteamiento del Problema 1 CAPÍTULO I. Planteamiento del Problema 1. Contexto El Centro de Enseñanza Asistida por Computador (CENEAC) es un centro de investigación de la Escuela de Computación quien en alianza con CENEAC Producciones C.A., una empresa de la Universidad Central de Venezuela, desarrolla planes de formación de talento humano, conformado por talleres, cursos y diplomados que forman parte de las actividades de extensión del Centro y por ende de los servicios ofrecidos por la UCV. CENEAC Producciones C.A. ofrece más de 18 años de experiencia y el conocimiento de un equipo de instructores formados principalmente en las áreas de Computación y Diseño Gráfico, además del apoyo de profesores universitarios con comprobada experiencia como asesores en el desarrollo de proyectos informáticos, aplicaciones de software y la gestión de proyectos. Bien sea como centro de investigación o como empresa, CENEAC también ofrece planes de formación al público en general, organizaciones públicas, empresas privadas, otras universidades. Entre sus servicios el CENEAC oferta desarrollo de proyectos de formación o actualización de recursos humanos, coordinación y desarrollo de proyectos informáticos y educativos, salones con infraestructura física apropiada para el dictado de cursos, imagen de la compañía en el sector en que se desenvuelve, capacidad para comprender requerimientos y desarrollar una planificación de cursos o talleres apropiada a las necesidades de sus clientes. Las principales áreas de cursos que cubre el CENEAC son: Herramientas Ofimáticas, Lenguajes de Programación, Creación y Gestión de Bases de Datos, Gestión de Proyectos, Diseño Gráfico, Dibujo Técnico y Arquitectónico y Desarrollo de Aplicaciones Web, tanto en actividades de formación presenciales en su sede en la Facultad de Ciencias UCV y dictados in-company. 1.1. Planteamiento del problema El CENEAC presenta limitaciones en la forma como gestiona la información de las actividades de extensión que desarrolla, especialmente cursos y talleres, ya que actualmente este proceso es realizado utilizando listas que se llenan manualmente y una aplicación web que tiene varios años de haber sido desarrollada, lo cual ha llevado a una desactualización tecnológica de sus funcionalidades. A continuación se muestran algunas de las planillas que se utilizan actualmente en los procesos del CENEAC. En la Figura 1 se puede observar la lista de asistencia de un curso, a pesar de que se usa una plantilla, hay datos como el nombre del curso, los días, horas y fechas de este, que tienen que ser modificados manualmente para cada curso. Capítulo I. Planteamiento del Problema 2 Figura 1 - Ejemplo de la lista de asistencia del CENEAC FUENTE: (CENEAC, 2016) En la Figura 2 tenemos la planilla de datos, esta es llenada por los participantes y recopila datos de éstos así como datos personales, datos del vehículo y cursos de interés. Capítulo I. Planteamiento del Problema 3 Figura 2 - Planilla de datos FUENTE: (CENEAC, 2016) Capítulo I. Planteamiento del Problema 4 En la Figura 3 se observa el listado provisional de participantes, en esta se lleva manualmente el control de los participantes interesados en un curso, se tienen datos de los participantes como nombre, cédula y número de teléfono, estado del pago y observaciones generales. Figura 3 - Listado provisional de participantes FUENTE: (CENEAC, 2016) Capítulo I. Planteamiento del Problema 5 Algunas desventajas de llevar estos procesos de manera manual son las siguientes:  Es lento y repetitivo, esto hace que el trabajo sea tedioso y propenso a errores.  Tienden a la desorganización.  Pueden llevar a la pérdida de datos en caso de extravío de alguna planilla.  Se repite información (en las tres planillas tenemos campos de Nombre, Apellido y Cédula).  Es costoso y produce desperdicios. No todos los procesos son realizados de manera manual, el CENEAC cuenta con un módulo de gestión en el cual se pueden realizar acciones como la creación de cursos y entradas en el cronograma, seguimiento de pagos, consultar listas de interesados y ver estados de los pagos. Como principal fuente de información que alimenta al módulo se tiene un sitio web público, en éste además de tener información sobre los productos y servicios que ofrece el CENEAC, los usuarios pueden anotarse en la lista de interesados de las entradas del cronograma. Tanto el módulo de gestión como el sitio público presentan limitaciones que no aprovechan las bondades de las tecnologías actuales en materia de diseño, interacción y rendimiento. Entre las limitaciones podemos destacar:  No se adapta a todas las resoluciones de pantalla.  Diseño no acorde a las tendencias actuales.  Algunos enlaces administrativos, como por ejemplo el seguimiento de pagos, muestran mensajes de error de base de datos. Es por eso que se ve la necesidad de mejorar la gestión de información en las actividades de extensión que en él se realizan, desarrollando un nuevo módulo de gestión de información que permita automatizar y minimizar los procesos manuales y mejore los procesos realizados por el sistema de gestión actual. Acompañado de éste módulo de gestión también se desarrollará un nuevo sitio web público, que de visibilidad a los productos ofrecidos por CENEAC y extienda las funcionalidades ofrecidas por el sitio actual. 1.2. Objetivos de Trabajo Especial de Grado Objetivo General Desarrollar un Módulo de Gestión de Información para las actividades de extensión del CENEAC, especialmente, las asociadas a formación de talento humano. Capítulo I. Planteamiento del Problema 6 Objetivos Específicos Con la finalidad de alcanzar el objetivo general, se plantearon los siguientes objetivos específicos: 1. Aplicar la metodología para el desarrollo de la solución conforme a los requerimientos. 2. Modelar la estructura de base de datos de acuerdo a los requerimientos. 3. Desarrollar el módulo de gestión que permita la gestionar información relacionada a cursos, participantes y cronogramas. 4. Desarrollar funcionalidad de respaldo de datos. 5. Desarrollar el sitio web público que alimente al módulo de gestión. 6. Documentar el desarrollo y análisis de la investigación. 7. Realización de pruebas de funcionalidad. 1.3. Principales Requerimientos 1. Gestionar electrónicamente la lista de interesados en un curso: 1.1. Crear, agregar o eliminar asistente. 1.2. Asociar una lista con un curso del cronograma, salón y con un instructor(es). 1.3. Imprimir la lista de asistencia a pasar en los cursos. 1.4. Duplicar una lista y modificarla, esto debido a que muchos participantes de un curso, repiten en el nivel siguiente. 1.5. Exportar a formato de hoja de cálculo (Excel), a formato de documento de texto (Word), a formato de documento portable (.pdf). 2. Registrar el pago del participante: 2.1. Información del pago: Fecha, modalidad (pago en oficina con efectivo, tarjeta de crédito o de débito, transferencia), número de operación/transferencia, monto, quien lo realiza, banco, comentarios, si el pago es completo o parcial. 2.2. Fecha de posible pago. 2.3. Comentarios. 3. Gestionar información del participante, datos personales, confirmar asistencia, registrar pago. Capítulo I. Planteamiento del Problema 7 4. Gestionar información de un curso y del cronograma de cursos: 4.1. Agregar / eliminar. 4.2. Modificar estado: confirmar inicio / suspender / reprogramar curso al cronograma. 4.3. Registrar comentario asociado al cambio de estado del curso. 5. Gestionar instructor(es) por curso. 6. Crear lista final de los asistentes para elaboración de los certificados. 7. Crear listas de participantes que requieren facturas personalizadas. 8. Búsquedas o consultas asociadas a: 8.1. Un curso (ficha descriptiva). 8.2. Una fecha específica de un curso en el cronograma. 8.3. De un participante. 9. Filtros asociados a la lista de participantes, por ejemplo: 9.1. Quienes han pagado (participantes confirmados). 9.2. Quienes faltan por pagar. 9.3. Asistentes al curso. 10. Envío de información a los participantes por correo electrónico. 11. Respaldo de datos. 12. Gestión de perfiles de usuario y acceso a funcionalidades según el perfil. Capítulo II. Marco Teórico y Antecedentes 8 CAPÍTULO II. Marco Teórico y Antecedentes La finalidad de este capítulo es presentar las bases conceptuales que sirvieron de fundamento para el análisis y desarrollo de este trabajo de investigación. 2.1. Bases Conceptuales Servidor Web Es un programa que gestiona cualquier aplicación en el lado del servidor realizando conexiones bidireccionales y/o unidireccionales y síncronas o asíncronas con el cliente generando una respuesta en cualquier lenguaje en el lado del cliente. El código recibido por el cliente suele ser compilado y ejecutado por un Navegador Web. Para la transmisión de datos se utiliza algún protocolo, el más usado es el protocolo HTTP1. (Ecured.cu, Servidor Web, s.f.) Arquitectura Cliente/Servidor La arquitectura cliente/servidor (ver Figura 4) es un modelo para el desarrollo de sistemas de información en el que las transacciones se dividen en procesos independientes que cooperan entre sí para intercambiar información, servicios o recursos. (Ecured.cu, Servidor Web, s.f.) En la manera de describir la forma de trabajo entre los clientes y los ordenadores se define:  Cliente: Es el ordenador que pide información a otro, mediante la aplicación de un programa llamado cliente. Este contacta con el servidor y da formato a la petición de la información y da formato a la respuesta.  Servidor: Es el ordenador que ofrece la información mediante la aplicación de un programa llamado servidor que recibe la información y la procesa y responde enviando la petición al cliente. 1 El Protocolo de Transferencia de Hipertexto (HTTP) es un protocolo de la capa de aplicación para la transmisión de documentos hipermedia. (Mozilla Developer Network, s.f.) http://en.wikipedia.org/wiki/Application_Layer http://en.wikipedia.org/wiki/Application_Layer Capítulo II. Marco Teórico y Antecedentes 9 Figura 4 - Diagrama Cliente Servidor FUENTE: (Ecured, 2016) Marco de Trabajo Un Marco de Trabajo (Framework) es una estructura conceptual y tecnológica de soporte definida, normalmente con artefactos o módulos de software concretos, en base a la cual otro proyecto de software puede ser organizado y desarrollado. Típicamente, puede incluir soporte de programas, librerías y un lenguaje interpretado entre otros programas para ayudar a desarrollar y unir los diferentes componentes de un proyecto. Representa una arquitectura de software que modela las relaciones generales de las entidades del dominio. Provee una estructura y una metodología de trabajo la cual extiende o utiliza las aplicaciones del dominio. (EcuRed, Framework, s.f.) Sistema de Gestión de Base de Datos Un Sistema Manejador de Base de Datos (SMBD) consiste en una colección de datos interrelacionados y un conjunto de programas para acceder a dichos datos y su objetivo principal es proporcionar una forma de almacenar y recuperar la información de una base de datos de manera que sea tanto práctica como eficiente. (Silberschatz A., 2002) Modelo Vista Controlador El patrón de arquitectura MVC (Modelo Vista Controlador) es un patrón que define la organización independiente del Modelo (Objetos de Negocio), la Vista (interfaz con el usuario u otro sistema) y el Controlador (controlador del flujo de la aplicación). (Ver Figura 5) Capítulo II. Marco Teórico y Antecedentes 10 De esta forma, se divide el sistema en tres capas donde tenemos la encapsulación de los datos, la interfaz o vista por otro y por último la lógica interna o controlador. (Gomez, s.f.) El patrón de arquitectura "modelo vista controlador", es una filosofía de diseño de aplicaciones, compuesta por:  Modelo: o Contiene el núcleo de la funcionalidad (dominio) de la aplicación. o Encapsula el estado de la aplicación. o Es independiente del Controlador y la Vista  Vista: o Es la presentación del Modelo. o Puede acceder al Modelo pero nunca cambiar su estado. o Puede ser notificada cuando hay un cambio de estado en el Modelo.  Controlador: o Reacciona a la petición del Cliente, ejecutando la acción adecuada y creando el modelo pertinente. Figura 5 - Diagrama Modelo Vista Controlador FUENTE: (FROAC, 2012) Capítulo II. Marco Teórico y Antecedentes 11 Sistema de Control de Versiones El control de versiones es un sistema que registra los cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo, de modo que puedas recuperar versiones específicas más adelante. Permite revertir archivos a un estado anterior, revertir el proyecto entero a un estado anterior, comparar cambios a lo largo del tiempo, ver quién modificó por última vez algo que puede estar causando un problema, quién introdujo un error y cuándo. (Git - Acerca del control de versiones, s.f.) Plugin En informática, un complemento o plugin, es una aplicación (o programa informático) que se relaciones con otra para agregarle una funcionalidad nueva y generalmente muy específica. 2.2. Tecnologías del lado del cliente Lenguaje de Marcado de Hipertexto HTML HTML, que significa Lenguaje de Marcado para Hipertextos (HyperText Markup Language) es el elemento de construcción más básico de una página web y se usa para crear y representar visualmente una página web. Determina el contenido de la página web, pero no su funcionalidad. HTML es el lenguaje que describe la estructura y el contenido semántico de un documento web. El contenido dentro de una página web es etiquetado con elementos HTML como <img>, <title>, <p>, <div>, y así sucesivamente. Estos elementos conforman los bloques de construcción de un sitio web. (Mozilla Developer Network, s.f.) Hojas de Estilo en Cascada CSS Hojas de Estilo en Cascada CSS (Cascading Style Sheets) es el lenguaje utilizado para describir la presentación de documentos HTML. CSS describe como debe ser desplegado el elemento estructurado en pantalla, en papel, hablado o en otros medios. (Mozilla Developer Network, s.f.) JavaScript JavaScript (a veces abreviado como JS) es un lenguaje ligero e interpretado, orientado a objetos con funciones de primera clase, más conocido como el lenguaje de script para páginas web, pero también usado en muchos entornos sin navegador. Es un lenguaje script multi-paradigma, basado en prototipos, dinámico, soporta estilos de programación funcional, orientada a objetos e imperativa. (Mozilla Developer Network, s.f.) Capítulo II. Marco Teórico y Antecedentes 12 jQuery jQuery es una librería de JavaScript rápida, pequeña y con una gran cantidad de funcionalidades. Permite simplificar la manipulación y navegación de documentos HTML, manejo de eventos, y agregar interacción con la técnica AJAX2 a través del uso de una API3 que es compatible con los navegadores más utilizados. (JQuery, s.f.) Bootstrap Bootstrap es un framework muy popular de HTML, CSS, and JavaScript para el desarrollo de sitios web adaptables a distintos dispositivos. Bootstrap logra que el proceso de desarrollo sea más rápido y sencillo, gracias al uso de sus clases de CSS predefinidas. (Otto, s.f.) AdminLTE AdminLTE es un panel de administración para Bootstrap creado por el estudio Almsaeed. Es una solución de código abierto basada en un diseño modular que permite una construcción y personalización sencillas. La idea es que cada uno de estos elementos sea un plugin a través del cual uno va creando la interfaz de usuario tanto por la parte de front-end como de back-end. AdminLTE se puede descargar en una versión ya lista, con el código compilado para su subida directamente a producción, o bien la descarga del zip con el código fuente por si el desarrollador quiere hacer algunos cambios previos en la propia plantilla. (Plantillas para paneles de administración desarrolladas con el ‘framework’ Bootstrap, 2017) 2.3. Tecnologías del lado del servidor MySQL MySQL es un Sistema Manejador de Base de Datos Relacional, de código abierto, multihilo y multiusuario. Fue creado por la compañía sueca MySQL AB en 1995, por los desarrolladores Michael Widenius, David Axmark y Allan Larsson, con el objetivo principal de ofrecer opciones eficientes y fiables de gestión de datos para usuarios domésticos y profesionales. (Chacaltana, 2014) 2 JavaScript Asíncrono y XML (AJAX) no es una tecnología por sí misma, es un término que describe un nuevo modo de utilizar conjuntamente varias tecnologías existentes. Permite que las aplicaciones web capaces de actualizarse continuamente sin tener que volver a cargar la página completa. 3 La interfaz de programación de aplicaciones, abreviada como API (del inglés: Application Programming Interface), es el conjunto de subrutinas, funciones y procedimientos (o métodos, en la programación orientada a objetos) que ofrece cierta biblioteca para ser utilizado por otro software como una capa de abstracción. Capítulo II. Marco Teórico y Antecedentes 13 La propiedad de MySQL ha hecho dos (2) transiciones desde los inicios del producto, la primera fue en el 2008, cuando Sun Microsystems adquirió MySQL AB, y la segunda en el 2010, cuando Oracle compró Sun Microsystems. (Chacaltana, 2014) MySQL está distribuido bajo la Licencia Pública General (GPL) de GNU, es decir, que obliga a que la distribución de cualquier producto derivado (aplicación) se haga bajo la misma licencia. Si un desarrollador desea incorporar MySQL en su producto pero desea distribuirlo bajo otra licencia que no sea la antes mencionada, deberá adquirir una licencia propietaria. PHP PHP (acrónimo de "PHP: Hypertext Preprocessor") es un lenguaje de 'scripting' de propósito general y de código abierto que está especialmente pensado para el desarrollo web y que puede ser embebido en páginas HTML. Su sintaxis recurre a C, Java y Perl, siendo así sencillo de aprender. El objetivo principal de este lenguaje es permitir a los desarrolladores web escribir dinámica y rápidamente páginas web generadas. (PHP Group, s.f.) Yii Creado por Qiang Xue en 2008, Yii es un framework para desarrollar aplicaciones seguras, rápidas y de alto rendimiento. Permite la integración fácil con jQuery, lo que permite a los desarrolladores del lado del cliente adaptar el framework de una manera fácil. Yii, igual que Symphony, utiliza componentes para permitir del desarrollo rápido de aplicaciones. Yii para hacer una correspondencia entre los objetos del modelo con las tablas de la base de datos, hace uso de ActiveRecord-PHP un ORM basado en el ActiveRecord de Ruby on Rails, el cual hace bastante sencilla la manipulación de la base de datos ya que permite manipular las tablas de la misma como si fueran objetos, esto posibilita el uso de las características propias de la programación orientada a objetos como herencia y polimorfismo. (Intro yii - Yii2 Framework, 2016) Laravel Es un framework de aplicaciones web que posee sintaxis expresiva y elegante. Laravel trata de facilitar el proceso de desarrollo facilitando las tareas comunes usadas en la mayoría de los proyectos web, como autenticación, enrutamiento, sesiones y almacenamiento en caché. (Laravel, s.f.) Capítulo II. Marco Teórico y Antecedentes 14 2.4. Herramientas de Apoyo al desarrollo de Software Gulp Gulp es un sistema de construcción que permite automatizar tareas comunes de desarrollo, tales como la simplificación de código JavaScript, recarga del navegador, compresión de imágenes, validación de sintaxis de código y un sin fin de tareas más. Está construido con JavaScript, funciona sobre Node.js y es de código abierto. (Sanchez, 2014) Git Git es un sistema de control de versiones gratis y de código abierto, diseñado para manejar todo desde pequeños a grandes proyectos con velocidad y eficiencia. (Git-scm, s.f.) Mysql Workbench MySQL Workbench es una herramienta visual de diseño de bases de datos para los arquitectos, desarrolladores y administradores de base de datos. MySQL Workbench ofrece modelado de datos, desarrollo de SQL y herramientas de administración integrales para la configuración del servidor, administración de usuarios, copia de seguridad, entre otras. (MySQL, s.f.) 2.3 Antecedentes 2.3.1 Coursera Coursera es una plataforma de educación virtual nacida en octubre de 2011 y desarrollada por académicos de la Universidad de Stanford con el fin de brindar una oferta de educación masiva a la población, con programas en diferentes idiomas. Coursera ofrece cursos, tanto gratuitos como de pago, sobre temas variados a niveles universitarios, pero abiertos a todos los sectores de la población. Fue fundada por los profesores en ciencias computacionales Andrew Ng y Daphne Koller en octubre de 2011 con el lanzamiento de dos cursos gratuitos, "Aprendizaje automático" e "Introducción a las bases de datos". Actualmente Coursera cuenta con más de 62 universidades alrededor del mundo entre ellas la Universidad de Michigan, Princeton, Universidad Autónoma de Barcelona y Universidad Nacional Autónoma de México. Gracias a tantas alianzas esta plataforma ofrece cientos de cursos. Coursera ofrece una gran variedad de cursos que son divididos en catálogos, en donde se pueden encontrar una gran variedad de programas de especialización (ver Figura 6), Estos programas son conformados por curso con tópicos específicos (ver Figura 7) los cuales tienen una cantidad ilimitada de cupos por el hecho de que Capítulo II. Marco Teórico y Antecedentes 15 son a distancia, para poder inscribirse bastan con registrarse en la página y realizar un pago en línea por el curso o programa de especialización (ver Figura 8). Figura 6 - Catálogo de Cursos y Programas especializados FUENTE: (Coursera, 2016) Capítulo II. Marco Teórico y Antecedentes 16 Figura 7 - Interfaz de Cursos de una Aplicación FUENTE: (Coursera, 2016) Capítulo II. Marco Teórico y Antecedentes 17 Figura 8 - Interfaz de pago de un Curso FUENTE: (Coursera, 2016) Capítulo II. Marco Teórico y Antecedentes 18 2.3.2 Escuela Web Escuela Web es un centro de formación especializado en diseño y desarrollo web, este centro tiene dos modalidades, clases presenciales y en línea, cuenta con distintos especialistas en el ámbito de la web y otorgan certificados luego de finalizar cada curso. Es importante destacar que poseen una página web muy sofisticada que les permite ofrecer sus cursos. Figura 9 - Interfaz de detalles de un Curso FUENTE: (Escuela Web, 2016) Escuela Web cuenta con un menú de navegación con el cual se pueden ver los cursos que ofrecen en esta institución, los mismos tienen una vista en la cual se pueden observar los detalles y características asociadas a cada curso (ver Figura 9). Para poder inscribirse en un curso los usuarios deben estar registrados, para ello la página posee un formulario de registro simple en donde se debe colocar información básica (ver Figura 10), con esto los usuarios son identificados y contactados a través de correos electrónicos con información de su interés asociada a los cursos (ver Figura 11). Capítulo II. Marco Teórico y Antecedentes 19 Figura 10 - Interfaz de inscripción FUENTE: (Escuela Web, 2016) Figura 11 - Correo de bienvenida FUENTE: (Escuela Web, 2016) Capítulo II. Marco Teórico y Antecedentes 20 Las vistas de Escuela Web, tienen un diseño limpio que permite los usuarios navegar con bastante facilidad a través del sito, aquellos que están interesados en realizar un curso deben navegar a la sección donde se ofrecen los próximos (Figura 12). Una vez que se encuentre un curso de interés se debe oprimir el botón de “Inscribirse”, con esto se reserva un cupo, sin embargo, hasta no confirmar el pago (ver Error! Reference source not found.), el usuario no podrá finalizar su inscripción y su cupo no estará asegurado. Figura 12 - Interfaz de próximos Cursos Fuente: (Escuela Web, 2016) Capítulo II. Marco Teórico y Antecedentes 21 Figura 13 - Interfaz de registro de pago FUENTE: (Escuela Web, 2016) 2.3.3 Sistema actual de gestión de cursos del CENEAC En esta sección se describen algunas interfaces del sistema actual utilizado por el CENEAC para le gestión de cursos, cronogramas, reservaciones y reportes. El sistema en uso no presenta mucho énfasis en el diseño de las interfaces ni en la experiencia de usuario según los estándares de usabilidad y accesibilidad establecidos en el diseño web actual, su foco son las funcionalidades que ayudan a realizar tareas concretas de manera fácil. El proceso seguido en esta aplicación arranca con el inicio de sesión (ver Figura 14), luego de lo cual vemos la vista principal (ver Figura 15), en la barra de navegación en el lado izquierdo encontramos las tres secciones principales (Cursos, Participantes y Reportes) y sus subsecciones. Capítulo II. Marco Teórico y Antecedentes 22 Figura 14 - Interfaz de inicio de sesión FUENTE: (CENEAC, 2016) Figura 15 - Interfaz principal del Sistema FUENTE: (CENEAC, 2016) En interfaces como la de “Agregar cursos al Cronograma” (ver Figura 16), en resoluciones de pantalla grandes el contenido del área edición se monta sobre la barra lateral, dificultando la navegación. Capítulo II. Marco Teórico y Antecedentes 23 Figura 16 - Interfaz de agregar cursos al cronograma FUENTE: (CENEAC, 2016) En la interfaz de “Modificar Cronograma” (ver Figura 17), vemos una tabla con varias columnas de información relevante y un checkbox al inicio de cada fila, al seleccionar uno nos permite navegar a la pantalla para editar los detalles del cronograma de un curso en específico. Este patrón es usando en varias interfaces del sistema. Figura 17 - Interfaz de modificar Cronograma FUENTE: (CENEAC, 2016) Capítulo II. Marco Teórico y Antecedentes 24 En la sección de reportes hay varias interfaces, por ejemplo la de “Seguimiento de Cotizaciones” (ver Figura 18), que al acceder muestra errores de base de datos. Figura 18 - Interfaz de Seguimiento de Cotizaciones FUENTE: (CENEAC, 2016) Una vez estudiados los antecedentes, se destacan los siguientes aspectos que serán tomados en cuenta a la hora de desarrollar la aplicación:  La manera en que está estructurada la información en Escuela Web será usada como base para el diseño del Sitio Público.  Se estudió el flujo de inscripción de Escuela Web, incluyendo el reporte de pagos y envío de información por correo electrónico.  Estudiar la manera en que se realizan algunos procesos en el Módulo de Gestión del CENEAC fue de gran ayuda para entender la manera en que se realizan algunos flujos y dónde pueden ser mejorados.  Del Módulo de Gestión se tomará patrones de diseño como mostrar información en tablas y tener un menú lateral. Capítulo III. Marco Metodológico 25 CAPÍTULO III. Marco Metodológico Para evitar que el desarrollo de software se convierta en una actividad caótica es conveniente hacer uso de una metodología de desarrollo, para asegurar el éxito del mismo, la metodología de desarrollo nos provee de una dirección a seguir para la producción de un software completo y de calidad. En este capítulo se describe la metodología de desarrollo tomando el enfoque hacia metodologías ágiles, en particular la metodología de desarrollo Scrum a fin de dar cumplimiento al desarrollo de la aplicación. 3.1. Metodologías Ágiles Las metodologías ágiles son un conjunto de métodos de Ingeniería del Software, que se basan en el desarrollo iterativo e incremental, teniendo presente cambios y respondiendo a los mismos, ya que al final de cada iteración se evalúan las prioridades del proyecto en aras de cumplir los objetivos, durante todo el proceso de desarrollo se cuenta con un grupo de desarrolladores auto-organizados y multidisciplinares. En la creación del modelado ágil se establecieron los siguientes valores:  Individuos e interacciones sobre procesos y herramientas.  Software funcionando sobre documentación extensiva.  Colaboración con el cliente sobre negociación contractual.  Respuesta ante el cambio sobre seguir un plan. Los valores anteriores inspiran doce principios que son características que diferencian un proceso ágil de uno tradicional. Los dos primeros principios son generales y resumen gran parte del espíritu ágil. El resto tienen que ver con el proceso a seguir y con el equipo de desarrollo, en cuanto metas a seguir y organización del mismo. Los principios son: 1. La prioridad es satisfacer al cliente mediante tempranas y continuas entregas de software que le aporten un valor. 2. Dar la bienvenida a los cambios. Se capturan los cambios para que el cliente tenga una ventaja competitiva. 3. Entregar frecuentemente software que funcione, la frecuencia va desde un par de semanas a un par de meses, con el menor intervalo de tiempo posible entre entregas. 4. La gente del negocio y los desarrolladores deben trabajar juntos a lo largo del proyecto. Capítulo III. Marco Metodológico 26 5. Construir el proyecto en torno a individuos motivados. Darles el entorno y el apoyo que necesitan y confiar en ellos para conseguir la finalización del trabajo. 6. El diálogo cara a cara, como el método más eficiente y efectivo para comunicar información dentro de un equipo de desarrollo. 7. El software que funciona es la medida principal de progreso. 8. Los procesos ágiles promueven un desarrollo sostenible. Los promotores, desarrolladores y usuarios deberían ser capaces de mantener una paz constante. 9. La atención continua a la calidad técnica y al buen diseño mejora la agilidad. 10.La simplicidad es esencial. 11.Las mejores arquitecturas, requisitos y diseños surgen de los equipos organizados por sí mismos. 12.En intervalos regulares, el equipo reflexiona respecto a cómo llegar a ser más efectivo, y según esto ajusta su comportamiento. Varias metodologías encajan bajo el estandarte de ágil, todas ellas comparten muchas características y también hay algunas diferencias significativas. De estas, se seleccionó la metodología de desarrollo Scrum. 3.2. Scrum Es una metodología ágil y flexible de gestión de proyectos cuyo objetivo primordial es desarrollar primero las funcionalidades de mayor importancia para el cliente y elevar al máximo la productividad de un equipo, fue desarrollada por Jeff Sutherland y elaborada más formalmente por Ken Schwaber. En Scrum se realizan entregas parciales y regulares del producto final, priorizadas por el beneficio que aportan al receptor del proyecto. Por ello, Scrum está especialmente indicado para proyectos en entornos complejos, donde se necesita obtener resultados pronto, donde los requisitos son cambiantes o poco definidos, donde la innovación, la competitividad, la flexibilidad y la productividad son fundamentales. (Proyectos Ágiles, 2015) 3.2.1. Roles El equipo Scrum está compuesto por un Dueño de Producto, el Equipo de Desarrollo y un Scrum Master. Tiene como características principales ser un equipo auto-organizado y multifuncional, no son dirigidos por personas externas las decisiones son tomadas por el equipo, al ser multifuncional el equipo cuenta con las competencias necesarias para llevar a cabo el trabajo sin depender de otras personas que no son parte del equipo. El modelo de equipo en Scrum está diseñado para optimizar la flexibilidad, la creatividad y la productividad (Schwaber, 2013). Capítulo III. Marco Metodológico 27 Dueño del Producto El Dueño de Producto es la única persona responsable de gestionar la Lista del Producto. La gestión de la Lista del Producto incluye:  Expresar claramente los elementos de la Lista del Producto.  Ordenar los elementos en la Lista del Producto para alcanzar los objetivos de la mejor manera posible.  Optimizar el valor del trabajo desempeñado por el Equipo de Desarrollo.  Asegurar que la Lista del Producto es visible, transparente y clara para todos, y que muestra aquello en lo que el equipo trabajará a continuación.  Asegurar que el Equipo de Desarrollo entiende los elementos de la Lista del Producto al nivel necesario.  Revisa junto con otros involucrados el producto final en cada Sprint. El Dueño del Producto podría hacer el trabajo anterior, o delegarlo en el Equipo de Desarrollo. Sin embargo, en ambos casos el Dueño de Producto sigue siendo el responsable de dicho trabajo. Equipo de Desarrollo El Equipo de Desarrollo consiste en los profesionales que desempeñan el trabajo para poder entregar un Incremento de producto que potencialmente se pueda poner en producción, al final de cada Sprint. Los Equipos de Desarrollo tienen las siguientes características:  Son auto-organizados. Nadie (ni siquiera el Scrum Master) indica al Equipo de Desarrollo cómo convertir elementos de la Lista del Producto en Incrementos.  Los Equipos de Desarrollo son multifuncionales, contando como equipo con todas las habilidades necesarias para crear un Incremento de producto.  Scrum no reconoce sub-equipos en los equipos de desarrollo.  Los Miembros individuales del Equipo de Desarrollo pueden tener habilidades especializadas y áreas en las que estén más enfocados, pero la responsabilidad recae en el Equipo de Desarrollo como un todo. El tamaño del Equipo de Desarrollo es lo suficientemente pequeño como para permanecer ágil y lo suficientemente grande como para completar una cantidad de trabajo significativa, el tamaño ideal puede variar entre 4 a 9 personas dependiendo de la carga que se tenga en la Lista del Producto (Schwaber, 2013). Scrum Master Los Scrum Masters se aseguran de que el Equipo Scrum trabaja ajustándose a la teoría, prácticas y reglas de Scrum. Es un líder que está para ayudar a los otros miembros del equipo a desempeñar sus actividades de una manera más óptima. Es ideal que su perfil sea un balance entre desarrollador y gerente, es el moderador de las ceremonias de Scrum, puede ayudar al Dueño de Producto de Capítulo III. Marco Metodológico 28 varias formas como por ejemplo gestionando la Lista del Producto de una manera más efectiva o haciendo que los elementos de la Lista sean más claros. De la misma manera el Scrum Master debe guiar al Equipo de Desarrollo, eliminar los impedimentos que tengan los mismos para que sus productos sean de alto valor (Schwaber, 2013). 3.2.2. Artefactos Lista de Producto (Product Backlog) Es el plan que contiene las metas que se deben cumplir en el desarrollo del proyecto, es creado por el dueño del producto y es representado a través de una lista con todos los requerimientos iniciales del cliente, también describe el funcionamiento del negocio. (Schwaber, 2013) Historias de Usuario Son los requerimientos del cliente, estas historias tienen puntos de dificultad, puntos de importancia y puntos de aceptación, cuando se planifica un sprint los miembros del equipo de desarrollo toman estas historias de usuario y crean las subtareas que implican el desarrollo de la misma. Lista de Requerimientos Pendientes (Sprint Backlog) La Lista de Pendientes del Sprint es el conjunto de requerimientos de la Lista de Producto seleccionados para el Sprint, más un plan para entregar el Incremento de producto y conseguir el Objetivo del Sprint. La Lista de Pendientes del Sprint muestra todo el trabajo que el Equipo de Desarrollo identifica como necesario para alcanzar el Objetivo del Sprint, esta lista puede cambiar durante el Sprint, esto ocurre a medida que el Equipo de Desarrollo trabaja sobre el plan y aprende más acerca del trabajo necesario para conseguir el Objetivo del Sprint (Schwaber, 2013). Tablero Scrum Es un tablero usado para poder visualizar con transparencia el trabajo que se hace en el proyecto, ayuda a enfocarse y observar el flujo de trabajo, es una herramienta muy eficaz para mejorar la productividad del equipo. 3.2.3. Eventos Sprints Según (Schwaber, 2013) un Sprint se puede ver como un pequeño proyecto el cual debe lograr un objetivo en específico, este posee un plan para saber cómo se va a construir y tiene un tiempo estimado para su desarrollo no mayor a un mes. Cuando se finaliza un Sprint se crea un incremento de producto, utilizable y potencialmente desplegable, cada Sprint comienza inmediatamente después de la finalización del Sprint anterior. Capítulo III. Marco Metodológico 29 Los Sprints provienen de la Reunión de Planificación del Sprint, y contemplan reuniones diarias (Daily Scrums), trabajo de desarrollo, Revisión del Sprint (Sprint Review), y Retrospectiva del Sprint (Sprint Retrospective). Durante el Sprint:  No se realizan cambios que puedan afectar al Objetivo del Sprint.  Los objetivos de calidad no disminuyen.  El alcance puede ser clarificado y renegociado entre el Dueño de Producto y el Equipo de Desarrollo.  Su duración son de 1 a 4 semanas.  Todos duran la misma cantidad de tiempo. El Objetivo del Sprint es una meta establecida para el mismo, que puede ser alcanzada mediante la implementación de elementos de la Lista de Producto. Es creado durante la reunión de Planificación del Sprint. Los requerimientos seleccionados de la Lista del Producto ofrecen una funcionalidad coherente. A medida que el Equipo de Desarrollo trabaja, se mantiene el objetivo del Sprint en mente (Schwaber, 2013). Un Incremento es la suma de todos los requerimientos de la Lista de Producto completados durante un Sprint. Al final de un Sprint, el nuevo Incremento debe estar “Terminado”, lo cual significa que está en condiciones de ser utilizado. Reunión Diaria La reunión diaria o Daily Scrum se realiza con el fin de mostrar los avances del Sprint, su duración no debería pasar de 15 minutos, su propósito es tener una retroalimentación sobre las tareas en el Sprint y los obstáculos que se presentan en las mismas. En esta reunión se responden preguntas como: ¿Qué has hecho desde el último encuentro? ¿Qué obstáculos hay para cumplir la meta? ¿Qué harás antes del próximo encuentro? Las reuniones diarias mejoran la comunicación, eliminan la necesidad de mantener otras reuniones, identifican y eliminan impedimentos relativos al desarrollo, resaltan y promueven la toma de decisiones rápida, y mejoran el nivel de conocimiento del Equipo de Desarrollo (Schwaber, 2013). Reunión de Planificación de Sprint El trabajo a realizar durante el Sprint se planifica en la Reunión de Planificación de Sprint. Este plan se crea mediante el trabajo colaborativo del Equipo Scrum completo. La Reunión de Planificación de Sprint tiene un máximo de duración de ocho horas para un Sprint de un mes. Para Sprints más cortos, el evento es usualmente toma menos tiempo. El Scrum Master se asegura de que el evento se lleve a cabo y Capítulo III. Marco Metodológico 30 que los asistentes entiendan su propósito. El Scrum Master enseña al Equipo Scrum a mantenerse dentro del bloque de tiempo. El Equipo de Desarrollo trabaja para proyectar la funcionalidad que se desarrollará durante el Sprint. El Dueño de Producto discute el objetivo que el Sprint debería lograr y los elementos de la Lista de Producto que, si se completan en el Sprint, se deberían lograr, el equipo Scrum completo colabora en el entendimiento del trabajo del Sprint, una vez que se aclaren las funcionalidades a desarrollar se elabora el Objetivo del Sprint (Sprint Goal) (Schwaber, 2013). Revisión de Sprint Al final del Sprint se lleva a cabo una Revisión para inspeccionar el incremento sobre el proyecto y adaptar la lista de producto si es necesario. Durante la Revisión de Sprint, el Equipo Scrum comunica lo que se hizo durante el mismo. El Dueño de Producto explica qué requerimientos de la Lista de Producto se han terminado y cuáles no. El Equipo de Desarrollo habla acerca de qué fue bien durante el Sprint, qué problemas aparecieron y cómo fueron resueltos esos problemas. El grupo completo colabora acerca de qué hacer a continuación, de modo que la Revisión del Sprint proporcione información de entrada valiosa para Reuniones de Planificación de Sprints subsiguientes (Schwaber, 2013). Retrospectiva de Sprint Según (Schwaber, 2013) la Retrospectiva de Sprint es una oportunidad para el Equipo Scrum de inspeccionarse a sí mismo y crear un plan de mejoras que sean abordadas durante el siguiente Sprint. La Retrospectiva de Sprint tiene lugar después de la Revisión de Sprint y antes de la siguiente Reunión de Planificación de Sprint, su propósito es:  Inspeccionar cómo fue el último Sprint en cuanto a relaciones, procesos y herramientas.  Identificar y ordenar los requerimientos más importantes que salieron bien y las posibles mejoras. Crear un plan para implementar las mejoras a la forma en la que el Equipo Scrum desempeña su trabajo. 3.3. Justificación para la selección de Scrum Esta metodología fue seleccionada porque es sencilla de usar, ofrece gran valor añadido sin demasiado esfuerzo, centrándose en la productividad a través de iteraciones cortas. Manejar el concepto de entregas parciales es bastante beneficioso dado que se obtienen comentarios y observaciones por parte del cliente, los cuales son importantes tener en cuenta para el correcto desarrollo del proyecto. Capítulo III. Marco Metodológico 31 Scrum está especialmente indicado para proyectos en entornos complejos, que requieren ser hechos en menor tiempo, donde los requisitos del cliente son cambiantes y donde la innovación, la competitividad y la productividad son fundamentales. 3.4. Adaptación de la metodología Para el desarrollo de esta aplicación se adaptó Scrum de la siguiente manera:  Duración de cada Sprint - 2 semanas.  Planeación de cada Sprint – 1 hora al inicio de cada Sprint. Aquí se toma cada tarea del Sprint Backlog y se subdivide en subtareas puntuales y fáciles de completar.  Reunión diaria – 10 minutos. Dado a que el equipo es de una sola persona, se utiliza este tiempo para organizar las tareas del día.  Revisión del sprint – 10 minutos al final de cada sprint. Se revisa las tareas que se han hecho y si alguna queda por completar se mueve al próximo sprint.  Pruebas – 1 día. El último día de cada sprint se realizan pruebas funcionales sobre lo desarrollado durante el sprint.  Tablero – Se utilizó la plataforma Trello4 para armar un tablero con la finalidad de llevar el control del estado de las tareas durante cada Sprint. El tablero cuenta con las siguientes columnas: o To Do: Lista de tareas por hacer. o In Progress: Tarea en la que se está trabajando. o To Test: Tareas que fueron completadas pero no han sido probadas. El día de pruebas si se llega a encontrar un error se mueve la tarea de vuelta a To Do. o Done: Taras completadas y probadas.  Incremento del Producto – Al final de cada sprint se subirá el código al servidor de pruebas. 4 Tomado de https://trello.com/ Capítulo IV. Marco Aplicativo 32 CAPÍTULO IV. Marco Aplicativo En esta sección de describe como fue utilizada la metodología de desarrollo y sus principales artefactos para guiar el proceso de creación de la aplicación planteada como solución a las necesidades de gestión de información de las actividades de extensión del CENEAC, especialmente, las asociadas a formación de talento humano. La aplicación desarrollada permite la planificación de cursos y diplomados, así como la gestión de la información académica y administrativa asociada a estas actividades de formación de talento humano, de sus participantes e instructores. 4.1. Principales Requerimientos 1. Gestionar electrónicamente la lista de interesados en un curso: 1.1. Crear, agregar o eliminar asistente. 1.2. Asociar una lista con un curso del cronograma, salón y con un instructor(es). 1.3. Imprimir la lista de asistencia a pasar en los cursos. 1.4. Duplicar una lista y modificarla, esto debido a que muchos participantes de un curso, repiten en el nivel siguiente. 1.5. Exportar a formato de hoja de cálculo (Excel), a formato de documento de texto (Word), a formato de documento portable (.pdf). 2. Registrar el pago del participante: 2.1. Información del pago: Fecha, modalidad (pago en oficina con efectivo, tarjeta de crédito o de débito, transferencia), número de operación/transferencia, monto, quien lo realiza, banco, comentarios, si el pago es completo o parcial. 2.2. Fecha de posible pago. 2.3. Comentarios. 3. Gestionar información del participante, datos personales, confirmar asistencia, registrar pago. 4. Gestionar información de un curso y del cronograma de cursos: 4.1. Agregar / eliminar. 4.2. Modificar estado: confirmar inicio / suspender / reprogramar curso al cronograma. 4.3. Registrar comentario asociado al cambio de estado del curso. 5. Gestionar instructor(es) por curso. 6. Crear lista final de los asistentes para elaboración de los certificados. 7. Crear listas de participantes que requieren facturas personalizadas. Capítulo IV. Marco Aplicativo 33 8. Búsquedas o consultas asociadas a: 8.1. Un curso (ficha descriptiva). 8.2. Una fecha específica de un curso en el cronograma. 8.3. De un participante. 9. Filtros asociados a la lista de participantes, por ejemplo: 9.1. Quienes han pagado (participantes confirmados). 9.2. Quienes faltan por pagar. 9.3. Asistentes al curso. 10. Envío de información a los participantes por correo electrónico. 11. Respaldo de datos. 12. Gestión de perfiles de usuario y acceso a funcionalidades según el perfil. 4.2. Plataforma utilizada para el desarrollo Para el desarrollo de la aplicación fue usada una laptop con las siguientes características:  Hardware: o Procesador: Intel Core i3-2400 3.10Ghz o Memoria RAM: 8GB.  Software: o Sistema operativo: Fedora 24 o Sistema de control de versiones: Git con Gikraken o Editor de texto: Vistual Studio Code 4.3. Plataforma necesaria para utilizar la aplicación Para poder utilizar la aplicación es necesario contar con una PC que tenga acceso a Internet. 4.4. Selección de las tecnologías Para este trabajo especial de grado se seleccionaron las siguientes tecnologías:  Gestor de Base de Datos: MySQL.  Lenguaje de Programación del lado del servidor: PHP.  Marcos de trabajo del lado del servidor: Laravel y Yii2.  Lenguaje de Programación del lado del cliente: JavaScript.  Librerías de Javascript: jQuery.  Framework CSS: Twitter Bootstrap.  Plantilla HTML: AdminLTE. Capítulo IV. Marco Aplicativo 34 Yii2 cuenta con generación de código, por cada tabla en base de datos, genera modelo, controlador y además vistas y funcionalidades asociadas a las acciones de lectura, creación, borrado y actualización. En los modelos y las vistas, también genera las relaciones entre las tablas. El módulo de gestión de información es una aplicación que requiere muchas funciones básicas de interacción con la base de datos sobre cada modelo equivalente a cada tabla, además de la fácil creación roles y permisos con su control de acceso correspondiente. Usando el marco de trabajo Yii2 se pueden cubrir la mayoría de estos requerimientos, si además incorporamos una plantilla de estilos como AdminLte, eliminaríamos la necesidad de tener un diseño para la aplicación, ya que ésta se encarga de estandarizar todos los elementos gráficos. El sitio público además de tener ciertas funcionalidades puntuales que pueden realizar los participantes (preinscripción, interesarse en un curso y notificar pagos), necesita mostrar mucha información generada en el módulo de gestión. El marco de trabajo Laravel además de ser muy fácil de usar y aprender, cuenta con un motor de plantillas llamado Blade, que además de permitir la creación de plantillas reusables, permite mostrar información traída de base de datos de una manera muy fácil. 4.5. Aplicación de la metodología Scrum 4.5.1. Pila del Producto A continuación en la Tabla 1 se muestra la Pila del Producto: Tabla 1 – Pila del Producto Actividades Implementación del esquema de Base de Datos Generación de modelos, vistas y controladores (Módulo de Gestión) Ajustes de vistas (Módulo de Gestión) Implementación de funcionalidad de importar preinscritos (Módulo de Gestión) Implementación de funcionalidad de respaldo de datos (Módulo de Gestión) Implementación de envío de correos (Módulo de Gestión) Implementación de exportación de listas a archivos (Módulo de Gestión) Implementación del flujo de postulación y aprobación de instructores (Módulo de Gestión) Implementación de roles, permisos y control de acceso (Módulo de Gestión) Generación de modelos y controladores (Sitio Público) Diseño de interfaces (Sitio Público) Creación interfaces (Sitio Público) Integración de interfaces (Sitio Público) Generación y adaptación de sistema de autenticación(Sitio Público) Implementación Perfil de Usuario (Sitio Público) Implementación Reporte de Pagos (Módulo de Gestión y Sitio Público) Implementación de funcionalidad de lista de interesados (Sitio Público) Implementación del flujo de preinscripción e inscripción (Sitio Público) Capítulo IV. Marco Aplicativo 35 4.5.2. Sprints A continuación se detallarán las tareas reflejadas en la Pila del Producto y en que Sprint se llevaron a cabo. Sprint 1 Implementación del esquema de Base de Datos En base a los requerimientos entregados y al módulo de gestión actual del CENEAC, se crearon 19 tablas. Se usó la herramienta MySQL Workbench para el modelado y la generación del diagrama que se muestra en la Figura 77 del Anexo 1. A continuación se describe brevemente cada tabla, destacando los elementos más importantes:  user: utilizada para almacenar a todos los usuarios (pertenecientes al CENEAC y Participantes).  auth_item: generadas por Yii2 a partir de migraciones, es utilizada para almacenar artículos (roles o permisos) de autorización.  auth_assignment: generadas por Yii2 a partir de migraciones, es utilizada para almacenar las asignaciones de elementos de autorización.  auth_item_child: generadas por Yii2 a partir de migraciones, es utilizada para almacenar jerarquía de posiciones de autorización.  auth_rule: generadas por Yii2 a partir de migraciones, es utilizada para almacenar reglas.  courses: utilizada para almacenar información pertinente a un curso.  categories: utilizada para almacenar las categorías a las que pertenecen los cursos.  schedules: utilizada para almacenar la información de un curso que será impartido en una fecha en específico. Esta es una de las tablas más importantes dado a que muchos flujos y acciones giran en torno a esta. De esta tabla podemos destacar el campo status, éste representa el estado en el que puede estar un curso en un momento en el tiempo. Los posibles estados son los siguientes: o No publicado: El cronograma ha sido creado pero no es visible al público. o Publicado: El cronograma es visible al público y permite preinscripciones a través del sitio público. o Suspendido: El cronograma será suspendido hasta tener nuevas fechas, no es visible al público. o En curso: El cronograma dio inicio a las clases, ya no es posible preinscribirse a través del sitio público. o Finalizado: Las clases finalizaron. Capítulo IV. Marco Aplicativo 36  instructors: tabla que relaciona un instructor con una entrada del cronograma.  postulates: tabla que relaciona un instructor que se postula para enseñar en una entrada del cronograma.  interest_lists: tabla que relaciona a un usuario con un curso en específico, representa el interés que tiene una persona en saber cuándo se va abrir una entrada en el cronograma de los cursos de su interés.  preregisters: tabla que relaciona a un usuario con una entrada del cronograma, representa a un participante que se preinscribió por el sitio público o fue preinscrito en las oficinas. De esta tabla podemos destacar el campo status, los posibles valores son 1 y 0, que representan si un usuario está inscrito o no en una entrada del cronograma.  registers: tabla que relaciona a un usuario con una entrada del cronograma, representa a un participante que luego de estar preinscrito, un administrador aprobó su preinscripción y ahora está inscrito en la entrada del cronograma.  payments: utilizada para almacenar los datos de pago de un usuario preinscrito.  backups: utilizada para llevar registro de los respaldos generados y poder mostrarlos en la interfaz correspondiente.  migration y migrations: son generadas por los marcos de trabajo para llevar registro de las migraciones.  password_resets: generada por Laravel para llevar control de los cambios de contraseña.  sessions: generada por Laravel para llevar control de las sesiones. Generación de modelos, vistas y controladores Para la generación inicial de código del Módulo de Gestión, se utilizó un módulo propio de Yii2 llamado Gii. Este módulo permite generar modelos, vistas, controladores, formas, módulos y extensiones. Sprint 2 Ajuste de vistas Luego de generar las vistas se realizaron ciertos ajustes, esto con la finalidad de mejorar la interfaz y la experiencia de usuario. A continuación de describen los ajustes realizados:  Se tradujeron todos los textos del inglés al español.  Se quitó información considerada como no relevante, así como etiquetas o columnas de las tablas que no le dan valor agregado a la aplicación.  Se les dio formato legible a las fechas. Capítulo IV. Marco Aplicativo 37  Se agregaron elementos de interfaz como barras de progreso para hacer saber al usuario que sus acciones están siendo procesadas y notificaciones para informar el resultado de éstas.  A elementos HTML de los formularios (input, select, checkbox, textarea), se les agregó estilos y funcionalidades con plugins para mejorar la experiencia de usuario. Implementación de funcionalidad de importar preinscritos Es muy probable que muchos participantes después de cursar el nivel de un curso quieran cursar el siguiente nivel. Es por esto que en la interfaz de creación de una entrada en el cronograma, se agregó la posibilidad de importar la lista de preinscrito de una entrada pasada. Sprint 3 Implementación de funcionalidad de respaldo de datos Para el respaldo de datos de utilizó un plugin de PHP llamado MySQLDump - PHP5, este genera un archivo de respaldo (.sql) que contiene todos los comandos necesarios para la creación de las tablas, sus relaciones y la inserción de datos en estas. Los archivos generados son guardados en una carpeta del sistema de archivos, a esta carpeta se le agregó un archivo de conFiguración para bloquear todas las peticiones HTTP, con esto logramos que no se pueda acceder a esta carpeta desde un navegador y sólo pueda ser accedida por el Servidor. Sprint 4 Implementación de envío de correos Para implementar esta funcionalidad se utilizó la extensión de Yii2 llamada Yii2-swiftmailer6. Esta extensión adapta la librería de PHP Swiftmailer7 para ser usada fácilmente con Yii2. Sprint 5 Implementación de exportación de listas a archivos Para implementar esta funcionalidad se utilizó el plugin Yii2-export8. Éste a cada lista de datos, que en el Módulo de Gestión son representadas en tablas, 5 https://github.com/ifsnop/mysqldump-php 6 https://github.com/yiisoft/yii2-swiftmailer 7 https://swiftmailer.symfony.com/ 8 https://github.com/kartik-v/yii2-export Capítulo IV. Marco Aplicativo 38 agrega una lista desplegable que permite exportar los datos de la tabla a archivos con los siguientes formatos: pdf, html, csv y excel. Implementación del flujo de postulación y aprobación de instructores Se desarrollaron los flujos necesarios para que:  Un Usuario pueda postularse como instructor a una entrada del cronograma.  Un Administrador pueda aprobar la postulación, asignando al Usuario como instructor del curso.  El instructor es notificado por correo electrónico que ha sido asignado. Sprint 6 Implementación de roles, permisos y control de acceso del Módulo de Gestión Para la implementación de roles y permisos, se utilizó un módulo provisto por el marco de trabajo Yii2 llamado RBAC, este proporciona un sencillo control de acceso centralizado. El uso de RBAC implica dos partes. La primera es la construcción de los datos de autorización de RBAC, y la segunda es el uso de los datos de autorización para llevar a cabo la comprobación de acceso en lugares donde se necesita. Un rol representa un conjunto de permisos (por ejemplo, la creación de un usuario, la actualización de un curso, envío de correos). Un rol puede ser asignado a uno o varios usuarios. Para comprobar si un usuario tiene un permiso específico, podemos comprobar si se asigna al usuario un rol que contiene ese permiso. Ambos roles y permisos pueden ser organizados en una jerarquía. Un rol puede consistir en otros roles y permisos, asimismo un permiso puede constar de otros permisos. Para la creación de las interfaces asociadas al manejo de roles, permisos y asignación, se usó el plugin yii2-admin9. Éste genera todas las interfaces de administración para RBAC. Sprint 7 En este sprint se comienza la creación del Sitio Público. Generación de Modelos y Controladores Se comenzó con la generación de modelos y controladores usando la consola de Laravel. En este módulo no interesa generar todos los modelos, así que se 9 https://github.com/mdmsoft/yii2-admin Capítulo IV. Marco Aplicativo 39 generaron los siguientes que son los de interés: Usuario, Lista de Interesados, Pagos, Preinscritos, Inscritos, Cursos, Categorías y Cronograma. Sprint 8 Diseño de interfaces Previo al inicio de le codificación de las interfaces se desarrollaron wireframes (maquetas de estructuras) para definir la forma en la que se distribuiría la información en ciertas páginas. (Ver de la Figura 79 a la Figura 82 en el Anexo 3) Creación de interfaces Se procedió a la codificación de las interfaces usando como guía los wireframes diseñados. Para el rápido desarrollo de la vistas, se utilizaron elementos predefinidos del marco de trabajo Bootstrap, como por ejemplo paneles, tablas, barra de navegación y la grilla para dar soporte a resoluciones tanto de dispositivos de escritorio como para dispositivos móviles. Sprint 9 Integración de las interfaces Como paso inicial para integrar las interfaces a la aplicación de Laravel se comenzó con la creación de los archivos usando el motor de plantillas Blade. Para no repetir código se sacaron los elementos en común de todas las interfaces: la barra de navegación y el pie de página. Éstos se crearon como componentes independientes en sus propios archivos. A partir de estos componentes se creó una plantilla base que contiene la siguiente estructura: barra de navegación, contenido que será agregado de manera dinámica dependiendo de la ruta y de último el pie de página (ver Figura 19) Capítulo IV. Marco Aplicativo 40 Figura 19 – Representación de la plantilla base Una vez creados todos los archivos relacionados a las vistas, se crearon las rutas asociadas. Generación y adaptación de sistema de autenticación La autenticación en Laravel es un proceso que nos permite comprobar que el usuario es quien dice ser, por medio de un nombre de usuario o una dirección de correo electrónico y una contraseña. En la terminal, en la carpeta del proyecto, se ejecutó el siguiente comando: php artisan make:auth Después de ejecutarlo se generaron las modificaciones en base de datos, vistas, rutas y controladores asociados a registro, recuperación de contraseña, inicio y cierre de sesión. Capítulo IV. Marco Aplicativo 41 Sprint 10 Implementación Perfil de Usuario Se desarrollaron los flujos necesarios para que un Usuario pueda modificar datos personales como nombre, apellido, dirección de correo electrónico y teléfonos. Implementación Reporte de Pagos Se desarrollaron los flujos necesarios para que un Usuario pueda reportar los datos de un pago como nombre del depositante, número de referencia, monto, fecha de pago, tipo de pago y nombre del banco. Sprint 11 Implementación de funcionalidad de lista de interesados Se desarrollaron los flujos necesarios para que un usuario pueda anotarse y salirse de la lista de interesados de un curso. Implementación del flujo de preinscripción e inscripción Se desarrollaron los flujos necesarios para que un usuario pueda anotarse y salirse de la lista de interesados de un curso. Capítulo IV. Marco Aplicativo 42 4.6. Descripción de la Aplicación 4.6.1. Principales funcionalidades Importar preinscritos Figura 20 - Diagrama de secuencia correspondiente al flujo de Importar Preinscritos En la Figura 20 se muestra con un diagrama de secuencia el flujo asociado a la funcionalidad de importar preinscritos. A continuación se mencionan los pasos más relevantes: 1. Se crea la entrada del cronograma. 2. Se valida que se haya seleccionado un cronograma del cual se importarán los participantes preinscritos. 3. Se buscan todos los participantes preinscritos en el curso en base de datos. 4. Por cada participante, en la nueva entrada del cronograma se crea un participante preinscrito y su pago asociado. Capítulo IV. Marco Aplicativo 43 Envío de correos En el Módulo de Gestión se implementaron 3 tipos de envíos de correos: correos personales, correos a listas y correos automáticos. Para los correos personales, se extendió la columna de acciones (ver Figura 21) en las vistas con tablas de usuarios y se les agregó un botón con un ícono de sobre, para representar la acción de mandar correo. Figura 21 - Columna de acciones Al hacer click en el sobre se abre una ventana emergente, como la que se muestra en la Figura 22. La ventana tiene 3 campos, “Para”, “Asunto” y “Mensaje”, éstos son llenados automáticamente con el correo del usuario y con mensajes predefinidos que pueden ser editados. Figura 22 - Ventana emergente para el envío de correos personales Capítulo IV. Marco Aplicativo 44 Para el envío de correo a listas la implementación fue similar, sólo que la ventana emergente es desplegada desde un botón ubicado en la vista de detalle de un cronograma o de un curso (Ver Figura 23). Figura 23 - Botón que despliega le ventana emergentes para el envío de correos a listas La ventana emergente sólo tiene una diferencia con la mostrada en la Figura 22, en vez de tener un campo “Para”, tiene una lista desplegable que te permite seleccionar 4 listas asociadas a un curso o cronograma: Lista de Preinscritos, Lista de Inscritos, Lista de Instructores y Lista de Interesados (Ver Figura 24). Figura 24 - Ventana emergente para el envío de correos a listas Los correos automáticos son enviados cuándo ocurren los siguientes eventos:  Cambio de estado de una entrada en el cronograma. A continuación se describen los cambios de estados y sus correos asociados: o Cambio de No publicado a Publicado: Se envía un correo a la Lista de Interesados notificando que una nueva entrada en el cronograma de un curso de su interés ha sido creada, se incluyen detalles del curso como la fecha de inicio y fin, horarios y un enlace hacia el sitio público con más detalles. Capítulo IV. Marco Aplicativo 45 o Cambio de Publicado a Suspendido: Se envía un correo a la Lista de Preinscritos notificando que la entrada en el cronograma queda suspendida hasta nuevo aviso. o Cambio de Suspendido a Publicado: Se envía un correo a la Lista de Preinscritos con las nuevas fechas.  Postulación de instructor aceptada: El instructor es notificado que ha sido asignado como instructor.  Preinscripción aprobada: El participante es notificado que su preinscripción ha sido aprobada y ahora está inscrito en el curso correspondiente. Capítulo IV. Marco Aplicativo 46 Asignación, Postulación y Aprobación de instructores Los instructores pueden ser asignados a una entrada del cronograma de las siguientes formas:  El instructor se postula a una entrada del cronograma y luego la postulación es aprobada por un administrador (Ver Figura 25).  Es asignado directamente a través de la interfaz de creación de instructores. Figura 25 - Diagrama de secuencia del proceso de Postulación y Aprobado de Postulación de Instructores A continuación destacamos las acciones más relevantes: 1. Un instructor se postula a una entrada del cronograma. 2. Se valida que el instructor no esté ni postulado o asignado a esta entrada del cronograma. 3. Se crea la postulación. 4. Un administrador aprueba la postulación. Capítulo IV. Marco Aplicativo 47 Preinscripción e Inscripción Figura 26 - Diagrama de secuencia del proceso de Preinscripción e Inscripción En la Figura 26 se muestra con un diagrama de secuencia el flujo asociado a las funcionalidades de preinscripción e inscripción. A continuación se mencionan los pasos más relevantes: 1. Un Participante se preinscribe en una entrada del cronograma. 2. Se valida que no esté preinscrito. 3. Se crea la preinscripción y el pago asociado. 4. Un administrador aprueba la preinscripción. 5. El Participante es notificado a través de correo electrónico que ha sido Inscrito. Capítulo IV. Marco Aplicativo 48 Reporte de Pagos Figura 27 - Diagrama de secuencia del proceso de Reporte de Pagos En la Figura 27 se muestra con un diagrama de secuencia el flujo asociado a las funcionalidades de reporte de pagos. A continuación se mencionan los pasos más relevantes: 1. Un Administrador activa la opción de notificar pago a un participante preinscrito. 2. Un Administrador puede actualizar la información del monto a pagar. 3. El Administrador notifica al usuario que puede notificar su pago cuando lo realice desde el Sitio Público. 4. El usuario preinscrito notifica el pago realizado. 5. Se actualiza la información del pago. 6. La aplicación notifica al Administrador que el pago fue realizado. Capítulo IV. Marco Aplicativo 49 4.6.2. Patrones de interfaz e interacción utilizados Con la finalidad de mejorar la interfaz y la experiencia de usuario se hicieron los siguientes ajustes en las interfaces: A los elementos HTML select (listas desplegables) se les agregó funcionalidad y estilo con el plugin Select2. En la Figura 28 se puede observar un campo del tipo select normal y uno después de aplicarle Select210, este último ahora posee un campo de búsqueda que es usado para filtrar de manera rápida entre las opciones. Figura 28 - Campo select antes y después de aplicarle Select2 A los elementos HTML input usados para seleccionar horas, se les agregó con funcionalidad con el plugin jQuery Timepicker11, este agrega una lista desplegable en la parte inferior del input con una lista de horas. En la Figura 29 se puede ver un campo input con el plugin aplicado. Figura 29 - Campo input después de aplicarle jQuery Timepicker 10 https://select2.github.io/ 11 https://jonthornton.github.io/jquery-timepicker/ Capítulo IV. Marco Aplicativo 50 A los elementos HTML input usados para seleccionar fechas, se les dio funcionalidad y estilos con el plugin Bootstrap Datepicker12, al hacer click sobre el input se muestra un calendario el cual permite seleccionar una fecha. (Ver Figura 30) Figura 30 - Campo input después de aplicarle Bootstrap Datepicker A los elementos HTML input utilizados para realizar la búsqueda de fechas, se les dio funcionalidad con el plugin Date Range Picker13, a diferencia del plugin anterior, este permite seleccionar un rango de fecha así como rangos predefinidos. En la Figura 31 se muestra un input después de aplicarle el plugin. 12 https://bootstrap-datepicker.readthedocs.io/en/latest/ 13 http://www.daterangepicker.com/ Capítulo IV. Marco Aplicativo 51 Figura 31 - Campo input después de aplicarle Date Range Picker A los elementos HTML input del tipo checkbox, usados para seleccionar entre dos opciones, se les agregó estilos con el plugin Bootstrap Toggle14. En la Figura 32 se muestra como luce un campo input antes y después de aplicarle el plugin. Figura 32 - Campo input del tipo checkbox antes y después de aplicarle Bootstrap Toggle A los elementos HTML textarea se les agregó funcionalidad con el plugin CKEditor15. Éste convierte cualquier área de texto en editores de texto del tipo WYSIWYG (“lo que ves es lo que obtienes”), también llamados editores de texto enriquecido. Este editor añade funcionalidades como cambiar el tamaño de las fuentes, inserción de hipervínculos, agregarle formato al texto, agregar cabeceras, entre otras. En la Figura 33 vemos como luce un campo de texto después de aplicarle el plugin. 14 http://www.bootstraptoggle.com/ 15 https://ckeditor.com Capítulo IV. Marco Aplicativo 52 Figura 33 - Campo de área de texto después de aplicarle CKEditor Para mostrar interacción con el usuario ante algún tipo de acción ejecutada a través de Ajax, se usó el plugin Nprogress16, este a través de sus dos métodos principales, uno para iniciar y otro para detenerse, inserta una barra de progreso en el tope de la página que se ve como la mostrada en la Figura 34. Figura 34 - Barra de progreso generada por Nprogress Después que una acción se ha realizado, se usa el plugin Toastr17 para mostrar notificaciones de fracaso o éxito. En la Figura 35 se muestra una notificación de ejemplo generada por este plugin. Figura 35 - Notificación generada por Toastr 16 http://ricostacruz.com/nprogress/ 17 https://codeseven.github.io/toastr/ Capítulo IV. Marco Aplicativo 53 4.6.3. Manual general de uso y principales interfaces Módulo de Gestión En el Módulo de Gestión se pueden administrar los siguientes recursos: Usuarios del CENEAC, Participantes, Roles, Permisos, Instructores Asignados, Instructores Postulados, Cursos, Categorías, Cronogramas, Preinscritos, Inscritos, Interesados, Pagos y Respaldos. La mayoría de estos recursos poseen a lo sumo 3 interfaces relacionadas:  Lista: Se muestra el listado de todos los elementos, en esta interfaz se pueden aplicar filtros de búsqueda.  Detalle: Se muestra el detalle de un elemento, en esta interfaz se pueden ver los elementos relacionados a la entidad de base de datos. Por ejemplo, en la vista de detalle de un curso se puede ver las entradas de cronograma de este curso y los participantes interesados del mismo.  Formulario de Creación: Se muestra un formulario con los campos necesarios para la creación de una entidad del recurso. Dado a que la mayoría de estas vistas tienen prácticamente los mismos elementos, se mostrarán las interfaces principales más relevantes. En la Figura 36 se presenta la interfaz de inicio de sesión, esta se muestra a todos los roles al ingresar a la aplicación. Figura 36 – Interfaz de ingreso al Módulo En la Figura 37 se presenta la interfaz de bienvenida. Capítulo IV. Marco Aplicativo 54 Figura 37 – Interfaz de Bienvenida Las interfaces para todos los roles son las mismas, la única diferencia sería la cantidad de enlaces que se puede tener en el menú lateral. Por ejemplo, un Instructor vería las opciones mostradas en la Figura 38. La visibilidad de las opciones dependen de los roles y permisos que un usuario tiene asignados. Figura 38 – Menú Lateral Capítulo IV. Marco Aplicativo 55 Los usuarios a pesar de ser la misma tabla en base de datos, se dividieron en dos secciones: usuarios pertenecientes al CENEAC y usuarios Participantes. (Ver Figura 39) Figura 39 – Menú de Usuarios desplegado En la vista de todos los usuarios (Figura 40) tendríamos el listado completo de estos mostrados en una tabla. En la parte izquierda de la tabla tenemos la columna de acciones con los íconos correspondientes a ver, editar, eliminar y enviar correo electrónico. En la parte de arriba de cada columna se tiene un campo de búsqueda para poder filtrar elementos de la tabla. Figura 40 – Lista de Usuarios A diferencia de la vista de usuarios del CENEAC, en la vista de participantes (Figura 41) no se muestra el rol (dado a que todos poseen el rol de Participantes). Capítulo IV. Marco Aplicativo 56 Figura 41 – Lista de Participantes En el menú de Roles y Permisos (Figura 42) tenemos las siguientes opciones: Figura 42 – Menú de Roles y Permisos desplegado La asignación de roles y permisos es hecha a través de una interfaz gráfica, se tiene una lista a la izquierda con todos los roles y permisos existentes, y una lista a la derecha con los roles y permisos asignados a un usuario. Para mover elementos Capítulo IV. Marco Aplicativo 57 de una lista a la otra se usan los dos botones de dirección ubicados entre las dos listas. (Figura 43) Figura 43 – Interfaz de asignación de Roles y Permisos a un usuario Entre las interfaces asociadas a roles, tenemos el listado de todos los roles (VER Figura 44) y la interfaz de asignación (VER Figura 45), aquí podemos asignar roles y permisos a un rol de la misma manera que se le asignan a un usuario. Figura 44 – Lista de Roles Capítulo IV. Marco Aplicativo 58 Figura 45 – Interfaz de asignación de Roles y Permisos a un Rol En el menú de Instructores (Figura 46) tenemos las siguientes opciones: Figura 46 – Menú de Instructores desplegado En la Figura 47 se muestra como los instructores pueden ser asignados directamente a una entrada del cronograma. Capítulo IV. Marco Aplicativo 59 Figura 47 – Interfaz de creación de Instructores Asignados Otra manera de ser asignados a una entrada del cronograma es que un usuario que posea los permisos correspondientes, en la interfaz de Instructores Postulados, apruebe la postulación con el botón que se ve a la derecha de la tabla en la Figura 48. Figura 48 – Lista de Instructores Postulados Capítulo IV. Marco Aplicativo 60 En el menú de Cursos (Figura 49) tenemos las siguientes opciones: Figura 49 – Menú de Cursos desplegado Las interfaces de Cronograma son las más importantes, dado a que toda la aplicación gira en torno a este recurso. En vista correspondiente al listado (Figura 50) podemos destacar los siguientes puntos:  Es posible filtrar la lista por los siguientes valores: Curso, Fecha de Inicio y Fin, Hora de Inicio y Fin y Estado.  A la derecha de la tabla, cada fila posee dos enlaces, uno a la lista de preinscritos y otro a la de inscritos.  Arriba se observa el botón Postularse, este será visible sólo para los instructores. A la izquierda de cada fila hay un campo del tipo checkbox, al hacer click en el botón de Postularse, el usuario será postulado como instructor a los cursos donde el campo de checkbox esté marcado como verdadero. Capítulo IV. Marco Aplicativo 61 Figura 50 – Lista de entradas del Cronograma En la interfaz de creación de entradas (Figura 51) del Cronograma, podemos destacar los siguientes puntos:  Si se marca la opción de “¿Desea importar los preinscritos de otra entrada del cronograma?”, se muestra una lista desplegable dónde se puede seleccionar una entrada ya creada. Al crear la nueva entrada, se copiará toda la lista de preinscritos.  Si se marca la opción de “Notificar por correo el cambio de estado”, se enviará un correo a una lista de participantes dependiendo de la transición de estados. Capítulo IV. Marco Aplicativo 62 Figura 51 – Interfaz de creación de Cronograma Capítulo IV. Marco Aplicativo 63 En la interfaz de detalle de cronograma (Figura 52) además de tener una pestaña con los datos de la entrada del Cronograma, tenemos una pestaña para cada relación. En la pestaña de Preinscritos, tenemos el listado de participantes que se encuentran en esta lista. En la lista podemos realizar las siguientes acciones por cada participante:  Envío de correo.  Aprobar preinscripción.  Habilitar la opción de pago.  Ver Pago asociado. Figura 52 – Detalle de Cronograma – Pestaña de Preinscritos Si el usuario realizó y reportó el pago del curso, al lado del enlace de “ver pago” se muestra un signo de exclamación. Al entrar en este enlace podemos ver todos los detalles. (Ver Figura 53) Capítulo IV. Marco Aplicativo 64 Figura 53 – Interfaz de detalle de Pago Si se hace clic en el botón de “Editar”, además de poder cambiar los detalles de un pago, se puede seleccionar la “Cantidad a pagar” en la interfaz de Actualizar Pago (Figura 54). Este monto se selecciona de una lista desplegable, los montos son tomados del atributo Costos de la tabla Cursos. El monto seleccionad es el que verá el participante en el Sitio Público. Por defecto se mostrará el precio de venta al público. Capítulo IV. Marco Aplicativo 65 Figura 54 – Interfaz de actualizar Pago En la pestaña de Inscritos (Figura 55) se puede modificar en la lista la cantidad de asistencias, se puede marcar si el participante requiere factura personalizada y si al final del curso el participante cuenta con el número mínimo de asistencias (o algún otro criterio decidido por el instructor o el CENEAC), se puede marcar al alumno en la última columna, esto con la finalidad de poder filtrar y ver la lista final de alumnos asistentes al curso. Capítulo IV. Marco Aplicativo 66 Figura 55 – Detalle de Cronograma – Pestaña de Inscritos En la pestaña de instructores (Figura 56) se pueden ver los Instructores postulados a esta entrada del cronograma y se puede aprobar su postulación. Figura 56 – Detalle de Cronograma – Pestaña de Instructores Postulados En esta interfaz también es posible generar la lista de asistencia que los participantes van a firmar en cada clase. La lista generada en formato .xlsx tiene el formato mostrado en la Figura 57. Capítulo IV. Marco Aplicativo 67 Figura 57 – Lista de asistencia generada En la vista de creación de cursos (Figura 58) podemos destacar los siguientes puntos:  En el campo Costos se pueden introducir varios valores separados por coma, aquí se puede poner el costo de venta al público general y los costos asociados a promociones y descuentos  El campo Descripción cuenta con un editor de texto enriquecido, el contenido que se guarde en este campo será el que se mostrará en la página de detalle de un curso en el Sitio Público. Capítulo IV. Marco Aplicativo 68 Figura 58 – Interfaz de creación de Curso En el menú de Listas (ver Figura 59) tenemos las siguientes opciones: Figura 59 – Menú de Listas desplegado Capítulo IV. Marco Aplicativo 69 Estas mismas listas las podemos encontrar en las pestañas de relaciones de Cursos y Cronogramas, la diferencia es que en las listas de las pestañas tendríamos a los participantes que están relacionados con ese Cronograma o Curso en específico. Aquí tendríamos la lista de todos los usuarios relacionados con diferentes Cursos o Cronogramas (ver Figura 60). Figura 60 – Lista de todos los Interesados La última interfaz, que se muestra en la Figura 61, es la de respaldo de datos. En esta interfaz sólo podemos realizar tres acciones: crear, eliminar y descargar respaldos. Capítulo IV. Marco Aplicativo 70 Figura 61 - Interfaz de generación de respaldos Capítulo IV. Marco Aplicativo 71 Sitio Público En la Figura 62, Figura 63 y Figura 64, se presentan las distintas secciones por las que está compuesta la pantalla principal del sitio público diseñado para divulgar la información de las actividades de extensión y formación realizadas por el CENEAC. Figura 62 - Interfaz Principal – parte superior Capítulo IV. Marco Aplicativo 72 Figura 63 - Interfaz Principal – parte media Figura 64 - Interfaz Principal – parte inferior En la Figura 65, Figura 66 y Figura 67, se presentan los formularios de las interfaces asociadas al inicio de sesión, registro y reestablecer contraseña. Capítulo IV. Marco Aplicativo 73 Figura 65 - Interfaz de Inicio de Sesión Figura 66 - Formulario de Registro Capítulo IV. Marco Aplicativo 74 Figura 67 – Formulario de Reestablecer Contraseña En la Figura 68 se presenta la interfaz correspondiente a “Empresa”, aquí se describen los aspectos más relevantes acerca del CENEAC. Esta información fue sacada del sitio público en uso. Capítulo IV. Marco Aplicativo 75 Figura 68 - Interfaz de Empresa En la Figura 69 se presenta la interfaz de “Cursos”, en esta se muestran los cursos ofrecidos por el CENEAC, clasificados en paneles por categorías. A la derecha Capítulo IV. Marco Aplicativo 76 de la página se tiene una columna con información referente a los horarios de atención y a la duración de los cursos. Figura 69 - Interfaz de Cursos En la Figura 70 se muestra la interfaz asociada a un curso en específico. Esta interfaz posee varias secciones. En la primera sección se muestran los detalles asociados al curso, como nombre, duración y horas. Además se tiene un botón con el cual el usuario puede anotarse o salirse de la lista de interesados de un curso (a la izquierda se ve el Capítulo IV. Marco Aplicativo 77 botón en azul, correspondiente a la acción de anotarse en la lista, a la derecha el botón en rojo, correspondiente a la acción de salirse de la lista). La segunda sección muestra en pantalla el contenido del campo description de la tabla de base de datos Course. Este contenido puede ser modificado con un editor d texto enriquecido en la interfaz correspondiente del Módulo de Gestión. La última sección posee una tabla con las próximas entradas del cronograma de este curso. Figura 70 - Interfaz de detalle de Curso Capítulo IV. Marco Aplicativo 78 En la Figura 71 se muestra la interfaz asociada al “Cronograma”, aquí se muestran los próximos eventos del cronograma clasificados por curso. Cada fila posee un botón de “Ver Detalles” que de ser pulsado lleva a la interfaz de detalles de un cronograma (Ver Figura 72). Se usa la misma interfaz que en la vista de detalles de cursos pero con dos diferencias:  En la primera sección se muestran los detalles relacionados al cronograma, como horarios, fechas y costo.  Se muestra el botón de “Preinscribirse” en lugar del botón de “Anotarse en la Lista”.  No se muestra la última sección con las próximas entradas del cronograma. Figura 71 - Interfaz de Cronograma Figura 72 – Cabecera de vista de detalle de Cronograma Capítulo IV. Marco Aplicativo 79 En la Figura 73 se muestra la interfaz asociada a “Mis Cursos”. En esta un usuario puede ver los cronogramas en los que está preinscrito, inscrito y los cursos en los que está interesado, representados por tarjetas. Cada tarjeta contiene botones enlaces o acciones. Las tarjetas de preinscritos contienen un enlace a los detalles del cronograma y uno a la interfaz de notificar pago. Éste último puede estar desactivado o no, dependiendo si en el Módulo de Gestión se activó la opción de “Notificar Pago” para el usuario activo. Las tarjetas de interesados, contienen un botón de enlace a los detalles del curso y un botón para salirse de la lista y dejar de recibir correos. A la derecha se tiene una columna con información importante acerca de los pagos y cupos. Capítulo IV. Marco Aplicativo 80 Figura 73 - Interfaz de Mis Cursos Capítulo IV. Marco Aplicativo 81 La Figura 74 presenta el formulario “Notificar Pago”. En éste el usuario puede reportar todos los datos referentes al pago de un curso. A la derecha se tiene información acerca el costo del curso (puede ser modificado en el Módulo de Gestión) y acerca los datos de cuenta de CENEAC Producciones C.A. Figura 74 - Interfaz de Notificar Pago La Figura 75 presenta el formulario de “Modificar Datos”, aquí el usuario puede modificar la mayoría de los datos con los que se inscribió en la aplicación. Capítulo IV. Marco Aplicativo 82 Figura 75 – Interfaz de Modificar Datos La Figura 76 presenta la interfaz asociada a “Contacto”. A la izquierda se tiene información de la empresa como la dirección, horarios de atención, teléfonos y correo electrónico. A la derecha se tiene un formulario de contacto dónde el usuario puede escribirle un mensaje que será enviado al correo electrónico del CENEAC. Capítulo IV. Marco Aplicativo 83 Figura 76 – Interfaz de Contacto Capítulo IV. Marco Aplicativo 84 4.6.4. Pruebas realizadas Se realizaron pruebas sobre funcionales sobre los módulos, con el propósito de verificar el cumplimiento de los requerimientos planteados. Para esto se elaboró un instrumento de evaluación, presentado en la Tabla 2, que consiste en una tabla donde se listan las funcionalidades requeridas o que se quieran evaluar. Sprint Ciclo Funcionalidad Estatus Aprobación N M Funcionalidad 1 Estatus 1 Funcionalidad 2 Estatus 2 Funcionalidad N Estatus N Tabla 2 – Modelo de evaluación Las pruebas fueron realizadas al final de cada Sprint y una vez completado el desarrollo se realizó una prueba de regresión para asegurarse del correcto funcionamiento de toda la aplicación. Sprint 1 En la Tabla 3 se presenta el ciclo de pruebas llevado a cabo al final del Sprint 1. En este ciclo, se probaron funcionalidades básicas sobre cada recurso: Crear, Lectura, Actualizar y Eliminar (CRUD por sus siglas en inglés). Todas las pruebas se realizaron con éxito así que no hubo la necesidad de realizar ajustes. Sprint Ciclo Funcionalidad Estatus Aprobación 1 1 CRUD Usuario Aprobado CRUD Participante Aprobado CRUD Instructor Asignado Aprobado CRUD Instructor Postulado Aprobado CRUD Curso Aprobado CRUD Categoría Aprobado CRUD Cronograma Aprobado CRUD Preinscrito Aprobado CRUD Inscrito Aprobado CRUD Interesado Aprobado CRUD Pago Aprobado Tabla 3 –Sprint 1, Ciclo 1 de pruebas Sprint 2 En la Tabla 4 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 2. En este Sprint se realizaron ajustes de vistas y la funcionalidad de Importar Preinscrito. También se realizaron pruebas sobre otros formularios de creación que posean fechas, ya que entre los ajustes de vistas se agregó un plugin Capítulo IV. Marco Aplicativo 85 de selección de fechas y se quería verificar que el formato fe fecha generado sea el correcto. Sprint Ciclo Funcionalidad Estatus Aprobación 2 1 Creación Cronograma Aprobado Creación Cronograma Importando Preinscritos No Aprobado Creación Preinscritos Aprobado Creación Inscrito Aprobado Creación Pago Aprobado Tabla 4 – Sprint 2, Ciclo 1 de pruebas En el primer ciclo de pruebas falló la funcionalidad de Importar Preinscritos al ejecutar un caso borde. Se integraron cambios y correcciones sobre la funcionalidad no aprobada y se procedió a realizar un segundo ciclo de pruebas, el cual se presenta en la Tabla 5. Sprint Ciclo Funcionalidad Estatus Aprobación 2 2 Creación Cronograma Importando Preinscritos Aprobado Tabla 5 – Sprint 2, Ciclo 2 de pruebas Sprint 3 En la Tabla 6 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 3. En este Sprint se desarrolló la funcionalidad de respaldo de datos, se realizaron las siguientes pruebas. Sprint Ciclo Funcionalidad Estatus Aprobación 3 1 Generar Respaldo Aprobado Eliminar Respaldo No Aprobado Descargar Respaldo Aprobado Tabla 6 – Sprint 3, Ciclo 1 de pruebas En el primer ciclo de pruebas falló la funcionalidad de Eliminar Respaldo al ejecutar un caso borde dado a una validación faltante. Se integraron cambios y correcciones sobre la funcionalidad no aprobada y se procedió a realizar un segundo ciclo de pruebas, el cual se presenta en la Tabla 7. Sprint Ciclo Funcionalidad Estatus Aprobación 3 2 Generar Respaldo Aprobado Eliminar Respaldo Aprobado Descargar Respaldo Aprobado Tabla 7 – Sprint 3, Ciclo 2 de pruebas Capítulo IV. Marco Aplicativo 86 Sprint 4 En la Tabla 8 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 4. En este Sprint se desarrolló la funcionalidad de envío de correos. Sprint Ciclo Funcionalidad Estatus Aprobación 4 1 Envío de correo personal Aprobado Envío de correo personalizado a Preinscritos No Aprobado Envío de correo personalizado a Preinscritos No Aprobado Envío de correo personalizado a Instructores Aprobado Envío de correo personalizado a Preinscritos No Aprobado Envío de correo a listas por cambios de estados del Cronograma No Aprobado Envío de correo a Instructor por postulación aprobada Aprobado Envío de correo a Participante por preinscripción aprobada Aprobado Tabla 8 – Sprint 4, Ciclo 1 de pruebas Muchas de las pruebas que fallaron fueron porque el envío superó el tiempo permitido al tratar de enviar un correo a cada participante de la lista. Se hicieron cambios en la manera en que se envían los correos a listas y se realizó el segundo ciclo de prueba, mostrado en la Tabla 9. Sprint Ciclo Funcionalidad Estatus Aprobación 4 2 Envío de correo personalizado a Preinscritos Aprobado Envío de correo personalizado a Preinscritos Aprobado Envío de correo personalizado a Instructores Aprobado Envío de correo personalizado a Preinscritos Aprobado Envío de correo a listas por cambios de estados del Cronograma Aprobado Envío de correo a listas por cambios de estados del Cronograma Aprobado Tabla 9 – Sprint 4, Ciclo 2 de pruebas Capítulo IV. Marco Aplicativo 87 Sprint 5 En la Tabla 10 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 5. En este Sprint se desarrolló la funcionalidad de exportar listas y el flujo de postulación y aprobación de instructores. Sprint Ciclo Funcionalidad Estatus Aprobación 5 1 Exportar lista de Usuarios Aprobado Exportar lista de Participantes Aprobado Exportar lista de Cursos Aprobado Exportar lista de Cronogramas Aprobado Exportar lista de Preinscritos Aprobado Exportar lista de Inscritos Aprobado Exportar lista de Interesados Aprobado Exportar lista de Pagos Aprobado Exportar lista de asistencia Aprobado Postularse a varias entradas del cronograma Aprobado Postularse a una entrada donde ya el usuario está postulado No Aprobado Postularse a una entrada donde ya el usuario está asignado No Aprobado Aprobar Postulación Aprobado Tabla 10 – Sprint 5, Ciclo 1 de pruebas En el primer ciclo de pruebas fallaron dos casos de la funcionalidad de Postularse. Se integraron cambios y correcciones sobre la funcionalidad no aprobada y se procedió a realizar un segundo ciclo de pruebas, el cual se presenta en la Tabla 11. Sprint Ciclo Funcionalidad Estatus Aprobación 5 2 Postularse a una entrada donde ya el usuario está postulado Aprobado Postularse a una entrada donde ya el usuario está asignado Aprobado Tabla 11 – Sprint 5, Ciclo 2 de pruebas Sprint 6 En la Tabla 12 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 6. En este Sprint se implementaron los roles, permisos y control de acceso. Sprint Ciclo Funcionalidad Estatus Aprobación 6 2 CRUD Roles Aprobado CRUD Permisos Aprobado Asignación Roles y Permisos Aprobado Capítulo IV. Marco Aplicativo 88 Pruebas de control de acceso de los diferentes Roles No Aprobado Tabla 12 – Sprint 6, Ciclo 2 de pruebas Después de navegar toda la aplicación con los diferentes Roles, se pudo observar que algunas interfaces y funcionalidades no estaban protegidas por el control de acceso. Se integraron cambios y correcciones sobre la funcionalidad no aprobada y se procedió a realizar un segundo ciclo de pruebas, el cual se presenta en la Tabla 13. Sprint Ciclo Funcionalidad Estatus Aprobación 6 2 Pruebas de control de acceso de los diferentes Roles Aprobado Tabla 13– Sprint 6, Ciclo 2 de pruebas Sprint 9 En la Tabla 14 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 9. En este Sprint se desarrolló las funcionalidades de autenticación del sitio público. Sprint Ciclo Funcionalidad Estatus Aprobación 9 1 Iniciar Sesión Aprobado Cerrar Sesión Aprobado Registrarse Aprobado Envió de correo para reestablecer contraseña Aprobado Reestablecer contraseña Aprobado Tabla 14 – Sprint 9, Ciclo 1 de pruebas Sprint 10 En la Tabla 15 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 10. En este Sprint se desarrolló la funcionalidad actualizar los datos personales del usuario y reportar pagos. Sprint Ciclo Funcionalidad Estatus Aprobación 10 1 Actualizar datos del usuario Aprobado Actualizar datos de Pago Aprobado Tabla 15 – Sprint 10, Ciclo 1 de pruebas Capítulo IV. Marco Aplicativo 89 Sprint 11 En la Tabla 16 se presenta el primer ciclo de pruebas llevado a cabo al final del Sprint 11. En este Sprint se desarrolló las funcionalidades de anotarse y salir de la lista de interesados, preinscribirse en cursos y aprobar preinscripciones. Sprint Ciclo Funcionalidad Estatus Aprobación 11 1 Anotarse en la lista de interesados de un curso Aprobado Anotarse en la lista de interesados del mismo curso No Aprobado Salirse de la lista de interesados de un curso Aprobado Preinscribirse en un curso Aprobado Preinscribirse en el mismo curso No Aprobado Aprobar Preinscripción Aprobado Tabla 16– Sprint 11, Ciclo 1 de pruebas En el primer ciclo de pruebas fallaron dos casos de la funcionalidad de Postularse. Se integraron cambios y correcciones sobre la funcionalidad y las interfaces asociadas, se procedió a realizar un segundo ciclo de pruebas, el cual se presenta en la Tabla 17. Sprint Ciclo Funcionalidad Estatus Aprobación 11 2 Anotarse en la lista de interesados de un curso Aprobado Anotarse en la lista de interesados del mismo curso Aprobado Preinscribirse en un curso Aprobado Preinscribirse en el mismo curso Aprobado Tabla 17– Sprint 11, Ciclo 2 de pruebas Conclusiones y Recomendaciones 90 CONCLUSIONES Y RECOMENDACIONES A través del presente Trabajo Especial de Grado se desarrolló una aplicación que cumplió con los objetivos y requerimientos planteados para agilizar los procesos internos del CENEAC. Para el cumplimiento de los objetivos y requerimientos fue crucial el análisis y entendimiento previo de los procesos de negocio que se querían automatizar, detectando así las debilidades y fortalezas que poseía inicialmente para luego plantear una solución. Una vez planteada la solución fue importante evaluar y analizar el conjunto de tecnologías que podían utilizarse para la implementación de la misma, con la intención de decidir acertadamente cuales eran las correctas. Entre los retos en el desarrollo del Módulo de Gestión se destaca el uso del marco de trabajo Yii2. A pesar de ser una gran ayuda a la hora de generar código, posee una curva de aprendizaje alta. La manera de realizar ciertas tareas en Yii2 es diferente a los que se suele ver otros marcos de trabajo. Sin embargo, una vez superada la curva inicial de aprendizaje el desarrollo de funcionalidades es bastante rápido. Fue igualmente importante guiar el desarrollo de la solución mediante la aplicación de una Metodología de Desarrollo. La solución desarrollada fue guiada mediante una adaptación de la Metodología de Desarrollo SCRUM, en la cual el rol Propietario del Producto estuvo representado por la Profa. Yusneyi Carballo Barrera y no se contó con un equipo de desarrollo, lo realizó como proyecto de grado solamente el Br. Carlos Riera. Como recomendaciones para trabajos futuros de este Trabajo Especial de Grado, se tiene:  Desarrollar un módulo de gestión de contenido que permita administrar todo la información estática del Sitio Público.  Desarrollar un Módulo de Aula Virtual que posea las algunas de las siguientes características. o Los instructores puedan subir notificaciones y contenido relacionado a los cursos (libros, guías, etc.) o Sistema de notificaciones internas. o Sistema de discusión que permita a los participantes publicar sus dudas y a sus compañeros o instructores responderlas. o Sistema de apuntes. o Realizar evaluaciones.  Integrar plataformas de gestión electrónica de pagos, por ejemplo MercadoPago, que permitan realizar y procesar los pagos desde la aplicación. Referencias Bibliográficas y Digitales 91 REFERENCIAS BIBLIOGRÁFICAS Y DIGITALES Angularjs. (s.f.). AngularJS — Superheroic JavaScript MVW Framework. Recuperado el 16 de Junio de 2016, de Angularjs.org: https://github.com/angular/angular.js Chacaltana, G. (2014). Una breve cronología de MySQL. Recuperado el 20 de Junio de 2016, de http://www.solocodigoweb.com/blog/2014/03/04/una- brevecronologia-de-mysql/ CMS. (27 de Marzo de 2008). Recuperado el 02 de Agosto de 2016, de cms: https://www.cms.gov/Research-Statistics-Data-and-Systems/CMS- Information-Technology/XLC/Downloads/SelectingDevelopmentApproach.pdf Coursera. (Agosto de 2016). Recuperado el 10 de Agosto de 2016, de https://www.coursera.org/ Ecured. (s.f.). Recuperado el 11 de Mayo de 2016, de Ecured: http://www.ecured.cu/Servidor_Web Ecured.cu. (s.f.). Framework. Recuperado el 20 de Julio de 2016, de http://www.ecured.cu/Framework Ecured.cu. (s.f.). Servidor Web. Recuperado el 16 de Junio de 2016, de http://www.ecured.cu/Servidor_Web Escuela Web. (s.f.). Recuperado el 02 de Agosto de 2016, de https://escuelaweb.net/ FROAC. (2012). Obtenido de Federación de Repositorios de Objetos de Aprendizaje Colombia: http://froac.manizales.unal.edu.co/gloar/lib/images/mvc.png Git - Acerca del control de versiones. (s.f.). Recuperado el 16 de Junio de 2016, de Git-scm.com: https://git-scm.com/book/es/v1/Empezando-Acerca-del- control-de-versiones Git-scm. (s.f.). https://git-scm.com/. Recuperado el 16 de Junio de 2016, de git- scm.com. Gomez, J. (s.f.). Patrón de arquitectura Modelo Vista Controlador (MVC). Recuperado el 16 de Junio de 2016, de Lab.inf.uc3m.es: http://www.lab.inf.uc3m.es/~a0080802/RAI/mvc.html GulpJs. (s.f.). Recuperado el 11 de Mayo de 2016, de http://gulpjs.com/ Intro yii - Yii2 Framework. (20 de Julio de 2016). Obtenido de Yii2- framework.readthedocs.io: https://yii2- framework.readthedocs.io/en/stable/guide-es/intro-yii/ Referencias Bibliográficas y Digitales 92 JQuery. (s.f.). Recuperado el 11 de Mayo de 2016, de https://jquery.com/ jQuery jquery.org. (s.f.). jQuery. Recuperado el 07 de Junio de 2016, de Jquery.com: https://jquery.com/ Laravel. (s.f.). Recuperado el 20 de Julio de 2016, de GitHub: https://github.com/laravel/laravel Mozilla Developer Network. (s.f.). AJAX. Recuperado el 08 de Julio de 2016, de https://developer.mozilla.org/es/docs/AJAX Mozilla Developer Network. (s.f.). CSS. Recuperado el 16 de Junio de 2016, de Mozilla Developer Network: https://developer.mozilla.org/es/docs/Web/CSS Mozilla Developer Network. (s.f.). HTML. Recuperado el 16 de Junio de 2016, de Mozilla Developer Network: https://developer.mozilla.org/es/docs/Web/HTML Mozilla Developer Network. (s.f.). HTTP. Recuperado el 16 de Junio de 2016, de https://developer.mozilla.org/es/docs/Web/HTTP Mozilla Developer Network. (s.f.). Javascript. Recuperado el 16 de Junio de 2016, de Mozilla Developer Network: https://developer.mozilla.org/es/docs/Web/JavaScript MySQL. (s.f.). Recuperado el 16 de Junio de 2016, de https://www.mysql.com/ MySQL. (s.f.). MySQL :: MySQL Workbench. Recuperado el 21 de Julio de 2016, de Mysql.com: https://www.mysql.com/products/workbench/ Otto, M. (s.f.). Bootstrap · The world's most popular mobile-first and responsive front-end framework. Recuperado el 16 de Junio de 2016, de Getbootstrap.com: https://getbootstrap.com/ PHP Group. (s.f.). PHP: Prefacio - Manual. Recuperado el 25 de Junio de 2016, de php.net: https://secure.php.net/manual/es/preface.php Plantillas para paneles de administración desarrolladas con el ‘framework’ Bootstrap. (2017). Recuperado el 2017, de BBVAOpen4U: https://bbvaopen4u.com/es/actualidad/plantillas-para-paneles-de- administracion-desarrolladas-con-el-framework-bootstrap Proyectos Ágiles. (2015). Recuperado el 10 de Agosto de 2016, de https://proyectosagiles.org/que-es-scrum/ Sanchez, J. (31 de Agosto de 2014). Gulp.js en español - tutorial básico y primeros pasos. Recuperado el 20 de Julio de 2016, de FrontEnd Labs: https://frontendlabs.io/1669--gulp-js-en-espanol-tutorial-basico-primeros- pasos-y-ejemplos Referencias Bibliográficas y Digitales 93 Sass-lang. (s.f.). SASS_REFERENCE — Sass Documentation. Recuperado el 05 de Julio de 2016, de Sass-lang.com: http://sass- lang.com/documentation/file.SASS_REFERENCE.html Schwaber, K. (Julio de 2013). Scrum Guides. Recuperado el 10 de Agosto de 2016, de http://www.scrumguides.org/docs/scrumguide/v1/Scrum-Guide-ES.pdf Scrum.org. (s.f.). Recuperado el 10 de Agosto de 2016, de www.scrum.org Silberschatz A., K. H. (2002). Fundamentos de Bases de Datos. (4ta ed.). (M. G. Hill, Ed.) Madrid, España. W3school. (2013). Recuperado el 11 de Mayo de 2016, de http://www.w3schools.com/bootstrap/ Anexos 94 Anexo 1. Modelo de Base de Datos Figura 77 - Modelo de Base de Datos Anexos 95 Anexo 2. Roles y Permisos Figura 78 – Lista de Roles y Permisos del Módulo de Gestión Anexos 96 Anexo 3. Prototipos de interfaz Figura 79 – Prototipo de interfaz de la página principal del Sitio Público Anexos 97 Figura 80 – Prototipos de interfaz de las páginas de Curso y Detalle de Curso Figura 81 – Prototipos de interfaz de las páginas de Cronograma y Detalle de Cronograma Anexos 98 Figura 82 – Prototipos de interfaz de interfaz de Mis Cursos