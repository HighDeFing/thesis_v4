NORMAS PARA EL DESARROLLO DEL SEMINARIO 1 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Laboratorio de Redes Móviles e Inalámbricas (ICARO) Sistema de Gestión de Talleres Extracurriculares para el Centro Educativo de la Asociación de Profesores de la Universidad Central de Venezuela Trabajo Especial de Grado Presentado ante la Ilustre Universidad Central de Venezuela Por los Bachilleres Christian Carmona Cesar Cortes Para optar al título de Licenciado en Computación María Elena Villapol Ana Morales Caracas, 04/ Noviembre / 2014 2 Acta Quienes suscriben, miembros del Jurado designado por el Consejo de Escuela de Computación, para examinar el Trabajo Especial de Grado presentado por los Bachilleres Cesar Alfredo Cortes Marín C.I.: 18.185.108 y Christian Fernando Carmona Quintero C.I.: 18.149.521, titulado: “Sistema de Gestión de Talleres extracurriculares para el Centro Educativo de la asociación de Profesores de la Universidad Central de Venezuela”, a los fines de optar por el título de Licenciado en Computación, dejen constancia de lo siguiente: Leído como fue, dicho trabajo por cada uno de los miembros del jurado, se fijó el día 4 de Noviembre del 2014 a las 10:00 am en la Sala PB III de la Escuela de Computación, para que sus autores lo defendieran en forma pública, mediante una presentación oral de su contenido, luego de lo cual respondieron las preguntas formuladas. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado, sin hacerse solidario con la opinión de los autores, decidió aprobarlo con una nota de _________ puntos. En fé de lo cual se levanta la presente Acta, en Caracas a los 4 días del mes de Noviembre del año dos mil catorce. __________________________ __________________________ Profa. Maria Elena Villapol (Tutora) Profa. Ana Morales (Tutora) __________________________ __________________________ Profa. Mercy Ospina (Jurado) Prof. Iván Flores (Jurado) 3 Dedicatorias 4 Resumen El Centro Educativo de la Asociación de Profesores de la Universidad Central De Venezuela (CEAPUCV) ofrece a sus estudiantes la oportunidad de participar en un conjunto de talleres deportivos y culturales que se realizan cada año escolar de manera extracurricular. Estos talleres están dirigidos y administrados por la coordinación de extensión del colegio, la cual requiere gestionar de mejor forma la organización de sus procesos a través del uso de las Tecnologías de Información y comunicación (TIC), con el fin de extender este beneficio a las estudiantes, representantes y personal que conforma la comunidad del CEAPUCV. Con el propósito de apoyar a la coordinación de extensión del colegio se plantea como objetivo de este Trabajo Especial de Grado el desarrollo de una aplicación web que automatice los procesos y actividades relacionadas con la gestión de talleres como iniciativa que impulse el mejoramiento y la calidad de la forma de gestión actual. La aplicación web se realizó, mediante la ayuda del framework Struts 2, un sistema manejador de base de datos Mysql y el estudio y aplicación del método de desarrollo AgilUs, permitiendo así la creación de un sistema innovador, que optimice el proceso de interacción con el usuario; logrando así interfaces de usuario usables. Palabras Claves: Talleres, Aplicación Web, AgilUs, Gestión. 5 Índice Acta. ........................................................................................................................................ 2 Dedicatorias ............................................................................................................................ 3 Resumen .................................................................................................................................. 4 Índice ...................................................................................................................................... 5 Índice de Figuras ..................................................................................................................... 8 Índice de tablas ..................................................................................................................... 10 1. Introducción ................................................................................................................... 11 1.1. Planteamiento del Problema ....................................................................................... 11 1.2. Objetivo General ........................................................................................................ 12 1.3. Objetivos Específicos ................................................................................................. 12 1.4. Justificación ................................................................................................................ 13 2. Gestión de Talleres del CEAPUCV .............................................................................. 15 2.1. Anuncio o distribución de la información .................................................................. 15 2.2. Inscripción de talleres ................................................................................................ 16 2.3. Control de estudiantes inscritos en talleres ................................................................ 17 3. Metodología y Herramientas ......................................................................................... 18 3.1. AgilUS........................................................................................................................ 18 3.1.1. Buenas prácticas ...................................................................................................... 20 3.1.2. Ciclo de vida ........................................................................................................... 21 3.2. Arquitectura Cliente – Servidor ................................................................................. 23 3.3. Patrón Modelo – Vista – Controlador ........................................................................ 26 3.4. Aplicaciones Web ...................................................................................................... 29 3.5. Tecnologías ................................................................................................................ 30 6 3.5.1. HTML ..................................................................................................................... 30 3.5.2. CSS .......................................................................................................................... 33 3.5.3. JavaScript ................................................................................................................ 34 3.5.4. AJAX....................................................................................................................... 35 3.5.5. jQuery ...................................................................................................................... 37 3.5.6. jQuery UI ................................................................................................................ 37 3.5.7. Sistema manejador de base de datos MySQL ......................................................... 40 3.5.8. JAVA....................................................................................................................... 42 3.5.9. STRUTS 2 ............................................................................................................... 43 3.5.10. Framework Spring ................................................................................................ 44 3.5.11. Hibernate ............................................................................................................... 45 4. Desarrollo del Sistema de Gestión de Talleres .............................................................. 46 4.1. Etapa de requisitos ..................................................................................................... 46 4.1.1. Tormenta de ideas ................................................................................................... 46 4.1.2. Perfil de Usuarios .................................................................................................... 47 4.1.3. Lista de Requerimientos Funcionales y No Funcionales ........................................ 48 4.2: Análisis....................................................................................................................... 49 4.2.1: Modelo de casos de uso .......................................................................................... 49 4.2.2. Modelo Objetos del dominio ................................................................................... 64 4.2.3: Guía de Estilo .......................................................................................................... 65 4.2.4. Patrones de interacción ........................................................................................... 67 4.2.5. Prototipaje ............................................................................................................... 74 4.2.6. Entrega .................................................................................................................... 81 5. Conclusiones .................................................................................................................. 84 7 5.1 Contribuciones ............................................................................................................ 84 5.2 Trabajos futuros .......................................................................................................... 84 Referencias Bibliográficas .................................................................................................... 86 8 Índice de Figuras Figura 1: Cartelera informativa de Talleres. ......................................................................... 15 Figura 2: Proceso de inscripción de talleres. ........................................................................ 17 Figura 3: Etapas de desarrollo y artefactos de AgilUS ......................................................... 22 Figura 4: Arquitectura cliente – servidor .............................................................................. 24 Figura 5: Arquitectura cliente – servidor. Proceso de petición – respuesta. ......................... 25 Figura 6: Ciclo de vida MVC ............................................................................................... 28 Figura 7: Tecnologías agrupadas bajo el concepto de AJAX ............................................... 36 Figura 8: Ejemplo de un menú con efecto de acordeón ........................................................ 38 Figura 9: Ejemplo de un calendario implementando el componente DatePicker ................. 39 Figura 10: Ejemplo de un cuadro de diálogo ........................................................................ 39 Figura 11: Ejemplo del uso de pestañas para clasificar el contenido de la página ............... 40 Figura 12. Modelo de casos de uso nivel 0. .......................................................................... 50 Figura 13. Modelo de casos de uso nivel 1. .......................................................................... 51 Figura 14. Modelo de casos de uso nivel 2. .......................................................................... 56 Figura 15. Modelo de casos de uso nivel 2 Gestionar Inscripción Representado. ............... 57 Figura 16. Modelo de casos de uso nivel 2 Gestionar cuenta. .............................................. 58 Figura 17. Modelo de casos de uso nivel 2 Administrar talleres. ......................................... 59 Figura 18. Modelo de casos de uso nivel 2 Administrar cartelera. ....................................... 60 Figura 19. Modelo de casos de uso nivel 2 Administrar representantes. .............................. 61 Figura 20. Modelo de casos de uso nivel 2 Gestión de pago. ............................................... 62 Figura 21. Modelo de casos de uso nivel 2 Gestión de pago usuario. .................................. 63 Figura 22. Modelo Objeto Dominio del Sistema de Gestión de Talleres. ............................ 64 Figura 23. Logo del Sistema de Gestión de Talleres. ........................................................... 66 9 Figura 24. Colores implementados. ...................................................................................... 66 Figura 25. Menú principal para el Sistema de Gestión de Talleres. ..................................... 67 Figura 26. Menú administrador para el Sistema de Gestión de Talleres. ............................. 67 Figura 27. Menú Representante para el Sistema de Gestión de Talleres. ............................. 67 Figura 28. Diseño del modelo de datos para el Sistema de Gestión de Talleres. ................. 75 Figura 29. Prototipo de interfaz. Iteración 1. ........................................................................ 77 Figura 30. Heurísticas de Nielsen ......................................................................................... 80 Figura 31. Resultados de las pruebas de aceptación representantes. .................................... 82 Figura 32. Resultados de las pruebas de aceptación administrador. ..................................... 83 10 Índice de tablas Tabla 1. Patrones de Interacción – Administrar Cartelera. ................................................... 68 Tabla 2. Patrones de interacción - Administrar Cartelera (Continuación Tabla 1). ............. 69 Tabla 3. Patrones de interacción - Gestionar Pagos. ............................................................. 69 Tabla 4. Patrones de interacción – Gestionar Pagos (Continuación Tabla 3). ...................... 70 Tabla 5. Patrones de interacción – Gestionar Pagos (Continuación Tabla 4). ...................... 71 Tabla 6. Patrones de interacción - Gestionar Inscripción. .................................................... 71 Tabla 7. Patrones de interacción - Administrar Taller. ......................................................... 72 Tabla 8. Patrones de interacción – Administrar Taller (Continuación Tabla 7). .................. 73 Tabla 9 Patrones de interacción- Generar Reportes. ............................................................. 73 11 1. Introducción El Centro Educativo de la Asociación de Profesores de la Universidad Central De Venezuela (CEAPUCV) es un colegio privado para los hijos y familiares de los profesores de la Universidad Central de Venezuela ubicado en el área metropolitana de Caracas, exactamente en la Urb. Colinas de Bello Monte, Ramal tres (3), calle Caurimare. En este colegio se imparten una serie de talleres que vienen a complementar las actividades académicas propias de la institución. Estos son opcionales para los estudiantes del colegio y tienen un costo adicional. Su objetivo principal es contribuir al desarrollo de ciertas competencias en los jóvenes a través de su participación en cursos deportivos, de música, manualidades, académicos, entre otros. 1.1. Planteamiento del Problema Coordinación de Extensión del CEAPUCV es la encargada de planificar, supervisar, asesorar y controlar el programa de talleres extracurriculares, así como es responsable de mantener una participación activa de estudiantes en los mismos. Actualmente todos los procesos necesarios para llevar a cabo la gestión de talleres extracurriculares se realizan de forma manual por lo cual existe una comunicación deficiente entre el coordinador de talleres y el representante, además que el único medio que permite que los estudiantes y representantes se mantengan informados acerca de los talleres es una cartelera física ubicada en el colegio. Debido a que todos estos procesos se realizan de forma manual, se hace muy tedioso el trabajo de gestión de talleres, así como también los tiempos de respuesta para los representantes son lentos, muchas veces ocurre que el representante tenga que pasar todo el día haciendo una cola para inscribir a su hijo y aun así no logre realizar la inscripción ese día debido a la demanda y la lentitud del sistema actual. Mantener una organización con respecto a la gestión de los talleres se hace sumamente complicado, debido a que anualmente se incrementa la variedad de talleres y la demanda para los mismos. 12 Entre las carencias de la forma actual de gestión, se tiene que no existe un canal de comunicación adecuado remoto entre los representantes y el coordinador de talleres, es necesario presentarse en el colegio para poder informarse de los talleres que se están dictando y la cantidad de cupos disponibles para los mismos, el control de los talleres se lleva de forma manual, lo cual hace que el generar reportes para cada taller sea bastante engorroso. Estos son reportes administrativos como la cantidad de alumnos que se han inscrito en algún taller, los alumnos de un grado específico inscritos en algún taller, todos los alumnos inscritos en un taller específico, entre otros. También es muy importante resaltar la problemática que genera la forma actual de gestión desde el punto de vista del administrador, ya que es necesario comunicarse personalmente con el administrador para llevar a cabo cualquier transacción que tenga que ver con los talleres, esto genera un cuello de botella, lo cual crea una presión y una cantidad de trabajo abrumadora para el administrador de talleres ya que este realiza todo de forma manual, lo cual también complica el mantener un orden adecuado para todos los documentos con los que este trabaja. 1.2. Objetivo General Con el desarrollo de este trabajo se pretende alcanzar el siguiente objetivo: Desarrollar un sistema para automatizar el proceso de gestión de talleres en el Centro Educativo de la Asociación de Profesores de la Universidad Central de Venezuela. 1.3. Objetivos Específicos  Observar los procesos ligados a la gestión de talleres del CEAPUCV. 13  Determinar los requerimientos que debe cumplir el sistema para la gestión de talleres del colegio.  Diseñar el Sistema de Gestión de Talleres en función de los requerimientos utilizando la metodología de desarrollo AgilUS.  Implementar el Sistema de Gestión de Talleres.  Realizar pruebas de aceptación para el Sistema de Gestión de Talleres. 1.4. Justificación La creación de un Sistema de Gestión de Talleres ayudaría a mantener un mayor grado de exactitud y eficiencia en cada uno de los procesos relacionados con la gestión de talleres, además que provee a la comunidad del CEAPUCV de un portal no solo para inscribir o retirar un taller, sino también como un medio de distribución de información el cual permitirá acceso a la misma para todos los miembros de la comunidad desde la comodidad de sus hogares u oficinas. El administrador de talleres también se verá beneficiado ya que este sistema le permitirá realizar todas las actividades referentes a la gestión de talleres de una forma más sencilla y rápida, disminuyendo así los tiempos de respuesta para cada operación. Los representantes se verán beneficiados debido que a que no tendrán que invertir tiempo en acercarse a las instalaciones del colegio y esperar a ser atendidos por el administrador de talleres para realizar cualquier tipo de gestión de pago. Por otro lado, el control de los pagos realizados lo podrán tener a la mano cuando deseen y logrando así obtener un mejor control de las transacciones realizadas y el estado de los talleres con los cuales se tenga algún interés. 14 Este trabajo está estructurado en cuatro (4) capítulos, los cuales se generan producto de la revisión documental, que permite aportar elementos importantes que apoyan este Trabajo Especial de Grado (TEG), estos capítulos son:  Capítulo 1: Este capítulo está relacionado con la problemática existente en el CEAPUCV referente a la gestión de talleres extracurriculares. Igualmente se presenta la justificación de la solución al problema planteado, además del objetivo general, los objetivos específicos y el alcance del TEG.  Capítulo 2: En este capítulo se estudian las diversas áreas de investigación referente a la problemática actual de la gestión de talleres, para dar a conocer la información en base a sus funcionalidades y procesos para la comunidad del CEAPUCV.  Capítulo 3: En este se estudia el método ágil de desarrollo AgilUs y su ciclo de vida. De igual manera se exponen las herramientas utilizadas en el desarrollo del sistema.  Capítulo 4. Marco aplicativo: En este capítulo se realiza un análisis e interpretación a partir de los resultados obtenidos de la implementación del método de desarrollo AgilUs. 15 2. Gestión de Talleres del CEAPUCV Los talleres extracurriculares se definen como un conjunto de actividades opcionales realizadas fuera del horario académico con la finalidad de complementar la formación del estudiante en diferentes áreas tales como deporte, cultura, artesanía, música, entre otras. Los procesos relacionados con la gestión de los talleres son los siguientes: 2.1. Anuncio o distribución de la información La única forma de consultar que talleres se van a impartir durante el año escolar y la disponibilidad de dichos talleres es mediante una cartelera que se encuentra en el colegio, en esta cartelera se publican los talleres que se impartirán durante el año escolar, la cantidad de cupos disponibles para cada uno de ellos y los horarios de los mismos. Así que la única forma que tiene un representante para consultar la información de los talleres es asistiendo a las instalaciones del CEAPUCV (en la figura 1 se puede observar la cartelera informativa de talleres). Figura 1: Cartelera informativa de Talleres. 16 2.2. Inscripción de talleres La inscripción de los talleres se mantiene abierta durante todo el año escolar, para llevar a cabo la inscripción de un estudiante en un taller de forma exitosa se necesita, es necesario realizar las siguientes actividades: Pre-inscripción de talleres. La pre-inscripción de los talleres actualmente se puede llevar a cabo de dos (2) formas:  Una es mediante el correo electrónico. Al administrador de talleres le hace llegar una planilla de inscripción a los representantes, quienes a su vez la llenan con los datos correspondientes y la envían de regreso. Una vez realizado este proceso el administrador de talleres procede a reservar el cupo solicitado en caso de que todavía queden cupos disponibles para el taller.  La otra forma es dirigiéndose a las instalaciones del CEAPUCV, específicamente a la Coordinación de Extensión del colegio para hablar personalmente con el administrador de talleres, llenar la planilla y de esta forma reservar el cupo en el taller deseado. Formalización de la inscripción de talleres.  El representante debe realizar un depósito bancario correspondiente al monto de la inscripción y de al menos una mensualidad. Una vez realizado el depósito, el representante debe dirigirse a la Coordinación de Extensión del CEAPUCV con el recibo de pago para validar la formalización de inscripción de su representado al taller. Luego de esto el representante puede cancelar las cuotas de forma mensual, trimestral, o incluso realizar el pago del año completo. 17 En la figura 2, se puede observar una ilustración sobre el proceso de inscripción de talleres, y cada uno de los pasos a seguir para poder llevar a cabo una inscripción exitosa. Figura 2: Proceso de inscripción de talleres. 2.3. Control de estudiantes inscritos en talleres El control de estudiantes inscritos en talleres se efectua a través del uso de listados. Dichos listados se organizan por grado y por talleres. Otro listado que se genera es el de talleristas, en el cual se lleva un control de asistencia de los mismos. 18 3. Metodología y Herramientas En este capítulo se estudia el método de desarrollo ágil AgilUs, y cada una de las herramientas de desarrollo Web que se utilizan en el desarrollo del Sistema de Gestión de Talleres. 3.1. AgilUS Los aspectos de interfaz en una aplicación resultan un punto importante que debe ser tomado en consideración con la finalidad de lograr una experiencia agradable entre el usuario final y la aplicación. También deben considerarse los tiempos de desarrollo, buscando reducirlos para obtener satisfacción por parte del usuario y una mayor productividad por parte del desarrollador. Bajo un enfoque ágil, la usabilidad debe considerarse en cada etapa de desarrollo del software. Tal y como lo establece Acosta [16], "Son muchos los métodos propuestos para el desarrollo de software y son muchas las herramientas y técnicas con que cuentan los ingenieros de software para realizar su trabajo". Por otro lado, se encuentra el grupo de desarrolladores en el área de Interacción Humano-Computador, el cual también considera algunas técnicas para la elaboración de un producto usable. Con la metodología AgilUS se persigue abarcar aspectos de usabilidad incorporando los dos puntos de vista planteados anteriormente, dando lugar a un conjunto de buenas prácticas y evaluaciones aplicadas al software. "Se plantea el desarrollo de un sistema partiendo de un prototipo de la interfaz de usuario, y que incorpora la aplicación de diversas técnicas de evaluación de usabilidad desde el inicio del ciclo de vida de la aplicación" [16]. Para lograr la elaboración de un producto final de calidad, se incorpora la retroalimentación con el usuario en cada una de las etapas planteadas en AgilUS. Acosta [16] establece que “…el método propuesto hace énfasis la obtención de ese feedback desde etapas tempranas del desarrollo, con la aplicación de tormentas de ideas, encuestas y prototipos en papel…”. 19 Para alcanzar la usabilidad, en cada etapa de desarrollo se considera como eje principal las características y actividades comúnmente realizadas por el usuario, aplicando técnicas de diseño centradas en el mismo; de esta manera se determinan las metas que contemplan cada una de las etapas, así como los objetivos que debe satisfacer el producto final. La alternativa de AgilUS como metodología de desarrollo se trata de una propuesta llevada a cabo por el Centro de Ingeniería de Software y Sistemas (ISYS) de la Escuela de Computación, Universidad Central de Venezuela, producto de una investigación basada en el análisis de aspectos de usabilidad en un sistema. El objetivo que persigue dicha metodología es el de “…evolucionar el software, a fin de que éste alcance el mayor grado de usabilidad una vez culminado su desarrollo” [16]. Se trata de una metodología basada en iteraciones, en donde cada iteración abarca diferentes actividades que se ejecutan de manera incremental, otorgándole prioridad a los aspectos de diseño y desarrollo en términos de usabilidad. El aspecto estético de la interfaz no se deja como tarea final, sino se toma en cuenta a lo largo del desarrollo de las etapas. La evaluación y análisis de los requisitos y la elaboración de prototipos, son actividades contempladas en esta metodología. Las disciplinas Ingeniería de Software e Interacción Humano-Computador se combinan para fundar las bases de AgilUS sin dejar de lado la usabilidad, la cual se encuentra presente desde el inicio del desarrollo del software para generar un producto final de calidad. El hecho de considerar la usabilidad uno de los principios de AgilUS se debe a que un software usable es considerado útil, ya que la usabilidad y la utilidad de un software van de la mano. Un usuario que interactúa con el sistema, debe hacerlo de forma intuitiva y satisfactoria, sólo así se determina la utilidad y usabilidad del sistema. 20 3.1.1. Buenas prácticas Las buenas prácticas aplicadas en esta metodología están orientadas al cumplimiento de los requerimientos básicos estipulados por el usuario, avanzando incrementalmente en cada una de las etapas y tomando en cuenta los aspectos de usabilidad. Entre las buenas prácticas se encuentran:  Diseño centrado en el usuario (DCU), basado en las preferencias e inclinaciones que presenta el usuario frente al sistema que desea. “…en el DCU se procura construir el sistema para adaptarse, a través de su interfaz, a cómo el usuario desea trabajar, en lugar de forzar al usuario a cambiar su modo de trabajar para adaptarse a lo que los desarrolladores consideraron apropiado” [16]. Para lograr este diseño, el desarrollador debe realizar varias pruebas con el sistema para determinar si poco a poco se van satisfaciendo las necesidades del usuario.  Diseño basado en prototipos, donde cada uno es revisado y probado por usuarios finales y especialistas en el área de usabilidad. La construcción de cada prototipo viene dada en función de la respuesta que emiten los usuarios y especialistas ante dicho prototipo, permitiendo de esta manera poder seguir avanzando con la construcción del siguiente prototipo. Este proceso se lleva a cabo de manera cíclica hasta culminar la elaboración del producto final.  Simplicidad en el desarrollo del sistema, previendo posibles cambios en el futuro.  Desarrollo incremental, de manera de establecer y cumplir requisitos a medida que se desenvuelve el proyecto.  Desarrollo iterativo, permitiendo el rediseño e implementación de actividades llevadas a cabo en cada una de las etapas. El objetivo al diseñar e implementar en cada iteración consiste en realizarlo de manera simple para no dejar de un lado la posibilidad de rediseñar. Para determinar si debe llevarse a cabo un rediseño, el 21 usuario evalúa el producto y expone su opinión al desarrollador, quien toma en cuenta dicha opinión conjuntamente con el análisis de las funcionalidades del sistema.  Usabilidad como requisito esencial para considerar un software de calidad.  Interacción entre el equipo desarrollador y el usuario, un aspecto vital si se considera la usabilidad en cada etapa, ya que es el usuario quien determina la misma. 3.1.2. Ciclo de vida Como se ha mencionado anteriormente, en la metodología AgilUS, la usabilidad es un aspecto que debe incluirse en cada etapa de desarrollo; para ello se toma en consideración la evaluación que realiza el usuario luego de interactuar con el sistema. En cada etapa, se desarrollan diferentes prototipos que pueden mejorarse en base a las observaciones realizadas. Cada etapa del ciclo de desarrollo se lleva a cabo de manera incremental e iterativa mediante la construcción de prototipos hasta obtener un producto final para la entrega, sin dejar de lado la usabilidad en cada una de las actividades desarrolladas. 22 Figura 3: Etapas de desarrollo y artefactos de AgilUS [16]. Como se aprecia en la (Figura 3), el ciclo de vida de AgilUS comprende la especificación de requisitos, el análisis de dichos requisitos, la elaboración de prototipos (prototipaje) y para culminar, la entrega del producto final. Cada una de las etapas incluye la construcción de diversos artefactos, que pueden ser sujetos a modificaciones hasta obtener el producto final. A continuación se realiza una descripción de cada etapa:  Requisitos: Se lleva a cabo el levantamiento de requerimientos, generando un perfil de usuario. Cada requerimiento definido se debe desarrollar e implementar para cumplir con las exigencias del usuario.  Análisis: Una vez estipulados los requisitos que persigue el sistema, se debe realizar un análisis sobre los mismos, para determinar de qué manera serán implementados, para lo cual se toma como apoyo los diferentes diagramas realizados bajo la notación estándar del Lenguaje de Modelado Unificado o UML (por sus siglas en inglés: Unified Modeling Language). 23  Prototipaje: Son elaborados diversos prototipos, incluyendo un prototipo de Interfaz Gráfica de Usuario o GUI (por sus siglas en inglés: Graphical User Interface), facilitado por los diagramas de interacción. En esta etapa, el usuario lleva a cabo la evaluación de los prototipos a fin de conocer si los mismos cumplen con los principios de usabilidad. Para realizar estas inspecciones de usabilidad, se lleva a cabo la elaboración de listas de comprobación, las cuales se utilizan para juzgar los atributos y los métodos de interacción de la interfaz de usuario; también se elaboran guías de estilo, con la cuales se determinan las normativas en relación al aspecto de la interfaz; por último se lleva a cabo una evaluación heurística, que consiste en un análisis de los aspectos de usabilidad para determinar si se encuentran incluidos en cada elemento de la interfaz de usuario.  Entrega: Consiste en la aplicación de pruebas finales para confirmar que la aplicación cumple con los principios de usabilidad. Posteriormente, la aplicación es pasada a producción. Al considerar los principios de AgilUS y efectuar rigurosamente cada fase del ciclo de vida, se podrá obtener como resultado un producto de calidad cuyo componente principal será la usabilidad. Es importante tener presente durante todo el proceso de desarrollo, que es el usuario y no el cliente o el equipo desarrollador, el protagonista y juez que dictamina si los aspectos de usabilidad son cubiertos por el sistema. Debido a la mínima cantidad de generación de artefactos, los tiempos de desarrollo disminuyen y resulta más fácil incorporar cambios que son considerados necesarios y que van surgiendo a lo largo del ciclo de vida. Mediante el diseño de prototipos que evolucionan en función de las necesidades del usuario, el sistema va estructurándose hasta llegar a convertirse en el producto final. 3.2. Arquitectura Cliente – Servidor En el mundo de TCP/IP las comunicaciones entre computadoras se rigen básicamente por lo que se llama modelo Cliente-Servidor, éste es un modelo que intenta proveer usabilidad, flexibilidad, interoperabilidad y escalabilidad en las comunicaciones. 24 El término Cliente/Servidor fue usado por primera vez en 1980 para referirse a PC’s en red [1]. Desde un punto de vista funcional, podemos definir el modelo cliente – servidor como una arquitectura distribuida, que permite a los usuarios finales, obtener acceso a la información en forma transparente, aun en ambientes multiplataforma [2]. Funciona de manera sencilla: Se tiene una maquina cliente, la cual requiere un servicio de maquina servidor, y esta realiza la función para la cual está programada. La arquitectura cliente – servidor se divide en dos partes que se encuentran muy bien diferenciadas. La primera es la parte del servidor, y la segunda es la parte del conjunto de clientes. Ambas partes deben estar conectadas entre sí por medio de una red. A continuación en la figura 4 podemos observar la gráfica que corresponde al tipo de arquitectura cliente – servidor. Figura 4: Arquitectura cliente – servidor [1]. El servidor es una aplicación que se encarga de ofrecer un servicio a sus usuarios. Un cliente es aquel que solicita dicho servicio, es decir, realiza una petición. El servidor 25 recibe una solicitud, realiza el servicio requerido y devuelve los resultados en forma de una respuesta (figura 5) [3]. Generalmente un servidor puede atender múltiples peticiones (múltiples clientes) al mismo tiempo. Si se aplica el principio de distribución, cada máquina puede cumplir el rol de servidor para algunas tareas, y el rol de cliente para otras. Los clientes y los servidores pueden estar conectados a una red local o una red amplia, como la que se puede implementar en una empresa o a una red mundial como lo es internet [3]. Figura 5: Arquitectura cliente – servidor. Proceso de petición – respuesta. [1] Lo deseable es el uso de una computadora como una herramienta, que por sí sola pueda realizar muchas tareas, en especial aquellas que son más adecuadas a sus características. Si dicho aspecto se aplica tanto a clientes como servidores, se entiende que la forma estándar de aplicación y uso de sistemas cliente-servidor es mediante la explotación de las computadoras a través de interfaces gráficas de usuario, mientras que la administración de datos y su seguridad e integridad se delega a computadoras centrales tipo 26 mainframe. Usualmente, la mayoría del trabajo pesado se realiza en un proceso llamado servidor, y los procesos cliente sólo se ocupan de la interacción con el usuario (aunque esto puede variar) [3]. La arquitectura cliente-servidor es una extensión de la programación modular cuyo fundamento consiste en separar una gran pieza de software en pequeños módulos, con el fin de hacer menos complejo el desarrollo y mejorar su mantenimiento. 3.3. Patrón Modelo – Vista – Controlador Un patrón puede definirse como la solución modular a un problema, cada módulo asume un rol bien definido en el patrón, los cuales siguiendo un conjunto de reglas nos acerca a la solución de nuestro problema. Buscando una definición formal tenemos lo siguiente: No hay ninguna definición generalmente aceptada de patrón, pero tal vez el mejor lugar para empezar es Christopher Alexander, una inspiración para muchos entusiastas de los patrones: “Cada patrón describe un problema que se produce una y otra vez en nuestro entorno y, a continuación describe el núcleo de la solución a ese problema, de tal forma que puede utilizar esta solución millones de veces, sin hacerlo de la misma manera dos veces”. Los patrones no son ideas originales, sino que son muchas observaciones de lo que sucede en el campo. Como resultado, los autores de patrones no se dice que “inventamos” un patrón, sino que “descubrimos” uno. Nuestro papel es observar la solución común, buscar su esencia, y luego escribir el patrón resultante [4]. La idea básica del patrón modelo vista controlador (MVC) consiste en separar la parte del modelo, con la parte de la vista y la parte del controlador. Cada uno de estos son tratados por separados, pero existe una comunicación entre capas la cual permite la conformación de un todo El modelo es aquel que se encarga de la representación de los datos y las reglas del negocio correspondientes a la aplicación, las cuales, luego de ser establecidas en el contexto del sistema, se encargan de proveer de información a la aplicación o al usuario. 27 La vista es aquella que representa de forma gráfica el modelo, es decir, la interfaz de usuario. En el caso específico de una aplicación Web, al hablar de vista nos referimos a una página HTML que incluye contenido dinámico. El controlador es aquel encargado de la dirección y repuesta a todas las solicitudes realizadas por el usuario. La principal ventaja de este patrón, es que logra separar la lógica de negocio (modelo) y la presentación (vista) lo cual permite un mantenimiento más sencillo de las aplicaciones. Otra ventaja derivada de esta separación es que al momento de realizar cambios en el modelo, estos no necesariamente deben afectar a la vista, de la misma forma al llevar a cabo cambios en una vista estos no tienen por qué tener efecto en el modelo. “un cambio en una aplicación MVC tiende a ser localizado y de bajo impacto, facilitando considerablemente el mantenimiento mientras aumenta el nivel de reutilización entre los componentes” [3]. 28 Figura 6: Ciclo de vida MVC [3]. Como se puede apreciar en la (figura 6), el ciclo de vida inicia cuando un usuario se conecta a internet a través del protocolo HTTP, y realiza una solicitud al controlador, este se encarga de atender dicha solicitud y delegar la tarea al modelo, el cual se encarga de realizar operaciones sobre la información que maneja para cumplir con la tarea que le ha sido asignada por el controlador. Una vez que el modelo culmina la tarea, emite una respuesta hacia el controlador con la información obtenida después de llevar a cabo dicha tarea, el controlador posteriormente se encarga de redirigir la respuesta hacia la vista, la cual se encarga a su vez de transformar la respuesta en información entendible por el usuario. Luego de este proceso, la vista transmite la representación gráfica de los datos al controlador, quien se encargara de transmitírselos al usuario que realizo la solicitud, este ciclo se puede llevar a cabo dependiendo de la cantidad de veces que lo solicite el usuario. 29 Dependiendo del contexto, los usuarios desean ver la misma información básica de un modelo de diferentes maneras. Si se separa el modelo de la vista, se pueden desarrollar múltiples vistas (con interfaces totalmente diferentes, inclusive) utilizando el código del modelo. En este aspecto radica una de las ventajas de MVC [3]. 3.4. Aplicaciones Web Al comienzo la Web no era más que una colección de páginas estáticas, documentos, etc., que podían consultarse y descargarse. Posteriormente, se incorporó un método denominado CGI (Common Gateway Interface, por sus siglas en inglés) para realizar páginas con contenido dinámico, permitiendo transmitir información entre un servidor HTTP y programas externos. Una ventaja de los CGI es que permiten elegir el lenguaje de programación en el cual se desea desarrollarlos (uno de los motivos por el cual aún son utilizados con frecuencia). Sin embargo, presentan un problema al momento de ser ejecutados por el servidor. Como son desarrollados en cualquier lenguaje interpretado, esto implica mucha carga para la máquina del servidor. Además, si se recibían muchas peticiones al CGI, esto suponía problemas graves. Teniendo como motivo principal solucionar los problemas de rendimiento se comienza con el desarrollo de nuevas alternativas a los CGI. Una de estas alternativas consiste en el desarrollo de módulos incluidos en el servidor para incluir las páginas en el código de manera que el servidor sea quien lo ejecute, reduciendo así el tiempo de respuesta. Tomando como base estas dos alternativas surge una nueva alternativa, la consiste en una mezcla de las mismas: Utilizar un lenguaje de programación que permite al servidor interpretar comandos incrustados en las páginas HTML y un sistema de programas relacionado con el servidor que elimina los problemas de rendimiento presentes con la utilización de los CGI. Una aplicación Web se trata de una aplicación “en la cual un usuario por medio de un navegador realiza peticiones a una aplicación remota accesible a través de Internet (o a 30 través de una intranet) y que recibe una respuesta que se muestra en el propio navegador” [5]. Actualmente se ha incrementado el desarrollo de aplicaciones para el entorno Web en función de diferentes lenguajes de programación, utilizando las diferentes alternativas propuestas y tecnologías presentes. Los cambios y las mejoras realizadas en una aplicación Web son incorporados de manera casi instantánea (a diferencia de las aplicaciones de escritorio, las cuales deben instalarse y actualizarse en cada computadora de manera individual) [3]. Entre las ventajas que incorporan las aplicaciones Web se encuentran:  Fácil de distribuir.  Fácil de desarrollar.  Fácil de mantener.  Plataforma independiente.  Accesible por cualquier usuario. 3.5. Tecnologías A continuación alguna de las herramientas las cuales permiten construir aplicaciones complejas requiriendo menos esfuerzo y mayor orden por parte del desarrollador. 3.5.1. HTML HTML es el acrónimo de Lenguaje de Marcado de Hipertexto (HyperText Markup Language, por sus siglas en inglés) y “es el lenguaje que se utiliza para crear las páginas Web. Es uno de los principales componentes de la plataforma Web abierta” [6]. Es un lenguaje muy sencillo que permite describir hipertexto, es decir, texto presentado de forma estructurada, con enlaces que conducen a otros documentos o fuentes 31 de información relacionadas. Además de texto, puede contener inserciones multimedia tales como imágenes, gráficos, sonido etc. y así presentar un producto más dinámico. La descripción se basa en especificar en el texto la estructura lógica del contenido (títulos, párrafos de texto normal, enumeraciones, definiciones, citas, etc.) así como los diferentes efectos que se quieren dar sobre el mismo, para luego finalmente dejar que la presentación final de dicho hipertexto se realice por un programa especializado denominado navegador Web. El lenguaje HTML indica a los navegadores cómo deben mostrar el contenido de una página Web. Los navegadores se encargan de interpretar el código HTML de los documentos, y de mostrar a los usuarios las páginas Web resultantes del código interpretado. HTML se creó en un principio con objetivos meramente divulgativos. No se pensó que la Web llegaría a ser un área de ocio con carácter multimedia, de modo que, el HTML se creó sin dar respuesta a todos los posibles usos que se le iba a dar y a todos los colectivos de gente que lo utilizarían en un futuro. Sin embargo, pese a esta deficiente planificación, se han ido incorporando modificaciones poco a poco con el tiempo, y ahora todo eso encapsulado se transformó en estándares del HTML. HTML5, la última versión del Lenguaje de Marcado de Hipertexto (HTML) 5, es la revisión más radical del lenguaje hasta la fecha. Con esta versión se introducen nuevas características en una variedad de áreas. Algunas de las adiciones más notables son:  Las etiquetas multimedia para audio y video con soporte a distinto códec.  La etiqueta canvas para dibujar contenido en el navegador (2D y 3D)  Las etiquetas datagrid, details, menu y command, que permiten manejar grandes conjuntos de datos  Formularios más inteligentes que nos permitirán hacer cosas como validación de llenado mediante el uso de atributos requeridos, a través de los nuevos tipos email, number, url, datetime, etc.  APIs que permiten Arrastrar y soltar objetos como imágenes, trabajar Off-Line, utilizar Geo-posicionamiento, almacenamiento persistente con base de datos local, Web Sockets y más. http://www.baluart.net/categoria/html5 http://www.baluart.net/articulo/como-embeber-videos-usando-html5 32 Con un nuevo conjunto de etiquetas estructurales, HTML5 actualiza la forma en que los documentos HTML están estructurados. Estas nuevas etiquetas estructurales se enfocan en dividir un documento HTML en partes lógicas, cuyo nombre de etiqueta es descriptivo del tipo de contenido que está destinado a tener [6]. Algunas de las adiciones más notables son: Estructura del cuerpo: La mayoría de las Webs tienen un formato común, formado por elementos como cabecera, pie, navegadores, etc. HTML5 permite agrupar todas estas partes de una Web en nuevas etiquetas que representarán cada uno de las partes típicas de una página. Estas nuevas etiquetas estructurales se enfocan en dividir un documento HTML en partes lógicas, cuyo nombre de etiqueta es descriptivo del tipo de contenido que está destinado a tener. Etiquetas para contenido específico: Hasta ahora se utilizaba una única etiqueta para incorporar diversos tipos de contenido enriquecido, como animaciones Flash o vídeo. Ahora se utilizarán etiquetas específicas para cada tipo de contenido en particular, como audio, vídeo, etc. Con un nuevo conjunto de etiquetas estructurales, HTML5 actualiza la forma en que los documentos HTML están estructurados. Canvas: Se trata de un nuevo componente que permitirá dibujar, por medio de las funciones de un API, en la página todo tipo de formas, que podrán estar animadas y responder a interacción del usuario. Es algo así como las posibilidades que ofrece Flash, pero dentro de la especificación del HTML y sin la necesidad de tener instalado ningún plugin. Bases de datos locales: El navegador permitirá el uso de una base de datos local, con la que se podrá trabajar en una página Web por medio del cliente y a través de un API. Es algo así como las cookies, pero pensadas para almacenar grandes cantidades de información, lo que permitirá la creación de aplicaciones Web que funcionen sin necesidad de estar conectados a internet. Formularios más inteligentes: Éstos permitirán hacer cosas como validación de llenado mediante el uso de atributos requeridos, a través de los nuevos tipos email, number, url, datetime, etc. 33 Fin de las etiquetas de presentación: Todas las etiquetas que tienen que ver con la presentación del documento, es decir, que modifican estilos de la página, serán eliminadas. La responsabilidad de definir el aspecto de una Web correrá a cargo únicamente de CSS [7]. En estos momentos, HTML5 no ha sido oficialmente liberado. La mayor parte de los contenidos de la Web aún se están escribiendo para la especificación HTML 4. Sin embargo, varios navegadores incluyen soporte para la especificación de HTML 5. Debido a que cada navegador puede soportar sólo algunas de las características de HTML5, las cosas pueden ser un poco pesadas. Antes de escribir un sitio Web basado en HTML5, hay que probar cada uno de los navegadores (o por lo menos los más usados) para asegurarnos de que cuenta con las características o funcionalidades que vamos a utilizar en nuestro sitio [6]. 3.5.2. CSS Hojas de Estilo en Cascada (Cascading Style Sheets), es un mecanismo simple que describe cómo se va a mostrar un documento en la pantalla, o cómo se va a imprimir, o incluso cómo va a ser pronunciada la información presente en ese documento a través de un dispositivo de lectura. Esta forma de descripción de estilos ofrece a los desarrolladores el control total sobre estilo y formato de sus documentos. CSS se utiliza para dar estilo a documentos HTML y XML, separando el contenido de la presentación. Los Estilos definen la forma de mostrar los elementos HTML y XML. CSS permite a los desarrolladores Web controlar el estilo y el formato de múltiples páginas Web al mismo tiempo. Cualquier cambio en el estilo marcado para un elemento en la CSS afectará a todas las páginas vinculadas a esa CSS en las que aparezca ese elemento [8]. CSS es un lenguaje utilizado para especificar el aspecto de una página Web para diferentes dispositivos. Describe cómo se va a mostrar un documento en la pantalla o cómo se va a imprimir, incluso cómo va a ser mostrada la información presente en el documento a través de cualquier dispositivo. Este aspecto contrasta con la concepción de HTML, el cual es un lenguaje que define la estructura de un documento para su distribución por la http://w3.org/MarkUp/ http://w3.org/XML/ 34 Web. El documento HTML le indica al navegador cómo se estructura el documento, mientras que el CSS le indica cómo debe renderizarlo. El objetivo inicial de CSS que consistía era separar el contenido de la forma de visualización, se cumplió con las primeras especificaciones del lenguaje. Sin embargo, el objetivo de ofrecer un control total a los diseñadores sobre los elementos de la página ha sido más difícil de cubrir. Las especificaciones anteriores del lenguaje tenían muchas utilidades para aplicar estilos a las Webs, pero los desarrolladores aún continúan usando diversos trucos para conseguir efectos que cada vez son más requeridos por los usuarios finales. 3.5.3. JavaScript Se trata de un lenguaje de programación que se utiliza principalmente para crear páginas Web dinámicas, las cuales incorporan texto con efectos variados, animaciones, acciones que se activan al pulsar botones y ventanas con mensajes de aviso al usuario [3]. De manera técnica se describe como un lenguaje de programación interpretado, por lo que no es necesario compilar los programas para ejecutarlos. Una aplicación que utiliza JavaScript se puede probar directamente en cualquier navegador sin necesidad de procesos intermedios. La integración de JavaScript y XHTML es muy flexible, ya que existen al menos tres formas para incluir código JavaScript en las páginas Web. Una de ellas consiste en Incluir JavaScript en el mismo documento XHTML. El código JavaScript se encierra entre etiquetas <script> y se incluye en cualquier parte del documento XHTML. Aunque es correcto incluir cualquier bloque de código en cualquier zona de la página, se recomienda definir el código JavaScript dentro de la cabecera del documento [3]. Las instrucciones JavaScript también se pueden incluir en un archivo externo de tipo JavaScript que los documentos XHTML se encargan de enlazar. Los archivos de tipo JavaScript son documentos normales de texto con la extensión .js, que se pueden crear con cualquier editor de texto como Notepad, Wordpad, EmEditor, UltraEdit, Vi, etc. La principal ventaja de enlazar un archivo JavaScript externo es que se simplifica el código 35 XHTML de la página, que se puede reutilizar el mismo código JavaScript en todas las páginas del sitio Web y que cualquier modificación realizada en el archivo JavaScript se ve reflejada inmediatamente en todas las páginas XHTML que lo enlazan. Un último método consiste en incluir trozos de JavaScript dentro del código XHTML de la página. El mayor inconveniente de este método es que ensucia innecesariamente el código XHTML de la página y complica el mantenimiento del código JavaScript. En general, este método sólo se utiliza para definir algunos eventos y en algunos otros casos especiales. JavaScript es soportado por la mayoría de los navegadores como Internet Explorer, Opera, Mozilla Firefox, Google Chrome, entre otros; sin embargo, se debe tomar en cuenta que aunque JavaScript sea soportado en gran cantidad de navegadores, los usuarios pueden elegir la opción de activar/desactivar el JavaScript en los mismos [3]. 3.5.4. AJAX JavaScript Asíncrono y XML, AJAX (acrónimo de Asynchronous JavaScript And XML, por sus siglas en inglés). Se trata de una técnica de desarrollo Web para crear aplicaciones interactivas, las cuales se ejecutan del lado del cliente y mantienen una comunicación asíncrona con el servidor en segundo plano, consiguiendo realizar cambios sobre la misma página sin necesidad de recargarla. Esto implica un aumento de la interactividad, velocidad y usabilidad en la misma. “Ajax no es una tecnología en sí mismo. En realidad, se trata de varias tecnologías independientes que se unen de formas nuevas y sorprendentes” [10]. 36 Figura 7: Tecnologías agrupadas bajo el concepto de AJAX [3]. En la (figura 7) se exponen las diferentes tecnologías que forman AJAX. En el nivel superior se encuentra XHTML y CSS para crear una presentación basada en estándares, y XML y JSON para proveer un formato para el intercambio y manipulación de la información. En el siguiente nivel se encuentra DOM para la interacción y manipulación dinámica de la presentación, así como XMLHttpRequest para el intercambio asíncrono de información. Por último, en el nivel base se encuentra JavaScript para unir todas las demás tecnologías. Desarrollar aplicaciones AJAX requiere un conocimiento avanzado de todas y cada una de las tecnologías anteriores. En las aplicaciones Web tradicionales, cualquier acción del usuario en la página desencadena llamadas al servidor. Una vez procesada la petición del usuario, el servidor devuelve una nueva página HTML al navegador del usuario. Esta técnica funciona correctamente, pero no le otorga al usuario la mejor visualización al recargarse la página, ya que debe esperar que la misma se actualice completamente. Esto sugiere un inconveniente si la aplicación realiza continuas peticiones al servidor. AJAX permite mejorar la interacción del usuario con la aplicación, evitando recargar la página por completo y constantemente mediante la creación de una capa adicional que funciona como intermediario entre el usuario y el servidor. Dicha capa mejora el tiempo de respuesta de la aplicación, ya que el usuario no debe esperar la respuesta del servidor con la ventana del navegador vacía [3]. 37 3.5.5. jQuery jQuery es una biblioteca JavaScript rápida, pequeña y rica en funciones. Hace cosas como manipular documentos HTML, el control de eventos, animaciones y Ajax mucho más simple con un API fácil de usar que funciona entre una multitud de navegadores. Con una combinación de flexibilidad y extensibilidad, jQuery ha cambiado la forma en que millones de personas escriben JavaScript [10]. jQuery facilita el trabajo del desarrollador, ya que brinda compatibilidad con múltiples navegadores, lo cual evita que el desarrollar deba generar un código JavaScript que se adapte igual en todos los navegadores existentes. jQuery brinda otra ventaja como puede ser la reducción de líneas de código para realizar acciones así como simplificar comandos, que si bien en código JavaScript podrían ser instrucciones largas y difícil de recordar, utilizando jQuery estas instrucciones se reducen a comandos más fáciles de recordar y considerablemente más cortos en cuanto a cantidad de caracteres se trata. 3.5.6. jQuery UI Se trata de un plugin basado en jQuery, el cual se utiliza para la creación de aplicaciones Web altamente interactivas. Permite la construcción de interfaces Web otorgando un nivel de abstracción en relación a efectos avanzados, así como interacciones y animaciones entre el usuario y la aplicación. Se encuentra compuesto por cuatro módulos:  Núcleo: funciones básicas para los otros módulos.  Componentes de interacción: drag & drop (arrastrar y soltar), ordenamiento, redimensionamiento, entre otros.  Efectos: mostrar, ocultar, color, animación, entre otros.  Widgets: Un widget se trata de un componente reutilizable de la interfaz de usuario, visualmente atractivo y configurable. Entre widgets más comunes se encuentran: 38  Menú con efecto acordeón: Permite mostrar diversos contenidos clasificados en secciones. Cada sección posee un título que se utiliza para abrir el contenedor y mostrar su contenido. Al presionar el encabezado de una de las secciones, su contenido se visualiza justo debajo del mismo. Se puede visualizar el contenido de una sección determinada hasta que se cierra automáticamente luego de abrir otra sección. La ventaja de este componente de jQuery es que permite ahorrar espacio en la página Web al permitir visualizar una sola sección a la vez. Figura 8: Ejemplo de un menú con efecto de acordeón [12].  Calendario gráfico: Conocido como datepicker, es un plugin configurable que permite incorporar la funcionalidad de un calendario a una página Web. Se puede personalizar el formato e idioma de la fecha, restringir los rangos de fechas seleccionables y añadir botones y otras opciones para navegar fácilmente entre las fechas. 39 Figura 9: Ejemplo de un calendario implementando el componente DatePicker [12].  Diálogos: Un diálogo es una ventana flotante que contiene una barra de título y un área de contenido. Una ventana de diálogo puede ser desplazada, cambiada de tamaño y cerrada. Permite mostrar un mensaje específico, incluir imágenes o inclusive, contenido interactivo como un formulario. Figura 10: Ejemplo de un cuadro de diálogo [12].  Pestañas: Mejor conocidas como tabs, son similares al menú con efecto de acordeón, ya que permiten agrupar el contenido de la página en diversas secciones. Cada pestaña se encuentra estructurada de manera que cada sección se halla alineada horizontalmente una al lado de la otra, mientras que el contenido de cada una se sitúa debajo de cada encabezado. Al seleccionar una 40 pestaña, queda al descubierto su respectivo contenido. Sólo un contenedor puede estar abierto al mismo tiempo. Figura 11: Ejemplo del uso de pestañas para clasificar el contenido de la página [12]. El plugin jQuery UI es compatible con navegadores como Internet Explorer, Safari, Opera, Mozilla Firefox y Google Chrome y su uso e implementación es sencilla. Resulta una herramienta útil cuando se desean incorporar diversos componentes en el diseño de interfaces en páginas Web, añadiendo funcionalidades y efectos variados [12]. 3.5.7. Sistema manejador de base de datos MySQL ¿Qué es MySQL? Es un sistema manejador de bases de datos relacionales (RDBMS por sus siglas en inglés Relational Database Management System). Este tipo de bases de datos puede ejecutar desde acciones sencillas, como insertar y borrar registros, actualizar información o hacer consultas simples, hasta realizar tareas tan complejas como la aplicación lo requiera. MySQL es un servidor multi-usuarios muy rápido y robusto de ejecución de instrucciones en paralelo, es decir, que múltiples usuarios distribuidos a lo largo de una red 41 local o Internet podrá ejecutar distintas tareas sobre las bases de datos localizadas en un mismo servidor. Utiliza el lenguaje SQL (Structured Query Language) que es el estándar de consulta a bases de datos a nivel mundial. MySQL ha estado disponible desde 1996, pero su desarrollo data desde 1979 y ha ganado 3 años consecutivos el premio Linux Journal Reader’s Choice Award. Actualmente disponible en código abierto [12]. Ventajas y desventajas de MySQL. A continuación se presentan una serie de ventajas y desventajas. Previamente se han mencionado algunas de las características del manejador, las cuales pueden incluirse entre sus principales ventajas y desventajas. Ventajas.  Compatibilidad con el lenguaje SQL.  Con el manejador MySQL se pueden crear vistas, procedimientos, disparadores, definir restricciones de integridad.  Posee la alternativa de replicación de los datos para incrementar la protección de los mismos al ocurrir una falla del sistema y para proveer mayor eficiencia y rapidez al momento de realizar consultas sobre la base de datos.  Incluye una interfaz de usuario para facilitar las labores de administración de la base de datos.  Manejo y recuperación de transacciones. Tal y como lo menciona Michael Kofler: “En el contexto de un sistema de bases de datos, una transacción significa la ejecución de varias operaciones de bases de datos como un bloque. El sistema de base de datos asegura que, o bien todas las operaciones se ejecutan correctamente o ninguna de ellas se ejecuta. Esto es válido incluso si en medio de una transacción ocurre una falla de electricidad, la computadora se bloquea, o algún otro desastre se produce” [3]. Establece que las transacciones permiten al programador interrumpir comandos ejecutados previamente, lo cual simplifica muchas veces el proceso de programación. 42  Se pueden utilizar diversos lenguajes de programación para desarrollar aplicaciones de MySQL, tales como C, C++, Java, Perl, PHP, Phython, etc.  Es multiplataforma, es decir, puede ejecutarse en diversos sistemas operativos, tales como Linux, Microsoft Windows, Apple Macintosh OS X y algunas variantes de Unix. Desventajas.  Cuando se utilizan tablas con motor de almacenamiento tipo MyISAM, al momento de consultar o modificar la información de la base de datos, toda la tabla donde se encuentra dicha información es bloqueada.  Al utilizar tablas MyISAM, MySQL no puede llevar a cabo copias de seguridad “en caliente” (las cuales son copias de la información durante la operación sin bloquear las tablas).  Muchos manejadores de bases de datos permiten definir tipos de datos por el usuario. MySQL no provee tal funcionalidad. 3.5.8. JAVA Java es un lenguaje de programación y la primera plataforma informática creada por Sun Microsystems en 1995. Es la tecnología subyacente que permite el uso de programas punteros, como herramientas, juegos y aplicaciones de negocios. Java se ejecuta en más de 850 millones de ordenadores personales de todo el mundo y en miles de millones de dispositivos, como dispositivos móviles y aparatos de televisión. ¿Por qué es necesario Java? Existe un gran número de aplicaciones y sitios Web que no funcionan a menos que Java esté instalado, y muchas más que se crean a diario. Java es rápido, seguro y fiable. De portátiles a centros de datos, de consolas de juegos a súper equipos científicos, de teléfonos móviles a Internet, Java está en todas partes. 43 Java tiene un gran beneficio que es un lenguaje multiplataforma, lo cual nos permite utilizar las aplicaciones desarrolladas bajo este lenguaje en cualquier sistema operativo sin ningún tipo de inconveniente [14]. Java es un lenguaje muy utilizado a nivel mundial, por lo cual existe gran documentación para este lenguaje facilitara la labor del desarrollador en caso de presentarse algún problema o para su aprendizaje 3.5.9. STRUTS 2 El framework Web Apache Struts es una solución open-source para crear aplicaciones java Web. Estas aplicaciones Web difieren de sitios Web convencionales en que las aplicaciones Web pueden crear una respuesta dinámica. Muchos sitios Web ofrecen solo páginas estáticas. Una aplicación Web puede interactuar con base de datos y motores de lógica de negocio para personalizar una respuesta jQuery. Las aplicaciones Web basadas en Java Server Pages (JSP) a veces mezclan código de base de datos, código de diseño de página y código de flujo de control. En la práctica, nosotros encontramos que al menos esos asuntos están separados, aplicaciones grandes con llevan dificultades de mantenimiento. Una forma de separar asuntos en aplicaciones es usar una arquitectura Modelo Vista Controlador (MVC). El modelo representa el negocio o código de base de datos, la vista representa el código de diseño de la página y el controlador representa la información con la cual el sistema opera. El framework Struts es diseñado para ayudar a los desarrolladores a crear aplicaciones Web que utilices una arquitectura MVC. El framework proporciona de tres componentes:  Un “request” manejador proporcionado por los desarrolladores de aplicaciones que son mapeados con un URL standard.  Un “response” manejador que transfiere el control a otro recurso con el cual completa la respuesta. 44  Una biblioteca de “tags” que ayuda al desarrollador a crear aplicaciones basada en formularios interactivos con servidores de páginas. La arquitectura de frameworks y tags son compatibles con los términos de moda. Struts trabaja bien con aplicaciones REST convencionales y con tecnología innovadora como SOAP y AJAX [15]. 3.5.10. Framework Spring El Framework Spring brinda una programación comprensiva y un modelo de configuración para aplicaciones modernas basadas en Java Enterprise sobre cualquier tipo de plataforma de desarrollo. El elemento clave de Spring es el soporte infraestructural a nivel de la aplicación. Spring se centra en la construcción de aplicaciones para empresas en la cual sus equipos pueden centrarse en aplicaciones a nivel de la lógica de negocio. Sin ataduras innecesarias para un ambiente de desarrollo especifico. Spring Incluye:  Inyección de dependencia flexible con XML y estilos de configuración basados en anotaciones.  Soporte avanzado para aspectos orientados a la programación con variantes basadas en proxys y AspectJ.  Abstracción poderosa para trabajar con especificaciones comunes Java EE tales como JDBC (Java Database Connectivity), JPA (Java Persistence API), JTA (Java Transaction API) y JMS (Java Message Service).  Un framework Web flexible para construir aplicaciones MVC y servicios de endpoint.  Gran facilidad para realizar pruebas como lo son pruebas unitarias y pruebas de integración. Spring es un diseño modular, permitido por adopción incremental de partes individuales tales como el contenedor del core o el soporte JDB. Mientras todos los 45 servicios de Spring son un ajuste perfecto para el contenedor del core de Spring, algunos servicios pueden también ser usados en programación de moda fuera del contenedor [16]. El framework Spring incluye.  Spring Security  Spring Integration  Spring Batch  Spring Data  Spring Web Flow  Spring Web Services  Spring Mobile  Spring Social  Spring Android 3.5.11. Hibernate Hibernate es una herramienta de mapeo objeto-relacional (ORM) para la plataforma Java, que facilita el mapeo de atributos entre una base de datos relacional tradicional y el modelo de objetos de una aplicación, mediante archivos declarativos (XML) o anotaciones en los beans de las entidades que permiten establecer estas relaciones. Hibernate busca solucionar el problema de la diferencia entre los dos modelos de datos coexistentes en una aplicación: el usado en la memoria de la computadora (orientación a objetos) y el usado en las bases de datos (modelo relacional). Para lograr esto permite al desarrollador detallar cómo es su modelo de datos, qué relaciones existen y qué forma tienen. Con esta información Hibernate le permite a la aplicación manipular los datos en la base de datos operando sobre objetos, con todas las características de la programación orientada a objetos. Hibernate convertirá los datos entre los tipos utilizados por Java y los definidos por SQL. Hibernate genera las sentencias SQL y libera al desarrollador del manejo manual de los datos que resultan de la ejecución de dichas sentencias, manteniendo la portabilidad entre todos los motores de bases de datos con un ligero incremento en el tiempo de ejecución. http://es.wikipedia.org/wiki/Mapeo_objeto-relacional http://es.wikipedia.org/wiki/Plataforma_Java http://es.wikipedia.org/wiki/Plataforma_Java http://es.wikipedia.org/wiki/Base_de_datos http://es.wikipedia.org/wiki/Objetos_(programaci%C3%B3n_orientada_a_objetos) http://es.wikipedia.org/wiki/XML http://es.wikipedia.org/wiki/JavaBean http://es.wikipedia.org/wiki/SQL 46 4. Desarrollo del Sistema de Gestión de Talleres Para alcanzar de forma satisfactoria los objetivos planteados en el Capítulo 1, se decidió utilizar una adaptación del método de desarrollo AgilUs. Así En las siguientes secciones del documento se describen las etapas que comprenden el método AgilUs y las iteraciones llevadas a cabo en cada una de ellas para el desarrollo de la aplicación. 4.1. Etapa de requisitos Durante esta etapa se toma en cuenta las tormentas de ideas realizadas por los desarrolladores junto con el personal que labora en la Coordinación de extensión del CEAPUCV y algunos representantes, tomando en cuenta los perfiles de usuario y la lista de requerimientos funcionales y no funcionales, los cuales son artefactos propuestos en el método AgilUs. 4.1.1. Tormenta de ideas La tormenta de ideas se efectuó entre el grupo de desarrollo, dos representantes del CEAPUCV y el administrador de talleres. Esta consistió en intercambiar ideas sobre el problema en cada uno de los procesos que se realizan actualmente para la gestión de talleres. A continuación se muestran las ideas que fueron tomadas en cuenta del proceso creativo:  Introducir el concepto de Sistema Web, cuya función será facilitar la gestión de Talleres extracurriculares en el CEAPUCV.  Establecer el alcance del Sistema Web de Gestión de Talleres.  Diseñar un módulo de reportes.  Diseñar un módulo de inscripción para los talleres.  Diseñar un módulo de pago en el cual se pueda registrar el pago de la mensualidad de un representante para un representado. 47  Diseñar un módulo de anuncios en el cual se pueda publicar noticias referentes a las actividades que se desarrollan en los talleres.  Establecer los distintos roles de usuario que existirán en el sistema.  Diseñar un módulo de administración de talleres en donde se pueda gestionar la creación, eliminación y edición de los talleres a ofrecer.  Diseñar un módulo de administración de usuarios en el cual se puede crear, editar o eliminar un usuario del sistema 4.1.2. Perfil de Usuarios En el desarrollo de la aplicación Web para el CEAPUCV se identificaron y caracterizaron los siguientes perfiles de usuarios, que accederán o manipularan el contenido del mismo.  Usuario administrador Este usuario es el encargado del módulo administrativo de la aplicación, el cual tiene como tarea la responsabilidad de mantener una participación activa de estudiantes en los talleres mediante el manejo de información, publicación de ofertas de talleres y noticias. El administrador es el encargado de alimentar el módulo de noticias de la aplicación, también puede inscribir o retirar un estudiante de un taller específico, y está en la capacidad de generar reportes informativos referentes a estudiantes e información general del año escolar. Así mismo este módulo debe permitir la generación de reportes de estudiantes en un taller seleccionado y estudiantes que estén al día en sus pagos. El administrador también tiene la responsabilidad de gestionar los usuarios del sistema, que en este caso serán los representantes. El administrador se encargará 48 anualmente de alimentar el sistema agregando los nuevos representantes y sus representados, y eliminando aquellos que ya no sean representantes o representados. Por otro lado, el administrador tiene la responsabilidad de gestionar los talleres que se van a ofertar durante el año escolar.  Usuario representante El representante ingresa a la aplicación en busca de información como; noticias, talleres abiertos, disponibilidad de cupos para talleres, horarios disponibles, eventos o competencias que tengan que ver con los talleres entre otros. Este perfil de usuario puede llevar a cabo el proceso de inscripción de sus representados para algún taller en específico, también puede solicitar un reporte de pagos en el cual se especifica el estado de pagos que lleva el representante en los diferentes talleres que tenga inscrito a sus representados.  Usuario visitante El visitante es aquel usuario que no posee una cuenta dentro de la aplicación, este usuario solo posee acceso de carácter informativo en el área de la cartelera y el área de contáctenos donde puede observar la información de contacto. 4.1.3. Lista de Requerimientos Funcionales y No Funcionales Basándose en el estudio de los antecedentes expuestos en el Capítulo 1, y los artefactos descritos hasta el momento, se definen los requerimientos funcionales y no funcionales. Los requerimientos funcionales son:  Permitir que el representante inscriba alumnos en talleres. 49  Permitir realizar pagos a los representantes.  Permitir que el administrador genere reportes filtrados por alumnos, talleres y grado o año en curso.  Permitir al administrador gestionar los pagos realizados por los representantes.  Proveer una cartelera virtual.  Permitir al administrador gestionar cuentas de usuario para los representantes. Los requerimientos no funcionales son:  Brindar una interfaz de usuario intuitiva para todos los perfiles de usuario de la aplicación.  Desarrollar con un código fuente legible y entendible, ya que podría estar sujeto a cambios por nuevas funcionalidades o corrección de errores. 4.2: Análisis En esta etapa se analizó la solución requerida para el desarrollo del sistema, tomando en consideración los siguientes artefactos: modelo de casos de uso, modelo objeto del dominio, guía de estilo, prototipo en papel y patrones de interacción. 4.2.1: Modelo de casos de uso En reunión con el encargado de la administración de talleres y algunos representantes del CEAPUCV, se determinaron tres actores: administrador, representante y visitante. El actor administrador desempeñará su labor desde el módulo administrativo para coordinar, supervisar y gestionar los talleres extracurriculares. El actor representante simboliza a todas aquellas personas que cumplen con la condición de representar a un niño en el colegio. El actor visitante representa a todos aquellos usuarios que ingresan a la aplicación sin autenticarse. 50 El modelo de casos de uso cuenta con tres niveles de análisis, los cuales se muestran a continuación en las siguientes figuras.  El nivel cero muestra los actores que interactúan con el Sistema de Gestión de Talleres, como se muestra en la figura 12. Figura 12. Modelo de casos de uso nivel 0. Nombre: Sistema de Gestión de Talleres CEAPUCV. Actores: (administrador, representante y visitante). Acción: Coordinar, controlar, supervisar y asesorar los procesos y funcionalidades para llevar a cabo la gestión de los talleres extracurriculares en el CEAPUCV. Pre-condición: se requiere de un usuario administrador, de un usuario representante y de un usuario visitante para completar el Sistema de Gestión de Talleres. Post-condición: El usuario administrador debe asegurarse de que todos los procesos para la gestión de talleres se lleven a cabo.  El nivel uno muestra la interacción de los actores con las funcionalidades más generales del sistema, como se observa en la Figura 13. 51 Figura 13. Modelo de casos de uso nivel 1. Nombre: Consultar Cartelera. Actores: (administrador, representante y visitante). Acción: Funcionalidad que permite a los usuarios consultar toda la información o noticias referentes a los talleres publicadas en la cartelera. Pre-condición: se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, específicamente al área de VER CARTELERA. 52 Post-condición: El usuario puede acceder a toda la información referente a los talleres que haya sido previamente publicada en la cartelera, bien sean noticias sobre eventos, competencias, etc. Nombre: Consultar Información de Contacto. Actores: (administrador, representante y visitante). Acción: Funcionalidad que permite a los usuarios consultar toda la información de contacto con el CEAPUCV. Pre-condición: se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, específicamente al área de CONTÁCTANOS. Post-condición: El usuario puede acceder a toda la información de contacto con el CEAPUCV, dirección, número telefónico, dirección de correo electrónico entre otras. Nombre: Autenticarse. Actores: (administrador y representante). Acción: Funcionalidad que permite a los usuarios autenticarse para ingresar con un rol diferente en la aplicación. Pre-condición: se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, específicamente al área autenticación e ingrese sus datos. Post-condición: El usuario ingresa a la aplicación con un rol definido ya sea como administrador o como representante. Nombre: Ver talleres. Actores: (administrador, representante). Acción: Funcionalidad que permite a los usuarios consultar toda la información de los talleres que se estarán dictando durante el año en el CEAPUCV. Pre-condición: se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de VER TALLERES. Post-condición: El usuario puede acceder a toda la información de los talleres, ver que talleres se están dictando y la información de cada uno de estos. 53 Nombre: Gestionar inscripción representado. Actores: (administrador, representante). Acción: Funcionalidad que permite a los usuarios inscribir o retirar a un alumno en un taller. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de Gestionar inscripción en la opción INSCRIBIR/ RETIRAR. Post-condición: El usuario puede inscribir o retirar a un alumno de uno o más talleres de forma satisfactoria. Nombre: Gestionar Cuenta. Actores: (administrador, representante). Acción: Funcionalidad que permite a los usuarios modificar los datos de su cuenta en el sistema. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de cuenta: aministrador o cuenta:<Nombre de Representante> y allí elegir la opción EDITAR CUENTA dependiendo del tipo de usuario que sea. Post-condición: El usuario puede modificar los datos de su cuenta de forma satisfactoria en el sistema. Nombre: Administrar talleres. Actores: administrador. Acción: Funcionalidad que permite al administrador la creación, edición o eliminación de talleres. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de ADMINISTRAR TALLER, donde tiene un submenú con las opciones para crear un taller o administrar los talleres previamente creados. 54 Post-condición: El administrador puede crear, editar o eliminar un taller de forma satisfactoria en el sistema. Nombre: Administrar cartelera. Actores: administrador. Acción: Funcionalidad que permite al administrador la creación o eliminación de noticias en la cartelera virtual. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de ADMINISTRAR CARTELERA, donde tiene un submenú con las opciones para crear o eliminar una noticia. Post-condición: El administrador puede crear o eliminar una noticia de forma satisfactoria en la cartelera virtual del sistema. Nombre: Administrar representantes. Actores: administrador. Acción: Funcionalidad que permite al administrador la creación, edición o eliminación de representantes. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de ADMINISTRAR CUENTAS, donde tiene un submenú con las opciones para crear un representante o administrar los representantes que ya ha registrado previamente en el sistema, al crear el representante se ingresan los datos de sus representados en el sistema. Post-condición: El administrador puede crear, editar o eliminar representantes de forma satisfactoria en el sistema. Nombre: Generar reportes. Actores: administrador. Acción: Funcionalidad que permite al administrador exportar a formato PDF reportes del sistema. 55 Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de REPORTES. Post-condición: El administrador puede exportar reportes del sistema en formato PDF. Nombre: Gestión de pago usuario. Actores: (administrador, representante). Acción: Funcionalidad que permite los usuarios realizar pagos y consultar sus pagos realizados. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de Gestión de pago. Post-condición: Los usuarios pueden realizar pagos y consultar sus pagos realizados de forma exitosa. Nombre: Gestión de pagos. Actores: administrador. Acción: Funcionalidad que permite al administrador llevar un control sobre el pago de los usuarios. Pre-condición: Se requiere que el usuario haya ingresado al Sistema de Gestión de Talleres, se autentique, y luego ingrese específicamente al área de Gestión de pagos. Post-condición: El administrador puede mantener un control efectivo sobre los pagos de los usuarios.  El nivel dos, desglosa los casos de uso generales, para estudiar en detalle cada una de las acciones que proveen al usuario. En la Figura 14 se visualiza el modelo de casos de uso nivel 2. 56 Figura 14. Modelo de casos de uso nivel 2. En la Figura 15 se visualiza el caso de uso detallado de Gestionar inscripción del representado. 57 Figura 15. Modelo de casos de uso nivel 2 Gestionar Inscripción Representado. Nombre: Inscribir taller. Actor: (administrador, representante). Acción: Funcionalidad que permite al usuario inscribir a un alumno en un taller. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario puede inscribir un taller de forma exitosa. Nombre: Retirar taller. Actor: administrador, representante. Acción: Funcionalidad que permite al usuario retirar a un alumno de un taller. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario retira un taller de forma exitosa. En la Figura 16, se visualiza el caso de uso detallado para Gestionar Cuenta. 58 Figura 16. Modelo de casos de uso nivel 2 Gestionar cuenta. Nombre: Cambiar contraseña. Actor: (administrador, representante). Acción: Funcionalidad que permite al usuario modificar la contraseña de su cuenta. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario cambia su contraseña de forma exitosa. Nombre: Modificar datos. Actor: (administrador, representante). Acción: Funcionalidad que permite al usuario modificar los datos de su cuenta. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario modifica los datos de forma exitosa. 59 En la Figura 17, se visualiza el caso de uso detallado para Administrar talleres. Figura 17. Modelo de casos de uso nivel 2 Administrar talleres. Nombre: Editar. Actor: administrador. Acción: Funcionalidad que permite al usuario modificar los datos de un taller. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador edita el taller de forma exitosa. Nombre: Eliminar. Actor: administrador. Acción: Funcionalidad que permite al usuario eliminar un taller. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador elimina el taller de forma exitosa. 60 Nombre: Crear. Actor: administrador. Acción: Funcionalidad que permite al usuario crear un nuevo taller. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador crea el taller de forma exitosa. En la Figura 18, se visualiza el caso de uso detallado para Administrar cartelera. Figura 18. Modelo de casos de uso nivel 2 Administrar cartelera. Nombre: Eliminar. Actor: administrador. Acción: Funcionalidad que permite al usuario eliminar una noticia. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador elimina una noticia de forma exitosa. 61 Nombre: Crear. Actor: administrador. Acción: Funcionalidad que permite al usuario crear una nueva noticia. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador crea una noticia de forma exitosa. En la Figura 19, se visualiza el caso de uso detallado para Administrar representantes. Figura 19. Modelo de casos de uso nivel 2 Administrar representantes. Nombre: Editar. Actor: administrador. Acción: Funcionalidad que permite al usuario modificar los datos de un representante. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador edita los datos de un representante de forma exitosa. Nombre: Eliminar. Actor: administrador. Acción: Funcionalidad que permite al usuario eliminar la cuenta de un representante. 62 Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador elimina la cuenta de un representante de forma exitosa. Nombre: Crear. Actor: administrador. Acción: Funcionalidad que permite al usuario crear un nuevo representante. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador crea una cuenta de representante de forma exitosa. En la Figura 20, se visualiza el caso de uso detallado para Gestión de pago. Figura 20. Modelo de casos de uso nivel 2 Gestión de pago. Nombre: Aceptar / Rechazar pago. Actor: administrador. Acción: Funcionalidad que permite al administrador aceptar o rechazar los pagos realizados por los representantes. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. 63 Post-condición: El administrador acepta o rechaza un pago realizado de forma exitosa. Nombre: Consultar pagos de todos los usuarios. Actor: administrador. Acción: Funcionalidad que permite al administrador aceptar o rechazar los pagos realizados por los representantes. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El administrador consulta los pagos de todos los usuarios de forma exitosa. En la Figura 21, se visualiza el caso de uso detallado para Gestión de pago usuario. Figura 21. Modelo de casos de uso nivel 2 Gestión de pago usuario. Nombre: Consultar pagos. Actor: (administrador, representante). Acción: Funcionalidad que permite al usuario consultar los pagos realizados. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario consulta los pagos de forma exitosa. 64 Nombre: Realizar pago. Actor: (administrador, representante). Acción: Funcionalidad que permite al usuario hacer un pago. Pre-condición: Se requiere que el actor haya ingresado al sistema mediante su usuario y clave. Post-condición: El usuario realiza pagos de forma exitosa. 4.2.2. Modelo Objetos del dominio El Modelo Objeto del Dominio, es aquel que describe los objetos del dominio del sistema y las relaciones estáticas que lo conforman [16]. En la Figura 22 se presenta el modelo de objeto del dominio del Sistema de Gestión de Talleres. Figura 22. Modelo Objeto Dominio del Sistema de Gestión de Talleres. 65 Para el Sistema de Gestión de Talleres se enumeran los siguientes objetos.  CEAPUCV: Es una institución docente donde se imparten estudios básicos y medio diversificado.  Coordinación Extensión: Es el organismo interno del CEAPUCV que se encarga de llevar entre otras actividades la gestión de talleres.  Estudiante: Es el conjunto de personas que optan por participar en un taller.  Representante: Es el conjunto de personas que representan a un estudiante en el CEAPUCV.  AdminTalleres: Es la persona perteneciente a la Coordinación de Extensión, encargado de la gestión de los talleres.  Taller: Actividad extracurricular que se oferta en el CEAPUCV.  Pago: Operación mediante la cual se cancela la factura de un mes o una inscripción de un taller.  Noticia: Información publicada en la cartelera virtual, referente a los talleres.  Reporte: Material descargable que contiene información de los talleres y los estudiantes de cada taller. 4.2.3: Guía de Estilo La guía de estilo recoge las normativas y patrones básicos relacionados con el aspecto de una interfaz para su aplicación en el desarrollo de pantallas dentro de un entorno concreto [16]. A continuación se desglosa la guía de estilo utilizada en el desarrollo de la página principal del Sistema de Gestión de Talleres.  Logo El logo se muestra en la figura 23 es utilizado en la cabecera de la página principal del Sistema de Gestión de Talleres, el cual tiene dimensiones porcentuales de acuerdo al tamaño de la ventana del navegador. 66 Figura 23. Logo del Sistema de Gestión de Talleres.  Colores Principales Figura 24. Colores implementados.  Tipografía La fuente utilizada dentro del sistema fue “Trebuchet MS”, variando el tamaño del texto entre 12px y 28px dependiendo de la relevancia del mismo.  Uso del menú para el sistema El formato del menú se va a repetir tanto para la página principal como para las páginas siguientes, variando sus opciones dependiendo de la perisología del usuario RGB 0,0,0 RGB 255,255,255 RGB 0,65,118 RGB 242,245,247 #000000 #FFFFFF #004176 #F2F5F7 67 que haya ingresado a la aplicación. En las Figuras 25, 26 y 27 se pueden apreciar el menú para la página principal, y el menú de cada perfil de usuario. Figura 25. Menú principal para el Sistema de Gestión de Talleres. Figura 26. Menú administrador para el Sistema de Gestión de Talleres. Figura 27. Menú Representante para el Sistema de Gestión de Talleres. 4.2.4. Patrones de interacción Los patrones de interacción describen una solución exitosa a un problema recurrente concerniente a la interfaz de usuario, en el contexto dado [16]. Las interfaces de usuarios del sistema para el módulo administrativo requieren de mucha interacción por parte del usuario, por lo cual cuenta con un gran número de patrones de interacción, los cuales son: Gestionar Pagos, gestionar inscripción, administrar taller, administrar cartelera, administrar cuentas y generar reportes. Para este estudio se decidió mostrar los patrones de diseños de administrar cartelera, Gestionar pagos, gestionar inscripción, administrar taller y generar reportes. 68 Tabla 1. Patrones de Interacción – Administrar Cartelera. Nombre Administrar cartelera Problema El administrador del sistema necesita publicar todo tipo de noticias relacionadas con los talleres Solución En el módulo administrativo, se crearon dos funcionalidades por separado, para la creación de noticias y para la eliminación, para la creación de noticias se puede subir una imagen, colocando título, descripción de cada uno. Esta es la vista para crear una nueva noticia, el recuadro final es donde se muestra una vista preliminar de la imagen que cargue el usuario en casi de hacerlo, si no carga una imagen entonces en el campo imagen de la noticia se colocara el logo del colegio. Aquí se muestra la vista para eliminar noticias, se listan todas las noticias y se agrega el botón con la opción de eliminar. 69 Tabla 2. Patrones de interacción - Administrar Cartelera (Continuación Tabla 1). Contexto Aplicación Web Usabilidad Satisfacción del usuario, reducción de tiempo al crear y eliminar noticias Fuerza El usuario debe tener conocimiento básico del computador. Consecuencias El usuario debe tener precaución al momento de crear algunos de estos, ya que serán publicados automáticamente en el sistema al ser creados. Patrones Relacionados Crear noticia, eliminar noticia. Tabla 3. Patrones de interacción - Gestionar Pagos. Nombre Gestionar pagos Problema El administrador necesita llevar un control del pago de la mensualidad e inscripción de los talleres que hacen los representantes y además necesita estar en capacidad de procesar un pago para cualquier representante en caso de que este vaya a hacer el trámite en persona. Solución Para el administrador se crearon cuatro funcionalidades que le permitirán mantener un control sobre los pagos. 1) Control de pagos. En esta vista se muestra una tabla separada por representantes, por cada grupo de hijo y taller existe una fila con todos los meses del año indicando con un check que meses se encuentran pagos y cuáles no, el recuadro verde indica cuando se inscribió al hijo en el taller, y el rojo indica cuando se retiró el hijo de un taller. 70 Tabla 4. Patrones de interacción – Gestionar Pagos (Continuación Tabla 3). Solución 2) Gestionar pago usuario. Antes de llegar a esta vista el administrador debe ingresar la cedula del representante al cual le quiere gestionar el pago, en esta vista puede observar el estado de pago del representante y además procesar un pago por él. 3) Historial de pagos (todos) En esta vista se muestra una tabla con todos los pagos registrados por todos los usuarios. 4) Historial de pagos (usuario) Antes de llegar a esta vista, el administrador debe ingresar la cedula del representante al cual quiere consultar el historial de pagos, luego de ingresar dichos datos ingresa al historial de pagos del representante donde se puede apreciar una tabla con todos los datos de cada uno de los pagos realizados por dicho representante. 71 Tabla 5. Patrones de interacción – Gestionar Pagos (Continuación Tabla 4). Contexto Aplicación Web Usabilidad Satisfacción del usuario, reducción de tiempo al procesar pagos y al consultar información sobre los mismos. Fuerza El usuario debe tener conocimiento básico del computador. Consecuencias El usuario debe tener precaución al momento de procesar un pago, ya que estos serán almacenados inmediatamente en el sistema. Patrones Relacionados Control de pagos, Historial de pagos (todos), Historial de pagos (usuario), Gestionar pago usuario. Tabla 6. Patrones de interacción - Gestionar Inscripción. Nombre Gestionar Inscripción Problema El administrador necesita estar en la capacidad de inscribir el o los hijos de un representante en uno o más talleres. Solución Para el administrador se creó una funcionalidad en la que este puede inscribir o retirar a los hijos de un representante en un taller específico. Antes de llegar a esta vista el administrador debe ingresar la cedula del representante del estudiante al cual le quiere gestionar la inscripción, una vez ingresados esos datos el administrador accede a esta vista donde se muestra el nombre del representante y sus hijos con la opción de inscribirlos en un nuevo taller, para cada hijo muestra los talleres en los que se encuentra inscrito y al lado del nombre del taller aparece un botón para retirar al estudiante. Contexto Aplicación Web Usabilidad Satisfacción del usuario, reducción de tiempo al momento de gestionar la inscripción de un estudiante. Fuerza El usuario debe tener conocimiento básico del computador. Consecuencias El usuario debe tener precaución al momento de inscribir o retirar a un estudiante de un taller para evitar seleccionar un taller no deseado. Patrones Relacionados Inscribir estudiante, retirar estudiante. 72 Tabla 7. Patrones de interacción - Administrar Taller. Nombre Administrar Taller Problema El administrador necesita crear, editar y eliminar talleres. Solución Para el administrador se desarrolló una funcionalidad en la cual este pueda crear nuevos talleres, editar y eliminar los talleres que ya se encuentran creados. Imagen 1 Imagen 2 Por lo extensa de esta vista se tuvo que picar en dos partes para que se pueda apreciar el formulario completo (imagen 2 es la continuación de la imagen 1), en esta vista el administrador puede ingresar todos los datos de un nuevo taller que desee crear. En esta vista el Administrador puede observar todos los talleres creados con la opción para eliminar o editar cada uno de ellos. En el caso de editar un taller se repite la vista conformada por la imagen 1 y la imagen 2 solo que con la diferencia que esta tendrá en cada campo el valor correspondiente al taller que se quiere editar. 73 Tabla 8. Patrones de interacción – Administrar Taller (Continuación Tabla 7). Contexto Aplicación Web Usabilidad Satisfacción del usuario, reducción de tiempo al crear, editar y eliminar talleres. Fuerza El usuario debe tener conocimiento básico del computador. Consecuencias El usuario debe tener precaución al momento de crear algún taller, ya que estos serán publicados automáticamente en el sistema al ser creados. Patrones Relacionados Crear taller, eliminar taller, editar taller. Tabla 9 Patrones de interacción- Generar Reportes. Nombre Generar Reportes Problema El administrador necesita generar reportes informativos. Solución Para el administrador se desarrolló una funcionalidad en la cual este pueda generar reportes de carácter informativo. En esta vista, el administrador puede generar reportes filtrando por el campo taller, grado o sección, el campo Titulo Reporte como su nombre lo dice es un campo de entrada para asignarle un título al reporte que se está generando. Contexto Aplicación Web Usabilidad Satisfacción del usuario, reducción de tiempo y mayor comodidad al momento de realizar un reporte. Fuerza El usuario debe tener conocimiento básico del computador. Consecuencias Ninguna. Patrones Relacionados Ninguno. 74 4.2.5. Prototipaje En esta etapa del ciclo de vida del método de desarrollo AguilUs, surge la necesidad de llevar a cabo iteraciones, con las que los distintos módulos de la aplicación van madurando e interrelacionándose para convertirse en el Sistema de Gestión de Talleres, que cumple con todas las necesidades planteadas para cada usuario. Es por ello que, en esta etapa se determina la plataforma de desarrollo, y los prototipos ejecutables que formaron parte de la implementación del sistema.  Plataforma de desarrollo Según lo que dictamina el decreto 3390 Artículo 1º donde se especifica que La Administración Pública Nacional empleará prioritariamente Software Libre desarrollado con Estándares Abiertos, en sus sistemas, proyectos y servicios informáticos, la plataforma de desarrollo del Sistema de Gestión de Talleres, utiliza un conjunto de estas tecnologías y herramientas de software libre.  Preparación de la Base de Datos Para llevar a cabo el desarrollo del sistema, se hace necesario estudiar los datos de utilidad para los procesos involucrados con la gestión de talleres y de esta forma diseñar y completar su estructura como se muestra en la Figura 28, con el objetivo de cubrir las necesidades del nuevo sistema. 75 Figura 28. Diseño del modelo de datos para el Sistema de Gestión de Talleres. 76  Prototipo Ejecutable Un prototipo es una versión inicial de un sistema de software que se utiliza para demostrar los conceptos, probar las opciones de diseño y entender mejor el “problema” y su solución [17]. El prototipo inicial de los módulos, administrativo y representante, evolucionó a lo largo de su desarrollo por medio de iteraciones generando 5 prototipos, estas iteraciones se realizaron en función a cumplir metas en vez de realizarlo en función a tiempo.  Iteración cero: En esta iteración la idea principal era definir los conceptos y funcionalidades que se deben llevar a cabo en los procesos de gestión de talleres del CEAPUCV e identificar los distintos actores que participan en ellos para buscar la forma de automatizar dichos procesos en un sistema web.  Iteración uno: Para esta iteración se comenzó la implementación de un diseño general para el módulo administrador, módulo representante y visitante, el cual se dividiría en tres sectores o espacios. Primero un menú principal colocado en la parte superior, el cual se repetiría constantemente en todas las vistas. Segundo, un espacio llamado contenido, donde se mostraran la información requerida por el usuario y por último, un pie de página donde se especificara los derechos de autor del sistema y a quien pertenece como se muestra en la Figura 29. 77 Figura 29. Prototipo de interfaz. Iteración 1.  Iteración dos: En esta iteración se enfocaron los esfuerzos en definir los ítems del menú principal, para el módulo visitante, representante y administrador, a su vez en su despliegue de información y contenido de cada uno de ellos, en el cual se mostrará en todas las vistas del sistema. Para el contenido del menú para el módulo de visitante se tienen como opciones principales la opción de cartelera; el cual abre un submenú con la opción de ver cartelera, talleres; el cual abre un submenú con la opción de ver talleres que no es más que un enlace hasta la pantalla donde se muestran los talleres y contáctanos; el cual es un enlace hacia una vista con toda la información de contacto del CEAPUCV, estas opciones son visibles para el modulo visitante, el cual representa a todos los usuarios que no se han autenticado en la aplicación. Para el módulo de representante se tienen como opciones principales gestionar pago; el cual abre un submenú con las opciones de gestionar pago usuario, el cual es un enlace que lleva a la vista de gestión de pagos, Historial de pagos el cual es un enlace que lleva a una vista donde se muestra todos los pagos que ha realizado ese representante, la siguiente opción principal es talleres descrita anteriormente pero ahora con una nueva opción en el submenú la cual es inscribir/retirar; esta opción es un enlace hacia la vista que permite inscribir o retirar representados de 78 uno o más talleres, la opción de cartelera y contáctanos se mantiene igual que en el módulo de visitante y por último se encuentra la opción usuario:<nombre usuario> la cual despliega un submenú con las opciones editar cuenta, que es un enlace hacia una vista donde se pueden modificar los datos propios de la cuenta y la opción de cerrar sesión para volver al módulo de visitante. Para el modulo administrador se mantienen la opción usuario:<nombre usuario> igual que en modulo del representante, en la opción de gestionar pagos se agregan unas nuevas opciones al submenú, control de pagos que permite ver el estado de pagos actual para todos los representantes, gestionar pago usuario; redirecciona a una pantalla para ingresar la cedula del usuario al que se le quiere gestionar el pago, historial de pagos (todos); enlace que redirecciona hacia el historial de pago de todos los usuarios, historial de pagos (usuario); redirecciona a una pantalla para ingresar la cedula del usuario al que se le quiere consultar el historial de pagos. Gestionar Inscripción abre un submenú con la opción inscribir / retirar; redirecciona a una pantalla para ingresar la cedula del representante a cuyos hijos se quieren inscribir o retirar de algún taller en particular. Administrar talleres; abre un submenú con las opciones de crear taller, que redirecciona a una vista para ingresar los datos de un nuevo taller, administrar talleres; redirecciona a una vista con todos los talleres creados para ser editados o eliminados. Administrar Cartelera; abre un submenú con las opciones de ver cartelera, que redirecciona a la vista de la cartelera, crear noticia, redirecciona a una vista para ingresar los datos de una nueva noticia, Eliminar noticia, redirecciona a una vista con todas las noticias y la opción de eliminar la que se desee. Administrar Cuentas; abre un submenú con las opciones de Crear Usuario, que redirecciona a una vista para ingresar los datos de un nuevo usuario, Administrar Usuarios, redirecciona a una vista con todos los usuarios creados para ser editados o eliminados. 79  Iteración tres: En esta iteración comienza el desarrollo de funcionalidades por parte del Administrador como crear, editar y eliminar noticias; gestionar pagos; crear, editar o eliminar usuarios; crear, editar o eliminar talleres.  Iteración cuatro: En esta iteración se comienza el desarrollo de funcionalidades por parte del representante como la gestión de pagos e inscribir o retirar a un representado de un taller.  Iteración cinco: En esta iteración se plantea el estilo y la estética que se quiere en la página del Sistema de Gestión de Talleres, luego de hablar con representantes del CEAPUCV y el administrador de talleres.  Iteración seis: En esta iteración se valida con el administrador de talleres las funcionalidades del sistema y que estas se hayan implementado de forma correcta, de no ser así, se procede a la realización de las correcciones pertinentes.  Evaluación Heurística Con el objetivo de detectar la mayor cantidad de problemas posibles se usó la técnica de evaluación heurística, donde el administrador de taller del CEAPUCV fue el principal involucrado así como diversas personas pertenecientes al gremio de la Escuela de Computación de la UCV, entre ellos la profesora María Villapol. Una vez detectados los problemas, se determina cuál de las diez heurísticas propuestas por Jakob Nielsen no son cumplidas. Luego de esto se evalúan en una escala de 80 0 a 4, en donde cuatro es el más grave de los escenarios y cero el de menos importancia. Las Heurísticas se describen en la figura 30. Figura 30. Heurísticas de Nielsen [18]. H10: Asistencia al usuario. Problema: En la pantalla de gestión de pago no aparece reflejado el nombre del usuario que realizo el pago, por el contrario aparece la cédula del usuario. Valoración: 2 Solución: Agregar nombre y apellido del usuario que realizó el pago a la tabla de pagos como información complementaria. H9: Prevención de Errores. Problema: En la pantalla de creación y edición de usuario, al momento de agregar un representado. Si no se agregaban todos los campos, la aplicación fallaba entrando en un estado irrecuperable. Valoración: 4 81 Solución: Agregar un modal que permita crear un representado y se pueda validar que todos los campos sean ingresados de forma correcta. Si no se agregan todos los campos, la aplicación no permite continuar con el flujo de trabajo. H9: Dialogo Natural y Simple. Problema: Al momento de rechazar un pago, no se informaba de ninguna forma al representante que su pago había sido rechazado Valoración: 3 Solución: Implementar un método que acepte o rechace los pagos hechos por el representante y luego de esto envié un correo electrónico indicándole el estado de su pago. H2: Hablar el lenguaje del usuario. Problema: Al momento de realizar algún pago, edición o alguna transacción no existía un mensaje de confirmación que indicara al usuario que el estado del sistema cambiaria. Valoración: 3 Solución: Se agregaron mensajes de confirmación ante cualquier evento que pueda alterar el sistema. 4.2.6. Entrega Una vez solucionadas las problemáticas que surgieron de la evaluación heurística se considera que el Sistema de Gestión de Talleres está listo para ser presentado a los usuarios y que se le apliquen pruebas de aceptación.  Prueba de Aceptación Las pruebas de aceptación permiten conocer la opinión general de los usuarios [16]. Para el sistema de gestión de talleres se crearon ocho preguntas que se aplicaron al administrador de talleres del CEAPUCV así como a representantes que forman parte de la comunidad del colegio. El grupo de encuetas se dividió según el rol de usuario. La valoración de las preguntas comprenden un rango entre uno y cinco, en donde cinco es el valor óptimo y uno el mínimo valor obtenido. 82 N°1: ¿La disposición de colores está acorde al sistema y el entorno? N°2: ¿Los módulos de gestión de pagos proveen toda la información necesaria? N°3: ¿Cumple con sus expectativas? N°4: ¿La distribución de los menús permiten la fácil navegación? N°5: ¿La pantalla de cartelera atrae la atención de usuario como lo haría la cartelera física ubicada en el colegio? N°6: ¿La inscripción de alumnos en talleres es fácil de realizar? N°7: ¿Toda la información proporcionada para el rol de administrador es suficiente para gestionar el sistema? N°8: ¿Toda la información proporcionada para el rol de representante es suficiente para realizar pagos? Tomando en cuenta los resultados obtenidos de las encuestas realizadas, se puede concluir que el sistema de gestión de talleres cumple con las expectativas de cada usuario. En la figura 31 se puede apreciar los resultados de las encuestas realizadas a los usuarios con rol de Representante 0 1 2 3 4 5 6 Pregunta 1 Pregunta 2 Pregunta 3 Pregunta 4 Pregunta 5 Pregunta 6 Pregunta 8 Usario 1 Usuario 2 Usuario 3 Usuario 4 Figura 31. Resultados de las pruebas de aceptación representantes. 83 Tomando en cuenta los resultados obtenidos de la encuesta aplicada al Administrado de Talleres del CEAPUCV, en donde se formularon diferentes preguntas, se puede observar que el administrador ha obtenido los resultados esperados de la aplicación, asignándole valores con ponderado elevado a cada una de las preguntas realizadas. En la figura 32 se puede apreciar los resultados de las encuestas realizadas a al usuario con rol de Administrador. Figura 32. Resultados de las pruebas de aceptación administrador. 84 5. Conclusiones En este trabajo se estudió la gestión de talleres extracurriculares que se lleva a cabo actualmente en el CEAPUCV. Dicho estudio arrojó una serie de deficiencias derivadas principalmente de que los procesos involucrados son en su mayoría manuales e involucran poco uso de la tecnología. Dichas deficiencias traen como consecuencias: lentitud en la ejecución de la tareas, largos tiempos de espera de los representantes para ser atendidos y dificultad en el manejo de los participantes en los talleres y sus correspondientes talleristas. Lo antes expuesto conllevó al planteamiento de una solución basada en el desarrollo de una aplicación web que implementara las tareas que se realizan en la gestión de los talleres. Dicho desarrollo fue claramente descrito en este trabajo. 5.1 Contribuciones La contribución de este trabajo se describe a continuación. Como primer aporte, el documento describe en detalle el proceso de gestión de talleres realizado por el CEAPUCV más específicamente por la Coordinación de Extensión. Segundo, se diseñó detalladamente la aplicación web que gestionara los talleres y se logró implementar dicha aplicación, teniendo como resultado una herramienta web que permite aliviar la mayoría de los problemas enunciados anteriormente. Finalmente, todo el desarrollo fue exitosamente culminado a través del uso del método. 5.2 Trabajos futuros Se recomienda, para enriquecer la aplicación y aumentar sus funcionalidades, los siguientes aspectos:  Implementar un módulo de galería de imágenes para el Sistema de Gestión de Talleres. 85  Construir un módulo que se encargue de realizar la conexión con la entidad bancaria para validar los pagos de los usuarios.  Construir un módulo de reportes contables para el Sistema de Gestión de Talleres.  Se recomienda el desarrollo de un módulo móvil para el Sistema de Gestión de Talleres.  Construir un módulo de notificaciones y comunicaciones para el Sistema de Gestión de Talleres vía correo electrónico. 86 Referencias Bibliográficas [1] B. M. Márquez Avendaño y J. M. Zulaica Rugarcía, de Implementación de un reconocedor de voz gratuito a el sistema de ayuda a invidentes Dos-Vox en español, Puebla, 2004. [2] C. Mellon, «Software Engineering Institute,» Client/Server Software Architectures, [En línea]. Available: http://www.sei.cmu.edu/str/descriptions/clientserver_body.html. [3] A. Arreaza y W. Manyoma, «Tópicos para el desarrollo de un módulo de gestión y planificación para los cursos de la Fundación de la Escuela de Idiomas Modernos de la Universidad Central de Venezuela,» Caracas, 2011. [4] M. Fowler, de Patterns of Enterprise Application Architecture, Boston, Addison- Wesley, 2002. [6] W3C, «HTML5,» [En línea]. Available: http://www.w3.org/TR/html51/. [Último acceso: 2014]. [7] desarrolloweb, «HTML5,» [En línea]. Available: http://www.desarrolloweb.com/articulos/que-es-html5.html. [Último acceso: 2014]. [8] W3C, «Hojas de Estilo,» [En línea]. Available: http://www.w3c.es/Divulgacion/GuiasBreves/HojasEstilo. [Último acceso: 2014]. [10] «JQuery,» [En línea]. Available: http://jquery.com/. [Último acceso: 2014]. [11] jqueryui, «JQuery User Interface,» [En línea]. Available: http://jqueryui.com/. [Último acceso: 2014]. [12] Sinemed, «Sinemed,» [En línea]. Available: 87 http://sinemed.com/recursos/docs/MySQL.pdf. [Último acceso: 2014]. [13] JAVA, «www.java.com,» [En línea]. Available: www.java.com. [Último acceso: 2014]. [14] Apache, «Struts,» [En línea]. Available: http://struts.apache.org/. [Último acceso: 2014]. [15] SPRING, «SPRING,» [En línea]. Available: http://spring.io/. [16] E. Acosta, «Construcción Ágil de la Usabilidad,» CLEI, Paraguay, 2010 Caracas. [17] I. Sommerville, Ingenieria del software, Madrid: Pearson Educacion, S.A., 2005. [18] Jossie Zambrano, « Un modelo para la producción de software de Gestión Académica Administrativa Universitaria, basado en Patrones de Proceso. Caso de Estudio: Proceso de Inscripción, » M.S. thesis, Facultad de Ciencias, Universidad Central de Venezuela Caracas, 2012. http://sinemed.com/recursos