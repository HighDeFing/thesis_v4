tesisfinal27072011 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación Desarrollo de una aplicación para gestionar actividades de Pasantías y de Servicio Comunitario en la Escuela de Computación de la UCV Trabajo Especial de Grado Presentado ante la ilustre Universidad Central de Venezuela Por los bachilleres: Martínez, Elicenda C.I. 6.174.545 Rodríguez, Virginia C.I. 8.475.874 Para optar al título de Licenciado en Computación Tutor: Prof. Antonio Silva Tutor: Prof. Zenaida Castillo Caracas, julio 2011 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación ACTA DEL VEREDICTO Quienes suscriben, Miembros del Jurado designados por el Consejo de Escuela de Computación, para examinar el Trabajo Especial de Grado, presentado por las Bachilleres Virginia Carolina Rodríguez Martínez, C.I. 8.475.874 y Elicenda Catalina Martínez Lugo, C.I. 6.174.545, con el título de “Desarrollo de una de una Aplicación para Gestionar las Actividades Realizadas por los Estudiantes en Pasantías o Servicio Comunitario en la Escuela de Computación de la UCV”, a los fines de cumplir con el requisito legal para optar al título de Licenciado en Computación, dejan constancia de lo siguiente: Leído como fue dicho trabajo por cada uno de los Miembros del Jurado, éstos fijaron el día, para que su autor lo defendiera en forma pública, lo cual éste realizó, mediante una exposición oral de su contenido, y luego respondió satisfactoriamente a las preguntas que le fueron formuladas por el Jurado, todo ello conforme a lo dispuesto en la Ley de Universidades y demás normativas vigentes de la Universidad Central de Venezuela. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió APROBARLO. Firmas de los Tutores y Jurados Examinadores: Prof. Antonio Silva (Tutor) Prof. Zenaida Castillo (Tutor) Prof. Vanessa Leguizamo (Jurado Principal) Prof. Rhadames Carmona. (Jurado Principal) 2 AGRADECIMIENTO A Diosito, mi chuchu, por sobre todas las cosas… A mis viejos por haber creído siempre en mí A la Prof. Nora Montaño quien nos dio la posibilidad de cerrar este capítulo A la Prof. Zenaida por su gran labor al lado de esos “estudiantes especiales” a quienes se nos hacen muy difícil el camino, mil gracias Al Prof. Antonio y toda su gente, por esa inmensa colaboración, guía y apoyo A Eli mi amiga y compañera, siempre positiva, gracias por acompañarme y ayudarme a seguir en la búsqueda del objetivo, llegamos Ami !!!. A la Facultad de Ciencias de la UCV, que me permitió vivir en sus aulas y pasillos, una época muy especial y hermosa de mi vida y que al reencontrarla me abrió nuevamente sus brazos, es especial, el tiempo paso, ella cambio pero en esencia es la misma, ruda y a la vez calida, solo varían algunos personajes, UN LUGAR MARAVILLOSO…. Virginia 3 DEDICATORIA A esos seres visibles e invisibles que llenan mi vida… Abraham y Genara, mis viejos adorados y admirados, cada día que respiro agradezco a Dios por ser su hija, papaíto sigues siendo mi súper hombre, esto es también por ti; mamita, sin ti no lo hubiese logrado, eres la columna fuerte y sabia donde se edifica mi vida, eres uno de mis motivos…. A mis amados sobrinos, quienes están comenzando a vivir, nunca pierdan su norte, ni abandonen sus proyectos y sueños, luchen por ellos… A Williano, por ser mi compañero y apoyo, me estimulaste a seguir y alcanzar mi meta, tu perseverancia y tenacidad son mi ejemplo. A mi china, por darme la alegría de vivir todos los días algo muy especial y sublime a su lado, por confiar en mi, por esperarme con paciencia y recibirme con una sonrisa llena de amor, por hacer de mamá un ser cada día mejor. A mis hermanos y hermanas siempre luchadores, mi amor y respeto, gracias por su ejemplo. A mi amiga Leyi, por querer a mi china, la confianza y tranquilidad que me distes, no tiene medida, mi eterno agradecimiento. Virginia 4 AGRADECIMIENTO A mi madrecita que con tanto amor me guió siempre por el camino correcto. A mis hermanos que siempre han creído en mí, por su amor. A Gerardo por el apoyo, el amor, las levantadas temprano y una gran cantidad de cosas que no podría expresar con palabras. A mis amigos: Martha y Cheo, Juan “Naiquatá”, Carlos Mejías Anzoátegui, Nancy, Fósforo, Nairoby, Ricardo, Alexis, Migdalia, Manuel Rangel, Milagro, Julia Flores… Por creer en mí, por darme una palabra de aliento en el momento justo. A mi amiga y compañera Virginia, por la comprensión, por la palabra justa en el momento correcto, por todas las cosas compartidas, por haber sido más que una compañera de tesis. A la profesora Eleonora Acosta, por darme su confianza y su aval para regresar a la facultad. A la Profesora Nora Montaño, por darnos la oportunidad de culminar este ciclo. A la profesora Zenaida por su invalorable ayuda, y, por el tiempo dedicado. Al profesor Antonio y toda su gente, quienes siempre estuvieron dispuestos a ayudarnos para que este proyecto se pudiera terminar. A Rafael Sánchez por su comprensión ante mis ausencias. Elicenda 5 DEDICATORIA Después de tanto tiempo de trabajo constante, de altas y bajas, de descuido, de anteponer las otras cosas antes que la Universidad, por fin termino este ciclo… Dedico a los amores de mi vida: Víctor y Ana Victoria (mis padres), Oriana, Alexander y Mathías (mis hijitos), Víctor y Argenis (mis hermanos), Mayvic, Gabriel y Elvia (mis sobrinos), y a mi Gerardo. Todo lo que he hecho en mi vida, ha sido siempre en función de ustedes y ayudada por el amor que nos tenemos. A mis cariños que no están aquí en la Tierra, a ustedes que siempre me quisieron y que ame profundamente. A mis hijos: Oriana y Alexander quiero decirles, que las decisiones que tomamos en nuestra vida son determinantes para alcanzar nuestras metas, pero siempre hay que tener la voluntad para dirigir nuestras vidas hacia donde queremos. Elicenda 6 Resumen En este Trabajo de Grado se desarrolla una herramienta web para agilizar la interacción entre estudiantes y profesores de la Escuela de Computación durante el desarrollo de las pasantías profesionales y el servicio comunitario. Actualmente la comunicación entre estudiantes y profesores se realiza mediante visitas programadas que no siempre son exitosas, ya que por diferentes factores no llegan a realizarse. Esto trae como consecuencia el retardo en el cronograma pautado y numerosas discrepancias entre las actividades realizadas y las propuestas. Para resolver este problema se diseño e implementó un sitio Web que permite a estudiantes y profesores comunicarse tan frecuentemente como se requiera y desde cualquier sitio. Para el diseño de la propuesta se utilizó el método ágil XP (Extreme Programing), ya que este nos permite separar cada proceso estimado en tareas a realizar, lo cual conlleva a una implementación adaptable y modificable. La arquitectura del software está basada en el modelo cliente – servidor, y se seleccionó MYSQL 5.1 como el manejador de base de datos, por ser Software Libre y de uso común. Se utilizó Ruby como lenguaje de programación y el framework de desarrollo Web fue Rails 3.0. El sitio web desarrollado permitirá a estudiantes y profesores intercambiar información y resolver problemas puntuales en línea. Palabras Claves: Pasantías, Servicio Comunitario, Diario, Actividades, Método Extreme Programing (XP). 7 Tabla de contenido Resumen ................................................................................6 Introducción.......................................................................... 10 Capítulo 1. El problema ............................................................ 12 1.1 Planteamiento del problema........................................................12 1.2 Objetivo general ......................................................................13 1.3 Objetivos específicos.................................................................13 1.4 Justificación ...........................................................................13 1.5 Alcance.................................................................................13 Capítulo 2. Marco conceptual. .................................................... 14 2.1 Servicio comunitario (SC)............................................................14 2.2. Pasantías profesionales (PP) .......................................................15 Capítulo 3. Marco metodológico .................................................. 17 3.1 Metodologías ágiles...................................................................17 3.2 Extreme Programming - XP..........................................................17 3.3 Características generales de XP ....................................................18 3.4 Fases de un proyecto en eXtreme Programming .................................18 3.5 Ruby on Rails ..........................................................................21 Capitulo 4. Marco aplicativo ....................................................... 25 4.1 Historias de usuarios .................................................................25 4.2 Iteración 1 .............................................................................28 4.3 Iteración 2 .............................................................................31 4.4 Iteración 3 .............................................................................32 4.5 Iteración 4 .............................................................................50 4.6 Iteración 5 .............................................................................57 Conclusiones ......................................................................... 62 Recomendaciones ................................................................... 63 Referencias bibliográficas.......................................................... 64 ANEXOS................................................................................ 66 8 Índice de Figuras Figura 3.1: Fases del desarrollo XP. Tomado de [16] .......................... 19 Figura 3.2. Ciclo de vida de un proyecto en XP. Tomado de [17] ............ 21 Figura 3.3: Arquitectura MVC. Tomado de [20] ................................. 24 Figura 4.1 Formato de encuesta a estudiantes en pasantía y SC ............. 29 Figura 4.2: Caso de uso Sistema Actual .......................................... 30 Figura 4.3. Esquema de arquitectura de la plataforma a utilizar ............ 32 Figura 4.4. Caso de uso sistema propuesto ...................................... 34 Figura 4.5. Diagrama de clases sistema de gestión de actividades .......... 40 Figura 4.6 Diagrama de actividad, caso de uso iniciar sesión................. 41 Figura 4.7 Diagrama de actividad caso de uso registrar usuario ............. 42 Figura 4.8 Diagrama de actividad caso de uso administrar comunicación .. 43 Figura 4.9 Diagrama de actividad caso de uso administra diario............. 44 Figura 4.10 Diagrama de actividad caso de uso actualiza diario ............. 45 Figura 4.11 Diagrama de actividad caso de uso consulta diario .............. 46 Figura 4.12 Diagrama de actividad caso de uso establece conversación .... 47 Figura 4.13 Diagrama Entidad Relación E/R ..................................... 48 Figura 4.14 Diagrama de tablas de la Base de Datos ........................... 49 Figura 4.15 Pantalla para el Ingreso al Sistema (Login) ....................... 51 Figura 4.16 Pantalla que permite Cambiar Contraseña........................ 52 Figura 4.17 Pantalla que permite Agregar Tarea ............................... 52 Figura 4.18 Pantalla que permite Agregar Actividad........................... 53 Figura 4.19 Pantalla que muestra por docentes los estudiantes de Pasantía Asignados ............................................................................. 53 Figura 4.20 Pantalla que muestra las tareas de cada actividad .............. 54 Figura 4.21 Pantalla para Editar Diario .......................................... 54 Figura 4.22 Pantalla que muestra Pasantías por estudiante .................. 55 Figura 4.23 Pantalla que permite establecer una conversación.............. 55 Figura 4.24 Pantalla que permite crear comentario ........................... 56 Figura 4.25 Pantalla que permite ver conversaciones ......................... 56 9 Índice de Tablas Tabla 4.1: Historia de usuario 1 ................................................... 25 Tabla 4.2: Historia de usuario 2 ................................................... 25 Tabla 4.3: Historia de usuario 3 ................................................... 25 Tabla 4.4: Historia de usuario 4 ................................................... 26 Tabla 4.5: Historia de usuario 5 ................................................... 26 Tabla 4.6: Historia de usuario 6 ................................................... 26 Tabla 4.7: Historia de usuario 7 ................................................... 27 Tabla 4.8: Historia de usuario 8 ................................................... 27 Tabla 4.9: Historia de usuario 9 ................................................... 27 Tabla 4.10: Iteración 1 ............................................................. 28 Tabla 4.11: Iteración 2 ............................................................. 31 Tabla 4.12: Iteración 3 ............................................................. 33 Tabla 4.13: Iteración 4 ............................................................. 50 Tabla 4.14: Iteración 5 ............................................................. 57 Tabla 4.15: Formato de Pruebas .................................................. 58 Tabla 4.16: Pruebas realizadas.................................................... 61 10 Introducción Según el plan de estudios vigente, los estudiantes de la Escuela de Computación de la Facultad de Ciencias, Universidad Central de Venezuela, deben realizar prácticas profesionales enmarcadas en la asignatura Pasantía y además cumplir con el Servicio Comunitario, como requisitos para la obtención del título de Licenciado en Computación. A tal efecto, las coordinaciones de Pasantía y Servicio Comunitario planifican y definen los lineamientos que rigen las actividades a realizar por los estudiantes que inscriben estas asignaturas. En el caso de las Pasantías al estudiante se le asigna un tutor académico y un tutor empresarial, al mismo tiempo que se planifica un cronograma de trabajo que el estudiante deberá cumplir, rindiendo informes periódicos a su tutores. De igual manera se procede con la práctica del Servicio Comunitario, la cual se programa en conjunto con la comunidad un cronograma de actividades que el estudiante deberá satisfacer bajo la supervisión y guía de su tutor de la comunidad y su tutor académico. En particular, la comunicación entre estudiantes y tutores académicos se lleva a cabo bajo el esquema de visitas programadas por ambos, pero en ocasiones éstas no se efectúan debido a diferentes razones, tales como inconveniencia de horario, imprevistos de alguno de los actores, etc., lo que repercute en el avance y logro de las actividades previamente programadas para la realización del proyecto. Con el objetivo de contribuir a mejorar el seguimiento de las actividades de Pasantía y Servicio Comunitario, así como también para mejorar la gestión de estos procesos, en este trabajo de tesis se desarrolla una herramienta web que agiliza la interacción entre estudiantes y profesores tutores, ya sean de pasantía o de servicio comunitario. La herramienta permite al tutor monitorear el desenvolvimiento de los estudiantes al mismo tiempo que provee un mecanismo de consulta para aclarar dudas y plantear inconvenientes que puedan enfrentar en la realización de sus actividades. La solución propuesta se basa en el desarrollo de una aplicación Web bajo el método ágil XP y el ambiente de programación Ruby on Rails, a través del cual se capturan las tareas o actividades que realizará el estudiante y se almacenan en un diario de actividades. Este diario será la herramienta de monitoreo que utilizará el tutor con el fin de verificar el avance y logro de las actividades programadas. La comunicación entre el alumno y el profesor podrá efectuarse en cualquier momento haciendo uso del sitio web, sin eliminar la posibilidad 11 de tener una comunicación presencial durante el desarrollo de las actividades; pero optimizando o minimizando el número de visitas. El resto de este documento, está estructurado en cinco capítulos, el capítulo 1 da a conocer el problema a resolver, los objetivos a desarrollar, la justificación y el alcance de la investigación. En el capítulo 2 se describen los procesos actuales para realizar la Pasantía Profesional y el Servicio Comunitario en la Facultad de Ciencias de la Universidad Central de Venezuela. El capítulo 4 muestra la descripción del método utilizado para el desarrollo del sistema. En el capítulo 5 se especifican las actividades realizadas en cada una de las iteraciones que conforman el desarrollo del sistema según el método utilizado y finalmente se exponen las conclusiones del proyecto y recomendaciones para posibles futuros trabajos. 12 Capítulo 1. El problema En este capítulo se da a conocer el problema a resolver, los objetivos a desarrollar, la justificación del proyecto y el alcance de la investigación. 1.1 Planteamiento del problema Las coordinaciones de Pasantía y Servicio Comunitario de la Escuela de Computación de la UCV, se encargan de gestionar los procesos relacionados a las prácticas profesionales y el servicio comunitario respectivamente, asignaturas obligatorias dentro del plan de estudios vigente de la Licenciatura en Computación. Estas coordinaciones establecen los lineamientos que deben satisfacer los cronogramas de trabajos, así como también asignan a cada estudiante un profesor, como su tutor académico, quien se encargará, entre otras cosas, de velar por el exitoso cumplimiento de todas las actividades programadas. Para el buen desarrollo de las actividades enmarcadas dentro de las asignaturas Pasantía y Servicio Comunitario, es necesaria una comunicación constante y sistemática entre los estudiantes y sus tutores académicos. Un herramienta útil y necesaria para el registro de las actividades es el diario de campo, allí los estudiantes señalan las experiencias de cada actividad a medida que se va desarrollando su trabajo. Uno de los inconvenientes que se presenta frecuentemente durante el desarrollo de las actividades es que el monitoreo por parte de los profesores no se realiza de manera oportuna, lo cual se atribuye principalmente a la falla en la comunicación entre los actores (estudiantes y profesores). El alumno establece comunicación con el tutor al iniciar la actividad y en algunos casos, se vuelve a comunicar con él eventualmente; sin embargo, la generalidad es que se restablezca la comunicación una vez finalizado el trabajo, cuando debe ser evaluado y avalado el informe final. Esto trae como consecuencia que el tutor desconozca el desarrollo real del trabajo, si existe congruencia entre los objetivos planteados inicialmente y los que finalmente se cumplieron, lo que dificulta la evaluación del informe final y la valoración de la práctica. Una vez que esta situación no es el escenario ideal para el desarrollo de las prácticas de Pasantía y Servicio Comunitario se propone implementar una aplicación Web que les permita a los profesores realizar seguimiento a las actividades del estudiante, y que facilite la comunicación frecuente para el intercambio información e ideas. 13 1.2 Objetivo general Desarrollar una aplicación Web de gestión de actividades de estudiantes que realizan el servicio comunitario y pasantías profesionales, bajo el enfoque del método XP. 1.3 Objetivos específicos • Analizar los procesos relacionados con Pasantías y Servicio Comunitario. • Determinar los requerimientos de Comunicación entre los Actores involucrados en los Procesos. • Diseñar la Aplicación Web. • Implementar la aplicación Web. • Realizar pruebas a la aplicación desarrollada. 1.4 Justificación Dentro de la Facultad de Ciencias de la Universidad Central de Venezuela, se requiere de mecanismo que permita mantener el seguimiento de las actividades de los estudiantes que realizan el servicio comunitario y las pasantías, por lo que se observa la necesidad de facilitar al profesor tutor, coordinador y estudiante una herramienta para la gestión de mecanismos de comunicación que permita garantizar un buen desempeño del estudiante en estas actividades con calidad, oportunidad y eficiencia. 1.5 Alcance La aplicación permitirá la optimización y control del seguimiento de experiencias que se suscitan durante la realización de la pasantía profesional y el servicio comunitario, con el beneficio pleno de los estudiantes y profesores que podrán tener en la aplicación, sus actividades y posibilidades de comunicación no presencial. La aplicación no sustituirá de ninguna manera los informes finales de pasantía y servicio comunitario, ni servirá como medio para evaluarlos. Los actores principales son los estudiantes y los tutores académicos; los tutores empresariales y comunitarios no están involucrados en este desarrollo, pues, se limitó el uso al campus universitario. 14 Capítulo 2. Marco conceptual. En este capítulo se hace la descripción de los procesos actuales que se llevan a cabo para realizar la Pasantía Profesional y el Servicio Comunitario dentro de la Facultad de Ciencias de la Universidad Central de Venezuela. 2.1 Servicio comunitario (SC) La prestación del servicio comunitario es una actividad docente de carácter obligatorio y de contenido práctico que debe realizar el estudiante de la Facultad de Ciencias de la UCV para poder obtener el título de Licenciado. Consiste en establecer una relación entre la comunidad y la universidad a través del estudiante, quien acompaña técnica y solidariamente a las comunidades organizadas, contando con las herramientas adquiridas durante su formación. El principal objetivo de esta práctica es la de encauzar las necesidades detectadas en el espacio público o privado del entorno urbano donde habitan, en pro del bienestar social. El servicio comunitario consta de dos componentes, uno teórico denominado “Programa de Inducción”, cuya duración es de 16 horas. Y el otro componente práctico de 120 horas académicas denominado “Programa de prácticas comunitarias”, las cuales deben realizarse en un lapso no menor de 3 meses y guiadas por un tutor (profesor de la Facultad) y un tutor comunitario (persona responsable en la comunidad). Los actores del servicio comunitario son: la comunidad, la cual se propone como el lugar de encuentro e interacción universidad-sociedad; los estudiantes, quienes, a través de su participación, cooperan en la búsqueda del bienestar social, la Facultad de Ciencias que, de cara al país, redimensiona las características de un proceso formativo integral del futuro licenciado; y, finalmente, los profesores quienes, en su rol de tutores académicos, deben apoyar a los estudiantes. La comisión de servicio comunitario (CSC), la unidad de servicio comunitario (USC) y los tutores académicos, son los organizadores y controladores de la prestación del servicio comunitario dentro de la facultad de ciencias. La CSC nombrará un tutor académico a cada estudiante prestador de SC de la Facultad, podrán ser tutores académicos los profesores de la UCV y personas preparadas para tal fin. Los deberes y atribuciones del tutor académico son: prestar asesoría adecuada y oportuna a sus prestadores de SC, establecer, con el responsable del proyecto y la comunidad, los detalles del plan de trabajo a ejecutar, remitir informe a la USC sobre el desempeño del (de los) 15 prestador(es), revisar, evaluar y firmar el informe final presentado por el prestador de servicio comunitario. Una vez aprobado el “Programa de Inducción” y presentando, en la fecha indicada, el informe final del “Programa de prácticas comunitarias” en el cual el alumno participó, este será evaluado para su posible aprobación. 2.2. Pasantías profesionales (PP) La pasantía profesional es una actividad pedagógica obligatoria de contenido práctico, que contribuye a la formación profesional de los estudiantes de educación superior. Se crea una relación entre la Universidad y la Organización a través del estudiante, que contribuye a mejorar la formación de los recursos humanos. Existen áreas fundamentales en las que se puede desarrollar la PP, tales como: el desarrollo de sistemas y aplicaciones computacionales, gestión de plataformas computacionales y servicios informáticos, Investigación e innovación en computación. Los actores en la pasantía profesional son el pasante, la organización a través de un tutor empresarial, y la escuela de computación a través de un tutor académico. Las funciones del tutor académico son: seleccionar el problema a resolver, elaborar el plan de pasantía, ejercer la planificación y control del trabajo cotidiano, solucionar los conflictos que surjan durante la pasantía. Durante el lapso de inscripción la comisión de pasantías asigna los tutores académicos a aquellos alumnos que no hayan contactado uno y remite al Consejo de Escuela la lista de los tutores académicos y sus respectivos pasantes. El Consejo de Escuela participa a los tutores acerca de los pasantes que le fueron asignados. Durante la realización de la pasantía el tutor académico recibe el informe de desempeño del pasante de parte del tutor organizacional y aprueba o no el informe final de pasantía. 2.3 La comunicación entre estudiantes y tutores Todos los procesos mencionados anteriormente deben cumplirse a cabalidad para poder llevar a cabo las pasantías y el servicio comunitario ya que forma parte de lo establecido en las normativas y reglamentos que rigen 16 estos dos requisitos académicos. Pero de igual manera y no menos importante es propiciar que se establezca y mantenga una comunicación oportuna entre el estudiante y su tutor académico, a pesar de no mencionarse de manera expresa en la normativa, todo esto con el fin de verificar el cumplimiento de los objetivos pautados, así como poder solucionar cualquier problema que pueda suscitarse durante la ejecución del plan ideado inicialmente. Como respuesta a esta situación es que se plantea la necesidad de que exista una aplicación que permita la comunicación entre estudiantes y profesores, sin que esta sea presencial y donde el profesor tutor pueda conocer las actividades que el estudiante esta desarrollando según lo planificado. 17 Capítulo 3. Marco metodológico El presente capítulo tiene la finalidad de exponer los fundamentos conceptuales que fueron utilizados durante el proceso de investigación y desarrollo de la aplicación. El método ágil XP y el lenguaje Ruby y Rails. 3.1 Metodologías ágiles En febrero de 2001, tras una reunión celebrada en Utah-EEUU, nace el término ‘ágil’ aplicado al desarrollo de software. En esta reunión participan un grupo de 17 expertos de la industria del software, incluyendo algunos de los creadores del método de software. Su objetivo fue esbozar los valores y principios que deberían permitir a los equipos desarrollar software rápidamente y respondiendo a los cambios que puedan surgir a lo largo del proyecto. De esa reunión nace el Manifiesto Ágil, documento que resume la filosofía ágil. Las metodologías ágiles surgen para dar respuesta al entorno siempre cambiante y en rápida evolución en que se desarrollan los sistemas informáticos. Esta filosofía de desarrollo, propone trabajar en ciclos cortos (como mini-proyectos) que implementan una parte de las funcionalidades, sin perder el objetivo general del proyecto, es decir, haciendo revisiones continuas del trabajo, lo que conlleva a programas más flexibles y adaptables. Dentro de este esquema de programación se da paso a la programación extrema, ésta pretende llevar ciertas actividades rígidas a un extremo para dar la versatilidad y adaptabilidad necesarias al proceso de tal forma que se minimicen los elementos adversos y se optimice el trabajo. 3.2 Extreme Programming - XP Extreme Programming o el método XP, fue introducido por Beck K. en 1999 [1], toma su nombre del hecho que lleva a límites extremos algunos elementos y actividades comunes de la forma tradicional de programar. El objetivo principal de XP es la satisfacción del cliente, por lo que debe responder rápidamente a sus necesidades, aunque se realicen cambios en fases avanzadas del proyecto. 18 3.3 Características generales de XP El método XP pasa por alto la utilización de elaborados casos de uso, la exhaustiva definición de requerimientos y la producción de una extensa documentación. La tendencia de entregar software en lapsos cada vez menores de tiempo y con exigencias de costos reducidos y altos estándares de calidad, hace que XP sea una opción a considerar. En términos generales parece ser un método adecuado para proyectos medianos y pequeños, donde los equipos de desarrollo no pasan de 10 programadores. Otra característica que distingue a XP en la práctica es que, típicamente, los que se encargan de introducirla en los ambientes de trabajo son los propios encargados del desarrollo y sus equipos de programación, a diferencia de lo que sucede con otros métodos, las cuales normalmente se introducen a un nivel corporativo y gradualmente se van bajando hasta alcanzar a los equipos de desarrollo. En el Manifiesto Ágil, según [4] se exponen los principios básicos del método XP: considera más importantes, los individuos e interacciones ante que los procesos y herramientas, el desarrollo de un Software que funcione sobre una documentación exhaustiva, la colaboración con el cliente por encima de la negociación de contratos y la respuesta ante el cambio frente al seguimiento de un plan estricto. 3.4 Fases de un proyecto en eXtreme Programming Según Beck K [1] y apoyado por Wells [6] y Grenning [7],[1] las cuatro fases de un desarrollo en XP son: planificación del proyecto, diseño, codificación y prueba como se muestra en la Figura 3.1 19 Figura 3.1: Fases del desarrollo XP. Tomado de [16] En la etapa de planificación se definirán: • Historias de usuario (H.U), las cuales representan la técnica utilizada para especificar los requisitos del software, en ellas el cliente describe brevemente y en lenguaje no técnico las características que el sistema debe poseer. Si bien el estilo puede ser libre, algunos autores recomiendan redactar las historias de usuarios para que respondan a tres preguntas: ¿Quién se beneficia?, ¿qué se quiere? y ¿cuál es el beneficio?, ver [2]. Jeffries en [3] considera, que cada historia de usuario es los suficientemente comprensible y delimitada para que los programadores puedan implementarla en unas semanas. • Iteraciones, cada una de ellas es un período de tiempo en el que se hace una entrega incompleta del proyecto al cliente, pero tiene implementadas algunas funcionalidades, definidas por el conjunto de historias de usuarios agrupadas en cada iteración. Wake en [5] proporciona algunas guías útiles para realizar la planificación de la entrega y de cada iteración. • Velocidad del proyecto la cual representa la rapidez con la que se desarrolla el proyecto. • Programación en pareja pues incrementa la productividad y la calidad del software desarrollado. • El esquema de reuniones diarias ya que es necesario que los desarrolladores se reúnan diariamente y expongan sus problemas, soluciones e ideas de forma conjunta. Desarrollo Pruebas Diseño Planificación 20 En la puesta en marcha de la etapa de diseño XP recomienda • Manejar diseños simples, hay que procurar hacerlo todo lo menos complicado posible para conseguir un diseño fácilmente entendible e implementable, que a la larga costará menos tiempo y esfuerzo desarrollar. • Usar glosarios de términos y una correcta especificación de los nombres de métodos y clases ya que esto ayudará a comprender el diseño y facilitará sus posteriores ampliaciones y la reutilización del código. • Reducir riesgo creando soluciones puntuales. • Evitar añadir funcionalidades extras en las primeras etapas, aunque se piense que un futuro será utilizada. • Procurar refactorizar los códigos ya que revisar de nuevo estos códigos ya creados, permite optimizar su funcionamiento. La refactorización mejora la estructura interna del código sin alterar su comportamiento externo [8]. Durante la etapa de codificación o desarrollo, el cliente debe procurar estar siempre disponible, él es una parte más del equipo de desarrollo y su presencia es indispensable en las distintas fases de XP. La codificación debe hacerse ateniendo a estándares ya creados, ya que esto mantiene el código consistente y facilita su comprensión y escalabilidad. En cuanto al código hay que hacer que funcione y que sea correcto, más tarde se puede optimizar. En la etapa Pruebas se deben crear los test o pruebas que pasarán los códigos que realizan cada funcionalidad. Las pruebas del sistema tienen como objetivo verificar la funcionalidad del sistema a través de sus interfaces externas comprobando que dicha funcionalidad sea la esperada en función de los requisitos del sistema [10]. 21 Figura 3.2. Ciclo de vida de un proyecto en XP. Tomado de [17] 3.5 Ruby on Rails Desarrollar aplicaciones web con mínimo código y en un tiempo mínimo es todo un desafío, y utilizar un Framework, facilita en gran medida el trabajo gracias al conjunto de funciones o código genérico del que dispone para realizar tareas comunes y frecuentes en todo tipo de aplicaciones (creación de objetos, conexión a base de datos, etc.). El lenguaje de programación Ruby es multiplataforma, netamente orientado a objetos, es software libre, fue creado por Yukihiro Matsumoto, fue diseñado para un desarrollo rápido y sencillo. La primera versión fue liberada en 1995, hereda varias características de lenguajes como: Perl, Smalltalk, Eiffel, Ada y Lisp. Su creador ha expresado, que su obra fue hecha pensando en la productividad así como la facilidad y diversión para el programador, es por eso que presenta una buena interfaz al usuario, dándole un mayor énfasis a las necesidades del programador que a las de la máquina, ver en [12]. El framework Rails es una herramienta para el desarrollo de aplicaciones web, software libre por naturaleza, basado en el patrón de diseño Modelo Vista Controlador (MVC) según se expresa en [18] y [19]. Fue creado por David Heinemeier Hansson [15], empleado de la empresa 37signals. 22 Fue liberado por primera vez al público en julio del 2004, y lo implemento en una aplicación orientada a la administración de proyectos llamada Basecamp. Rails está basado en estos principios de desarrollo: • Don’t Repeat Yourself (No te repitas) Significa que la información se encuentra en un solo lugar sin ambigüedades, por ejemplo, mediante Active Record, el desarrollador no tiene que especificar los nombres de base de datos de columna en definiciones de clase. En su lugar, Ruby puede recuperar esta información de la base de datos. • Convention Over Configuration (Convención sobre configuración) Significa que un desarrollador sólo tiene que especificar los aspectos no convencionales de la solicitud. Por ejemplo, si hay una clase ventas en el modelo, la tabla correspondiente en la base de datos se llama ventas de forma predeterminada. Ruby on Rails [13] , también conocido como RoR, fue escrito en el lenguaje de programación Ruby, siguiendo el paradigma de la arquitectura “model view controller” (MVC) [14], y es un poderoso aliado que ayudará a desarrollar en un tiempo récord una completa aplicación Web que necesita interactuar con una base de datos. RoR trata de combinar la simplicidad con la posibilidad de desarrollar aplicaciones del mundo real escribiendo menos código que con otros marcos y con un mínimo de configuración, así como también intenta mantener la neutralidad con respecto a la base de datos, la portabilidad de la aplicación a diferentes sistemas de base de datos y la reutilización de bases de datos preexistentes. El lenguaje de programación Ruby permite la meta programación, de la cual Rails hace uso, lo que resulta en una sintaxis que muchos de sus usuarios encuentran muy legible. Rails se distribuye a través de Rubí Gems, que es el formato oficial de paquete y canal de distribución de librerías y aplicaciones Ruby. Como se lee en [11], RoR ofrece algunas ventajas sobre otros framework, es gratis (Open Source), posee toda una comunidad de apoyo además Rail usa convenciones, paquetes de programas integrados y código predefinido, destinado para completar y usar inmediatamente sin tener que configurar. 23 Arquitectura MVC (Modelo Vista Controlador) Los creadores del lenguaje Smalltalk, uno de los primeros y más puros lenguajes orientados a objetos, se plantearon la simplificación del diseño y el desarrollo de las interfaces de usuario estructurando las aplicaciones mediante la separación de sus componentes gráfica y algorítmica, esto según Goldberg [14]. Con ello crearon la denominada arquitectura MVC (Modelo, Vista, Controlador) [20], ver figura 3.3, que es una de las más extendidas hoy día para aplicaciones interactivas, es un patrón de arquitectura de software que separa los datos de una aplicación, la interfaz de usuario, y la lógica de control en tres componentes distintos, correspondientes a las siglas que le dan su nombre. Modelo: esta es la representación específica de la información con la cual el sistema opera, la base de datos pertenece a esta capa. Vista: Es lo que utilizan los usuarios para interactuar con la aplicación (los gestores de plantillas pertenecen a esta capa). Controlador: Es un bloque de código que realiza llamadas al modelo para obtener los datos y se los pasa a la vista para que los muestre al usuario. El patrón de llamada y retorno MVC se ve frecuentemente en aplicaciones web, donde la vista es la página HTML y el código que provee de datos dinámicos a la página, el modelo es el sistema de gestión de base de datos y la lógica de negocio, y el controlador es el responsable de recibir los eventos de entrada desde la vista. 24 Figura 3.3: Arquitectura MVC. Tomado de [20] RESPUESTA (HTML, RSS. XML, ETC.) DATOS SOLICITUD PETICIÓN (HTTP, CLI, ETC.) 25 Capitulo 4. Marco aplicativo En el presente capítulo, aplicando el método ágil XP, se describen las historias de usuario (H.U), distribuidas en un conjunto de iteraciones, estas, están agrupadas de forma tal de alcanzar un objetivo en cada iteración. El proyecto y su desarrollo comprenden un total de cinco (5) iteraciones. 4.1 Historias de usuarios Número :1 Nombre: Determinar los requerimientos de los procesos de negocio Prioridad: Alta Tipo: Nueva Tiempo estimado: 1 día Descripción: Recavar toda la información de los requerimiento del negocio, las necesidades del cliente Tabla 4.1: Historia de usuario 1 Número :2 Nombre: Reconocer del estado actual de los procesos de Pasantías y Servicio Comunitario Prioridad: Alta Tipo: Nueva Tiempo estimado: 1 día Descripción : Recavar toda la información de los procesos que se realizan actualmente en la presentación de pasantías y servicio comunitario Tabla 4.2: Historia de usuario 2 Número :3 Nombre: Determinar los requerimientos del sistema (restricciones) Prioridad: Alta Tipo: Nueva Tiempo estimado: 1/2 día Descripción: Definir las restricciones de software así como las de hardware, para el buen desarrollo del sistema Tabla 4.3: Historia de usuario 3 26 Número :4 Nombre: Definir y diseñar los modelos requeridos para el desarrollo del sistema Prioridad: Media Tipo: Nueva Tiempo estimado: 2 días Descripción: Definir y elaborar el diseño de la interfaz inicial del sitio web gestor de actividades en pasantías y servicio comunitario, de la base de datos, diagramas de casos de uso, diagrama de clases y diagrama de actividades Tabla 4.4: Historia de usuario 4 Número :5 Nombre: Acondicionar el ambiente de ejecución del sistema, crear la base de datos y desarrollar la interfaz que permitan el ingreso al sitio Web Prioridad: Media Tipo: Nueva Tiempo estimado: 1 día Descripción: Codificar y desarrollar las interfaces y los métodos necesarios para ingresar al sistema, crear la base de datos, instalar el ambiente en las maquinas personales del grupo de trabajo Tabla 4.5: Historia de usuario 5 Número :6 Nombre: Desarrollar vistas y métodos que permitan realizar la captura y almacenamiento de los datos de un usuario Prioridad: Media Tipo: Nueva Tiempo estimado: 1/2 día Descripción: Codificar vistas y métodos que permitan realizar la captura y almacenamiento de los datos asociados a los estudiantes y profesores Tabla 4.6: Historia de usuario 6 Número :7 Nombre: Desarrollar vistas y métodos que permitan capturar y almacenar información en la base de datos (diario de campo- actividades) Prioridad: baja Tipo: Nueva Tiempo estimado: 2 días Descripción: Desarrollar las vistas y métodos que permitan ingresar 27 información de los diarios de campo de un estudiante en la base de datos del sistema, realizar actualizaciones en los registros de las actividades asociadas a un diario, consultar de la evolución y estatus de las mismas Tabla 4.7: Historia de usuario 7 Número :8 Nombre: Desarrollar vistas y métodos que permitan la comunicación entre los usuarios Prioridad: Alta Tipo: Nueva Tiempo estimado:1 día Descripción: Codificar las vistas y métodos que permitan almacenar información de las conversaciones establecidazas entre usuarios Tabla 4.8: Historia de usuario 8 Número :9 Nombre: Desarrollar y aplicar pruebas de aceptación al sistema Prioridad: Media Tipo: Nueva Tiempo estimado:3 días Descripción: Diseñar, desarrollar y aplicar pruebas al sistema que permitan verificar el buen desempeño de cada funcionalidad Tabla 4.9: Historia de usuario 9 28 4.2 Iteración 1 . Planificación Número de Iteración: 1 Descripción: Realizar el estudio de los requerimientos del negocio con el cliente y estudio del sistema actual Fecha inicio/ Fecha fin Número Fecha inicio Fecha fin Historia Tipo 1 Determinar los requerimientos del negocio Nueva 2 Reconocimiento del estado actual de los procesos de Pasantías y Servicio Comunitario Nueva Tabla 4.10: Iteración 1 . Codificación En la presente iteración, se procedió a realizar un completo levantamiento de la información del negocio y análisis del procedimiento que actual se sigue para llevar el control de pasantías y servicio comunitario que realiza los estudiantes . Pruebas Las pruebas realizadas en esta iteración se basaron solo en realizar consulta a algunos estudiantes que realizan servicio comunitario o pasantías para saber cual era el esquema real de trabajo que ellos empleaban para mantenerse en contacto con su tutor académico Aplicación: Para conocer, el comportamiento más habitual entre los alumnos que están realizando Pasantías o Servicio Comunitario aplicamos a un grupo de 18 alumnos una encuesta simple, que nos permitió tener idea de la situación en estudio (ver anexo 1). La encuesta aplicada fue la siguiente: 29 En la actualidad dos bachilleres de la Escuela de Computación, Facultad de Ciencias- UCV, estamos elaborando un trabajo para contribuir a la mejora en el proceso de comunicación entre profesores y estudiantes, durante la realización de las pasantías y el servicio comunitario, para lo cual requerimos su valiosa colaboración, al responder las siguientes consultas - Esta realizando actualmente __ Pasantías __ Servicio Comunitario ___ Ambos - Conoces a tu tutor académico __ Si __ No - De ser afirmativo, tu contacto con el tutor es mayormente __ Personal __ Vía Telefónica __ Correo Electrónico __ Otro - Cuantas veces al mes estableces comunicación con tu tutor __ Una __ Dos __ Tres o más __ A veces ninguna - Compartes con tu tutor el avance de las actividades establecidas en el cronograma de actividades __ Siempre __ Alguna vez __ Rara vez __ solo cuando hay problemas - Consideras que el apoyo y seguimiento de tu tutor sobre las actividades planificadas fue determinante en el logro de las mismas __ Si __ No __ A veces GRACIAS POR TU APOYO!! Figura 4.1 Formato de encuesta a estudiantes en pasantía y SC Por otra parte se hizo la revisión del proceso de seguimiento de los estudiantes que realizan el servicio comunitario o la pasantía profesional, de lo que surgió: 30 4.2.1. Modelo de casos de uso actual pasantías y servicio comunitario Figura 4.2: Caso de uso Sistema Actual Agrega nota Modifica Nota Verifica avance verifica duda Acepta reunion Declina reunion Administra proyectos Crear Proyecto Listar Proyecto actualiza diario <<extend>> <<extend>> Gestiona reunion estudiante Ver diario de actividades Profesor <<extend>> <<extend>> <<extend>> <<extend>> ver detalle proyecto desechar proyecto <<extend>> <<extend>> Administradorr 31 4.3 Iteración 2 . Planificación Número de iteración: 2 Descripción: Realizar el estudio de los requerimientos del sistema tanto hardware como software y establecer las restricciones Fecha inicio/ Fecha fin Numero Fecha inicio Fecha fin Historia Tipo 3 Determinar los requerimientos del sistema Nueva Tabla 4.11: Iteración 2 . Codificación En esta iteración, se procedió a realizar el estudio de los requerimientos del sistema tanto en lo que se refiere a software como hardware y se establecieron las posibles restricciones. . Pruebas Las pruebas realizadas en esta iteración se basaron solo en realizar consultas sobre las bondades y capacidades de cada software a ser usado para el desarrollo del sitio web. Aplicación: Una vez realizada la iteración 1 podemos analizar los requerimientos del sistema que permitan satisfacer las necesidades del cliente, escogimos trabajar con un conjunto de subsistemas de software que permiten alcanzar una solución global, en nuestro caso diseñar y configurar sitios Web dinámico con un esfuerzo reducido. Linux, será el sistema operativo, MySQL, el sistema de gestión de bases de datos SQL Open Source más popular, lo desarrolla, distribuye y soporta MySQL AB, es un sistema de gestión de bases de datos relacionales. El servidor de base de datos MySQL es muy rápido, fiable y fácil de usar. Mysql posee una gran adaptación a diferentes entornos de desarrollo y Ruby on Rails, lenguaje de programación también conocido como RoR o Rails, el cual dispone como servidor intrínseco Webrick/Mongrel [21] [22]. 32 Figura 4.3. Esquema de arquitectura de la plataforma a utilizar 4.4 Iteración 3 . Planificación Número de iteración: 3 Descripción: Diseño de la arquitectura del sistema Fecha inicio/ Fecha fin Número Fecha inicio Fecha fin Historia Tipo 4 Definir y diseñar los modelos requeridos para el desarrollo del sistema Nueva 5 Acondicionar el ambiente de ejecución del sistema, crear la base de datos y desarrollar la interfaz que permitan el Nueva Cliente Web WEBRICK/MONGREL RUBY ON RAIL MYSQL SMTP Resultado SQL Gema mysql2 Generación de e-mail Gema Mail Consulta SQL Petición de servicio Envío HTML Envío e-mail 33 ingreso al sitio Web Tabla 4.12: Iteración 3 . Diseño En esta iteración, se comienza el proceso de diseño, partiendo del diseño de los modelos de casos de uso, diagrama de actividad, de la base de datos del sistema, así como el diseño de la interfaz que permita el acceso al sitio Web seguimiento de actividades de Pasantías y Servicio Comunitario. . Codificación Se procedió a desarrollar los métodos que permitan el acceso al sitio web, con sus posibles controles de acceso y se crearon los mensajes de información al usuario que indicarán algún error ocurrido, en caso de no poder validar los datos del usuario que intenta ingresar al sistema. Se procedió a instalar todo el software necesario para que el sistema funcione en las maquinas de trabajo del personal. . Pruebas Las pruebas realizadas en esta iteración consistieron en realizar un recorrido visual de la interfaz de inicio con el propósito de verificar que fuese acorde a lo solicitado, guardando el esquema escogido para el diseño característico del sitio Web. Aplicación: Se diseñaron los diferentes modelos que definen el sistema 34 4.4.1 Modelo de casos de uso Gestor de actividades en el servicio comunitario y pasantías profesionales Figura 4.4. Caso de uso sistema propuesto Profesor Registrar usuario validar usuario Ver Conversaciones Mostrar lista usuario Actualiza Diario Agregar Tarea Modificar Tarea <<extend>> <<extend>> Ingresa Diario Listar Diarios Consulta Diario <<extend>> <<extend>> Iniciar Sesión <<extend>> <<include>> Administra Diarios Estudiante Establece Conversación <<include>> <<include>> Usuario <<extend>> 35 Actores: los siguientes actores interactúan con la aplicación para gestionar actividades en las pasantías y servicio comunitario: Actor Usuario Casos de uso Iniciar sesión, Registrar usuario, Administra comunicación, Administra diario. Tipo Primario Descripción Se refiere al cualquier usuario registrado en la aplicación web a desarrollar Actor Profesor Casos de uso Administra comunicación, Consulta diario Tipo Primario Descripción Corresponde a los profesores encargados de dirigir proyectos. Actor Estudiante Casos de uso Administra diarios de campos del estudiante. Administra comunicación Tipo Primario Descripción Se refiere a un estudiante registrado en el sistema. Representa un participante en un proyecto. 36 Casos de uso: a continuación se describen los casos de uso principales asociados a la aplicación para gestionar actividades en las pasantías y servicio comunitario. Caso de uso Iniciar sesión Pre-condición El usuario está registrado en el sistema. Descripción El caso de uso inicia cuando un usuario ingresa su login y password en el sistema. Luego el sistema valida los datos introducidos por el usuario y si se encuentra registrado le permite el acceso al sistema. Post- condición El usuario ingresa al sistema de gestión de actividades Caso de uso Registrar usuario Pre-condición El usuario no se encuentra registrado en el sistema. Descripción El usuario introduce su nombre, cédula, login, password y finalmente selecciona la escuela a la cual pertenece. El sistema valída que el usuario no este registrado en el sistema y si no lo encuentra lo registra. Post- condición El usuario fue registrado en el sistema Caso de uso Administrar comunicación Pre-condición El usuario inició sesión en el sistema. Descripción El usuario puede establecer comunicación a través de una Conversación o revisar conversación recibida. Post- condición El usuario administro una conversación. 37 Caso de uso Ver conversaciones Pre-condición El usuario inició sesión en el sistema. Descripción El sistema lista las conversaciones recibidas que tiene el usuario. El usuario puede o no responderlas al momento del chequeo. Post- condición El usuario vio las conversaciones pendientes. Caso de uso Listar diarios Pre-condición El usuario inició sesión en el sistema. Descripción El sistema muestra al estudiante una lista con los diarios de campo asociados con el estudiante. Post- condición El sistema listó los diarios de campo asociados al estudiante. Caso de uso Establece conversación Pre-condición El usuario inició sesión en el sistema. Consulto el estatus de las actividades del diario de campo del estudiante. Consulto conversaciones pendientes Descripción El usuario establece comunicación, mediante el inicio de una Conversación con el otro usuario involucrado, para discutir el avance de actividades del diario de campo. Post- condición Se evalúa el desarrollo de las actividades del diario de campo. Caso de uso Mostrar lista de usuario Pre-condición El usuario inició sesión en el sistema Descripción El sistema muestra la lista de usuarios involucrados y el usuario 38 escoge la persona a quien desea comunicarse. Post- condición Se muestra el listado de usuarios. Caso de uso Consulta diario Pre-condición El sistema mostró la lista de diarios del estudiante. Descripción El usuario selecciono un diario contenido en la lista, y el sistema le mostró el detalle (notas) del diario seleccionado. Post- condición El sistema mostró los datos del diario. Caso de uso Ingresa diario Pre-condición El usuario inició sesión en el sistema. El usuario es estudiante Descripción El estudiante ingresa la planificación de actividades del su diario de campo en el sistema, detallado cada una de estas con su fecha de inicio y fecha de culminación. Post- condición El estudiante ingreso su diario. Y especifica si el diario es por: Pasantías o Servicio Comunitario. Caso de uso Actualiza diario Pre-condición El usuario inició sesión en el sistema y es estudiante Descripción El estudiante actualiza las actividades de su diario de campo Post- condición Se actualiza el estado del diario de campo. 39 Caso de uso Agrega tarea Pre-condición El usuario inició sesión en el sistema y es estudiante Descripción El estudiante ingresa una nueva actividad o tarea a su diario de campo Post- condición Se actualiza el estado del diario de campo. Caso de uso Modifica tarea Pre-condición El usuario inició sesión en el sistema y es estudiante Descripción El estudiante modifica una o más actividades de su diario de campo Post- condición Se actualiza el estado del diario de campo. 40 4.4.2 Diagrama de clases Conversacion autor : String diario : String estudiante_id : Integer profesor_id : integer titulo_conversa : String descripcin : String fecha : date Usuario cédula : String Nombre : String apellido : String login : String password : String correo : String tipo_usuario : String Profesores segundo_ nombre : String segundo apellido : String Diario_Pasantia nombre_est-P : String nombre_tutor_P : String fecha_creacion : Date Diario_SC nombre_est-SC : String nombre_tutorSC : String fecha_creacion : Integer Tareas descripcion : String duracion : Double fecha_inicio : Date fecha_fin : Date nombre : String Actividad descripcion : String Fecha : Date hora : time participantes : Integer observacion : String estatus : String tipo : String titulo : String fecha_inicio : Date fecha_fin : Date Diario de campo titulo : String descripcion : String cedula_p : Integer fecha_creacion : Date Estudiante segundo_nombre : String segundo_apellido : String Figura 4.5. Diagrama de clases sistema de gestión de actividades Diccionario de Clases - Clase Usuario: mantiene la información general de todo usuario registrado en la aplicación - Clase Profesor: mantiene la información de los profesores que tutorean proyectos. Un profesor puede supervisar varios proyectos - Clase Estudiante: contiene la información de los alumnos participantes en un proyecto (Pasantía, servicio comunitario) - Clase Conversación: mantiene el registro de las conversaciones recibidas por un usuario(Profesor, estudiante) - Clase Diario de campo: guarda la información general de los diarios de campos que puede tener un estudiante 41 - Clase Diario - Pasantía : guarda información propia del diario de Pasantías - Clase Diario - SC: guarda información propia del diario de Servicio Comunitario - Clase Actividad: unidad mínima del diario de campo, que contiene las actividades realizadas, con detalle de fecha y hora, así como el estatus de dicha actividad y la respectiva observación sobre la misma - Clase Tareas: unidad mínima de las actividades, que contiene detalle de cada tarea asociada a una actividad 4.4.3 Diagramas de actividades Diagrama de Actividad.Caso de Uso: Iniciar Sesion Estudiante/Profesor Solicita Ingreso Registrar Usuario Usuario Nuevo SI Validar Usuario NO Clave Correcta NO Bienvenido al Sistema SI Figura 4.6 Diagrama de actividad, caso de uso iniciar sesión 42 Diagrama de Actividad. Caso de Uso: Registrar Usuario Estudiante/Profesor Captura Datos Usuario Almacena Datos Confirma a usuario Datos correctos SI Reingrese Datos Figura 4.7 Diagrama de actividad caso de uso registrar usuario 43 Estudiante/ Profesor Ver lista de tutoriado/tutor Ver Conversaciones Selecciono tutorido/tutor responde Diagrama de Actividad Caso de uso- Administrar Comunicacion Establece conversacion Si No Figura 4.8 Diagrama de actividad caso de uso administrar comunicación 44 Diagrama de Actividad. Caso de Uso : Administra Diario Estudiante Ingresar Diario Listar Diario Consulta DiarioExiste diario Si No Figura 4.9 Diagrama de actividad caso de uso administra diario 45 Estudiante Ver Diario de Campo Existe actividad Actualiza Actividad Agrega Actividad Diagrama de Actividad. Caso de Uso: Actualiza Diario SI NO Figura 4.10 Diagrama de actividad caso de uso actualiza diario 46 Diagrama de Actividad. Caso de uso : Consultar Diario Estudiante/Profesor Selecciona diario Visualiza Actividades del diario Figura 4.11 Diagrama de actividad caso de uso consulta diario 47 Estudiante/Profesor Ingresa clave de acceso Verifica otro usuario Inicia Conversacion con otro usuario Diagrama de actividad. Caso de uso: Establece Conversacion Figura 4.12 Diagrama de actividad caso de uso establece conversación 48 4.4.4 Diseño de la base de datos 4.4.4.1 modelo entidad relación Figura 4.13 Diagrama Entidad Relación E/R 49 4.4.4.2 Diagrama de la base de datos del gestor de actividades Usuario id : Integer cedula : Integer primer_nombre : varchar segundo_nombre : varchar login : varchar email : varchar hashed_password : varchar type : String creacion_el : Datetime actulizado_el : Datetime primer_apellido : varchar segundo_apellido : varchar comentarios id : Integer = 0 contenido : text estuadiante_id : Integer profesor_id : Integer conversacion_id : Integer creado_el : datetime actualizado_el : datetime autor_id : Integer Actividad id : Integer tipo : varchar Fecha : Date hora : time nro_participantes : Integer observacion : varchar estatus : varchar diario_id : Integer creado_el : Datetime actualizado : Datetime descripcion : text titulo : varchar fecha_inicio : Date fecha_fin : Date conversaciones id : Integer diario_id : Integer estudiante_id : Integer profesor_id : Tareas titulo : varchar descripcion : text creado_el : Datetime actualizado_el : Datetime autor_id : Integer Tareas id : Integer nombre : varchar descripcion : text fecha_inicio : date fecha_fin : date duracion : integer actividad_id : integer creado_el : datetime actualizado_el : datetime Diario de campo id : Integer nombre : varchar descripcion : text estudiante_id : Integer profesor_id : Integer type : varchar creado_el : Datetime actualizado_el : Datetime 1 1..* 1 1..* 1 1..* 1 1..* 1 1..* Figura 4.14 Diagrama de tablas de la Base de Datos 50 4.5 Iteración 4 . Planificación Número de iteración: 4 Descripción: Codificación y desarrollo de métodos y vistas del sistema Fecha inicio/ Fecha fin Número Fecha inicio Fecha fin Historia Tipo 6 Desarrollar vistas y métodos que permitan realizar la captura y almacenamiento de los datos de un usuario Nueva 7 Desarrollar vistas y métodos que permitan capturar y almacenar información en la base de datos(diario de campo-actividades) Nueva 8 Desarrollar vistas y métodos que permitan gestionar comunicación Nueva Tabla 4.13: Iteración 4 . Diseño En esta iteración se diseñaron cada una de las vistas necesarias, según los requerimientos del negocio, con el propósito de lograr la máxima captura de información relevante para el buen funcionamiento del sistema. Las interfaces diseñadas básicamente fueron: una interfaz de que permita capturar los datos personales de un nuevo usuario de sistema, una interfaz que permite el acceso de usuario al sistema, una que permita capturar la información referente a un diario de campo del estudiante, la interfaz para manejar las actividades y tareas del diario, una interfaz que permite ingresar una conversación entre usuarios. . Codificación 51 En la actual iteración se desarrollan todos los métodos que permitirán el adecuado despliegue de vistas y el eficiente y seguro almacenamiento de datos en las diferentes tablas que conforman la base de datos del sistema. . Pruebas Las pruebas realizadas para la verificación de todo lo desarrollado en esta iteración se basaron en la utilización y recorrido visual de cada una de las interfaces con el objetivo de verificar fuese acorde a lo solicitado y bajo el esquema general de diseño del sitio Web. Se evaluó y determino la necesidad de mensajes de alerta al usuario en caso de ocurrir algún error, o para guiarlo en el ingreso de datos al sistema. Las pruebas fueron de tipo funcional, verificando que las interfaces de captura de datos, solicitaran la información necesaria. En lo referente a los métodos desarrollados, se verificó el correcto funcionamiento de los mismos, ingresando una data de entrada y corroborando su resultado en los correspondientes archivos de datos. A continuación se muestran las ventanas de la aplicación: Figura 4.15 Pantalla para el Ingreso al Sistema (Login) 52 Figura 4.16 Pantalla que permite Cambiar Contraseña Figura 4.17 Pantalla que permite Agregar Tarea 53 Figura 4.18 Pantalla que permite Agregar Actividad Figura 4.19 Pantalla que muestra por docentes los estudiantes de Pasantía Asignados 54 Figura 4.20 Pantalla que muestra las tareas de cada actividad Figura 4.21 Pantalla para Editar Diario 55 Figura 4.22 Pantalla que muestra Pasantías por estudiante Figura 4.23 Pantalla que permite establecer una conversación 56 Figura 4.24 Pantalla que permite crear comentario Figura 4.25 Pantalla que permite ver conversaciones 57 4.6 Iteración 5 . Planificación Número de iteración: 5 Descripción: Realizar pruebas de aceptación del cliente Fecha inicio/ Fecha fin Número Fecha inicio Fecha fin Historia Tipo 9 Desarrollar y aplicar pruebas de aceptación al sistema Nueva Tabla 4.14: Iteración 5 . Diseño Se diseñó un formato de pruebas, en el cual se anotarán cada una de las pruebas aplicadas al sistema por el cliente y el resultado de la misma. . Codificación Se elaboró el formato que recogerá el resultado de las distintas pruebas aplicadas al sistema con el objetivo de que el cliente verifique el correcto funcionamiento del sistema, basándose en sus requerimientos previamente establecidos. NUMERO DE PRUEBA H.U. INVOLUCRADAS DESCRIPCIÓN DE LA PRUEBA RESULTADO ESPERADO RESULTADO OBTENIDO P1 6-7 Validar que los datos que se capturan por pantalla correspondan con el tipo de dato definido en las tablas. Los datos de entrada que no se correspondan con el tipo de dato de las tablas emitirán un mensaje de alerta para su reingreso. . P2 6-7 Validar que sean ingresados Si un dato requerido no se . 58 todos los datos obligatorios o requeridos. ingresa se generara un mensaje para que el mismo sea introducido por el usuario. P3 6-7 Prueba de consulta de datos para verificar la veracidad de la información almacenada. La información guardada en la base de datos debe ser correcta y consistente. . P4 6-7 Verificación del tiempo que toma el sistema en almacenamiento de datos. El tiempo de almacenamiento de datos debe ser eficiente. P5 8 Verificación del adecuado funcionamiento de la conversación establecida. Los usuarios interconectados podrán establecer comunicación en línea de manera eficaz y segura. Tabla 4.15: Formato de Pruebas . Pruebas Las pruebas realizadas se aplicaron a cada una de las funcionalidades del sistema con el objetivo de colocarlo en uso. Al ser las distintas funcionalidades de la aplicación no demasiado extensas, no se harán test que analicen partes de las mismas, sino que las pruebas se realizarán para las funcionalidades generales que debe cumplir el programa especificado en la descripción de requisitos. 59 N° DE PRUEBA H.U. ASOCIADAS DESCRIPCIÓN DE LA PRUEBA RESULTADO ESPERADO RESULTADO OBTENIDO P1 6-7 Validar que los datos que se capturan por pantalla correspondan con el tipo de dato definido en las tablas. Los datos de entrada que no se correspondan con el tipo de dato de las tablas emitirán un mensaje de alerta para su reingreso. Se hizo pruebas de autentificación de un usuario nuevo, donde se le permite ingresar sus datos y para un usuario ya existente, validando tanto el login como la clave, usando la vista mostrada en las figuras 4.15 y 4.16. Se ingresaron datos de prueba para evaluar si la entrada de datos de un usuario era validado (tipo de dato, dato requerido) usando las vistas de las figuras 4.19, 4.22. Se ingreso información de prueba de un diario de actividades y las tareas asociadas, se verificó que la funcionalidad guardaba la información de entrada y permitía la consulta posterior de la misma, a través de las vistas de las figuras 4.17, 4.18, 4.20, 4.21 P2 6-7 Validar que sean ingresados todos Si un dato requerido no se Se usaron datos de prueba y se verificó 60 los datos obligatorios o requeridos. ingresa se generara un mensaje para que el mismo sea introducido por el usuario. que aquellos datos de tipo obligatorios tienen que ser todos ingresados por el usuario para poder hacer efectivo el almacenamiento de su información de entrada. Se emplearon las vistas de figuras 4.15, 4.16, 4.17, 4.18, 4.19, 4.20, 4.21. P3 6-7 Prueba de consulta de datos para verificar la veracidad de la información almacenada. La información guardada en la base de datos debe ser correcta y consistente. Una vez ingresados y almacenados los datos de prueba en la base de datos, tanto de usuarios como de un diario de actividades y sus tareas asociadas, se realizaron consultas de los mismos y se verificó que la funcionalidad realizó un almacenamiento exitoso y fiel de los datos que fueron ingresados. P4 6-7 Verificación del tiempo que toma el sistema en almacenamiento de datos. El tiempo de almacenamiento de datos debe ser eficiente. Se comprobó que el tiempo de almacenamiento es eficiente. P5 8 Verificación del adecuado funcionamiento de la conversación Los usuarios interconectados podrán establecer comunicación en Se probó que la funcionalidad permite a un usuario ingresar una conversación 61 establecida. línea de manera eficaz y segura. con otro usuario y que a su vez permite verificar en cualquier momento todas las conversaciones que un usuario tiene almacenada, respondida y por responder, Se hizo uso de las vistas de la figura 4.23, 4.24, 4.25. Tabla 4.16: Pruebas realizadas 62 Conclusiones El presente trabajo de grado se realizó con la finalidad de diseñar una aplicación web que permita gestionar las actividades que realizan los estudiantes cuando están en pasantías y servicio comunitario. El desarrollo de esta aplicación aporta una mejora a la coordinación de pasantías y servicio comunitario al disminuir el número de estudiantes que pierden el contacto con sus tutores académicos durante el período en el que realizan sus pasantías o servicio comunitario, de esta manera, se reducen también las posibles inconsistencias que se presentan cuando el estudiante no sigue las actividades que se plantearon originalmente, sin participar al profesor tutor. El uso del método XP para el desarrollo de la aplicación se adaptó a nuestras necesidades, ya que en primer lugar es ideal para proyectos de corto plazo y corto equipo. Además al tener un enfoque en el trabajo en grupo (programación en pareja) resultó más fácil el dividir nuestras contribuciones al proyecto, ambas programamos y revisamos el código, lo que influyo en que fuese más rápido y eficiente dicho proceso, y, al XP conllevar menos protocolo, evitó que existiera alguna jerarquía dentro del grupo. Así mismo este método ágil, no hace énfasis en la documentación, para XP no hay mejor documentación que el mismo código. En cuanto a Ruby on Rails (RoR) para programar la aplicación, se concluye que permite realizar un desarrollo rápido y sencillo, ya que no se requiere escribir largos bloques de código para implementar una funcionalidad, lo que se traduce en productividad. Al ser Ruby un lenguaje interpretado no fue necesario esperar la compilación del código para ver los resultados cada vez que se hizo una modificación al mismo. Se implementó la aplicación y se hicieron pruebas para asegurar que el resultado fuera un software confiable. 63 Recomendaciones Una vez analizadas las actividades que se desarrollan en la unidad de pasantías y servicio comunitario se recomienda el desarrollo de algunas mejoras para beneficio de estudiantes y profesores, entre ellas: . Colocar en producción la aplicación en la escuela de computación. . Ampliar el modulo de comunicación, donde actualmente se establece una conversación entre los usuarios, la cual queda registrada en la dirección de correo de usuario receptor y si ambos están conectados simultáneamente funciona como un chat, podría a futuro hacer que esta información llegue a todos los alumnos que el profesor supervisa ya que la información podría ser de interés a más de un estudiante, convirtiendo la conversación en un foro. . Haciendo uso de la información almacenada en la base de datos y realizando algunas modificaciones en la estructura de la misma, trabajos futuros podrían permitir al estudiante generar los informes de actividades según los formatos definidos por las coordinaciones de pasantías y servicio comunitario. . Desarrollar el modulo de conexión con el sistema de control de estudios CONEST para capturar la información ya existente tal como: nombres, apellidos y CI de los estudiantes y profesores, y, hacer uso de ella en la nuevo sistema desarrollado. . Incorporar como actores tanto al tutor empresarial como al tutor comunitario al sistema, para permitir la comunicación entre éstos y el tutor académico. 64 Referencias bibliográficas [1] Beck K., Extreme Programming Explained, Pearson Education, 1999 Traducido al español como: “Una explicación de la programación extrema. Aceptar el cambio”, Addison Wesley, 2000. [2] Cohn M., "User Stories Applied", 2004, Addison Wesley [3] Jeffries, R., Anderson, A., Hendrickson, C. “Extreme Programming Installed”. Addison-Wesley. 2001 [4] Canós J., Letelier P., y Penadés Mª, Metodologías Ágiles en el Desarrollo de Software, Universidad Politécnica de Valencia 2003. [5] Wake, W.C. “Extreme Programming Explored”. Addison-Wesley. 2002. [6] Wells D. , Extreme Programming: A gentle introduction, 2003. [7] Beck k., Grenning J., Martin Robert C., Manifesto for Agile, Addison Wesley 2001. [8] Fowler, M., Beck, K., Brant, J. “Refactoring: Improving the Design of Existing Code”. Addison-Wesley. 1999 [9] Fowler, M. “Is Design Dead?” 2001. www.martinfowler.com/articles/designDead.html [10] Gutiérrez J., Escalona M., Mejías M., Torres j., Pruebas del sistema en programación extrema. Departamento de Lenguajes y Sistemas Informáticos, Universidad de Sevilla. [11] Solano R., Coles E. Ruby on Rails, una forma rápida de hacer aplicaciones web, Universidad de Costa Rica. [12] Zumbado F., Sistema computarizado para el manejo de inventario de bodega. Universidad de Costa Rica, Diciembre del 2008. [13] Thomas D., Fowler Ch., Hunt A., Programming Ruby, Editorial Addison Wesley 2006. [14] Goldberg A., ‘Smalltalk-80: The Interactive Programming Environment’s. Addison-Wesley, (1984). [15] Thomas D, Hansson D, Breedt L., Clark M., Agile Web Development with Rails, Editorial Pragmatic Bookshelf, 2006 65 Páginas de Internet consultadas: [16] http://ingeniero-arielbustos.blogspot.com/2010/04/metologias- modernas-del-software.html [17] http://www.monografias.com/trabajos67/metodologia-desarrollo- softwares/metodologia-desarrollo-softwares2.shtml [18] “Introducción a Ruby on Rails|Asociación Nacional de Webmasters Perú”. Página de Asociación Nacional de Webmasters Perú. URL: http://www.anwmp.org/tutoriales/una-introduccion-a-ruby-on-rails [19] “Ruby on Rails”. URL: http://www.rubyonrails.org.es/ [20] http://www.librosweb.es/jobeet/capitulo4/la_arquitectura_mvc.html [21] http://www.webrick.org/ [22] http://www. mongrel.rubyforge.org/ 66 ANEXOS 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84