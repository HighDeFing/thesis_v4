UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACI√ìN CENTRO DE COMPUTACI√ìN GR√ÅFICA TETRAEDRIZACI√ìN DE INTERVALOS DE VOLUMEN MEDIANTE MODIFICACI√ìN DE CUBOS MARCHANTES Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por el bachiller Jorge Luis Bernadas Saragoza para optar al t√≠tulo de Licenciado en Computaci√≥n Tutor Prof. Rhadam√©s Carmona Caracas, Abril 2009 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACI√ìN CENTRO DE COMPUTACI√ìN GR√ÅFICA ACTA DEL VEREDICTO Quienes suscriben, Miembros del Jurado designados por el Consejo de Escuela de Computaci√≥n, para examinar el Trabajo Especial de Grado, presentado por el Bachiller Jorge Bernadas, portador de la c√©dula de identidad 17.429.153, con el t√≠tulo ‚ÄúTetraedrizaci√≥n de Intervalos de Volumen mediante modificaci√≥n de Cubos Marchantes‚Äù, a los fines de cumplir con el requisito legal para optar al t√≠tulo de Licenciado en Computaci√≥n, dejan constancia de lo siguiente: Le√≠do como fue dicho trabajo por cada uno de los Miembros del Jurado, se fij√≥ el d√≠a 30 de abril de 2009, a las 9:00 AM, para que su autor lo defienda en forma p√∫blica, en el Centro de Computaci√≥n Gr√°fica, mediante la exposici√≥n oral de su contenido, y luego de la cual respondieron satisfactoriamente a las preguntas que le fueron formuladas por el Jurado, todo ello conforme a lo dispuesto en la Ley de Universidades y dem√°s normativas vigentes de la Universidad Central de Venezuela. Finalizada la defensa p√∫blica del Trabajo Especial de Grado, el jurado decidi√≥ aprobarlo. En fe de lo cual se levanta la presente Acta, en Caracas a los 30 d√≠as del mes de abril del a√±o dos mil nueve, dej√°ndose tambi√©n constancia de que actu√≥ como Coordinador del Jurado el Profesor Tutor Rhadam√©s Carmona. Prof. Rhadam√©s Carmona (Tutor) Prof. Ernesto Coto Prof. Br√≠gida Molina (Jurado Principal) (Jurado Principal) AGRADECIMIENTOS Le agradezco a mi mam√° Gloria que me haya cuidado desde el cielo todo este tiempo, y que me haya guiado para tomar siempre las decisiones correctas. Le agradezco a mi pap√° Jorge que desde peque√±o me inculc√≥ el valor de hacer las cosas bien hechas, sin mediocridades, as√≠ como los conocimientos b√°sicos necesarios para ser exitoso el d√≠a de hoy. Pap√°, t√∫ me ense√±aste que el cero es el primer entero con el que se cuenta, y no el uno como todos creen. Adem√°s, se siente bien llegar a primer grado sabiendo leer, escribir, sumar, restar y multiplicar cuando los dem√°s s√≥lo sab√≠an jugar con la plastilina. Le agradezco a mi hermano Manuel su compa√±√≠a y su cari√±o (pelaje) desde que naci√≥. Yo no me imagino c√≥mo hubiera sido mi vida como hijo √∫nico, no tendr√≠a a qui√©n ense√±arle mis logros en los juegos de computadora, en TopCoder¬Æ, y otras cosas que por m√°s simples que parezcan son las que m√°s importan. Le agradezco a mi t√≠a Rosario por cuidarnos a mi hermano y a m√≠ desde que nacimos, y por siempre estar pendiente de todo lo que necesitamos, especialmente de mi salud, ya que yo generalmente no reparo en eso. T√≠a, t√∫ me ense√±aste a utilizar la computadora a los 3 a√±os (todav√≠a me acuerdo del Donkey Kong y me da nostalgia), as√≠ como el Nintendo y el Intellivision, eso hizo que la computadora y los juegos de video siempre me llamaran la atenci√≥n. Les agradezco a mi abuela Rosario y a mi abuelo Jorge el haberme consentido desde siempre, y que hayan tenido la dedicaci√≥n de tramitar mi nacionalidad espa√±ola y el pasaporte respectivo, lo cual me ha permitido conocer Estados Unidos, Canad√°, Jap√≥n y Brasil y participar en maratones de programaci√≥n a nivel mundial. Tambi√©n les agradezco que me hayan regalado mi primera computadora port√°til hace cuatro a√±os, gracias a ella logr√© hacer mis labores de la universidad y practicar constantemente para los maratones de programaci√≥n. Le agradezco a Ana habernos cuidado desde peque√±os, y que haya sabido darnos a mi hermano y a m√≠ la atenci√≥n que hemos necesitado durante todos estos a√±os. Ana, recuerda que est√° pendiente que me ense√±es a preparar pasticho, asado negro, pernil, pavo, hallacas, entre otras delicateses que hemos podido degustar estando a t√∫ lado. Le agradezco infinitamente (DBL_INF) a mi novia Fiorella por brindarme su constante apoyo, cari√±o y amor desde que la conozco, especialmente durante el desarrollo de este trabajo de grado, desde su inicio hasta su culminaci√≥n. Sin ella no hubiera podido terminar este trabajo, gracias por todos los sandwichitos y yogurts con cereal, seguro te van a extra√±ar en el centro. Sin ella no ir√≠a a doctores y pasar√≠a todo el d√≠a haciendo problemas en TopCoder¬Æ. Sin ti, mi amor, no tuviera ni la mitad de la felicidad que tengo ahorita. Gracias a los profesores Rhadam√©s Carmona y Ernesto Coto por guiarme durante el desarrollo de este trabajo, y por hacer todas las correcciones durante el mismo. Aprend√≠ muchas cosas que no sab√≠a sobre la realizaci√≥n de un trabajo de grado y la presentaci√≥n gracias a ustedes. Gracias al Centro de Computaci√≥n Gr√°fica y a todos sus integrantes por darme su apoyo durante los √∫ltimos tres a√±os de mi carrera. Sin ese apoyo, probablemente hubiera desarrollado una p√°gina web est√°tica o una simple aplicaci√≥n empresarial como tesis de grado, en lugar de un trabajo m√°s profesional y cient√≠fico. Gracias a Carlos Gu√≠a por ser buen amigo y por decirme hace cuatro a√±os que deb√≠a entrenar seriamente para los maratones. En verdad, con los maratones de programaci√≥n he aprendido muchos m√°s t√≥picos interesantes que a lo largo de la carrera, y esto es lo que realmente me diferencia de todos los dem√°s graduandos. Los agradecimientos a los amigos es una de las partes m√°s dif√≠ciles de escribir, sencillamente porque podr√≠a duplicar el tama√±o del documento si escribiera algo para cada uno. Adem√°s, algo que he aprendido de pensar matem√°ticamente es que definir los conjuntos por compresi√≥n es m√°s f√°cil y menos propenso a errores que definirlos por extensi√≥n. As√≠ que, para todo ùë•ùëñ en mi conjunto ùê¥ de amigos, le agradezco a ùë•ùëñ que siempre me haya apoyado durante toda la carrera y que siempre est√© ah√≠, tanto para las buenas como para las malas. <sarcasm> Muchas gracias a control de estudios por mover la fecha tope de presentaci√≥n a un mes antes de lo previsto. De verdad que eso motiva saludablemente a los futuros graduandos. </sarcasm> Disclaimer: The only feelings I had while the development and writing of this thesis were frustration, regret and disappointment. I should have taken something simpler and get my degree long long time ago; Outro: I still do not understand the fuss about finishing the thesis, the supposed happiness feeling that I should be feeling now. I think that winning the SRM 407 is going to be a lot more exciting than finally presenting this work. I just want to finish this and dedicate my time to more important stuff, like my family, my beautiful and lovable girlfriend and programming contests. Here is a short list of the things I need to do: ÔÇ∑ Get married with Fiore and raise a lot of children with her. ÔÇ∑ Get in contact with my friends again (this thesis made me a loner). ÔÇ∑ Go to doctors to see if the thesis left some permanent physical damage. ÔÇ∑ Lower my weight by at least 20Kg. and do some not computer-related exercises. ÔÇ∑ Learn how to drive, how to cook and first aids. ÔÇ∑ Learn more algorithms for programming contests. ÔÇ∑ Raise my TopCoder¬Æ Algorithm Rating to 2800 again. ÔÇ∑ Other things I cannot remember right now. Sorry for the bad puns. ÔÄ≠ Because I can. jbernadas RESUMEN T√çTULO: Tetraedrizaci√≥n de Intervalos de Volumen mediante modificaci√≥n de Cubos Marchantes. AUTOR: Jorge Bernadas. TUTOR: Prof. Rhadam√©s Carmona. Los dos m√©todos principales para la visualizaci√≥n de datos volum√©tricos consisten en la visualizaci√≥n directa de vol√∫menes y la extracci√≥n de isosuperficies. El primer m√©todo ofrece la ventaja de mostrar todo el volumen en contexto, mientras que el segundo m√©todo s√≥lo muestra una parte del volumen fuera de contexto. Sin embargo, la extracci√≥n de isosuperficies requiere menos poder de c√≥mputo en comparaci√≥n con la visualizaci√≥n directa de volumen. Otro m√©todo para la visualizaci√≥n de datos volum√©tricos consiste en un h√≠brido entre ambas t√©cnicas, el cual reconstruye y muestra subvol√∫menes del volumen mediante el uso de mallados tetra√©dricos y t√©cnicas de visualizaci√≥n directa de vol√∫menes para el despliegue. Adicionalmente, se puede almacenar el isovalor en cada v√©rtice del mallado obtenido, lo que permite el uso de dichos mallados para realizar simulaciones mediante el uso de elementos finitos. En la actualidad, los algoritmos existentes para la extracci√≥n de intervalos de volumen son complicados o generan una alta cantidad de primitivas. En este trabajo se propone un algoritmo basado en la adaptaci√≥n de cubos marchantes para extraer intervalos de volumen en lugar de isosuperficies, el cual tiene un tiempo de respuesta inferior a los algoritmos existentes y genera un mallado final con una menor cantidad de primitivas sin necesidad de recurrir a algoritmos complejos durante la extracci√≥n del intervalo de cada celda del volumen. PALABRAS CLAVE: Datos Volum√©tricos, Isosuperficies, Intervalos de Volumen i TABLA DE CONTENIDOS Cap√≠tulo 1. Introducci√≥n .............................................................................................................. 1 1.1. Objetivo General .............................................................................................................. 3 1.2. Objetivos Espec√≠ficos ....................................................................................................... 4 Cap√≠tulo 2. Marco Te√≥rico .......................................................................................................... 5 2.1. Visualizaci√≥n de vol√∫menes de datos ............................................................................... 5 2.1.1. Caracter√≠sticas de los vol√∫menes de datos .............................................................. 6 2.1.1.1. Fuentes de datos volum√©tricos ........................................................................ 6 2.1.1.2. Tipos de datos volum√©tricos ........................................................................... 7 2.1.1.3. V√≥xeles y celdas ............................................................................................. 7 2.1.2. M√©todos para la visualizaci√≥n de vol√∫menes .......................................................... 8 2.1.3. Pasos generales para la visualizaci√≥n de vol√∫menes .............................................. 9 2.1.3.1. Adquisici√≥n de datos ...................................................................................... 9 2.1.3.2. Clasificaci√≥n de los datos ............................................................................... 9 2.1.3.3. Recorrido de los datos .................................................................................. 10 2.1.3.4. Visualizaci√≥n y sombreado ........................................................................... 10 2.1.4. Algoritmos para la visualizaci√≥n de vol√∫menes ................................................... 11 2.1.4.1. Extracci√≥n de isosuperficies ......................................................................... 11 2.1.4.2. Visualizaci√≥n directa de volumen ................................................................ 13 2.2. Extracci√≥n de isosuperficies ........................................................................................... 16 2.2.1. Cubos Marchantes ................................................................................................. 18 2.2.1.1. Ventajas y desventajas de cubos marchantes ............................................... 20 2.2.1.2. Modelos topol√≥gicamente correctos ............................................................. 21 2.2.1.3. Errores topol√≥gicos de cubos marchantes .................................................... 23 2.2.1.4. M√©todo de decisi√≥n asint√≥tica para cubos marchantes ................................. 25 2.2.1.5. Resoluci√≥n de la ambig√ºedad interna ........................................................... 28 2.2.2. Tetracubos Marchantes ......................................................................................... 30 2.2.2.1. Divisi√≥n de la celda en tetraedros ................................................................. 30 2.2.2.2. Triangulaci√≥n de un tetraedro ....................................................................... 32 2.3. Extracci√≥n de Intervalos de volumen ............................................................................. 35 2.3.1. Extracci√≥n por medio de formas alfa .................................................................... 36 2.3.1.1. Complejos de simplices ................................................................................ 37 ii 2.3.1.2. Formas alfa ................................................................................................... 37 2.3.1.3. Construcci√≥n de las formas alfa ................................................................... 38 2.3.2. Extracci√≥n por medio de Cubos Marchantes ........................................................ 40 2.3.2.1. Extracci√≥n local del intervalo de volumen ................................................... 41 2.3.2.2. Extracci√≥n global del intervalo de volumen ................................................. 44 2.3.3. Extracci√≥n por medio de Tetracubos Marchantes ................................................. 45 2.3.3.1. Extracci√≥n del poliedro alfa-beta .................................................................. 46 2.3.3.2. Tetraedrizaci√≥n del poliedro alfa-beta .......................................................... 48 2.4. M√©tricas de calidad ......................................................................................................... 54 2.4.1. M√©tricas de calidad para tri√°ngulos ...................................................................... 55 2.4.1.1. Relaci√≥n de aspecto ...................................................................................... 56 2.4.1.2. Proporci√≥n de aristas .................................................................................... 57 2.4.1.3. Proporci√≥n de radios ..................................................................................... 57 2.4.2. M√©tricas de calidad para tetraedros ....................................................................... 57 2.4.2.1. Relaci√≥n de aspecto ...................................................................................... 59 2.4.2.2. Proporci√≥n de aristas .................................................................................... 59 2.4.2.3. Proporcionalidad de radios ........................................................................... 60 2.4.3. M√©tricas para conjuntos de primitivas .................................................................. 60 Cap√≠tulo 3. Extracci√≥n de intervalos de volumen mediante modificaci√≥n de cubos marchantes .............................................................................................................. 62 3.1. Algoritmo para la extracci√≥n del intervalo de volumen ................................................. 62 3.2. Ventajas y desventajas del algoritmo propuesto ............................................................ 66 3.3. Generaci√≥n de la tabla de conectividad .......................................................................... 67 3.3.1. Creaci√≥n de la celda sint√©tica ................................................................................ 68 3.3.2. Extracci√≥n del poliedro alfa-beta de la celda sint√©tica.......................................... 69 3.3.3. Tetraedrizaci√≥n del poliedro alfa-beta .................................................................. 73 3.4. Fase de post-procesamiento ............................................................................................ 75 3.5. Consideraciones para el manejo de casos ambiguos ...................................................... 76 3.5.1. Modelos topol√≥gicamente correctos ..................................................................... 77 3.5.2. Manejo de ambig√ºedades en las caras de la celda ................................................ 79 3.5.3. Salida del algoritmo propuesto ............................................................................. 81 Cap√≠tulo 4. Implementaci√≥n y Pruebas ..................................................................................... 83 4.1. Resultados obtenidos de la extracci√≥n de isosuperficies ................................................ 84 iii 4.2. Resultados obtenidos de la extracci√≥n de intervalos de volumen .................................. 88 4.3. An√°lisis cualitativo sobre las isosuperficies extra√≠das .................................................... 93 4.4. An√°lisis cualitativo sobre los intervalos de volumen extra√≠dos ...................................... 95 Cap√≠tulo 5. Conclusiones ........................................................................................................ 100 Cap√≠tulo 6. Trabajos a Futuro .................................................................................................. 102 Cap√≠tulo 7. Referencias ........................................................................................................... 103 1 CAP√çTULO 1. INTRODUCCI√ìN En la actualidad, los cient√≠ficos utilizan las herramientas computacionales para visualizar los datos con los que trabajan, para as√≠ poder realizar el an√°lisis correspondiente. Una de las ramas de la visualizaci√≥n que ha tenido el mayor auge en los √∫ltimos a√±os es la visualizaci√≥n de vol√∫menes, que consiste en el despliegue de uno o varios conjuntos de datos tridimensionales en la pantalla, de forma que el usuario pueda entenderlos e interpretarlos satisfactoriamente. Todos los algoritmos existentes para la visualizaci√≥n de vol√∫menes est√°n basados en una de dos t√©cnicas generales: visualizaci√≥n directa de volumen o extracci√≥n de isosuperficies. La primera t√©cnica considera todo el volumen a la vez, generando im√°genes semitransparentes de alta calidad, lo cual requiere gran poder de procesamiento para un despliegue en tiempo real. La segunda t√©cnica s√≥lo reconstruye y muestra isosuperficies del volumen, lo cual permite desplegar los datos a una velocidad superior, pero √©stos se muestran descontextualizados, lo cual podr√≠a ser un problema para el an√°lisis por parte del usuario. Otro enfoque consiste en un h√≠brido entre ambas t√©cnicas, el cual reconstruye y muestra subvol√∫menes del volumen mediante el uso de mallados tetra√©dricos y t√©cnicas de visualizaci√≥n directa de vol√∫menes para el despliegue, lo cual permite visualizar la informaci√≥n requerida en contexto con un mejor tiempo de respuesta al compararlo con el despliegue del volumen completo. Adicionalmente, se puede almacenar el isovalor en cada v√©rtice del mallado obtenido, lo que permite el uso de dichos mallados para realizar simulaciones mediante el uso de elementos finitos. En la actualidad, los algoritmos existentes para la extracci√≥n de intervalos de volumen poseen una alta complejidad o generan una alta cantidad de primitivas. Por ejemplo, Guo propone un m√©todo basado en tetraedrizaciones de Delaunay [GUO95], el cual consta de dos pasos principales: primero, la obtenci√≥n de una nube de puntos a partir del volumen de datos, la cual estar√° compuesta por las muestras que se encuentran dentro del intervalo ùõº, ùõΩ a extraer y aquellos puntos donde las isosuperficies ùëÜùõº y ùëÜùõΩ intersectan al volumen, donde: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº ùëÜùõΩ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõΩ 2 El segundo paso del algoritmo consiste en la obtenci√≥n de la triangulaci√≥n de Delaunay de la nube de puntos extra√≠da del volumen. Este algoritmo posee una alta complejidad, debido a que el procedimiento para calcular la triangulaci√≥n de Delaunay en tres dimensiones es complicado de programar y es muy lento para la extracci√≥n de intervalos en vol√∫menes grandes. Adem√°s, el uso de tetraedrizaciones de Delaunay no proporciona ventaja alguna al momento de la extracci√≥n de los tetraedros del intervalo, debido a que √©stos tienden a degenerarse en las celdas intersectadas por las isosuperficies ùëÜùõº y ùëÜùõΩ . Otro algoritmo para la extracci√≥n de intervalos de volumen fue propuesto por Fuji, Maeda y Sato [FUJ95], que consiste en extraer el intervalo de cada celda mediante la intersecci√≥n de dos intervalos infinitos ùõº , ‚àû y ‚àû , ùõΩ , los cuales se obtienen mediante el uso de una modificaci√≥n de Cubos Marchantes que calcula poliedros en lugar de tri√°ngulos, lo cual implica la necesidad de intersectar poliedros durante el procesamiento de cada celda. Para la resoluci√≥n de los casos ambiguos, se pueden utilizar los m√©todos propuestos por Nielson y Hamann [NIE91] y por Chernyaev [CHE95] al momento de generar la estructura de la tabla de casos. Sin embargo, la complicaci√≥n del algoritmo se encuentra al momento de realizar la intersecci√≥n de los poliedros, debido a que √©ste debe ser lo suficientemente general como para intersectar conjuntos de poliedros no convexos, lo cual, al igual que el algoritmo anterior, incrementa el tiempo de ejecuci√≥n considerablemente. Adem√°s, el algoritmo est√° dise√±ado para extraer un mallado triangular que encierre aquella parte del volumen dentro del intervalo ùõº, ùõΩ , lo cual no permite una representaci√≥n adecuada para las celdas internas del intervalo. Una alternativa a procesar cada celda directamente, sea para la extracci√≥n de isosuperficies o intervalos de volumen, consiste en subdividir cada una de √©stas en tetraedros, los cuales ser√°n procesados independientemente [CAR95]. Este algoritmo, llamado Tetracubos Marchantes, permite simplificar el an√°lisis de casos posibles de intersecci√≥n, ya que un tetraedro consiste √∫nicamente de cuatro (4) v√©rtices y no presenta ambig√ºedades durante el procesamiento. En 1997, Nielson propone otro algoritmo para la extracci√≥n de intervalos de volumen [NIE97b], el cual consiste en extender el algoritmo de los Tetracubos Marchantes para extraer el intervalo del volumen de cada uno de los tetraedros de las celdas mediante el uso de una tabla de 34 = 81 casos, la cual indica los tetraedros a generar para cada uno de los casos posibles de 3 intersecci√≥n entre el intervalo y un tetraedro del volumen. Las ventajas principales de este algoritmo propuesto por Nielson radican en la sencillez del mismo, la peque√±a cantidad de casos en la tabla y la ausencia de posibles ambig√ºedades en el mismo, lo cual acelera la extracci√≥n del intervalo del volumen. Sin embargo, este algoritmo genera una salida compleja dif√≠cil de visualizar por la alta cantidad de primitivas generadas. Esto se debe a que cada celda del volumen debe ser dividida en cinco o m√°s tetraedros y cada uno de √©stos puede generar hasta seis primitivas de salida, por lo que en el peor caso se pueden generar hasta treinta tetraedros por cada celda del volumen. Por todo lo mencionado anteriormente, se propone un algoritmo para la extracci√≥n de intervalos de volumen basado en cubos marchantes, el cual procese cada celda directamente mediante una tabla de conectividad, sin necesidad de dividir cada celda en tetraedros ni de recurrir a algoritmos complejos durante el procesamiento de cada celda. Debido a esto, se presume que el algoritmo propuesto generar√° menos tetraedros que el algoritmo propuesto por Nielson [NIE97b] y ser√° m√°s eficiente que los m√©todos propuestos por Guo [GUO95] y Fuji et al. [FUJ95]. Con el objetivo de analizar el desempe√±o del algoritmo propuesto, se implementar√° el algoritmo propuesto por Nielson [NIE97b] y se comparar√°n los mallados obtenidos mediante las m√©tricas desarrolladas por el grupo Verdict [STI07], las cuales permiten realizar an√°lisis cuantitativos sobre mallados triangulares y tetra√©dricos. Finalmente, se implementar√°n las versiones correspondientes para la extracci√≥n de isosuperficies, lo cual permitir√° confirmar los resultados obtenidos ya que se espera que ambos m√©todos tengan desempe√±os similares independientemente del tipo de mallado a extraer. 1.1. OBJETIVO GENERAL Dise√±ar e implementar un algoritmo para la extracci√≥n de intervalos de volumen mediante la adaptaci√≥n de Cubos Marchantes, utilizando una tabla de conectividad que indique los tetraedros a generar en cada caso posible. 4 1.2. OBJETIVOS ESPEC√çFICOS ÔÇ∑ Implementar Cubos Marchantes [LOR87] con resoluci√≥n de ambig√ºedades [NIE91] [CHE95] para la extracci√≥n de isosuperficies. ÔÇ∑ Implementar Tetracubos Marchantes [CAR95] para la extracci√≥n de isosuperficies. ÔÇ∑ Implementar un algoritmo para tetraedrizar un poliedro convexo, para cada caso posible de intersecci√≥n entre una celda y el intervalo, el cual ser√° utilizado para generar la tabla de casos. ÔÇ∑ Dise√±ar e implementar un algoritmo para la extracci√≥n del intervalo de volumen en base a la tabla de casos generada anteriormente. ÔÇ∑ Dise√±ar e implementar una aplicaci√≥n de prueba que permita la carga de un volumen, as√≠ como la extracci√≥n de isosuperficies e intervalos de volumen a partir del mismo. ÔÇ∑ Evaluar resultados obtenidos en la extracci√≥n de isosuperficies y en la extracci√≥n de intervalos de volumen mediante el uso de las m√©tricas dise√±adas por el grupo Verdict [STI07]. 5 CAP√çTULO 2. MARCO TE√ìRICO A continuaci√≥n se presenta una visi√≥n general del proceso de visualizaci√≥n de datos volum√©tricos, as√≠ como una breve descripci√≥n de algunos algoritmos existentes para el extracci√≥n de isosuperficies y la extracci√≥n de intervalos de volumen, para terminar con la descripci√≥n de algunas m√©tricas utilizadas para evaluar la calidad de mallados triangulares y tetra√©dricos. 2.1. VISUALIZACI√ìN DE VOL√öMENES DE DATOS Un volumen de datos se define como un conjunto de datos ubicados en ‚Ñú3, los cuales generalmente est√°n definidos sobre una malla cartesiana uniforme regular con uno o m√°s atributos escalares y, posiblemente, uno o m√°s atributos vectoriales en cada v√©rtice de la malla. El proceso de visualizaci√≥n de vol√∫menes de datos es el conjunto de pasos llevados a cabo para proyectar un volumen de datos hacia un plano imagen bidimensional, con el prop√≥sito de entender la estructura del mismo [ELV92]. Los cient√≠ficos utilizan las im√°genes obtenidas para adquirir informaci√≥n y conocimiento de los datos producidos por experimentos, as√≠ como para compartir sus experiencias con otros cient√≠ficos e instituciones. Para poder alcanzar este objetivo, las t√©cnicas de visualizaci√≥n deben ofrecer una representaci√≥n entendible de los datos, as√≠ como una r√°pida manipulaci√≥n y despliegue de los mismos que permita una interacci√≥n satisfactoria con el usuario. En la actualidad, la visualizaci√≥n de vol√∫menes se utiliza ampliamente en la medicina, astrof√≠sica, qu√≠mica, microscop√≠a, ingenier√≠a mec√°nica, pruebas no destructivas y otras √°reas de la ciencia y la ingenier√≠a. Entre los datos que los cient√≠ficos e ingenieros almacenan como vol√∫menes se encuentran densidad, presi√≥n, temperatura, carga electrost√°tica, calor, velocidad, entre otros. Como se puede observar, los datos almacenados tienen caracter√≠sticas muy diferentes, por lo cual algunos m√©todos para la visualizaci√≥n de vol√∫menes proporcionan buenos resultados para ciertos tipos de datos pero no para otros. A continuaci√≥n se explicar√°n las caracter√≠sticas de los distintos vol√∫menes de datos existentes, la clasificaci√≥n de las distintas t√©cnicas para visualizarlos, as√≠ como los pasos m√°s comunes en los algoritmos para llevar a cabo este proceso. 6 2.1.1. CARACTER√çSTICAS DE LOS VOL√öMENES DE DATOS Los vol√∫menes de datos pueden ser clasificados en base a diferentes aspectos, entre los que se consideran: la fuente de donde han sido obtenidos, el tipo de dato que almacenan y si tratan el volumen como un conjunto de v√≥xeles o como un arreglo de celdas. A continuaci√≥n se explican los aspectos que son tomados en cuenta en cada tipo de clasificaci√≥n. 2.1.1.1. FUENTES DE DATOS VOLUM√âTRICOS El primer paso necesario para estudiar determinados fen√≥menos basados en el an√°lisis de vol√∫menes de datos consiste en la obtenci√≥n de los mismos. Estos datos generalmente son obtenidos mediante el escaneo (scanning) del material de inter√©s utilizando Imagenolog√≠a por Resonancia Magn√©tica (MRI), Tomograf√≠a Computarizada (CT), Tomograf√≠a por Emisi√≥n de Positrones (PET) y Ultrasonidos. Otra fuente de datos frecuentemente usada por los cient√≠ficos consiste en los resultados de simulaciones de experimentos reales 1 , con el fin de contrastar sus resultados con aquellos obtenidos en el experimento realizado. Sin embargo, hay ocasiones en las cuales no se puede disponer de los datos del experimento real, debido a que √©ste puede ser muy grande, muy peque√±o, muy r√°pido o muy lento como para ser observado, en cuyo caso s√≥lo se puede estudiar el fen√≥meno mediante los datos obtenidos de la simulaci√≥n. Los datos volum√©tricos tambi√©n pueden ser generados mediante la voxelizaci√≥n de objetos geom√©tricos, el uso de herramientas de edici√≥n de vol√∫menes o de programas para la generaci√≥n de vol√∫menes mediante m√©todos estoc√°sticos. No obstante, los datos volum√©tricos pueden ser tratados de forma similar sin importar la fuente de la que hayan sido obtenidos [ELV92]. Generalmente, los datos a visualizar provienen de una √∫nica fuente, pero en ciertos casos es preferible obtenerlos de varias fuentes diferentes, debido a que la calidad e informaci√≥n aportada por estos depende de la forma en la que han sido capturados. Por ejemplo, para facilitar la detecci√≥n del c√°ncer se utiliza la t√©cnica PET-CT Fusion, la cual consiste en correlacionar los 1 Estos experimentos generalmente se realizan mediante el uso de elementos finitos y din√°mica de fluidos. 7 datos obtenidos de una tomograf√≠a con los datos obtenidos de un PET 2 , el cual se especializa en detectar √°reas con alta actividad metab√≥lica. De esta forma, en la tomograf√≠a se pueden observar resaltadas aquellas partes donde el c√°ncer se ha esparcido, ya que la mayor√≠a de los tejidos cancerosos presentan una alta actividad metab√≥lica con respecto a los tejidos normales. 2.1.1.2. TIPOS DE DATOS VOLUM√âTRICOS Dependiendo del √°rea en que se est√© trabajando y de la fuente de donde provienen los datos, los valores almacenados en el volumen pueden diferir en varios aspectos, entre los cuales se encuentran el rango v√°lido, el tipo base ‚Äìenteros, flotantes, n√∫meros complejos‚Äì y su cardinalidad. Cuando la cardinalidad de los datos es uno, se dice que los datos son escalares simples, en los dem√°s casos se dice que los datos son vectoriales. Es importante realizar esta distinci√≥n porque los m√©todos utilizados para el despliegue de datos vectoriales deben ser capaces de mostrar toda la informaci√≥n disponible, sin dificultar el entendimiento por parte del usuario. Una forma de desplegar datos vectoriales tridimensionales es visualizando un corte a la vez con flechas en cada punto de la malla, cuya direcci√≥n indica la direcci√≥n del dato vectorial y cuyo color indica la magnitud del mismo o cualquier otro valor escalar. En vez de flechas, tambi√©n se pueden utilizar otros elementos como l√≠neas, flechas y tri√°ngulos, y se puede enlazar el brillo, el color, la direcci√≥n y la transparencia de los elementos a distintos atributos del volumen, lo que permite mostrar la mayor cantidad de datos a la vez de forma sencilla [SAW07]. 2.1.1.3. V√ìXELES Y CELDAS Los vol√∫menes de datos son usualmente tratados como un conjunto de v√≥xeles o como un arreglo de celdas. El enfoque mediante v√≥xeles establece que los valores de los atributos del volumen se calculan en base a la muestra m√°s cercana. Por lo tanto, un v√≥xel es la regi√≥n cuyos puntos son m√°s cercanos a una muestra en espec√≠fico. En algunos algoritmos la contribuci√≥n del v√≥xel a la imagen disminuye a medida que la distancia del centro de la regi√≥n de influencia aumenta. Este enfoque tiene la ventaja de no inferir el comportamiento de los datos entre los 2 PET: Positron Emission Tomography, Tomograf√≠a por Emisi√≥n de Positrones. 8 puntos de la malla, es decir, solamente utiliza valores conocidos de los datos para generar las im√°genes. El enfoque por celdas interpreta el volumen como una colecci√≥n de hexaedros delimitados por los puntos de la malla, cuyos valores var√≠an dentro de ellas. Este enfoque intenta estimar los valores dentro de la celda mediante interpolaci√≥n entre los valores en las esquinas de la celda, donde se puede utilizar interpolaci√≥n trilineal o interpolaci√≥n bic√∫bica [ELV92]. Las im√°genes generadas mediante este enfoque son mucho m√°s suaves que aquellas generadas mediante el enfoque por v√≥xeles. Sin embargo, como generalmente la funci√≥n subyacente no es conocida, es imposible verificar la validez de la interpolaci√≥n utilizada para evaluar el volumen entre puntos del mallado discreto, por lo que se debe asumir que la t√©cnica de interpolaci√≥n es v√°lida para que las im√°genes generadas se consideren correctas. 2.1.2. M√âTODOS PARA LA VISUALIZACI√ìN DE VOL√öMENES Los algoritmos de visualizaci√≥n de vol√∫menes son clasificados en dos categor√≠as: algoritmos de visualizaci√≥n directa de volumen (direct volume rendering o DVR) y algoritmos de extracci√≥n de isosuperficies (surface fitting o SF). Los algoritmos basados en DVR incluyen trazado de rayos (ray-casting), shear-warp, m√©todos de preintegraci√≥n, splatting y despliegue de V-buffer, los cuales est√°n caracterizados por aplicar elementos directamente en la imagen sin utilizar primitivas geom√©tricas como representaci√≥n intermedia [ELV92]. Estos m√©todos son apropiados para crear im√°genes a partir de vol√∫menes de datos que contengan l√≠mites difusos como nubes, fluidos y gases. La principal desventaja de usar DVR es que el volumen de datos debe ser recorrido por completo cada vez que una imagen tenga que ser desplegada, por lo que generalmente se realiza una pasada en baja resoluci√≥n de los datos de forma tal que el usuario pueda verificar los par√°metros r√°pidamente, para despu√©s realizar el despliegue con alta resoluci√≥n una vez los par√°metros sean confirmados. Los algoritmos basados en SF usualmente ajustan primitivas como pol√≠gonos o parches a superficies de contorno con valor constante en vol√∫menes de datos. El primer paso consiste en la elecci√≥n de un umbral por parte del usuario, el cual es utilizado para ajustar primitivas geom√©tricas a los contornos en el volumen que sean iguales al umbral. Este enfoque incluye 9 algoritmos como conexi√≥n de contornos (contour connecting) [KEP75], cubos marchantes (marching cubes) [LOR87], tetracubos marchantes (marching tetracubes) [CAR95], entre otros. 2.1.3. PASOS GENERALES PARA LA VISUALIZACI√ìN DE VOL√öMENES A pesar de la variedad de algoritmos existentes para la visualizaci√≥n de vol√∫menes, la mayor√≠a de los pasos involucrados son comunes en ellos. Generalmente, los algoritmos difieren en la forma en que implementan cada uno de dichos pasos, los cuales se explican a continuaci√≥n. 2.1.3.1. ADQUISICI√ìN DE DATOS El primer paso en cualquier procedimiento para la visualizaci√≥n de datos consiste en la obtenci√≥n y preprocesamiento de √©stos, de forma que se puedan obtener mejores resultados visuales. Este preprocesamiento consiste en modificar los valores para que cubran una buena distribuci√≥n de valores, tengan altos contrastes y est√©n libres de ruido y valores fuera de rango. Finalmente, en algunos algoritmos [GUO95] es necesario que los datos tengan la misma proporci√≥n espacial que el objeto de estudio, de forma que las im√°genes desplegadas no aparezcan deformadas a la hora de visualizar el volumen. Cuando la proporci√≥n del objeto y de los datos no es la misma, puede ser necesario interpolar dos cortes para obtener uno nuevo, interpolar muestras para obtener muestras faltantes, o convertir un mallado irregular a un mallado cartesiano regular uniforme. 2.1.3.2. CLASIFICACI√ìN DE LOS DATOS La clasificaci√≥n de los datos consiste en elegir la forma en que los datos deben ser desplegados en base a sus valores. Este paso es llevado a cabo por el usuario, y el procedimiento a realizar depende del algoritmo utilizado para visualizar los datos. Si el algoritmo est√° basado en SF, el usuario debe elegir el umbral a extraer, el cual consiste en un valor real que representa el valor a ajustar por la isosuperficie resultante. Cuando el algoritmo est√° basado en DVR, el usuario debe configurar la funci√≥n de transferencia, la cual consiste en una funci√≥n que relaciona un color y factor de absorci√≥n a cada valor posible que puedan tener los atributos del volumen (ver Secci√≥n 2.1.4.2 para m√°s detalles sobre el uso de la funci√≥n de transferencia en DVR). 10 La clasificaci√≥n de los datos es uno de los pasos m√°s dif√≠ciles que debe llevar a cabo el usuario, porque es necesario que √©ste tenga experiencia clasificando los datos y que el sistema proporcione una respuesta r√°pida, debido a que este procedimiento est√° basado en intento y error. Una soluci√≥n para dar respuesta r√°pida al usuario consiste en ofrecer una vista con menor resoluci√≥n mientras se realiza el proceso de clasificaci√≥n, y generar una imagen refinada despu√©s que el usuario confirma que ha finalizado. 2.1.3.3. RECORRIDO DE LOS DATOS Despu√©s de configurar la clasificaci√≥n del volumen de datos, se deben generar las im√°genes recorriendo los datos. Existen dos formas de recorrer el volumen: en orden de objeto (object- order), que consiste en calcular la contribuci√≥n de cada elemento del volumen a los p√≠xeles de la imagen; o en orden de imagen (image-order), que consiste en determinar el color en cada p√≠xel de la imagen, buscando los elementos del volumen que contribuyen a cada uno de estos [ELV92]. Los recorridos en orden de objeto pueden ir de adelante hacia atr√°s (front-to-back) o de atr√°s hacia adelante (back-to-front). Recorrer el modelo de adelante hacia atr√°s tiene la ventaja de que los elementos en la parte de atr√°s no deben ser visitados si los de adelante ya han creado una imagen lo suficientemente opaca [ELV92]. Los recorridos en orden de imagen generalmente proceden de arriba hacia abajo, de izquierda a derecha. Tambi√©n se pueden calcular los p√≠xeles en orden aleatorio, de forma que el usuario observe como la imagen es refinada mientras los p√≠xeles faltantes son calculados. 2.1.3.4. VISUALIZACI√ìN Y SOMBREADO Para visualizar un volumen de datos se puede utilizar tanto proyecci√≥n ortogonal como proyecci√≥n perspectiva, sin importar que el algoritmo est√© basado en DVR o en SF. Sin embargo, el uso de proyecci√≥n ortogonal asegura que el usuario no se confunda al observar los datos deformados por la transformaci√≥n perspectiva. No obstante, cuando no se utiliza perspectiva, se deben incluir otras caracter√≠sticas que le permitan al usuario percibir la profundidad de los elementos, tal como niebla por profundidad, atenuaci√≥n por distancia o estereoscop√≠a [ELV92]. 11 Para realizar el sombreado en los algoritmos basados en DVR y en SF generalmente se utiliza sombreado por gradiente (gradient shading), el cual consiste en implementar un modelo de iluminaci√≥n est√°ndar, como Phong o Blinn, utilizando el gradiente normalizado de los datos como vector normal. Para calcular los gradientes dentro de una celda se utiliza interpolaci√≥n de los gradientes en las ocho esquinas de la celda, donde el gradiente en un punto de la malla se calcula por diferencias finitas entre los puntos adyacentes en cada direcci√≥n [LOR87]. 2.1.4. ALGORITMOS PARA LA VISUALIZACI√ìN DE VOL√öMENES A continuaci√≥n se explican algunos algoritmos para la visualizaci√≥n de vol√∫menes, los cuales se encuentran clasificados en base al m√©todo utilizado para desplegar el volumen, ya sea mediante visualizaci√≥n directa de volumen (DVR) o extracci√≥n de isosuperficies (SF). 2.1.4.1. EXTRACCI√ìN DE ISOSUPERFICIES Los algoritmos de extracci√≥n de isosuperficies consisten en el c√°lculo de una representaci√≥n intermedia que se ajuste a las partes del volumen que se desean desplegar. Las partes que se desean desplegar son elegidas mediante el uso de un umbral, el cual especifica a qu√© isovalor se deben ajustar las primitivas calculadas. Las primitivas utilizadas como representaci√≥n intermedia generalmente son f√°ciles de desplegar por hardware gr√°fico est√°ndar, como lo son los mallados triangulares y los cuadril√°teros [ELV92]. A continuaci√≥n se explicar√°n tres algoritmos para la extracci√≥n de isosuperficies, entre los cuales se encuentran la conexi√≥n de contornos, el algoritmo de los cubos opacos, el algoritmo de los cubos marchantes y el algoritmo de los tetracubos marchantes. A. CONEXI√ìN DE CONTORNOS La conexi√≥n de contornos (contour-connecting) fue uno de los primeros algoritmos inventados para la visualizaci√≥n de vol√∫menes, el cual consiste en calcular un contorno cerrado en cada corte y conectar los contornos de cada par de cortes adyacentes [KEP75][FUC77]. Este algoritmo comienza calculando el contorno de cada corte en el valor especificado como umbral por el usuario. Anteriormente este procedimiento se realizaba a mano, pero las t√©cnicas actuales de procesamiento de im√°genes permiten la extracci√≥n autom√°tica del contorno. 12 Una vez que se tienen todos los contornos, el problema se reduce a conseguir una triangulaci√≥n que conecte las curvas de los cortes adyacentes. Para determinar la triangulaci√≥n a utilizar, se busca aquella que maximice ‚Äìo minimice‚Äì alguna m√©trica de la triangulaci√≥n generada, como el volumen del modelo o el m√≠nimo √°ngulo interno de los tri√°ngulos [KEP75]. Existen dos clases de m√©todos para unir dos contornos: optimizaci√≥n y heur√≠sticos. Los m√©todos de optimizaci√≥n calculan la mejor triangulaci√≥n posible [FUC77], y por lo general tardan ùëÇ ùëÅùëÄ en ejecutarse, donde ùëÅ es la cantidad de puntos de un corte y ùëÄ es la cantidad de puntos del otro corte. Los m√©todos heur√≠sticos calculan una triangulaci√≥n aceptable, mediante el uso de una decisi√≥n local por medio de una heur√≠stica f√°cil de calcular en cada punto [KEP75]. Estos √∫ltimos generalmente son utilizados cuando el tiempo de ejecuci√≥n es m√°s importante que la calidad del modelo, ya que generalmente tardan ùëÇ ùëÅ + ùëÄ en ejecutarse. B. CUBOS OPACOS Otro procedimiento sencillo para la visualizaci√≥n de vol√∫menes es el algoritmo de los cubos opacos (opaque-cubes), el cual fue propuesto por [HER79], donde el umbral elegido por el usuario se utiliza para recorrer cada una de las celdas del objeto y extraer aquellas cuyos valores lo incluyan. Por cada una de estas celdas, se crean seis pol√≠gonos, uno por cada cara, los cuales son desplegados usando cualquier hardware est√°ndar. Los pol√≠gonos se pueden desplegar opacos o semitransparentes, y si se eligen varios umbrales se puede desplegar cada conjunto de celdas con un color diferente. Una de las principales desventajas de este algoritmo es que las im√°genes desplegadas tienen apariencia de bloques c√∫bicos, lo cual genera dificultades al intentar observar caracter√≠sticas peque√±as en los datos. Sin embargo, la apariencia puede ser mejorada utilizando sombreado por gradiente (gradient-shading). C. CUBOS MARCHANTES Cubos Marchantes (marching cubes) es un algoritmo para la visualizaci√≥n de vol√∫menes que consiste en la extracci√≥n de una isosuperficie en base a una tabla de casos [LOR87], el cual procesa cada celda y extrae un mallado triangular que separa aquellos v√≥xeles menores que el 13 umbral de aquellos mayores que el umbral. Este algoritmo ha sido implementado y estudiado ampliamente en numerosas publicaciones [NIE91][CHE95]. Cubos marchantes comienza leyendo cuatro cortes, con los cuales calcula el gradiente en los puntos internos y se extraen tri√°ngulos de las celdas internas entre el segundo y tercer corte. Despu√©s, se carga un nuevo corte, se descarta el m√°s viejo y se repite el procedimiento, hasta haber procesado todos los cortes. Finalmente, los tri√°ngulos extra√≠dos son pasados a hardware gr√°fico est√°ndar para el despliegue de superficies. Para m√°s detalles acerca del algoritmo, ver la Secci√≥n 2.2.1. D. TETRACUBOS MARCHANTES Tetracubos Marchantes (marching tetracubes) es un algoritmo para la visualizaci√≥n de vol√∫menes que consiste en la extracci√≥n de una isosuperficie mediante la divisi√≥n de cada celda en tetraedros y su posterior procesamiento, el cual consiste en la extracci√≥n de un mallado triangular que separe aquellos v√≥xeles menores que el umbral de aquellos mayores que el umbral [CAR95]. Este algoritmo opera de manera similar a cubos marchantes, pero no presenta casos ambiguos, por lo cual es mucho m√°s f√°cil de implementar. Para m√°s detalles acerca del algoritmo, ver la Secci√≥n 2.2.2. 2.1.4.2. VISUALIZACI√ìN DIRECTA DE VOLUMEN Los m√©todos basados en la visualizaci√≥n directa de volumen consisten en desplegar el volumen directamente en el plano imagen sin utilizar una representaci√≥n intermedia para ello. Para determinar el color de un p√≠xel en el plano imagen se simula la propagaci√≥n de un rayo de luz a trav√©s del volumen, lo cual se realiza mediante el uso de un sistema √≥ptico basado √∫nicamente en la absorci√≥n y emisi√≥n de luz [WIL92]. El modelo √≥ptico utilizado para simular la propagaci√≥n de un rayo de luz a trav√©s del volumen est√° definido por la siguiente ecuaci√≥n [SCH03]: ùê∂ = ùëê ùúÜ ùúè ùúÜ ùëí‚àí ùúè ùë° ùúïùúÜ ùúÜ 0 ùúïùúÜ ùê∑ 0 14 donde ùê∂ es el color resultante, ùê∑ es la distancia que recorre el rayo dentro del volumen, y ùëê ùúÜ y ùúè ùúÜ son el color y el factor de absorci√≥n a una distancia ùúÜ de la entrada del rayo en el volumen, respectivamente. Esta integral representa la suma de la emisi√≥n de la luz desde el punto de entrada del rayo en el volumen (ùúÜ = 0) hasta que sale del mismo (ùúÜ = ùê∑). La exponencial que multiplica el color en la posici√≥n ùúÜ representa el factor de extinci√≥n acumulado hasta ese punto, lo cual hace que los valores obtenidos vayan aportando menos al color final a medida que el rayo avanza. Esta ecuaci√≥n eval√∫a el rayo de forma continua; para realizar la evaluaci√≥n de manera discreta √©sta se aproxima mediante sumas de Riemann [ANT98]: ùëõ = ùê∑ ‚Ñé , ùõº ùúÜ = 1 ‚àí ùëí‚àí‚Ñéùúè ùúÜ (1.1) ùê∂ ‚âà ùëê ùëñ‚Ñé ùõº ùëñ‚Ñé 1 ‚àí ùõº ùëó‚Ñé ùëñ‚àí1 ùëó =0 ùëõ‚àí1 ùëñ=0 donde ùëõ representa la cantidad de muestras a evaluar y ùëó‚Ñé representa la posici√≥n de la j-√©sima muestra dentro del rayo. Esta ecuaci√≥n puede ser evaluada de dos formas diferentes: la primera consiste en evaluar y acumular las muestras desde la m√°s cercana hacia la m√°s lejana (front to back) de la siguiente manera: ùê∂0 = 0, ùê∂ùëñ+1 = ùê∂ùëñ + ùê¥ùëñùõº ùëñ‚Ñé ùëê ùëñ‚Ñé ùê¥0 = 1, ùê¥ùëñ+1 = ùê¥ùëñ 1 ‚àí ùõº ùëñ‚Ñé donde ùê∂ùëñ y ùê¥ùëñ son el color y el factor de extinci√≥n acumulado despu√©s de evaluar ùëñ muestras, respectivamente. El color asignado al p√≠xel es aquel encontrado despu√©s de evaluar las ùëõ muestras, es decir, ùê∂ ‚âà ùê∂ùëõ . La segunda forma de evaluar la ecuaci√≥n consiste en evaluar y acumular las muestras desde la m√°s lejana hacia la m√°s cercana (back to front) de la siguiente manera: ùê∂ùëõ = 0, ùê∂ùëñ = ùõº ùëñ‚Ñé ùëê ùëñ‚Ñé + 1 ‚àí ùõº ùëñ‚Ñé ùê∂ùëñ+1 15 donde ùê∂ùëñ es el color acumulado cuando quedan i muestras por evaluar. El color asignado al p√≠xel es aquel encontrado cuando no quedan muestras por evaluar, es decir, ùê∂ ‚âà ùê∂0. Existen varios m√©todos para el despliegue de vol√∫menes mediante visualizaci√≥n directa de vol√∫menes, entre las cuales se encuentra el uso de planos alineados al objeto, planos alienados a la imagen, ray casting por software, shear-warp, ray casting por GPU 3 y splatting. A continuaci√≥n se explicar√° ray casting y splatting. A. RAY CASTING Otro algoritmo utilizado para la visualizaci√≥n de vol√∫menes con im√°genes de alta calidad consiste en ray casting. Este algoritmo lleva a cabo un recorrido en orden de imagen, donde el color y opacidad de cada p√≠xel se calcula disparando un rayo desde el p√≠xel hacia el volumen de datos, acumulando las opacidades y colores encontrados durante la trayectoria del mismo [LEV88][LEV90a][LEV90b]. El primer paso consiste en la configuraci√≥n de la funci√≥n de transferencia, el punto de vista del usuario y la iluminaci√≥n a utilizar. Entonces, se dispara un rayo por cada p√≠xel en la imagen a generar, se determina el punto de entrada y de salida de √©ste del volumen, con el fin de calcular la ecuaci√≥n 1.1. Para ello, el rayo es evaluado a pasos constantes de tama√±o ‚Ñé desde el punto m√°s cercano al ojo hasta el m√°s lejano. B. SPLATTING Este algoritmo consiste en realizar un recorrido de adelante hacia atr√°s de los v√≥xeles del volumen, calculando y componiendo la contribuci√≥n de cada uno de ellos en la imagen mediante el uso de una tabla. Al procedimiento se le llama splatting [WES89] porque se asemeja a ‚Äúaplastar‚Äù cada v√≥xel en la imagen, donde la contribuci√≥n del v√≥xel sobre un p√≠xel es inversamente proporcional a la distancia entre el v√≥xel proyectado y dicho p√≠xel. El primer paso, despu√©s de que el usuario configura la funci√≥n de transferencia, consiste en determinar el orden en el que se va a recorrer el volumen, lo cual se realiza buscando la esquina de la malla m√°s cercana al punto de vista despu√©s de aplicar la matriz de visualizaci√≥n 3 GPU: Graphical Processing Unit (Unidad Gr√°fica de Procesamiento) 16 (modelview matrix). Una vez determinado el orden correcto, se procesan los v√≥xeles desde el corte m√°s cercano hacia el m√°s lejano. La clasificaci√≥n de un v√≥xel se realiza de manera similar como en trazado de rayos: primero se clasifica su valor utilizando la funci√≥n de transferencia, se sombrea utilizando el gradiente y la opacidad se multiplica por la magnitud del mismo. El siguiente paso consiste en calcular la contribuci√≥n del v√≥xel a la imagen proyectando √©ste en la imagen y utilizando una huella circular [WES89]. Esta huella es colocada en la imagen sobre el v√≥xel proyectado, el cual sirve para decidir cu√°nto va a afectar el v√≥xel actual cada p√≠xel de la imagen. Sin embargo, si se utiliza proyecci√≥n perspectiva o escalamientos no uniformes, la proyecci√≥n de la huella en el plano imagen es una elipse, por lo que se debe aplicar una transformaci√≥n para convertir las coordenadas el√≠pticas a coordenadas circulares, y as√≠ poder utilizar la misma huella para todos los v√≥xeles [WES90]. Luego, el color y la opacidad son mezclados con los valores acumulados en la imagen en cada p√≠xel dentro del √°rea cubierta por la huella, atenuando el color y la opacidad en base al valor de la huella en cada p√≠xel a modificar. Esto ocasiona que los p√≠xeles m√°s cercanos al v√≥xel proyectado sean m√°s afectados que aquellos m√°s distantes. Una vez todos los v√≥xeles han sido procesados, la imagen est√° lista para ser desplegada. 2.2. EXTRACCI√ìN DE ISOSUPERFICIES Para la extracci√≥n de isosuperficies, se considera el volumen de datos como una funci√≥n ùêπ ùë•, ùë¶, ùëß , la cual relaciona una posici√≥n dentro del volumen con un valor escalar, es decir: ùêπ ùë•, ùë¶, ùëß = ‚Ñú3 ‚ü∂ ‚Ñú La extracci√≥n de una isosuperficie de un volumen de datos consiste en el c√°lculo de una superficie que aproxime el conjunto ùëÜùõº , el cual se define como: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº donde ùõº representa el valor de la isosuperficie a extraer. La mayor√≠a de los algoritmos representan la superficie extra√≠da mediante un mallado triangular, el cual est√° compuesto por un conjunto de v√©rtices y un conjunto de tri√°ngulos que unen dichos v√©rtices. Esto permite visualizar la superficie f√°cilmente mediante el uso del hardware gr√°fico existente. 17 En los algoritmos expuestos a continuaci√≥n, se asume que s√≥lo se conocen los valores de ùêπ ùë•, ùë¶, ùëß en los v√©rtices de las celdas de una malla cartesiana escalar como la que se muestra en la Figura 2.1. Figura 2.1: Malla c√∫bica utilizada para la extracci√≥n de isosuperficies. Para evaluar ùêπ ùë•, ùë¶, ùëß en un punto que no corresponda a uno de los v√≥xeles, se realiza interpolaci√≥n sobre la celda donde se encuentra el punto a evaluar. Se pueden utilizar varios esquemas de interpolaci√≥n, pero el m√°s utilizado es interpolaci√≥n trilineal [ELV92]. Para realizar interpolaci√≥n trilineal, primero se debe obtener la posici√≥n relativa del punto respecto a la celda donde se encuentra de la siguiente manera: ùëû = ùë• ‚àí ùëãùêø ùëãùêª ‚àí ùëãùêø , ùë† = ùë¶ ‚àí ùëåùêø ùëåùêª ‚àí ùëåùêø , ùë° = ùëß ‚àí ùëçùêø ùëçùêª ‚àí ùëçùêø donde ùëãùêø , ùëåùêø , ùëçùêø es la posici√≥n de la esquina inferior-izquierda-trasera de la celda y ùëãùêª , ùëåùêª , ùëçùêª es la posici√≥n de la esquina superior-derecha-delantera de la misma. Finalmente se interpolan los ocho isovalores de la celda de la siguiente manera: ùêπ ùë£000 , ‚ãØ , ùë£111 , ùëû, ùë†, ùë° = ùë£000 ‚àô 1 ‚àí ùëû 1 ‚àí ùë† 1 ‚àí ùë° + ùë£001 ‚àô ùëû 1 ‚àí ùë† 1 ‚àí ùë° + ùë£010 ‚àô 1 ‚àí ùëû ùë† 1 ‚àí ùë° + ùë£011 ‚àô ùëûùë† 1 ‚àí ùë° + ùë£100‚àô 1 ‚àí ùëû 1 ‚àí ùë† ùë° + ùë£101 ‚àô ùëû 1 ‚àí ùë† ùë° + ùë£110 ‚àô 1 ‚àí ùëû ùë†ùë° + ùë£111 ‚àô ùëûùë†ùë° donde ùë£000 , ‚ãØ , ùë£111 representan los isovalores de los ocho v√≥xeles que delimitan la celda. A continuaci√≥n, se explicar√°n dos algoritmos importantes para la extracci√≥n de isosuperficies a partir de mallas cartesianas, cubos marchantes y tetracubos marchantes. 18 2.2.1. CUBOS MARCHANTES Uno de los m√©todos m√°s conocidos y estudiados para la extracci√≥n de isosuperficies a partir de una malla cartesiana escalar es el algoritmo de los Cubos Marchantes (Marching Cubes) [LOR87], el cual consiste en reconstruir cada celda de la malla independientemente mediante el uso de una tabla de conectividad. Cada celda se encuentra delimitada por ocho v√≥xeles y doce aristas, las cuales se enumeran como se muestra en la Figura 2.2. Figura 2.2: Enumeraci√≥n de los v√©rtices y aristas que delimitan la celda. Para triangular cada celda primero se debe clasificar cada uno de los v√≥xeles que la delimitan. Para simplificar la clasificaci√≥n de las celdas, Chernyaev [CHE95] resta el valor ùõº a extraer del isovalor de cada v√≥xel, de forma tal que extraer la isosuperficie ùëÜùë• antes de la resta equivale a extraer la isosuperficie ùëÜ0 despu√©s de realizar la resta, es decir: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß ‚àí ùõº = 0 De esta manera, se pueden clasificar los v√≥xeles en dos grupos, positivos y negativos, de acuerdo al signo del isovalor despu√©s de sustraer ùõº. Luego, con la clasificaci√≥n de los v√≥xeles se construye una m√°scara de ocho bits, donde el k-√©simo bit se encuentra encendido si y s√≥lo si el k- √©simo v√≥xel es positivo (ver Figura 2.3). 19 Figura 2.3: Construcci√≥n de la m√°scara a partir de los valores en los v√©rtices con ùõº = 0.5, donde cada ùõø representa el isovalor en cada v√©rtice que delimita la celda. Debido a que cada uno de los v√≥xeles tiene dos estados posibles, existe un total de 28 = 256 formas diferentes en que la superficie a extraer puede intersectar la celda. Sin embargo, la topolog√≠a de la superficie no cambia si todos los v√≥xeles cambian de signo, por lo cual se pueden reducir los 128 casos superiores a los 128 casos inferiores invirtiendo el sentido de los tri√°ngulos generados (casos complementarios). Luego, por medio de reflexiones y rotaciones se pueden reducir los 128 casos a 15 casos topol√≥gicamente diferentes, los cuales se muestran en la Figura 2.4. Figura 2.4: Las 15 configuraciones diferentes usadas por Cubos Marchantes. Los v√≥xeles rojos son negativos y los v√≥xeles azules son positivos. 20 El siguiente paso es determinar cu√°les aristas de la celda son intersectadas por la superficie y d√≥nde se encuentra el punto de intersecci√≥n. Una arista es intersectada por la superficie si y s√≥lo si los v√≥xeles en sus extremos tienen signos diferentes. Para determinar el punto ùëÉùë• donde la arista es intersectada por la superficie se puede utilizar interpolaci√≥n lineal sobre la misma de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde, ùë£0 y ùë£1 son los isovalores de los v√≥xeles que delimitan la arista, ùõº es el umbral de la superficie que se desea extraer, ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista y ùëÉùë• es la posici√≥n del punto de intersecci√≥n en √©sta. Despu√©s de calcular todos los puntos de intersecci√≥n de la superficie con la celda se generan los tri√°ngulos que la componen utilizando una tabla de 256 casos, la cual se indexa utilizando la m√°scara obtenida de la clasificaci√≥n de los v√≥xeles. Mediante cubos marchantes tambi√©n se pueden calcular otros atributos de los v√©rtices del mallado final, mediante interpolaci√≥n lineal de los atributos en los extremos de cada arista intersectada por el modelo. Por ejemplo, se puede calcular el gradiente por v√©rtice ùê∫ùë• interpolando los gradientes en los extremos de cada arista intersectada de la siguiente manera: ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùê∫0 y ùê∫1 son los gradientes en los extremos de la arista y ùê∫ùë• es el gradiente en ùëÉùë• . 2.2.1.1. VENTAJAS Y DESVENTAJAS DE CUBOS MARCHANTES Cubos marchantes es uno de los algoritmos m√°s utilizados para la extracci√≥n de isosuperficies debido a las diversas ventajas que posee, entre las cuales se encuentran: ÔÇ∑ Sencillez: El algoritmo es f√°cil de implementar, ya que s√≥lo se necesita una tabla de 28 casos para procesar cada celda en base a la clasificaci√≥n de sus v√≥xeles. ÔÇ∑ Eficiencia: El algoritmo s√≥lo calcula las intersecciones en aquellas aristas donde es necesario, reutilizando las intersecciones de las celdas anteriores de ser posible. Adem√°s, 21 el algoritmo s√≥lo necesita la construcci√≥n de una m√°scara y b√∫squedas de orden constante en tablas precalculadas. ÔÇ∑ Paralelizable: El algoritmo es f√°cil de paralelizar, debido a que la superficie extra√≠da de una celda es independiente de las superficies extra√≠das de las otras celdas. Sin embargo, el algoritmo posee varias desventajas, para las cuales se han desarrollado t√©cnicas para corregirlas, entre las cuales se encuentran: ÔÇ∑ Errores topol√≥gicos: En ciertos conjuntos de datos, el algoritmo genera huecos incorrectos en la superficie. En las siguientes secciones se explicar√°n los trabajos dedicados a corregir dichos errores. ÔÇ∑ Tri√°ngulos degenerados: En ciertos casos, el algoritmo genera tri√°ngulos de baja calidad, los cu√°les se visualizan con artefactos dependiendo de la t√©cnica utilizada para su despliegue. ÔÇ∑ Complejidad de la salida: El algoritmo genera una cantidad excesiva de tri√°ngulos redundantes cuando la resoluci√≥n de los modelos de entrada es muy alta, lo que ocasiona que la superficie final sea m√°s dif√≠cil de visualizar. Una de las soluciones es expuesta en [SCH92], donde se explica un m√©todo que permite aproximar una superficie mediante otra con menos tri√°ngulos, la cual se podr√≠a aplicar como un post-procesamiento a la superficie generada por cubos marchantes. 2.2.1.2. MODELOS TOPOL√ìGICAMENTE CORRECTOS Para analizar el mallado final generado por el algoritmo original de Cubos Marchantes, primero se debe definir qu√© es una superficie topol√≥gicamente correcta. En [CHE95] se define que una superficie es topol√≥gicamente correcta si y s√≥lo si la topolog√≠a de los tri√°ngulos generados coincide con la topolog√≠a de la funci√≥n ùêπ ùë•, ùë¶, ùëß dentro de cada celda. Para obtener una superficie topol√≥gicamente correcta, dos v√≥xeles del mismo signo deben estar unidos ‚Äì o no separados ‚Äì dentro de una celda si y s√≥lo si existe un camino dentro de √©sta que conecte ambos v√≥xeles y no cambie de signo. El caso m√°s simple para determinar si dos 22 v√≥xeles est√°n conectados es cuando existe un camino a trav√©s de las aristas de la celda que s√≥lo contiene v√≥xeles del mismo signo. Sin embargo, hay dos casos donde la regla anterior no es suficiente. Por ejemplo, cuando se tiene una cara con dos v√≥xeles positivos y dos v√≥xeles negativos en esquinas opuestas que no est√°n conectados a trav√©s de las dem√°s aristas de la celda, no se puede decir directamente que ambos v√≥xeles est√°n separados, debido a que √©stos podr√≠an estar unidos mediante un camino que pase por dentro de la cara. A este tipo de caras se les denomina caras ambiguas, como la que se puede observar en la Figura 2.5. Figura 2.5: Ejemplo de una cara ambigua. A la izquierda se muestra el caso donde los v√≥xeles positivos se encuentran separados, a la derecha se muestra el caso donde √©stos no son separados. Los v√≥xeles positivos se encuentran marcados en azul, y los v√≥xeles negativos se encuentran marcados en rojo. El otro caso donde las reglas anteriores no son suficientes es cuando se tiene una ambig√ºedad interna, la cual ocurre cuando dos v√≥xeles del mismo signo se encuentran en esquinas opuestas de la celda y no est√°n conectados por las aristas ni por las caras de la misma, pero podr√≠an estar unidos a trav√©s de un camino que pase por dentro de la celda. Un ejemplo de este tipo de ambig√ºedad se puede observar en la Figura 2.6. Figura 2.6: Ejemplo de ambig√ºedad interna. A la izquierda se muestra el caso donde los v√©rtices positivos se encuentran separados, y a la derecha se muestra el caso donde √©stos no est√°n separados. 23 2.2.1.3. ERRORES TOPOL√ìGICOS DE CUBOS MARCHANTES Una de las mayores cr√≠ticas realizadas al algoritmo original de Cubos Marchantes, propuesto en [LOR87], es que genera errores topol√≥gicos en ciertos vol√∫menes de datos, los cuales consisten en peque√±os huecos en la superficie. En la Figura 2.7 se puede observar el hueco que genera el algoritmo de los cubos marchantes cuando encuentra una celda del caso 6 adyacente a una celda del complemento del caso 3. Figura 2.7: Ejemplo mostrando el hueco creado por Cubos Marchantes, el cual se encuentra representado por el pol√≠gono gris en la cara compartida por ambas celdas. Para verificar que este hueco no es topol√≥gicamente correcto, se puede observar que el v√≥xel A tiene signo diferente al v√≥xel B, lo que implica que el segmento de l√≠nea delimitado por esos v√≥xeles deber√≠a intersectar la superficie generada en alg√∫n punto. D√ºrst [D√úR88] propone resolver este error agregando el cuadril√°tero formado por los cuatro v√©rtices en la cara compartida por ambas celdas, correspondiente al pol√≠gono gris en la Figura 2.7. Sin embargo, esta soluci√≥n no es la m√°s adecuada, debido a que ocasionar√≠a que m√°s de dos tri√°ngulos compartan una arista en el mallado final. La raz√≥n por la cual se genera el hueco en la superficie es que la cara compartida por ambas celdas es una cara ambigua, la cual se conecta de una forma en la celda izquierda y de otra forma en la celda derecha. Existen dos formas de triangular una cara ambigua, una donde los tri√°ngulos generados separan ambos v√≥xeles positivos en la cara y otra donde √©stos no son separados por la triangulaci√≥n. En el primer caso se dice que la cara es una cara separada y en el segundo caso se dice que es una cara no separada. Ambas triangulaciones v√°lidas para el caso expuesto de la 24 Figura 2.7 se pueden observar en la Figura 2.8, donde la triangulaci√≥n superior corresponde a utilizar una cara no separada y la triangulaci√≥n inferior corresponde a utilizar una cara separada. Figura 2.8: Posibles triangulaciones v√°lidas para el caso mostrado en la Figura 2.7. Cualquier m√©todo de extracci√≥n correcto debe conectar los v√©rtices de una cara ambigua de la misma forma en ambas celdas a las que pertenece, ya sea separando los v√≥xeles positivos en la triangulaci√≥n o no. En el algoritmo original propuesto en [LOR87] no se cumple esta condici√≥n, debido a que al utilizar los complementos de los casos los v√≥xeles positivos quedan unidos dentro de las caras ambiguas, por lo cual se genera un hueco al unir un caso normal con uno complementario (ver Figura 2.7). Montani et al. [MON94] proponen un m√©todo para evitar la aparici√≥n de huecos en la superficie, el cual consiste en modificar la tabla de conectividad del algoritmo original de forma que los v√≥xeles positivos siempre sean separados en las caras ambiguas. Para esto, no se pueden reducir los casos con caras ambiguas mediante complementariedad, sino √∫nicamente por medio de rotaciones y reflexiones. Los casos se pueden clasificar en tres conjuntos diferentes, los cuales se procesan como se indica a continuaci√≥n: 25 ÔÇ∑ No hay m√°s de cuatro v√≥xeles positivos: Se pueden generar mediante rotaciones y reflexiones de los casos existentes en el algoritmo original [LOR87], debido a que los v√©rtices positivos en las caras ambiguas ya se encuentran separados (ver Figura 2.4). ÔÇ∑ Hay m√°s de cuatro v√≥xeles positivos y no hay caras ambiguas: Se pueden generar mediante rotaciones, reflexiones y complementariedad de los casos existentes en el algoritmo original, porque al no existir caras ambiguas se puede aplicar complementariedad libremente. ÔÇ∑ Hay m√°s de cuatro v√≥xeles positivos y hay caras ambiguas: Se deben crear nuevas triangulaciones, debido a que no se puede recurrir a la complementariedad por la existencia de caras ambiguas. Estas triangulaciones nuevas corresponden a los complementos de los casos 3, 6 y 7, los cuales se pueden observar en la Figura 2.9. Figura 2.9: Casos adicionales para prevenir huecos en la superficie. Este m√©todo posee todas las ventajas del algoritmo original, y no conlleva ninguna desventaja adicional, debido a que la tabla de conectividad se conserva del mismo tama√±o (28 = 256) y no se requiere de ning√∫n procesamiento adicional para procesar cada celda. 2.2.1.4. M√âTODO DE DECISI√ìN ASINT√ìTICA PARA CUBOS MARCHANTES Como se mencion√≥ anteriormente, la elecci√≥n entre las dos formas v√°lidas de conectar los v√©rtices en una cara ambigua puede ser totalmente arbitraria siempre y cuando sea consistente a lo largo de todas las celdas. Sin embargo, Nielson y Hamman presentaron el M√©todo de la Decisi√≥n Asint√≥tica (Asymptotic Decider) [NIE91], el cual consiste en elegir entre separar o no separar los v√≥xeles positivos de una cara ambigua en base a la evaluaci√≥n de un punto medio de 26 √©sta por medio de interpolaci√≥n bilineal, de forma tal que la superficie generada sea topol√≥gicamente correcta (ver Secci√≥n 2.2.1.2). La interpolaci√≥n bilineal a trav√©s de una cara es la extensi√≥n natural a realizar interpolaci√≥n lineal a trav√©s de un segmento en dos dimensiones. Despu√©s de realizar un cambio de variables, se puede asumir que el dominio de la cara es un cuadrado unitario ùë†, ùë° 0 ‚â§ ùë†, ùë° ‚â§ 1 , lo cual lleva a la siguiente f√≥rmula para realizar interpolaci√≥n bilineal: ùêµ ùë†, ùë° = 1 ‚àí ùë† ùë† ùêµ0,0 ùêµ0,1 ùêµ1,0 ùêµ1,1 1 ‚àí ùë° ùë° donde ùêµ0,0, ùêµ0,1, ùêµ1,0 y ùêµ1,1 son los isovalores de los v√≥xeles que delimitan la cara ambigua. En la Figura 2.10 se puede observar una gr√°fica que muestra el isovalor de la cara dentro del dominio, donde los ejes ùë† y ùë° representan el dominio de la cara y el eje vertical representa el valor de la funci√≥n ùêπ ùë•, ùë¶, ùëß en la cara. Figura 2.10: Interpolaci√≥n bilineal a trav√©s de la cara. Se puede verificar f√°cilmente que la curva ùë†, ùë° ùêµ ùë†, ùë° = ùõº es una hip√©rbola. Hay varias formas en que el dominio de la cara puede intersectar (o no intersectar) la hip√©rbola, como se puede observar en la Figura 2.11: Figura 2.11: Distintos resultados posibles de intersecci√≥n con la hip√©rbola. 27 Los casos ambiguos se dan cuando el dominio intersecta ambas componentes de la hip√©rbola, en cuyo caso no se puede determinar a priori si los v√≥xeles positivos est√°n dentro de la misma regi√≥n de las hip√©rbolas. Por ejemplo, en la Figura 2.12 se pueden observar dos formas posibles en que el dominio intersecte la hip√©rbola en una cara ambigua. Figura 2.12: Ambas hip√©rbolas posibles de la cara ambigua. Una forma sencilla pero incorrecta de determinar qu√© caso se debe aplicar consiste en evaluar exactamente el punto medio de la cara, y en base a esto decidir si los v√≥xeles positivos deben ser separados o no. Sin embargo, este m√©todo falla en los casos donde el centro del dominio se encuentra dentro de alguna de las hip√©rbolas. En la Figura 2.13 se puede observar claramente que ambos v√≥xeles positivos no deben ser separados dentro del modelo, pero la evaluaci√≥n del punto medio arroja como resultado que √©stos deben ser separados. Figura 2.13: Caso donde evaluar en el centro de la cara (punto verde) da resultados err√≥neos, mientras que evaluar en la intersecci√≥n de las as√≠ntotas (punto anaranjado) da el resultado correcto. La soluci√≥n propuesta por Nielson [NIE91] consiste en determinar si los v√≥xeles positivos est√°n separados o no mediante la evaluaci√≥n de ùêπ ùë•, ùë¶, ùëß en el punto de la cara donde las 28 as√≠ntotas de las hip√©rbolas se intersectan, lo cual siempre arrojar√° el resultado correcto porque √©ste se encuentra fuera de las mismas. El primer paso consiste en buscar las as√≠ntotas ùë†, ùë° ùë† = ùëÜ‚Ñé y ùë†, ùë° ùë° = ùëá‚Ñé , donde: ùëÜ‚Ñé = ùêµ0,0 ‚àí ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 , ùëá‚Ñé = ùêµ0,0 ‚àí ùêµ1,0 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 por lo cual se puede calcular el valor en ùêµ ùëÜùõº , ùëáùõº mediante interpolaci√≥n bilineal: ùêµùëÜ,ùëá = ùêµ ùëÜ‚Ñé , ùëá‚Ñé = ùêµ0,0ùêµ1,1 ‚àí ùêµ1,0ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 Finalmente, para determinar a qu√© caso de la Figura 2.12 corresponde la cara ambigua se compara ùêµùëÜ,ùëá con el valor de corte ùõº (o con 0 si se realiza la transformaci√≥n de Chernyaev [CHE95]): Si ùêµùëÜ,ùëá se encuentra fuera de la superficie (ùêµùëÜ,ùëá < ùõº) entonces los v√≥xeles positivos deben ser separados, en caso contrario (ùêµùëÜ,ùëá ‚â• ùõº) no deben ser separados. Ambos casos se pueden observar en la Figura 2.14. Figura 2.14: Triangulaci√≥n final despu√©s de evaluar la intersecci√≥n de las as√≠ntotas. 2.2.1.5. RESOLUCI√ìN DE LA AMBIG√úEDAD INTERNA En 1995, Chernyaev [CHE95] propone un m√©todo para la resoluci√≥n de la ambig√ºedad interna basado en la variaci√≥n bilineal de ùêπ ùë•, ùë¶, ùëß sobre cualquier plano paralelo a una cara de la celda. Si existen dos √°reas positivas separadas en las caras pero unidas dentro de la celda, 29 entonces existe un plano paralelo a una cara de la celda, donde la cara ambigua formada por la intersecci√≥n de este plano con la celda es una cara no separada (ver Figura 2.15). Figura 2.15: Resoluci√≥n de ambig√ºedad mediante cara paralela. Dados ùê¥0, ùêµ0, ùê∂0 y ùê∑0, que representan los valores de los v√≥xeles de la celda cuando ùë° = 0, y ùê¥1, ùêµ1, ùê∂1 y ùê∑1, que representan los valores de los v√≥xeles de la celda cuando ùë° = 1, se puede verificar f√°cilmente que si las √°reas a resolver son positivas y unen los v√≥xeles ùê¥0 y ùê∂1 entonces: ùê¥0ùê∂0 ‚àí ùêµ0ùê∑0 < 0 (2.1) ùê¥1ùê∂1 ‚àí ùêµ1ùê∑1 < 0 Si las √°reas se encuentran unidas dentro de la celda, entonces existe un ùë° tal que: ùê¥ùë° > 0, ùê∂ùë° > 0, ùê¥ùë°ùê∂ùë° ‚àí ùêµùë°ùê∑ùë° > 0 (2.2) Debido a que funci√≥n ùêπ ùë•, ùë¶, ùëß var√≠a linealmente a trav√©s de las aristas de la celda, se tiene que la cara media est√° definida por: ùê¥ùë° = ùê¥0 + ùê¥1 ‚àí ùê¥0 ùë° (2.3) ùêµùë° = ùêµ0 + ùêµ1 ‚àí ùêµ0 ùë° ùê∂ùë° = ùê∂0 + ùê∂1 ‚àí ùê∂0 ùë° ùê∑ùë° = ùê∑0 + ùê∑1 ‚àí ùê∑0 ùë° Sustituyendo (2.3) en (2.2) se tiene que: 30 ùëéùë°2 + ùëèùë° + ùëê > 0 (2.4) donde: ùëé = ùê¥1 ‚àí ùê¥0 ùê∂1 ‚àí ùê∂0 ‚àí ùêµ1 ‚àí ùêµ0 ùê∑1 ‚àí ùê∑0 ùëè = ùê¥0 ùê∂1 ‚àí ùê∂0 + ùê∂0 ùê¥1 ‚àí ùê¥0 ‚àí ùêµ0 ùê∑1 ‚àí ùê∑0 ‚àí ùê∑0 ùêµ1 ‚àí ùêµ0 ùëê = ùê¥0ùê∂0 ‚àí ùêµ0ùê∑0 Las √°reas positivas est√°n unidas √∫nicamente en el caso donde la par√°bola (2.4) es como la que se muestra en la Figura 2.15: la par√°bola se extiende hacia abajo, el m√°ximo es positivo y se encuentra entre 0 y 1. Estas condiciones se pueden verificar mediante los siguientes pasos: ÔÇ∑ Verificar que ùëé sea negativo, para que la par√°bola est√© dirigida hacia abajo. ÔÇ∑ Calcular el punto donde se alcanza el m√°ximo ùë°ùëöùëéùë• y verificar que se encuentre en el intervalo 0, 1 , donde ùë°ùëöùëéùë• = ‚àíùëè 2ùëé . ÔÇ∑ Verificar que la cara ambigua formada por ùê¥ùë° , ùêµùë° , ùê∂ùë° y ùê∑ùë° cuando ùë° = ùë°ùëöùëéùë• cumple las condiciones establecidas en (2.2). 2.2.2. TETRACUBOS MARCHANTES Una alternativa a resolver las ambig√ºedades inherentes a cubos marchantes consiste en descomponer cada una de las celdas de la malla cartesiana (ver Figura 2.1) en varios tetraedros y triangular cada uno de √©stos independientemente. Este algoritmo es conocido como Tetracubos Marchantes (Marching Tetracubes), el cual fue propuesto por Carneiro et al. [CAR95]. Sin embargo, este m√©todo proporciona un resultado diferente al obtenido mediante el uso de Cubos Marchantes, debido a que se asume interpolaci√≥n lineal a trav√©s de los tetraedros en vez de interpolaci√≥n trilineal con los v√≥xeles originales de la celda. Si se utiliza interpolaci√≥n trilineal en las aristas de los tetraedros vuelven a aparecer las ambig√ºedades [YON95]. 2.2.2.1. DIVISI√ìN DE LA CELDA EN TETRAEDROS El primer paso del algoritmo consiste en dividir cada celda de la malla en tetraedros. Para realizar esto se utiliza una tabla de divisi√≥n, la cual indica los cuatro v√©rtices que delimitan cada 31 uno de los tetraedros a generar a partir de la celda. Es importante que la tabla de divisi√≥n a utilizar cumpla con las siguientes propiedades: ÔÇ∑ La uni√≥n de las regiones de todos los tetraedros generados debe ser exactamente igual a la regi√≥n c√∫bica inicial de la celda. ÔÇ∑ Para cada par de tetraedros ùëá1 y ùëá2, la intersecci√≥n de ùëá1 y ùëá2 debe ser vac√≠a o alguna cara, arista o v√©rtice com√∫n en ùëá1 y ùëá2. ÔÇ∑ Para todo par de celdas adyacentes, la triangulaci√≥n de la cara com√∫n de ambas celdas debe coincidir. Carneiro et. al. [CAR95] proponen el uso de una divisi√≥n de la celda en cinco tetraedros, debido a que se generar√≠a a lo sumo el doble de tri√°ngulos de salida que en cubos marchantes. No obstante, si se aplica la misma tabla de divisi√≥n a todas las celdas se generar√°n conexiones err√≥neas entre celdas adyacentes, como se puede observar en la Figura 2.16. Figura 2.16: Conexi√≥n err√≥nea en cubos adyacentes. Para evitar que este tipo de conexiones ocurran, se debe utilizar una tabla de divisi√≥n para las celdas pares y otra tabla sim√©trica para las celdas impares, como se puede observar en la Figura 2.17. 32 Figura 2.17: Conexi√≥n correcta usando dos tablas de divisiones, una para las celdas oscuras (pares) y otra sim√©trica para las celdas claras (impares). 2.2.2.2. TRIANGULACI√ìN DE UN TETRAEDRO Despu√©s de descomponer cada celda en tetraedros, se procede a triangular cada uno de √©stos por separado para reconstruir la superficie ùëÜùõº . Sin embargo, es necesario redefinir ùêπ ùë•, ùë¶, ùëß para realizar interpolaci√≥n lineal en cada tetraedro de la siguiente forma: ùêπ ùë•, ùë¶, ùëß = ùê¥ùë• + ùêµùë¶ + ùê∂ùëß + ùê∑ Para determinar los valores de ùê¥, ùêµ, ùê∂ y ùê∑, se puede observar que las siguientes ecuaciones se deben cumplir de forma tal que ùêπ ùë•, ùë¶, ùëß aproxime de forma correcta los v√≥xeles que delimitan al tetraedro: ùë•0 ùë¶0 ùëß0 1 ùë•1 ùë¶1 ùëß1 1 ùë•2 ùë¶2 ùëß2 1 ùë•3 ùë¶3 ùëß3 1 ùê¥ ùêµ ùê∂ ùê∑ = ùë£0 ùë£1 ùë£2 ùë£3 donde ùë•ùëñ , ùë¶ùëñ , ùëßùëñ es la posici√≥n del i-√©simo v√≥xel del tetraedro y ùë£ùëñ es el isovalor del mismo (ver Figura 2.18). Como se puede observar, para determinar los coeficientes ùê¥, ùêµ, ùê∂ y ùê∑ se debe resolver un sistema de cuatro ecuaciones con cuatro inc√≥gnitas, el cual tendr√° soluci√≥n √∫nica si y s√≥lo si el tetraedro no es degenerado. 33 Figura 2.18: Tetraedro utilizado para la extracci√≥n de isosuperficies. Debido a que la interpolaci√≥n a lo largo del tetraedro es lineal, la interpolaci√≥n a lo largo de cada arista del tetraedro tambi√©n es lineal, por lo cual la triangulaci√≥n de un tetraedro se puede realizar de forma similar a la triangulaci√≥n de una celda mediante el uso de Cubos Marchantes. El primer paso consiste en determinar cu√°les v√≥xeles del tetraedro se encuentran dentro o fuera de la isosuperficie, con lo cual se construye una m√°scara de 4 bits, donde el i-√©simo bit estar√° encendido si y solo si el isovalor del i-√©simo v√≥xel del tetraedro es mayor o igual que el isovalor ùõº, como se muestra en la Figura 2.19. 34 Figura 2.19: Creaci√≥n de la m√°scara para el tetraedro utilizando ùõº = 0.3, donde cada ùõø representa el isovalor en cada v√©rtice que delimita el tetraedro. Debido a que cada uno de los v√≥xeles tiene dos estados posibles, existe un total de 24 = 16 formas diferentes en que la superficie a extraer puede intersectar el tetraedro. De forma similar a Cubos Marchantes, por medio de rotaciones, simetr√≠a y complementariedad se pueden reducir los diecis√©is casos a tres casos topol√≥gicamente diferentes, los cuales se muestran en la Figura 2.20. Figura 2.20: Posibles intersecciones de la isosuperficie con un tetraedro. El siguiente paso es determinar cu√°les aristas del tetraedro son intersectadas por la superficie y d√≥nde se encuentra el punto de intersecci√≥n. Una arista es intersectada por la superficie si y 35 s√≥lo si uno de sus extremos se encuentra marcado y el otro no. Para determinar el punto ùëÉùë• donde la arista es intersectada por la superficie se puede utilizar interpolaci√≥n lineal sobre la misma de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista, ùë£0 y ùë£1 son los isovalores de la funci√≥n en los extremos de las aristas y ùõº es el umbral de la superficie que se desea extraer. Despu√©s de calcular todos los puntos de intersecci√≥n de la superficie con el tetraedro, se generan los tri√°ngulos utilizando una tabla de conectividad de 16 casos, la cual se indexa utilizando la m√°scara obtenida de la clasificaci√≥n de los v√≥xeles. 2.3. EXTRACCI√ìN DE INTERVALOS DE VOLUMEN Para la visualizaci√≥n de vol√∫menes existen dos t√©cnicas diferentes [FUJ95]: visualizaci√≥n directa de volumen y extracci√≥n de isosuperficies (o DVR 4 y SF 5 , por sus siglas en ingl√©s, respectivamente). Sin embargo, la visualizaci√≥n directa de volumen tiene la desventaja de requerir mucho poder de procesamiento y experiencia por parte del usuario para inicializar la funci√≥n de transferencia. Por otro lado, mediante extracci√≥n de isosuperficies solamente se visualiza una parte del volumen, lo que ocasiona que el usuario no observe la informaci√≥n dentro del contexto. Debido a esto, se introdujo el concepto de extracci√≥n de intervalo de volumen, el cual consiste en el c√°lculo de la parte del volumen dentro del rango ùõº, ùõΩ , la cual se define como: IV ùõº, ùõΩ = ùë•, ùë¶, ùëß ùõº ‚â§ ùêπ ùë•, ùë¶, ùëß ‚â§ ùõΩ , el cual puede ser visualizado de diferentes maneras, dependiendo de la representaci√≥n utilizada por el algoritmo de extracci√≥n. Como se puede observar, este enfoque es una generalizaci√≥n de DVR y SF, debido a que permite visualizar el volumen completo utilizando IV ‚àí‚àû, ‚àû , y tambi√©n permite visualizar la 4 DVR: Direct Volume Rendering. 5 SF: Surface Fitting. 36 isosuperficie ùëÜùõø utilizando IV ùõø, ùõø . Inclusive, se puede visualizar ùëÜùõø utilizando una tolerancia de 2 utilizando IV ùõø ‚àí , ùõø + , lo cual es importante a la hora de trabajar con datos que puedan estar sujetos a peque√±as perturbaciones. Otra ventaja de los intervalos de volumen sobre la extracci√≥n de isosuperficies es el manejo correcto de las celdas con valor constante ùõº, ya que los m√©todos de extracci√≥n de isosuperficies no muestran nada, mientras que al visualizar IV ùõº, ùõº se observar√° toda la celda, y para todo ùõø ‚â† ùõº, al visualizar IV ùõø, ùõø no se observar√° nada. Otra forma de visualizar un subconjunto del volumen equivalente a IV ùõº, ùõΩ consiste en utilizar DVR configurando la opacidad de la funci√≥n de transferencia de forma que el intervalo ùõº, ùõΩ 6 sea completamente transparente. Sin embargo, este procedimiento tiene la desventaja de tener que procesar todo el volumen cuando el punto de vista del usuario cambia, mientras que mediante el uso de intervalos de volumen se ahorra tiempo de procesamiento durante la proyecci√≥n, debido a que s√≥lo se debe recorrer la parte del volumen correspondiente al intervalo de inter√©s. A continuaci√≥n se describir√°n los tres algoritmos principales para la extracci√≥n de intervalos de volumen, el primero est√° basado en triangulaciones de Delaunay y formas alfa, el segundo est√° basado en cubos marchantes y el √∫ltimo en tetracubos marchantes. 2.3.1. EXTRACCI√ìN POR MEDIO DE FORMAS ALFA 7 Este algoritmo fue propuesto por Guo [GUO95], el cual consiste en aproximar el intervalo ùê¥, ùêµ del volumen mediante el uso de una forma alfa ùëÜùõº . A continuaci√≥n, se introducir√°n los complejos de simplices 8 , las formas alfa, y el procedimiento utilizado para la construcci√≥n de √©stas con el fin de aproximar el intervalo ùê¥, ùêµ de un volumen de datos. 6 ùê¥, ùêµ = ùë• ‚àà ‚Ñù ùë• ‚àâ ùê¥, ùêµ [GRA94] 7 ‚ÄúFormas alfa‚Äù viene del t√©rmino en ingl√©s ùõº-shapes. 8 Simplices: plural de simplex. 37 2.3.1.1. COMPLEJOS DE SIMPLICES 9 Un ùëõ-simplex N ÔÅÑ se define como un conjunto de ÔÄ® ÔÄ©1ÔÄ´n puntos en mÔÉÇ , con nm ÔÇ≥ , donde ning√∫n punto puede ser expresado como una combinaci√≥n af√≠n de los dem√°s, es decir: ùõºùëó ùëõ ùëó =0 ùëó‚â†ùëñ = 1 ‚àß ùõºùëóŒîùëÅ,ùëó = Œ±i ùëõ ùëó=0 ùëó‚â†ùëñ ùõº ‚àà ‚Ñúùëõ+1 ùëñ ‚àà 0,1,‚ãØ,ùëõ Por ejemplo, un 0-simplex es un punto, un 1-simplex es una l√≠nea, un 2-simplex es un tri√°ngulo, un 3-simplex es un tetraedro, y as√≠ sucesivamente. La frontera de un ùëõ-simplex ŒîùëÅ se define como el conjunto de todos los ùëò-simplices Œîùêæ, tal que ùëò < ùëõ y todos los puntos de Œîùêæ se encuentran en ŒîùëÅ, es decir: boundary ŒîùëÅ = Œîùêæ Œîùêæ ‚äÇ ŒîùëÅ Por ejemplo, la frontera de un tetraedro est√° compuesta por 4 tri√°ngulos, 6 l√≠neas y 4 puntos, y la frontera de un tri√°ngulo est√° compuesta por 3 l√≠neas y 3 puntos. Sea ùê∂ un conjunto de simplices de distintas dimensiones, ùê∂ es un complejo de simplices si y s√≥lo si se cumplen las siguientes condiciones: ÔÇ∑ Para cada simplex Œîùëá ‚àà ùê∂, la frontera de Œîùëá se encuentra en ùê∂. ÔÇ∑ Para todo par de simplices Œîùëá1, Œîùëá2 donde Œîùëá1, Œîùëá2 ‚àà ùê∂, su intersecci√≥n se encuentra en la frontera de Œîùëá1 y en la frontera de Œîùëá2. El espacio subyacente ùê∂ de un complejo de simplices ùê∂ es la uni√≥n de todos los simplices contenidos en ùê∂, y un complejo de simplices ùê∂‚Ä≤ es un subcomplejo de ùê∂ si y solo si ùê∂‚Ä≤ ‚äÇ ùê∂. 2.3.1.2. FORMAS ALFA Sea ùëÜ un conjunto de puntos en ‚Ñúùëõ , Edelsbrunner y Mucke [EDE94] definen la familia de formas alfa ùëÜùõº 0 < ùõº ‚â§ ‚àû en base a una familia de subcomplejos de la triangulaci√≥n de 9 ‚ÄúComplejos de simplices‚Äù viene del t√©rmino en ingl√©s simplicial complexes. 38 Delaunay D ùëÜ , de los cuales se derivan √©stas como los espacios subyacentes de dichos subcomplejos. Para un ùëõ-simplex Œîùëá , sea ùëÇùëá la esfera cerrada m√°s peque√±a cuya frontera contenga Œîùëá . Los complejos alfa ùê∂ùõº 0 < ùõº ‚â§ ‚àû est√°n compuestos por los siguientes elementos: (a) todos los elementos Œîùëá ‚àà D ùëÜ , tal que la esfera Oùëá de Œîùëá tenga radio estrictamente menor que ùõº y no haya punto de ùëÜ dentro de la esfera abierta 10 limitada por ùëÇùëá, y (b) la frontera de todos los elementos descritos en (a). Finalmente, se define para cada ùõº (0 ‚â§ ùõº ‚â§ ‚àû) la forma alfa ùëÜùõº como el espacio subyacente del complejo ùê∂ùõº , es decir, ùëÜùõº = ùê∂ùõº . Por ejemplo, dado un conjunto de puntos ùëÜ en ‚Ñú3, la forma ùëÜùõº consiste en la triangulaci√≥n de Delaunay D ùëÜ , donde los tetraedros cuyas esferas tienen radio mayor o igual a ùõº son sustituidos por las cuatro caras triangulares que los delimitan. Luego, aquellos tri√°ngulos cuyas esferas tienen radio mayor o igual a ùõº son sustituidos por las tres l√≠neas que los delimitan, y as√≠ sucesivamente hasta llegar a los v√©rtices. 2.3.1.3. CONSTRUCCI√ìN DE LAS FORMAS ALFA La construcci√≥n de una forma alfa ùëÜùõº para aproximar el intervalo ùê¥, ùêµ de un volumen de datos se realiza en tres pasos: evaluar el volumen para generar un conjunto de puntos ùëÜ en el intervalo ùê¥, ùêµ , construir la triangulaci√≥n de Delaunay D ùëÜ y generar el complejo ùê∂ùõº cuyo espacio subyacente ùê∂ùõº sea ùëÜùõº . El conjunto S de puntos a utilizar incluye todas aquellas muestras ùëâùëñ,ùëó ,ùëò del volumen que se encuentren dentro del rango ùê¥, ùêµ . Sin embargo, este conjunto no permite la construcci√≥n de los bordes del intervalo, por lo cual se a√±aden los puntos de las isosuperficies ùëÜùê¥ y ùëÜùêµ , donde: ùëÜùê¥ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùê¥ ùëÜùêµ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùêµ los cuales se calculan de forma similar a como se calculan los v√©rtices de una isosuperficie mediante el uso de Cubos Marchantes. En la Figura 2.21 se pueden observar los puntos 10 Una esfera abierta con centro ùê∂ y radio ùëü de define como todos aquellos puntos cuya distancia a ùê∂ es estrictamente menor que ùëü. 39 pertenecientes a ùëÜ en un mallado bidimensional, junto con la aproximaci√≥n del borde del intervalo de volumen mediante l√≠neas. Figura 2.21: Mallado bidimensional a procesar mediante formas alfa, los puntos pertenecientes a ùëÜ se muestran con puntos rojos, y la aproximaci√≥n del borde del intervalo de volumen mediante el uso de simplices se muestra con l√≠neas negras. Despu√©s de calcular los puntos pertenecientes a ùëÜ, se procede a calcular la triangulaci√≥n de Delaunay D ùëÜ , lo cual se puede realizar utilizando cualquier algoritmo existente para este prop√≥sito. No obstante, se debe preprocesar la nube de puntos para que se encuentre en posici√≥n general, es decir, no deben existir cuatro o m√°s puntos coplanares ni deben existir cinco o m√°s puntos en la frontera de la misma esfera. Sin embargo, cuando se trabaja con mallas cartesianas uniformes regulares, la nube de puntos ùëÜ generalmente contiene m√∫ltiples grupos de puntos coplanares, espec√≠ficamente todos aquellos pertenecientes a un mismo corte cuyos isovalores se encuentren dentro del rango ùê¥, ùêµ . Para solucionar esto, se puede utilizar una t√©cnica llamada Simulaci√≥n de Simplicidad 11 [EDE90], la cual consiste en perturbar la nube de puntos infinitesimalmente con el objetivo de llevar √©sta a posici√≥n general. Una vez que se tiene la triangulaci√≥n de Delaunay D ùëÜ , la tarea principal para la extracci√≥n de ùëÜùõº consiste en elegir un valor ùõº apropiado para la generaci√≥n del volumen. En general, a medida que ùõº disminuye, las caracter√≠sticas gruesas del volumen son sustituidas por caracter√≠sticas m√°s finas. Sin embargo, despu√©s que ùõº disminuye debajo de cierto valor ùõº , 11 Tambi√©n llamado SoS, por sus siglas en ingl√©s (Simulation of Simplicity). 40 empiezan a aparecer cavidades en ùëÜùõº , lo cual es indeseable debido a que el intervalo debe ser representado principalmente por tetraedros. Para determinar el valor de ùõº , se analizar√° el complejo alfa ùê∂ùõº en un cubo unitario. Los elementos incluidos en ùê∂ùõº dependen de las siguientes condiciones: ÔÇ∑ Si ùõº > 0, existen esferas con radio positivo tal que contengan cada v√©rtice del cubo, por lo cual los ocho v√©rtices del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 1 2 , existen esferas con radio menor que ùõº que contienen cada arista del cubo, por lo cual las doce aristas del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 2 2 , existen esferas con radio menor que ùõº que contienen cada cara del cubo, por lo cual los doce tri√°ngulos que componen las caras del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 3 2 , existe una esfera con radio menor que ùõº que contiene el cubo, por lo cual los seis tetraedros que componen al cubo pertenecen a ùê∂ùõº . En consecuencia, para un cubo unitario se tiene que ùõº = 3 2 + , donde es un valor muy peque√±o, cuyo objetivo es prevenir que errores de redondeo ocasionen la aparici√≥n de cavidades dentro del modelo. Luego, para un cubo de lado ùëë se tiene que ùõº = 3 2 + ùëë, debido a que todas las primitivas analizadas anteriormente tambi√©n son escaladas en la misma proporci√≥n que el cubo con relaci√≥n al cubo unitario. Finalmente, se calcula y visualiza ùëÜùõº , la cual representar√° el intervalo ùê¥, ùêµ del volumen. 2.3.2. EXTRACCI√ìN POR MEDIO DE CUBOS MARCHANTES En 1995, Fujishiro, Maeda y Sato [FUJ95] publicaron un m√©todo para la extracci√≥n de intervalos de volumen, el cual consiste en una adaptaci√≥n de cubos marchantes para extraer un mallado triangular que encierre aquellas partes del volumen que se encuentren dentro del intervalo ùõº, ùõΩ a extraer. De forma similar a como se realiza en cubos marchantes, la extracci√≥n del intervalo se realiza celda por celda independientemente. 41 A continuaci√≥n, se explicar√°n las consideraciones locales y globales que se deben tomar en cuenta al momento de la extracci√≥n del intervalo de volumen ùõº, ùõΩ mediante esta t√©cnica. 2.3.2.1. EXTRACCI√ìN LOCAL DEL INTERVALO DE VOLUMEN Para extraer los tri√°ngulos de la celda que representen el intervalo ùõº, ùõΩ , se puede adaptar Cubos Marchantes de dos formas diferentes. La primera, consiste en clasificar cada uno de los v√≥xeles utilizando la comparaci√≥n entre su isovalor ùõøùëñ y el intervalo ùõº, ùõΩ de la siguiente manera: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ Por ejemplo, en la Figura 2.22 se puede observar una celda con los isovalores de cada v√≥xel, as√≠ como la clasificaci√≥n de cada uno de ellos. Despu√©s de clasificar los v√≥xeles de la celda, se puede construir un √≠ndice mediante la interpretaci√≥n de las clases de los v√≥xeles en base-3, el cual se utiliza para acceder a una tabla de conectividad de 38 = 6561 casos, de donde se obtendr√°n los tri√°ngulos a generar a partir de la celda. Para la resoluci√≥n de ambig√ºedades se pueden aplicar las mismas t√©cnicas aplicadas en cubos marchantes [NIE91][CHE95]. 42 Figura 2.22: Clasificaci√≥n de celda en base a los isovalores en sus v√≥xeles, donde cada ùõø representa el isovalor en cada v√©rtice que delimita la celda. Sin embargo, se pueden aprovechar las operaciones de conjuntos para simplificar la cantidad de casos a tomar en cuenta, mediante la expresi√≥n del intervalo ùõº, ùõΩ como la intersecci√≥n de los intervalos ùõº, ‚àû y ùõº , ùõΩ , es decir: IV ùõº, ùõΩ = IV ‚àí‚àû, ùõΩ ‚à© IV ùõº, ‚àû Para representar los intervalos de volumen IV ùõº, ‚àû y IV ‚àí‚àû, ùõΩ se utilizan poliedros, tambi√©n llamados cubos-ùõº y cubos-ùõΩ, respectivamente. Esto permite simplificar la extracci√≥n del intervalo en cada celda a √∫nicamente 28 = 256 casos, debido a que cada uno de los v√≥xeles s√≥lo tendr√° dos clasificaciones posibles, dentro del intervalo o fuera de √©ste. Para extraer el cubo-ùõº de una celda del volumen, se modifica la tabla de casos de Cubos Marchantes para extraer la subregi√≥n positiva de la celda cuya frontera es la isosuperficie ùëÜùõº , la cual se determina en base a los isovalores de los v√≥xeles de la celda. Para extraer el cubo-ùõΩ se realiza el mismo procedimiento, pero extrayendo la subregi√≥n negativa de la celda cuya frontera es ùëÜùõΩ . En la Figura 2.23 se pueden observar los poliedros generados para algunas configuraciones de los isovalores de las celdas. 43 Figura 2.23: Algunas configuraciones posibles durante la extracci√≥n de los cubos-ùõº (izquierda) y los cubos-ùõΩ (derecha). En el caso general donde ùõº < ùõΩ, la intersecci√≥n de los cubos-ùõº y los cubos-ùõΩ de las celdas no es vac√≠a, siempre y cuando √©sta sea intersectada por el intervalo a extraer (ver Figura 2.24). Debido al teorema del valor medio, se pueden determinar los siguientes hechos: ÔÇ∑ Entre un v√≥xel negativo y uno positivo existir√° un punto con valor ùõº y otro con valor ùõΩ. ÔÇ∑ Entre un v√≥xel negativo y un v√≥xel neutro existir√° un punto con valor ùõº. ÔÇ∑ Entre un v√≥xel positivo y un v√≥xel neutro existir√° un punto con valor ùõΩ. Para calcular la posici√≥n de los puntos donde el cubo- ùõº o el cubo- ùõΩ intersectan las aristas de la celda se realiza un procedimiento similar al utilizado en cubos marchantes. El punto ùëÉùê∏ ùõø donde una arista ùê∏ tiene valor ùõø est√° dado por: ùëÉùê∏ ùõø = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõø ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista ùê∏, y ùë£0 y ùë£1 son los isovalores de los v√≥xeles en los extremos de la arista ùê∏. Tambi√©n se pueden calcular los valores de otros atributos ùëãùê∏ ùõø en el punto ùëÉùê∏ ùõø de la siguiente manera: ùëãùê∏ ùõø = ùëã0 + ùëã1 ‚àí ùëã0 ùõø ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëã0 y ùëã1 son los valores del atributo en los extremos de la arista ùê∏. 44 Figura 2.24: Caso general donde ùõº < ùõΩ. La zona de color rojo pertenece √∫nicamente al cubo- ùõº, la zona de color azul pertenece √∫nicamente al cubo- ùõΩ, y la zona de color violeta pertenece a ambos cubos. Los bordes del pol√≠gono extra√≠do de la celda se encuentran resaltados. Para verificar que este enfoque es una generalizaci√≥n de la extracci√≥n de isosuperficies, se puede observar si ùõº = ùõΩ, la intersecci√≥n del cubo- ùõº y del cubo- ùõΩ en cada celda ser√° igual a la isosuperficie ùëÜùõº = ùëÜùõΩ , como se puede observar en la Figura 2.25. Figura 2.25: Caso especial donde ùõº = ùõΩ. La zona de color rojo pertenece √∫nicamente al cubo- ùõº, la zona de color azul pertenece √∫nicamente al cubo- ùõΩ, y el pol√≠gono extra√≠do se encuentra resaltado. 2.3.2.2. EXTRACCI√ìN GLOBAL DEL INTERVALO DE VOLUMEN A diferencia de cubos marchantes, es importante tener en cuenta la posici√≥n de la celda en el volumen al momento de la extracci√≥n del intervalo en √©sta. Esto se debe a que los bordes de las celdas son incluidos al momento de realizar la intersecci√≥n de los cubos- ùõº y cubos- ùõΩ, lo que ocasiona que en el mallado final existan aristas compartidas por m√°s de dos tri√°ngulos. 45 Para solucionar esto, se deben ignorar aquellas caras de los poliedros extra√≠dos de la intersecci√≥n de los cubos- ùõº y los cubos- ùõΩ que se encuentren alineados a alguna de las caras de las celdas que no den al exterior del volumen (ver Figura 2.26). Las caras de los poliedros que dan al exterior no son ignoradas, de forma tal que el mallado generado sea cerrado. Figura 2.26: Intervalo de volumen en celdas adyacentes. Las l√≠neas negras representan las caras del poliedro final, y la l√≠nea anaranjada entre las dos caras representa la cara interna ignorada en el mallado final. 2.3.3. EXTRACCI√ìN POR MEDIO DE TETRACUBOS MARCHANTES En 1997, Nielson y Sung [NIE97b] publicaron un m√©todo para la extracci√≥n de intervalos de volumen, el cual consiste en una adaptaci√≥n de tetracubos marchantes para extraer un mallado tetra√©drico que aproxime aquellas partes del volumen que se encuentren dentro del intervalo ùõº, ùõΩ a extraer. De forma similar a como se realiza en tetracubos marchantes, la extracci√≥n del intervalo se realiza celda por celda. Los pasos a seguir para la extracci√≥n del mallado tetra√©drico mediante esta t√©cnica se pueden observar en la Figura 2.27. Primero, el algoritmo procesa el volumen como un conjunto de celdas independientes, las cuales son divididas en varios tetraedros, dentro de los cuales se asume que los valores var√≠an linealmente. La divisi√≥n de cada celda en tetraedros se realiza de la misma manera como se realiza en tetracubos marchantes (ver Secci√≥n 2.2.2.1). Despu√©s de dividir la celda en tetraedros, para cada uno de estos se calculan aquellos puntos de las aristas donde estas se eval√∫an a ùõº o ùõΩ y aquellos v√≥xeles que se encuentran dentro del intervalo. Una vez calculados 46 estos puntos se obtiene un poliedro- ùõºùõΩ, el cual posteriormente es dividido en uno o m√°s tetraedros de salida. Figura 2.27: Pasos necesarios para la tetraedrizaci√≥n de un intervalo de volumen. A continuaci√≥n, se describir√° el proceso para la extracci√≥n del poliedro- ùõºùõΩ a partir del tetraedro de entrada, as√≠ como el proceso para dividir el poliedro- ùõºùõΩ obtenido en tetraedros de salida. 2.3.3.1. EXTRACCI√ìN DEL POLIEDRO ALFA-BETA Esta secci√≥n explica el procedimiento que se debe llevar a cabo para la extracci√≥n del poliedro- ùõºùõΩ a partir de un tetraedro de entrada. Como se mencion√≥ anteriormente, se asume que se tiene el valor de la funci√≥n ùêπ ùë•, ùë¶, ùëß en los v√©rtices del tetraedro y que los valores internos se 47 obtienen mediante el uso de interpolaci√≥n lineal, de la misma forma como se realiza en tetracubos marchantes (ver Secci√≥n 2.2.2.2). El primer paso que se debe llevar a cabo es la clasificaci√≥n de cada uno de los v√©rtices del tetraedro en base a su isovalor de la siguiente manera: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ donde ùõøùëñ es el isovalor del v√©rtice a preprocesar. Figura 2.28: Casos posibles durante la extracci√≥n del poliedro- ùõºùõΩ a partir del tetraedro. Los v√©rtices rojos se encuentran por debajo de ùõº (negativos), los v√©rtices azules se encuentran por arriba de ùõΩ (positivos) y los v√©rtices violetas se encuentran dentro del intervalo a extraer (neutros). Una vez clasificados los v√©rtices del tetraedro, se construye un √≠ndice entero mediante la interpretaci√≥n de las clasificaciones de los v√©rtices como d√≠gitos en base-3, lo cual genera un total de 34 = 81 casos. Sin embargo, dos tetraedros son equivalentes por medio de rotaciones y 48 reflexiones si poseen la misma cantidad de v√©rtices de cada clase, debido a que todos √©stos se encuentran conectados entre s√≠ por medio de aristas. Esto nos permite reducir el total de casos a 15, los cuales se pueden observar en la Figura 2.28, donde el primer d√≠gito del caso indica la cantidad de v√©rtices negativos (clase ‚àí1), el segundo d√≠gito indica la cantidad de v√©rtices neutros (clase 0) y el tercer d√≠gito indica la cantidad de v√©rtices positivos (clase +1). Es importante observar que los poliedros- ùõºùõΩ generados en cada caso son convexos y poseen caras planas, debido a que la interpolaci√≥n dentro del tetraedro es lineal. Esto facilita la tetraedrizaci√≥n del poliedro en el siguiente paso. 2.3.3.2. TETRAEDRIZACI√ìN DEL POLIEDRO ALFA-BETA En esta secci√≥n se explicar√° el procedimiento que se debe llevar a cabo para descomponer el poliedro- ùõºùõΩ de cada celda en tetraedros. Es importante destacar que los poliedros- ùõºùõΩ son tetraedrizables, debido a que √©stos son convexos [NIE97a]. Sin embargo, si no se toman medidas especiales al llevar a cabo la tetraedrizaci√≥n de cada poliedro, puede ocurrir que la tetraedrizaci√≥n de un poliedro no coincida con la de otro poliedro adyacente, lo cual sucede cuando en la cara compartida por los poliedros se elije una triangulaci√≥n de un lado y otra triangulaci√≥n diferente en el otro (ver Figura 2.29). Figura 2.29: Posibles tetraedrizaciones alrededor de la cara roja, la cual es compartida por dos poliedros diferentes. A la izquierda se muestra la tetraedrizaci√≥n correcta, a la derecha se muestra la incorrecta. Para solucionar este problema, se debe establecer un m√©todo para escoger de forma consistente la triangulaci√≥n a utilizar en cada cara del poliedro. Nielson [NIE97b] propone utilizar la regla de conexi√≥n por √≠ndices (index connection rule), para lo cual es necesario 49 establecer una relaci√≥n de orden total entre los v√©rtices del mallado final. Sea ùëâ el conjunto de v√©rtices del mallado final, una relaci√≥n de orden total sobre ùëâ consiste en un predicado ùúå ùë¢, ùë£ que permita comparar cada par de v√©rtices ùë¢, ùë£ ùëâ, con el fin de determinar si el v√©rtice ùë¢ precede a ùë£. Este predicado debe cumplir las siguientes propiedades: ÔÇ∑ Propiedad reflexiva: Para todo v√©rtice ùë£, el predicado ùúå debe indicar que ùë£ precede a ùë£, es decir: ùúå ùë£, ùë£ ùë¢ ,ùë£ ‚ààùëâ ÔÇ∑ Propiedad antisim√©trica: Para todo par de v√©rtices ùë¢, ùë£ ‚àà ùëâ, si ùë¢ precede a ùë£ y v precede a ùë¢, entonces ùë¢ debe ser igual a v , es decir: ùúå ùë¢, ùë£ ‚àß ùúå ùë£, ùë¢ ‚üπ ùë¢ = ùë£ ùë¢ ,ùë£ ‚ààùëâ ÔÇ∑ Propiedad transitiva: Para todo tr√≠o de v√©rtices ùë¢, ùë£, ùë§ ‚àà ùëâ, si ùë¢ precede a ùë£ y ùë£ precede a ùë§, entonces ùë¢ debe preceder a ùë§, es decir: ùúå ùë¢, ùë£ ‚àß ùúå ùë£, ùë§ ‚üπ ùúå ùë¢, ùë§ ùë¢ ,ùë£,ùë§ ‚àà ùëâ ÔÇ∑ Propiedad de orden total: Para todo par de v√©rtices ùë¢, ùë£ ‚àà ùëâ, ùë¢ precede a ùë£ o ùë£ precede a ùë¢, es decir: ùúå ùë¢, ùë£ ‚à® ùúå ùë£, ùë¢ ùë¢ ,ùë£ ‚ààùëâ Sea ùëä ‚äÜ ùëâ tal que ùëä ‚â† ‚àÖ y sea ùë¢ ‚àà ùëä, ùë¢ es un elemento minimal de ùëä si y solo si no existe otro elemento ùë£ ‚àà ùëä tal que ùë£ ‚â† ùë¢ y ùë£ preceda a ùë¢, es decir: ùúå ùë£, ùë¢ ùë£ ‚ààùëâ ùë£ ‚â†ùë¢ 50 Debido a la propiedad de orden total ùëä s√≥lo posee un elemento minimal, debido a que si existieran dos elementos ùë¢, ùë£ ‚àà ùëä entonces ùë¢ no debe preceder a ùë£ y ùë£ no debe preceder a ùë¢, lo cual contradice la propiedad de orden total del predicado ùúå. Despu√©s de establecer el predicado de ordenamiento, √©ste se utiliza para determinar un√≠vocamente la triangulaci√≥n a utilizar en cada cara de cada poliedro- ùõºùõΩ, independientemente del poliedro al que pertenezca. Como se puede observar en la Figura 3.8, s√≥lo existen tres tipos de cara a procesar: tri√°ngulos, cuadril√°teros y pent√°gonos, los cuales se triangulan de la siguiente manera (ver Figura 2.30): ÔÇ∑ Tri√°ngulos: En este caso no existe ning√∫n problema, debido a que s√≥lo hay una triangulaci√≥n posible. ÔÇ∑ Cuadril√°teros: Se elige aquella triangulaci√≥n donde se utiliza la diagonal entre el menor v√©rtice y su v√©rtice opuesto. ÔÇ∑ Pent√°gonos: En la Figura 2.28 se puede observar que todas las caras pentagonales de los poliedros- ùõºùõΩ tienen un v√©rtice neutro, por lo cual se divide con la triangulaci√≥n que utiliza las diagonales entre este v√©rtice y sus v√©rtices opuestos. Figura 2.30: Regla de conexi√≥n por √≠ndices para cuadril√°teros (izquierda) y para pent√°gonos (derecha). A continuaci√≥n, se analizar√°n cada uno de los casos posibles para las triangulaciones de cada tipo de poliedro en la Figura 3.8, los cuales se clasifican como tetraedros, prismas, cristales y cubos. 51 A. TETRAEDROS En los casos 040, 310 y 013 el poliedro- ùõºùõΩ es un tetraedro, el cual consiste en un poliedro de cuatro v√©rtices con cuatro tri√°ngulos. En estos casos, no es necesario ning√∫n procesamiento o an√°lisis adicional, debido a que √©ste no debe ser dividido. B. PRISMAS En los casos 031, 022, 103, 130, 220 y 301 el poliedro- ùõºùõΩ es un prisma, el cual consiste en un poliedro de seis v√©rtices, con dos tri√°ngulos opuestos y tres cuadril√°teros. Para cada prisma existe un total de 23 = 8 tetraedrizaciones posibles, de las cuales solo seis son v√°lidas. Figura 2.31: Posibles divisiones para un prisma. Las configuraciones 000 y 111 no son tetraedrizables. IZQ, ATR y DER indican la direcci√≥n de la tetraedrizaci√≥n a utilizar para la cara izquierda, trasera y derecha, respectivamente. Como se puede observar en la Figura 2.31, en las seis configuraciones v√°lidas se puede dividir el prisma en tres tetraedros de salida. Adem√°s, las dos configuraciones inv√°lidas no ocurren al aplicar la regla de conexi√≥n por √≠ndices, debido a que esos casos no son consistentes con la propiedad transitiva del predicado de ordenamiento ùúå. C. CRISTALES En los casos 121, 112 y 211 el poliedro- ùõºùõΩ es un cristal, el cual consiste en un poliedro de ocho v√©rtices con dos tri√°ngulos opuestos, dos cuadril√°teros y dos pent√°gonos. Para este tipo de poliedros, primero se procede a descomponerlo en un tetraedro y dos pir√°mides de base cuadrada utilizando la regla de conexi√≥n por √≠ndices en los pent√°gonos, como se muestra en la Figura 2.32. 52 Luego, cada pir√°mide puede ser dividida en dos tetraedros utilizando la regla de conexi√≥n por √≠ndices en cada cuadril√°tero. Figura 2.32: Posibles divisiones de un cristal en dos pir√°mides y un tetraedro. D. CUBOS En el caso 202 el poliedro- ùõºùõΩ tiene forma de cubo, que consiste en ocho v√©rtices unidos por seis cuadril√°teros opuestos entre s√≠. Debido a que el cubo se encuentra compuesto por seis cuadril√°teros, existe un total de 26 = 64 triangulaciones de las caras. Para verificar que todas las triangulaciones de las caras generadas por la regla de conexi√≥n por √≠ndices son tetraedrizables, se analizar√° caso por caso en base a los dos menores v√©rtices del cubo, los cuales ser√°n identificados con 1 y 2 en las Figuras 2.33, 2.34 y 2.35. El primer caso es cuando los v√©rtices 1 y 2 se encuentran en esquinas opuestas del cubo. En este caso, cada una de las caras del poliedro contiene exactamente uno de los v√©rtices m√≠nimos, por lo que las diagonales a utilizar se encuentran definidas. En la Figura 2.33 se puede observar la divisi√≥n del cubo en seis tetraedros. 53 Figura 2.33: Divisi√≥n de un cubo cuando los dos v√©rtices se encuentran en esquinas opuestas del cubo. El segundo caso es cuando los v√©rtices 1 y 2 se encuentran en esquinas opuestas de la misma cara del cubo. En este caso, todas las caras tienen el menor v√©rtice definido, excepto la opuesta a la cara con los v√©rtices m√≠nimos, por lo cual quedan dos casos por verificar (ver Figura 2.34). En el primer caso, se puede dividir el cubo en cinco tetraedros, y en el segundo caso, se puede dividir el cubo en seis tetraedros. Figura 2.34: Divisi√≥n de un cubo cuando los dos menores v√©rtices se encuentran en una misma cara de √©ste. Finalmente, el √∫ltimo caso es cuando los v√©rtices 1 y 2 se encuentran en la misma arista del cubo. En este caso, quedan cuatro casos por considerar, debido a que la regla de conexi√≥n por √≠ndice permite establecer la triangulaci√≥n de cuatro caras del cubo. En la Figura 2.35 se pueden observar las divisiones del cubo en seis tetraedros para los cuatro casos restantes. 54 Figura 2.35: Divisi√≥n de un cubo cuando los dos v√©rtices m√≠nimos est√°n en una misma arista de √©ste. 2.4. M√âTRICAS DE CALIDAD La raz√≥n principal para el uso de mallados de tri√°ngulos y tetraedros a la hora de trabajar con vol√∫menes de datos tridimensionales es que facilita su visualizaci√≥n y permite realizar simulaciones sobre partes de ellas sin la necesidad de tener que manipular todo el volumen. Muchos de los procedimientos utilizados para llevar a cabo visualizaciones o simulaciones sobre mallados triangulares implican procedimientos matem√°ticos que requieren que los tri√°ngulos a procesar posean formas regulares y no tengan degeneraciones. Por ejemplo, para visualizar la isosuperficie utilizando el modelo de sombreado Gouraud se realiza interpolaci√≥n trilineal para calcular el color dentro del tri√°ngulo, por lo cual es preferible maximizar el m√≠nimo √°ngulo interno de cada tri√°ngulo, de forma que el error generado por el modelo de iluminaci√≥n sea minimizado. Debido a esto, se han dise√±ado e implementado diversas m√©tricas para evaluar la calidad de tri√°ngulos y tetraedros [STI07]. En este trabajo, s√≥lo se tomar√°n en cuenta aquellas m√©tricas que permitan la evaluaci√≥n de los elementos de un mallado independientemente, sin necesidad de otro mallado de referencia. 55 Las m√©tricas utilizadas para evaluar la calidad de las primitivas se pueden clasificar en dos tipos diferentes: propias y no propias. Las m√©tricas propias consisten en un valor real sin unidad, el cual es igual a uno (1) para subregiones ideales ‚Äì un tri√°ngulo equil√°tero con √°rea unitaria o un tetraedro regular con volumen unitario ‚Äì y tiende a infinito (‚àû) para elementos degenerados o de baja calidad, como por ejemplo, un tri√°ngulos con aristas cuyas longitudes difieren significativamente o un elemento con un par de v√©rtices iguales. Las m√©tricas no propias consisten en valores reales con unidad, como por ejemplo, longitudes, √°ngulos, √°reas o vol√∫menes, cuyo valor ideal depende de la m√©trica. A continuaci√≥n, se describir√°n las m√©tricas m√°s importantes a la hora de evaluar la calidad de tri√°ngulos y tetraedros. La descripci√≥n de cada m√©trica incluye la explicaci√≥n del factor que eval√∫a, la forma de calcularla, posibles casos de borde, el rango donde se considera que el elemento es de buena calidad, as√≠ como el rango donde se considera que el elemento es degenerado o de baja calidad, los cuales fueron extra√≠dos de [STI07]. Luego, se describe c√≥mo evaluar la calidad de un conjunto de primitivas en base a la calidad de cada una de las primitivas. 2.4.1. M√âTRICAS DE CALIDAD PARA TRI√ÅNGULOS Las m√©tricas descritas en esta secci√≥n est√°n definidas sobre un elemento triangular como el que se muestra a continuaci√≥n en la Figura 2.36. Figura 2.36: Elemento triangular utilizado para describir las m√©tricas de calidad. 56 A continuaci√≥n se definir√°n varios elementos del tri√°ngulo, lo cual facilitar√° la descripci√≥n de las m√©tricas a evaluar. En todas las definiciones y m√©tricas descritas a continuaci√≥n, si el √≠ndice de un punto o arista del tri√°ngulo se encuentra fuera de ÔÅª ÔÅΩ2,1,0 , se tomar√° el resto de dividir √©ste entre tres, lo cual facilita la expresi√≥n de algunas ecuaciones en las m√©tricas. Las aristas del tri√°ngulo se encuentran definidas de la siguiente manera: ùêø0 = ùëÉ2 ‚àí ùëÉ1, ùêø1 = ùëÉ0 ‚àí ùëÉ2, ùêø2 = ùëÉ1 ‚àí ùëÉ0 Las longitudes de las aristas del tri√°ngulo se definen de la siguiente manera: ùêø0 = ùêø0 , ùêø1 = ùêø1 , ùêø2 = ùêø2 y las longitudes de la arista m√°s peque√±a y m√°s grande son, respectivamente: ùêøùëöùëñùëõ = min ùêø0, ùêø1, ùêø2 , ùêøùëöùëéùë• = max ùêø0, ùêø1, ùêø2 El √°rea de un tri√°ngulo es la mitad de la magnitud del producto cruz de cualquier par de aristas adyacentes: ùê¥ = 1 2 ùêø0 √ó ùêø1 = 1 2 ùêø1 √ó ùêø2 = 1 2 ùêø2 √ó ùêø0 Adem√°s, se define ùëü como el radio del c√≠rculo inscrito y ùëÖ como el radio del c√≠rculo circunscrito del tri√°ngulo, los cuales tambi√©n son llamados radio interno y radio circunscrito: ùëü = 2ùê¥ ùêø0 + ùêø1 + ùêø2 , ùëÖ = ùêø0ùêø1ùêø2 2ùëü ùêø0 + ùêø1 + ùêø2 = ùêø0ùêø1ùêø2 4ùê¥ 2.4.1.1. RELACI√ìN DE ASPECTO La relaci√≥n de aspecto de un tri√°ngulo representa la proporcionalidad que tiene respecto a su ancho y alto. Para calcular la relaci√≥n de aspecto de un tri√°ngulo se divide la longitud de la arista m√°s larga entre el radio del c√≠rculo inscrito. Sin embargo, el valor se normaliza de forma tal que un tri√°ngulo equil√°tero de √°rea unitaria tenga ùëû = 1. 57 ùëû = ùêøùëöùëéùë• 2 3ùëü = ùêøùëöùëéùë• ùêø0 + ùêø1 + ùêø2 4 3ùê¥ La relaci√≥n de aspecto del tri√°ngulo ùëû se encuentra dentro del rango 1 , ‚àû , y se considera que un tri√°ngulo es de buena calidad si √©sta se encuentra dentro del rango 1, 1.3 . 2.4.1.2. PROPORCI√ìN DE ARISTAS La proporci√≥n de las aristas se calcula como: ùëû = ùêøùëöùëéùë• ùêøùëöùëñùëõ La proporci√≥n de las aristas ùëû se encuentra en el rango 1 , ‚àû . Un tri√°ngulo se considera de buena calidad si √©sta se encuentra en el rango 1, 1.3 . 2.4.1.3. PROPORCI√ìN DE RADIOS La proporci√≥n de los radios de un tri√°ngulo se calcula como: ùëû = ùëÖ 2ùëü donde ùëü y ùëÖ son los radios inscritos y circunscritos del tri√°ngulo a evaluar. La proporci√≥n de los radios de un tri√°ngulo ùëû se encuentra en el rango 1 , ‚àû . Sin embargo, un tri√°ngulo s√≥lo se considerar√° de buena calidad si su proporci√≥n de radios se encuentra en el rango 1, 1.3 . 2.4.2. M√âTRICAS DE CALIDAD PARA TETRAEDROS Las m√©tricas descritas en esta secci√≥n est√°n definidas sobre un elemento tetra√©drico como el que se muestra a continuaci√≥n en la Figura 2.37. 58 Figura 2.37: Elemento tetra√©drico utilizado para describir las m√©tricas de calidad. A continuaci√≥n se definir√°n varios elementos del tetraedro, lo cual facilitar√° la descripci√≥n de las m√©tricas a evaluar. Las aristas del tetraedro se encuentran definidas de la siguiente manera: ùêø0 = ùêø01 = ùëÉ1 ‚àí ùëÉ0 , ùêø3 = ùêø03 = ùëÉ3 ‚àí ùëÉ0 ùêø1 = ùêø12 = ùëÉ2 ‚àí ùëÉ1 , ùêø4 = ùêø13 = ùëÉ3 ‚àí ùëÉ1 ùêø2 = ùêø20 = ùëÉ0 ‚àí ùëÉ2 , ùêø5 = ùêø23 = ùëÉ3 ‚àí ùëÉ2 Las longitudes de las aristas del tri√°ngulo se definen de la siguiente manera: ùêø0 = ùêø0 , ùêø1 = ùêø1 , ùêø2 = ùêø2 , ùêø3 = ùêø3 , ùêø4 = ùêø4 , ùêø5 = ùêø5 y las longitudes de la arista m√°s peque√±a y m√°s grande son, respectivamente: ùêøùëöùëñùëõ = min ùêø0, ùêø1 , ùêø2, ùêø3, ùêø4, ùêø5 , ùêøùëöùëéùë• = max ùêø0, ùêø1, ùêø2, ùêø3 , ùêø4, ùêø5 El √°rea de la superficie de un tetraedro es igual a la suma del √°rea de las cuatro caras que lo componen: 59 ùê¥ = 1 2 ùêø2 √ó ùêø0 + ùêø3 √ó ùêø0 + ùêø4 √ó ùêø1 + ùêø3 √ó ùêø2 El volumen del tetraedro se puede definir en base a las aristas como: ùëâ = ùêø2 √ó ùêø0 ‚àô ùêø3 6 Adem√°s, se define ùëü como el radio de la esfera inscrita y ùëÖ como el radio de la esfera circunscrita del tetraedro, los cuales tambi√©n son llamados radio interno y radio circunscrito: ùëü = 3ùëâ ùê¥ , ùëÖ = ùêø3 2 ‚àô ùêø2 √ó ùêø0 + ùêø2 2 ‚àô ùêø3 √ó ùêø0 + ùêø0 2 ‚àô ùêø3 √ó ùêø2 12ùëâ 2.4.2.1. RELACI√ìN DE ASPECTO La relaci√≥n de aspecto de un tetraedro representa la proporcionalidad que tiene respecto a su longitud, ancho, y alto. Para calcular la relaci√≥n de aspecto de un tetraedro se divide la longitud de la arista m√°s larga entre el radio de la esfera inscrita. Sin embargo, el valor se normaliza de forma tal que un tetraedro equil√°tero de √°rea unitaria tenga ùëû = 1. ùëû = ùêøùëöùëéùë• 2 6ùëü = ùê¥ùêøùëöùëéùë• 6 6ùëâ La relaci√≥n de aspecto ùëû del tetraedro se encuentra dentro del rango 1 , ‚àû , y se considera que un tetraedro es de buena calidad si √©sta se encuentra dentro del rango 1, 3 . 2.4.2.2. PROPORCI√ìN DE ARISTAS La proporci√≥n de aristas de un tetraedro se define como la longitud de la arista m√°s larga entre la longitud de la arista m√°s corta, es decir: ùëû = ùêøùëöùëéùë• ùêøùëöùëñùëõ La proporci√≥n de las aristas ùëû se encuentra en el rango 1 , ‚àû , pero para que un tetraedro sea considerado de buena calidad √©sta se debe encontrar en el rango 1, 3 . 60 2.4.2.3. PROPORCIONALIDAD DE RADIOS Esta m√©trica se define como el radio de la esfera circunscrita entre el radio de la esfera inscrita en el tetraedro, normalizada de forma tal que un tetraedro equil√°tero tenga calidad uno, es decir: ùëû = ùëÖ 3ùëü = ùêø3 2 ‚àô ùêø2 √ó ùêø0 + ùêø2 2 ‚àô ùêø3 √ó ùêø0 + ùêø0 2 ‚àô ùêø3 √ó ùêø2 ùê¥ 108ùëâ2 La proporcionalidad de los radios de un tetraedro ùëû se encuentra en el rango 1 , ‚àû , y se considera que un tetraedro es de buena calidad si dicha proporcionalidad se encuentra en el rango 1, 3 . 2.4.3. M√âTRICAS PARA CONJUNTOS DE PRIMITIVAS La salida generada por los algoritmos para la extracci√≥n de isosuperficies e intervalos de volumen no es una sola primitiva, sino un conjunto ellas, por lo cual se deben dise√±ar m√©todos para el an√°lisis de conjuntos de primitivas en base a la calidad de cada uno de los elementos que componen dicho conjunto. El primer m√©todo [STI07] para evaluar la calidad del conjunto consiste en clasificar cada primitiva de √©ste en base a los rangos y determinar si es buena, normal o degenerada en base a alguna m√©trica y contar cu√°ntas existen de cada tipo. Luego, la calidad del modelo ser√° directamente proporcional a la cantidad de primitivas buenas e inversamente proporcional a la cantidad de primitivas degeneradas. El segundo m√©todo [STI07] consiste en calcular la calidad del conjunto de primitivas como la media de la calidad de cada uno de los elementos de √©ste, y tomar la desviaci√≥n est√°ndar como el grado de esparcimiento de la calidad de los elementos. Para las m√©tricas no propias se recomienda utilizar la media y desviaci√≥n est√°ndar aritm√©tica, las cuales se definen como: ùúá = 1 ùëõ ùëûùëñ ùëõ ùëñ=1 , ùúé = 1 ùëõ ‚àí 1 ùëûùëñ ‚àí ùúá 2 ùëõ ùëñ=1 61 donde i q es la calidad del i-√©simo elemento del conjunto. Para las m√©tricas propias se recomienda utilizar la media y desviaci√≥n est√°ndar geom√©trica, las cuales se definen como: ùúáùëî = ùëûùëñ ùëõ ùëñ=1 1 ùëõ , ùúéùëî = exp 1 ùëõ ln ùëûùëñ ‚àí ln ùúáùëî 2 ùëõ ùëñ=1 62 CAP√çTULO 3. EXTRACCI√ìN DE INTERVALOS DE VOLUMEN MEDIANTE MODIFICACI√ìN DE CUBOS MARCHANTES A continuaci√≥n se explicar√° el algoritmo desarrollado para la extracci√≥n de intervalos de volumen ùõº, ùõΩ mediante el uso de una tabla de casos similar a la utilizada por cubos marchantes para la extracci√≥n de isosuperficies (ver Secci√≥n 2.2.1). Luego, se explicar√°n las ventajas y desventajas de este algoritmo, as√≠ como el procedimiento utilizado para generar la tabla de conectividad y el post-procesamiento a realizar sobre el mallado resultante. Finalmente, se describir√°n ciertas consideraciones que se deben tener en cuenta para el manejo de los casos ambiguos en aquellos algoritmos basados en este procedimiento. 3.1. ALGORITMO PARA LA EXTRACCI√ìN DEL INTERVALO DE VOLUMEN El algoritmo desarrollado se encuentra basado en Cubos Marchantes [LOR87] y, al igual que √©ste, reconstruye cada celda de la malla independientemente mediante el uso de una tabla de conectividad. Cada celda se encuentra delimitada por ocho v√≥xeles y doce aristas, y puede aportar hasta treinta y dos (32) v√©rtices diferentes al mallado final, debido a que cada v√≥xel neutro aporta un v√©rtice y a que cada arista aporta dos v√©rtices diferentes cuando un v√≥xel que la delimita es positivo y el otro es negativo. En la Figura 3.1 se puede observar la enumeraci√≥n de la celda utilizada por el algoritmo propuesto. Figura 3.1: Enumeraci√≥n de la celda utilizada por el algoritmo propuesto. 63 Es importante observar que en la enumeraci√≥n utilizada los puntos de intersecci√≥n se encuentran ordenados en base a los siguientes criterios: ÔÇ∑ Los v√©rtices provenientes de v√≥xeles neutros preceden aquellos provenientes de intersecciones en las aristas de la celda. ÔÇ∑ Los v√©rtices provenientes de v√≥xeles se encuentran ordenados por la coordenada del v√≥xel dentro de la celda, que equivale a ordenarlos en base la posici√≥n del v√≥xel dentro del volumen. ÔÇ∑ Los v√©rtices provenientes de aristas diferentes se encuentran ordenados en base a los v√≥xeles que las delimitan, es decir, si el menor v√©rtice de ambas aristas es diferente estas se ordenan en base a √©ste, si no se ordenan en base al otro extremo. ÔÇ∑ Los v√©rtices provenientes de una misma arista se encuentran ordenadas por el isovalor en el punto de intersecci√≥n, es decir, aquellos v√©rtices con isovalor ùõº preceden aquellos con isovalor ùõΩ. Este ordenamiento garantiza el ordenamiento de los v√©rtices a nivel global, es decir, si un v√©rtice ùë£1 precede a otro v√©rtice ùë£2 dentro de una celda, entonces ùë£1 precede a ùë£2 en el mallado completo, lo cual es importante debido a que este predicado de ordenamiento es necesario para prevenir el problema expuesto en la Figura 2.29 en la Secci√≥n 2.3.3.2, durante la generaci√≥n de la tabla de casos. El primer paso para extraer el intervalo de volumen ùõº, ùõΩ de una celda consiste en clasificar cada uno de los v√≥xeles que la delimita en tres grupos, positivos, negativos y neutros, en base a la siguiente ecuaci√≥n: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ donde ùõøùëñ es el isovalor del v√≥xel a clasificar. Como se puede observar, un v√≥xel ser√° neutro si su isovalor se encuentra dentro del intervalo extraer, o ser√° positivo o negativo en base al signo de ùõøùëñ ‚àí ùõº si su isovalor no se encuentra dentro del intervalo. Luego, con la clasificaci√≥n de los 64 v√≥xeles se construye un √≠ndice de clasificaci√≥n interpretando la clase de cada v√≥xel como un d√≠gito en base-3 (ver Figura 3.2). Figura 3.2: Clasificaci√≥n de una celda en base a los isovalores de los v√≥xeles que la delimitan, con ùõº = 0.3 y ùõΩ = 0.6, donde ùõøùëñ representa el isovalor de cada v√≥xel. Debido a que cada uno de los v√≥xeles tiene tres estados posibles, existe un total de 38 = 6561 formas diferentes en que el intervalo de volumen a extraer intersecte la celda. Sin embargo, a diferencia del algoritmo para la extracci√≥n de isosuperficies, no se puede reducir la cantidad de casos por simetr√≠a, reflexi√≥n o rotaci√≥n, debido a que esto interfiere con el ordenamiento de los puntos de intersecci√≥n. En la Figura 3.3 se pueden observar algunas posibles intersecciones entre la celda y el intervalo de volumen a extraer. 65 Figura 3.3: Algunas posibles intersecciones entre la celda y el intervalo de volumen a extraer. Los puntos rojos representan los v√≥xeles negativos, los puntos azules representan los v√≥xeles positivos y los puntos violetas representan los v√≥xeles neutros. El siguiente paso es determinar cu√°les v√≥xeles producen v√©rtices y cu√°les aristas de la celda son intersectadas por el volumen a extraer, as√≠ como la posici√≥n de estos puntos de intersecci√≥n. Un v√≥xel produce un v√©rtice si este es neutro, cuya posici√≥n ùëÉùë• equivale a la posici√≥n del v√≥xel, es decir: ùëÉùë• = ùëÉ, ùë• ‚àà 0,1, ‚ãØ ,6,7 donde ùëÉ es la posici√≥n del v√≥xel neutro. Una arista produce un v√©rtice con isovalor ùõº si un extremo es negativo y el otro no es negativo, donde la posici√≥n ùëÉùë• de esta intersecci√≥n se calcula mediante el uso de interpolaci√≥n lineal sobre la arista de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùõø0 ùõø1 ‚àí ùõø0 , ùë• ‚àà 8,10,12, ‚ãØ ,26,28,30 donde, ùõø0 y ùõø1 son los isovalores de los v√≥xeles que delimitan la arista y ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista. De forma similar, una arista produce un v√©rtice con isovalor ùõΩ si un extremo es positivo y el otro no es positivo, donde la posici√≥n ùëÉùë• de esta intersecci√≥n se calcula mediante el uso de interpolaci√≥n lineal sobre la arista de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõΩ ‚àí ùõø0 ùõø1 ‚àí ùõø0 , ùë• ‚àà 9,11,13, ‚ãØ ,27,29,31 66 Despu√©s de calcular todos los puntos de intersecci√≥n del intervalo de volumen con la celda se generan los tetraedros que lo componen utilizando una tabla de conectividad de 38 = 6561 casos, la cual se indexa utilizando el √≠ndice obtenido de la clasificaci√≥n de los v√≥xeles. Mediante este algoritmo tambi√©n se pueden calcular otros atributos de los v√©rtices del mallado final, extrayendo el atributo del v√≥xel para aquellos v√©rtices provenientes de v√≥xeles neutros, y mediante interpolaci√≥n lineal de los atributos en los extremos de cada arista para aquellos v√©rtices generados por intersecciones en las aristas. Por ejemplo, se puede calcular el gradiente ùê∫ùë• para v√©rtice ùëÉùë• de la siguiente manera: ùê∫ùë• = ùê∫, ùë• ‚àà 0,1, ‚ãØ ,6,7 ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 , ùë• ‚àà 8,10,12, ‚ãØ ,26,28,30 ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõΩ ‚àí ùë£0 ùë£1 ‚àí ùë£0 , ùë• ‚àà 9,11,13, ‚ãØ ,27,29,31 donde ùê∫ es el gradiente el v√≥xel neutro y ùê∫0 y ùê∫1 son los gradientes en los extremos de la arista intersectada. 3.2. VENTAJAS Y DESVENTAJAS DEL ALGORITMO PROPUESTO Como se puede observar en la Secci√≥n 3.1, el algoritmo propuesto es muy similar al algoritmo propuesto por Lorensen [LOR87] para la extracci√≥n de isosuperficies, por lo cual √©ste posee ventajas similares a aquellas del algoritmo original (ver Secci√≥n 2.2.1.1), entre las cuales se encuentran: ÔÇ∑ Sencillez: El algoritmo es sencillo de implementar, ya que s√≥lo se necesita una tabla de 38 casos para procesar cada celda en base a la clasificaci√≥n de sus v√≥xeles, y no se requiere ning√∫n algoritmo complejo para el procesamiento de la celda, como triangulaciones de Delaunay [GUO95] o intersecci√≥n de poliedros [FUJ95]. ÔÇ∑ Eficiencia: El algoritmo s√≥lo calcula las intersecciones en aquellas aristas donde es necesario, reutilizando las intersecciones de las celdas anteriores de ser posible, igual que 67 el algoritmo para extraer isosuperficies. Adem√°s, el algoritmo s√≥lo necesita la construcci√≥n de un √≠ndice y b√∫squedas de orden constante en tablas precalculadas. ÔÇ∑ Paralelizable: El algoritmo es f√°cil de paralelizar, debido a que el volumen extra√≠do de una celda es independiente del extra√≠do de otras celdas. Esto brinda una ventaja sobre los algoritmos basados en tetraedrizaciones de Delaunay [GUO95], ya que la paralelizaci√≥n de estos es mucho m√°s complicada. Sin embargo, el algoritmo posee desventajas similares a aquellas del algoritmo original, entre las cuales se encuentran: ÔÇ∑ Manejo de casos ambiguos: El algoritmo no realiza ning√∫n procesamiento adicional para determinar casos ambiguos, ya que √©ste asume que el intervalo de volumen a extraer s√≥lo puede intersectar las celdas de una sola forma por cada √≠ndice de clasificaci√≥n. Sin embargo, el algoritmo maneja las celdas de forma consistente, de forma que no existan huecos en el volumen similares a aquellos generados en el algoritmo original propuesto por Lorensen [LOR87]. En la Secci√≥n 3.5 se describen las consideraciones que se deben tener en cuenta para manejar casos ambiguos en el algoritmo. ÔÇ∑ Tetraedros degenerados: En ciertos casos, el algoritmo genera tetraedros degenerados o con volumen negativo, lo cual se puede corregir durante el post-procesamiento (ver Secci√≥n 3.4). ÔÇ∑ Complejidad de la salida: El algoritmo genera una cantidad excesiva de tetraedros cuando la resoluci√≥n de los modelos de entrada es muy alta, lo que ocasiona que el volumen final sea m√°s dif√≠cil de procesar. Sin embargo, el mallado generado est√° compuesto por una cantidad de tetraedros mucho menor en comparaci√≥n a los mallados generados por el algoritmo propuesto por Nielson y Sung [NIE97b] (ver Secci√≥n 4.2). 3.3. GENERACI√ìN DE LA TABLA DE CONECTIVIDAD Para extraer tetraedros de cada celda el algoritmo necesita una tabla de conectividad que le indique los v√©rtices del mallado a unir en cada celda para obtener los tetraedros que componen el mallado resultante. Esta lista consiste en un conjunto de 4-tuplas de la forma ùëé, ùëè, ùëê, ùëë , donde 68 cada tupla indica que se deben unir los v√©rtices ùëé, ùëè, ùëê y ùëë para generar un tetraedro de salida. La 4-tupla ser√° v√°lida si y s√≥lo si los cuatro elementos de √©sta son diferentes y pertenecen a los v√©rtices intersectados para el caso que est√° siendo procesado. Con el objetivo de preservar la eficiencia del algoritmo final, se deben precalcular los tetraedros de salida para cada caso de intersecci√≥n posible, lo cual se hace mediante la creaci√≥n de celdas sint√©ticas y la extracci√≥n de tetraedros de √©stas. El procedimiento utilizado para la generaci√≥n de la tabla de conectividad consiste en obtener el poliedro-ùõºùõΩ que representa el intervalo ùõº, ùõΩ a extraer, para luego tetraedrizar √©ste mediante el algoritmo propuesto por Max [MAX01] para la tetraedrizaci√≥n de poliedros convexos de forma coherente. A continuaci√≥n se explicar√°n las consideraciones tomadas en cuenta para crear las celdas sint√©ticas sobre las cuales se extraen los tetraedros de salida, as√≠ como el procedimiento utilizado para la extracci√≥n del poliedro-ùõºùõΩ y su tetraedrizaci√≥n. 3.3.1. CREACI√ìN DE LA CELDA SINT√âTICA El procedimiento para la creaci√≥n de una celda sint√©tica recibe como entrada el √≠ndice de clasificaci√≥n ùëÄ de la celda que se desea construir, y produce como salida una celda ùê∂ y un intervalo ùõº, ùõΩ de forma tal que al clasificar los v√≥xeles de la celda ùê∂ en base al intervalo ùõº, ùõΩ utilizando la f√≥rmula descrita en la Secci√≥n 3.1 se obtenga el √≠ndice ùëÄ, es decir: ùõøùëñ ‚àà ‚àí‚àû, ùõº , ùë†ùëñ ùëÄùëñ = 0 ùõº, ùõΩ , ùë†ùëñ ùëÄùëñ = 1 ùõΩ, ‚àû , ùë†ùëñ ùëÄùëñ = 2 donde ùõøùëñ es el isovalor del ùëñ-√©simo v√≥xel de ùê∂ y ùëÄùëñ es el ùëñ-√©simo d√≠gito de ùëÄ si √©ste se interpreta en base-3. Para generar cada uno de los isovalores de los v√≥xeles que delimitan la celda, se fija el intervalo ùõº, ùõΩ , y se calculan los valores de desplazamiento ùëò y tolerancia Œî de la siguiente manera: ùëò = ùõΩ ‚àí ùõº 2 , Œî = ùëò 2 69 donde ùëò se utiliza para calcular el punto base de los isovalores y Œî se utiliza para a√±adir una variaci√≥n aleatoria sobre los isovalores, con el prop√≥sito de que los puntos de intersecci√≥n se encuentren en posici√≥n general [EDE90]. Finalmente, cada isovalor ùê∂ùëñ se calcula en base al valor en la posici√≥n correspondiente en el √≠ndice de la siguiente manera: ùõøùëñ = ùõº ‚àí ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄi = 0 ùõº + ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄùëñ = 1 ùõΩ + ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄùëñ = 2 donde rand ùê¥, ùêµ representa una funci√≥n que retorna un valor aleatorio uniformemente distribuido en el intervalo ùê¥, ùêµ . 3.3.2. EXTRACCI√ìN DEL POLIEDRO ALFA-BETA DE LA CELDA SINT√âTICA El primer paso para la extracci√≥n del poliedro-ùõºùõΩ consiste en calcular los puntos donde el intervalo de volumen ùõº, ùõΩ a extraer intersecta la celda sint√©tica, en base a los isovalores generados en el paso anterior. El procedimiento para calcular estos puntos es el mismo utilizado en el algoritmo final, el cual se puede observar en la Secci√≥n 3.1. Luego, se calcula la c√°psula convexa de los puntos de intersecci√≥n mediante el uso de un algoritmo de fuerza bruta con tiempo de ejecuci√≥n ùëÇ ùëõ4 , donde ùëõ es la cantidad de puntos de intersecci√≥n entre la celda y el intervalo de volumen a extraer. El uso de fuerza bruta no afecta el desempe√±o del algoritmo final debido a que este procedimiento s√≥lo es realizado durante el preprocesamiento de la tabla de conectividad. La c√°psula convexa obtenida ser√° representada como un conjunto de caras que delimitan el poliedro-ùõºùõΩ, donde cada cara consiste en una lista ordenada de v√©rtices que la delimitan. Este procedimiento consiste en los siguientes pasos, los cuales se pueden observar en la Figura 3.4: 70 Figura 3.4: Pasos necesarios para el c√°lculo del poliedro-ùõºùõΩ a partir de la celda sint√©tica. ÔÇ∑ Calcular los tri√°ngulos que pertenecen a la c√°psula convexa, los cuales ser√°n todos aquellos delimitados por tres puntos de intersecci√≥n ùëÉùëé , ùëÉùëè y ùëÉùëê , tal que no tengan ning√∫n punto de intersecci√≥n del lado positivo del plano definido por √©stos. La ecuaci√≥n del plano ùëá al que pertenece el tri√°ngulo que est√° siendo considerado est√° definida por: ùëá = ùëÅùë• , ùëÅùë¶ , ùëÅùëß , ùê∑ ùëÅ = ùëÅùë• , ùëÅùë¶ , ùëÅùëß = ùëÉùëè ‚àí ùëÉùëé √ó (ùëÉùëê ‚àí ùëÉùëé) ùê∑ = ‚àíùëÅ ‚àô ùëÉùëé donde ùëÅ es la normal del plano y ùê∑ es la distancia de √©ste al origen. Luego, el tri√°ngulo pertenecer√° a la c√°psula convexa si y s√≥lo si no existe un punto de intersecci√≥n ùëÉùëñ tal que: ùëÅ ‚àô ùëÉùëñ + ùê∑ > 0 ÔÇ∑ Clasificar los tri√°ngulos en distintas clases de equivalencia ùúèùëò , donde dos tri√°ngulos pertenecer√°n a la misma clase de equivalencia si y s√≥lo si los planos ùëá1 y ùëá2 a los que pertenecen son equivalentes, es decir: 71 ùëá1 = ùëÅùë• ,1, ùëÅùë¶ ,1, ùëÅùëß ,1, ùê∑1 ùëá2 = ùëÅùë• ,2, ùëÅùë¶ ,2, ùëÅùëß ,2, ùê∑2 ùëá1 ‚â° ùëá2 ‚ü∫ ‚àÉùëò ‚àà ‚Ñù + ùëá1 = ùëòùëá2 ÔÇ∑ Unir los tri√°ngulos de cada clase de equivalencia œÑùëò en una cara poligonal del poliedro- ùõºùõΩ, mediante la aplicaci√≥n de un predicado de ordenamiento sobre los puntos en ùúèùëò . Para realizar esto, se extrae el conjunto ùê¥ con los puntos de intersecci√≥n pertenecientes al grupo que est√° siendo procesado, donde ùê¥ se define como: ùê¥ = ùëé1 , ùëé2 , ‚ãØ , ùëéùëõ ùëéùëñ < ùëéùëñ+1, ‚àÄùëñ ‚àà 1,2, ‚ãØ , ùëõ ‚àí 1 donde ùëéùëñ es el ùëñ-√©simo v√©rtice perteneciente a la cara. Luego, se elige un v√©rtice pivote ùëéùëù , el cual ser√° el v√©rtice inicial a partir del cual se reconstruir√° la cara del poliedro-ùõºùõΩ. Una vez que se ha seleccionado el v√©rtice pivote, se procede a ordenar el resto los puntos a partir de √©ste, mediante el uso de un predicado de ordenamiento ùúåùêπ ùëéùëñ , ùëéùëó que establece que ùëéùëñ precede a ùëéùëó en el grupo ùúèùëò si y s√≥lo s√≠ el tri√°ngulo ùëéùëù , ùëéùëñ , ùëéùëó existe en ùúèùëò , es decir: ùúåùêπ ùëéùëñ , ùëéùëó ‚ü∫ ùëéùëù , ùëéùëñ , ùëéùëó ‚àà ùúèùëò Por ejemplo, en la Figura 3.5 se puede observar una cara hexagonal del poliedro-ùõºùõΩ, donde las flechas rojas indican la precedencia entre los v√©rtices distintos al pivote, y los tri√°ngulos pertenecientes a ùúèùëò son aquellos que utilizan dos aristas grises y una roja. 72 Figura 3.5: Ordenamiento de los puntos en una cara del poliedro-ùõºùõΩ. Una vez que se obtienen todas las caras del poliedro-ùõºùõΩ, este es tetraedrizado utilizando el procedimiento explicado en la Secci√≥n 3.3.3. Para que este procedimiento se realice de forma satisfactoria, es importante verificar que el poliedro-ùõºùõΩ es convexo e incluye todos los puntos de intersecci√≥n calculados. Para verificar que el poliedro-ùõºùõΩ es convexo, se puede observar que todas las caras generadas durante la construcci√≥n tienen a todos los dem√°s v√©rtices del mallado de un s√≥lo lado, lo cual es condici√≥n suficiente para garantizar que los poliedros generados son convexos, ya que de ser c√≥ncavos existir√≠a una cara con v√©rtices del mallado a ambos lados [GRA72]. Para verificar que el poliedro-ùõºùõΩ contiene todos los puntos de intersecci√≥n en la celda, es suficiente verificar que no existe un punto de intersecci√≥n tal que no pertenezca a alg√∫n tri√°ngulo perteneciente a la c√°psula convexa. En la Figura 3.6 se muestran los pol√≠gonos extra√≠dos de las caras de las celdas para los 34 = 81 casos posibles. Como se puede observar, todos los pol√≠gonos no vac√≠os poseen al menos tres v√©rtices, por lo cual cada v√©rtice del mallado final va a pertenecer al menos a una cara externa de la celda, ya que no existen v√©rtices estrictamente dentro de la celda y cada v√©rtice posee al menos dos vecinos en una misma cara, con los cuales forma una cara externa perteneciente a la c√°psula convexa. 73 Figura 3.6: Posibles intersecciones entre el intervalo ùõº, ùõΩ a extraer y cada cara de la celda. 3.3.3. TETRAEDRIZACI√ìN DEL POLIEDRO ALFA-BETA El paso final para la extracci√≥n del intervalo de volumen consiste en la tetraedrizaci√≥n del poliedro-ùõºùõΩ de la celda sint√©tica, mediante el uso del algoritmo propuesto por Max [MAX01], el cual permite la tetraedrizaci√≥n de poliedros convexos de forma consistente en todas las caras. Esto evita el problema descrito en la Secci√≥n 2.3.3.2 para el algoritmo basado en tetracubos marchantes, debido a que este algoritmo garantiza que la triangulaci√≥n utilizada para cada cara del poliedro-ùõºùõΩ ser√° la misma para ambos poliedros que la comparten. Este algoritmo consta de dos pasos principales: en la primera fase √©ste divide cada cara del poliedro en tri√°ngulos, utilizando las diagonales que parten desde el menor punto de la cara hacia los dem√°s puntos de √©sta; en la segunda fase el algoritmo tetraedriza el poliedro trazando diagonales desde el menor punto del poliedro hacia todos los dem√°s puntos del poliedro. Como se puede observar, para la ejecuci√≥n de este algoritmo se necesita un predicado de orden total ùúå ùëéùëñ , ùëéùëó para determinar si un punto de intersecci√≥n ùëéùëñ precede a otro punto de intersecci√≥n ùëéùëó . Para este algoritmo se utiliza el ordenamiento descrito en la Secci√≥n 3.1, el cual cumple con todas las propiedades descritas en la Secci√≥n 2.3.3.2, las cuales son necesarias y suficientes para establecer un predicado de orden total. 74 Para implementar este algoritmo, se utiliz√≥ un grafo de conectividad ùê∫ = ùê¥, ùê∏ , donde ùê¥ es el conjunto con los puntos de intersecci√≥n de la celda y ùê∏ es el conjunto con las aristas ùëéùëñ , ùëéùëó que unen los v√©rtices dentro del modelo. Las aristas existentes pertenecientes a ùê∏ son las siguientes: ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ sea adyacente a ùëéùëó en alguna cara del poliedro a tetraedrizar. Estas aristas corresponden a las aristas originales del poliedro-ùõºùõΩ. ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ comparta alguna cara con ùëéùëó donde ùëéùëñ sea el menor v√©rtice de dicha cara. Estas aristas corresponden a aquellas generadas por la primera fase del algoritmo de tetraedrizaci√≥n propuesto por Max [MAX01]. ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó , tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ sea el menor v√©rtice del poliedro a tetraedrizar. Estas aristas corresponden a aquellas generadas por la segunda fase del algoritmo de tetraedrizaci√≥n propuesto por Max [MAX01]. En la Figura 3.7 se pueden observar las distintas aristas generadas por el algoritmo de tetraedrizaci√≥n, donde las aristas negras representan las aristas originales del poliedro, las aristas azules representas las aristas generadas durante la primera fase y las aristas rojas representan las aristas internas generadas durante la segunda fase. Figura 3.7: Aristas generadas durante la tetraedrizaci√≥n del poliedro-ùõºùõΩ. 75 Luego, una vez construido el grafo ùê∫ = ùê¥, ùê∏ con las aristas del poliedro, se procede a la extracci√≥n de los tetraedros generados, mediante la b√∫squeda de subgrafos isomorfos a ùê∫4, donde ùê∫4 representa un grafo completo 12 con cuatro v√©rtices, ya que un tetraedro es isomorfo a ùê∫4. Este procedimiento se lleva a cabo probando cada cuarteto de v√©rtices ùëé, ùëè, ùëê, ùëë posible, a√±adi√©ndolo a la salida si y s√≥lo s√≠ las seis aristas ùëé, ùëè , ùëé, ùëê , ùëé, ùëë , ùëè, ùëê , ùëè, ùëë y ùëê, ùëë pertenecen a ùê∏. Este algoritmo de fuerza bruta tiene complejidad en tiempo igual a ùëÇ ùëõ4 ; sin embargo, esto no afecta la eficiencia del algoritmo final, ya que este procedimiento s√≥lo se lleva a cabo durante la generaci√≥n de la tabla de conectividad. 3.4. FASE DE POST-PROCESAMIENTO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo tiene la desventaja de generar tetraedros degenerados o con volumen negativo, lo cual se debe a que en ciertos casos de intersecci√≥n entre el intervalo de volumen a extraer y las celdas se generan tetraedros cuya orientaci√≥n no depende √∫nicamente de los √≠ndices de los extremos dentro de la celda, si no de la posici√≥n final de estos en el espacio. Por ejemplo, para el caso 10000011 3 = 2191, el tetraedro 0,10,16,22 es necesario para reconstruir el intervalo de volumen dentro de la celda. Sin embargo, no se puede determinar la orientaci√≥n del tetraedro sin calcular las posiciones donde las aristas son intersectadas, ya que la orientaci√≥n de √©ste depende de la posici√≥n de las intersecciones ùëÉ16,ùõº y ùëÉ22,ùõº , como se puede observar en la Figura 3.8. 12 Un grafo completo de ùëõ v√©rtices es aqu√©l que contiene aristas entre todo par de v√©rtices. 76 Figura 3.8: Caso donde la orientaci√≥n de un tetraedro no se puede determinar sin calcular la posici√≥n de las intersecciones en el espacio. Para observar por qu√© ocurre esto, se pueden fijar los puntos ùëÉ0,‚àÖ, ùëÉ10,ùõº y ùëÉ16,ùõº y mover el punto ùëÉ22,ùõº a lo largo de la arista ùê¥ùêµ de la celda; mientras √©ste se acerque al v√≥xel ùê¥ el tetraedro tendr√° volumen positivo y mientras √©ste se acerque al v√≥xel ùêµ el tetraedro tendr√° volumen negativo (ver Secci√≥n 2.4.2 para m√°s informaci√≥n sobre la definici√≥n del volumen de un tetraedro). Inclusive, existe un punto intermedio ùê∂ en cual el tetraedro tendr√° volumen nulo, por lo cual se considerar√° un tetraedro degenerado. Para solucionar esto, se puede verificar cada tetraedro antes de a√±adirlo al mallado final, y en caso de tener volumen negativo se intercambian los dos √∫ltimos v√©rtices del tetraedro, y en caso de tener volumen nulo simplemente no se a√±ade al mallado final. 3.5. CONSIDERACIONES PARA EL MANEJO DE CASOS AMBIGUOS Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para manejar casos ambiguos en la celda, sino asume que la intersecci√≥n del intervalo de volumen con la celda consiste en un √∫nico poliedro convexo o el vac√≠o. En esta secci√≥n se analizar√°n los distintos tipos de ambig√ºedades existentes y las posibles soluciones para el manejo de estos casos, para finalmente analizar la salida del algoritmo propuesto as√≠ como las limitaciones de √©ste que impiden el manejo de casos ambiguos de forma sencilla. 77 3.5.1. MODELOS TOPOL√ìGICAMENTE CORRECTOS Para analizar los casos ambiguos que se pueden encontrar durante la ejecuci√≥n del algoritmo propuesto basado en cubos marchantes, primero se debe definir qu√© es una superficie topol√≥gicamente correcta. En [CHE95] se define que una superficie es topol√≥gicamente correcta si y s√≥lo si la topolog√≠a de los tetraedros generados coincide con la topolog√≠a de la funci√≥n ùêπ ùë•, ùë¶, ùëß dentro de cada celda. Para obtener un intervalo de volumen topol√≥gicamente correcto, dos v√≥xeles de la misma clase (positivo, negativo o neutro) deben estar unidos dentro de una celda si y s√≥lo si existe un camino dentro de √©sta que conecte ambos v√≥xeles y no cambie de clase. El caso m√°s simple para determinar si dos v√≥xeles est√°n conectados es cuando existe un camino a trav√©s de las aristas de la celda que s√≥lo contiene v√≥xeles de la misma clase. Sin embargo, hay dos casos donde la regla anterior no es suficiente. Por ejemplo, cuando se tiene una cara con dos v√≥xeles positivos y dos v√≥xeles negativos en esquinas opuestas que no est√°n conectados a trav√©s de las dem√°s aristas de la celda, no se puede decir directamente si los v√≥xeles positivos est√°n unidos, si los v√≥xeles negativos est√°n unidos o los cuatro v√≥xeles est√°n completamente separados, debido a que √©stos podr√≠an estar unidos mediante un camino que pase por dentro de la cara. A este tipo de caras se les denomina caras ambiguas, como la que se puede observar en la Figura 3.9. Figura 3.9: Ejemplo de una cara ambigua. A la izquierda se muestra el caso donde los v√≥xeles positivos se encuentran unidos, a la derecha se muestra el caso donde los v√≥xeles negativos se encuentran unidos, y en el centro se muestra el caso donde √©stos son separados. Debido a la existencia de tres tipos diferentes de v√≥xeles, existen varios tipos de caras ambiguas, entre las cuales se encuentran: 78 ÔÇ∑ Dos v√≥xeles positivos y dos v√≥xeles neutros, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles negativos y dos v√≥xeles neutros, con los v√≥xeles negativos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles positivos, un v√≥xel neutro y un v√≥xel negativo, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles negativos, un v√≥xel neutro y un v√≥xel positivo, con los v√≥xeles negativos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles negativos o separarlos. ÔÇ∑ Dos v√≥xeles positivos y dos v√≥xeles negativos, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos, unir los v√≥xeles negativos o separar los cuatro v√≥xeles. En la Figura 3.10 se pueden observar las distintas caras ambiguas posibles, as√≠ como todas las soluciones posibles para cada uno de ellos. Cualquier m√©todo a utilizar para la resoluci√≥n de ambig√ºedades debe tomar en cuenta todos los casos posibles, de forma que se pueda obtener la topolog√≠a correcta de la funci√≥n ùêπ ùë•, ùë¶, ùëß . Figura 3.10: Posibles caras ambiguas durante la extracci√≥n de intervalos de volumen mediante cubos marchantes. 79 3.5.2. MANEJO DE AMBIG√úEDADES EN LAS CARAS DE LA CELDA Para manejar las ambig√ºedades en las caras de la celda, se puede extender el m√©todo de la decisi√≥n asint√≥tica propuesto por Nielson [NIE91] para la resoluci√≥n de los casos ambiguos durante la extracci√≥n de isosuperficies (ver Secci√≥n 2.2.1.4). Este m√©todo consiste en elegir entre separar o no separar dos v√≥xeles opuestos de una cara ambigua en base a la evaluaci√≥n de un punto medio de √©sta por medio de interpolaci√≥n bilineal, de forma tal que la superficie generada sea topol√≥gicamente correcta (ver Secci√≥n 3.5.1). La interpolaci√≥n bilineal a trav√©s de una cara es la extensi√≥n natural a realizar interpolaci√≥n lineal a trav√©s de un segmento en dos dimensiones. Despu√©s de realizar un cambio de variables, se puede asumir que el dominio de la cara es un cuadrado unitario ùë†, ùë° 0 ‚â§ ùë†, ùë° ‚â§ 1 , lo cual lleva a la siguiente f√≥rmula para realizar interpolaci√≥n bilineal: ùêµ ùë†, ùë° = 1 ‚àí ùë† ùë† ùêµ0,0 ùêµ0,1 ùêµ1,0 ùêµ1,1 1 ‚àí ùë° ùë° donde ùêµ0,0, ùêµ0,1, ùêµ1,0 y ùêµ1,1 son los isovalores de los v√≥xeles que delimitan la cara ambigua. Al igual que en el m√©todo original propuesto por Nielson [NIE91], se puede verificar f√°cilmente que las curvas ùêªùõº = ùë†, ùë° ùêµ ùë†, ùë° = ùõº y ùêªùõΩ = ùë†, ùë° ùêµ ùë†, ùë° = ùõΩ son hip√©rbolas. Hay varias formas en que el dominio de la cara puede intersectar (o no intersectar) estas hip√©rbolas, como se puede observar en la Figura 3.11. Figura 3.11: Distintos resultados posibles de intersecci√≥n con las hip√©rbolas ùêªùõº y ùêªùõΩ , donde ùêªùõº est√° representada por la curva de color rojo y ùêªùõΩ est√° representada por la curva de color azul. Los casos ambiguos se dan cuando el dominio intersecta ambas componentes de la hip√©rbola, en cuyo caso no se puede determinar a priori si los v√≥xeles positivos est√°n dentro de la misma regi√≥n de las hip√©rbolas. Por ejemplo, en la Figura 3.12 se pueden observar tres formas posibles 80 en que el dominio de la cara intersecte las hip√©rbolas ùêªùõº y ùêªùõΩ en la cara ambigua mostrada en la Figura 3.9. Figura 3.12: Posibles hip√©rbolas para la cara ambigua mostrada en la Figura 3.9. La soluci√≥n propuesta por Nielson [NIE91] puede ser adaptada para la extracci√≥n de intervalos de volumen utilizando mediante la evaluaci√≥n de ùêπ ùë•, ùë¶, ùëß en el punto de la cara donde las as√≠ntotas de las hip√©rbolas se intersectan. La evaluaci√≥n de este punto permite determinar el par de v√≥xeles opuestos a unir, o si √©stos deben ser separados en su totalidad. El primer paso consiste en buscar las as√≠ntotas ùë†, ùë° ùë† = ùëÜ‚Ñé y ùë†, ùë° ùë° = ùëá‚Ñé , donde: ùëÜ‚Ñé = ùêµ0,0 ‚àí ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 , ùëá‚Ñé = ùêµ0,0 ‚àí ùêµ1,0 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 por lo cual se puede calcular el valor en ùêµ ùëÜùõº , ùëáùõº mediante interpolaci√≥n bilineal: ùêµùëÜ,ùëá = ùêµ ùëÜ‚Ñé , ùëá‚Ñé = ùêµ0,0ùêµ1,1 ‚àí ùêµ1,0ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 Finalmente, para determinar a qu√© caso de la Figura 3.12 corresponde la cara ambigua se compara ùêµùëÜ,ùëá con el intervalo ùõº, ùõΩ a extraer: Si ùêµùëÜ,ùëá se encuentra por debajo del intervalo (ùêµùëÜ,ùëá < ùõº), entonces los v√≥xeles negativos deben ser unidos; si ùêµùëÜ,ùëá se encuentra por encima del intervalo (ùêµùëÜ,ùëá > ùõΩ), entonces los v√≥xeles positivos deben ser unidos; en caso contrario (ùõº ‚â§ ùêµùëÜ,ùëá ‚â§ ùõΩ) los cuatro v√≥xeles deben ser separados. Estos tres casos se pueden observar en la Figura 3.13. 81 Figura 3.13: Triangulaci√≥n final despu√©s de evaluar la intersecci√≥n de las as√≠ntotas. 3.5.3. SALIDA DEL ALGORITMO PROPUESTO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto para la extracci√≥n de intervalos de volumen mediante cubos marchantes no realiza ning√∫n procesamiento adicional para el manejo de los casos ambiguos. El algoritmo propuesto, en lugar de determinar cu√°l soluci√≥n de la Figura 3.10 es topol√≥gicamente correcta, el algoritmo elige resolver las ambig√ºedades separando todos los v√≥xeles de la celda, ya que √©ste construye el poliedro-ùõºùõΩ como la c√°psula convexa [GRA72] de los puntos de intersecci√≥n. Es importante mencionar que a pesar de que todas las resoluciones posibles de los casos ambiguos consisten en piezas convexas, no se puede garantizar que el poliedro-ùõºùõΩ sea convex√≥ o est√© compuesto por piezas convexas √∫nicamente. Por ejemplo, en la Figura 3.14 se puede observar el caso 10110111 3, en el cual se obtiene un poliedro c√≥ncavo si se unen los v√≥xeles negativos de la cara superior, ya que la l√≠nea ùê¥ùêµ no se encuentra completamente dentro del poliedro. 82 Figura 3.14: Caso donde el poliedro-ùõºùõΩ es c√≥ncavo debido a la uni√≥n de los v√≥xeles negativos. Debido a que no se puede garantizar que el poliedro-ùõºùõΩ es convexo si se manejan los casos ambiguos, entonces es imposible tetraedrizar este poliedro sin conocer la posici√≥n final de los puntos de intersecci√≥n [MAX01]. Esto impide el uso de una tabla de conectividad para generar los tetraedros de salida, lo cual ocasiona que se requiera el uso de un algoritmo para la tetraedrizaci√≥n de poliedros c√≥ncavos durante el procesamiento de cada celda del volumen. 83 CAP√çTULO 4. IMPLEMENTACI√ìN Y PRUEBAS Para implementar los algoritmos mencionados en los objetivos espec√≠ficos (ver Secci√≥n 1.2), se utiliz√≥ el lenguaje de programaci√≥n C++, debido a que √©ste provee las funcionalidades necesarias para la implementaci√≥n eficiente de estos, as√≠ como diversas bibliotecas con c√≥digo abierto reusable, lo que facilita la implementaci√≥n de las partes no relacionadas con el algoritmo, como la interfaz gr√°fica de usuario. Entre las herramientas y bibliotecas utilizadas para la implementaci√≥n se encuentran: ÔÇ∑ Visual Studio 2008 13 : Consiste en el entorno de desarrollo (IDE) proporcionado por Microsoft para la creaci√≥n de aplicaciones y bibliotecas en C++. ÔÇ∑ STLport 5.2.1 14 : Consiste en una implementaci√≥n de la Biblioteca Est√°ndar de Plantillas de C++ (Standard Template Library, STL), la cual implementa extensiones importantes de la misma, como lo son los contenedores asociativos por hashing. ÔÇ∑ Boost 1.38.0 15 : Biblioteca c√≥digo abierto con extensiones para la biblioteca est√°ndar de C++, incluyendo funcionalidades que permiten el manejo de m√∫ltiples hilos, programaci√≥n gen√©rica, arreglos est√°ticos y manejo del sistema de archivos. ÔÇ∑ Qt Open Source 4.5.1 16 : Consiste en un conjunto de bibliotecas para C++, las cuales implementan funcionalidades para el dise√±o de interfaces gr√°ficas de usuario (GUIs). Se escogi√≥ esta biblioteca debido a que es de c√≥digo abierto y portable entre distintos tipos de sistemas. ÔÇ∑ Doxygen 1.5.8 17 : Consiste en una aplicaci√≥n para generar documentaci√≥n HTML para c√≥digo fuente, el cual soporta C, C++ y Java, entre otros lenguajes. Para evaluar el desempe√±o del algoritmo propuesto, se desarrollaron dos aplicaciones de prueba para el manejo de datos volum√©tricos; la primera para la extracci√≥n de isosuperficies y la segunda para la extracci√≥n de intervalos de volumen. Para la extracci√≥n de isosuperficies se implement√≥ cubos marchantes (ver Secci√≥n 2.2.1), tetracubos marchantes (ver Secci√≥n 2.2.2) y 13 http://www.microsoft.com/visualstudio 14 http://www.sourceforge.net/projects/stlport 15 http://www.boost.org 16 http://www.qtsoftware.com 17 http://www.stack.nl/~dimitri/doxygen 84 cubos marchantes con resoluci√≥n de ambig√ºedades (ver Secciones 2.2.1.4 y 2.2.1.5), y para la extracci√≥n de intervalos de volumen se implement√≥ tetracubos marchantes (ver Secci√≥n 2.3.3) y el algoritmo propuesto basado en cubos marchantes (ver Cap√≠tulo 3). Con el objetivo de comparar los algoritmos implementados, se utilizaron cuatro vol√∫menes de datos, donde los tres primeros fueron obtenidos a partir de tomograf√≠as computarizas (CT) y el √∫ltimo fue obtenido a partir de la ecuaci√≥n impl√≠cita de una hip√©rbola, cuyos datos b√°sicos se pueden observar en la Tabla 4.1. ID Volumen Fuente V√≥xeles Tipo de dato Bytes 1 Brazo derecho CT 492ÔÇ¥240ÔÇ¥155 Entero de 8 bits. 53MB 2 Cabeza CT 256ÔÇ¥256ÔÇ¥113 Entero de 16 bits. 42MB 3 Mu√±eca derecha CT 256ÔÇ¥256ÔÇ¥183 Entero de 8 bits. 34MB 4 Hip√©rbola ùêπ ùë•, ùë¶, ùëß = ùë•ùë¶ùëß 128ÔÇ¥128ÔÇ¥128 Flotante simple. 24MB Tabla 4.1: Vol√∫menes de datos utilizados para probar los algoritmos implementados. Para cada volumen se realiz√≥ la extracci√≥n de diversas isosuperficies e intervalos de volumen, utilizando los algoritmos implementados y evaluando tanto el tiempo requerido para la extracci√≥n del mallado final as√≠ como la calidad de √©ste utilizando las m√©tricas descritas en la Secci√≥n 2.4. A continuaci√≥n se mostrar√°n los resultados obtenidos de las pruebas realizadas sobre los algoritmos de extracci√≥n de isosuperficies y de intervalos de volumen utilizando los vol√∫menes descritos en la Tabla 4.1, para finalmente realizar comparaciones cualitativas sobre los modelos obtenidos de los algoritmos para la extracci√≥n de intervalos de volumen. 4.1. RESULTADOS OBTENIDOS DE LA EXTRACCI√ìN DE ISOSUPERFICIES Para evaluar el desempe√±o de los algoritmos de extracci√≥n de isosuperficies, se realizaron extracciones de distintas isosuperficies de los cuatro vol√∫menes de prueba descritos en la Tabla 4.1, de las cuales se obtuvo el tiempo necesario para la extracci√≥n de las isosuperficies as√≠ como la calidad de los mallados que los aproximan. En los siguientes gr√°ficos se muestra el comportamiento del tiempo de ejecuci√≥n de los distintos algoritmos de extracci√≥n de isosuperficies en base al isovalor extra√≠do. 85 Gr√°fico 4.1: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de isosuperficies del Volumen #1 (Brazo derecho). Gr√°fico 4.2: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de isosuperficies del Volumen #2 (Cabeza). 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 0 0.5 1 1.5 2 2.5 3 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 0.0 0.5 1.0 1.5 2.0 2.5 3.0 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2 148.7 446.2 743.6 1041.1 1338.5 1636.0 1933.5 2230.9 2528.4 2825.8 3123.3 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 86 En ambos gr√°ficos se puede observar que el tiempo de ejecuci√≥n requerido por tetracubos marchantes es claramente superior al tiempo de ejecuci√≥n de cubos marchantes, en un 25% si se aplica resoluci√≥n de ambig√ºedades y en un 30% si no se aplica. Tambi√©n se puede resaltar que el costo en tiempo de ejecuci√≥n para realizar la resoluci√≥n de ambig√ºedades en cubos marchantes es insignificante, ya que ambos algoritmos mostraron el mismo desempe√±o. Finalmente, se puede deducir que el tiempo de ejecuci√≥n del algoritmo es directamente proporcional al tama√±o del mallado generado, debido a que las curvas del tiempo de ejecuci√≥n siguen el mismo patr√≥n de la curva de la cantidad de tri√°ngulos generados. Otro aspecto importante a tomar en cuenta a la hora de evaluar un algoritmo para la extracci√≥n de isosuperficies consiste en calcular el n√∫mero de primitivas utilizadas por el algoritmo para representar el mallado final, ya que esto indicar√° la facilidad con la cual se podr√°n visualizar y manipular los mallados obtenidos. A continuaci√≥n se puede observar un gr√°fico donde se muestra la cantidad de primitivas generadas por los algoritmos de extracci√≥n de isosuperficie para el Volumen #1 (Brazo derecho): Gr√°fico 4.3: Comparaci√≥n del n√∫mero de primitivas generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #1 (Brazo derecho). Como se puede observar en el Gr√°fico 4.3, la complejidad de los modelos generados por tetracubos marchantes es aproximadamente un 145% m√°s compleja que aquellos modelos 0 1 2 3 4 5 6 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e P ri m it iv a s Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) 87 generados por cubos marchantes, se aplique o no resoluci√≥n de ambig√ºedades. Esto se debe a que tetracubos marchantes requiere dividir cada celda del volumen en tetraedros (ver Secci√≥n 2.2.2.1) para luego extraer tri√°ngulos de cada uno de ellos, mientras que cubos marchantes no requiere esta divisi√≥n previa, lo cual ocasiona que genere una salida m√°s sencilla. Tambi√©n se puede destacar que la aplicaci√≥n de resoluci√≥n de ambig√ºedades en cubos marchantes no requiere la generaci√≥n de una cantidad significativa de primitivas adicionales, lo que se debe a que los casos ambiguos son poco frecuentes en general [NIE91]. El valor elevado de primitivas generado para el isovalor 81.1 se debe a que este valor representa la densidad intermedia entre la densidad de los tejidos blandos y la de los huesos. Finalmente, se evaluaron los mallados obtenidos por los tres algoritmos utilizando las m√©tricas expuestas en la Secci√≥n 2.4.1, con el fin de predecir la calidad de la visualizaci√≥n y manipulaci√≥n que se puede obtener de estos mallados. En el siguiente gr√°fico se puede observar el porcentaje de primitivas de buena calidad generadas por los tres algoritmos a partir del Volumen #3, utilizando la relaci√≥n de aspecto como valor de referencia (ver Secci√≥n 2.4.1.2): Gr√°fico 4.4: Comparaci√≥n del n√∫mero de primitivas de buena calidad generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #3 (Mu√±eca), utilizando la relaci√≥n de aspecto como referencia. 0.0 0.5 1.0 1.5 2.0 0 5 10 15 20 25 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s % d e p ri m it iv a s d e b u e n a c a li d a d Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 88 En el Gr√°fico 4.4 se puede observar que tetracubos marchantes extrae un mallado triangular con una cantidad de primitivas de alta calidad 85% mayor en comparaci√≥n con cubos marchantes. Esto se puede confirmar en el Gr√°fico 4.5, donde se puede verificar que la calidad de los tri√°ngulos generados por tetracubos marchantes es 4% superior en promedio. Es importante recordar que la relaci√≥n de aspecto es una m√©trica propia, es decir, para las primitivas ideales el valor de la m√©trica se aproxima a 1, y para las primitivas degeneradas el valor de la m√©trica se aproxima a ‚àû (ver Secci√≥n 2.4). Gr√°fico 4.5: Comparaci√≥n de la calidad de las primitivas generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #3 (Mu√±eca), utilizando el promedio geom√©trico de la relaci√≥n de aspecto como referencia. En base al Gr√°fico 4.4 y al Gr√°fico 4.5 tambi√©n se puede deducir que la calidad del mallado generado es independiente a la cantidad de primitivas que lo componen, ya que el porcentaje de tri√°ngulos de buena calidad y el promedio geom√©trico de la calidad de √©stos no var√≠an considerablemente, a pesar del tama√±o del mallado final. 4.2. RESULTADOS OBTENIDOS DE LA EXTRACCI√ìN DE INTERVALOS DE VOLUMEN Para evaluar el desempe√±o de los algoritmos de extracci√≥n de intervalos de volumen, se realizaron extracciones de distintos intervalos de los cuatro vol√∫menes de prueba descritos en la 0.0 0.5 1.0 1.5 2.0 1 1.2 1.4 1.6 1.8 2 2.2 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s P ro m e d io G e o m √© tr ic o Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 89 Tabla 4.1, de los cuales se obtuvo el tiempo necesario para la extracci√≥n de √©stos as√≠ como la calidad de los mallados que las aproximan. En los siguientes gr√°ficos se muestra el comportamiento del tiempo de ejecuci√≥n de los distintos algoritmos de extracci√≥n de intervalos de volumen en base al isovalor extra√≠do. Gr√°fico 4.6: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #1 (Brazo derecho). 0 2 4 6 8 10 12 14 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 90 Gr√°fico 4.7: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #2 (Cabeza). En ambos gr√°ficos se puede observar que el tiempo de ejecuci√≥n requerido por tetracubos marchantes es superior en un 40% al tiempo de ejecuci√≥n de cubos marchantes, lo cual se debe a que el algoritmo propuesto realiza un procesamiento menor al realizado por tetracubos marchantes, ya que no tiene que calcular las intersecciones en las diagonales de las caras de la celda, las cuales son necesarias para dividir la celda en tetraedros. Finalmente, se puede deducir que el tiempo de ejecuci√≥n del algoritmo es directamente proporcional al tama√±o del mallado generado, debido a que las curvas del tiempo de ejecuci√≥n siguen el mismo patr√≥n de la curva de la cantidad de tetraedros generados. Otro aspecto importante a tomar en cuenta a la hora de evaluar un algoritmo para la extracci√≥n de intervalos de volumen consiste en calcular el n√∫mero de primitivas utilizadas por el algoritmo para representar el mallado final, ya que esto indicar√° la facilidad con la cual se podr√°n visualizar y manipular los mallados obtenidos. A continuaci√≥n se puede observar un gr√°fico donde se muestra la cantidad de primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen para el Volumen #1 (Brazo derecho): 0 1 2 3 4 5 6 7 8 9 10 0 0.5 1 1.5 2 2.5 3 3.5 148.7 446.2 743.6 1041.1 1338.5 1636.0 1933.5 2230.9 2528.4 2825.8 3123.3 M il lo n e s d e T e tr a e d ro s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 91 Gr√°fico 4.8: Comparaci√≥n del n√∫mero de primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #1 (Brazo derecho). Como se puede observar en el Gr√°fico 4.8, los modelos generados por el algoritmo propuesto basado en cubos marchantes s√≥lo requieren un 50% de las primitivas utilizadas por los modelos generados mediante el uso de tetracubos marchantes. Esto se debe a que tetracubos marchantes requiere dividir cada celda del volumen en tetraedros (ver Secci√≥n 2.2.2.1) para luego extraer tetraedros de cada uno de ellos, mientras que el algoritmo propuesto no requiere esta divisi√≥n previa, lo cual ocasiona que genere una salida m√°s sencilla. Como se mencion√≥ anteriormente, el valor elevado de primitivas generado para el isovalor 81.1 se debe a que este valor representa la densidad intermedia entre la densidad de los tejidos blandos y la de los huesos. Finalmente, se evaluaron los mallados obtenidos por ambos algoritmos utilizando las m√©tricas expuestas en la Secci√≥n 2.4.2, con el fin de predecir la calidad de la visualizaci√≥n y manipulaci√≥n que se puede obtener de estos mallados. En el siguiente gr√°fico se puede observar el porcentaje de m√©tricas de buena calidad generadas por ambos algoritmos a partir del Volumen #3, utilizando la relaci√≥n de aspecto como valor de referencia (ver Secci√≥n 2.4.2.1): 0 2 4 6 8 10 12 14 16 18 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e P ri m it iv a s Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) 92 Gr√°fico 4.9: Comparaci√≥n del n√∫mero de primitivas de buena calidad generadas por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #3 (Mu√±eca), utilizando la relaci√≥n de aspecto como referencia. En el Gr√°fico 4.9 se puede observar que tetracubos marchantes extrae un mallado tetra√©drico con una cantidad 35% mayor de primitivas de alta calidad en comparaci√≥n con cubos marchantes, lo cual se puede confirmar en el Gr√°fico 4.10, donde se puede verificar que la calidad promedio de los tri√°ngulos generados por tetracubos marchantes es superior en un 70%. Es importante recordar que la relaci√≥n de aspecto es una m√©trica propia, es decir, para las primitivas ideales el valor de la m√©trica se aproxima a 1, y para las primitivas degeneradas el valor de la m√©trica se aproxima a ‚àû (ver Secci√≥n 2.4). 0 1 2 3 4 5 6 7 0 10 20 30 40 50 60 70 80 90 100 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s % d e p ri m it iv a s d e b u e n a c a li d a d Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 93 Gr√°fico 4.10: Comparaci√≥n de la calidad de las primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen a partir del Volumen #3 (Mu√±eca), utilizando el promedio geom√©trico de la relaci√≥n de aspecto como referencia. En base al Gr√°fico 4.9 y al Gr√°fico 4.10 se puede deducir que la calidad del mallado generado es directamente proporcional a la cantidad de primitivas que lo componen, ya que, a medida que el tama√±o del volumen aumenta, el porcentaje de tetraedros de buena calidad aumenta y el promedio geom√©trico de la calidad de √©stos disminuye. Esto se debe a que los vol√∫menes m√°s grandes est√°n compuestos por una mayor cantidad de celdas internas 18 , las cuales generan tetraedros de buena calidad. 4.3. AN√ÅLISIS CUALITATIVO SOBRE LAS ISOSUPERFICIES EXTRA√çDAS Despu√©s de analizar cuantitativamente los resultados obtenidos por los algoritmos de extracci√≥n de isosuperficies en la Secci√≥n 4.1, se procedi√≥ a realizar un an√°lisis cualitativo de la calidad de las isosuperficies extra√≠das. Este an√°lisis consiste en observar y comparar las caracter√≠sticas de los mallados generados visualmente, con el fin de determinar cu√°l algoritmo produce el mejor resultado. 18 Una celda interna es aquella delimitada por ocho (8) v√≥xeles neutros. 0 1 2 3 4 5 6 7 1 1.5 2 2.5 3 3.5 4 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s P ro m e d io G e o m √© tr ic o Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 94 Para visualizar el resultado obtenido a partir de las superficies extra√≠das, se utilizaron los modelos de sombreado plano (flat shading) y por gradiente (gradient-shading), como se explic√≥ en la Secci√≥n 2.2.1. Para implementar la interfaz gr√°fica de usuario se utilizaron las bibliotecas Qt y OpenGL 19 , lo cual permiti√≥ la implementaci√≥n sencilla y eficiente del visualizador de isosuperficies. A continuaci√≥n se analizar√°n varias capturas de pantalla obtenidas de algunas superficies extra√≠das mediantes las t√©cnicas mencionadas anteriormente. Figura 4.1: Isosuperficies obtenidas a partir del Volumen #2 (Cabeza) utilizando cubos marchantes sin resoluci√≥n de ambig√ºedades (izquierda) y cubos marchantes con resoluci√≥n de ambig√ºedades (derecha), rasterizadas mediante el sombreado por gradiente (gradient-shading). Como se puede observar en la Figura 4.1, la salida de cubos marchantes no difiere notablemente independientemente de si se aplica resoluci√≥n de ambig√ºedades o no. Esto se debe a que la frecuencia con la que ocurren los casos ambiguos representa menos del 1% del volumen total [NIE91]. 19 http://www.opengl.org 95 Figura 4.2: Isosuperficies obtenidas a partir del Volumen #3 (Mu√±eca) utilizando cubos marchantes con resoluci√≥n de ambig√ºedades (izquierda) y tetracubos marchantes (derecha), rasterizadas mediante el sombreado plano (flat-shading). En la Figura 4.2 se puede observar la extracci√≥n de una isosuperficie proveniente del Volumen #3 (Mu√±eca) mediante el uso de cubos marchantes y tetracubos marchantes, donde se muestra la ampliaci√≥n de una secci√≥n de las superficies extra√≠das, en las cuales se observa que cubos marchantes produce una superficie con mucho menos ruido que aquella producida por tetracubos marchantes. La explicaci√≥n a este fen√≥meno se encuentra en la Secci√≥n 4.4. 4.4. AN√ÅLISIS CUALITATIVO SOBRE LOS INTERVALOS DE VOLUMEN EXTRA√çDOS Despu√©s de analizar cuantitativamente los resultados obtenidos por los algoritmos de extracci√≥n de intervalos de volumen en la Secci√≥n 4.2, se procedi√≥ a realizar un an√°lisis cualitativo de la calidad de los intervalos extra√≠dos. Este an√°lisis consiste en observar y comparar las caracter√≠sticas de los mallados generados visualmente, con el fin de determinar cu√°l algoritmo produce el mejor resultado. Para visualizar el resultado obtenido a partir de las superficies extra√≠das, se utilizaron los modelos de sombreado plano (flat shading) y por gradiente (gradient-shading), como se explic√≥ en la Secci√≥n 2.2.1. Para implementar la interfaz gr√°fica de usuario se utilizaron las bibliotecas 96 Qt y OpenGL 20 , lo cual permiti√≥ la implementaci√≥n sencilla y eficiente del visualizador de intervalos de volumen. En la Figura 4.3 se puede observar la extracci√≥n de un intervalo de volumen proveniente del Volumen #1 (Brazo derecho) mediante el uso del algoritmo propuesto basado en cubos marchantes y tetracubos marchantes, donde se muestra la ampliaci√≥n de una secci√≥n de los intervalos de volumen extra√≠dos. En estas ampliaciones se observa que el algoritmo propuesto produce un volumen con mucho menos ruido que aquel producido por tetracubos marchantes. Figura 4.3: Intervalos de volumen obtenidos a partir del Volumen #1 (Brazo derecho) utilizando cubos marchantes (izquierda) y tetracubos marchantes (derecha), rasterizadas mediante el sombreado plano (flat-shading). Este ruido en el mallado generado por tetracubos marchantes ocurre debido a la divisi√≥n adicional de la celda, la cual se requiere para su divisi√≥n en tetraedros. Este ruido se puede observar con m√°s detalle en un volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles, cuyos intervalos de volumen extra√≠dos se pueden observar en la Figura 4.4 y la Figura 4.5. 20 http://www.opengl.org 97 Figura 4.4: Intervalo de volumen extra√≠do de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles mediante tetracubos marchantes, donde los c√≠rculos rojos indican los v√©rtices adicionales generados por intersecciones en las diagonales de las caras. En la Figura 4.4 se pueden observar los v√©rtices adicionales creados por tetracubos marchantes durante la extracci√≥n del intervalo de volumen, los cuales deforman el mallado extra√≠do en cada celda, mientras que en la Figura 4.5 se observa el mismo intervalo de volumen extra√≠do utilizando cubos marchantes, el cual produce un mallado m√°s suave debido a que no utiliza las intersecciones en las diagonales de las caras. Figura 4.5: Intervalo de volumen extra√≠do de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles mediante cubos marchantes. En la Figura 4.6 se muestra la extracci√≥n de una isosuperficie de un corte del cubo sint√©tico utilizado la Figura 4.4 y la Figura 4.5 mediante el uso del algoritmo propuesto basado en cubos 98 marchantes y tetracubos marchantes. Como se puede observar, el algoritmo propuesto no requiere el punto de intersecci√≥n en la diagonal de la cara para reconstruir la isosuperficie, lo cual ocasiona que la salida generada sea mucho m√°s suave que aquella generada por tetracubos marchantes. Figura 4.6: Comparaci√≥n de la isosuperficie extra√≠da de un corte del volumen sint√©tico mediante cubos marchantes (l√≠nea anaranjada) y tetracubos marchantes (l√≠nea verde). En la Figura 4.7 en la cual se muestran dos intervalos de volumen extra√≠dos del Volumen #4 (Hip√©rbola), el primero mediante el algoritmo propuesto basado en cubos marchantes y el segundo mediante tetracubos marchantes. En esta figura se puede observar que tetracubos marchantes genera huecos en los planos de las as√≠ntotas de la hip√©rbola, lo cual no ocurre en el algoritmo propuesto. En la Figura 4.8 se puede observar un volumen sint√©tico donde se generan estos huecos, lo cual ocurre debido a los puntos adicionales que requiere tetracubos marchantes para extraer el intervalo de volumen. 99 Figura 4.7: Intervalos de volumen obtenidos a partir del Volumen #4 (Hip√©rbola) utilizando el algoritmo propuesto basado en cubos marchantes (izquierda) y tetracubos marchantes (derecha). Figura 4.8: Intervalos de volumen obtenidos a partir de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥2 v√≥xeles, utilizando el algoritmo propuesto basado en cubos marchantes (arriba) y tetracubos marchantes (abajo). 100 CAP√çTULO 5. CONCLUSIONES En este trabajo se propone un algoritmo para la extracci√≥n de intervalos de volumen basado en cubos marchantes, con el objetivo de obtener mallados tetra√©dricos de mayor calidad visual en menor tiempo. Para llevar a cabo la extracci√≥n s√≥lo se utiliza una tabla de conectividad, sin requerir el uso de ning√∫n algoritmo complejo durante el procesamiento del volumen, como tetraedrizaciones de Delaunay [GUO95] o la intersecci√≥n de poliedros [FUJ95]. El uso de algoritmos simples y una tabla de conectividad implica una implementaci√≥n m√°s sencilla y un tiempo de ejecuci√≥n menor respecto a otros algoritmos m√°s complejos. El algoritmo propuesto mostr√≥ un desempe√±o superior que el algoritmo basado en tetracubos marchantes [NIE97b], ya que genera mallados m√°s simples en un tiempo de ejecuci√≥n considerablemente menor. Adem√°s, este algoritmo no requiere una gran cantidad adicional de espacio, ya que s√≥lo requiere almacenar cuatro cortes del volumen a procesar a la vez, y una tabla de conectividad precalculada de 38 = 6561 casos. Sin embargo, el algoritmo basado en tetracubos marchantes genera mallados con primitivas de mejor calidad en promedio, lo cual se debe a que utiliza elementos lineales, como los tetraedros, para aproximar una funci√≥n lineal, mientras que el algoritmo propuesto utiliza elementos lineales para aproximar una funci√≥n hiperb√≥lica. No obstante, el algoritmo propuesto genera mallados con una mejor calidad visual que aquellos generados por el algoritmo basado en tetracubos marchantes [NIE97b], ya que no necesita utilizar las diagonales de las caras para extraer el intervalo de las celdas del volumen. Por otra parte, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para el manejo de las ambig√ºedades, ya que este asume que todos los puntos de intersecci√≥n dentro de una celda se encuentran conectados. La implementaci√≥n del manejo de ambig√ºedades permitir√≠a la generaci√≥n de modelos topol√≥gicamente correctos, lo cual es importante para algunas aplicaciones de los intervalos de volumen, como la simulaci√≥n de procesos mediante elementos finitos y aplicaciones m√©dicas. En conclusi√≥n, el algoritmo propuesto presenta diversas ventajas sobre el algoritmo basado en tetracubos marchantes, con respecto al tiempo de ejecuci√≥n y al tama√±o de los mallados 101 generados, pero ser√≠a necesario realizar comparaciones con otros algoritmos m√°s complejos, con el fin de determinar qu√© aspectos de √©ste podr√≠an ser mejorados. 102 CAP√çTULO 6. TRABAJOS A FUTURO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para el manejo de los casos ambiguos, sino que asume que todos los poliedros-ùõºùõΩ son convexos y une todos los v√≥xeles neutros dentro de la celda. La implementaci√≥n del manejo de los casos ambiguos permitir√≠a la generaci√≥n de modelos topol√≥gicamente correctos. En la Secci√≥n 3.5 se explican las consideraciones a tomar en cuenta para la resoluci√≥n de los casos ambiguos, tanto para el manejo de ambig√ºedades en las caras como ambig√ºedades internas. En las Secciones 4.2 y 4.4 se compararon los resultados obtenidos del algoritmo propuesto y la extracci√≥n de intervalos de volumen basada en tetracubos marchantes [NIE97b]. Sin embargo, no se realizaron comparaciones entre el algoritmo propuesto y las otras t√©cnicas descritas en la Secci√≥n 2.3, como la extracci√≥n basada en formas alfa [GUO95] y la extracci√≥n basada en cubos marchantes e intersecci√≥n de poliedros [FUJ95]. No obstante, se espera que el algoritmo propuesto sea m√°s r√°pido que dichos algoritmos debido a que s√≥lo se necesita indexar una tabla de conectividad, sin necesidad de recurrir a algoritmos complejos durante el procesamiento de cada celda. Como se mencion√≥ en la Secci√≥n 4.4, la comparaci√≥n cualitativa entre los algoritmos para la extracci√≥n de intervalos de volumen se realiz√≥ mediante la rasterizaci√≥n directa de los tetraedros, utilizando sombreado por gradiente y (gradient-shading) sombreado plano (flat-shading). Sin embargo, la visualizaci√≥n correcta de estos mallados se realiza mediante el uso de t√©cnicas de visualizaci√≥n directa de vol√∫menes (DVR), como por ejemplo, proyecci√≥n de tetraedros [KRA04]. La implementaci√≥n de estas t√©cnicas permitir√≠a realizar una visualizaci√≥n m√°s precisa sobre los mallados generados por los algoritmos para la extracci√≥n de intervalos de volumen. Finalmente, la implementaci√≥n desarrollada asume la variaci√≥n lineal de los isovalores en las aristas de las celdas del volumen, lo cual impide el uso de t√©cnicas num√©ricas como regula-falsi [FOR95] para el c√°lculo de los puntos de intersecci√≥n en vol√∫menes generados a partir de ecuaciones impl√≠citas. Modificar la implementaci√≥n para el uso de regula-falsi permitir√≠a obtener mallados de mejor calidad a partir de ecuaciones impl√≠citas, lo cual har√≠a innecesario el uso de altas resoluciones para aproximar dichas ecuaciones de forma correcta. 103 CAP√çTULO 7. REFERENCIAS [ANT98] H. Anton. ‚ÄúCalculus: A New Horizon, Combined‚Äù. 6ta edici√≥n. John Wiley & Sons Inc. 1998. [CAR95] B.P. Carneiro, C. Silva y A.E. Kaufman, ‚ÄúTetra-Cubes: An algorithm to generate 3D isosurfaces based upon tetrahedra‚Äù, Anais do IX SIBGRAPI, pp. 205-210, 1995. [CHE95] E.V. Chernyaev, ‚ÄúMarching Cubes 33: Construction of Topologically Correct Isosurfaces‚Äù, Reporte T√©cnico CERN CN 95-17, CERN, 1995. [D√úR88] M. J. D√ºrst, ‚ÄúLetters: Additional reference to ‚Äúmarching cubes‚Äù‚Äù, Computer Graphics, vol. 22, num. 2, pp. 72-73, 1988. [EDE90] H. Edelsbrunner y E. Mucke, ‚ÄúSimulation of Simplicity: A Technique to Cope with Degenerate Cases in Geometric Algorithms‚Äù, ACM Transactions on Graphics, vol. 9, pp. 66-104, 1990. [EDE94] H. Edelsbrunner y E. Mucke, ‚ÄúThree-Dimensional Alpha Shapes‚Äù, ACM Transactions on Graphics, vol. 13, pp. 43-72, 1994. [ELV92] T. T. Elvins, ‚ÄúA Survey of Algorithms for Volume Visualization‚Äù, Computer Graphics, vol. 26, num. 3, pp. 194-201, 1992. [FUC77] H. Fuchs, Z.M. Kedem y S.P. Uselton, ‚ÄúOptimal Surface Reconstruction from Planar Contours‚Äù, Communications of the ACM, vol. 20, num. 10, pp. 693-702, 1977. [FOR95] J.A. Ford, ‚ÄúImproved Algorithms of Illinois-type for the Numerical Solution of Nonlinear Equations‚Äù, Technical Report CSM-257, University of Essex, 1995. [FUJ95] I. Fujishiro, Y. Maeda y H. Sato, ‚ÄúInterval Volume: A Solid Fitting Technique for Volumetric Data Display and Analysis‚Äù, Proceedings of the 6th Conference on Visualization ‚Äô95, pp. 151-158, 1995. 104 [GRA72] R. L. Graham, ‚ÄúAn efficient algorithm for determining the convex hull of a planar set‚Äù, Information Processing Letters, pp. 132-133, 1972. [GRA94] R. L. Graham, D. E. Knuth y O. Patashnik, ‚ÄúConcrete Mathematics: A Foundation for Computer Science‚Äù, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1994. [GUO95] B. Guo, ‚ÄúInterval Set: A Volume Rendering Technique Generalizing Isosurface Extraction‚Äù, Proceedings of the Conference on Visualization ‚Äô95, pp. 3-10, 1995. [HER79] G.T. Herman y H.K. Liu, ‚ÄúThree-Dimensional display of Human Organs from Computed Tomograms‚Äù, Computer Graphics and Image Processing, vol. 9, num. 1, pp. 1-21, 1979. [KEP75] E. Keppel. ‚ÄúApproximating Complex Surfaces by Triangulation of Contour Lines‚Äù, IBM Journal of Research and Development, vol. 19, num. 1, pp. 2-11, 1975. [KRA04] M. Kraus, W. Qiao y D. S. Ebert, ‚ÄúProjecting Tetrahedra without Rendering Artifacts‚Äù, Proceedings of the Conference of Visualization ‚Äô04, pp. 27-34, Octubre 2004. [LEV88] M. Levoy, ‚ÄúDisplay of Surfaces from Volume Data‚Äù, IEEE Computer Graphics and Applications, vol. 8, num. 3, pp. 29-37, Julio 1988. [LEV90a] M. Levoy, ‚ÄúVolume Rendering: A Hybrid Ray Tracer for Rendering Polygon and Volume Data‚Äù, IEEE Computer Graphics and Applications, vol. 10, num. 2, pp. 33-40, Julio 1990. [LEV90b] M. Levoy, ‚ÄúEfficient Ray Tracing from Volume Data‚Äù, ACM Transactions on Graphics, vol. 9, num. 3, pp. 245-261, Julio 1990. [LOR87] W.E. Lorensen y H.E. Cline, ‚ÄúMarching Cubes: A High-Resolution 3D Surface Construction Algorithm‚Äù, SIGGRAPH 87 Conference Proceedings, Computer Graphics, vol. 21, num. 4, pp. 163-169, Julio 1987. 105 [MAX01] N. Max, ‚ÄúConsistent subdivision of convex polyhedra into tetrahedra‚Äù, Journal of Graphics Tools, vol. 6, num. 3, pp. 29-36, 2001. [MON94] C. Montani, R. Scateni y R. Scopigno. ‚ÄúA modified look-up table for implicit disambiguation of Marching Cubes.‚Äù, The Visual Computer, vol. 10, 1994. [NIE91] G.M. Nielson y B. Hamman, ‚ÄúThe Asymptotic Decider: Resolving the Ambiguity in Marching Cubes‚Äù, Proceedings of the Conference of Visualization ‚Äô91, IEEE Computer Society Press, pp. 83-90, 1991. [NIE97a] G.M. Nielson, ‚ÄúTools for Triangulations and Tetrahedrizations‚Äù, Scientific Visualization: Overviews, Methodologies, and Techniques, IEEE Computer Society Press, 1997. [NIE97b] G.M. Nielson y Junwon Sung, ‚ÄúInterval Volume Tetrahedrization‚Äù, Proceedings of the Conference of Visualization ‚Äô97, pp. 221-228, 1997. [SAW07] A.P. Sawant y C.G. Healey, ‚ÄúVisualizing Flow Data using Assorted Glyphs‚Äù. The ACM Student Journal, Crossroads, vol. 14, num. 2, pp.3-7, 2007. [SCH92] W.J. Schroeder, J.A. Zarge y W.E. Lorensen, ‚ÄúDecimation of triangle meshes‚Äù. SIGGRAPH 92 Conference Proceedings, Computer Graphics, vol. 26, pp. 65-70, Julio 1992. [SCH03] J. P. Schulze, M. Kraus, U. Lang y T. Ertl. ‚ÄúIntegrating Pre-Integration into the Shear-Warp Algorithm‚Äù. Proceedings of the 2003 Eurographics/IEEE TVCG Workshop on Volume graphics, pp. 109-118, Julio 2003. [STI07] C.J. Stimpson, C.D. Ernst, P. Knupp, P.P. P√©bay y D. Thompson, ‚ÄúThe Verdict Geometric Quality Library‚Äù, Sandia National Laboratories, SAND2007-1751, 2007. [WES89] L. Westover, ‚ÄúInteractive Volume Rendering‚Äù, Proceedings of the Chapel Hill Workshop on Volume Visualization, vol. 1, pp. 9-16, Mayo 1989. 106 [WES90] L. Westover, ‚ÄúFootprint Evaluation for Volume Rendering‚Äù, Computer Graphics, vol. 24, num. 4, pp. 367-376, 1990. [WIL92] P. Williams y N. Max. ‚ÄúA volume density optical model‚Äù. Proceedings of the 1992 Workshop on Volume Visualization, pp. 61-68, Octubre 1992. [YON95] Yong Zhou, Weihai Chen y Zesheng Tang, ‚ÄúAn elaborate ambiguity detection method for constructing isosurfaces within tetrahedral meshes‚Äù, Computer & Graphics, pp. 355-364, 1995.UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACI√ìN CENTRO DE COMPUTACI√ìN GR√ÅFICA TETRAEDRIZACI√ìN DE INTERVALOS DE VOLUMEN MEDIANTE MODIFICACI√ìN DE CUBOS MARCHANTES Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por el bachiller Jorge Luis Bernadas Saragoza para optar al t√≠tulo de Licenciado en Computaci√≥n Tutor Prof. Rhadam√©s Carmona Caracas, Abril 2009 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACI√ìN CENTRO DE COMPUTACI√ìN GR√ÅFICA ACTA DEL VEREDICTO Quienes suscriben, Miembros del Jurado designados por el Consejo de Escuela de Computaci√≥n, para examinar el Trabajo Especial de Grado, presentado por el Bachiller Jorge Bernadas, portador de la c√©dula de identidad 17.429.153, con el t√≠tulo ‚ÄúTetraedrizaci√≥n de Intervalos de Volumen mediante modificaci√≥n de Cubos Marchantes‚Äù, a los fines de cumplir con el requisito legal para optar al t√≠tulo de Licenciado en Computaci√≥n, dejan constancia de lo siguiente: Le√≠do como fue dicho trabajo por cada uno de los Miembros del Jurado, se fij√≥ el d√≠a 30 de abril de 2009, a las 9:00 AM, para que su autor lo defienda en forma p√∫blica, en el Centro de Computaci√≥n Gr√°fica, mediante la exposici√≥n oral de su contenido, y luego de la cual respondieron satisfactoriamente a las preguntas que le fueron formuladas por el Jurado, todo ello conforme a lo dispuesto en la Ley de Universidades y dem√°s normativas vigentes de la Universidad Central de Venezuela. Finalizada la defensa p√∫blica del Trabajo Especial de Grado, el jurado decidi√≥ aprobarlo. En fe de lo cual se levanta la presente Acta, en Caracas a los 30 d√≠as del mes de abril del a√±o dos mil nueve, dej√°ndose tambi√©n constancia de que actu√≥ como Coordinador del Jurado el Profesor Tutor Rhadam√©s Carmona. Prof. Rhadam√©s Carmona (Tutor) Prof. Ernesto Coto Prof. Br√≠gida Molina (Jurado Principal) (Jurado Principal) AGRADECIMIENTOS Le agradezco a mi mam√° Gloria que me haya cuidado desde el cielo todo este tiempo, y que me haya guiado para tomar siempre las decisiones correctas. Le agradezco a mi pap√° Jorge que desde peque√±o me inculc√≥ el valor de hacer las cosas bien hechas, sin mediocridades, as√≠ como los conocimientos b√°sicos necesarios para ser exitoso el d√≠a de hoy. Pap√°, t√∫ me ense√±aste que el cero es el primer entero con el que se cuenta, y no el uno como todos creen. Adem√°s, se siente bien llegar a primer grado sabiendo leer, escribir, sumar, restar y multiplicar cuando los dem√°s s√≥lo sab√≠an jugar con la plastilina. Le agradezco a mi hermano Manuel su compa√±√≠a y su cari√±o (pelaje) desde que naci√≥. Yo no me imagino c√≥mo hubiera sido mi vida como hijo √∫nico, no tendr√≠a a qui√©n ense√±arle mis logros en los juegos de computadora, en TopCoder¬Æ, y otras cosas que por m√°s simples que parezcan son las que m√°s importan. Le agradezco a mi t√≠a Rosario por cuidarnos a mi hermano y a m√≠ desde que nacimos, y por siempre estar pendiente de todo lo que necesitamos, especialmente de mi salud, ya que yo generalmente no reparo en eso. T√≠a, t√∫ me ense√±aste a utilizar la computadora a los 3 a√±os (todav√≠a me acuerdo del Donkey Kong y me da nostalgia), as√≠ como el Nintendo y el Intellivision, eso hizo que la computadora y los juegos de video siempre me llamaran la atenci√≥n. Les agradezco a mi abuela Rosario y a mi abuelo Jorge el haberme consentido desde siempre, y que hayan tenido la dedicaci√≥n de tramitar mi nacionalidad espa√±ola y el pasaporte respectivo, lo cual me ha permitido conocer Estados Unidos, Canad√°, Jap√≥n y Brasil y participar en maratones de programaci√≥n a nivel mundial. Tambi√©n les agradezco que me hayan regalado mi primera computadora port√°til hace cuatro a√±os, gracias a ella logr√© hacer mis labores de la universidad y practicar constantemente para los maratones de programaci√≥n. Le agradezco a Ana habernos cuidado desde peque√±os, y que haya sabido darnos a mi hermano y a m√≠ la atenci√≥n que hemos necesitado durante todos estos a√±os. Ana, recuerda que est√° pendiente que me ense√±es a preparar pasticho, asado negro, pernil, pavo, hallacas, entre otras delicateses que hemos podido degustar estando a t√∫ lado. Le agradezco infinitamente (DBL_INF) a mi novia Fiorella por brindarme su constante apoyo, cari√±o y amor desde que la conozco, especialmente durante el desarrollo de este trabajo de grado, desde su inicio hasta su culminaci√≥n. Sin ella no hubiera podido terminar este trabajo, gracias por todos los sandwichitos y yogurts con cereal, seguro te van a extra√±ar en el centro. Sin ella no ir√≠a a doctores y pasar√≠a todo el d√≠a haciendo problemas en TopCoder¬Æ. Sin ti, mi amor, no tuviera ni la mitad de la felicidad que tengo ahorita. Gracias a los profesores Rhadam√©s Carmona y Ernesto Coto por guiarme durante el desarrollo de este trabajo, y por hacer todas las correcciones durante el mismo. Aprend√≠ muchas cosas que no sab√≠a sobre la realizaci√≥n de un trabajo de grado y la presentaci√≥n gracias a ustedes. Gracias al Centro de Computaci√≥n Gr√°fica y a todos sus integrantes por darme su apoyo durante los √∫ltimos tres a√±os de mi carrera. Sin ese apoyo, probablemente hubiera desarrollado una p√°gina web est√°tica o una simple aplicaci√≥n empresarial como tesis de grado, en lugar de un trabajo m√°s profesional y cient√≠fico. Gracias a Carlos Gu√≠a por ser buen amigo y por decirme hace cuatro a√±os que deb√≠a entrenar seriamente para los maratones. En verdad, con los maratones de programaci√≥n he aprendido muchos m√°s t√≥picos interesantes que a lo largo de la carrera, y esto es lo que realmente me diferencia de todos los dem√°s graduandos. Los agradecimientos a los amigos es una de las partes m√°s dif√≠ciles de escribir, sencillamente porque podr√≠a duplicar el tama√±o del documento si escribiera algo para cada uno. Adem√°s, algo que he aprendido de pensar matem√°ticamente es que definir los conjuntos por compresi√≥n es m√°s f√°cil y menos propenso a errores que definirlos por extensi√≥n. As√≠ que, para todo ùë•ùëñ en mi conjunto ùê¥ de amigos, le agradezco a ùë•ùëñ que siempre me haya apoyado durante toda la carrera y que siempre est√© ah√≠, tanto para las buenas como para las malas. <sarcasm> Muchas gracias a control de estudios por mover la fecha tope de presentaci√≥n a un mes antes de lo previsto. De verdad que eso motiva saludablemente a los futuros graduandos. </sarcasm> Disclaimer: The only feelings I had while the development and writing of this thesis were frustration, regret and disappointment. I should have taken something simpler and get my degree long long time ago; Outro: I still do not understand the fuss about finishing the thesis, the supposed happiness feeling that I should be feeling now. I think that winning the SRM 407 is going to be a lot more exciting than finally presenting this work. I just want to finish this and dedicate my time to more important stuff, like my family, my beautiful and lovable girlfriend and programming contests. Here is a short list of the things I need to do: ÔÇ∑ Get married with Fiore and raise a lot of children with her. ÔÇ∑ Get in contact with my friends again (this thesis made me a loner). ÔÇ∑ Go to doctors to see if the thesis left some permanent physical damage. ÔÇ∑ Lower my weight by at least 20Kg. and do some not computer-related exercises. ÔÇ∑ Learn how to drive, how to cook and first aids. ÔÇ∑ Learn more algorithms for programming contests. ÔÇ∑ Raise my TopCoder¬Æ Algorithm Rating to 2800 again. ÔÇ∑ Other things I cannot remember right now. Sorry for the bad puns. ÔÄ≠ Because I can. jbernadas RESUMEN T√çTULO: Tetraedrizaci√≥n de Intervalos de Volumen mediante modificaci√≥n de Cubos Marchantes. AUTOR: Jorge Bernadas. TUTOR: Prof. Rhadam√©s Carmona. Los dos m√©todos principales para la visualizaci√≥n de datos volum√©tricos consisten en la visualizaci√≥n directa de vol√∫menes y la extracci√≥n de isosuperficies. El primer m√©todo ofrece la ventaja de mostrar todo el volumen en contexto, mientras que el segundo m√©todo s√≥lo muestra una parte del volumen fuera de contexto. Sin embargo, la extracci√≥n de isosuperficies requiere menos poder de c√≥mputo en comparaci√≥n con la visualizaci√≥n directa de volumen. Otro m√©todo para la visualizaci√≥n de datos volum√©tricos consiste en un h√≠brido entre ambas t√©cnicas, el cual reconstruye y muestra subvol√∫menes del volumen mediante el uso de mallados tetra√©dricos y t√©cnicas de visualizaci√≥n directa de vol√∫menes para el despliegue. Adicionalmente, se puede almacenar el isovalor en cada v√©rtice del mallado obtenido, lo que permite el uso de dichos mallados para realizar simulaciones mediante el uso de elementos finitos. En la actualidad, los algoritmos existentes para la extracci√≥n de intervalos de volumen son complicados o generan una alta cantidad de primitivas. En este trabajo se propone un algoritmo basado en la adaptaci√≥n de cubos marchantes para extraer intervalos de volumen en lugar de isosuperficies, el cual tiene un tiempo de respuesta inferior a los algoritmos existentes y genera un mallado final con una menor cantidad de primitivas sin necesidad de recurrir a algoritmos complejos durante la extracci√≥n del intervalo de cada celda del volumen. PALABRAS CLAVE: Datos Volum√©tricos, Isosuperficies, Intervalos de Volumen i TABLA DE CONTENIDOS Cap√≠tulo 1. Introducci√≥n .............................................................................................................. 1 1.1. Objetivo General .............................................................................................................. 3 1.2. Objetivos Espec√≠ficos ....................................................................................................... 4 Cap√≠tulo 2. Marco Te√≥rico .......................................................................................................... 5 2.1. Visualizaci√≥n de vol√∫menes de datos ............................................................................... 5 2.1.1. Caracter√≠sticas de los vol√∫menes de datos .............................................................. 6 2.1.1.1. Fuentes de datos volum√©tricos ........................................................................ 6 2.1.1.2. Tipos de datos volum√©tricos ........................................................................... 7 2.1.1.3. V√≥xeles y celdas ............................................................................................. 7 2.1.2. M√©todos para la visualizaci√≥n de vol√∫menes .......................................................... 8 2.1.3. Pasos generales para la visualizaci√≥n de vol√∫menes .............................................. 9 2.1.3.1. Adquisici√≥n de datos ...................................................................................... 9 2.1.3.2. Clasificaci√≥n de los datos ............................................................................... 9 2.1.3.3. Recorrido de los datos .................................................................................. 10 2.1.3.4. Visualizaci√≥n y sombreado ........................................................................... 10 2.1.4. Algoritmos para la visualizaci√≥n de vol√∫menes ................................................... 11 2.1.4.1. Extracci√≥n de isosuperficies ......................................................................... 11 2.1.4.2. Visualizaci√≥n directa de volumen ................................................................ 13 2.2. Extracci√≥n de isosuperficies ........................................................................................... 16 2.2.1. Cubos Marchantes ................................................................................................. 18 2.2.1.1. Ventajas y desventajas de cubos marchantes ............................................... 20 2.2.1.2. Modelos topol√≥gicamente correctos ............................................................. 21 2.2.1.3. Errores topol√≥gicos de cubos marchantes .................................................... 23 2.2.1.4. M√©todo de decisi√≥n asint√≥tica para cubos marchantes ................................. 25 2.2.1.5. Resoluci√≥n de la ambig√ºedad interna ........................................................... 28 2.2.2. Tetracubos Marchantes ......................................................................................... 30 2.2.2.1. Divisi√≥n de la celda en tetraedros ................................................................. 30 2.2.2.2. Triangulaci√≥n de un tetraedro ....................................................................... 32 2.3. Extracci√≥n de Intervalos de volumen ............................................................................. 35 2.3.1. Extracci√≥n por medio de formas alfa .................................................................... 36 2.3.1.1. Complejos de simplices ................................................................................ 37 ii 2.3.1.2. Formas alfa ................................................................................................... 37 2.3.1.3. Construcci√≥n de las formas alfa ................................................................... 38 2.3.2. Extracci√≥n por medio de Cubos Marchantes ........................................................ 40 2.3.2.1. Extracci√≥n local del intervalo de volumen ................................................... 41 2.3.2.2. Extracci√≥n global del intervalo de volumen ................................................. 44 2.3.3. Extracci√≥n por medio de Tetracubos Marchantes ................................................. 45 2.3.3.1. Extracci√≥n del poliedro alfa-beta .................................................................. 46 2.3.3.2. Tetraedrizaci√≥n del poliedro alfa-beta .......................................................... 48 2.4. M√©tricas de calidad ......................................................................................................... 54 2.4.1. M√©tricas de calidad para tri√°ngulos ...................................................................... 55 2.4.1.1. Relaci√≥n de aspecto ...................................................................................... 56 2.4.1.2. Proporci√≥n de aristas .................................................................................... 57 2.4.1.3. Proporci√≥n de radios ..................................................................................... 57 2.4.2. M√©tricas de calidad para tetraedros ....................................................................... 57 2.4.2.1. Relaci√≥n de aspecto ...................................................................................... 59 2.4.2.2. Proporci√≥n de aristas .................................................................................... 59 2.4.2.3. Proporcionalidad de radios ........................................................................... 60 2.4.3. M√©tricas para conjuntos de primitivas .................................................................. 60 Cap√≠tulo 3. Extracci√≥n de intervalos de volumen mediante modificaci√≥n de cubos marchantes .............................................................................................................. 62 3.1. Algoritmo para la extracci√≥n del intervalo de volumen ................................................. 62 3.2. Ventajas y desventajas del algoritmo propuesto ............................................................ 66 3.3. Generaci√≥n de la tabla de conectividad .......................................................................... 67 3.3.1. Creaci√≥n de la celda sint√©tica ................................................................................ 68 3.3.2. Extracci√≥n del poliedro alfa-beta de la celda sint√©tica.......................................... 69 3.3.3. Tetraedrizaci√≥n del poliedro alfa-beta .................................................................. 73 3.4. Fase de post-procesamiento ............................................................................................ 75 3.5. Consideraciones para el manejo de casos ambiguos ...................................................... 76 3.5.1. Modelos topol√≥gicamente correctos ..................................................................... 77 3.5.2. Manejo de ambig√ºedades en las caras de la celda ................................................ 79 3.5.3. Salida del algoritmo propuesto ............................................................................. 81 Cap√≠tulo 4. Implementaci√≥n y Pruebas ..................................................................................... 83 4.1. Resultados obtenidos de la extracci√≥n de isosuperficies ................................................ 84 iii 4.2. Resultados obtenidos de la extracci√≥n de intervalos de volumen .................................. 88 4.3. An√°lisis cualitativo sobre las isosuperficies extra√≠das .................................................... 93 4.4. An√°lisis cualitativo sobre los intervalos de volumen extra√≠dos ...................................... 95 Cap√≠tulo 5. Conclusiones ........................................................................................................ 100 Cap√≠tulo 6. Trabajos a Futuro .................................................................................................. 102 Cap√≠tulo 7. Referencias ........................................................................................................... 103 1 CAP√çTULO 1. INTRODUCCI√ìN En la actualidad, los cient√≠ficos utilizan las herramientas computacionales para visualizar los datos con los que trabajan, para as√≠ poder realizar el an√°lisis correspondiente. Una de las ramas de la visualizaci√≥n que ha tenido el mayor auge en los √∫ltimos a√±os es la visualizaci√≥n de vol√∫menes, que consiste en el despliegue de uno o varios conjuntos de datos tridimensionales en la pantalla, de forma que el usuario pueda entenderlos e interpretarlos satisfactoriamente. Todos los algoritmos existentes para la visualizaci√≥n de vol√∫menes est√°n basados en una de dos t√©cnicas generales: visualizaci√≥n directa de volumen o extracci√≥n de isosuperficies. La primera t√©cnica considera todo el volumen a la vez, generando im√°genes semitransparentes de alta calidad, lo cual requiere gran poder de procesamiento para un despliegue en tiempo real. La segunda t√©cnica s√≥lo reconstruye y muestra isosuperficies del volumen, lo cual permite desplegar los datos a una velocidad superior, pero √©stos se muestran descontextualizados, lo cual podr√≠a ser un problema para el an√°lisis por parte del usuario. Otro enfoque consiste en un h√≠brido entre ambas t√©cnicas, el cual reconstruye y muestra subvol√∫menes del volumen mediante el uso de mallados tetra√©dricos y t√©cnicas de visualizaci√≥n directa de vol√∫menes para el despliegue, lo cual permite visualizar la informaci√≥n requerida en contexto con un mejor tiempo de respuesta al compararlo con el despliegue del volumen completo. Adicionalmente, se puede almacenar el isovalor en cada v√©rtice del mallado obtenido, lo que permite el uso de dichos mallados para realizar simulaciones mediante el uso de elementos finitos. En la actualidad, los algoritmos existentes para la extracci√≥n de intervalos de volumen poseen una alta complejidad o generan una alta cantidad de primitivas. Por ejemplo, Guo propone un m√©todo basado en tetraedrizaciones de Delaunay [GUO95], el cual consta de dos pasos principales: primero, la obtenci√≥n de una nube de puntos a partir del volumen de datos, la cual estar√° compuesta por las muestras que se encuentran dentro del intervalo ùõº, ùõΩ a extraer y aquellos puntos donde las isosuperficies ùëÜùõº y ùëÜùõΩ intersectan al volumen, donde: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº ùëÜùõΩ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõΩ 2 El segundo paso del algoritmo consiste en la obtenci√≥n de la triangulaci√≥n de Delaunay de la nube de puntos extra√≠da del volumen. Este algoritmo posee una alta complejidad, debido a que el procedimiento para calcular la triangulaci√≥n de Delaunay en tres dimensiones es complicado de programar y es muy lento para la extracci√≥n de intervalos en vol√∫menes grandes. Adem√°s, el uso de tetraedrizaciones de Delaunay no proporciona ventaja alguna al momento de la extracci√≥n de los tetraedros del intervalo, debido a que √©stos tienden a degenerarse en las celdas intersectadas por las isosuperficies ùëÜùõº y ùëÜùõΩ . Otro algoritmo para la extracci√≥n de intervalos de volumen fue propuesto por Fuji, Maeda y Sato [FUJ95], que consiste en extraer el intervalo de cada celda mediante la intersecci√≥n de dos intervalos infinitos ùõº , ‚àû y ‚àû , ùõΩ , los cuales se obtienen mediante el uso de una modificaci√≥n de Cubos Marchantes que calcula poliedros en lugar de tri√°ngulos, lo cual implica la necesidad de intersectar poliedros durante el procesamiento de cada celda. Para la resoluci√≥n de los casos ambiguos, se pueden utilizar los m√©todos propuestos por Nielson y Hamann [NIE91] y por Chernyaev [CHE95] al momento de generar la estructura de la tabla de casos. Sin embargo, la complicaci√≥n del algoritmo se encuentra al momento de realizar la intersecci√≥n de los poliedros, debido a que √©ste debe ser lo suficientemente general como para intersectar conjuntos de poliedros no convexos, lo cual, al igual que el algoritmo anterior, incrementa el tiempo de ejecuci√≥n considerablemente. Adem√°s, el algoritmo est√° dise√±ado para extraer un mallado triangular que encierre aquella parte del volumen dentro del intervalo ùõº, ùõΩ , lo cual no permite una representaci√≥n adecuada para las celdas internas del intervalo. Una alternativa a procesar cada celda directamente, sea para la extracci√≥n de isosuperficies o intervalos de volumen, consiste en subdividir cada una de √©stas en tetraedros, los cuales ser√°n procesados independientemente [CAR95]. Este algoritmo, llamado Tetracubos Marchantes, permite simplificar el an√°lisis de casos posibles de intersecci√≥n, ya que un tetraedro consiste √∫nicamente de cuatro (4) v√©rtices y no presenta ambig√ºedades durante el procesamiento. En 1997, Nielson propone otro algoritmo para la extracci√≥n de intervalos de volumen [NIE97b], el cual consiste en extender el algoritmo de los Tetracubos Marchantes para extraer el intervalo del volumen de cada uno de los tetraedros de las celdas mediante el uso de una tabla de 34 = 81 casos, la cual indica los tetraedros a generar para cada uno de los casos posibles de 3 intersecci√≥n entre el intervalo y un tetraedro del volumen. Las ventajas principales de este algoritmo propuesto por Nielson radican en la sencillez del mismo, la peque√±a cantidad de casos en la tabla y la ausencia de posibles ambig√ºedades en el mismo, lo cual acelera la extracci√≥n del intervalo del volumen. Sin embargo, este algoritmo genera una salida compleja dif√≠cil de visualizar por la alta cantidad de primitivas generadas. Esto se debe a que cada celda del volumen debe ser dividida en cinco o m√°s tetraedros y cada uno de √©stos puede generar hasta seis primitivas de salida, por lo que en el peor caso se pueden generar hasta treinta tetraedros por cada celda del volumen. Por todo lo mencionado anteriormente, se propone un algoritmo para la extracci√≥n de intervalos de volumen basado en cubos marchantes, el cual procese cada celda directamente mediante una tabla de conectividad, sin necesidad de dividir cada celda en tetraedros ni de recurrir a algoritmos complejos durante el procesamiento de cada celda. Debido a esto, se presume que el algoritmo propuesto generar√° menos tetraedros que el algoritmo propuesto por Nielson [NIE97b] y ser√° m√°s eficiente que los m√©todos propuestos por Guo [GUO95] y Fuji et al. [FUJ95]. Con el objetivo de analizar el desempe√±o del algoritmo propuesto, se implementar√° el algoritmo propuesto por Nielson [NIE97b] y se comparar√°n los mallados obtenidos mediante las m√©tricas desarrolladas por el grupo Verdict [STI07], las cuales permiten realizar an√°lisis cuantitativos sobre mallados triangulares y tetra√©dricos. Finalmente, se implementar√°n las versiones correspondientes para la extracci√≥n de isosuperficies, lo cual permitir√° confirmar los resultados obtenidos ya que se espera que ambos m√©todos tengan desempe√±os similares independientemente del tipo de mallado a extraer. 1.1. OBJETIVO GENERAL Dise√±ar e implementar un algoritmo para la extracci√≥n de intervalos de volumen mediante la adaptaci√≥n de Cubos Marchantes, utilizando una tabla de conectividad que indique los tetraedros a generar en cada caso posible. 4 1.2. OBJETIVOS ESPEC√çFICOS ÔÇ∑ Implementar Cubos Marchantes [LOR87] con resoluci√≥n de ambig√ºedades [NIE91] [CHE95] para la extracci√≥n de isosuperficies. ÔÇ∑ Implementar Tetracubos Marchantes [CAR95] para la extracci√≥n de isosuperficies. ÔÇ∑ Implementar un algoritmo para tetraedrizar un poliedro convexo, para cada caso posible de intersecci√≥n entre una celda y el intervalo, el cual ser√° utilizado para generar la tabla de casos. ÔÇ∑ Dise√±ar e implementar un algoritmo para la extracci√≥n del intervalo de volumen en base a la tabla de casos generada anteriormente. ÔÇ∑ Dise√±ar e implementar una aplicaci√≥n de prueba que permita la carga de un volumen, as√≠ como la extracci√≥n de isosuperficies e intervalos de volumen a partir del mismo. ÔÇ∑ Evaluar resultados obtenidos en la extracci√≥n de isosuperficies y en la extracci√≥n de intervalos de volumen mediante el uso de las m√©tricas dise√±adas por el grupo Verdict [STI07]. 5 CAP√çTULO 2. MARCO TE√ìRICO A continuaci√≥n se presenta una visi√≥n general del proceso de visualizaci√≥n de datos volum√©tricos, as√≠ como una breve descripci√≥n de algunos algoritmos existentes para el extracci√≥n de isosuperficies y la extracci√≥n de intervalos de volumen, para terminar con la descripci√≥n de algunas m√©tricas utilizadas para evaluar la calidad de mallados triangulares y tetra√©dricos. 2.1. VISUALIZACI√ìN DE VOL√öMENES DE DATOS Un volumen de datos se define como un conjunto de datos ubicados en ‚Ñú3, los cuales generalmente est√°n definidos sobre una malla cartesiana uniforme regular con uno o m√°s atributos escalares y, posiblemente, uno o m√°s atributos vectoriales en cada v√©rtice de la malla. El proceso de visualizaci√≥n de vol√∫menes de datos es el conjunto de pasos llevados a cabo para proyectar un volumen de datos hacia un plano imagen bidimensional, con el prop√≥sito de entender la estructura del mismo [ELV92]. Los cient√≠ficos utilizan las im√°genes obtenidas para adquirir informaci√≥n y conocimiento de los datos producidos por experimentos, as√≠ como para compartir sus experiencias con otros cient√≠ficos e instituciones. Para poder alcanzar este objetivo, las t√©cnicas de visualizaci√≥n deben ofrecer una representaci√≥n entendible de los datos, as√≠ como una r√°pida manipulaci√≥n y despliegue de los mismos que permita una interacci√≥n satisfactoria con el usuario. En la actualidad, la visualizaci√≥n de vol√∫menes se utiliza ampliamente en la medicina, astrof√≠sica, qu√≠mica, microscop√≠a, ingenier√≠a mec√°nica, pruebas no destructivas y otras √°reas de la ciencia y la ingenier√≠a. Entre los datos que los cient√≠ficos e ingenieros almacenan como vol√∫menes se encuentran densidad, presi√≥n, temperatura, carga electrost√°tica, calor, velocidad, entre otros. Como se puede observar, los datos almacenados tienen caracter√≠sticas muy diferentes, por lo cual algunos m√©todos para la visualizaci√≥n de vol√∫menes proporcionan buenos resultados para ciertos tipos de datos pero no para otros. A continuaci√≥n se explicar√°n las caracter√≠sticas de los distintos vol√∫menes de datos existentes, la clasificaci√≥n de las distintas t√©cnicas para visualizarlos, as√≠ como los pasos m√°s comunes en los algoritmos para llevar a cabo este proceso. 6 2.1.1. CARACTER√çSTICAS DE LOS VOL√öMENES DE DATOS Los vol√∫menes de datos pueden ser clasificados en base a diferentes aspectos, entre los que se consideran: la fuente de donde han sido obtenidos, el tipo de dato que almacenan y si tratan el volumen como un conjunto de v√≥xeles o como un arreglo de celdas. A continuaci√≥n se explican los aspectos que son tomados en cuenta en cada tipo de clasificaci√≥n. 2.1.1.1. FUENTES DE DATOS VOLUM√âTRICOS El primer paso necesario para estudiar determinados fen√≥menos basados en el an√°lisis de vol√∫menes de datos consiste en la obtenci√≥n de los mismos. Estos datos generalmente son obtenidos mediante el escaneo (scanning) del material de inter√©s utilizando Imagenolog√≠a por Resonancia Magn√©tica (MRI), Tomograf√≠a Computarizada (CT), Tomograf√≠a por Emisi√≥n de Positrones (PET) y Ultrasonidos. Otra fuente de datos frecuentemente usada por los cient√≠ficos consiste en los resultados de simulaciones de experimentos reales 1 , con el fin de contrastar sus resultados con aquellos obtenidos en el experimento realizado. Sin embargo, hay ocasiones en las cuales no se puede disponer de los datos del experimento real, debido a que √©ste puede ser muy grande, muy peque√±o, muy r√°pido o muy lento como para ser observado, en cuyo caso s√≥lo se puede estudiar el fen√≥meno mediante los datos obtenidos de la simulaci√≥n. Los datos volum√©tricos tambi√©n pueden ser generados mediante la voxelizaci√≥n de objetos geom√©tricos, el uso de herramientas de edici√≥n de vol√∫menes o de programas para la generaci√≥n de vol√∫menes mediante m√©todos estoc√°sticos. No obstante, los datos volum√©tricos pueden ser tratados de forma similar sin importar la fuente de la que hayan sido obtenidos [ELV92]. Generalmente, los datos a visualizar provienen de una √∫nica fuente, pero en ciertos casos es preferible obtenerlos de varias fuentes diferentes, debido a que la calidad e informaci√≥n aportada por estos depende de la forma en la que han sido capturados. Por ejemplo, para facilitar la detecci√≥n del c√°ncer se utiliza la t√©cnica PET-CT Fusion, la cual consiste en correlacionar los 1 Estos experimentos generalmente se realizan mediante el uso de elementos finitos y din√°mica de fluidos. 7 datos obtenidos de una tomograf√≠a con los datos obtenidos de un PET 2 , el cual se especializa en detectar √°reas con alta actividad metab√≥lica. De esta forma, en la tomograf√≠a se pueden observar resaltadas aquellas partes donde el c√°ncer se ha esparcido, ya que la mayor√≠a de los tejidos cancerosos presentan una alta actividad metab√≥lica con respecto a los tejidos normales. 2.1.1.2. TIPOS DE DATOS VOLUM√âTRICOS Dependiendo del √°rea en que se est√© trabajando y de la fuente de donde provienen los datos, los valores almacenados en el volumen pueden diferir en varios aspectos, entre los cuales se encuentran el rango v√°lido, el tipo base ‚Äìenteros, flotantes, n√∫meros complejos‚Äì y su cardinalidad. Cuando la cardinalidad de los datos es uno, se dice que los datos son escalares simples, en los dem√°s casos se dice que los datos son vectoriales. Es importante realizar esta distinci√≥n porque los m√©todos utilizados para el despliegue de datos vectoriales deben ser capaces de mostrar toda la informaci√≥n disponible, sin dificultar el entendimiento por parte del usuario. Una forma de desplegar datos vectoriales tridimensionales es visualizando un corte a la vez con flechas en cada punto de la malla, cuya direcci√≥n indica la direcci√≥n del dato vectorial y cuyo color indica la magnitud del mismo o cualquier otro valor escalar. En vez de flechas, tambi√©n se pueden utilizar otros elementos como l√≠neas, flechas y tri√°ngulos, y se puede enlazar el brillo, el color, la direcci√≥n y la transparencia de los elementos a distintos atributos del volumen, lo que permite mostrar la mayor cantidad de datos a la vez de forma sencilla [SAW07]. 2.1.1.3. V√ìXELES Y CELDAS Los vol√∫menes de datos son usualmente tratados como un conjunto de v√≥xeles o como un arreglo de celdas. El enfoque mediante v√≥xeles establece que los valores de los atributos del volumen se calculan en base a la muestra m√°s cercana. Por lo tanto, un v√≥xel es la regi√≥n cuyos puntos son m√°s cercanos a una muestra en espec√≠fico. En algunos algoritmos la contribuci√≥n del v√≥xel a la imagen disminuye a medida que la distancia del centro de la regi√≥n de influencia aumenta. Este enfoque tiene la ventaja de no inferir el comportamiento de los datos entre los 2 PET: Positron Emission Tomography, Tomograf√≠a por Emisi√≥n de Positrones. 8 puntos de la malla, es decir, solamente utiliza valores conocidos de los datos para generar las im√°genes. El enfoque por celdas interpreta el volumen como una colecci√≥n de hexaedros delimitados por los puntos de la malla, cuyos valores var√≠an dentro de ellas. Este enfoque intenta estimar los valores dentro de la celda mediante interpolaci√≥n entre los valores en las esquinas de la celda, donde se puede utilizar interpolaci√≥n trilineal o interpolaci√≥n bic√∫bica [ELV92]. Las im√°genes generadas mediante este enfoque son mucho m√°s suaves que aquellas generadas mediante el enfoque por v√≥xeles. Sin embargo, como generalmente la funci√≥n subyacente no es conocida, es imposible verificar la validez de la interpolaci√≥n utilizada para evaluar el volumen entre puntos del mallado discreto, por lo que se debe asumir que la t√©cnica de interpolaci√≥n es v√°lida para que las im√°genes generadas se consideren correctas. 2.1.2. M√âTODOS PARA LA VISUALIZACI√ìN DE VOL√öMENES Los algoritmos de visualizaci√≥n de vol√∫menes son clasificados en dos categor√≠as: algoritmos de visualizaci√≥n directa de volumen (direct volume rendering o DVR) y algoritmos de extracci√≥n de isosuperficies (surface fitting o SF). Los algoritmos basados en DVR incluyen trazado de rayos (ray-casting), shear-warp, m√©todos de preintegraci√≥n, splatting y despliegue de V-buffer, los cuales est√°n caracterizados por aplicar elementos directamente en la imagen sin utilizar primitivas geom√©tricas como representaci√≥n intermedia [ELV92]. Estos m√©todos son apropiados para crear im√°genes a partir de vol√∫menes de datos que contengan l√≠mites difusos como nubes, fluidos y gases. La principal desventaja de usar DVR es que el volumen de datos debe ser recorrido por completo cada vez que una imagen tenga que ser desplegada, por lo que generalmente se realiza una pasada en baja resoluci√≥n de los datos de forma tal que el usuario pueda verificar los par√°metros r√°pidamente, para despu√©s realizar el despliegue con alta resoluci√≥n una vez los par√°metros sean confirmados. Los algoritmos basados en SF usualmente ajustan primitivas como pol√≠gonos o parches a superficies de contorno con valor constante en vol√∫menes de datos. El primer paso consiste en la elecci√≥n de un umbral por parte del usuario, el cual es utilizado para ajustar primitivas geom√©tricas a los contornos en el volumen que sean iguales al umbral. Este enfoque incluye 9 algoritmos como conexi√≥n de contornos (contour connecting) [KEP75], cubos marchantes (marching cubes) [LOR87], tetracubos marchantes (marching tetracubes) [CAR95], entre otros. 2.1.3. PASOS GENERALES PARA LA VISUALIZACI√ìN DE VOL√öMENES A pesar de la variedad de algoritmos existentes para la visualizaci√≥n de vol√∫menes, la mayor√≠a de los pasos involucrados son comunes en ellos. Generalmente, los algoritmos difieren en la forma en que implementan cada uno de dichos pasos, los cuales se explican a continuaci√≥n. 2.1.3.1. ADQUISICI√ìN DE DATOS El primer paso en cualquier procedimiento para la visualizaci√≥n de datos consiste en la obtenci√≥n y preprocesamiento de √©stos, de forma que se puedan obtener mejores resultados visuales. Este preprocesamiento consiste en modificar los valores para que cubran una buena distribuci√≥n de valores, tengan altos contrastes y est√©n libres de ruido y valores fuera de rango. Finalmente, en algunos algoritmos [GUO95] es necesario que los datos tengan la misma proporci√≥n espacial que el objeto de estudio, de forma que las im√°genes desplegadas no aparezcan deformadas a la hora de visualizar el volumen. Cuando la proporci√≥n del objeto y de los datos no es la misma, puede ser necesario interpolar dos cortes para obtener uno nuevo, interpolar muestras para obtener muestras faltantes, o convertir un mallado irregular a un mallado cartesiano regular uniforme. 2.1.3.2. CLASIFICACI√ìN DE LOS DATOS La clasificaci√≥n de los datos consiste en elegir la forma en que los datos deben ser desplegados en base a sus valores. Este paso es llevado a cabo por el usuario, y el procedimiento a realizar depende del algoritmo utilizado para visualizar los datos. Si el algoritmo est√° basado en SF, el usuario debe elegir el umbral a extraer, el cual consiste en un valor real que representa el valor a ajustar por la isosuperficie resultante. Cuando el algoritmo est√° basado en DVR, el usuario debe configurar la funci√≥n de transferencia, la cual consiste en una funci√≥n que relaciona un color y factor de absorci√≥n a cada valor posible que puedan tener los atributos del volumen (ver Secci√≥n 2.1.4.2 para m√°s detalles sobre el uso de la funci√≥n de transferencia en DVR). 10 La clasificaci√≥n de los datos es uno de los pasos m√°s dif√≠ciles que debe llevar a cabo el usuario, porque es necesario que √©ste tenga experiencia clasificando los datos y que el sistema proporcione una respuesta r√°pida, debido a que este procedimiento est√° basado en intento y error. Una soluci√≥n para dar respuesta r√°pida al usuario consiste en ofrecer una vista con menor resoluci√≥n mientras se realiza el proceso de clasificaci√≥n, y generar una imagen refinada despu√©s que el usuario confirma que ha finalizado. 2.1.3.3. RECORRIDO DE LOS DATOS Despu√©s de configurar la clasificaci√≥n del volumen de datos, se deben generar las im√°genes recorriendo los datos. Existen dos formas de recorrer el volumen: en orden de objeto (object- order), que consiste en calcular la contribuci√≥n de cada elemento del volumen a los p√≠xeles de la imagen; o en orden de imagen (image-order), que consiste en determinar el color en cada p√≠xel de la imagen, buscando los elementos del volumen que contribuyen a cada uno de estos [ELV92]. Los recorridos en orden de objeto pueden ir de adelante hacia atr√°s (front-to-back) o de atr√°s hacia adelante (back-to-front). Recorrer el modelo de adelante hacia atr√°s tiene la ventaja de que los elementos en la parte de atr√°s no deben ser visitados si los de adelante ya han creado una imagen lo suficientemente opaca [ELV92]. Los recorridos en orden de imagen generalmente proceden de arriba hacia abajo, de izquierda a derecha. Tambi√©n se pueden calcular los p√≠xeles en orden aleatorio, de forma que el usuario observe como la imagen es refinada mientras los p√≠xeles faltantes son calculados. 2.1.3.4. VISUALIZACI√ìN Y SOMBREADO Para visualizar un volumen de datos se puede utilizar tanto proyecci√≥n ortogonal como proyecci√≥n perspectiva, sin importar que el algoritmo est√© basado en DVR o en SF. Sin embargo, el uso de proyecci√≥n ortogonal asegura que el usuario no se confunda al observar los datos deformados por la transformaci√≥n perspectiva. No obstante, cuando no se utiliza perspectiva, se deben incluir otras caracter√≠sticas que le permitan al usuario percibir la profundidad de los elementos, tal como niebla por profundidad, atenuaci√≥n por distancia o estereoscop√≠a [ELV92]. 11 Para realizar el sombreado en los algoritmos basados en DVR y en SF generalmente se utiliza sombreado por gradiente (gradient shading), el cual consiste en implementar un modelo de iluminaci√≥n est√°ndar, como Phong o Blinn, utilizando el gradiente normalizado de los datos como vector normal. Para calcular los gradientes dentro de una celda se utiliza interpolaci√≥n de los gradientes en las ocho esquinas de la celda, donde el gradiente en un punto de la malla se calcula por diferencias finitas entre los puntos adyacentes en cada direcci√≥n [LOR87]. 2.1.4. ALGORITMOS PARA LA VISUALIZACI√ìN DE VOL√öMENES A continuaci√≥n se explican algunos algoritmos para la visualizaci√≥n de vol√∫menes, los cuales se encuentran clasificados en base al m√©todo utilizado para desplegar el volumen, ya sea mediante visualizaci√≥n directa de volumen (DVR) o extracci√≥n de isosuperficies (SF). 2.1.4.1. EXTRACCI√ìN DE ISOSUPERFICIES Los algoritmos de extracci√≥n de isosuperficies consisten en el c√°lculo de una representaci√≥n intermedia que se ajuste a las partes del volumen que se desean desplegar. Las partes que se desean desplegar son elegidas mediante el uso de un umbral, el cual especifica a qu√© isovalor se deben ajustar las primitivas calculadas. Las primitivas utilizadas como representaci√≥n intermedia generalmente son f√°ciles de desplegar por hardware gr√°fico est√°ndar, como lo son los mallados triangulares y los cuadril√°teros [ELV92]. A continuaci√≥n se explicar√°n tres algoritmos para la extracci√≥n de isosuperficies, entre los cuales se encuentran la conexi√≥n de contornos, el algoritmo de los cubos opacos, el algoritmo de los cubos marchantes y el algoritmo de los tetracubos marchantes. A. CONEXI√ìN DE CONTORNOS La conexi√≥n de contornos (contour-connecting) fue uno de los primeros algoritmos inventados para la visualizaci√≥n de vol√∫menes, el cual consiste en calcular un contorno cerrado en cada corte y conectar los contornos de cada par de cortes adyacentes [KEP75][FUC77]. Este algoritmo comienza calculando el contorno de cada corte en el valor especificado como umbral por el usuario. Anteriormente este procedimiento se realizaba a mano, pero las t√©cnicas actuales de procesamiento de im√°genes permiten la extracci√≥n autom√°tica del contorno. 12 Una vez que se tienen todos los contornos, el problema se reduce a conseguir una triangulaci√≥n que conecte las curvas de los cortes adyacentes. Para determinar la triangulaci√≥n a utilizar, se busca aquella que maximice ‚Äìo minimice‚Äì alguna m√©trica de la triangulaci√≥n generada, como el volumen del modelo o el m√≠nimo √°ngulo interno de los tri√°ngulos [KEP75]. Existen dos clases de m√©todos para unir dos contornos: optimizaci√≥n y heur√≠sticos. Los m√©todos de optimizaci√≥n calculan la mejor triangulaci√≥n posible [FUC77], y por lo general tardan ùëÇ ùëÅùëÄ en ejecutarse, donde ùëÅ es la cantidad de puntos de un corte y ùëÄ es la cantidad de puntos del otro corte. Los m√©todos heur√≠sticos calculan una triangulaci√≥n aceptable, mediante el uso de una decisi√≥n local por medio de una heur√≠stica f√°cil de calcular en cada punto [KEP75]. Estos √∫ltimos generalmente son utilizados cuando el tiempo de ejecuci√≥n es m√°s importante que la calidad del modelo, ya que generalmente tardan ùëÇ ùëÅ + ùëÄ en ejecutarse. B. CUBOS OPACOS Otro procedimiento sencillo para la visualizaci√≥n de vol√∫menes es el algoritmo de los cubos opacos (opaque-cubes), el cual fue propuesto por [HER79], donde el umbral elegido por el usuario se utiliza para recorrer cada una de las celdas del objeto y extraer aquellas cuyos valores lo incluyan. Por cada una de estas celdas, se crean seis pol√≠gonos, uno por cada cara, los cuales son desplegados usando cualquier hardware est√°ndar. Los pol√≠gonos se pueden desplegar opacos o semitransparentes, y si se eligen varios umbrales se puede desplegar cada conjunto de celdas con un color diferente. Una de las principales desventajas de este algoritmo es que las im√°genes desplegadas tienen apariencia de bloques c√∫bicos, lo cual genera dificultades al intentar observar caracter√≠sticas peque√±as en los datos. Sin embargo, la apariencia puede ser mejorada utilizando sombreado por gradiente (gradient-shading). C. CUBOS MARCHANTES Cubos Marchantes (marching cubes) es un algoritmo para la visualizaci√≥n de vol√∫menes que consiste en la extracci√≥n de una isosuperficie en base a una tabla de casos [LOR87], el cual procesa cada celda y extrae un mallado triangular que separa aquellos v√≥xeles menores que el 13 umbral de aquellos mayores que el umbral. Este algoritmo ha sido implementado y estudiado ampliamente en numerosas publicaciones [NIE91][CHE95]. Cubos marchantes comienza leyendo cuatro cortes, con los cuales calcula el gradiente en los puntos internos y se extraen tri√°ngulos de las celdas internas entre el segundo y tercer corte. Despu√©s, se carga un nuevo corte, se descarta el m√°s viejo y se repite el procedimiento, hasta haber procesado todos los cortes. Finalmente, los tri√°ngulos extra√≠dos son pasados a hardware gr√°fico est√°ndar para el despliegue de superficies. Para m√°s detalles acerca del algoritmo, ver la Secci√≥n 2.2.1. D. TETRACUBOS MARCHANTES Tetracubos Marchantes (marching tetracubes) es un algoritmo para la visualizaci√≥n de vol√∫menes que consiste en la extracci√≥n de una isosuperficie mediante la divisi√≥n de cada celda en tetraedros y su posterior procesamiento, el cual consiste en la extracci√≥n de un mallado triangular que separe aquellos v√≥xeles menores que el umbral de aquellos mayores que el umbral [CAR95]. Este algoritmo opera de manera similar a cubos marchantes, pero no presenta casos ambiguos, por lo cual es mucho m√°s f√°cil de implementar. Para m√°s detalles acerca del algoritmo, ver la Secci√≥n 2.2.2. 2.1.4.2. VISUALIZACI√ìN DIRECTA DE VOLUMEN Los m√©todos basados en la visualizaci√≥n directa de volumen consisten en desplegar el volumen directamente en el plano imagen sin utilizar una representaci√≥n intermedia para ello. Para determinar el color de un p√≠xel en el plano imagen se simula la propagaci√≥n de un rayo de luz a trav√©s del volumen, lo cual se realiza mediante el uso de un sistema √≥ptico basado √∫nicamente en la absorci√≥n y emisi√≥n de luz [WIL92]. El modelo √≥ptico utilizado para simular la propagaci√≥n de un rayo de luz a trav√©s del volumen est√° definido por la siguiente ecuaci√≥n [SCH03]: ùê∂ = ùëê ùúÜ ùúè ùúÜ ùëí‚àí ùúè ùë° ùúïùúÜ ùúÜ 0 ùúïùúÜ ùê∑ 0 14 donde ùê∂ es el color resultante, ùê∑ es la distancia que recorre el rayo dentro del volumen, y ùëê ùúÜ y ùúè ùúÜ son el color y el factor de absorci√≥n a una distancia ùúÜ de la entrada del rayo en el volumen, respectivamente. Esta integral representa la suma de la emisi√≥n de la luz desde el punto de entrada del rayo en el volumen (ùúÜ = 0) hasta que sale del mismo (ùúÜ = ùê∑). La exponencial que multiplica el color en la posici√≥n ùúÜ representa el factor de extinci√≥n acumulado hasta ese punto, lo cual hace que los valores obtenidos vayan aportando menos al color final a medida que el rayo avanza. Esta ecuaci√≥n eval√∫a el rayo de forma continua; para realizar la evaluaci√≥n de manera discreta √©sta se aproxima mediante sumas de Riemann [ANT98]: ùëõ = ùê∑ ‚Ñé , ùõº ùúÜ = 1 ‚àí ùëí‚àí‚Ñéùúè ùúÜ (1.1) ùê∂ ‚âà ùëê ùëñ‚Ñé ùõº ùëñ‚Ñé 1 ‚àí ùõº ùëó‚Ñé ùëñ‚àí1 ùëó =0 ùëõ‚àí1 ùëñ=0 donde ùëõ representa la cantidad de muestras a evaluar y ùëó‚Ñé representa la posici√≥n de la j-√©sima muestra dentro del rayo. Esta ecuaci√≥n puede ser evaluada de dos formas diferentes: la primera consiste en evaluar y acumular las muestras desde la m√°s cercana hacia la m√°s lejana (front to back) de la siguiente manera: ùê∂0 = 0, ùê∂ùëñ+1 = ùê∂ùëñ + ùê¥ùëñùõº ùëñ‚Ñé ùëê ùëñ‚Ñé ùê¥0 = 1, ùê¥ùëñ+1 = ùê¥ùëñ 1 ‚àí ùõº ùëñ‚Ñé donde ùê∂ùëñ y ùê¥ùëñ son el color y el factor de extinci√≥n acumulado despu√©s de evaluar ùëñ muestras, respectivamente. El color asignado al p√≠xel es aquel encontrado despu√©s de evaluar las ùëõ muestras, es decir, ùê∂ ‚âà ùê∂ùëõ . La segunda forma de evaluar la ecuaci√≥n consiste en evaluar y acumular las muestras desde la m√°s lejana hacia la m√°s cercana (back to front) de la siguiente manera: ùê∂ùëõ = 0, ùê∂ùëñ = ùõº ùëñ‚Ñé ùëê ùëñ‚Ñé + 1 ‚àí ùõº ùëñ‚Ñé ùê∂ùëñ+1 15 donde ùê∂ùëñ es el color acumulado cuando quedan i muestras por evaluar. El color asignado al p√≠xel es aquel encontrado cuando no quedan muestras por evaluar, es decir, ùê∂ ‚âà ùê∂0. Existen varios m√©todos para el despliegue de vol√∫menes mediante visualizaci√≥n directa de vol√∫menes, entre las cuales se encuentra el uso de planos alineados al objeto, planos alienados a la imagen, ray casting por software, shear-warp, ray casting por GPU 3 y splatting. A continuaci√≥n se explicar√° ray casting y splatting. A. RAY CASTING Otro algoritmo utilizado para la visualizaci√≥n de vol√∫menes con im√°genes de alta calidad consiste en ray casting. Este algoritmo lleva a cabo un recorrido en orden de imagen, donde el color y opacidad de cada p√≠xel se calcula disparando un rayo desde el p√≠xel hacia el volumen de datos, acumulando las opacidades y colores encontrados durante la trayectoria del mismo [LEV88][LEV90a][LEV90b]. El primer paso consiste en la configuraci√≥n de la funci√≥n de transferencia, el punto de vista del usuario y la iluminaci√≥n a utilizar. Entonces, se dispara un rayo por cada p√≠xel en la imagen a generar, se determina el punto de entrada y de salida de √©ste del volumen, con el fin de calcular la ecuaci√≥n 1.1. Para ello, el rayo es evaluado a pasos constantes de tama√±o ‚Ñé desde el punto m√°s cercano al ojo hasta el m√°s lejano. B. SPLATTING Este algoritmo consiste en realizar un recorrido de adelante hacia atr√°s de los v√≥xeles del volumen, calculando y componiendo la contribuci√≥n de cada uno de ellos en la imagen mediante el uso de una tabla. Al procedimiento se le llama splatting [WES89] porque se asemeja a ‚Äúaplastar‚Äù cada v√≥xel en la imagen, donde la contribuci√≥n del v√≥xel sobre un p√≠xel es inversamente proporcional a la distancia entre el v√≥xel proyectado y dicho p√≠xel. El primer paso, despu√©s de que el usuario configura la funci√≥n de transferencia, consiste en determinar el orden en el que se va a recorrer el volumen, lo cual se realiza buscando la esquina de la malla m√°s cercana al punto de vista despu√©s de aplicar la matriz de visualizaci√≥n 3 GPU: Graphical Processing Unit (Unidad Gr√°fica de Procesamiento) 16 (modelview matrix). Una vez determinado el orden correcto, se procesan los v√≥xeles desde el corte m√°s cercano hacia el m√°s lejano. La clasificaci√≥n de un v√≥xel se realiza de manera similar como en trazado de rayos: primero se clasifica su valor utilizando la funci√≥n de transferencia, se sombrea utilizando el gradiente y la opacidad se multiplica por la magnitud del mismo. El siguiente paso consiste en calcular la contribuci√≥n del v√≥xel a la imagen proyectando √©ste en la imagen y utilizando una huella circular [WES89]. Esta huella es colocada en la imagen sobre el v√≥xel proyectado, el cual sirve para decidir cu√°nto va a afectar el v√≥xel actual cada p√≠xel de la imagen. Sin embargo, si se utiliza proyecci√≥n perspectiva o escalamientos no uniformes, la proyecci√≥n de la huella en el plano imagen es una elipse, por lo que se debe aplicar una transformaci√≥n para convertir las coordenadas el√≠pticas a coordenadas circulares, y as√≠ poder utilizar la misma huella para todos los v√≥xeles [WES90]. Luego, el color y la opacidad son mezclados con los valores acumulados en la imagen en cada p√≠xel dentro del √°rea cubierta por la huella, atenuando el color y la opacidad en base al valor de la huella en cada p√≠xel a modificar. Esto ocasiona que los p√≠xeles m√°s cercanos al v√≥xel proyectado sean m√°s afectados que aquellos m√°s distantes. Una vez todos los v√≥xeles han sido procesados, la imagen est√° lista para ser desplegada. 2.2. EXTRACCI√ìN DE ISOSUPERFICIES Para la extracci√≥n de isosuperficies, se considera el volumen de datos como una funci√≥n ùêπ ùë•, ùë¶, ùëß , la cual relaciona una posici√≥n dentro del volumen con un valor escalar, es decir: ùêπ ùë•, ùë¶, ùëß = ‚Ñú3 ‚ü∂ ‚Ñú La extracci√≥n de una isosuperficie de un volumen de datos consiste en el c√°lculo de una superficie que aproxime el conjunto ùëÜùõº , el cual se define como: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº donde ùõº representa el valor de la isosuperficie a extraer. La mayor√≠a de los algoritmos representan la superficie extra√≠da mediante un mallado triangular, el cual est√° compuesto por un conjunto de v√©rtices y un conjunto de tri√°ngulos que unen dichos v√©rtices. Esto permite visualizar la superficie f√°cilmente mediante el uso del hardware gr√°fico existente. 17 En los algoritmos expuestos a continuaci√≥n, se asume que s√≥lo se conocen los valores de ùêπ ùë•, ùë¶, ùëß en los v√©rtices de las celdas de una malla cartesiana escalar como la que se muestra en la Figura 2.1. Figura 2.1: Malla c√∫bica utilizada para la extracci√≥n de isosuperficies. Para evaluar ùêπ ùë•, ùë¶, ùëß en un punto que no corresponda a uno de los v√≥xeles, se realiza interpolaci√≥n sobre la celda donde se encuentra el punto a evaluar. Se pueden utilizar varios esquemas de interpolaci√≥n, pero el m√°s utilizado es interpolaci√≥n trilineal [ELV92]. Para realizar interpolaci√≥n trilineal, primero se debe obtener la posici√≥n relativa del punto respecto a la celda donde se encuentra de la siguiente manera: ùëû = ùë• ‚àí ùëãùêø ùëãùêª ‚àí ùëãùêø , ùë† = ùë¶ ‚àí ùëåùêø ùëåùêª ‚àí ùëåùêø , ùë° = ùëß ‚àí ùëçùêø ùëçùêª ‚àí ùëçùêø donde ùëãùêø , ùëåùêø , ùëçùêø es la posici√≥n de la esquina inferior-izquierda-trasera de la celda y ùëãùêª , ùëåùêª , ùëçùêª es la posici√≥n de la esquina superior-derecha-delantera de la misma. Finalmente se interpolan los ocho isovalores de la celda de la siguiente manera: ùêπ ùë£000 , ‚ãØ , ùë£111 , ùëû, ùë†, ùë° = ùë£000 ‚àô 1 ‚àí ùëû 1 ‚àí ùë† 1 ‚àí ùë° + ùë£001 ‚àô ùëû 1 ‚àí ùë† 1 ‚àí ùë° + ùë£010 ‚àô 1 ‚àí ùëû ùë† 1 ‚àí ùë° + ùë£011 ‚àô ùëûùë† 1 ‚àí ùë° + ùë£100‚àô 1 ‚àí ùëû 1 ‚àí ùë† ùë° + ùë£101 ‚àô ùëû 1 ‚àí ùë† ùë° + ùë£110 ‚àô 1 ‚àí ùëû ùë†ùë° + ùë£111 ‚àô ùëûùë†ùë° donde ùë£000 , ‚ãØ , ùë£111 representan los isovalores de los ocho v√≥xeles que delimitan la celda. A continuaci√≥n, se explicar√°n dos algoritmos importantes para la extracci√≥n de isosuperficies a partir de mallas cartesianas, cubos marchantes y tetracubos marchantes. 18 2.2.1. CUBOS MARCHANTES Uno de los m√©todos m√°s conocidos y estudiados para la extracci√≥n de isosuperficies a partir de una malla cartesiana escalar es el algoritmo de los Cubos Marchantes (Marching Cubes) [LOR87], el cual consiste en reconstruir cada celda de la malla independientemente mediante el uso de una tabla de conectividad. Cada celda se encuentra delimitada por ocho v√≥xeles y doce aristas, las cuales se enumeran como se muestra en la Figura 2.2. Figura 2.2: Enumeraci√≥n de los v√©rtices y aristas que delimitan la celda. Para triangular cada celda primero se debe clasificar cada uno de los v√≥xeles que la delimitan. Para simplificar la clasificaci√≥n de las celdas, Chernyaev [CHE95] resta el valor ùõº a extraer del isovalor de cada v√≥xel, de forma tal que extraer la isosuperficie ùëÜùë• antes de la resta equivale a extraer la isosuperficie ùëÜ0 despu√©s de realizar la resta, es decir: ùëÜùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùõº = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß ‚àí ùõº = 0 De esta manera, se pueden clasificar los v√≥xeles en dos grupos, positivos y negativos, de acuerdo al signo del isovalor despu√©s de sustraer ùõº. Luego, con la clasificaci√≥n de los v√≥xeles se construye una m√°scara de ocho bits, donde el k-√©simo bit se encuentra encendido si y s√≥lo si el k- √©simo v√≥xel es positivo (ver Figura 2.3). 19 Figura 2.3: Construcci√≥n de la m√°scara a partir de los valores en los v√©rtices con ùõº = 0.5, donde cada ùõø representa el isovalor en cada v√©rtice que delimita la celda. Debido a que cada uno de los v√≥xeles tiene dos estados posibles, existe un total de 28 = 256 formas diferentes en que la superficie a extraer puede intersectar la celda. Sin embargo, la topolog√≠a de la superficie no cambia si todos los v√≥xeles cambian de signo, por lo cual se pueden reducir los 128 casos superiores a los 128 casos inferiores invirtiendo el sentido de los tri√°ngulos generados (casos complementarios). Luego, por medio de reflexiones y rotaciones se pueden reducir los 128 casos a 15 casos topol√≥gicamente diferentes, los cuales se muestran en la Figura 2.4. Figura 2.4: Las 15 configuraciones diferentes usadas por Cubos Marchantes. Los v√≥xeles rojos son negativos y los v√≥xeles azules son positivos. 20 El siguiente paso es determinar cu√°les aristas de la celda son intersectadas por la superficie y d√≥nde se encuentra el punto de intersecci√≥n. Una arista es intersectada por la superficie si y s√≥lo si los v√≥xeles en sus extremos tienen signos diferentes. Para determinar el punto ùëÉùë• donde la arista es intersectada por la superficie se puede utilizar interpolaci√≥n lineal sobre la misma de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde, ùë£0 y ùë£1 son los isovalores de los v√≥xeles que delimitan la arista, ùõº es el umbral de la superficie que se desea extraer, ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista y ùëÉùë• es la posici√≥n del punto de intersecci√≥n en √©sta. Despu√©s de calcular todos los puntos de intersecci√≥n de la superficie con la celda se generan los tri√°ngulos que la componen utilizando una tabla de 256 casos, la cual se indexa utilizando la m√°scara obtenida de la clasificaci√≥n de los v√≥xeles. Mediante cubos marchantes tambi√©n se pueden calcular otros atributos de los v√©rtices del mallado final, mediante interpolaci√≥n lineal de los atributos en los extremos de cada arista intersectada por el modelo. Por ejemplo, se puede calcular el gradiente por v√©rtice ùê∫ùë• interpolando los gradientes en los extremos de cada arista intersectada de la siguiente manera: ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùê∫0 y ùê∫1 son los gradientes en los extremos de la arista y ùê∫ùë• es el gradiente en ùëÉùë• . 2.2.1.1. VENTAJAS Y DESVENTAJAS DE CUBOS MARCHANTES Cubos marchantes es uno de los algoritmos m√°s utilizados para la extracci√≥n de isosuperficies debido a las diversas ventajas que posee, entre las cuales se encuentran: ÔÇ∑ Sencillez: El algoritmo es f√°cil de implementar, ya que s√≥lo se necesita una tabla de 28 casos para procesar cada celda en base a la clasificaci√≥n de sus v√≥xeles. ÔÇ∑ Eficiencia: El algoritmo s√≥lo calcula las intersecciones en aquellas aristas donde es necesario, reutilizando las intersecciones de las celdas anteriores de ser posible. Adem√°s, 21 el algoritmo s√≥lo necesita la construcci√≥n de una m√°scara y b√∫squedas de orden constante en tablas precalculadas. ÔÇ∑ Paralelizable: El algoritmo es f√°cil de paralelizar, debido a que la superficie extra√≠da de una celda es independiente de las superficies extra√≠das de las otras celdas. Sin embargo, el algoritmo posee varias desventajas, para las cuales se han desarrollado t√©cnicas para corregirlas, entre las cuales se encuentran: ÔÇ∑ Errores topol√≥gicos: En ciertos conjuntos de datos, el algoritmo genera huecos incorrectos en la superficie. En las siguientes secciones se explicar√°n los trabajos dedicados a corregir dichos errores. ÔÇ∑ Tri√°ngulos degenerados: En ciertos casos, el algoritmo genera tri√°ngulos de baja calidad, los cu√°les se visualizan con artefactos dependiendo de la t√©cnica utilizada para su despliegue. ÔÇ∑ Complejidad de la salida: El algoritmo genera una cantidad excesiva de tri√°ngulos redundantes cuando la resoluci√≥n de los modelos de entrada es muy alta, lo que ocasiona que la superficie final sea m√°s dif√≠cil de visualizar. Una de las soluciones es expuesta en [SCH92], donde se explica un m√©todo que permite aproximar una superficie mediante otra con menos tri√°ngulos, la cual se podr√≠a aplicar como un post-procesamiento a la superficie generada por cubos marchantes. 2.2.1.2. MODELOS TOPOL√ìGICAMENTE CORRECTOS Para analizar el mallado final generado por el algoritmo original de Cubos Marchantes, primero se debe definir qu√© es una superficie topol√≥gicamente correcta. En [CHE95] se define que una superficie es topol√≥gicamente correcta si y s√≥lo si la topolog√≠a de los tri√°ngulos generados coincide con la topolog√≠a de la funci√≥n ùêπ ùë•, ùë¶, ùëß dentro de cada celda. Para obtener una superficie topol√≥gicamente correcta, dos v√≥xeles del mismo signo deben estar unidos ‚Äì o no separados ‚Äì dentro de una celda si y s√≥lo si existe un camino dentro de √©sta que conecte ambos v√≥xeles y no cambie de signo. El caso m√°s simple para determinar si dos 22 v√≥xeles est√°n conectados es cuando existe un camino a trav√©s de las aristas de la celda que s√≥lo contiene v√≥xeles del mismo signo. Sin embargo, hay dos casos donde la regla anterior no es suficiente. Por ejemplo, cuando se tiene una cara con dos v√≥xeles positivos y dos v√≥xeles negativos en esquinas opuestas que no est√°n conectados a trav√©s de las dem√°s aristas de la celda, no se puede decir directamente que ambos v√≥xeles est√°n separados, debido a que √©stos podr√≠an estar unidos mediante un camino que pase por dentro de la cara. A este tipo de caras se les denomina caras ambiguas, como la que se puede observar en la Figura 2.5. Figura 2.5: Ejemplo de una cara ambigua. A la izquierda se muestra el caso donde los v√≥xeles positivos se encuentran separados, a la derecha se muestra el caso donde √©stos no son separados. Los v√≥xeles positivos se encuentran marcados en azul, y los v√≥xeles negativos se encuentran marcados en rojo. El otro caso donde las reglas anteriores no son suficientes es cuando se tiene una ambig√ºedad interna, la cual ocurre cuando dos v√≥xeles del mismo signo se encuentran en esquinas opuestas de la celda y no est√°n conectados por las aristas ni por las caras de la misma, pero podr√≠an estar unidos a trav√©s de un camino que pase por dentro de la celda. Un ejemplo de este tipo de ambig√ºedad se puede observar en la Figura 2.6. Figura 2.6: Ejemplo de ambig√ºedad interna. A la izquierda se muestra el caso donde los v√©rtices positivos se encuentran separados, y a la derecha se muestra el caso donde √©stos no est√°n separados. 23 2.2.1.3. ERRORES TOPOL√ìGICOS DE CUBOS MARCHANTES Una de las mayores cr√≠ticas realizadas al algoritmo original de Cubos Marchantes, propuesto en [LOR87], es que genera errores topol√≥gicos en ciertos vol√∫menes de datos, los cuales consisten en peque√±os huecos en la superficie. En la Figura 2.7 se puede observar el hueco que genera el algoritmo de los cubos marchantes cuando encuentra una celda del caso 6 adyacente a una celda del complemento del caso 3. Figura 2.7: Ejemplo mostrando el hueco creado por Cubos Marchantes, el cual se encuentra representado por el pol√≠gono gris en la cara compartida por ambas celdas. Para verificar que este hueco no es topol√≥gicamente correcto, se puede observar que el v√≥xel A tiene signo diferente al v√≥xel B, lo que implica que el segmento de l√≠nea delimitado por esos v√≥xeles deber√≠a intersectar la superficie generada en alg√∫n punto. D√ºrst [D√úR88] propone resolver este error agregando el cuadril√°tero formado por los cuatro v√©rtices en la cara compartida por ambas celdas, correspondiente al pol√≠gono gris en la Figura 2.7. Sin embargo, esta soluci√≥n no es la m√°s adecuada, debido a que ocasionar√≠a que m√°s de dos tri√°ngulos compartan una arista en el mallado final. La raz√≥n por la cual se genera el hueco en la superficie es que la cara compartida por ambas celdas es una cara ambigua, la cual se conecta de una forma en la celda izquierda y de otra forma en la celda derecha. Existen dos formas de triangular una cara ambigua, una donde los tri√°ngulos generados separan ambos v√≥xeles positivos en la cara y otra donde √©stos no son separados por la triangulaci√≥n. En el primer caso se dice que la cara es una cara separada y en el segundo caso se dice que es una cara no separada. Ambas triangulaciones v√°lidas para el caso expuesto de la 24 Figura 2.7 se pueden observar en la Figura 2.8, donde la triangulaci√≥n superior corresponde a utilizar una cara no separada y la triangulaci√≥n inferior corresponde a utilizar una cara separada. Figura 2.8: Posibles triangulaciones v√°lidas para el caso mostrado en la Figura 2.7. Cualquier m√©todo de extracci√≥n correcto debe conectar los v√©rtices de una cara ambigua de la misma forma en ambas celdas a las que pertenece, ya sea separando los v√≥xeles positivos en la triangulaci√≥n o no. En el algoritmo original propuesto en [LOR87] no se cumple esta condici√≥n, debido a que al utilizar los complementos de los casos los v√≥xeles positivos quedan unidos dentro de las caras ambiguas, por lo cual se genera un hueco al unir un caso normal con uno complementario (ver Figura 2.7). Montani et al. [MON94] proponen un m√©todo para evitar la aparici√≥n de huecos en la superficie, el cual consiste en modificar la tabla de conectividad del algoritmo original de forma que los v√≥xeles positivos siempre sean separados en las caras ambiguas. Para esto, no se pueden reducir los casos con caras ambiguas mediante complementariedad, sino √∫nicamente por medio de rotaciones y reflexiones. Los casos se pueden clasificar en tres conjuntos diferentes, los cuales se procesan como se indica a continuaci√≥n: 25 ÔÇ∑ No hay m√°s de cuatro v√≥xeles positivos: Se pueden generar mediante rotaciones y reflexiones de los casos existentes en el algoritmo original [LOR87], debido a que los v√©rtices positivos en las caras ambiguas ya se encuentran separados (ver Figura 2.4). ÔÇ∑ Hay m√°s de cuatro v√≥xeles positivos y no hay caras ambiguas: Se pueden generar mediante rotaciones, reflexiones y complementariedad de los casos existentes en el algoritmo original, porque al no existir caras ambiguas se puede aplicar complementariedad libremente. ÔÇ∑ Hay m√°s de cuatro v√≥xeles positivos y hay caras ambiguas: Se deben crear nuevas triangulaciones, debido a que no se puede recurrir a la complementariedad por la existencia de caras ambiguas. Estas triangulaciones nuevas corresponden a los complementos de los casos 3, 6 y 7, los cuales se pueden observar en la Figura 2.9. Figura 2.9: Casos adicionales para prevenir huecos en la superficie. Este m√©todo posee todas las ventajas del algoritmo original, y no conlleva ninguna desventaja adicional, debido a que la tabla de conectividad se conserva del mismo tama√±o (28 = 256) y no se requiere de ning√∫n procesamiento adicional para procesar cada celda. 2.2.1.4. M√âTODO DE DECISI√ìN ASINT√ìTICA PARA CUBOS MARCHANTES Como se mencion√≥ anteriormente, la elecci√≥n entre las dos formas v√°lidas de conectar los v√©rtices en una cara ambigua puede ser totalmente arbitraria siempre y cuando sea consistente a lo largo de todas las celdas. Sin embargo, Nielson y Hamman presentaron el M√©todo de la Decisi√≥n Asint√≥tica (Asymptotic Decider) [NIE91], el cual consiste en elegir entre separar o no separar los v√≥xeles positivos de una cara ambigua en base a la evaluaci√≥n de un punto medio de 26 √©sta por medio de interpolaci√≥n bilineal, de forma tal que la superficie generada sea topol√≥gicamente correcta (ver Secci√≥n 2.2.1.2). La interpolaci√≥n bilineal a trav√©s de una cara es la extensi√≥n natural a realizar interpolaci√≥n lineal a trav√©s de un segmento en dos dimensiones. Despu√©s de realizar un cambio de variables, se puede asumir que el dominio de la cara es un cuadrado unitario ùë†, ùë° 0 ‚â§ ùë†, ùë° ‚â§ 1 , lo cual lleva a la siguiente f√≥rmula para realizar interpolaci√≥n bilineal: ùêµ ùë†, ùë° = 1 ‚àí ùë† ùë† ùêµ0,0 ùêµ0,1 ùêµ1,0 ùêµ1,1 1 ‚àí ùë° ùë° donde ùêµ0,0, ùêµ0,1, ùêµ1,0 y ùêµ1,1 son los isovalores de los v√≥xeles que delimitan la cara ambigua. En la Figura 2.10 se puede observar una gr√°fica que muestra el isovalor de la cara dentro del dominio, donde los ejes ùë† y ùë° representan el dominio de la cara y el eje vertical representa el valor de la funci√≥n ùêπ ùë•, ùë¶, ùëß en la cara. Figura 2.10: Interpolaci√≥n bilineal a trav√©s de la cara. Se puede verificar f√°cilmente que la curva ùë†, ùë° ùêµ ùë†, ùë° = ùõº es una hip√©rbola. Hay varias formas en que el dominio de la cara puede intersectar (o no intersectar) la hip√©rbola, como se puede observar en la Figura 2.11: Figura 2.11: Distintos resultados posibles de intersecci√≥n con la hip√©rbola. 27 Los casos ambiguos se dan cuando el dominio intersecta ambas componentes de la hip√©rbola, en cuyo caso no se puede determinar a priori si los v√≥xeles positivos est√°n dentro de la misma regi√≥n de las hip√©rbolas. Por ejemplo, en la Figura 2.12 se pueden observar dos formas posibles en que el dominio intersecte la hip√©rbola en una cara ambigua. Figura 2.12: Ambas hip√©rbolas posibles de la cara ambigua. Una forma sencilla pero incorrecta de determinar qu√© caso se debe aplicar consiste en evaluar exactamente el punto medio de la cara, y en base a esto decidir si los v√≥xeles positivos deben ser separados o no. Sin embargo, este m√©todo falla en los casos donde el centro del dominio se encuentra dentro de alguna de las hip√©rbolas. En la Figura 2.13 se puede observar claramente que ambos v√≥xeles positivos no deben ser separados dentro del modelo, pero la evaluaci√≥n del punto medio arroja como resultado que √©stos deben ser separados. Figura 2.13: Caso donde evaluar en el centro de la cara (punto verde) da resultados err√≥neos, mientras que evaluar en la intersecci√≥n de las as√≠ntotas (punto anaranjado) da el resultado correcto. La soluci√≥n propuesta por Nielson [NIE91] consiste en determinar si los v√≥xeles positivos est√°n separados o no mediante la evaluaci√≥n de ùêπ ùë•, ùë¶, ùëß en el punto de la cara donde las 28 as√≠ntotas de las hip√©rbolas se intersectan, lo cual siempre arrojar√° el resultado correcto porque √©ste se encuentra fuera de las mismas. El primer paso consiste en buscar las as√≠ntotas ùë†, ùë° ùë† = ùëÜ‚Ñé y ùë†, ùë° ùë° = ùëá‚Ñé , donde: ùëÜ‚Ñé = ùêµ0,0 ‚àí ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 , ùëá‚Ñé = ùêµ0,0 ‚àí ùêµ1,0 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 por lo cual se puede calcular el valor en ùêµ ùëÜùõº , ùëáùõº mediante interpolaci√≥n bilineal: ùêµùëÜ,ùëá = ùêµ ùëÜ‚Ñé , ùëá‚Ñé = ùêµ0,0ùêµ1,1 ‚àí ùêµ1,0ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 Finalmente, para determinar a qu√© caso de la Figura 2.12 corresponde la cara ambigua se compara ùêµùëÜ,ùëá con el valor de corte ùõº (o con 0 si se realiza la transformaci√≥n de Chernyaev [CHE95]): Si ùêµùëÜ,ùëá se encuentra fuera de la superficie (ùêµùëÜ,ùëá < ùõº) entonces los v√≥xeles positivos deben ser separados, en caso contrario (ùêµùëÜ,ùëá ‚â• ùõº) no deben ser separados. Ambos casos se pueden observar en la Figura 2.14. Figura 2.14: Triangulaci√≥n final despu√©s de evaluar la intersecci√≥n de las as√≠ntotas. 2.2.1.5. RESOLUCI√ìN DE LA AMBIG√úEDAD INTERNA En 1995, Chernyaev [CHE95] propone un m√©todo para la resoluci√≥n de la ambig√ºedad interna basado en la variaci√≥n bilineal de ùêπ ùë•, ùë¶, ùëß sobre cualquier plano paralelo a una cara de la celda. Si existen dos √°reas positivas separadas en las caras pero unidas dentro de la celda, 29 entonces existe un plano paralelo a una cara de la celda, donde la cara ambigua formada por la intersecci√≥n de este plano con la celda es una cara no separada (ver Figura 2.15). Figura 2.15: Resoluci√≥n de ambig√ºedad mediante cara paralela. Dados ùê¥0, ùêµ0, ùê∂0 y ùê∑0, que representan los valores de los v√≥xeles de la celda cuando ùë° = 0, y ùê¥1, ùêµ1, ùê∂1 y ùê∑1, que representan los valores de los v√≥xeles de la celda cuando ùë° = 1, se puede verificar f√°cilmente que si las √°reas a resolver son positivas y unen los v√≥xeles ùê¥0 y ùê∂1 entonces: ùê¥0ùê∂0 ‚àí ùêµ0ùê∑0 < 0 (2.1) ùê¥1ùê∂1 ‚àí ùêµ1ùê∑1 < 0 Si las √°reas se encuentran unidas dentro de la celda, entonces existe un ùë° tal que: ùê¥ùë° > 0, ùê∂ùë° > 0, ùê¥ùë°ùê∂ùë° ‚àí ùêµùë°ùê∑ùë° > 0 (2.2) Debido a que funci√≥n ùêπ ùë•, ùë¶, ùëß var√≠a linealmente a trav√©s de las aristas de la celda, se tiene que la cara media est√° definida por: ùê¥ùë° = ùê¥0 + ùê¥1 ‚àí ùê¥0 ùë° (2.3) ùêµùë° = ùêµ0 + ùêµ1 ‚àí ùêµ0 ùë° ùê∂ùë° = ùê∂0 + ùê∂1 ‚àí ùê∂0 ùë° ùê∑ùë° = ùê∑0 + ùê∑1 ‚àí ùê∑0 ùë° Sustituyendo (2.3) en (2.2) se tiene que: 30 ùëéùë°2 + ùëèùë° + ùëê > 0 (2.4) donde: ùëé = ùê¥1 ‚àí ùê¥0 ùê∂1 ‚àí ùê∂0 ‚àí ùêµ1 ‚àí ùêµ0 ùê∑1 ‚àí ùê∑0 ùëè = ùê¥0 ùê∂1 ‚àí ùê∂0 + ùê∂0 ùê¥1 ‚àí ùê¥0 ‚àí ùêµ0 ùê∑1 ‚àí ùê∑0 ‚àí ùê∑0 ùêµ1 ‚àí ùêµ0 ùëê = ùê¥0ùê∂0 ‚àí ùêµ0ùê∑0 Las √°reas positivas est√°n unidas √∫nicamente en el caso donde la par√°bola (2.4) es como la que se muestra en la Figura 2.15: la par√°bola se extiende hacia abajo, el m√°ximo es positivo y se encuentra entre 0 y 1. Estas condiciones se pueden verificar mediante los siguientes pasos: ÔÇ∑ Verificar que ùëé sea negativo, para que la par√°bola est√© dirigida hacia abajo. ÔÇ∑ Calcular el punto donde se alcanza el m√°ximo ùë°ùëöùëéùë• y verificar que se encuentre en el intervalo 0, 1 , donde ùë°ùëöùëéùë• = ‚àíùëè 2ùëé . ÔÇ∑ Verificar que la cara ambigua formada por ùê¥ùë° , ùêµùë° , ùê∂ùë° y ùê∑ùë° cuando ùë° = ùë°ùëöùëéùë• cumple las condiciones establecidas en (2.2). 2.2.2. TETRACUBOS MARCHANTES Una alternativa a resolver las ambig√ºedades inherentes a cubos marchantes consiste en descomponer cada una de las celdas de la malla cartesiana (ver Figura 2.1) en varios tetraedros y triangular cada uno de √©stos independientemente. Este algoritmo es conocido como Tetracubos Marchantes (Marching Tetracubes), el cual fue propuesto por Carneiro et al. [CAR95]. Sin embargo, este m√©todo proporciona un resultado diferente al obtenido mediante el uso de Cubos Marchantes, debido a que se asume interpolaci√≥n lineal a trav√©s de los tetraedros en vez de interpolaci√≥n trilineal con los v√≥xeles originales de la celda. Si se utiliza interpolaci√≥n trilineal en las aristas de los tetraedros vuelven a aparecer las ambig√ºedades [YON95]. 2.2.2.1. DIVISI√ìN DE LA CELDA EN TETRAEDROS El primer paso del algoritmo consiste en dividir cada celda de la malla en tetraedros. Para realizar esto se utiliza una tabla de divisi√≥n, la cual indica los cuatro v√©rtices que delimitan cada 31 uno de los tetraedros a generar a partir de la celda. Es importante que la tabla de divisi√≥n a utilizar cumpla con las siguientes propiedades: ÔÇ∑ La uni√≥n de las regiones de todos los tetraedros generados debe ser exactamente igual a la regi√≥n c√∫bica inicial de la celda. ÔÇ∑ Para cada par de tetraedros ùëá1 y ùëá2, la intersecci√≥n de ùëá1 y ùëá2 debe ser vac√≠a o alguna cara, arista o v√©rtice com√∫n en ùëá1 y ùëá2. ÔÇ∑ Para todo par de celdas adyacentes, la triangulaci√≥n de la cara com√∫n de ambas celdas debe coincidir. Carneiro et. al. [CAR95] proponen el uso de una divisi√≥n de la celda en cinco tetraedros, debido a que se generar√≠a a lo sumo el doble de tri√°ngulos de salida que en cubos marchantes. No obstante, si se aplica la misma tabla de divisi√≥n a todas las celdas se generar√°n conexiones err√≥neas entre celdas adyacentes, como se puede observar en la Figura 2.16. Figura 2.16: Conexi√≥n err√≥nea en cubos adyacentes. Para evitar que este tipo de conexiones ocurran, se debe utilizar una tabla de divisi√≥n para las celdas pares y otra tabla sim√©trica para las celdas impares, como se puede observar en la Figura 2.17. 32 Figura 2.17: Conexi√≥n correcta usando dos tablas de divisiones, una para las celdas oscuras (pares) y otra sim√©trica para las celdas claras (impares). 2.2.2.2. TRIANGULACI√ìN DE UN TETRAEDRO Despu√©s de descomponer cada celda en tetraedros, se procede a triangular cada uno de √©stos por separado para reconstruir la superficie ùëÜùõº . Sin embargo, es necesario redefinir ùêπ ùë•, ùë¶, ùëß para realizar interpolaci√≥n lineal en cada tetraedro de la siguiente forma: ùêπ ùë•, ùë¶, ùëß = ùê¥ùë• + ùêµùë¶ + ùê∂ùëß + ùê∑ Para determinar los valores de ùê¥, ùêµ, ùê∂ y ùê∑, se puede observar que las siguientes ecuaciones se deben cumplir de forma tal que ùêπ ùë•, ùë¶, ùëß aproxime de forma correcta los v√≥xeles que delimitan al tetraedro: ùë•0 ùë¶0 ùëß0 1 ùë•1 ùë¶1 ùëß1 1 ùë•2 ùë¶2 ùëß2 1 ùë•3 ùë¶3 ùëß3 1 ùê¥ ùêµ ùê∂ ùê∑ = ùë£0 ùë£1 ùë£2 ùë£3 donde ùë•ùëñ , ùë¶ùëñ , ùëßùëñ es la posici√≥n del i-√©simo v√≥xel del tetraedro y ùë£ùëñ es el isovalor del mismo (ver Figura 2.18). Como se puede observar, para determinar los coeficientes ùê¥, ùêµ, ùê∂ y ùê∑ se debe resolver un sistema de cuatro ecuaciones con cuatro inc√≥gnitas, el cual tendr√° soluci√≥n √∫nica si y s√≥lo si el tetraedro no es degenerado. 33 Figura 2.18: Tetraedro utilizado para la extracci√≥n de isosuperficies. Debido a que la interpolaci√≥n a lo largo del tetraedro es lineal, la interpolaci√≥n a lo largo de cada arista del tetraedro tambi√©n es lineal, por lo cual la triangulaci√≥n de un tetraedro se puede realizar de forma similar a la triangulaci√≥n de una celda mediante el uso de Cubos Marchantes. El primer paso consiste en determinar cu√°les v√≥xeles del tetraedro se encuentran dentro o fuera de la isosuperficie, con lo cual se construye una m√°scara de 4 bits, donde el i-√©simo bit estar√° encendido si y solo si el isovalor del i-√©simo v√≥xel del tetraedro es mayor o igual que el isovalor ùõº, como se muestra en la Figura 2.19. 34 Figura 2.19: Creaci√≥n de la m√°scara para el tetraedro utilizando ùõº = 0.3, donde cada ùõø representa el isovalor en cada v√©rtice que delimita el tetraedro. Debido a que cada uno de los v√≥xeles tiene dos estados posibles, existe un total de 24 = 16 formas diferentes en que la superficie a extraer puede intersectar el tetraedro. De forma similar a Cubos Marchantes, por medio de rotaciones, simetr√≠a y complementariedad se pueden reducir los diecis√©is casos a tres casos topol√≥gicamente diferentes, los cuales se muestran en la Figura 2.20. Figura 2.20: Posibles intersecciones de la isosuperficie con un tetraedro. El siguiente paso es determinar cu√°les aristas del tetraedro son intersectadas por la superficie y d√≥nde se encuentra el punto de intersecci√≥n. Una arista es intersectada por la superficie si y 35 s√≥lo si uno de sus extremos se encuentra marcado y el otro no. Para determinar el punto ùëÉùë• donde la arista es intersectada por la superficie se puede utilizar interpolaci√≥n lineal sobre la misma de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista, ùë£0 y ùë£1 son los isovalores de la funci√≥n en los extremos de las aristas y ùõº es el umbral de la superficie que se desea extraer. Despu√©s de calcular todos los puntos de intersecci√≥n de la superficie con el tetraedro, se generan los tri√°ngulos utilizando una tabla de conectividad de 16 casos, la cual se indexa utilizando la m√°scara obtenida de la clasificaci√≥n de los v√≥xeles. 2.3. EXTRACCI√ìN DE INTERVALOS DE VOLUMEN Para la visualizaci√≥n de vol√∫menes existen dos t√©cnicas diferentes [FUJ95]: visualizaci√≥n directa de volumen y extracci√≥n de isosuperficies (o DVR 4 y SF 5 , por sus siglas en ingl√©s, respectivamente). Sin embargo, la visualizaci√≥n directa de volumen tiene la desventaja de requerir mucho poder de procesamiento y experiencia por parte del usuario para inicializar la funci√≥n de transferencia. Por otro lado, mediante extracci√≥n de isosuperficies solamente se visualiza una parte del volumen, lo que ocasiona que el usuario no observe la informaci√≥n dentro del contexto. Debido a esto, se introdujo el concepto de extracci√≥n de intervalo de volumen, el cual consiste en el c√°lculo de la parte del volumen dentro del rango ùõº, ùõΩ , la cual se define como: IV ùõº, ùõΩ = ùë•, ùë¶, ùëß ùõº ‚â§ ùêπ ùë•, ùë¶, ùëß ‚â§ ùõΩ , el cual puede ser visualizado de diferentes maneras, dependiendo de la representaci√≥n utilizada por el algoritmo de extracci√≥n. Como se puede observar, este enfoque es una generalizaci√≥n de DVR y SF, debido a que permite visualizar el volumen completo utilizando IV ‚àí‚àû, ‚àû , y tambi√©n permite visualizar la 4 DVR: Direct Volume Rendering. 5 SF: Surface Fitting. 36 isosuperficie ùëÜùõø utilizando IV ùõø, ùõø . Inclusive, se puede visualizar ùëÜùõø utilizando una tolerancia de 2 utilizando IV ùõø ‚àí , ùõø + , lo cual es importante a la hora de trabajar con datos que puedan estar sujetos a peque√±as perturbaciones. Otra ventaja de los intervalos de volumen sobre la extracci√≥n de isosuperficies es el manejo correcto de las celdas con valor constante ùõº, ya que los m√©todos de extracci√≥n de isosuperficies no muestran nada, mientras que al visualizar IV ùõº, ùõº se observar√° toda la celda, y para todo ùõø ‚â† ùõº, al visualizar IV ùõø, ùõø no se observar√° nada. Otra forma de visualizar un subconjunto del volumen equivalente a IV ùõº, ùõΩ consiste en utilizar DVR configurando la opacidad de la funci√≥n de transferencia de forma que el intervalo ùõº, ùõΩ 6 sea completamente transparente. Sin embargo, este procedimiento tiene la desventaja de tener que procesar todo el volumen cuando el punto de vista del usuario cambia, mientras que mediante el uso de intervalos de volumen se ahorra tiempo de procesamiento durante la proyecci√≥n, debido a que s√≥lo se debe recorrer la parte del volumen correspondiente al intervalo de inter√©s. A continuaci√≥n se describir√°n los tres algoritmos principales para la extracci√≥n de intervalos de volumen, el primero est√° basado en triangulaciones de Delaunay y formas alfa, el segundo est√° basado en cubos marchantes y el √∫ltimo en tetracubos marchantes. 2.3.1. EXTRACCI√ìN POR MEDIO DE FORMAS ALFA 7 Este algoritmo fue propuesto por Guo [GUO95], el cual consiste en aproximar el intervalo ùê¥, ùêµ del volumen mediante el uso de una forma alfa ùëÜùõº . A continuaci√≥n, se introducir√°n los complejos de simplices 8 , las formas alfa, y el procedimiento utilizado para la construcci√≥n de √©stas con el fin de aproximar el intervalo ùê¥, ùêµ de un volumen de datos. 6 ùê¥, ùêµ = ùë• ‚àà ‚Ñù ùë• ‚àâ ùê¥, ùêµ [GRA94] 7 ‚ÄúFormas alfa‚Äù viene del t√©rmino en ingl√©s ùõº-shapes. 8 Simplices: plural de simplex. 37 2.3.1.1. COMPLEJOS DE SIMPLICES 9 Un ùëõ-simplex N ÔÅÑ se define como un conjunto de ÔÄ® ÔÄ©1ÔÄ´n puntos en mÔÉÇ , con nm ÔÇ≥ , donde ning√∫n punto puede ser expresado como una combinaci√≥n af√≠n de los dem√°s, es decir: ùõºùëó ùëõ ùëó =0 ùëó‚â†ùëñ = 1 ‚àß ùõºùëóŒîùëÅ,ùëó = Œ±i ùëõ ùëó=0 ùëó‚â†ùëñ ùõº ‚àà ‚Ñúùëõ+1 ùëñ ‚àà 0,1,‚ãØ,ùëõ Por ejemplo, un 0-simplex es un punto, un 1-simplex es una l√≠nea, un 2-simplex es un tri√°ngulo, un 3-simplex es un tetraedro, y as√≠ sucesivamente. La frontera de un ùëõ-simplex ŒîùëÅ se define como el conjunto de todos los ùëò-simplices Œîùêæ, tal que ùëò < ùëõ y todos los puntos de Œîùêæ se encuentran en ŒîùëÅ, es decir: boundary ŒîùëÅ = Œîùêæ Œîùêæ ‚äÇ ŒîùëÅ Por ejemplo, la frontera de un tetraedro est√° compuesta por 4 tri√°ngulos, 6 l√≠neas y 4 puntos, y la frontera de un tri√°ngulo est√° compuesta por 3 l√≠neas y 3 puntos. Sea ùê∂ un conjunto de simplices de distintas dimensiones, ùê∂ es un complejo de simplices si y s√≥lo si se cumplen las siguientes condiciones: ÔÇ∑ Para cada simplex Œîùëá ‚àà ùê∂, la frontera de Œîùëá se encuentra en ùê∂. ÔÇ∑ Para todo par de simplices Œîùëá1, Œîùëá2 donde Œîùëá1, Œîùëá2 ‚àà ùê∂, su intersecci√≥n se encuentra en la frontera de Œîùëá1 y en la frontera de Œîùëá2. El espacio subyacente ùê∂ de un complejo de simplices ùê∂ es la uni√≥n de todos los simplices contenidos en ùê∂, y un complejo de simplices ùê∂‚Ä≤ es un subcomplejo de ùê∂ si y solo si ùê∂‚Ä≤ ‚äÇ ùê∂. 2.3.1.2. FORMAS ALFA Sea ùëÜ un conjunto de puntos en ‚Ñúùëõ , Edelsbrunner y Mucke [EDE94] definen la familia de formas alfa ùëÜùõº 0 < ùõº ‚â§ ‚àû en base a una familia de subcomplejos de la triangulaci√≥n de 9 ‚ÄúComplejos de simplices‚Äù viene del t√©rmino en ingl√©s simplicial complexes. 38 Delaunay D ùëÜ , de los cuales se derivan √©stas como los espacios subyacentes de dichos subcomplejos. Para un ùëõ-simplex Œîùëá , sea ùëÇùëá la esfera cerrada m√°s peque√±a cuya frontera contenga Œîùëá . Los complejos alfa ùê∂ùõº 0 < ùõº ‚â§ ‚àû est√°n compuestos por los siguientes elementos: (a) todos los elementos Œîùëá ‚àà D ùëÜ , tal que la esfera Oùëá de Œîùëá tenga radio estrictamente menor que ùõº y no haya punto de ùëÜ dentro de la esfera abierta 10 limitada por ùëÇùëá, y (b) la frontera de todos los elementos descritos en (a). Finalmente, se define para cada ùõº (0 ‚â§ ùõº ‚â§ ‚àû) la forma alfa ùëÜùõº como el espacio subyacente del complejo ùê∂ùõº , es decir, ùëÜùõº = ùê∂ùõº . Por ejemplo, dado un conjunto de puntos ùëÜ en ‚Ñú3, la forma ùëÜùõº consiste en la triangulaci√≥n de Delaunay D ùëÜ , donde los tetraedros cuyas esferas tienen radio mayor o igual a ùõº son sustituidos por las cuatro caras triangulares que los delimitan. Luego, aquellos tri√°ngulos cuyas esferas tienen radio mayor o igual a ùõº son sustituidos por las tres l√≠neas que los delimitan, y as√≠ sucesivamente hasta llegar a los v√©rtices. 2.3.1.3. CONSTRUCCI√ìN DE LAS FORMAS ALFA La construcci√≥n de una forma alfa ùëÜùõº para aproximar el intervalo ùê¥, ùêµ de un volumen de datos se realiza en tres pasos: evaluar el volumen para generar un conjunto de puntos ùëÜ en el intervalo ùê¥, ùêµ , construir la triangulaci√≥n de Delaunay D ùëÜ y generar el complejo ùê∂ùõº cuyo espacio subyacente ùê∂ùõº sea ùëÜùõº . El conjunto S de puntos a utilizar incluye todas aquellas muestras ùëâùëñ,ùëó ,ùëò del volumen que se encuentren dentro del rango ùê¥, ùêµ . Sin embargo, este conjunto no permite la construcci√≥n de los bordes del intervalo, por lo cual se a√±aden los puntos de las isosuperficies ùëÜùê¥ y ùëÜùêµ , donde: ùëÜùê¥ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùê¥ ùëÜùêµ = ùë•, ùë¶, ùëß ùêπ ùë•, ùë¶, ùëß = ùêµ los cuales se calculan de forma similar a como se calculan los v√©rtices de una isosuperficie mediante el uso de Cubos Marchantes. En la Figura 2.21 se pueden observar los puntos 10 Una esfera abierta con centro ùê∂ y radio ùëü de define como todos aquellos puntos cuya distancia a ùê∂ es estrictamente menor que ùëü. 39 pertenecientes a ùëÜ en un mallado bidimensional, junto con la aproximaci√≥n del borde del intervalo de volumen mediante l√≠neas. Figura 2.21: Mallado bidimensional a procesar mediante formas alfa, los puntos pertenecientes a ùëÜ se muestran con puntos rojos, y la aproximaci√≥n del borde del intervalo de volumen mediante el uso de simplices se muestra con l√≠neas negras. Despu√©s de calcular los puntos pertenecientes a ùëÜ, se procede a calcular la triangulaci√≥n de Delaunay D ùëÜ , lo cual se puede realizar utilizando cualquier algoritmo existente para este prop√≥sito. No obstante, se debe preprocesar la nube de puntos para que se encuentre en posici√≥n general, es decir, no deben existir cuatro o m√°s puntos coplanares ni deben existir cinco o m√°s puntos en la frontera de la misma esfera. Sin embargo, cuando se trabaja con mallas cartesianas uniformes regulares, la nube de puntos ùëÜ generalmente contiene m√∫ltiples grupos de puntos coplanares, espec√≠ficamente todos aquellos pertenecientes a un mismo corte cuyos isovalores se encuentren dentro del rango ùê¥, ùêµ . Para solucionar esto, se puede utilizar una t√©cnica llamada Simulaci√≥n de Simplicidad 11 [EDE90], la cual consiste en perturbar la nube de puntos infinitesimalmente con el objetivo de llevar √©sta a posici√≥n general. Una vez que se tiene la triangulaci√≥n de Delaunay D ùëÜ , la tarea principal para la extracci√≥n de ùëÜùõº consiste en elegir un valor ùõº apropiado para la generaci√≥n del volumen. En general, a medida que ùõº disminuye, las caracter√≠sticas gruesas del volumen son sustituidas por caracter√≠sticas m√°s finas. Sin embargo, despu√©s que ùõº disminuye debajo de cierto valor ùõº , 11 Tambi√©n llamado SoS, por sus siglas en ingl√©s (Simulation of Simplicity). 40 empiezan a aparecer cavidades en ùëÜùõº , lo cual es indeseable debido a que el intervalo debe ser representado principalmente por tetraedros. Para determinar el valor de ùõº , se analizar√° el complejo alfa ùê∂ùõº en un cubo unitario. Los elementos incluidos en ùê∂ùõº dependen de las siguientes condiciones: ÔÇ∑ Si ùõº > 0, existen esferas con radio positivo tal que contengan cada v√©rtice del cubo, por lo cual los ocho v√©rtices del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 1 2 , existen esferas con radio menor que ùõº que contienen cada arista del cubo, por lo cual las doce aristas del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 2 2 , existen esferas con radio menor que ùõº que contienen cada cara del cubo, por lo cual los doce tri√°ngulos que componen las caras del cubo pertenecen a ùê∂ùõº . ÔÇ∑ Si ùõº > 3 2 , existe una esfera con radio menor que ùõº que contiene el cubo, por lo cual los seis tetraedros que componen al cubo pertenecen a ùê∂ùõº . En consecuencia, para un cubo unitario se tiene que ùõº = 3 2 + , donde es un valor muy peque√±o, cuyo objetivo es prevenir que errores de redondeo ocasionen la aparici√≥n de cavidades dentro del modelo. Luego, para un cubo de lado ùëë se tiene que ùõº = 3 2 + ùëë, debido a que todas las primitivas analizadas anteriormente tambi√©n son escaladas en la misma proporci√≥n que el cubo con relaci√≥n al cubo unitario. Finalmente, se calcula y visualiza ùëÜùõº , la cual representar√° el intervalo ùê¥, ùêµ del volumen. 2.3.2. EXTRACCI√ìN POR MEDIO DE CUBOS MARCHANTES En 1995, Fujishiro, Maeda y Sato [FUJ95] publicaron un m√©todo para la extracci√≥n de intervalos de volumen, el cual consiste en una adaptaci√≥n de cubos marchantes para extraer un mallado triangular que encierre aquellas partes del volumen que se encuentren dentro del intervalo ùõº, ùõΩ a extraer. De forma similar a como se realiza en cubos marchantes, la extracci√≥n del intervalo se realiza celda por celda independientemente. 41 A continuaci√≥n, se explicar√°n las consideraciones locales y globales que se deben tomar en cuenta al momento de la extracci√≥n del intervalo de volumen ùõº, ùõΩ mediante esta t√©cnica. 2.3.2.1. EXTRACCI√ìN LOCAL DEL INTERVALO DE VOLUMEN Para extraer los tri√°ngulos de la celda que representen el intervalo ùõº, ùõΩ , se puede adaptar Cubos Marchantes de dos formas diferentes. La primera, consiste en clasificar cada uno de los v√≥xeles utilizando la comparaci√≥n entre su isovalor ùõøùëñ y el intervalo ùõº, ùõΩ de la siguiente manera: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ Por ejemplo, en la Figura 2.22 se puede observar una celda con los isovalores de cada v√≥xel, as√≠ como la clasificaci√≥n de cada uno de ellos. Despu√©s de clasificar los v√≥xeles de la celda, se puede construir un √≠ndice mediante la interpretaci√≥n de las clases de los v√≥xeles en base-3, el cual se utiliza para acceder a una tabla de conectividad de 38 = 6561 casos, de donde se obtendr√°n los tri√°ngulos a generar a partir de la celda. Para la resoluci√≥n de ambig√ºedades se pueden aplicar las mismas t√©cnicas aplicadas en cubos marchantes [NIE91][CHE95]. 42 Figura 2.22: Clasificaci√≥n de celda en base a los isovalores en sus v√≥xeles, donde cada ùõø representa el isovalor en cada v√©rtice que delimita la celda. Sin embargo, se pueden aprovechar las operaciones de conjuntos para simplificar la cantidad de casos a tomar en cuenta, mediante la expresi√≥n del intervalo ùõº, ùõΩ como la intersecci√≥n de los intervalos ùõº, ‚àû y ùõº , ùõΩ , es decir: IV ùõº, ùõΩ = IV ‚àí‚àû, ùõΩ ‚à© IV ùõº, ‚àû Para representar los intervalos de volumen IV ùõº, ‚àû y IV ‚àí‚àû, ùõΩ se utilizan poliedros, tambi√©n llamados cubos-ùõº y cubos-ùõΩ, respectivamente. Esto permite simplificar la extracci√≥n del intervalo en cada celda a √∫nicamente 28 = 256 casos, debido a que cada uno de los v√≥xeles s√≥lo tendr√° dos clasificaciones posibles, dentro del intervalo o fuera de √©ste. Para extraer el cubo-ùõº de una celda del volumen, se modifica la tabla de casos de Cubos Marchantes para extraer la subregi√≥n positiva de la celda cuya frontera es la isosuperficie ùëÜùõº , la cual se determina en base a los isovalores de los v√≥xeles de la celda. Para extraer el cubo-ùõΩ se realiza el mismo procedimiento, pero extrayendo la subregi√≥n negativa de la celda cuya frontera es ùëÜùõΩ . En la Figura 2.23 se pueden observar los poliedros generados para algunas configuraciones de los isovalores de las celdas. 43 Figura 2.23: Algunas configuraciones posibles durante la extracci√≥n de los cubos-ùõº (izquierda) y los cubos-ùõΩ (derecha). En el caso general donde ùõº < ùõΩ, la intersecci√≥n de los cubos-ùõº y los cubos-ùõΩ de las celdas no es vac√≠a, siempre y cuando √©sta sea intersectada por el intervalo a extraer (ver Figura 2.24). Debido al teorema del valor medio, se pueden determinar los siguientes hechos: ÔÇ∑ Entre un v√≥xel negativo y uno positivo existir√° un punto con valor ùõº y otro con valor ùõΩ. ÔÇ∑ Entre un v√≥xel negativo y un v√≥xel neutro existir√° un punto con valor ùõº. ÔÇ∑ Entre un v√≥xel positivo y un v√≥xel neutro existir√° un punto con valor ùõΩ. Para calcular la posici√≥n de los puntos donde el cubo- ùõº o el cubo- ùõΩ intersectan las aristas de la celda se realiza un procedimiento similar al utilizado en cubos marchantes. El punto ùëÉùê∏ ùõø donde una arista ùê∏ tiene valor ùõø est√° dado por: ùëÉùê∏ ùõø = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõø ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista ùê∏, y ùë£0 y ùë£1 son los isovalores de los v√≥xeles en los extremos de la arista ùê∏. Tambi√©n se pueden calcular los valores de otros atributos ùëãùê∏ ùõø en el punto ùëÉùê∏ ùõø de la siguiente manera: ùëãùê∏ ùõø = ùëã0 + ùëã1 ‚àí ùëã0 ùõø ‚àí ùë£0 ùë£1 ‚àí ùë£0 donde ùëã0 y ùëã1 son los valores del atributo en los extremos de la arista ùê∏. 44 Figura 2.24: Caso general donde ùõº < ùõΩ. La zona de color rojo pertenece √∫nicamente al cubo- ùõº, la zona de color azul pertenece √∫nicamente al cubo- ùõΩ, y la zona de color violeta pertenece a ambos cubos. Los bordes del pol√≠gono extra√≠do de la celda se encuentran resaltados. Para verificar que este enfoque es una generalizaci√≥n de la extracci√≥n de isosuperficies, se puede observar si ùõº = ùõΩ, la intersecci√≥n del cubo- ùõº y del cubo- ùõΩ en cada celda ser√° igual a la isosuperficie ùëÜùõº = ùëÜùõΩ , como se puede observar en la Figura 2.25. Figura 2.25: Caso especial donde ùõº = ùõΩ. La zona de color rojo pertenece √∫nicamente al cubo- ùõº, la zona de color azul pertenece √∫nicamente al cubo- ùõΩ, y el pol√≠gono extra√≠do se encuentra resaltado. 2.3.2.2. EXTRACCI√ìN GLOBAL DEL INTERVALO DE VOLUMEN A diferencia de cubos marchantes, es importante tener en cuenta la posici√≥n de la celda en el volumen al momento de la extracci√≥n del intervalo en √©sta. Esto se debe a que los bordes de las celdas son incluidos al momento de realizar la intersecci√≥n de los cubos- ùõº y cubos- ùõΩ, lo que ocasiona que en el mallado final existan aristas compartidas por m√°s de dos tri√°ngulos. 45 Para solucionar esto, se deben ignorar aquellas caras de los poliedros extra√≠dos de la intersecci√≥n de los cubos- ùõº y los cubos- ùõΩ que se encuentren alineados a alguna de las caras de las celdas que no den al exterior del volumen (ver Figura 2.26). Las caras de los poliedros que dan al exterior no son ignoradas, de forma tal que el mallado generado sea cerrado. Figura 2.26: Intervalo de volumen en celdas adyacentes. Las l√≠neas negras representan las caras del poliedro final, y la l√≠nea anaranjada entre las dos caras representa la cara interna ignorada en el mallado final. 2.3.3. EXTRACCI√ìN POR MEDIO DE TETRACUBOS MARCHANTES En 1997, Nielson y Sung [NIE97b] publicaron un m√©todo para la extracci√≥n de intervalos de volumen, el cual consiste en una adaptaci√≥n de tetracubos marchantes para extraer un mallado tetra√©drico que aproxime aquellas partes del volumen que se encuentren dentro del intervalo ùõº, ùõΩ a extraer. De forma similar a como se realiza en tetracubos marchantes, la extracci√≥n del intervalo se realiza celda por celda. Los pasos a seguir para la extracci√≥n del mallado tetra√©drico mediante esta t√©cnica se pueden observar en la Figura 2.27. Primero, el algoritmo procesa el volumen como un conjunto de celdas independientes, las cuales son divididas en varios tetraedros, dentro de los cuales se asume que los valores var√≠an linealmente. La divisi√≥n de cada celda en tetraedros se realiza de la misma manera como se realiza en tetracubos marchantes (ver Secci√≥n 2.2.2.1). Despu√©s de dividir la celda en tetraedros, para cada uno de estos se calculan aquellos puntos de las aristas donde estas se eval√∫an a ùõº o ùõΩ y aquellos v√≥xeles que se encuentran dentro del intervalo. Una vez calculados 46 estos puntos se obtiene un poliedro- ùõºùõΩ, el cual posteriormente es dividido en uno o m√°s tetraedros de salida. Figura 2.27: Pasos necesarios para la tetraedrizaci√≥n de un intervalo de volumen. A continuaci√≥n, se describir√° el proceso para la extracci√≥n del poliedro- ùõºùõΩ a partir del tetraedro de entrada, as√≠ como el proceso para dividir el poliedro- ùõºùõΩ obtenido en tetraedros de salida. 2.3.3.1. EXTRACCI√ìN DEL POLIEDRO ALFA-BETA Esta secci√≥n explica el procedimiento que se debe llevar a cabo para la extracci√≥n del poliedro- ùõºùõΩ a partir de un tetraedro de entrada. Como se mencion√≥ anteriormente, se asume que se tiene el valor de la funci√≥n ùêπ ùë•, ùë¶, ùëß en los v√©rtices del tetraedro y que los valores internos se 47 obtienen mediante el uso de interpolaci√≥n lineal, de la misma forma como se realiza en tetracubos marchantes (ver Secci√≥n 2.2.2.2). El primer paso que se debe llevar a cabo es la clasificaci√≥n de cada uno de los v√©rtices del tetraedro en base a su isovalor de la siguiente manera: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ donde ùõøùëñ es el isovalor del v√©rtice a preprocesar. Figura 2.28: Casos posibles durante la extracci√≥n del poliedro- ùõºùõΩ a partir del tetraedro. Los v√©rtices rojos se encuentran por debajo de ùõº (negativos), los v√©rtices azules se encuentran por arriba de ùõΩ (positivos) y los v√©rtices violetas se encuentran dentro del intervalo a extraer (neutros). Una vez clasificados los v√©rtices del tetraedro, se construye un √≠ndice entero mediante la interpretaci√≥n de las clasificaciones de los v√©rtices como d√≠gitos en base-3, lo cual genera un total de 34 = 81 casos. Sin embargo, dos tetraedros son equivalentes por medio de rotaciones y 48 reflexiones si poseen la misma cantidad de v√©rtices de cada clase, debido a que todos √©stos se encuentran conectados entre s√≠ por medio de aristas. Esto nos permite reducir el total de casos a 15, los cuales se pueden observar en la Figura 2.28, donde el primer d√≠gito del caso indica la cantidad de v√©rtices negativos (clase ‚àí1), el segundo d√≠gito indica la cantidad de v√©rtices neutros (clase 0) y el tercer d√≠gito indica la cantidad de v√©rtices positivos (clase +1). Es importante observar que los poliedros- ùõºùõΩ generados en cada caso son convexos y poseen caras planas, debido a que la interpolaci√≥n dentro del tetraedro es lineal. Esto facilita la tetraedrizaci√≥n del poliedro en el siguiente paso. 2.3.3.2. TETRAEDRIZACI√ìN DEL POLIEDRO ALFA-BETA En esta secci√≥n se explicar√° el procedimiento que se debe llevar a cabo para descomponer el poliedro- ùõºùõΩ de cada celda en tetraedros. Es importante destacar que los poliedros- ùõºùõΩ son tetraedrizables, debido a que √©stos son convexos [NIE97a]. Sin embargo, si no se toman medidas especiales al llevar a cabo la tetraedrizaci√≥n de cada poliedro, puede ocurrir que la tetraedrizaci√≥n de un poliedro no coincida con la de otro poliedro adyacente, lo cual sucede cuando en la cara compartida por los poliedros se elije una triangulaci√≥n de un lado y otra triangulaci√≥n diferente en el otro (ver Figura 2.29). Figura 2.29: Posibles tetraedrizaciones alrededor de la cara roja, la cual es compartida por dos poliedros diferentes. A la izquierda se muestra la tetraedrizaci√≥n correcta, a la derecha se muestra la incorrecta. Para solucionar este problema, se debe establecer un m√©todo para escoger de forma consistente la triangulaci√≥n a utilizar en cada cara del poliedro. Nielson [NIE97b] propone utilizar la regla de conexi√≥n por √≠ndices (index connection rule), para lo cual es necesario 49 establecer una relaci√≥n de orden total entre los v√©rtices del mallado final. Sea ùëâ el conjunto de v√©rtices del mallado final, una relaci√≥n de orden total sobre ùëâ consiste en un predicado ùúå ùë¢, ùë£ que permita comparar cada par de v√©rtices ùë¢, ùë£ ùëâ, con el fin de determinar si el v√©rtice ùë¢ precede a ùë£. Este predicado debe cumplir las siguientes propiedades: ÔÇ∑ Propiedad reflexiva: Para todo v√©rtice ùë£, el predicado ùúå debe indicar que ùë£ precede a ùë£, es decir: ùúå ùë£, ùë£ ùë¢ ,ùë£ ‚ààùëâ ÔÇ∑ Propiedad antisim√©trica: Para todo par de v√©rtices ùë¢, ùë£ ‚àà ùëâ, si ùë¢ precede a ùë£ y v precede a ùë¢, entonces ùë¢ debe ser igual a v , es decir: ùúå ùë¢, ùë£ ‚àß ùúå ùë£, ùë¢ ‚üπ ùë¢ = ùë£ ùë¢ ,ùë£ ‚ààùëâ ÔÇ∑ Propiedad transitiva: Para todo tr√≠o de v√©rtices ùë¢, ùë£, ùë§ ‚àà ùëâ, si ùë¢ precede a ùë£ y ùë£ precede a ùë§, entonces ùë¢ debe preceder a ùë§, es decir: ùúå ùë¢, ùë£ ‚àß ùúå ùë£, ùë§ ‚üπ ùúå ùë¢, ùë§ ùë¢ ,ùë£,ùë§ ‚àà ùëâ ÔÇ∑ Propiedad de orden total: Para todo par de v√©rtices ùë¢, ùë£ ‚àà ùëâ, ùë¢ precede a ùë£ o ùë£ precede a ùë¢, es decir: ùúå ùë¢, ùë£ ‚à® ùúå ùë£, ùë¢ ùë¢ ,ùë£ ‚ààùëâ Sea ùëä ‚äÜ ùëâ tal que ùëä ‚â† ‚àÖ y sea ùë¢ ‚àà ùëä, ùë¢ es un elemento minimal de ùëä si y solo si no existe otro elemento ùë£ ‚àà ùëä tal que ùë£ ‚â† ùë¢ y ùë£ preceda a ùë¢, es decir: ùúå ùë£, ùë¢ ùë£ ‚ààùëâ ùë£ ‚â†ùë¢ 50 Debido a la propiedad de orden total ùëä s√≥lo posee un elemento minimal, debido a que si existieran dos elementos ùë¢, ùë£ ‚àà ùëä entonces ùë¢ no debe preceder a ùë£ y ùë£ no debe preceder a ùë¢, lo cual contradice la propiedad de orden total del predicado ùúå. Despu√©s de establecer el predicado de ordenamiento, √©ste se utiliza para determinar un√≠vocamente la triangulaci√≥n a utilizar en cada cara de cada poliedro- ùõºùõΩ, independientemente del poliedro al que pertenezca. Como se puede observar en la Figura 3.8, s√≥lo existen tres tipos de cara a procesar: tri√°ngulos, cuadril√°teros y pent√°gonos, los cuales se triangulan de la siguiente manera (ver Figura 2.30): ÔÇ∑ Tri√°ngulos: En este caso no existe ning√∫n problema, debido a que s√≥lo hay una triangulaci√≥n posible. ÔÇ∑ Cuadril√°teros: Se elige aquella triangulaci√≥n donde se utiliza la diagonal entre el menor v√©rtice y su v√©rtice opuesto. ÔÇ∑ Pent√°gonos: En la Figura 2.28 se puede observar que todas las caras pentagonales de los poliedros- ùõºùõΩ tienen un v√©rtice neutro, por lo cual se divide con la triangulaci√≥n que utiliza las diagonales entre este v√©rtice y sus v√©rtices opuestos. Figura 2.30: Regla de conexi√≥n por √≠ndices para cuadril√°teros (izquierda) y para pent√°gonos (derecha). A continuaci√≥n, se analizar√°n cada uno de los casos posibles para las triangulaciones de cada tipo de poliedro en la Figura 3.8, los cuales se clasifican como tetraedros, prismas, cristales y cubos. 51 A. TETRAEDROS En los casos 040, 310 y 013 el poliedro- ùõºùõΩ es un tetraedro, el cual consiste en un poliedro de cuatro v√©rtices con cuatro tri√°ngulos. En estos casos, no es necesario ning√∫n procesamiento o an√°lisis adicional, debido a que √©ste no debe ser dividido. B. PRISMAS En los casos 031, 022, 103, 130, 220 y 301 el poliedro- ùõºùõΩ es un prisma, el cual consiste en un poliedro de seis v√©rtices, con dos tri√°ngulos opuestos y tres cuadril√°teros. Para cada prisma existe un total de 23 = 8 tetraedrizaciones posibles, de las cuales solo seis son v√°lidas. Figura 2.31: Posibles divisiones para un prisma. Las configuraciones 000 y 111 no son tetraedrizables. IZQ, ATR y DER indican la direcci√≥n de la tetraedrizaci√≥n a utilizar para la cara izquierda, trasera y derecha, respectivamente. Como se puede observar en la Figura 2.31, en las seis configuraciones v√°lidas se puede dividir el prisma en tres tetraedros de salida. Adem√°s, las dos configuraciones inv√°lidas no ocurren al aplicar la regla de conexi√≥n por √≠ndices, debido a que esos casos no son consistentes con la propiedad transitiva del predicado de ordenamiento ùúå. C. CRISTALES En los casos 121, 112 y 211 el poliedro- ùõºùõΩ es un cristal, el cual consiste en un poliedro de ocho v√©rtices con dos tri√°ngulos opuestos, dos cuadril√°teros y dos pent√°gonos. Para este tipo de poliedros, primero se procede a descomponerlo en un tetraedro y dos pir√°mides de base cuadrada utilizando la regla de conexi√≥n por √≠ndices en los pent√°gonos, como se muestra en la Figura 2.32. 52 Luego, cada pir√°mide puede ser dividida en dos tetraedros utilizando la regla de conexi√≥n por √≠ndices en cada cuadril√°tero. Figura 2.32: Posibles divisiones de un cristal en dos pir√°mides y un tetraedro. D. CUBOS En el caso 202 el poliedro- ùõºùõΩ tiene forma de cubo, que consiste en ocho v√©rtices unidos por seis cuadril√°teros opuestos entre s√≠. Debido a que el cubo se encuentra compuesto por seis cuadril√°teros, existe un total de 26 = 64 triangulaciones de las caras. Para verificar que todas las triangulaciones de las caras generadas por la regla de conexi√≥n por √≠ndices son tetraedrizables, se analizar√° caso por caso en base a los dos menores v√©rtices del cubo, los cuales ser√°n identificados con 1 y 2 en las Figuras 2.33, 2.34 y 2.35. El primer caso es cuando los v√©rtices 1 y 2 se encuentran en esquinas opuestas del cubo. En este caso, cada una de las caras del poliedro contiene exactamente uno de los v√©rtices m√≠nimos, por lo que las diagonales a utilizar se encuentran definidas. En la Figura 2.33 se puede observar la divisi√≥n del cubo en seis tetraedros. 53 Figura 2.33: Divisi√≥n de un cubo cuando los dos v√©rtices se encuentran en esquinas opuestas del cubo. El segundo caso es cuando los v√©rtices 1 y 2 se encuentran en esquinas opuestas de la misma cara del cubo. En este caso, todas las caras tienen el menor v√©rtice definido, excepto la opuesta a la cara con los v√©rtices m√≠nimos, por lo cual quedan dos casos por verificar (ver Figura 2.34). En el primer caso, se puede dividir el cubo en cinco tetraedros, y en el segundo caso, se puede dividir el cubo en seis tetraedros. Figura 2.34: Divisi√≥n de un cubo cuando los dos menores v√©rtices se encuentran en una misma cara de √©ste. Finalmente, el √∫ltimo caso es cuando los v√©rtices 1 y 2 se encuentran en la misma arista del cubo. En este caso, quedan cuatro casos por considerar, debido a que la regla de conexi√≥n por √≠ndice permite establecer la triangulaci√≥n de cuatro caras del cubo. En la Figura 2.35 se pueden observar las divisiones del cubo en seis tetraedros para los cuatro casos restantes. 54 Figura 2.35: Divisi√≥n de un cubo cuando los dos v√©rtices m√≠nimos est√°n en una misma arista de √©ste. 2.4. M√âTRICAS DE CALIDAD La raz√≥n principal para el uso de mallados de tri√°ngulos y tetraedros a la hora de trabajar con vol√∫menes de datos tridimensionales es que facilita su visualizaci√≥n y permite realizar simulaciones sobre partes de ellas sin la necesidad de tener que manipular todo el volumen. Muchos de los procedimientos utilizados para llevar a cabo visualizaciones o simulaciones sobre mallados triangulares implican procedimientos matem√°ticos que requieren que los tri√°ngulos a procesar posean formas regulares y no tengan degeneraciones. Por ejemplo, para visualizar la isosuperficie utilizando el modelo de sombreado Gouraud se realiza interpolaci√≥n trilineal para calcular el color dentro del tri√°ngulo, por lo cual es preferible maximizar el m√≠nimo √°ngulo interno de cada tri√°ngulo, de forma que el error generado por el modelo de iluminaci√≥n sea minimizado. Debido a esto, se han dise√±ado e implementado diversas m√©tricas para evaluar la calidad de tri√°ngulos y tetraedros [STI07]. En este trabajo, s√≥lo se tomar√°n en cuenta aquellas m√©tricas que permitan la evaluaci√≥n de los elementos de un mallado independientemente, sin necesidad de otro mallado de referencia. 55 Las m√©tricas utilizadas para evaluar la calidad de las primitivas se pueden clasificar en dos tipos diferentes: propias y no propias. Las m√©tricas propias consisten en un valor real sin unidad, el cual es igual a uno (1) para subregiones ideales ‚Äì un tri√°ngulo equil√°tero con √°rea unitaria o un tetraedro regular con volumen unitario ‚Äì y tiende a infinito (‚àû) para elementos degenerados o de baja calidad, como por ejemplo, un tri√°ngulos con aristas cuyas longitudes difieren significativamente o un elemento con un par de v√©rtices iguales. Las m√©tricas no propias consisten en valores reales con unidad, como por ejemplo, longitudes, √°ngulos, √°reas o vol√∫menes, cuyo valor ideal depende de la m√©trica. A continuaci√≥n, se describir√°n las m√©tricas m√°s importantes a la hora de evaluar la calidad de tri√°ngulos y tetraedros. La descripci√≥n de cada m√©trica incluye la explicaci√≥n del factor que eval√∫a, la forma de calcularla, posibles casos de borde, el rango donde se considera que el elemento es de buena calidad, as√≠ como el rango donde se considera que el elemento es degenerado o de baja calidad, los cuales fueron extra√≠dos de [STI07]. Luego, se describe c√≥mo evaluar la calidad de un conjunto de primitivas en base a la calidad de cada una de las primitivas. 2.4.1. M√âTRICAS DE CALIDAD PARA TRI√ÅNGULOS Las m√©tricas descritas en esta secci√≥n est√°n definidas sobre un elemento triangular como el que se muestra a continuaci√≥n en la Figura 2.36. Figura 2.36: Elemento triangular utilizado para describir las m√©tricas de calidad. 56 A continuaci√≥n se definir√°n varios elementos del tri√°ngulo, lo cual facilitar√° la descripci√≥n de las m√©tricas a evaluar. En todas las definiciones y m√©tricas descritas a continuaci√≥n, si el √≠ndice de un punto o arista del tri√°ngulo se encuentra fuera de ÔÅª ÔÅΩ2,1,0 , se tomar√° el resto de dividir √©ste entre tres, lo cual facilita la expresi√≥n de algunas ecuaciones en las m√©tricas. Las aristas del tri√°ngulo se encuentran definidas de la siguiente manera: ùêø0 = ùëÉ2 ‚àí ùëÉ1, ùêø1 = ùëÉ0 ‚àí ùëÉ2, ùêø2 = ùëÉ1 ‚àí ùëÉ0 Las longitudes de las aristas del tri√°ngulo se definen de la siguiente manera: ùêø0 = ùêø0 , ùêø1 = ùêø1 , ùêø2 = ùêø2 y las longitudes de la arista m√°s peque√±a y m√°s grande son, respectivamente: ùêøùëöùëñùëõ = min ùêø0, ùêø1, ùêø2 , ùêøùëöùëéùë• = max ùêø0, ùêø1, ùêø2 El √°rea de un tri√°ngulo es la mitad de la magnitud del producto cruz de cualquier par de aristas adyacentes: ùê¥ = 1 2 ùêø0 √ó ùêø1 = 1 2 ùêø1 √ó ùêø2 = 1 2 ùêø2 √ó ùêø0 Adem√°s, se define ùëü como el radio del c√≠rculo inscrito y ùëÖ como el radio del c√≠rculo circunscrito del tri√°ngulo, los cuales tambi√©n son llamados radio interno y radio circunscrito: ùëü = 2ùê¥ ùêø0 + ùêø1 + ùêø2 , ùëÖ = ùêø0ùêø1ùêø2 2ùëü ùêø0 + ùêø1 + ùêø2 = ùêø0ùêø1ùêø2 4ùê¥ 2.4.1.1. RELACI√ìN DE ASPECTO La relaci√≥n de aspecto de un tri√°ngulo representa la proporcionalidad que tiene respecto a su ancho y alto. Para calcular la relaci√≥n de aspecto de un tri√°ngulo se divide la longitud de la arista m√°s larga entre el radio del c√≠rculo inscrito. Sin embargo, el valor se normaliza de forma tal que un tri√°ngulo equil√°tero de √°rea unitaria tenga ùëû = 1. 57 ùëû = ùêøùëöùëéùë• 2 3ùëü = ùêøùëöùëéùë• ùêø0 + ùêø1 + ùêø2 4 3ùê¥ La relaci√≥n de aspecto del tri√°ngulo ùëû se encuentra dentro del rango 1 , ‚àû , y se considera que un tri√°ngulo es de buena calidad si √©sta se encuentra dentro del rango 1, 1.3 . 2.4.1.2. PROPORCI√ìN DE ARISTAS La proporci√≥n de las aristas se calcula como: ùëû = ùêøùëöùëéùë• ùêøùëöùëñùëõ La proporci√≥n de las aristas ùëû se encuentra en el rango 1 , ‚àû . Un tri√°ngulo se considera de buena calidad si √©sta se encuentra en el rango 1, 1.3 . 2.4.1.3. PROPORCI√ìN DE RADIOS La proporci√≥n de los radios de un tri√°ngulo se calcula como: ùëû = ùëÖ 2ùëü donde ùëü y ùëÖ son los radios inscritos y circunscritos del tri√°ngulo a evaluar. La proporci√≥n de los radios de un tri√°ngulo ùëû se encuentra en el rango 1 , ‚àû . Sin embargo, un tri√°ngulo s√≥lo se considerar√° de buena calidad si su proporci√≥n de radios se encuentra en el rango 1, 1.3 . 2.4.2. M√âTRICAS DE CALIDAD PARA TETRAEDROS Las m√©tricas descritas en esta secci√≥n est√°n definidas sobre un elemento tetra√©drico como el que se muestra a continuaci√≥n en la Figura 2.37. 58 Figura 2.37: Elemento tetra√©drico utilizado para describir las m√©tricas de calidad. A continuaci√≥n se definir√°n varios elementos del tetraedro, lo cual facilitar√° la descripci√≥n de las m√©tricas a evaluar. Las aristas del tetraedro se encuentran definidas de la siguiente manera: ùêø0 = ùêø01 = ùëÉ1 ‚àí ùëÉ0 , ùêø3 = ùêø03 = ùëÉ3 ‚àí ùëÉ0 ùêø1 = ùêø12 = ùëÉ2 ‚àí ùëÉ1 , ùêø4 = ùêø13 = ùëÉ3 ‚àí ùëÉ1 ùêø2 = ùêø20 = ùëÉ0 ‚àí ùëÉ2 , ùêø5 = ùêø23 = ùëÉ3 ‚àí ùëÉ2 Las longitudes de las aristas del tri√°ngulo se definen de la siguiente manera: ùêø0 = ùêø0 , ùêø1 = ùêø1 , ùêø2 = ùêø2 , ùêø3 = ùêø3 , ùêø4 = ùêø4 , ùêø5 = ùêø5 y las longitudes de la arista m√°s peque√±a y m√°s grande son, respectivamente: ùêøùëöùëñùëõ = min ùêø0, ùêø1 , ùêø2, ùêø3, ùêø4, ùêø5 , ùêøùëöùëéùë• = max ùêø0, ùêø1, ùêø2, ùêø3 , ùêø4, ùêø5 El √°rea de la superficie de un tetraedro es igual a la suma del √°rea de las cuatro caras que lo componen: 59 ùê¥ = 1 2 ùêø2 √ó ùêø0 + ùêø3 √ó ùêø0 + ùêø4 √ó ùêø1 + ùêø3 √ó ùêø2 El volumen del tetraedro se puede definir en base a las aristas como: ùëâ = ùêø2 √ó ùêø0 ‚àô ùêø3 6 Adem√°s, se define ùëü como el radio de la esfera inscrita y ùëÖ como el radio de la esfera circunscrita del tetraedro, los cuales tambi√©n son llamados radio interno y radio circunscrito: ùëü = 3ùëâ ùê¥ , ùëÖ = ùêø3 2 ‚àô ùêø2 √ó ùêø0 + ùêø2 2 ‚àô ùêø3 √ó ùêø0 + ùêø0 2 ‚àô ùêø3 √ó ùêø2 12ùëâ 2.4.2.1. RELACI√ìN DE ASPECTO La relaci√≥n de aspecto de un tetraedro representa la proporcionalidad que tiene respecto a su longitud, ancho, y alto. Para calcular la relaci√≥n de aspecto de un tetraedro se divide la longitud de la arista m√°s larga entre el radio de la esfera inscrita. Sin embargo, el valor se normaliza de forma tal que un tetraedro equil√°tero de √°rea unitaria tenga ùëû = 1. ùëû = ùêøùëöùëéùë• 2 6ùëü = ùê¥ùêøùëöùëéùë• 6 6ùëâ La relaci√≥n de aspecto ùëû del tetraedro se encuentra dentro del rango 1 , ‚àû , y se considera que un tetraedro es de buena calidad si √©sta se encuentra dentro del rango 1, 3 . 2.4.2.2. PROPORCI√ìN DE ARISTAS La proporci√≥n de aristas de un tetraedro se define como la longitud de la arista m√°s larga entre la longitud de la arista m√°s corta, es decir: ùëû = ùêøùëöùëéùë• ùêøùëöùëñùëõ La proporci√≥n de las aristas ùëû se encuentra en el rango 1 , ‚àû , pero para que un tetraedro sea considerado de buena calidad √©sta se debe encontrar en el rango 1, 3 . 60 2.4.2.3. PROPORCIONALIDAD DE RADIOS Esta m√©trica se define como el radio de la esfera circunscrita entre el radio de la esfera inscrita en el tetraedro, normalizada de forma tal que un tetraedro equil√°tero tenga calidad uno, es decir: ùëû = ùëÖ 3ùëü = ùêø3 2 ‚àô ùêø2 √ó ùêø0 + ùêø2 2 ‚àô ùêø3 √ó ùêø0 + ùêø0 2 ‚àô ùêø3 √ó ùêø2 ùê¥ 108ùëâ2 La proporcionalidad de los radios de un tetraedro ùëû se encuentra en el rango 1 , ‚àû , y se considera que un tetraedro es de buena calidad si dicha proporcionalidad se encuentra en el rango 1, 3 . 2.4.3. M√âTRICAS PARA CONJUNTOS DE PRIMITIVAS La salida generada por los algoritmos para la extracci√≥n de isosuperficies e intervalos de volumen no es una sola primitiva, sino un conjunto ellas, por lo cual se deben dise√±ar m√©todos para el an√°lisis de conjuntos de primitivas en base a la calidad de cada uno de los elementos que componen dicho conjunto. El primer m√©todo [STI07] para evaluar la calidad del conjunto consiste en clasificar cada primitiva de √©ste en base a los rangos y determinar si es buena, normal o degenerada en base a alguna m√©trica y contar cu√°ntas existen de cada tipo. Luego, la calidad del modelo ser√° directamente proporcional a la cantidad de primitivas buenas e inversamente proporcional a la cantidad de primitivas degeneradas. El segundo m√©todo [STI07] consiste en calcular la calidad del conjunto de primitivas como la media de la calidad de cada uno de los elementos de √©ste, y tomar la desviaci√≥n est√°ndar como el grado de esparcimiento de la calidad de los elementos. Para las m√©tricas no propias se recomienda utilizar la media y desviaci√≥n est√°ndar aritm√©tica, las cuales se definen como: ùúá = 1 ùëõ ùëûùëñ ùëõ ùëñ=1 , ùúé = 1 ùëõ ‚àí 1 ùëûùëñ ‚àí ùúá 2 ùëõ ùëñ=1 61 donde i q es la calidad del i-√©simo elemento del conjunto. Para las m√©tricas propias se recomienda utilizar la media y desviaci√≥n est√°ndar geom√©trica, las cuales se definen como: ùúáùëî = ùëûùëñ ùëõ ùëñ=1 1 ùëõ , ùúéùëî = exp 1 ùëõ ln ùëûùëñ ‚àí ln ùúáùëî 2 ùëõ ùëñ=1 62 CAP√çTULO 3. EXTRACCI√ìN DE INTERVALOS DE VOLUMEN MEDIANTE MODIFICACI√ìN DE CUBOS MARCHANTES A continuaci√≥n se explicar√° el algoritmo desarrollado para la extracci√≥n de intervalos de volumen ùõº, ùõΩ mediante el uso de una tabla de casos similar a la utilizada por cubos marchantes para la extracci√≥n de isosuperficies (ver Secci√≥n 2.2.1). Luego, se explicar√°n las ventajas y desventajas de este algoritmo, as√≠ como el procedimiento utilizado para generar la tabla de conectividad y el post-procesamiento a realizar sobre el mallado resultante. Finalmente, se describir√°n ciertas consideraciones que se deben tener en cuenta para el manejo de los casos ambiguos en aquellos algoritmos basados en este procedimiento. 3.1. ALGORITMO PARA LA EXTRACCI√ìN DEL INTERVALO DE VOLUMEN El algoritmo desarrollado se encuentra basado en Cubos Marchantes [LOR87] y, al igual que √©ste, reconstruye cada celda de la malla independientemente mediante el uso de una tabla de conectividad. Cada celda se encuentra delimitada por ocho v√≥xeles y doce aristas, y puede aportar hasta treinta y dos (32) v√©rtices diferentes al mallado final, debido a que cada v√≥xel neutro aporta un v√©rtice y a que cada arista aporta dos v√©rtices diferentes cuando un v√≥xel que la delimita es positivo y el otro es negativo. En la Figura 3.1 se puede observar la enumeraci√≥n de la celda utilizada por el algoritmo propuesto. Figura 3.1: Enumeraci√≥n de la celda utilizada por el algoritmo propuesto. 63 Es importante observar que en la enumeraci√≥n utilizada los puntos de intersecci√≥n se encuentran ordenados en base a los siguientes criterios: ÔÇ∑ Los v√©rtices provenientes de v√≥xeles neutros preceden aquellos provenientes de intersecciones en las aristas de la celda. ÔÇ∑ Los v√©rtices provenientes de v√≥xeles se encuentran ordenados por la coordenada del v√≥xel dentro de la celda, que equivale a ordenarlos en base la posici√≥n del v√≥xel dentro del volumen. ÔÇ∑ Los v√©rtices provenientes de aristas diferentes se encuentran ordenados en base a los v√≥xeles que las delimitan, es decir, si el menor v√©rtice de ambas aristas es diferente estas se ordenan en base a √©ste, si no se ordenan en base al otro extremo. ÔÇ∑ Los v√©rtices provenientes de una misma arista se encuentran ordenadas por el isovalor en el punto de intersecci√≥n, es decir, aquellos v√©rtices con isovalor ùõº preceden aquellos con isovalor ùõΩ. Este ordenamiento garantiza el ordenamiento de los v√©rtices a nivel global, es decir, si un v√©rtice ùë£1 precede a otro v√©rtice ùë£2 dentro de una celda, entonces ùë£1 precede a ùë£2 en el mallado completo, lo cual es importante debido a que este predicado de ordenamiento es necesario para prevenir el problema expuesto en la Figura 2.29 en la Secci√≥n 2.3.3.2, durante la generaci√≥n de la tabla de casos. El primer paso para extraer el intervalo de volumen ùõº, ùõΩ de una celda consiste en clasificar cada uno de los v√≥xeles que la delimita en tres grupos, positivos, negativos y neutros, en base a la siguiente ecuaci√≥n: clase ùõøùëñ , ùõº, ùõΩ = ‚àí1, ùë†ùëñ ùõøùëñ < ùõº +1, ùë†ùëñ ùõøùëñ > ùõΩ 0, ùë†ùëñ ùõº ‚â§ ùõøùëñ ‚â§ ùõΩ donde ùõøùëñ es el isovalor del v√≥xel a clasificar. Como se puede observar, un v√≥xel ser√° neutro si su isovalor se encuentra dentro del intervalo extraer, o ser√° positivo o negativo en base al signo de ùõøùëñ ‚àí ùõº si su isovalor no se encuentra dentro del intervalo. Luego, con la clasificaci√≥n de los 64 v√≥xeles se construye un √≠ndice de clasificaci√≥n interpretando la clase de cada v√≥xel como un d√≠gito en base-3 (ver Figura 3.2). Figura 3.2: Clasificaci√≥n de una celda en base a los isovalores de los v√≥xeles que la delimitan, con ùõº = 0.3 y ùõΩ = 0.6, donde ùõøùëñ representa el isovalor de cada v√≥xel. Debido a que cada uno de los v√≥xeles tiene tres estados posibles, existe un total de 38 = 6561 formas diferentes en que el intervalo de volumen a extraer intersecte la celda. Sin embargo, a diferencia del algoritmo para la extracci√≥n de isosuperficies, no se puede reducir la cantidad de casos por simetr√≠a, reflexi√≥n o rotaci√≥n, debido a que esto interfiere con el ordenamiento de los puntos de intersecci√≥n. En la Figura 3.3 se pueden observar algunas posibles intersecciones entre la celda y el intervalo de volumen a extraer. 65 Figura 3.3: Algunas posibles intersecciones entre la celda y el intervalo de volumen a extraer. Los puntos rojos representan los v√≥xeles negativos, los puntos azules representan los v√≥xeles positivos y los puntos violetas representan los v√≥xeles neutros. El siguiente paso es determinar cu√°les v√≥xeles producen v√©rtices y cu√°les aristas de la celda son intersectadas por el volumen a extraer, as√≠ como la posici√≥n de estos puntos de intersecci√≥n. Un v√≥xel produce un v√©rtice si este es neutro, cuya posici√≥n ùëÉùë• equivale a la posici√≥n del v√≥xel, es decir: ùëÉùë• = ùëÉ, ùë• ‚àà 0,1, ‚ãØ ,6,7 donde ùëÉ es la posici√≥n del v√≥xel neutro. Una arista produce un v√©rtice con isovalor ùõº si un extremo es negativo y el otro no es negativo, donde la posici√≥n ùëÉùë• de esta intersecci√≥n se calcula mediante el uso de interpolaci√≥n lineal sobre la arista de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõº ‚àí ùõø0 ùõø1 ‚àí ùõø0 , ùë• ‚àà 8,10,12, ‚ãØ ,26,28,30 donde, ùõø0 y ùõø1 son los isovalores de los v√≥xeles que delimitan la arista y ùëÉ0 y ùëÉ1 son las posiciones de los extremos de la arista. De forma similar, una arista produce un v√©rtice con isovalor ùõΩ si un extremo es positivo y el otro no es positivo, donde la posici√≥n ùëÉùë• de esta intersecci√≥n se calcula mediante el uso de interpolaci√≥n lineal sobre la arista de la siguiente manera: ùëÉùë• = ùëÉ0 + ùëÉ1 ‚àí ùëÉ0 ùõΩ ‚àí ùõø0 ùõø1 ‚àí ùõø0 , ùë• ‚àà 9,11,13, ‚ãØ ,27,29,31 66 Despu√©s de calcular todos los puntos de intersecci√≥n del intervalo de volumen con la celda se generan los tetraedros que lo componen utilizando una tabla de conectividad de 38 = 6561 casos, la cual se indexa utilizando el √≠ndice obtenido de la clasificaci√≥n de los v√≥xeles. Mediante este algoritmo tambi√©n se pueden calcular otros atributos de los v√©rtices del mallado final, extrayendo el atributo del v√≥xel para aquellos v√©rtices provenientes de v√≥xeles neutros, y mediante interpolaci√≥n lineal de los atributos en los extremos de cada arista para aquellos v√©rtices generados por intersecciones en las aristas. Por ejemplo, se puede calcular el gradiente ùê∫ùë• para v√©rtice ùëÉùë• de la siguiente manera: ùê∫ùë• = ùê∫, ùë• ‚àà 0,1, ‚ãØ ,6,7 ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõº ‚àí ùë£0 ùë£1 ‚àí ùë£0 , ùë• ‚àà 8,10,12, ‚ãØ ,26,28,30 ùê∫ùë• = ùê∫0 + ùê∫1 ‚àí ùê∫0 ùõΩ ‚àí ùë£0 ùë£1 ‚àí ùë£0 , ùë• ‚àà 9,11,13, ‚ãØ ,27,29,31 donde ùê∫ es el gradiente el v√≥xel neutro y ùê∫0 y ùê∫1 son los gradientes en los extremos de la arista intersectada. 3.2. VENTAJAS Y DESVENTAJAS DEL ALGORITMO PROPUESTO Como se puede observar en la Secci√≥n 3.1, el algoritmo propuesto es muy similar al algoritmo propuesto por Lorensen [LOR87] para la extracci√≥n de isosuperficies, por lo cual √©ste posee ventajas similares a aquellas del algoritmo original (ver Secci√≥n 2.2.1.1), entre las cuales se encuentran: ÔÇ∑ Sencillez: El algoritmo es sencillo de implementar, ya que s√≥lo se necesita una tabla de 38 casos para procesar cada celda en base a la clasificaci√≥n de sus v√≥xeles, y no se requiere ning√∫n algoritmo complejo para el procesamiento de la celda, como triangulaciones de Delaunay [GUO95] o intersecci√≥n de poliedros [FUJ95]. ÔÇ∑ Eficiencia: El algoritmo s√≥lo calcula las intersecciones en aquellas aristas donde es necesario, reutilizando las intersecciones de las celdas anteriores de ser posible, igual que 67 el algoritmo para extraer isosuperficies. Adem√°s, el algoritmo s√≥lo necesita la construcci√≥n de un √≠ndice y b√∫squedas de orden constante en tablas precalculadas. ÔÇ∑ Paralelizable: El algoritmo es f√°cil de paralelizar, debido a que el volumen extra√≠do de una celda es independiente del extra√≠do de otras celdas. Esto brinda una ventaja sobre los algoritmos basados en tetraedrizaciones de Delaunay [GUO95], ya que la paralelizaci√≥n de estos es mucho m√°s complicada. Sin embargo, el algoritmo posee desventajas similares a aquellas del algoritmo original, entre las cuales se encuentran: ÔÇ∑ Manejo de casos ambiguos: El algoritmo no realiza ning√∫n procesamiento adicional para determinar casos ambiguos, ya que √©ste asume que el intervalo de volumen a extraer s√≥lo puede intersectar las celdas de una sola forma por cada √≠ndice de clasificaci√≥n. Sin embargo, el algoritmo maneja las celdas de forma consistente, de forma que no existan huecos en el volumen similares a aquellos generados en el algoritmo original propuesto por Lorensen [LOR87]. En la Secci√≥n 3.5 se describen las consideraciones que se deben tener en cuenta para manejar casos ambiguos en el algoritmo. ÔÇ∑ Tetraedros degenerados: En ciertos casos, el algoritmo genera tetraedros degenerados o con volumen negativo, lo cual se puede corregir durante el post-procesamiento (ver Secci√≥n 3.4). ÔÇ∑ Complejidad de la salida: El algoritmo genera una cantidad excesiva de tetraedros cuando la resoluci√≥n de los modelos de entrada es muy alta, lo que ocasiona que el volumen final sea m√°s dif√≠cil de procesar. Sin embargo, el mallado generado est√° compuesto por una cantidad de tetraedros mucho menor en comparaci√≥n a los mallados generados por el algoritmo propuesto por Nielson y Sung [NIE97b] (ver Secci√≥n 4.2). 3.3. GENERACI√ìN DE LA TABLA DE CONECTIVIDAD Para extraer tetraedros de cada celda el algoritmo necesita una tabla de conectividad que le indique los v√©rtices del mallado a unir en cada celda para obtener los tetraedros que componen el mallado resultante. Esta lista consiste en un conjunto de 4-tuplas de la forma ùëé, ùëè, ùëê, ùëë , donde 68 cada tupla indica que se deben unir los v√©rtices ùëé, ùëè, ùëê y ùëë para generar un tetraedro de salida. La 4-tupla ser√° v√°lida si y s√≥lo si los cuatro elementos de √©sta son diferentes y pertenecen a los v√©rtices intersectados para el caso que est√° siendo procesado. Con el objetivo de preservar la eficiencia del algoritmo final, se deben precalcular los tetraedros de salida para cada caso de intersecci√≥n posible, lo cual se hace mediante la creaci√≥n de celdas sint√©ticas y la extracci√≥n de tetraedros de √©stas. El procedimiento utilizado para la generaci√≥n de la tabla de conectividad consiste en obtener el poliedro-ùõºùõΩ que representa el intervalo ùõº, ùõΩ a extraer, para luego tetraedrizar √©ste mediante el algoritmo propuesto por Max [MAX01] para la tetraedrizaci√≥n de poliedros convexos de forma coherente. A continuaci√≥n se explicar√°n las consideraciones tomadas en cuenta para crear las celdas sint√©ticas sobre las cuales se extraen los tetraedros de salida, as√≠ como el procedimiento utilizado para la extracci√≥n del poliedro-ùõºùõΩ y su tetraedrizaci√≥n. 3.3.1. CREACI√ìN DE LA CELDA SINT√âTICA El procedimiento para la creaci√≥n de una celda sint√©tica recibe como entrada el √≠ndice de clasificaci√≥n ùëÄ de la celda que se desea construir, y produce como salida una celda ùê∂ y un intervalo ùõº, ùõΩ de forma tal que al clasificar los v√≥xeles de la celda ùê∂ en base al intervalo ùõº, ùõΩ utilizando la f√≥rmula descrita en la Secci√≥n 3.1 se obtenga el √≠ndice ùëÄ, es decir: ùõøùëñ ‚àà ‚àí‚àû, ùõº , ùë†ùëñ ùëÄùëñ = 0 ùõº, ùõΩ , ùë†ùëñ ùëÄùëñ = 1 ùõΩ, ‚àû , ùë†ùëñ ùëÄùëñ = 2 donde ùõøùëñ es el isovalor del ùëñ-√©simo v√≥xel de ùê∂ y ùëÄùëñ es el ùëñ-√©simo d√≠gito de ùëÄ si √©ste se interpreta en base-3. Para generar cada uno de los isovalores de los v√≥xeles que delimitan la celda, se fija el intervalo ùõº, ùõΩ , y se calculan los valores de desplazamiento ùëò y tolerancia Œî de la siguiente manera: ùëò = ùõΩ ‚àí ùõº 2 , Œî = ùëò 2 69 donde ùëò se utiliza para calcular el punto base de los isovalores y Œî se utiliza para a√±adir una variaci√≥n aleatoria sobre los isovalores, con el prop√≥sito de que los puntos de intersecci√≥n se encuentren en posici√≥n general [EDE90]. Finalmente, cada isovalor ùê∂ùëñ se calcula en base al valor en la posici√≥n correspondiente en el √≠ndice de la siguiente manera: ùõøùëñ = ùõº ‚àí ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄi = 0 ùõº + ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄùëñ = 1 ùõΩ + ùëò + rand ‚àíŒî, Œî , ùë†ùëñ ùëÄùëñ = 2 donde rand ùê¥, ùêµ representa una funci√≥n que retorna un valor aleatorio uniformemente distribuido en el intervalo ùê¥, ùêµ . 3.3.2. EXTRACCI√ìN DEL POLIEDRO ALFA-BETA DE LA CELDA SINT√âTICA El primer paso para la extracci√≥n del poliedro-ùõºùõΩ consiste en calcular los puntos donde el intervalo de volumen ùõº, ùõΩ a extraer intersecta la celda sint√©tica, en base a los isovalores generados en el paso anterior. El procedimiento para calcular estos puntos es el mismo utilizado en el algoritmo final, el cual se puede observar en la Secci√≥n 3.1. Luego, se calcula la c√°psula convexa de los puntos de intersecci√≥n mediante el uso de un algoritmo de fuerza bruta con tiempo de ejecuci√≥n ùëÇ ùëõ4 , donde ùëõ es la cantidad de puntos de intersecci√≥n entre la celda y el intervalo de volumen a extraer. El uso de fuerza bruta no afecta el desempe√±o del algoritmo final debido a que este procedimiento s√≥lo es realizado durante el preprocesamiento de la tabla de conectividad. La c√°psula convexa obtenida ser√° representada como un conjunto de caras que delimitan el poliedro-ùõºùõΩ, donde cada cara consiste en una lista ordenada de v√©rtices que la delimitan. Este procedimiento consiste en los siguientes pasos, los cuales se pueden observar en la Figura 3.4: 70 Figura 3.4: Pasos necesarios para el c√°lculo del poliedro-ùõºùõΩ a partir de la celda sint√©tica. ÔÇ∑ Calcular los tri√°ngulos que pertenecen a la c√°psula convexa, los cuales ser√°n todos aquellos delimitados por tres puntos de intersecci√≥n ùëÉùëé , ùëÉùëè y ùëÉùëê , tal que no tengan ning√∫n punto de intersecci√≥n del lado positivo del plano definido por √©stos. La ecuaci√≥n del plano ùëá al que pertenece el tri√°ngulo que est√° siendo considerado est√° definida por: ùëá = ùëÅùë• , ùëÅùë¶ , ùëÅùëß , ùê∑ ùëÅ = ùëÅùë• , ùëÅùë¶ , ùëÅùëß = ùëÉùëè ‚àí ùëÉùëé √ó (ùëÉùëê ‚àí ùëÉùëé) ùê∑ = ‚àíùëÅ ‚àô ùëÉùëé donde ùëÅ es la normal del plano y ùê∑ es la distancia de √©ste al origen. Luego, el tri√°ngulo pertenecer√° a la c√°psula convexa si y s√≥lo si no existe un punto de intersecci√≥n ùëÉùëñ tal que: ùëÅ ‚àô ùëÉùëñ + ùê∑ > 0 ÔÇ∑ Clasificar los tri√°ngulos en distintas clases de equivalencia ùúèùëò , donde dos tri√°ngulos pertenecer√°n a la misma clase de equivalencia si y s√≥lo si los planos ùëá1 y ùëá2 a los que pertenecen son equivalentes, es decir: 71 ùëá1 = ùëÅùë• ,1, ùëÅùë¶ ,1, ùëÅùëß ,1, ùê∑1 ùëá2 = ùëÅùë• ,2, ùëÅùë¶ ,2, ùëÅùëß ,2, ùê∑2 ùëá1 ‚â° ùëá2 ‚ü∫ ‚àÉùëò ‚àà ‚Ñù + ùëá1 = ùëòùëá2 ÔÇ∑ Unir los tri√°ngulos de cada clase de equivalencia œÑùëò en una cara poligonal del poliedro- ùõºùõΩ, mediante la aplicaci√≥n de un predicado de ordenamiento sobre los puntos en ùúèùëò . Para realizar esto, se extrae el conjunto ùê¥ con los puntos de intersecci√≥n pertenecientes al grupo que est√° siendo procesado, donde ùê¥ se define como: ùê¥ = ùëé1 , ùëé2 , ‚ãØ , ùëéùëõ ùëéùëñ < ùëéùëñ+1, ‚àÄùëñ ‚àà 1,2, ‚ãØ , ùëõ ‚àí 1 donde ùëéùëñ es el ùëñ-√©simo v√©rtice perteneciente a la cara. Luego, se elige un v√©rtice pivote ùëéùëù , el cual ser√° el v√©rtice inicial a partir del cual se reconstruir√° la cara del poliedro-ùõºùõΩ. Una vez que se ha seleccionado el v√©rtice pivote, se procede a ordenar el resto los puntos a partir de √©ste, mediante el uso de un predicado de ordenamiento ùúåùêπ ùëéùëñ , ùëéùëó que establece que ùëéùëñ precede a ùëéùëó en el grupo ùúèùëò si y s√≥lo s√≠ el tri√°ngulo ùëéùëù , ùëéùëñ , ùëéùëó existe en ùúèùëò , es decir: ùúåùêπ ùëéùëñ , ùëéùëó ‚ü∫ ùëéùëù , ùëéùëñ , ùëéùëó ‚àà ùúèùëò Por ejemplo, en la Figura 3.5 se puede observar una cara hexagonal del poliedro-ùõºùõΩ, donde las flechas rojas indican la precedencia entre los v√©rtices distintos al pivote, y los tri√°ngulos pertenecientes a ùúèùëò son aquellos que utilizan dos aristas grises y una roja. 72 Figura 3.5: Ordenamiento de los puntos en una cara del poliedro-ùõºùõΩ. Una vez que se obtienen todas las caras del poliedro-ùõºùõΩ, este es tetraedrizado utilizando el procedimiento explicado en la Secci√≥n 3.3.3. Para que este procedimiento se realice de forma satisfactoria, es importante verificar que el poliedro-ùõºùõΩ es convexo e incluye todos los puntos de intersecci√≥n calculados. Para verificar que el poliedro-ùõºùõΩ es convexo, se puede observar que todas las caras generadas durante la construcci√≥n tienen a todos los dem√°s v√©rtices del mallado de un s√≥lo lado, lo cual es condici√≥n suficiente para garantizar que los poliedros generados son convexos, ya que de ser c√≥ncavos existir√≠a una cara con v√©rtices del mallado a ambos lados [GRA72]. Para verificar que el poliedro-ùõºùõΩ contiene todos los puntos de intersecci√≥n en la celda, es suficiente verificar que no existe un punto de intersecci√≥n tal que no pertenezca a alg√∫n tri√°ngulo perteneciente a la c√°psula convexa. En la Figura 3.6 se muestran los pol√≠gonos extra√≠dos de las caras de las celdas para los 34 = 81 casos posibles. Como se puede observar, todos los pol√≠gonos no vac√≠os poseen al menos tres v√©rtices, por lo cual cada v√©rtice del mallado final va a pertenecer al menos a una cara externa de la celda, ya que no existen v√©rtices estrictamente dentro de la celda y cada v√©rtice posee al menos dos vecinos en una misma cara, con los cuales forma una cara externa perteneciente a la c√°psula convexa. 73 Figura 3.6: Posibles intersecciones entre el intervalo ùõº, ùõΩ a extraer y cada cara de la celda. 3.3.3. TETRAEDRIZACI√ìN DEL POLIEDRO ALFA-BETA El paso final para la extracci√≥n del intervalo de volumen consiste en la tetraedrizaci√≥n del poliedro-ùõºùõΩ de la celda sint√©tica, mediante el uso del algoritmo propuesto por Max [MAX01], el cual permite la tetraedrizaci√≥n de poliedros convexos de forma consistente en todas las caras. Esto evita el problema descrito en la Secci√≥n 2.3.3.2 para el algoritmo basado en tetracubos marchantes, debido a que este algoritmo garantiza que la triangulaci√≥n utilizada para cada cara del poliedro-ùõºùõΩ ser√° la misma para ambos poliedros que la comparten. Este algoritmo consta de dos pasos principales: en la primera fase √©ste divide cada cara del poliedro en tri√°ngulos, utilizando las diagonales que parten desde el menor punto de la cara hacia los dem√°s puntos de √©sta; en la segunda fase el algoritmo tetraedriza el poliedro trazando diagonales desde el menor punto del poliedro hacia todos los dem√°s puntos del poliedro. Como se puede observar, para la ejecuci√≥n de este algoritmo se necesita un predicado de orden total ùúå ùëéùëñ , ùëéùëó para determinar si un punto de intersecci√≥n ùëéùëñ precede a otro punto de intersecci√≥n ùëéùëó . Para este algoritmo se utiliza el ordenamiento descrito en la Secci√≥n 3.1, el cual cumple con todas las propiedades descritas en la Secci√≥n 2.3.3.2, las cuales son necesarias y suficientes para establecer un predicado de orden total. 74 Para implementar este algoritmo, se utiliz√≥ un grafo de conectividad ùê∫ = ùê¥, ùê∏ , donde ùê¥ es el conjunto con los puntos de intersecci√≥n de la celda y ùê∏ es el conjunto con las aristas ùëéùëñ , ùëéùëó que unen los v√©rtices dentro del modelo. Las aristas existentes pertenecientes a ùê∏ son las siguientes: ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ sea adyacente a ùëéùëó en alguna cara del poliedro a tetraedrizar. Estas aristas corresponden a las aristas originales del poliedro-ùõºùõΩ. ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ comparta alguna cara con ùëéùëó donde ùëéùëñ sea el menor v√©rtice de dicha cara. Estas aristas corresponden a aquellas generadas por la primera fase del algoritmo de tetraedrizaci√≥n propuesto por Max [MAX01]. ÔÇ∑ Todas aquellas aristas ùëéùëñ , ùëéùëó , tal que ùëéùëñ ‚â† ùëéùëó y ùëéùëñ sea el menor v√©rtice del poliedro a tetraedrizar. Estas aristas corresponden a aquellas generadas por la segunda fase del algoritmo de tetraedrizaci√≥n propuesto por Max [MAX01]. En la Figura 3.7 se pueden observar las distintas aristas generadas por el algoritmo de tetraedrizaci√≥n, donde las aristas negras representan las aristas originales del poliedro, las aristas azules representas las aristas generadas durante la primera fase y las aristas rojas representan las aristas internas generadas durante la segunda fase. Figura 3.7: Aristas generadas durante la tetraedrizaci√≥n del poliedro-ùõºùõΩ. 75 Luego, una vez construido el grafo ùê∫ = ùê¥, ùê∏ con las aristas del poliedro, se procede a la extracci√≥n de los tetraedros generados, mediante la b√∫squeda de subgrafos isomorfos a ùê∫4, donde ùê∫4 representa un grafo completo 12 con cuatro v√©rtices, ya que un tetraedro es isomorfo a ùê∫4. Este procedimiento se lleva a cabo probando cada cuarteto de v√©rtices ùëé, ùëè, ùëê, ùëë posible, a√±adi√©ndolo a la salida si y s√≥lo s√≠ las seis aristas ùëé, ùëè , ùëé, ùëê , ùëé, ùëë , ùëè, ùëê , ùëè, ùëë y ùëê, ùëë pertenecen a ùê∏. Este algoritmo de fuerza bruta tiene complejidad en tiempo igual a ùëÇ ùëõ4 ; sin embargo, esto no afecta la eficiencia del algoritmo final, ya que este procedimiento s√≥lo se lleva a cabo durante la generaci√≥n de la tabla de conectividad. 3.4. FASE DE POST-PROCESAMIENTO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo tiene la desventaja de generar tetraedros degenerados o con volumen negativo, lo cual se debe a que en ciertos casos de intersecci√≥n entre el intervalo de volumen a extraer y las celdas se generan tetraedros cuya orientaci√≥n no depende √∫nicamente de los √≠ndices de los extremos dentro de la celda, si no de la posici√≥n final de estos en el espacio. Por ejemplo, para el caso 10000011 3 = 2191, el tetraedro 0,10,16,22 es necesario para reconstruir el intervalo de volumen dentro de la celda. Sin embargo, no se puede determinar la orientaci√≥n del tetraedro sin calcular las posiciones donde las aristas son intersectadas, ya que la orientaci√≥n de √©ste depende de la posici√≥n de las intersecciones ùëÉ16,ùõº y ùëÉ22,ùõº , como se puede observar en la Figura 3.8. 12 Un grafo completo de ùëõ v√©rtices es aqu√©l que contiene aristas entre todo par de v√©rtices. 76 Figura 3.8: Caso donde la orientaci√≥n de un tetraedro no se puede determinar sin calcular la posici√≥n de las intersecciones en el espacio. Para observar por qu√© ocurre esto, se pueden fijar los puntos ùëÉ0,‚àÖ, ùëÉ10,ùõº y ùëÉ16,ùõº y mover el punto ùëÉ22,ùõº a lo largo de la arista ùê¥ùêµ de la celda; mientras √©ste se acerque al v√≥xel ùê¥ el tetraedro tendr√° volumen positivo y mientras √©ste se acerque al v√≥xel ùêµ el tetraedro tendr√° volumen negativo (ver Secci√≥n 2.4.2 para m√°s informaci√≥n sobre la definici√≥n del volumen de un tetraedro). Inclusive, existe un punto intermedio ùê∂ en cual el tetraedro tendr√° volumen nulo, por lo cual se considerar√° un tetraedro degenerado. Para solucionar esto, se puede verificar cada tetraedro antes de a√±adirlo al mallado final, y en caso de tener volumen negativo se intercambian los dos √∫ltimos v√©rtices del tetraedro, y en caso de tener volumen nulo simplemente no se a√±ade al mallado final. 3.5. CONSIDERACIONES PARA EL MANEJO DE CASOS AMBIGUOS Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para manejar casos ambiguos en la celda, sino asume que la intersecci√≥n del intervalo de volumen con la celda consiste en un √∫nico poliedro convexo o el vac√≠o. En esta secci√≥n se analizar√°n los distintos tipos de ambig√ºedades existentes y las posibles soluciones para el manejo de estos casos, para finalmente analizar la salida del algoritmo propuesto as√≠ como las limitaciones de √©ste que impiden el manejo de casos ambiguos de forma sencilla. 77 3.5.1. MODELOS TOPOL√ìGICAMENTE CORRECTOS Para analizar los casos ambiguos que se pueden encontrar durante la ejecuci√≥n del algoritmo propuesto basado en cubos marchantes, primero se debe definir qu√© es una superficie topol√≥gicamente correcta. En [CHE95] se define que una superficie es topol√≥gicamente correcta si y s√≥lo si la topolog√≠a de los tetraedros generados coincide con la topolog√≠a de la funci√≥n ùêπ ùë•, ùë¶, ùëß dentro de cada celda. Para obtener un intervalo de volumen topol√≥gicamente correcto, dos v√≥xeles de la misma clase (positivo, negativo o neutro) deben estar unidos dentro de una celda si y s√≥lo si existe un camino dentro de √©sta que conecte ambos v√≥xeles y no cambie de clase. El caso m√°s simple para determinar si dos v√≥xeles est√°n conectados es cuando existe un camino a trav√©s de las aristas de la celda que s√≥lo contiene v√≥xeles de la misma clase. Sin embargo, hay dos casos donde la regla anterior no es suficiente. Por ejemplo, cuando se tiene una cara con dos v√≥xeles positivos y dos v√≥xeles negativos en esquinas opuestas que no est√°n conectados a trav√©s de las dem√°s aristas de la celda, no se puede decir directamente si los v√≥xeles positivos est√°n unidos, si los v√≥xeles negativos est√°n unidos o los cuatro v√≥xeles est√°n completamente separados, debido a que √©stos podr√≠an estar unidos mediante un camino que pase por dentro de la cara. A este tipo de caras se les denomina caras ambiguas, como la que se puede observar en la Figura 3.9. Figura 3.9: Ejemplo de una cara ambigua. A la izquierda se muestra el caso donde los v√≥xeles positivos se encuentran unidos, a la derecha se muestra el caso donde los v√≥xeles negativos se encuentran unidos, y en el centro se muestra el caso donde √©stos son separados. Debido a la existencia de tres tipos diferentes de v√≥xeles, existen varios tipos de caras ambiguas, entre las cuales se encuentran: 78 ÔÇ∑ Dos v√≥xeles positivos y dos v√≥xeles neutros, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles negativos y dos v√≥xeles neutros, con los v√≥xeles negativos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles positivos, un v√≥xel neutro y un v√≥xel negativo, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos o separarlos. ÔÇ∑ Dos v√≥xeles negativos, un v√≥xel neutro y un v√≥xel positivo, con los v√≥xeles negativos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles negativos o separarlos. ÔÇ∑ Dos v√≥xeles positivos y dos v√≥xeles negativos, con los v√≥xeles positivos en esquinas opuestas. En este caso se puede elegir entre unir los v√≥xeles positivos, unir los v√≥xeles negativos o separar los cuatro v√≥xeles. En la Figura 3.10 se pueden observar las distintas caras ambiguas posibles, as√≠ como todas las soluciones posibles para cada uno de ellos. Cualquier m√©todo a utilizar para la resoluci√≥n de ambig√ºedades debe tomar en cuenta todos los casos posibles, de forma que se pueda obtener la topolog√≠a correcta de la funci√≥n ùêπ ùë•, ùë¶, ùëß . Figura 3.10: Posibles caras ambiguas durante la extracci√≥n de intervalos de volumen mediante cubos marchantes. 79 3.5.2. MANEJO DE AMBIG√úEDADES EN LAS CARAS DE LA CELDA Para manejar las ambig√ºedades en las caras de la celda, se puede extender el m√©todo de la decisi√≥n asint√≥tica propuesto por Nielson [NIE91] para la resoluci√≥n de los casos ambiguos durante la extracci√≥n de isosuperficies (ver Secci√≥n 2.2.1.4). Este m√©todo consiste en elegir entre separar o no separar dos v√≥xeles opuestos de una cara ambigua en base a la evaluaci√≥n de un punto medio de √©sta por medio de interpolaci√≥n bilineal, de forma tal que la superficie generada sea topol√≥gicamente correcta (ver Secci√≥n 3.5.1). La interpolaci√≥n bilineal a trav√©s de una cara es la extensi√≥n natural a realizar interpolaci√≥n lineal a trav√©s de un segmento en dos dimensiones. Despu√©s de realizar un cambio de variables, se puede asumir que el dominio de la cara es un cuadrado unitario ùë†, ùë° 0 ‚â§ ùë†, ùë° ‚â§ 1 , lo cual lleva a la siguiente f√≥rmula para realizar interpolaci√≥n bilineal: ùêµ ùë†, ùë° = 1 ‚àí ùë† ùë† ùêµ0,0 ùêµ0,1 ùêµ1,0 ùêµ1,1 1 ‚àí ùë° ùë° donde ùêµ0,0, ùêµ0,1, ùêµ1,0 y ùêµ1,1 son los isovalores de los v√≥xeles que delimitan la cara ambigua. Al igual que en el m√©todo original propuesto por Nielson [NIE91], se puede verificar f√°cilmente que las curvas ùêªùõº = ùë†, ùë° ùêµ ùë†, ùë° = ùõº y ùêªùõΩ = ùë†, ùë° ùêµ ùë†, ùë° = ùõΩ son hip√©rbolas. Hay varias formas en que el dominio de la cara puede intersectar (o no intersectar) estas hip√©rbolas, como se puede observar en la Figura 3.11. Figura 3.11: Distintos resultados posibles de intersecci√≥n con las hip√©rbolas ùêªùõº y ùêªùõΩ , donde ùêªùõº est√° representada por la curva de color rojo y ùêªùõΩ est√° representada por la curva de color azul. Los casos ambiguos se dan cuando el dominio intersecta ambas componentes de la hip√©rbola, en cuyo caso no se puede determinar a priori si los v√≥xeles positivos est√°n dentro de la misma regi√≥n de las hip√©rbolas. Por ejemplo, en la Figura 3.12 se pueden observar tres formas posibles 80 en que el dominio de la cara intersecte las hip√©rbolas ùêªùõº y ùêªùõΩ en la cara ambigua mostrada en la Figura 3.9. Figura 3.12: Posibles hip√©rbolas para la cara ambigua mostrada en la Figura 3.9. La soluci√≥n propuesta por Nielson [NIE91] puede ser adaptada para la extracci√≥n de intervalos de volumen utilizando mediante la evaluaci√≥n de ùêπ ùë•, ùë¶, ùëß en el punto de la cara donde las as√≠ntotas de las hip√©rbolas se intersectan. La evaluaci√≥n de este punto permite determinar el par de v√≥xeles opuestos a unir, o si √©stos deben ser separados en su totalidad. El primer paso consiste en buscar las as√≠ntotas ùë†, ùë° ùë† = ùëÜ‚Ñé y ùë†, ùë° ùë° = ùëá‚Ñé , donde: ùëÜ‚Ñé = ùêµ0,0 ‚àí ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 , ùëá‚Ñé = ùêµ0,0 ‚àí ùêµ1,0 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 por lo cual se puede calcular el valor en ùêµ ùëÜùõº , ùëáùõº mediante interpolaci√≥n bilineal: ùêµùëÜ,ùëá = ùêµ ùëÜ‚Ñé , ùëá‚Ñé = ùêµ0,0ùêµ1,1 ‚àí ùêµ1,0ùêµ0,1 ùêµ0,0 + ùêµ1,1 ‚àí ùêµ0,1 ‚àí ùêµ1,0 Finalmente, para determinar a qu√© caso de la Figura 3.12 corresponde la cara ambigua se compara ùêµùëÜ,ùëá con el intervalo ùõº, ùõΩ a extraer: Si ùêµùëÜ,ùëá se encuentra por debajo del intervalo (ùêµùëÜ,ùëá < ùõº), entonces los v√≥xeles negativos deben ser unidos; si ùêµùëÜ,ùëá se encuentra por encima del intervalo (ùêµùëÜ,ùëá > ùõΩ), entonces los v√≥xeles positivos deben ser unidos; en caso contrario (ùõº ‚â§ ùêµùëÜ,ùëá ‚â§ ùõΩ) los cuatro v√≥xeles deben ser separados. Estos tres casos se pueden observar en la Figura 3.13. 81 Figura 3.13: Triangulaci√≥n final despu√©s de evaluar la intersecci√≥n de las as√≠ntotas. 3.5.3. SALIDA DEL ALGORITMO PROPUESTO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto para la extracci√≥n de intervalos de volumen mediante cubos marchantes no realiza ning√∫n procesamiento adicional para el manejo de los casos ambiguos. El algoritmo propuesto, en lugar de determinar cu√°l soluci√≥n de la Figura 3.10 es topol√≥gicamente correcta, el algoritmo elige resolver las ambig√ºedades separando todos los v√≥xeles de la celda, ya que √©ste construye el poliedro-ùõºùõΩ como la c√°psula convexa [GRA72] de los puntos de intersecci√≥n. Es importante mencionar que a pesar de que todas las resoluciones posibles de los casos ambiguos consisten en piezas convexas, no se puede garantizar que el poliedro-ùõºùõΩ sea convex√≥ o est√© compuesto por piezas convexas √∫nicamente. Por ejemplo, en la Figura 3.14 se puede observar el caso 10110111 3, en el cual se obtiene un poliedro c√≥ncavo si se unen los v√≥xeles negativos de la cara superior, ya que la l√≠nea ùê¥ùêµ no se encuentra completamente dentro del poliedro. 82 Figura 3.14: Caso donde el poliedro-ùõºùõΩ es c√≥ncavo debido a la uni√≥n de los v√≥xeles negativos. Debido a que no se puede garantizar que el poliedro-ùõºùõΩ es convexo si se manejan los casos ambiguos, entonces es imposible tetraedrizar este poliedro sin conocer la posici√≥n final de los puntos de intersecci√≥n [MAX01]. Esto impide el uso de una tabla de conectividad para generar los tetraedros de salida, lo cual ocasiona que se requiera el uso de un algoritmo para la tetraedrizaci√≥n de poliedros c√≥ncavos durante el procesamiento de cada celda del volumen. 83 CAP√çTULO 4. IMPLEMENTACI√ìN Y PRUEBAS Para implementar los algoritmos mencionados en los objetivos espec√≠ficos (ver Secci√≥n 1.2), se utiliz√≥ el lenguaje de programaci√≥n C++, debido a que √©ste provee las funcionalidades necesarias para la implementaci√≥n eficiente de estos, as√≠ como diversas bibliotecas con c√≥digo abierto reusable, lo que facilita la implementaci√≥n de las partes no relacionadas con el algoritmo, como la interfaz gr√°fica de usuario. Entre las herramientas y bibliotecas utilizadas para la implementaci√≥n se encuentran: ÔÇ∑ Visual Studio 2008 13 : Consiste en el entorno de desarrollo (IDE) proporcionado por Microsoft para la creaci√≥n de aplicaciones y bibliotecas en C++. ÔÇ∑ STLport 5.2.1 14 : Consiste en una implementaci√≥n de la Biblioteca Est√°ndar de Plantillas de C++ (Standard Template Library, STL), la cual implementa extensiones importantes de la misma, como lo son los contenedores asociativos por hashing. ÔÇ∑ Boost 1.38.0 15 : Biblioteca c√≥digo abierto con extensiones para la biblioteca est√°ndar de C++, incluyendo funcionalidades que permiten el manejo de m√∫ltiples hilos, programaci√≥n gen√©rica, arreglos est√°ticos y manejo del sistema de archivos. ÔÇ∑ Qt Open Source 4.5.1 16 : Consiste en un conjunto de bibliotecas para C++, las cuales implementan funcionalidades para el dise√±o de interfaces gr√°ficas de usuario (GUIs). Se escogi√≥ esta biblioteca debido a que es de c√≥digo abierto y portable entre distintos tipos de sistemas. ÔÇ∑ Doxygen 1.5.8 17 : Consiste en una aplicaci√≥n para generar documentaci√≥n HTML para c√≥digo fuente, el cual soporta C, C++ y Java, entre otros lenguajes. Para evaluar el desempe√±o del algoritmo propuesto, se desarrollaron dos aplicaciones de prueba para el manejo de datos volum√©tricos; la primera para la extracci√≥n de isosuperficies y la segunda para la extracci√≥n de intervalos de volumen. Para la extracci√≥n de isosuperficies se implement√≥ cubos marchantes (ver Secci√≥n 2.2.1), tetracubos marchantes (ver Secci√≥n 2.2.2) y 13 http://www.microsoft.com/visualstudio 14 http://www.sourceforge.net/projects/stlport 15 http://www.boost.org 16 http://www.qtsoftware.com 17 http://www.stack.nl/~dimitri/doxygen 84 cubos marchantes con resoluci√≥n de ambig√ºedades (ver Secciones 2.2.1.4 y 2.2.1.5), y para la extracci√≥n de intervalos de volumen se implement√≥ tetracubos marchantes (ver Secci√≥n 2.3.3) y el algoritmo propuesto basado en cubos marchantes (ver Cap√≠tulo 3). Con el objetivo de comparar los algoritmos implementados, se utilizaron cuatro vol√∫menes de datos, donde los tres primeros fueron obtenidos a partir de tomograf√≠as computarizas (CT) y el √∫ltimo fue obtenido a partir de la ecuaci√≥n impl√≠cita de una hip√©rbola, cuyos datos b√°sicos se pueden observar en la Tabla 4.1. ID Volumen Fuente V√≥xeles Tipo de dato Bytes 1 Brazo derecho CT 492ÔÇ¥240ÔÇ¥155 Entero de 8 bits. 53MB 2 Cabeza CT 256ÔÇ¥256ÔÇ¥113 Entero de 16 bits. 42MB 3 Mu√±eca derecha CT 256ÔÇ¥256ÔÇ¥183 Entero de 8 bits. 34MB 4 Hip√©rbola ùêπ ùë•, ùë¶, ùëß = ùë•ùë¶ùëß 128ÔÇ¥128ÔÇ¥128 Flotante simple. 24MB Tabla 4.1: Vol√∫menes de datos utilizados para probar los algoritmos implementados. Para cada volumen se realiz√≥ la extracci√≥n de diversas isosuperficies e intervalos de volumen, utilizando los algoritmos implementados y evaluando tanto el tiempo requerido para la extracci√≥n del mallado final as√≠ como la calidad de √©ste utilizando las m√©tricas descritas en la Secci√≥n 2.4. A continuaci√≥n se mostrar√°n los resultados obtenidos de las pruebas realizadas sobre los algoritmos de extracci√≥n de isosuperficies y de intervalos de volumen utilizando los vol√∫menes descritos en la Tabla 4.1, para finalmente realizar comparaciones cualitativas sobre los modelos obtenidos de los algoritmos para la extracci√≥n de intervalos de volumen. 4.1. RESULTADOS OBTENIDOS DE LA EXTRACCI√ìN DE ISOSUPERFICIES Para evaluar el desempe√±o de los algoritmos de extracci√≥n de isosuperficies, se realizaron extracciones de distintas isosuperficies de los cuatro vol√∫menes de prueba descritos en la Tabla 4.1, de las cuales se obtuvo el tiempo necesario para la extracci√≥n de las isosuperficies as√≠ como la calidad de los mallados que los aproximan. En los siguientes gr√°ficos se muestra el comportamiento del tiempo de ejecuci√≥n de los distintos algoritmos de extracci√≥n de isosuperficies en base al isovalor extra√≠do. 85 Gr√°fico 4.1: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de isosuperficies del Volumen #1 (Brazo derecho). Gr√°fico 4.2: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de isosuperficies del Volumen #2 (Cabeza). 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 0 0.5 1 1.5 2 2.5 3 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 0.0 0.5 1.0 1.5 2.0 2.5 3.0 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2 148.7 446.2 743.6 1041.1 1338.5 1636.0 1933.5 2230.9 2528.4 2825.8 3123.3 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 86 En ambos gr√°ficos se puede observar que el tiempo de ejecuci√≥n requerido por tetracubos marchantes es claramente superior al tiempo de ejecuci√≥n de cubos marchantes, en un 25% si se aplica resoluci√≥n de ambig√ºedades y en un 30% si no se aplica. Tambi√©n se puede resaltar que el costo en tiempo de ejecuci√≥n para realizar la resoluci√≥n de ambig√ºedades en cubos marchantes es insignificante, ya que ambos algoritmos mostraron el mismo desempe√±o. Finalmente, se puede deducir que el tiempo de ejecuci√≥n del algoritmo es directamente proporcional al tama√±o del mallado generado, debido a que las curvas del tiempo de ejecuci√≥n siguen el mismo patr√≥n de la curva de la cantidad de tri√°ngulos generados. Otro aspecto importante a tomar en cuenta a la hora de evaluar un algoritmo para la extracci√≥n de isosuperficies consiste en calcular el n√∫mero de primitivas utilizadas por el algoritmo para representar el mallado final, ya que esto indicar√° la facilidad con la cual se podr√°n visualizar y manipular los mallados obtenidos. A continuaci√≥n se puede observar un gr√°fico donde se muestra la cantidad de primitivas generadas por los algoritmos de extracci√≥n de isosuperficie para el Volumen #1 (Brazo derecho): Gr√°fico 4.3: Comparaci√≥n del n√∫mero de primitivas generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #1 (Brazo derecho). Como se puede observar en el Gr√°fico 4.3, la complejidad de los modelos generados por tetracubos marchantes es aproximadamente un 145% m√°s compleja que aquellos modelos 0 1 2 3 4 5 6 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e P ri m it iv a s Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) 87 generados por cubos marchantes, se aplique o no resoluci√≥n de ambig√ºedades. Esto se debe a que tetracubos marchantes requiere dividir cada celda del volumen en tetraedros (ver Secci√≥n 2.2.2.1) para luego extraer tri√°ngulos de cada uno de ellos, mientras que cubos marchantes no requiere esta divisi√≥n previa, lo cual ocasiona que genere una salida m√°s sencilla. Tambi√©n se puede destacar que la aplicaci√≥n de resoluci√≥n de ambig√ºedades en cubos marchantes no requiere la generaci√≥n de una cantidad significativa de primitivas adicionales, lo que se debe a que los casos ambiguos son poco frecuentes en general [NIE91]. El valor elevado de primitivas generado para el isovalor 81.1 se debe a que este valor representa la densidad intermedia entre la densidad de los tejidos blandos y la de los huesos. Finalmente, se evaluaron los mallados obtenidos por los tres algoritmos utilizando las m√©tricas expuestas en la Secci√≥n 2.4.1, con el fin de predecir la calidad de la visualizaci√≥n y manipulaci√≥n que se puede obtener de estos mallados. En el siguiente gr√°fico se puede observar el porcentaje de primitivas de buena calidad generadas por los tres algoritmos a partir del Volumen #3, utilizando la relaci√≥n de aspecto como valor de referencia (ver Secci√≥n 2.4.1.2): Gr√°fico 4.4: Comparaci√≥n del n√∫mero de primitivas de buena calidad generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #3 (Mu√±eca), utilizando la relaci√≥n de aspecto como referencia. 0.0 0.5 1.0 1.5 2.0 0 5 10 15 20 25 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s % d e p ri m it iv a s d e b u e n a c a li d a d Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 88 En el Gr√°fico 4.4 se puede observar que tetracubos marchantes extrae un mallado triangular con una cantidad de primitivas de alta calidad 85% mayor en comparaci√≥n con cubos marchantes. Esto se puede confirmar en el Gr√°fico 4.5, donde se puede verificar que la calidad de los tri√°ngulos generados por tetracubos marchantes es 4% superior en promedio. Es importante recordar que la relaci√≥n de aspecto es una m√©trica propia, es decir, para las primitivas ideales el valor de la m√©trica se aproxima a 1, y para las primitivas degeneradas el valor de la m√©trica se aproxima a ‚àû (ver Secci√≥n 2.4). Gr√°fico 4.5: Comparaci√≥n de la calidad de las primitivas generadas por los algoritmos de extracci√≥n de isosuperficies del Volumen #3 (Mu√±eca), utilizando el promedio geom√©trico de la relaci√≥n de aspecto como referencia. En base al Gr√°fico 4.4 y al Gr√°fico 4.5 tambi√©n se puede deducir que la calidad del mallado generado es independiente a la cantidad de primitivas que lo componen, ya que el porcentaje de tri√°ngulos de buena calidad y el promedio geom√©trico de la calidad de √©stos no var√≠an considerablemente, a pesar del tama√±o del mallado final. 4.2. RESULTADOS OBTENIDOS DE LA EXTRACCI√ìN DE INTERVALOS DE VOLUMEN Para evaluar el desempe√±o de los algoritmos de extracci√≥n de intervalos de volumen, se realizaron extracciones de distintos intervalos de los cuatro vol√∫menes de prueba descritos en la 0.0 0.5 1.0 1.5 2.0 1 1.2 1.4 1.6 1.8 2 2.2 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T ri √° n g u lo s G e n e ra d o s P ro m e d io G e o m √© tr ic o Isovalor Extra√≠do Cubos Marchantes sin resoluci√≥n de ambig√ºedades Cubos Marchantes con resoluci√≥n de ambig√ºedades Tetracubos Marchantes (Isosuperficies) Tri√°ngulos Generados en Promedio 89 Tabla 4.1, de los cuales se obtuvo el tiempo necesario para la extracci√≥n de √©stos as√≠ como la calidad de los mallados que las aproximan. En los siguientes gr√°ficos se muestra el comportamiento del tiempo de ejecuci√≥n de los distintos algoritmos de extracci√≥n de intervalos de volumen en base al isovalor extra√≠do. Gr√°fico 4.6: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #1 (Brazo derecho). 0 2 4 6 8 10 12 14 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 90 Gr√°fico 4.7: Comparaci√≥n del tiempo de ejecuci√≥n por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #2 (Cabeza). En ambos gr√°ficos se puede observar que el tiempo de ejecuci√≥n requerido por tetracubos marchantes es superior en un 40% al tiempo de ejecuci√≥n de cubos marchantes, lo cual se debe a que el algoritmo propuesto realiza un procesamiento menor al realizado por tetracubos marchantes, ya que no tiene que calcular las intersecciones en las diagonales de las caras de la celda, las cuales son necesarias para dividir la celda en tetraedros. Finalmente, se puede deducir que el tiempo de ejecuci√≥n del algoritmo es directamente proporcional al tama√±o del mallado generado, debido a que las curvas del tiempo de ejecuci√≥n siguen el mismo patr√≥n de la curva de la cantidad de tetraedros generados. Otro aspecto importante a tomar en cuenta a la hora de evaluar un algoritmo para la extracci√≥n de intervalos de volumen consiste en calcular el n√∫mero de primitivas utilizadas por el algoritmo para representar el mallado final, ya que esto indicar√° la facilidad con la cual se podr√°n visualizar y manipular los mallados obtenidos. A continuaci√≥n se puede observar un gr√°fico donde se muestra la cantidad de primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen para el Volumen #1 (Brazo derecho): 0 1 2 3 4 5 6 7 8 9 10 0 0.5 1 1.5 2 2.5 3 3.5 148.7 446.2 743.6 1041.1 1338.5 1636.0 1933.5 2230.9 2528.4 2825.8 3123.3 M il lo n e s d e T e tr a e d ro s G e n e ra d o s T ie m p o d e E je cu ci √≥ n ( s) Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 91 Gr√°fico 4.8: Comparaci√≥n del n√∫mero de primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #1 (Brazo derecho). Como se puede observar en el Gr√°fico 4.8, los modelos generados por el algoritmo propuesto basado en cubos marchantes s√≥lo requieren un 50% de las primitivas utilizadas por los modelos generados mediante el uso de tetracubos marchantes. Esto se debe a que tetracubos marchantes requiere dividir cada celda del volumen en tetraedros (ver Secci√≥n 2.2.2.1) para luego extraer tetraedros de cada uno de ellos, mientras que el algoritmo propuesto no requiere esta divisi√≥n previa, lo cual ocasiona que genere una salida m√°s sencilla. Como se mencion√≥ anteriormente, el valor elevado de primitivas generado para el isovalor 81.1 se debe a que este valor representa la densidad intermedia entre la densidad de los tejidos blandos y la de los huesos. Finalmente, se evaluaron los mallados obtenidos por ambos algoritmos utilizando las m√©tricas expuestas en la Secci√≥n 2.4.2, con el fin de predecir la calidad de la visualizaci√≥n y manipulaci√≥n que se puede obtener de estos mallados. En el siguiente gr√°fico se puede observar el porcentaje de m√©tricas de buena calidad generadas por ambos algoritmos a partir del Volumen #3, utilizando la relaci√≥n de aspecto como valor de referencia (ver Secci√≥n 2.4.2.1): 0 2 4 6 8 10 12 14 16 18 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e P ri m it iv a s Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) 92 Gr√°fico 4.9: Comparaci√≥n del n√∫mero de primitivas de buena calidad generadas por los algoritmos de extracci√≥n de intervalos de volumen del Volumen #3 (Mu√±eca), utilizando la relaci√≥n de aspecto como referencia. En el Gr√°fico 4.9 se puede observar que tetracubos marchantes extrae un mallado tetra√©drico con una cantidad 35% mayor de primitivas de alta calidad en comparaci√≥n con cubos marchantes, lo cual se puede confirmar en el Gr√°fico 4.10, donde se puede verificar que la calidad promedio de los tri√°ngulos generados por tetracubos marchantes es superior en un 70%. Es importante recordar que la relaci√≥n de aspecto es una m√©trica propia, es decir, para las primitivas ideales el valor de la m√©trica se aproxima a 1, y para las primitivas degeneradas el valor de la m√©trica se aproxima a ‚àû (ver Secci√≥n 2.4). 0 1 2 3 4 5 6 7 0 10 20 30 40 50 60 70 80 90 100 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s % d e p ri m it iv a s d e b u e n a c a li d a d Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 93 Gr√°fico 4.10: Comparaci√≥n de la calidad de las primitivas generadas por los algoritmos de extracci√≥n de intervalos de volumen a partir del Volumen #3 (Mu√±eca), utilizando el promedio geom√©trico de la relaci√≥n de aspecto como referencia. En base al Gr√°fico 4.9 y al Gr√°fico 4.10 se puede deducir que la calidad del mallado generado es directamente proporcional a la cantidad de primitivas que lo componen, ya que, a medida que el tama√±o del volumen aumenta, el porcentaje de tetraedros de buena calidad aumenta y el promedio geom√©trico de la calidad de √©stos disminuye. Esto se debe a que los vol√∫menes m√°s grandes est√°n compuestos por una mayor cantidad de celdas internas 18 , las cuales generan tetraedros de buena calidad. 4.3. AN√ÅLISIS CUALITATIVO SOBRE LAS ISOSUPERFICIES EXTRA√çDAS Despu√©s de analizar cuantitativamente los resultados obtenidos por los algoritmos de extracci√≥n de isosuperficies en la Secci√≥n 4.1, se procedi√≥ a realizar un an√°lisis cualitativo de la calidad de las isosuperficies extra√≠das. Este an√°lisis consiste en observar y comparar las caracter√≠sticas de los mallados generados visualmente, con el fin de determinar cu√°l algoritmo produce el mejor resultado. 18 Una celda interna es aquella delimitada por ocho (8) v√≥xeles neutros. 0 1 2 3 4 5 6 7 1 1.5 2 2.5 3 3.5 4 11.6 34.8 58.0 81.1 104.3 127.5 150.7 173.9 197.0 220.2 243.4 M il lo n e s d e T e tr a e d ro s G e n e ra d o s P ro m e d io G e o m √© tr ic o Isovalor Extra√≠do Cubos Marchantes (algoritmo propuesto) Tetracubos Marchantes (Intervalos de Volumen) Tetraedros Generados en Promedio 94 Para visualizar el resultado obtenido a partir de las superficies extra√≠das, se utilizaron los modelos de sombreado plano (flat shading) y por gradiente (gradient-shading), como se explic√≥ en la Secci√≥n 2.2.1. Para implementar la interfaz gr√°fica de usuario se utilizaron las bibliotecas Qt y OpenGL 19 , lo cual permiti√≥ la implementaci√≥n sencilla y eficiente del visualizador de isosuperficies. A continuaci√≥n se analizar√°n varias capturas de pantalla obtenidas de algunas superficies extra√≠das mediantes las t√©cnicas mencionadas anteriormente. Figura 4.1: Isosuperficies obtenidas a partir del Volumen #2 (Cabeza) utilizando cubos marchantes sin resoluci√≥n de ambig√ºedades (izquierda) y cubos marchantes con resoluci√≥n de ambig√ºedades (derecha), rasterizadas mediante el sombreado por gradiente (gradient-shading). Como se puede observar en la Figura 4.1, la salida de cubos marchantes no difiere notablemente independientemente de si se aplica resoluci√≥n de ambig√ºedades o no. Esto se debe a que la frecuencia con la que ocurren los casos ambiguos representa menos del 1% del volumen total [NIE91]. 19 http://www.opengl.org 95 Figura 4.2: Isosuperficies obtenidas a partir del Volumen #3 (Mu√±eca) utilizando cubos marchantes con resoluci√≥n de ambig√ºedades (izquierda) y tetracubos marchantes (derecha), rasterizadas mediante el sombreado plano (flat-shading). En la Figura 4.2 se puede observar la extracci√≥n de una isosuperficie proveniente del Volumen #3 (Mu√±eca) mediante el uso de cubos marchantes y tetracubos marchantes, donde se muestra la ampliaci√≥n de una secci√≥n de las superficies extra√≠das, en las cuales se observa que cubos marchantes produce una superficie con mucho menos ruido que aquella producida por tetracubos marchantes. La explicaci√≥n a este fen√≥meno se encuentra en la Secci√≥n 4.4. 4.4. AN√ÅLISIS CUALITATIVO SOBRE LOS INTERVALOS DE VOLUMEN EXTRA√çDOS Despu√©s de analizar cuantitativamente los resultados obtenidos por los algoritmos de extracci√≥n de intervalos de volumen en la Secci√≥n 4.2, se procedi√≥ a realizar un an√°lisis cualitativo de la calidad de los intervalos extra√≠dos. Este an√°lisis consiste en observar y comparar las caracter√≠sticas de los mallados generados visualmente, con el fin de determinar cu√°l algoritmo produce el mejor resultado. Para visualizar el resultado obtenido a partir de las superficies extra√≠das, se utilizaron los modelos de sombreado plano (flat shading) y por gradiente (gradient-shading), como se explic√≥ en la Secci√≥n 2.2.1. Para implementar la interfaz gr√°fica de usuario se utilizaron las bibliotecas 96 Qt y OpenGL 20 , lo cual permiti√≥ la implementaci√≥n sencilla y eficiente del visualizador de intervalos de volumen. En la Figura 4.3 se puede observar la extracci√≥n de un intervalo de volumen proveniente del Volumen #1 (Brazo derecho) mediante el uso del algoritmo propuesto basado en cubos marchantes y tetracubos marchantes, donde se muestra la ampliaci√≥n de una secci√≥n de los intervalos de volumen extra√≠dos. En estas ampliaciones se observa que el algoritmo propuesto produce un volumen con mucho menos ruido que aquel producido por tetracubos marchantes. Figura 4.3: Intervalos de volumen obtenidos a partir del Volumen #1 (Brazo derecho) utilizando cubos marchantes (izquierda) y tetracubos marchantes (derecha), rasterizadas mediante el sombreado plano (flat-shading). Este ruido en el mallado generado por tetracubos marchantes ocurre debido a la divisi√≥n adicional de la celda, la cual se requiere para su divisi√≥n en tetraedros. Este ruido se puede observar con m√°s detalle en un volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles, cuyos intervalos de volumen extra√≠dos se pueden observar en la Figura 4.4 y la Figura 4.5. 20 http://www.opengl.org 97 Figura 4.4: Intervalo de volumen extra√≠do de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles mediante tetracubos marchantes, donde los c√≠rculos rojos indican los v√©rtices adicionales generados por intersecciones en las diagonales de las caras. En la Figura 4.4 se pueden observar los v√©rtices adicionales creados por tetracubos marchantes durante la extracci√≥n del intervalo de volumen, los cuales deforman el mallado extra√≠do en cada celda, mientras que en la Figura 4.5 se observa el mismo intervalo de volumen extra√≠do utilizando cubos marchantes, el cual produce un mallado m√°s suave debido a que no utiliza las intersecciones en las diagonales de las caras. Figura 4.5: Intervalo de volumen extra√≠do de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥4 v√≥xeles mediante cubos marchantes. En la Figura 4.6 se muestra la extracci√≥n de una isosuperficie de un corte del cubo sint√©tico utilizado la Figura 4.4 y la Figura 4.5 mediante el uso del algoritmo propuesto basado en cubos 98 marchantes y tetracubos marchantes. Como se puede observar, el algoritmo propuesto no requiere el punto de intersecci√≥n en la diagonal de la cara para reconstruir la isosuperficie, lo cual ocasiona que la salida generada sea mucho m√°s suave que aquella generada por tetracubos marchantes. Figura 4.6: Comparaci√≥n de la isosuperficie extra√≠da de un corte del volumen sint√©tico mediante cubos marchantes (l√≠nea anaranjada) y tetracubos marchantes (l√≠nea verde). En la Figura 4.7 en la cual se muestran dos intervalos de volumen extra√≠dos del Volumen #4 (Hip√©rbola), el primero mediante el algoritmo propuesto basado en cubos marchantes y el segundo mediante tetracubos marchantes. En esta figura se puede observar que tetracubos marchantes genera huecos en los planos de las as√≠ntotas de la hip√©rbola, lo cual no ocurre en el algoritmo propuesto. En la Figura 4.8 se puede observar un volumen sint√©tico donde se generan estos huecos, lo cual ocurre debido a los puntos adicionales que requiere tetracubos marchantes para extraer el intervalo de volumen. 99 Figura 4.7: Intervalos de volumen obtenidos a partir del Volumen #4 (Hip√©rbola) utilizando el algoritmo propuesto basado en cubos marchantes (izquierda) y tetracubos marchantes (derecha). Figura 4.8: Intervalos de volumen obtenidos a partir de volumen sint√©tico de 4ÔÇ¥2ÔÇ¥2 v√≥xeles, utilizando el algoritmo propuesto basado en cubos marchantes (arriba) y tetracubos marchantes (abajo). 100 CAP√çTULO 5. CONCLUSIONES En este trabajo se propone un algoritmo para la extracci√≥n de intervalos de volumen basado en cubos marchantes, con el objetivo de obtener mallados tetra√©dricos de mayor calidad visual en menor tiempo. Para llevar a cabo la extracci√≥n s√≥lo se utiliza una tabla de conectividad, sin requerir el uso de ning√∫n algoritmo complejo durante el procesamiento del volumen, como tetraedrizaciones de Delaunay [GUO95] o la intersecci√≥n de poliedros [FUJ95]. El uso de algoritmos simples y una tabla de conectividad implica una implementaci√≥n m√°s sencilla y un tiempo de ejecuci√≥n menor respecto a otros algoritmos m√°s complejos. El algoritmo propuesto mostr√≥ un desempe√±o superior que el algoritmo basado en tetracubos marchantes [NIE97b], ya que genera mallados m√°s simples en un tiempo de ejecuci√≥n considerablemente menor. Adem√°s, este algoritmo no requiere una gran cantidad adicional de espacio, ya que s√≥lo requiere almacenar cuatro cortes del volumen a procesar a la vez, y una tabla de conectividad precalculada de 38 = 6561 casos. Sin embargo, el algoritmo basado en tetracubos marchantes genera mallados con primitivas de mejor calidad en promedio, lo cual se debe a que utiliza elementos lineales, como los tetraedros, para aproximar una funci√≥n lineal, mientras que el algoritmo propuesto utiliza elementos lineales para aproximar una funci√≥n hiperb√≥lica. No obstante, el algoritmo propuesto genera mallados con una mejor calidad visual que aquellos generados por el algoritmo basado en tetracubos marchantes [NIE97b], ya que no necesita utilizar las diagonales de las caras para extraer el intervalo de las celdas del volumen. Por otra parte, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para el manejo de las ambig√ºedades, ya que este asume que todos los puntos de intersecci√≥n dentro de una celda se encuentran conectados. La implementaci√≥n del manejo de ambig√ºedades permitir√≠a la generaci√≥n de modelos topol√≥gicamente correctos, lo cual es importante para algunas aplicaciones de los intervalos de volumen, como la simulaci√≥n de procesos mediante elementos finitos y aplicaciones m√©dicas. En conclusi√≥n, el algoritmo propuesto presenta diversas ventajas sobre el algoritmo basado en tetracubos marchantes, con respecto al tiempo de ejecuci√≥n y al tama√±o de los mallados 101 generados, pero ser√≠a necesario realizar comparaciones con otros algoritmos m√°s complejos, con el fin de determinar qu√© aspectos de √©ste podr√≠an ser mejorados. 102 CAP√çTULO 6. TRABAJOS A FUTURO Como se mencion√≥ en la Secci√≥n 3.2, el algoritmo propuesto no realiza ning√∫n procesamiento adicional para el manejo de los casos ambiguos, sino que asume que todos los poliedros-ùõºùõΩ son convexos y une todos los v√≥xeles neutros dentro de la celda. La implementaci√≥n del manejo de los casos ambiguos permitir√≠a la generaci√≥n de modelos topol√≥gicamente correctos. En la Secci√≥n 3.5 se explican las consideraciones a tomar en cuenta para la resoluci√≥n de los casos ambiguos, tanto para el manejo de ambig√ºedades en las caras como ambig√ºedades internas. En las Secciones 4.2 y 4.4 se compararon los resultados obtenidos del algoritmo propuesto y la extracci√≥n de intervalos de volumen basada en tetracubos marchantes [NIE97b]. Sin embargo, no se realizaron comparaciones entre el algoritmo propuesto y las otras t√©cnicas descritas en la Secci√≥n 2.3, como la extracci√≥n basada en formas alfa [GUO95] y la extracci√≥n basada en cubos marchantes e intersecci√≥n de poliedros [FUJ95]. No obstante, se espera que el algoritmo propuesto sea m√°s r√°pido que dichos algoritmos debido a que s√≥lo se necesita indexar una tabla de conectividad, sin necesidad de recurrir a algoritmos complejos durante el procesamiento de cada celda. Como se mencion√≥ en la Secci√≥n 4.4, la comparaci√≥n cualitativa entre los algoritmos para la extracci√≥n de intervalos de volumen se realiz√≥ mediante la rasterizaci√≥n directa de los tetraedros, utilizando sombreado por gradiente y (gradient-shading) sombreado plano (flat-shading). Sin embargo, la visualizaci√≥n correcta de estos mallados se realiza mediante el uso de t√©cnicas de visualizaci√≥n directa de vol√∫menes (DVR), como por ejemplo, proyecci√≥n de tetraedros [KRA04]. La implementaci√≥n de estas t√©cnicas permitir√≠a realizar una visualizaci√≥n m√°s precisa sobre los mallados generados por los algoritmos para la extracci√≥n de intervalos de volumen. Finalmente, la implementaci√≥n desarrollada asume la variaci√≥n lineal de los isovalores en las aristas de las celdas del volumen, lo cual impide el uso de t√©cnicas num√©ricas como regula-falsi [FOR95] para el c√°lculo de los puntos de intersecci√≥n en vol√∫menes generados a partir de ecuaciones impl√≠citas. Modificar la implementaci√≥n para el uso de regula-falsi permitir√≠a obtener mallados de mejor calidad a partir de ecuaciones impl√≠citas, lo cual har√≠a innecesario el uso de altas resoluciones para aproximar dichas ecuaciones de forma correcta. 103 CAP√çTULO 7. REFERENCIAS [ANT98] H. Anton. ‚ÄúCalculus: A New Horizon, Combined‚Äù. 6ta edici√≥n. John Wiley & Sons Inc. 1998. [CAR95] B.P. Carneiro, C. Silva y A.E. Kaufman, ‚ÄúTetra-Cubes: An algorithm to generate 3D isosurfaces based upon tetrahedra‚Äù, Anais do IX SIBGRAPI, pp. 205-210, 1995. [CHE95] E.V. Chernyaev, ‚ÄúMarching Cubes 33: Construction of Topologically Correct Isosurfaces‚Äù, Reporte T√©cnico CERN CN 95-17, CERN, 1995. [D√úR88] M. J. D√ºrst, ‚ÄúLetters: Additional reference to ‚Äúmarching cubes‚Äù‚Äù, Computer Graphics, vol. 22, num. 2, pp. 72-73, 1988. [EDE90] H. Edelsbrunner y E. Mucke, ‚ÄúSimulation of Simplicity: A Technique to Cope with Degenerate Cases in Geometric Algorithms‚Äù, ACM Transactions on Graphics, vol. 9, pp. 66-104, 1990. [EDE94] H. Edelsbrunner y E. Mucke, ‚ÄúThree-Dimensional Alpha Shapes‚Äù, ACM Transactions on Graphics, vol. 13, pp. 43-72, 1994. [ELV92] T. T. Elvins, ‚ÄúA Survey of Algorithms for Volume Visualization‚Äù, Computer Graphics, vol. 26, num. 3, pp. 194-201, 1992. [FUC77] H. Fuchs, Z.M. Kedem y S.P. Uselton, ‚ÄúOptimal Surface Reconstruction from Planar Contours‚Äù, Communications of the ACM, vol. 20, num. 10, pp. 693-702, 1977. [FOR95] J.A. Ford, ‚ÄúImproved Algorithms of Illinois-type for the Numerical Solution of Nonlinear Equations‚Äù, Technical Report CSM-257, University of Essex, 1995. [FUJ95] I. Fujishiro, Y. Maeda y H. Sato, ‚ÄúInterval Volume: A Solid Fitting Technique for Volumetric Data Display and Analysis‚Äù, Proceedings of the 6th Conference on Visualization ‚Äô95, pp. 151-158, 1995. 104 [GRA72] R. L. Graham, ‚ÄúAn efficient algorithm for determining the convex hull of a planar set‚Äù, Information Processing Letters, pp. 132-133, 1972. [GRA94] R. L. Graham, D. E. Knuth y O. Patashnik, ‚ÄúConcrete Mathematics: A Foundation for Computer Science‚Äù, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1994. [GUO95] B. Guo, ‚ÄúInterval Set: A Volume Rendering Technique Generalizing Isosurface Extraction‚Äù, Proceedings of the Conference on Visualization ‚Äô95, pp. 3-10, 1995. [HER79] G.T. Herman y H.K. Liu, ‚ÄúThree-Dimensional display of Human Organs from Computed Tomograms‚Äù, Computer Graphics and Image Processing, vol. 9, num. 1, pp. 1-21, 1979. [KEP75] E. Keppel. ‚ÄúApproximating Complex Surfaces by Triangulation of Contour Lines‚Äù, IBM Journal of Research and Development, vol. 19, num. 1, pp. 2-11, 1975. [KRA04] M. Kraus, W. Qiao y D. S. Ebert, ‚ÄúProjecting Tetrahedra without Rendering Artifacts‚Äù, Proceedings of the Conference of Visualization ‚Äô04, pp. 27-34, Octubre 2004. [LEV88] M. Levoy, ‚ÄúDisplay of Surfaces from Volume Data‚Äù, IEEE Computer Graphics and Applications, vol. 8, num. 3, pp. 29-37, Julio 1988. [LEV90a] M. Levoy, ‚ÄúVolume Rendering: A Hybrid Ray Tracer for Rendering Polygon and Volume Data‚Äù, IEEE Computer Graphics and Applications, vol. 10, num. 2, pp. 33-40, Julio 1990. [LEV90b] M. Levoy, ‚ÄúEfficient Ray Tracing from Volume Data‚Äù, ACM Transactions on Graphics, vol. 9, num. 3, pp. 245-261, Julio 1990. [LOR87] W.E. Lorensen y H.E. Cline, ‚ÄúMarching Cubes: A High-Resolution 3D Surface Construction Algorithm‚Äù, SIGGRAPH 87 Conference Proceedings, Computer Graphics, vol. 21, num. 4, pp. 163-169, Julio 1987. 105 [MAX01] N. Max, ‚ÄúConsistent subdivision of convex polyhedra into tetrahedra‚Äù, Journal of Graphics Tools, vol. 6, num. 3, pp. 29-36, 2001. [MON94] C. Montani, R. Scateni y R. Scopigno. ‚ÄúA modified look-up table for implicit disambiguation of Marching Cubes.‚Äù, The Visual Computer, vol. 10, 1994. [NIE91] G.M. Nielson y B. Hamman, ‚ÄúThe Asymptotic Decider: Resolving the Ambiguity in Marching Cubes‚Äù, Proceedings of the Conference of Visualization ‚Äô91, IEEE Computer Society Press, pp. 83-90, 1991. [NIE97a] G.M. Nielson, ‚ÄúTools for Triangulations and Tetrahedrizations‚Äù, Scientific Visualization: Overviews, Methodologies, and Techniques, IEEE Computer Society Press, 1997. [NIE97b] G.M. Nielson y Junwon Sung, ‚ÄúInterval Volume Tetrahedrization‚Äù, Proceedings of the Conference of Visualization ‚Äô97, pp. 221-228, 1997. [SAW07] A.P. Sawant y C.G. Healey, ‚ÄúVisualizing Flow Data using Assorted Glyphs‚Äù. The ACM Student Journal, Crossroads, vol. 14, num. 2, pp.3-7, 2007. [SCH92] W.J. Schroeder, J.A. Zarge y W.E. Lorensen, ‚ÄúDecimation of triangle meshes‚Äù. SIGGRAPH 92 Conference Proceedings, Computer Graphics, vol. 26, pp. 65-70, Julio 1992. [SCH03] J. P. Schulze, M. Kraus, U. Lang y T. Ertl. ‚ÄúIntegrating Pre-Integration into the Shear-Warp Algorithm‚Äù. Proceedings of the 2003 Eurographics/IEEE TVCG Workshop on Volume graphics, pp. 109-118, Julio 2003. [STI07] C.J. Stimpson, C.D. Ernst, P. Knupp, P.P. P√©bay y D. Thompson, ‚ÄúThe Verdict Geometric Quality Library‚Äù, Sandia National Laboratories, SAND2007-1751, 2007. [WES89] L. Westover, ‚ÄúInteractive Volume Rendering‚Äù, Proceedings of the Chapel Hill Workshop on Volume Visualization, vol. 1, pp. 9-16, Mayo 1989. 106 [WES90] L. Westover, ‚ÄúFootprint Evaluation for Volume Rendering‚Äù, Computer Graphics, vol. 24, num. 4, pp. 367-376, 1990. [WIL92] P. Williams y N. Max. ‚ÄúA volume density optical model‚Äù. Proceedings of the 1992 Workshop on Volume Visualization, pp. 61-68, Octubre 1992. [YON95] Yong Zhou, Weihai Chen y Zesheng Tang, ‚ÄúAn elaborate ambiguity detection method for constructing isosurfaces within tetrahedral meshes‚Äù, Computer & Graphics, pp. 355-364, 1995.