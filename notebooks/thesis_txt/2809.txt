Capítulo I. Marco Conceptual UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN CARACAS – VENEZUELA Desarrollo de una aplicación Web para manejar los procesos administrativos de reservación de las Salas de Ensayo y Estudios de Grabación Caso de Estudio: Rock & Folk Trabajo Especial de Grado presentado ante la ilustre Universidad Central de Venezuela por el bachiller Gustavo Morantes C.I. 14.907.279 Para optar al título de Licenciado en Computación Tutores: Prof. Andrés Sanoja Prof. Jossie Zambrano Caracas, Mayo de 2011 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 2 Universidad Central de Venezuela Facultad de Ciencias Escuela de Computación ACTA DE VEREDICTO Quienes suscriben, Miembros del Jurado designado por el Consejo de la Escuela de Computación para examinar el Trabajo Especial de Grado, presentado por el Bachiller Gustavo Morantes C.I.: 14.907.279, con el título “Desarrollo de una aplicación Web para manejar los procesos administrativos de reservación de las Salas de Ensayo y Estudios de Grabación. Caso de estudio: Rock & Folk”, a los fines de cumplir con el requisito legal para optar al título de Licenciado en Computación, dejan constancia de lo siguiente: Leído el trabajo por cada uno de los Miembros del Jurado, se fijó el día 27 de mayo de 2011, a las 09:00am, para que su autor lo defendiera en forma pública, en el aula PB-I de la Escuela de Computación, Facultad de Ciencias de la Universidad Central de Venezuela, lo cual realizó mediante una exposición oral de su contenido, y luego respondió satisfactoriamente a las preguntas que le fueron formuladas por el Jurado, todo ello conforme a lo dispuesto en la Ley de Universidades y demás normativas vigentes de la Universidad Central de Venezuela. Finalizada la defensa pública del Trabajo Especial de Grado, el jurado decidió aprobarlo. En fe de lo cual se levanta la presente acta, en Caracas el 27 de mayo de 2011. _______________________ _______________________ Prof. Andrés Sanoja Prof. Jossie Zambrano (Tutor) (Tutor) _______________________ _______________________ Prof. Sergio Rivas Prof. Eugenio Scalise (Jurado Principal) (Jurado Principal) 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 3 Agradecimientos y Dedicatoria Agradezco principalmente a Dios por permitirme estar aquí cumpliendo un sueño y por no dejarme solo en ningún momento. A mi padre, por todo el apoyo profesional y humano que me ha dado toda la vida, y por confiar en mí en cumplir esta meta y las que vienen. A mis hermanos y mi preciada cuñada Roxana Rabai, por el inmenso apoyo que me han brindado a lo largo de mi carrera. A mi abuela Gioconda y mi tía Nena, por sus orientaciones y toda la experiencia que han compartido conmigo toda mi vida. A mis hermanos José Luis Travieso, Pamela Riveros, Mary Cabrera, José Vicente Ordoñez, Francis Pérez, Ignacio Ortiz, Andreina Cabrera, Andrés Castrillo, Lily Tsang, David Rojas, Nicola Malandra, Florentino Fernández y Diana Dugarte por la amistad y hermandad que me han brindado por años. Son pilares y símbolos de motivación en muchos sentidos de mi vida. A la familia Ordoñez, especialmente a Adelisa García, por su increíble apoyo durante muchos años. Es un ángel caído del cielo que Dios puso en mi camino. A mi tía Elvia Stifano y mi prima Antonella Capodicasa por estar siempre conmigo en las buenas, en las malas y en las peores. Son también pilares en mi vida que agradezco infinitamente tener conmigo. A mis tutores Andrés Sanoja y Jossie Zambrano por el increíble apoyo y confianza que han tenido en mi trabajo y por haberme guiado en el desarrollo de este Trabajo Especial de Grado. Colaboraron enormemente en mi formación profesional y estaré agradecido siempre. A Keyla Ferreira por su invaluable ayuda, interés y apoyo en el desarrollo de este Trabajo Especial de Grado, así como a Juan Florville por sus puntuales pero excelentes consejos, y a Juan Carlos González por su interés y disposición a ayudarme. Les debo mucho amigos. A los profesores Paola Saputelli, Saulius Rosales, Tina Di Vasta, Rhadamés Carmona, incluyendo nuevamente a Jossie Zambrano y Andrés Sanoja. Todos por su excelencia profesional y motivación que han creado en mi persona a lo largo de la carrera. Han sido símbolos de respeto y de admiración para mí. Este Trabajo Especial de Grado está dedicado a Bertha Irene Taccetti. 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 4 Resumen Los estudios de ensayo y grabación se enfrentan a diario con una alta concurrencia de clientes, en especial la empresa Rock & Folk por su gran popularidad. La gestión de la mayoría de sus actividades se lleva a cabo sobre una simple agenda o block de papel, lo que convierte a sus procesos ineficientes y poco confiables, siendo la reserva de salas de ensayo la más afectada. El presente Trabajo Especial de Grado tiene como objetivo desarrollar un sistema que permita mejorar la atención de los clientes del estudio Rock & Folk, brindándoles la oportunidad de consultar la disponibilidad de las salas desde sus hogares, ahorrando tiempo y otorgando confiabilidad en los procesos de reservación. Además de automatizar las actividades de los empleados que son realizadas de forma manual, como el registro de clientes, reservaciones de salas, y la gestión administrativa de estos procesos. El método ágil de desarrollo utilizado para la construcción de esta aplicación fue una adaptación de la Programación Extrema (XP), la cual permite guiar la elaboración de la parte práctica del presente trabajo de investigación. Dentro de las necesidades contempladas en la aplicación se encuentra lo siguiente: Mantener informado a los actores involucrados del flujo de trabajo con la información pertinente dependiente del tipo de proceso que se estuviese llevando a cabo en determinado momento. Palabras Clave: Estudios de Grabación, Salas de Ensayo, Automatización, Reservaciones, Ruby On Rails, Rock & Folk. 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 5 Tabla de Contenido Agradecimientos y Dedicatoria ............................................................................................ 3 Resumen ............................................................................................................................. 4 Índice de figuras .................................................................................................................. 7 Índice de Tablas .................................................................................................................. 9 Introducción ....................................................................................................................... 10 Capítulo I. Marco Conceptual ............................................................................................. 12 1.1 Estudio de Grabación Rock & Folk ........................................................................... 12 1.2 Grabaciones discográficas ....................................................................................... 12 1.2.1 Pre-Producción (Ensayos) ................................................................................. 12 1.2.2 Grabación .......................................................................................................... 13 1.2.3 Post-Producción................................................................................................. 13 1.3 Características de un Estudio de Grabación ............................................................. 14 1.4 Los Estudios de Grabación en Venezuela ................................................................ 15 1.5 Actividades del Estudio Rock & Folk ........................................................................ 17 1.5.1 Alquiler de salas de ensayo ................................................................................... 17 1.5.2 Alquiler de salas de grabación ............................................................................... 19 1.5.3 Facturación ........................................................................................................... 20 1.5.4 Alquiler de equipos/instrumentos ....................................................................... 20 1.6 Aplicaciones actuales ............................................................................................... 21 Capítulo II. Marco Metodológico ..................................................................................... 23 2.1 Programación Extrema (XP) ..................................................................................... 23 2.2.1 Principios básicos .................................................................................................. 23 2.2.2 Actividades de la Programación Extrema .............................................................. 25 2.3 Ruby On Rails .......................................................................................................... 27 2.3.1 El lenguaje de Programación Ruby .................................................................... 28 2.3.2 Ventajas del lenguaje Ruby ............................................................................... 28 2.3.3 Ruby On Rails .................................................................................................... 29 2.3.4. Principios .......................................................................................................... 29 2.3.5. Patrón Modelo Vista Controlador en Rails (MVC) ............................................. 30 2.4 MySQL ..................................................................................................................... 32 2.4.1 Ventajas de usar MySQL ................................................................................... 32 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 6 2.5 Mongrel .................................................................................................................... 33 Capítulo III. Marco Aplicativo ............................................................................................. 35 3.1 Adaptación de la Programación Extrema (XP) ......................................................... 35 3.1.1 Planificación ....................................................................................................... 35 3.1.2 Diseño ............................................................................................................... 36 3.1.3 Codificación ....................................................................................................... 37 3.1.4 Pruebas ............................................................................................................. 38 3.2 Análisis Global del Sistema ...................................................................................... 39 3.2.1 Historias de Usuario ........................................................................................... 39 3.2.2 Interfaz gráfica del Sistema Web ....................................................................... 48 3.2.3 Aplicación Web .................................................................................................. 48 3.2.4 Especificaciones técnicas .................................................................................. 48 3.3 Plan de Iteración ...................................................................................................... 49 3.3.1 Iteración 0 .......................................................................................................... 49 3.3.2 Iteración 1 .......................................................................................................... 52 3.3.3 Iteración 2 .......................................................................................................... 59 3.3.4 Iteración 3 .......................................................................................................... 68 3.3.5 Iteración 4 .......................................................................................................... 77 3.3.6 Iteración 5 .......................................................................................................... 84 3.3.7 Iteración 6 .......................................................................................................... 93 3.3.8 Iteración 7 ........................................................................................................ 102 Conclusiones ................................................................................................................... 111 Recomendaciones ........................................................................................................... 113 Referencias Bibliográficas ............................................................................................... 114 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 7 Índice de figuras Figura 1. Disposición de salas de ensayo de Rock & Folk ................................................. 16 Figura 2. Disposición del área de grabación de Rock & Folk ............................................. 17 Figura 3. Patrón MVC ........................................................................................................ 30 Figura 4. Comparación entre los servidores Mongrel y Webrick ........................................ 34 Figura 5. Metáfora de la aplicación Web ............................................................................ 51 Figura 6. Tablas del módulo de Admisión y Registro de Personas..................................... 53 Figura 7. Prototipo de Interfaz para las reservaciones (ambiente administrador) ............... 54 Figura 8. Prototipo de interfaz para las reservaciones (ambiente cliente) .......................... 54 Figura 9. Interfaz general de usuario (ambiente administrador) ......................................... 55 Figura 10. Código CSS para la interfaz de inicio de sesión ................................................ 55 Figura 11. Código CSS para la interfaz general de usuario (ambiente administrador) ....... 56 Figura 12. Código de los métodos para autenticar y cerrar sesión ..................................... 56 Figura 13. Código que se encarga del registro de clientes ................................................. 57 Figura 14. Interfaz general de usuario (rediseño) ............................................................... 60 Figura 15. Interfaz del calendario principal ......................................................................... 61 Figura 16. Ventana Modal para modificar reservas ............................................................ 61 Figura 17. Tablas relacionadas con las reservaciones y salas ........................................... 62 Figura 18. Código de funciones básicas invocadas en la aplicación .................................. 63 Figura 19. Función que permite la construcción del calendario principal de la aplicación .. 64 Figura 20. Acciones posibles a realizar sobre una pauta ocupada ..................................... 65 Figura 21. Función que modifica una reserva seleccionada ............................................... 66 Figura 22. Tablas relacionadas con el alquiler de instrumentos ......................................... 70 Figura 23. Ventana Modal que ofrece las diversas opciones a realizar sobre una pauta ocupada ............................................................................................................................. 71 Figura 24. Interfaz para la creación de una nueva reserva ................................................ 72 Figura 25. Código final para modificar una reserva ............................................................ 73 Figura 26. Código Javascript encargado de mostrar u ocultar las opciones correspondientes a las diversas acciones posibles sobre una reserva .............................. 74 Figura 27. Función encargada de crear una nueva reserva ............................................... 75 Figura 28. Interfaz para la búsqueda personalizada de pautas libres ................................. 79 Figura 29. Interfaz para la consulta simultánea de salas .................................................... 80 Figura 30. Interfaz para el calendario de la lista de espera ................................................ 80 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 8 Figura 31. Código encargado de realizar la consulta personalizada de pautas libres ........ 81 Figura 32. Código encargado de mostrar la consulta simultánea de salas ......................... 82 Figura 33. Integración de la tabla lista_espera en el modelo de la base de datos .............. 86 Figura 34. Interfaz para la lista de espera .......................................................................... 87 Figura 35. Interfaz para la creación de bandas. 1º vista ..................................................... 88 Figura 36. Interfaz para la creación de bandas. 2º vista ..................................................... 89 Figura 37. Código encargado de cargar la lista de espera y asociarle una banda .............. 90 Figura 38. Código encargado de crear una banda nueva .................................................. 91 Figura 39. Tablas relacionadas con el módulo Facturación................................................ 95 Figura 40. Estado de cuenta de la banda. Reservas pendientes ....................................... 96 Figura 41. Actividad reciente de una banda ....................................................................... 97 Figura 42. Información detallada de una pauta .................................................................. 97 Figura 43. Consultas que obtienen las reservas pendientes y abonos de una banda ........ 98 Figura 44. Consulta de la actividad reciente de la banda ................................................... 99 Figura 45. Código que obtiene la información detallada de las reservaciones ................. 100 Figura 46. Código encargado de realizar el pago correspondiente a las reservas seleccionadas .................................................................................................................. 100 Figura 47. Balance de facturación diaria del estudio Rock & Folk .................................... 104 Figura 48. Balance de facturación diaria. Formato PDF ................................................... 105 Figura 49. Formulario de registro de usuarios del estudio Rock & Folk ............................ 106 Figura 50. Consulta del calendario semanal. Módulo Cliente ........................................... 106 Figura 51. Consulta del estado de cuenta de una banda. Módulo Cliente ........................ 107 Figura 52. Función que permite la creación del calendario semanal del módulo Cliente .. 107 Figura 53. Extracto de código que obtiene el estado de cuenta de una banda en el módulo Cliente ............................................................................................................................. 108 Figura 54. Código que genera el documento pdf del balance de facturación diaria .......... 109 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 9 Índice de Tablas Tabla 1. Sistemas actuales de reservaciones y de alquiler de equipos .............................. 22 Tabla 2. Tabla para la bitácora de desarrollo ..................................................................... 36 Tabla 3. Formato para las Historias de Usuario ................................................................. 36 Tabla 4. Formato de registro de pruebas del lado del cliente ............................................. 38 Tabla 5. Bitácora de desarrollo - Iteración 1 ....................................................................... 53 Tabla 6. Casos de prueba - Iteración 1 .............................................................................. 58 Tabla 7. Bitácora de desarrollo - Iteración 2 ....................................................................... 60 Tabla 8. Casos de prueba - Iteración 2 .............................................................................. 67 Tabla 9. Bitácora de desarrollo - Iteración 3 ....................................................................... 69 Tabla 10. Casos de prueba - Iteración 3 ............................................................................ 76 Tabla 11. Bitácora de desarrollo - Iteración 4 ..................................................................... 78 Tabla 12. Casos de prueba - Iteración 4 ............................................................................ 83 Tabla 13. Bitácora de desarrollo - Iteración 5 ..................................................................... 85 Tabla 14. Casos de prueba - Iteración 5 ............................................................................ 92 Tabla 15. Bitácora de desarrollo - Iteración 6 ..................................................................... 94 Tabla 16. Casos de prueba - Iteración 6 .......................................................................... 101 Tabla 17. Bitácora de desarrollo - Iteración 7 ................................................................... 103 Tabla 18. Casos de prueba - Iteración 7 .......................................................................... 110 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 10 Introducción A partir de la expansión del uso de Internet alrededor del mundo, se han desarrollado numerosos sistemas que brindan soluciones eficientes a diversas organizaciones, a través del uso de la tecnología Web. Esta se ha convertido en una gran herramienta en el campo de la información y las comunicaciones, ya que optimiza las relaciones entre empresas y clientes, aminorando la carga de sus actividades habituales. Entre estas empresas se encuentran los estudios de ensayo y grabación, los cuales son entes encargados de prestar servicios de calidad, a las agrupaciones que requieran realizar trabajos de producción sonora, así como llevar a cabo la preparación adecuada para presentaciones en vivo. Estos estudios cuentan con equipos y sistemas de alta tecnología los cuales renuevan periódicamente para mantenerse en el mercado actual, no obstante, los procesos administrativos son manejados manualmente, ocasionando retrasos e insatisfacción por parte de los clientes interesados en la reserva de salas de ensayo, o en la grabación de discos musicales. En este sentido, el objetivo principal de este Trabajo Especial de Grado consiste en la implementación de una aplicación Web que permita llevar el control de los procesos administrativos de reservación del estudio de grabación “Rock & Folk”. De la misma forma, ofrecer a sus clientes, la consulta de sus cuentas y disponibilidad de horarios desde la comodidad de sus hogares vía Internet. Para llevar a cabo el objetivo anteriormente mencionado, se describe de forma general, los capítulos que se presentan en este documento. Capítulo I, Marco Conceptual: describe el tipo de organización a la cual está destinada la aplicación Web, y además se muestran los sistemas existentes que presentan similitudes, los cuales sirven de referencia para su desarrollo. Capítulo II, Marco Metodológico: en este capítulo se describen las actividades correspondientes al método ágil de desarrollo conocido como “Programación Extrema”, además de las herramientas tecnológicas que se requieren para la implementación de la 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 11 aplicación, como el framework Ruby On Rails, el sistema manejador de bases de datos MySQL, y el servidor Mongrel. Capítulo III, Marco Aplicativo: en este capítulo se presenta la adaptación de las actividades que cumplen con los principios de la Programación Extrema, las cuales se llevan a cabo durante el proceso de desarrollo. Además, se describe cada una de las iteraciones especificando la planificación y ejecución de las tareas correspondientes. Finalmente se presentan las conclusiones y recomendaciones de la investigación. 1.1 ESTUDIO DE GRABACIÓN ROCK & FOLK Página 12 Capítulo I. Marco Conceptual El propósito de este capítulo es presentar las bases conceptuales que sirven de fundamento para el desarrollo de este Trabajo Especial de Grado. Se describe en primer lugar, el tipo de organización a la cual está destinada la aplicación Web, y posteriormente se hace referencia a los sistemas existentes que presentan similitudes y fueron utilizados como base referencial para su desarrollo. 1.1 Estudio de Grabación Rock & Folk Rock & Folk es un estudio de grabación, ubicado en la ciudad de Caracas, acondicionado con materiales y equipos para llevar a cabo diversos trabajos de producción sonora, especialmente la grabación de discos musicales, sean del tipo “Larga Duración” (también conocidos como Long Play o LP), “Reproducción Extendida” (comúnmente llamados EP), “Sencillos” (Singles), o las “Maquetas” (grabaciones de mínima calidad que se utilizan como demostraciones previas a la grabación de un LP o EP). 1.2 Grabaciones discográficas Una grabación discográfica es un proceso extenso y complejo, que requiere tiempo y dedicación por parte de la banda o artista, el ingeniero de sonido asignado, y el personal técnico del estudio. El proceso en general se divide en tres fases: 1.2.1 Pre-Producción (Ensayos) Es el proceso, que llevan a cabo los músicos, de componer las canciones que contendrán sus trabajos discográficos y también de practicar la ejecución de sus instrumentos o voces para obtener la mejor destreza posible al momento de grabar. Es importante acotar que la Pre-Producción puede realizarse fuera de un estudio, y por lo tanto podría no considerarse como parte del proceso de una Grabación Discográfica. Sin embargo, es fundamental para lograr un correcto y exitoso trabajo musical. 1.2 GRABACIONES DISCOGRÁFICAS Página 13 1.2.2 Grabación Es en esta fase donde los músicos entran al estudio a realizar la grabación de cada instrumento por separado (en el caso de los discos LP, EP o Sencillos) o de todos los instrumentos de forma simultánea (en el caso de las Maquetas). No obstante, antes de ello se deben llevar a cabo ciertos procedimientos para lograr una exitosa producción. Uno de ellos es la afinación de los instrumentos y un tratamiento de la garganta (en el caso de los cantantes). También se lleva a cabo el montaje de los instrumentos que se van a grabar y de sus micrófonos correspondientes para la toma de sonido. Este montaje debe ser bien estudiado porque si hay más de un micrófono que se va a usar simultáneamente, como es el caso de la batería donde se utiliza uno por cada pieza de la misma (tambores, platillos, campanas, etc.), se debe procurar que entre la menor señal de sonido ajeno a la pieza que se está captando. Los micrófonos deben estar en buen estado y se debe conocer qué tipo de micrófono es el adecuado para cada pieza o instrumento. Es importante usar los filtros de goma-espuma en los micrófonos de voz para lograr una mayor limpieza del sonido, y otros equipos o software que permitan lo mismo para los instrumentos (como las puertas de ruido, compresores, etc.). 1.2.3 Post-Producción Es la fase final donde ya no se realiza grabación de ningún tipo, puesto que se lleva a cabo la ecualización de cada instrumento grabado y se realizan muchas reproducciones de cada tema, con el fin de escucharlas con diferentes ecualizaciones para tomar la mejor configuración. La Post-Producción está subdividida en dos etapas, primero se realiza la “Mezcla”, cuyo proceso es muy delicado en la producción de cada canción. Su objetivo es conseguir una repartición equilibrada de las frecuencias y volúmenes de los instrumentos o voces, de forma que la escucha sea agradable y apropiada a lo que se intenta transmitir con cada tema. Y finalmente se realiza la “Masterización”, cuyo propósito es conseguir uniformidad entre las canciones, de forma que no existan grandes diferencias de sonido dentro de un mismo disco, y conseguir que suenen igual en cualquier equipo de audio, corrigiendo picos de volumen que hayan pasado desapercibidos en la Mezcla. 1.3 CARACTERÍSTICAS DE UN ESTUDIO DE GRABACIÓN Página 14 1.3 Características de un Estudio de Grabación Todos los estudios de grabación deben ser diseñados muy cuidadosamente, principalmente en lo que respecta a la acústica del mismo. Pues todos realizan un proceso en común que es la grabación de sonidos y por ende, es necesario tomar en cuenta las siguientes normas al momento de construirlo, así como lo ha hecho el estudio Rock & Folk:  Debe ser cómodo/ergonómico: Se debe tomar en cuenta que una grabación discográfica es un trabajo artístico que ejecutan personas apasionadas. Es por ello la importancia de que el mobiliario y ambientación sean agradables para que el artista se sienta a gusto, y se logre un exitoso y profesional trabajo sonoro. (López, 2008).  Tener una correcta Ventilación, Humedad y Temperatura: Para ello se debe instalar un correcto sistema HVAC (por sus siglas en inglés de Heating, Ventilating and Air Conditioning). Se trata de un conjunto de técnicas y métodos que estudian y trabajan sobre el tratamiento del aire en cuanto a su enfriamiento, calentamiento y des humidificación. El propósito de un sistema HVAC es proporcionar una corriente de aire, calefacción y enfriamiento adecuado a un espacio cerrado, como es el caso. (López, 2008).  Disponer de un correcto diseño e instalación del sistema de Audio: Se refiere a la instalación eléctrica, los cableados y las conexiones de los equipos necesarios (cornetas de referencia, consola de grabación, ecualizadores, etc.). Lo más importante de este punto es maximizar la relación Señal/Ruido, medida que se usa para cuantificar qué tanto ha sido afectada una señal por el ruido externo. Para ello, debe haber un total aislamiento sonoro en la sala de grabación, del resto del interior del estudio. (López, 2008).  Estar ubicado correctamente según normas municipales y vecinos: A pesar de ser un espacio cerrado, los instrumentos musicales pueden ser escuchados hasta el exterior del estudio. Para evitar esto, aparte del cuidadoso diseño del estudio que realizó el experto para lograr el mayor aislamiento, se utilizan una serie de materiales que se colocan en las paredes y puertas en todo el recinto, principalmente en la sala de grabación. (López, 2008). 1.4 LOS ESTUDIOS DE GRABACIÓN EN VENEZUELA Página 15  Proveer los instrumentos y equipos adecuados en cada sala: Las salas de ensayo deben disponer de diversos equipos musicales, como los amplificadores para los instrumentos eléctricos (guitarras, bajos, teclados); cornetas y micrófonos para proyectar señales acústicas como la voz, congas, violines, trompetas entre otros; una consola de audio para controlar (mezclar) los volúmenes de estas señales, buscando un balance de sonido con los instrumentos eléctricos; y una batería acústica completa, la cual no necesita ser amplificada. Es decisión de cada estudio el tener más equipos, pero no deben proveer menos de lo mencionado. Para las salas de grabación no es necesario esta disposición de instrumentos, en vista que cada artista generalmente utiliza sus propios equipos, no obstante, debe seguir las mismas normas antes mencionadas referentes al aislamiento acústico, ventilación, temperatura y comodidad. En general, no existe una única fórmula para el diseño de los estudios de grabación, todo depende del propósito final del mismo y de la filosofía o criterio acústico del diseñador junto con las herramientas que se deseen combinar. Otro objetivo importante, al igual que cualquier negocio, es analizar la rentabilidad, es decir, conocer la vida útil de los equipos, los gastos mensuales, la inversión inicial, el tiempo estimado para obtener las primeras ganancias, entre otros. 1.4 Los Estudios de Grabación en Venezuela En la década de los 80, eran escasos los estudios en Venezuela, y en su mayoría pertenecían a sellos discográficos, por lo tanto, sólo se realizaban trabajos exclusivos para los artistas o bandas de estas disqueras. Predominaban los músicos solistas y estuvo de moda por varios años hasta los 90, donde comenzaron a tomar un poco más en cuenta a los grupos o conjuntos de músicos, y por ende, se fueron expandiendo los distintos estilos musicales durante toda esta época muy rápidamente. Fueron en estos años donde hubo una gran influencia extranjera (norteamericana en su mayor parte) y comenzaron a surgir un gran número de bandas venezolanas de esta corriente. Sólo pocos grupos musicales tenían el privilegio de estar bajo un sello discográfico, pero existía una gran cantidad de bandas que no lo estaban. Esta alta demanda abrió paso al surgimiento de nuevos estudios de grabación independientes. 1.4 LOS ESTUDIOS DE GRABACIÓN EN VENEZUELA Página 16 No todos estos estudios podían ofrecer solamente servicios de grabación, pues pocas eran las bandas que disponían de capital para realizar trabajos discográficos independientes, y además, la situación económica nacional se complicaba progresivamente. Fue ello uno de los motivos que estimuló a los estudios a ofrecer “Salas de Ensayo” además de las salas de grabación. Después de todo, un artista debe practicar para mantenerse activo en su instrumento, prepararse para presentaciones en vivo y, como se mencionó anteriormente acerca de la Pre-Producción, capacitarse para realizar sus grabaciones exitosamente. Hoy en día, la demanda de salas de ensayo es tan alta, que la mayoría de los estudios proveen entre 1 y 5 salas, las cuales permanecen alquiladas la mayor parte del tiempo, a pesar de tener un horario amplio (generalmente de 10am a 11pm). No conforme con ello, la demanda continúa creciendo tan rápidamente, que actualmente existen estudios que sólo ofrecen salas de ensayos para los artistas. En la siguiente figura se muestra un modelo de la disposición de las salas de ensayo del estudio Rock & Folk. (Ver Figura 1). Figura 1. Disposición de salas de ensayo de Rock & Folk Lo mostrado en la figura anterior es suficiente para componer un “Estudio de Ensayo”, en vista que cada sala está destinada a este servicio y además, incluye otros básicos como sanitarios, cafetín y área de descanso. No obstante, también forma parte de los estudios de grabación, los cuales por lo general, disponen de 2 recintos para separar ambos servicios como es el caso de Rock & Folk. En este sentido, se muestra a continuación el modelo del área de grabación del mencionado estudio. (Ver Figura 2). 1.5 ACTIVIDADES DEL ESTUDIO ROCK & FOLK Página 17 Figura 2. Disposición del área de grabación de Rock & Folk 1.5 Actividades del Estudio Rock & Folk Rock & Folk, al igual que cualquier otro estudio de grabación, es un negocio corriente donde se prestan diversos servicios, y además, disponen de artículos en venta o alquiler para los músicos clientes que deseen producir un material discográfico, practicar sus temas musicales, o rentar instrumentos para presentaciones en vivo. En general, todos los estudios realizan las mismas actividades y de forma muy similar entre ellos. La más importante es el alquiler de las salas (fundamentalmente las de ensayos), pues son ellas las que producen el mayor ingreso al comercio. Y es la primera que se menciona a continuación: 1.5.1 Alquiler de salas de ensayo La renta de las salas en Rock & Folk es por bloques de dos horas y exigen un mínimo de un bloque por día. El cliente que alquila una cantidad de horas un determinado día, se registra en el estudio como una “pauta”. Para las salas de grabación existe sólo un tipo de pauta conocida como ocasional, mientras que las de ensayo proveen tanto ésta como la fija, las cuales se explican a continuación: 1.5.1 ALQUILER DE SALAS DE ENSAYO Página 18  Pauta ocasional: Es la reserva que solicita un cliente que no desea ensayar con frecuencia, o simplemente el estudio no tiene la disponibilidad para otorgarle una pauta periódica. También es la reserva que se realiza para las salas de grabación, debido a que es un proceso que no todos los artistas llevan a cabo, y en dado caso, no se presta para hacerlo regularmente, exceptuando el período de tiempo que se requiera para el largo proceso de grabación, “Mezcla” y “Masterización”.  Pauta fija: Es el tipo de renta que solicita una banda o artista de forma periódica y exclusiva, es decir, ningún otro cliente puede solicitar esas horas del día, hasta que la banda decida liberarla. Es común que existan ocasiones donde los músicos no puedan asistir un determinado día, pero no por ello se debe cancelar este tipo de pauta. En su defecto, el responsable de la banda debe contactar al estudio 48 horas antes de la pauta que no asistirá. De lo contrario, le es cobrado en su próxima visita. En general, el proceso de alquiler de las salas de ensayo se lleva a cabo de formas diferentes dependiendo del tipo de cliente:  Cliente nuevo: al solicitar horas disponibles en una sala, el estudio le exige sus datos personales, así como el deber de pagar la pauta un tiempo antes del momento de su ensayo (48 horas). De no presentarse en el estudio en el tiempo mencionado, se le contacta vía telefónica para informarle que su pauta ha sido anulada. Esta norma le evita al estudio la posible pérdida de unas horas, ya que al ser un cliente desconocido, no existe otra garantía de su asistencia.  Cliente regular: es el cliente ya conocido por el estudio, por haber tenido un tiempo considerable rentando las salas. El proceso se simplifica a contactar al estudio para solicitar la pauta, y luego realizan el pago en el momento de la misma. Muchos estudios dan crédito a estos clientes si no pagan de forma puntual, pero en algunas ocasiones, le exigen dejar un instrumento en el estudio por garantía, hasta el momento que cancele la deuda. 1.5.2 ALQUILER DE SALAS DE GRABACIÓN Página 19  Cliente V.I.P.: es el tipo de cliente que le otorgan mayores privilegios que al cliente regular. Suelen ofrecerles paquetes económicos de grabación o ensayo, o un crédito bastante amplio. No existe una condición específica para pertenecer a este tipo de cliente; es el Presidente del estudio quien decide los músicos que gozarán de estos beneficios. Adicionalmente, el estudio ofrece la posibilidad de grabar los ensayos. Esto debe ser notificado un tiempo antes de la pauta para preparar los equipos necesarios. La calidad de grabación suele ser baja y la pauta es más costosa, pero de esta forma, la banda o artista puede escuchar su propio material para realizar los arreglos que se consideren necesarios. Por otra parte, Rock & Folk ha diseñado sus salas de ensayo para todo tipo de artista, es decir, cuenta con salas pequeñas para bandas que usen equipos básicos, y con salas grandes con el espacio e instrumentación necesaria, para inclusive bandas de gaitas venezolanas. 1.5.2 Alquiler de salas de grabación El proceso es muy similar al alquiler de las salas de ensayo. Rock & Folk, al igual que la mayoría de los estudios, cuenta con una única sala de grabación. La misma está compuesta básicamente por dos salones: la sala de control, donde el Ingeniero de Sonido dirige la grabación, manejando una consola de audio con otros equipos; y la sala de grabación, donde el músico ejecuta su instrumento a grabar. En este sentido, el cliente se comunica con el estudio bajo las mismas condiciones que para alquilar las salas de ensayo, pero en este caso se le mencionan los instrumentos y equipos básicos que dispone la sala, y también los adicionales que ofrecen a un costo aparte, si el músico lo requiere. Debido a esto, muchos músicos prefieren ir personalmente a ver las instalaciones (si no conocen el estudio), o a cerciorarse de las condiciones de la sala y equipos. No obstante, algunos estudios beneficiados por su popularidad, como el caso de Rock & Folk, no reciben estas visitas previas y realizan las pautas con el artista por teléfono. 1.5.3 FACTURACIÓN Página 20 La duración mínima de una pauta de grabación por lo general es de 4 horas. Esto se debe a que se invierte tiempo en la conexión de los equipos y preparación de los mismos antes de grabar la primera pieza musical del artista. Toman en cuenta además, el tiempo invertido en la desconexión de los instrumentos al final de la pauta, o cualquier otra actividad relacionada. En caso de rentar horas de “Mezcla” o “Masterización”, la pauta mínima suele ser de 2 horas dependiendo de la decisión que tome el Ingeniero de Sonido o el Administrador del Estudio. 1.5.3 Facturación El proceso más importante de cualquier negocio o comercio. En este caso no caracterizado por la inmensa venta de sus materiales o artículos, sino por la prestación de horas de servicio o alquiler de equipos de sonido. En este sentido, la facturación dentro de Rock & Folk suele ser un proceso sencillo. No obstante, delicado por la cantidad de actividades que se contabilizan diariamente. En la mayoría de los casos, se registra cada movimiento financiero en el mismo instante que se genera, como la venta de bebidas, pago de pautas por sala, egresos de la caja chica (gastos de oficina), pagos a proveedores, entre otros. Asimismo, al final de cada día, se realizan los cálculos de nómina, y se incluyen en el conjunto de transacciones, creando de esta forma el “Balance de Facturación Diaria”. Y el último día del mes, se reúnen las mencionadas cuentas y son entregadas al contador del estudio o a la empresa contable contratada para que realice las gestiones necesarias contra el fisco. 1.5.4 Alquiler de equipos/instrumentos Durante una sesión de grabación o ensayo, es posible que el artista sufra inconvenientes con su instrumento, o no disponga de alguno. Por otra parte, una banda puede necesitar el alquiler de instrumentos o equipos para presentaciones en vivo, o cualquier otro uso particular fuera del estudio. Para la primera vez en ambos casos, el artista es informado sobre las reglas de este tipo de alquiler, buscando evitar posibles malentendidos a futuro. El músico es responsable del instrumento rentado y debe reponer el mismo en caso de robo, pérdida, o daños irreparables si fueron causados por mal uso. 1.6 APLICACIONES ACTUALES Página 21 Los alquileres de estos equipos son por horas o por días, dependiendo de la cantidad de tiempo que solicite el cliente. El mismo debe retirar el(los) instrumento(s) por el estudio y dejarlos nuevamente por el recinto al finalizar su período de renta. En algunos casos se ofrece el servicio de transporte de equipos y es cobrado de forma adicional al precio básico del alquiler. 1.6 Aplicaciones actuales Hoy en día, existen diversos sistemas de reservaciones online, así como de gestión del alquiler de recintos o viviendas en general. En el área de turismo, es muy popular el uso de aplicaciones en línea para las reservas de alojamiento, y puede verse en casi cualquier sitio web hotelero. Por otra parte, están presentes numerosos sistemas de renta de salones o viviendas, que facilitan el trabajo de un arrendador. Muchos de ellos son privados, y por ende, la empresa interesada debe comprar la licencia para poder disfrutar de las bondades del software y, para el caso del área hotelera, ofrecerles a los huéspedes la comodidad de hacer sus reservas desde sus hogares. Pero hasta ahora no se ha mencionado alguno que tenga relación con los Estudios de Grabación y Ensayo. La razón es porque en la actualidad no existe tal aplicación, que permita gestionar los alquileres de las salas, y además, permitir las reservas de las mismas vía Internet. Durante el desarrollo de la presente investigación, se halló un sistema en el área de Salud denominado “Sistema de Reserva de Horas” desarrollado por la empresa chilena Fairware Computación Ltda., que les permite a los pacientes hacer reservas en línea, y además, concederle a la empresa la gestión de dichas reservaciones, manejando la disponibilidad de horarios entre otras actividades administrativas. Principalmente funciona para Centros Médicos, de Estética o Salones de Belleza. A pesar de responder de forma análoga, las mismas necesidades que tienen los artistas con los Estudios de Grabación, no puede ser adaptado a este tipo de recintos ni a estos usuarios por estar restringido al área de Salud. En este sentido, se manejan especialidades médicas predefinidas, diversos datos del cliente (paciente) netamente médicos, horarios de 1.6 APLICACIONES ACTUALES Página 22 consulta no mayor a 90 minutos, exclusivo manejo de pautas ocasionales, entre otros aspectos poco ajustables a otro tipo de empresa. Por otra parte, se encontraron algunas aplicaciones que permiten la gestión del alquiler de salas en general, entre las cuales se consideraron el “Meeting Room Booking System (MRBS)” creado por el programador y colaborador Daniel Gardner y además, otra aplicación de la empresa chilena denominada “Sistema de Reserva de Salas”. Ambos sistemas cumplieron con algunas necesidades faltantes en la aplicación mencionada anteriormente, como el hecho de manejar salones, apartamentos o viviendas, configuración de las salas, registro de clientes, entre otras funciones que podrían ajustarse a un estudio de grabación. No obstante, su manejo es netamente empresarial, es decir, los clientes no tienen acceso a realizar ningún tipo de interacción con el sistema, y además, las reservas no tienen precio y por ende, no se relacionan con el cliente como ingresos al comercio. El resto de los programas investigados también manejan reservas de salas o alquileres de equipos, en donde sí existe interacción por parte del cliente y también de la empresa con su respectiva permisología, pero se encontraron diversas carencias como la opción de ingresar en lista de espera por una pauta, consulta de deudas y abonos del cliente, manejo de pautas fijas y renovación de las mismas según balance financiero con el estudio, entre otras. A continuación se muestra un cuadro comparativo (Ver Tabla 1) de algunas de las distintas aplicaciones existentes, que tienen similitudes con la aplicación Web desarrollada, y que sirvieron de referencia para la misma. Sistema Licencia Plataforma Tecnología Descripción General Casa Software País MRBS Libre (GPL) Windows, Unix PHP, MySQL Gestión de alquiler de salas Daniel Gardner Estados Unidos Sistema de reserva de Horas Privada Windows ASP Gestión de consultas médicas Fairware Chile Sistema de Reserva de Salas Privada Windows ASP Gestión de alquiler de salas Fairware Chile Web Calendar Libre (GPLv2) Windows, Unix PHP Gestión de pautas de eventos Craig Knudsen Alemania Tabla 1. Sistemas actuales de reservaciones y de alquiler de equipos CAPÍTULO II. MARCO METODOLÓGICO Página 23 Capítulo II. Marco Metodológico En este capítulo se presenta las técnicas y métodos utilizados para la construcción de la aplicación Web, como lo es la Programación Extrema como método ágil de desarrollo. Además se describen las herramientas tecnológicas que se requieren para la su implementación, como el framework Ruby On Rails, el sistema manejador de bases de datos MySQL, y el servidor Mongrel. 2.1 Programación Extrema (XP) La programación extrema es un método de desarrollo de software ágil basado en una serie buenas prácticas que persigue el objetivo de aumentar la productividad a la hora de desarrollar programas. Se basa en una serie de pasos para el desarrollo de software, en la que se da prioridad a los trabajos que dan un resultado directo, minimizando el esfuerzo en aquellos menos relevantes que hay alrededor de la programación. Una de las características principales de este método de programación, es que sus lineamientos son conocidos desde el principio de la informática. Los autores de XP han reunido los que han considerado mejores y han profundizado en sus relaciones entre sí, dando como resultado este método compacto. Por esto, aunque no está basado en principios nuevos, el resultado es una nueva manera de ver el desarrollo de software. (Beck, 2005) (Zambrano & León, 2010). 2.2.1 Principios básicos La Programación Extrema se basa en 12 principios básicos según lo proponen sus autores, a saber:  El principio de pruebas: se establece un período de pruebas de aceptación del programa donde se definen las entradas al sistema y los resultados esperados. Es muy recomendable automatizar las pruebas para hacer simulaciones del sistema en funcionamiento. Para hacer estas simulaciones, se pueden utilizar Ambientes de Prueba. 2.2.1 PRINCIPIOS BÁSICOS Página 24  Proceso de planificación: en esta fase, el usuario debe escribir sus necesidades, definiendo las actividades que debe realizar el sistema. Se crea entonces un documento llamado “Historias del Usuario”.  El cliente en el sitio: se le da el poder para determinar los requerimientos, definir la funcionalidad, señalar las prioridades y responder las preguntas de los programadores. Esta fuerte interacción directa con el desarrollador disminuye el tiempo de comunicación y la cantidad de documentación, junto con los altos costes de su creación y mantenimiento. Este representante del cliente debe estar con el equipo de trabajo durante toda la realización del proyecto.  Programación en parejas: requiere que todos los programadores XP trabajen en parejas, compartiendo un solo computador. De acuerdo con los experimentos, este principio puede producir aplicaciones más buenas, de manera consistente, a iguales o menores costes. Aunque la programación en pareja puede no ser para todo el mundo, las estadísticas del uso de XP demuestran un gran éxito.  Integración continua: permite al equipo hacer un rápido progreso implementando las nuevas características del software. En lugar de crear “builds” (o versiones) estables de acuerdo a un cronograma establecido, los equipos de programadores XP pueden reunir su código y reconstruir el sistema varias veces al día. Esto reduce los problemas de integración comunes en proyectos largos y estilo cascada.  Refactorización: permite a los equipos de programadores XP mejorar el diseño del sistema a través de todo el proceso de desarrollo. Los programadores evalúan continuamente el diseño y recodifican lo necesario. La finalidad es mantener un sistema enfocado a proveer el valor de negocio mediante la minimización del código duplicado y/o ineficiente.  Entregas pequeñas: colocan un sistema sencillo en producción rápidamente que se actualiza de forma rápida y constante permitiendo que el verdadero valor de negocio del producto sea evaluado en un ambiente real. Estas entregas no pueden pasar las 2 ó 3 semanas como máximo. 2.2.2 ACTIVIDADES DE LA PROGRAMACIÓN EXTREMA Página 25  Diseño simple: se basa en la filosofía de que el mayor valor de negocio es entregado por el programa más sencillo que cumpla los requerimientos. El Diseño Simple se enfoca en proporcionar un sistema que cubra las necesidades inmediatas del cliente, ni más ni menos. Este proceso permite eliminar redundancias y rejuvenecer los diseños obsoletos de forma sencilla.  Metáfora: es una descripción general del sistema, que se establece al comenzar el proyecto, que fortifica la integridad conceptual, ayuda a guiar el proceso de desarrollo y mantiene una visión unificada entre los actores. La Metáfora determina un estándar en el vocabulario que será utilizado por los programadores y el cliente, que luego ayudará a establecer las clases y métodos del sistema.  Propiedad colectiva del código: un código con propiedad compartida. Nadie es el propietario de nada, todos son el propietario de todo. Este método difiere en mucho a los métodos tradicionales en los que un simple programador posee un conjunto de código. Los defensores de XP argumentan que mientras haya más gente trabajando en una pieza, menos errores aparecerán.  Estándar de codificación: define la propiedad del código compartido así como las reglas para escribir y documentar el código y la comunicación entre diferentes piezas de código desarrolladas por diferentes equipos. Los programadores las han de seguir de tal manera que el código en el sistema se vea como si hubiera estado escrito por una sola persona.  La semana de 40 horas: la programación extrema sostiene que los programadores cansados escriben código de menor calidad. Minimizar las horas extras y mantener los programadores frescos, generará código de mayor calidad. Los autores afirman que está bien trabajar horas extra pero sólo cuando es necesario, y que no ocurra por más de dos semanas seguidas. (Aranda & Gómez, 2009) (Zambrano & León, 2010). 2.2.2 Actividades de la Programación Extrema La Programación Extrema está compuesta por una serie de actividades o prácticas que pueden agruparse en cuatro bloques o fases. 2.2.2 ACTIVIDADES DE LA PROGRAMACIÓN EXTREMA Página 26 Planificación Se escriben las Historias de Usuario, las cuales deben ser hechas por el cliente, de tal manera, que entienda perfectamente cada una de ellas y se pueda hacer una estimación de tiempo para el desarrollo del mismo. Al reunir suficientes historias, se forma el llamado “Plan de Liberación”, el cual define de forma específica los tiempos de entrega de la aplicación, para recibir retroalimentación por parte del usuario. Por regla general, cada historia suele necesitar de una a tres semanas de desarrollo. Son muy importantes y tienen que ser una constante las reuniones periódicas durante esta fase de planificación. Pueden ser a diario, con todo el equipo de desarrollo para identificar problemas, proponer soluciones y señalar aquellos puntos a los que se les ha de dar más importancia por su dificultad o por su punto crítico. (Zambrano & León, 2010). Diseño Es en esta fase donde se pone en práctica el principio del Diseño Simple. Si alguna parte del sistema es de desarrollo complejo, lo apropiado es dividirla en varias. Si hay fallos en el diseño, deben ser corregidos lo antes posible. Se crea la Metáfora del sistema, que se basa en un gráfico que muestre su arquitectura y una descripción de las funcionalidades, de manera que pueda ser comprendida por cualquier persona. Se escriben las tarjetas CRC (Clase, Responsabilidad y Colaboración) que ayudan al equipo a definir actividades durante el diseño del sistema. Cada tarjeta representa una clase en la programación orientada a objetos y define sus responsabilidades (lo que ha de hacer) y las colaboraciones con las otras clases (cómo se comunica con ellas). La Refactorización entra también en esta fase. Se debe cambiar un diseño si se considera necesario, o eliminar un código que ya no se necesite. El propósito es minimizar en lo posible, ineficiencias del código o duplicados del mismo. (Zambrano & León, 2010). 2.3 RUBY ON RAILS Página 27 Codificación El equipo de trabajo procede a plasmar las ideas a través del código, y el representante del cliente debe mantenerse presente en todo el desarrollo del proyecto, para escribir las Historias de Usuario, participar en la elección de las que entrarán en el Plan de Liberación, y hacer las pruebas de funcionalidad. La idea es usar el tiempo del cliente para hacer estas tareas, en vez de para crear una minuciosa y detallada descripción de requisitos. Debe regirse bajo el principio del Estándar de Codificación mencionado anteriormente, para asegurar la consistencia y facilitar la comprensión y refactorización del código. Es en esta fase donde se pone en práctica la Integración Continua de los últimos avances del proyecto, las Entregas Pequeñas al cliente, la propiedad colectiva del código y la Programación en Parejas, para asegurar una alta calidad del trabajo. (Zambrano & León, 2010). Pruebas Todo el código debe tener pruebas unitarias, y deben ser aprobadas antes de ser lanzado. Cuando se encuentra un error de codificación, se desarrollan pruebas para evitar volver a caer en el mismo. Se realizan pruebas de aceptación frecuentemente, publicando los resultados de las mismas. Estas pruebas son generadas a partir de las Historias de Usuario elegidas para la iteración, y el cliente verifica el correcto funcionamiento de lo que se está probando. Cuando se pasa la prueba de aceptación, se considera que la historia correspondiente se ha completado. (Zambrano & León, 2010). 2.3 Ruby On Rails En la presente sección se describen algunos aspectos relevantes sobre el lenguaje de programación Ruby, así como el framework Rails. 2.3 RUBY ON RAILS Página 28 2.3.1 El lenguaje de Programación Ruby Ruby es un lenguaje de programación interpretado y orientado a objetos, el cual comparte similitudes sintácticas con otros lenguajes como Python, Perl y SmallTalk. Es interpretado en una sola pasada y su implementación oficial es distribuida bajo una licencia de software libre. Fue creado con el propósito de minimizar el trabajo de programación y posibles confusiones al momento de escribir código, ya que ofrece una elegante y ligera sintaxis. Puede ser usado para desarrollar aplicaciones web, interfaces gráficas de usuario (GUI) y cualquier sistema de propósito general. (Thomas & Heinemeier Hansson, 2006). 2.3.2 Ventajas del lenguaje Ruby Algunas características particulares de dicho lenguaje el cual indican sus ventajas y beneficios para su implementación son:  Es un lenguaje flexible, por lo que permite modificar funcionalidades en sus clases base y métodos.  Puede ser usado para el desarrollo de aplicaciones web hasta la simulación de ambientes complejos.  Es un lenguaje multiplataforma que se integra perfectamente en gran cantidad de arquitecturas.  Incorpora algunas de las mejores características de otros lenguajes.  Es un lenguaje sumamente dinámico. No es necesaria la declaración de variables porque se adaptan al contexto en el que estén presentes.  Promueve las mejores prácticas de programación sin perder usabilidad.  Es un lenguaje altamente extensible no solamente mediante sus respectivas librerías escritas en dicho lenguaje, sino que se puede ampliar utilizando otros lenguajes.  Permite utilizar simples expresiones para programas y algoritmos, lo cual da valor agregado a las prácticas agiles, las cuales permite realizar desarrollos de aplicaciones fácilmente comprensibles. 2.3 RUBY ON RAILS Página 29 2.3.3 Ruby On Rails Ruby On Rails, mejor conocido como Rails, es un framework de aplicaciones web de código abierto escrito en el lenguaje de programación Ruby, siguiendo el paradigma de la arquitectura Modelo Vista Controlador (MVC). Trata de combinar la simplicidad con la posibilidad de desarrollar aplicaciones del mundo real escribiendo menos código que con otros frameworks y con un mínimo de configuración. El lenguaje de programación Ruby permite la metaprogramación de la cual Rails hace uso, lo que resulta en una sintaxis que muchos de sus usuarios encuentran muy legible. Rails se distribuye a través de RubyGems, que es el formato oficial de paquete y canal de distribución de bibliotecas y aplicaciones Ruby. Recientemente se llevó a cabo el lanzamiento de la última versión estable de este framework (Rails 3.0). Se mejoraron numerosas características de las versiones anteriores, entre las cuales destacan: el agregado de nuevas funciones al API que facilitan aún más la programación y el entendimiento de su filosofía, correcciones de algunos errores funcionales, optimización en la integración con los frameworks JQuery y Prototype, depuración del API desaprobando los elementos obsoletos y asistiendo al usuario con mensajes comprensibles, entre otras. (González, 2007). 2.3.4. Principios Los principios fundamentales de Ruby on Rails incluyen los siguientes aspectos:  Dont Repeat Yourself (DRY): "No te repitas tú mismo" significa que las definiciones deberán hacerse una sola vez. Dado que Ruby on Rails es un framework de pila completa, los componentes están integrados de manera que no hace falta establecer puentes entre ellos. Por ejemplo, en ActiveRecord, las definiciones de las clases no necesitan especificar los nombres de las columnas; Ruby puede averiguarlos a partir de la propia base de datos, de forma que definirlos tanto en el código como en el programa será redundante.  Convention over Configuration (COC): “Convención sobre configuración" significa que el programador solo necesita definir aquella configuración que no es convencional. Por ejemplo, si hay una clase Persona en el modelo, la tabla correspondiente de la 2.3 RUBY ON RAILS Página 30 base de datos es personas, pero si la tabla no sigue la convención debe ser especificada manualmente (set_table_name "personas"). Así, cuando se diseña una aplicación partiendo de cero sin una base de datos preexistente, el seguir las convenciones de Rails significa usar menos código (aunque el comportamiento puede ser configurado si el sistema debe ser compatible con un sistema heredado anterior). (Gunderloy & Naik, 2010). 2.3.5. Patrón Modelo Vista Controlador en Rails (MVC) En base al modelo MVC la aplicación se divide en tres partes que son:  Modelo: Responsable de mantener los datos de la aplicación.  Vista: Se encarga de la interfaz y presentar la información al usuario.  Controlador: Se encarga de realizar cálculos y une todas las partes o piezas. Recibe eventos del exterior, e interactúa con el modelo y actualiza la información de las vistas. En la siguiente figura se muestra la interacción que tiene cada uno de los componentes del patrón MVC. (Ver Figura 3). Figura 3. Patrón MVC Las piezas del patrón Modelo Vista Controlador en Ruby on Rails son las siguientes: 2.3 RUBY ON RAILS Página 31 Modelo En Ruby on Rails, las clases del Modelo son gestionadas por ActiveRecord. Por lo general, lo único que tiene que hacer el programador es hacer heredar de la clase “ActiveRecord::Base” y el programa averiguará automáticamente la tabla que va a usar y las columnas que tiene. Las definiciones de las clases también detallan las relaciones entre clases con sentencias ORM, conocidas en castellano como Mapeo de Objeto Relacional. (Katz, 2010). El modelo representa:  Las tablas de la base de datos.  Migraciones (expresan cambios en la Base de Datos).  Observadores. Vista El método que se emplea en Rails para gestionar las vistas, por defecto es usar Ruby Embebido (archivos .html.erb) que son básicamente fragmentos de código HTML con algo de código Ruby, siguiendo una sintaxis similar a JSP. Es necesario escribir un pequeño fragmento de código en HTML para cada método del controlador que necesita mostrar información al usuario. La distribución de los elementos de la página se describe separadamente de la acción del controlador y los fragmentos pueden invocarse unos a otros. Controlador La implementación del controlador es manejada por el ActionPack de Rails, que contiene la clase ApplicationController. Una aplicación Rails simplemente hereda de esta clase y define las acciones necesarias como métodos, que pueden ser invocados desde la Web, por lo general en la forma http://aplicación/prueba/método, que invoca a PruebaController#método, y presenta los datos usando el archivo de plantilla /app/view/prueba/metodo.html.erb, a no ser que el método redirija a algún otro lugar. Por otro lado Rails también proporciona Scaffold, que en español significa Andamio, pero en programación el scaffolding es un método para construir aplicaciones basadas en bases de datos. Esta técnica está soportada por algunos frameworks del tipo MVC en el cual el 2.4 MYSQL Página 32 programador escribe una especificación que describe cómo debe ser usada la base de datos. Luego el intérprete utiliza esa especificación para generar el código que la aplicación usará para crear, leer, actualizar y eliminar registros de la base de datos, esto es conocido como CRUD (create, read, update, delete). El Scaffolding fue popularizado por el framework Ruby on Rails y ahora es utilizado por otros frameworks también como CakePHP y Symfony. (Gunderloy & Naik, 2010) (Katz, 2010). 2.4 MySQL MySQL es un Sistema Manejador de Bases de Datos Relacional, de código abierto, y que corre en un servidor, proporcionando acceso a múltiples usuarios de forma simultánea. Es muy usado en aplicaciones web como parte de los paquetes de software LAMP, WAMP, MAMP o sus similares. Todos ellos caracterizados por la alta conexión entre los componentes que los forman, como lo son el servidor Apache, la base de datos MySQL, y el lenguaje de programación web PHP, Python o Perl. La popularidad de MySQL ha sido notoria gracias a su alta velocidad, fiabilidad, y facilidad de uso. Una inmensa cantidad de empresas de Tecnologías de Información lo han elegido también por la reducción de problemas asociados con el tiempo de inactividad, mantenimiento y administración de aplicaciones modernas en línea. MySQL está escrito en lenguaje C y C++ y su motor SQL utiliza el compilador yacc para sistemas operativos basados en Unix. No obstante, puede correr en diversos sistemas operativos como Linux, Windows, Solaris, Mac OS, e inclusive en Symbian OS para dispositivos móviles. (Oracle Corporation, 2010). 2.4.1 Ventajas de usar MySQL  Velocidad: MySQL se caracteriza por ser muy rápido al momento de resolver las consultas solicitadas por los usuarios, lo cual le brinda una ventaja significativa al momento de ser probado para su posible implantación. 2.5 MONGREL Página 33  Seguridad: MySQL implementa un protocolo que se encarga de emplear diferentes algoritmos para cifrar los datos que viajan a través de una red pública (como Internet), el cual tiene por nombre Capa de Seguridad de Sockets (Secure Sockets Layer - SSL). Este protocolo trabajaría en el cliente y el servidor MySQL. Así mismo, maneja las restricciones de acceso de los usuarios, manteniendo de esta manera un buen nivel de seguridad de los datos.  Licencia: Brinda la facilidad de poder emplear y adaptar el código fuente a las necesidades de los usuarios, sin verse en la obligación de adquirir una licencia para su uso. Sin embargo, si se emplea MySQL para obtener beneficios comerciales, es necesario la adquisición de una licencia.  Alta escalabilidad: Trabaja eficientemente inclusive sobre bases de datos de gran tamaño, lo que indica, que puede aplicarse en sistemas que manejen hasta más de 50 millones de registros.  Portabilidad: MySQL se ejecuta en la mayoría de sistemas operativos y, en muchos de los casos, los datos se pueden transferir de un sistema a otro sin dificultad, a excepción del Sistema Operativo Linux donde posee sensibilidad al contexto. (Oracle Corporation, 2010). 2.5 Mongrel Es una librería que provee un servidor de protocolo HTTP 1.1 especializado para aplicaciones desarrolladas en Ruby. Mongrel está destinado a proporcionar sólo lo suficiente para que una aplicación web corra sobre un robusto servidor HTTP. Lo que hace a Mongrel un servidor tan veloz en comparación con otros como Apache, es el cuidadoso uso que tiene sobre su compilador para proveer una rápida y acertada interpretación del protocolo HTTP 1.1. Esto hace que pueda ejecutarse sin mayores problemas de portabilidad. 2.5 MONGREL Página 34 Mongrel fue creado por el desarrollador de software Zed A. Shaw en el año 2007, y está registrado bajo la Licencia de Software Libre GPLv2. Viene incluido en el paquete de la última versión de Rails (Rails 3.0), aunque se puede utilizar cualquier otro que soporte Ruby. A continuación se muestra un gráfico comparativo entre Mongrel y otro servidor conocido como Webrick, el cual suele ser utilizado en aplicaciones desarrolladas en Ruby On Rails, ya que es incluido en los paquetes de algunas versiones de este framework. (Ver Figura 4). (Github Inc., 2010). Figura 4. Comparación entre los servidores Mongrel y Webrick 0 100 200 300 400 500 600 Mongrel Webrick Mongrel vs. Webrick Peticiones por segundo 3.1 ADAPTACIÓN DE LA PROGRAMACIÓN EXTREMA (XP) Página 35 Capítulo III. Marco Aplicativo En este capítulo se presenta la descripción del proceso de desarrollo de la aplicación Web, así como la adaptación de la Programación Extrema (XP), donde cabe mencionar algunos principios que no aplican en el presente proyecto, como la Programación en Parejas y el uso de las Tarjetas CRC. Sin embargo, se cumple con los principios restantes, como la creación del Plan de Liberación para definir los tiempos de entrega de las Historias de Usuario; la Metáfora del Sistema con el propósito de describir las funcionalidades de la aplicación a través de una representación gráfica; y otras relevantes que se mencionan a lo largo del presente capítulo. 3.1 Adaptación de la Programación Extrema (XP) El método ágil de desarrollo escogido es la mencionada Programación Extrema, la cual brinda bondades como la búsqueda de la simplicidad, constantes y rápidas respuestas al cliente buscando su mayor satisfacción, reducción de documentación, el estar orientada a equipos pequeños, entre otras. A continuación se describe cómo se aplican las 4 actividades de XP al desarrollo de la aplicación Web. 3.1.1 Planificación Lo primero en llevar a cabo, es una reunión con el presidente del estudio Rock & Folk, para poder escribir una lista de Historias de Usuario, pues es la persona que conoce todos los procesos del estudio, y es el responsable de agregar o modificar los requerimientos. Para cumplir con el Plan de Liberación de esta fase, se define una bitácora de desarrollo para la planificación de los requerimientos en base a días o semanas. Se hace un desarrollo por módulos, cada uno con una fecha inicial, fecha estimada de culminación, precedencia de la tarea específica, número de días estimados y número de días realizados. En este sentido, el formato de la bitácora es el siguiente. (Ver Tabla 2). 3.1 ADAPTACIÓN DE LA PROGRAMACIÓN EXTREMA (XP) Página 36 Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados Tabla 2. Tabla para la bitácora de desarrollo Se trabaja en función del tiempo, implementando cada Historia de Usuario en una cantidad de días estimados (entre 1 y 3 semanas como indica XP). El formato de estas historias es el siguiente. (Ver Tabla 3). Número: Prioridad: Estimación: Nombre: Descripción: Tabla 3. Formato para las Historias de Usuario La planificación se realiza en iteraciones, las cuales se divide la implementación de las Historias de Usuario, y las entregas al cliente para correcciones y realización de pruebas que se llevan a cabo al final de cada iteración. 3.1.2 Diseño En esta etapa se realiza el análisis global del sistema, creando una representación sencilla de las partes que la conforman y cómo se comunicarán entre ellas. Esto cumple con el principio de XP, de escribir una metáfora que represente de forma general, el resultado que se busca en el desarrollo del sistema. Para llevar a cabo el principio del Diseño Simple, se mantienen conversaciones con el cliente proponiendo soluciones entre ambas partes, que definan las funcionalidades de cada módulo del sistema, evitando las complejidades en lo posible. Del lado del desarrollador, se utilizaron herramientas tecnológicas que simplificaron los procesos, como lo fue la implementación de controles AJAX. Las tarjetas CRC no aplican por ser un solo desarrollador a cargo de la aplicación. Sin embargo, el principio de Refactorización se lleva a cabo, en vista de la revisión constante del código y de la documentación, refinando los detalles en las iteraciones subsecuentes. 3.1 ADAPTACIÓN DE LA PROGRAMACIÓN EXTREMA (XP) Página 37 3.1.3 Codificación Lo primero que se establece en esta etapa, es el Estándar de Codificación para la programación en Ruby, la cual se define de la siguiente manera: Documentación de cada método. Cada uno tiene una cabecera con el nombre y apellido del desarrollador, fecha de creación del método y una breve descripción de su finalidad. Los identificadores de variables, tablas y métodos están escritos en español, letra minúscula, sin acentos y sin incluir la letra “ñ” reemplazándola por “n”. Las que tienen más de 1 palabra, están separadas por el underscore (_). Los nombres de las tablas de la base de datos están en singular. Además, los nombres de las tablas que hacen la relación entre otras dos, están conformados exclusivamente de dos palabras, las cuales son los nombres de las tablas que están relacionando. Todas las tablas sin excepción, contienen 4 columnas adicionales para fines históricos, las cuales son: o fecha_reg para guardar la fecha de creación del registro. o fecha_act_reg para guardar la fecha de actualización del mismo. o usuario_reg para indicar el último usuario que manipuló la entrada. o estado_reg para activar o desactivar el registro. Las claves primarias que sean identificadores son las que provee la convención de Rails, donde usan un campo entero auto incremental. Los campos descriptivos son de tipo varchar(255), excepto los de gran tamaño, donde se usa el tipo longtext. Referente al principio de Entregas pequeñas, se actualiza el sistema en el servidor de aplicaciones cada una o dos semanas con los últimos avances, de forma que el cliente realice pruebas constantemente. Además, la codificación se lleva a cabo dentro del estudio Rock & Folk en una oficina que se dispuso para ello. Esto permite tener al Cliente en el 3.1 ADAPTACIÓN DE LA PROGRAMACIÓN EXTREMA (XP) Página 38 Sitio, ya que mantiene contacto permanente con el programador, pudiendo modificar los requerimientos o prioridades, y aclarar las dudas rápidamente. Las 40 horas semanales se distribuyen en los 7 días de la semana, teniendo jornadas nocturnas de lunes a viernes y diurnas los fines de semana. La aplicación Web es desarrollada por una sola persona, por lo que la Programación en Parejas no aplica; sin embargo, se revisa el código constantemente para obtener una aplicación lo más refinada y eficiente posible. 3.1.4 Pruebas En esta fase se realizan las pruebas funcionales y de aceptación de cada Historia de Usuario, asegurando de esta forma, el buen funcionamiento de dicha implementación. Los restantes tipos de pruebas, como las unitarias y de integración, no se incluyen en esta fase para evitar retrasos en los tiempos de entrega en vista de ser una sola persona a cargo de la programación. Al finalizar cada iteración, se escriben las pruebas de aceptación indicando los casos de prueba, sus resultados esperados y los obtenidos. Para cumplir este aspecto, se utiliza el siguiente formato. (Ver Tabla 4). Nº Caso de Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido Tabla 4. Formato de registro de pruebas del lado del cliente 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 39 3.2 Análisis Global del Sistema Cumpliendo con los principios de XP, se realiza un análisis general de la aplicación Web, levantando los requerimientos necesarios para el desarrollo de la misma. A partir de ello, se obtienen las Historias de Usuario desde la primera reunión con el cliente y se construye un esquema del funcionamiento de la aplicación. 3.2.1 Historias de Usuario Como parte del análisis global del sistema, se crean las Historias de Usuario que se mencionan a continuación. Número: 1 Prioridad: MEDIA Estimación: 2 días Nombre: Diseñar prototipo de interfaz de las reservaciones Descripción: Diseño de las diferentes pantallas del módulo de reservaciones plasmados en un documento de PowerPoint. Número: 2 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método autenticar del módulo Admisión Descripción: Dar acceso al usuario autenticado. Número: 3 Prioridad: MEDIA Estimación: 3 días Nombre: Desarrollar interfaz de usuario del módulo Admisión Descripción: Desarrollar interfaz de usuario para otorgar acceso a la aplicación a través de un nombre de usuario y contraseña. Número: 4 Prioridad: BAJA Estimación: 2 días Nombre: Desarrollar validaciones para el formulario de Admisión Descripción: Validar que el nombre de usuario y contraseña sean correctos, caso contrario mostrar mensajes de error correspondientes. Número: 5 Prioridad: ALTA Estimación: 7 días Nombre: Desarrollar interfaz de usuario general para el ambiente administrador Descripción: Montaje de las plantillas para los componentes de la aplicación en dicho ambiente (menú, cabecera, cuerpo, pie de página y formularios) 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 40 Número: 6 Prioridad: ALTA Estimación: 2 días Nombre: Diseñar modelo para el registro de personas Descripción: Crear las tablas relacionadas en la base de datos y realizar las asociaciones respectivas. Número: 7 Prioridad: ALTA Estimación: 8 días Nombre: Desarrollar método que permita registrar personas Descripción: Registrar personas en la aplicación, asociadas a una banda y a un perfil de usuario. Además, permitir crear una banda nueva asociada a la persona registrada. Número: 8 Prioridad: BAJA Estimación: 3 días Nombre: Desarrollar vista del registro de personas Descripción: Crear el formulario para el registro de personas y mostrar las distintas bandas a las que se le puede asociar en ese momento. Número: 9 Prioridad: BAJA Estimación: 2 días Nombre: Desarrollar validaciones del registro de personas Descripción: Validar los campos obligatorios para registrar personas. Número: 10 Prioridad: ALTA Estimación: 1 día Nombre: Diseñar modelo para las reservas de salas Descripción: Crear las tablas relacionadas en la base de datos y realizar las asociaciones respectivas. Número: 11 Prioridad: BAJA Estimación: 2 días Nombre: Rediseño de interfaz de usuario Descripción: Cambiar las plantillas de la interfaz de usuario y modificar las hojas de estilo. Número: 12 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método consultar por semana y por sala Descripción: Construir el calendario principal de la aplicación el cual pueda permitir la navegación a través de las semanas o salas del estudio. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 41 Número: 13 Prioridad: MEDIA Estimación: 1 día Nombre: Desarrollar ventana Modal (AJAX) para modificar reservas Descripción: Integrar AJAX y crear el método que levante una ventana Modal pasándole parámetros que permita invocar sus propias funciones del lado del servidor. Número: 14 Prioridad: MEDIA Estimación: 2 días Nombre: Desarrollar interfaz para el calendario y ventana Modal Descripción: Escribir código de la hoja de estilos destinada al calendario y a la ventana Modal para la modificación de reservas. Número: 15 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para modificar una reserva Descripción: Crear método que permita anular una reserva seleccionada, y registre una nueva en estado pendiente. Número: 16 Prioridad: BAJA Estimación: 1 día Nombre: Desarrollar validaciones para modificar una reserva Descripción: Validar el método que modifica las reservas, enviando un mensaje de error en caso de intentar sobrescribir una pauta pendiente. Número: 17 Prioridad: ALTA Estimación: 1 día Nombre: Diseñar modelo para las reservas de instrumentos. Descripción: Realizar el diseño del modelo relacional de las tablas asociadas a la reserva de instrumentos. Número: 18 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para renovar y cancelar una reserva. Descripción: Crear método que permita la creación masiva de reservaciones asociadas a una pauta fija, y permita de la misma forma, la anulación de las mismas. Número: 19 Prioridad: MEDIA Estimación: 2 días Nombre: Desarrollar método (Javascript) para mostrar información en la ventana Modal según la opción seleccionada. Descripción: Crear método en Javascript que muestre y oculte los controles correspondientes de la ventana Modal según las opciones seleccionadas (Modificar o Cancelar). 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 42 Número: 20 Prioridad: MEDIA Estimación: 3 días Nombre: Integrar componentes JQuery. Date picker en la ventana Modal, Pestañas en el calendario y Selección para elegir los instrumentos. Descripción: Adaptar los componentes que ofrece JQuery para el ingreso de datos en los formularios correspondientes. Número: 21 Prioridad: ALTA Estimación: 2 días Nombre: Diseñar interfaz para la creación de reservas. Descripción: Escribir las hojas de estilo para la creación de las reservas. Número: 22 Prioridad: MEDIA Estimación: 3 días Nombre: Integrar componentes JQuery. Date picker en la ventana Modal, Pestañas en el calendario y Selección para elegir los instrumentos. Descripción: Adaptar los componentes que ofrece JQuery para el ingreso de datos en los formularios correspondientes. Número: 23 Prioridad: BAJA Estimación: 1 día Nombre: Desarrollar las validaciones en la creación de reservas. Descripción: Crear las validaciones para la creación de reservas, enviando un mensaje de error en caso de intentar sobrescribir una pauta en estado pendiente. Número: 24 Prioridad: MEDIA Estimación: 2 días Nombre: Desarrollar método para buscar pautas libres por parámetros personalizados. Descripción: Crear función que obtenga las horas libres según los parámetros ingresados por el usuario administrador. Número: 25 Prioridad: ALTA Estimación: 1 día Nombre: Diseñar interfaz para la búsqueda de pautas libres personalizada Descripción: Escribir el código CSS para la búsqueda de pautas libres de forma personalizada. Número: 26 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para consultar todas las salas de forma simultánea Descripción: Escribir código de la función que consulte todas las salas en una semana especificada. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 43 Número: 27 Prioridad: ALTA Estimación: 1 día Nombre: Diseñar interfaz para la consulta de salas simultánea Descripción: Escribir las hojas de estilo asociadas a la consulta de todas las salas. Número: 28 Prioridad: MEDIA Estimación: 1 día Nombre: Integrar las consultas y búsquedas del calendario en una sola página a través del uso de las pestañas de JQuery. Descripción: Adaptar los componentes que ofrece JQuery, específicamente las pestañas para integrar las distintas consultas de las reservaciones. Número: 29 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método que construya el calendario de la lista de espera. Descripción: Escribir la función que obtenga las pautas fijas para construir el calendario semanal, ocultando las pautas ocasionales y libres. Número: 30 Prioridad: MEDIA Estimación: 1 día Nombre: Diseñar interfaz del calendario de la lista de espera. Descripción: Escribir el código CSS para el calendario de la lista de espera. Número: 31 Prioridad: BAJA Estimación: 2 días Nombre: Desarrollar validaciones en la búsqueda de pautas libres personalizada. Descripción: Validar la veracidad de la lista de las pautas libres consultadas. Número: 32 Prioridad: MEDIA Estimación: 1 día Nombre: Diseñar modelo para la lista de espera. Descripción: Crear el modelo relacional de las tablas asociadas a la lista de espera. Número: 33 Prioridad: MEDIA Estimación: 1 día Nombre: Diseñar interfaz para la lista de espera. Descripción: Escribir las hojas de estilo asociadas a la creación y modificación de las listas de espera por una pauta fija. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 44 Número: 34 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para crear y editar la lista de espera. Descripción: Escribir el código del método que permita agregar y eliminar bandas en listas de espera por una pauta fija. Número: 35 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para enviar mensajes de texto. Descripción: Desarrollar función que permita enviar mensajes de texto a los responsables de bandas incluidas en listas de espera. Número: 36 Prioridad: MEDIA Estimación: 2 días Nombre: Desarrollar interfaz para crear bandas nuevas Descripción: Escribir código CSS para la creación de bandas nuevas. Número: 37 Prioridad: ALTA Estimación: 3 días Nombre: Desarrollar método que permita crear y editar bandas Descripción: Crear función que registre bandas nuevas e integre o excluya integrantes, además de asociar los cargos de cada miembro de forma masiva. Número: 38 Prioridad: MEDIA Estimación: 1 día Nombre: Diseñar modelo para los abonos de las bandas. Descripción: Crear modelo relacional de las tablas asociadas a los abonos. Número: 39 Prioridad: MEDIA Estimación: 2 días Nombre: Diseñar interfaz para el estado de cuenta. Descripción: Escribir código CSS para el estado de cuenta de las bandas. Número: 40 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para obtener la información de los integrantes de la banda. Descripción: Crear función que realice la consulta de la información de los integrantes de una banda especificada. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 45 Número: 41 Prioridad: MEDIA Estimación: 1 día Nombre: Integrar los paneles plegables JQuery en el estado de cuenta. Descripción: Asociar componentes JQuery para dividir la vista del estado de cuenta de una agrupación, separando las reservas pendientes de las históricas. Número: 42 Prioridad: ALTA Estimación: 1 día Nombre: Desarrollar método para obtener las reservas pendientes. Descripción: Crear función que consulte las reservas pendientes de una banda Número: 43 Prioridad: ALTA Estimación: 1 día Nombre: Desarrollar método para obtener las reservas pendientes en detalle. Descripción: Crear función que consulte las reservas pendientes detalladas. Número: 44 Prioridad: ALTA Estimación: 1 día Nombre: Desarrollar método para obtener el historial de reservas. Descripción: Crear función que consulte el historial de reservas de una banda. Número: 45 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método para realizar pagos. Descripción: Crear función que registre el pago de las reservas seleccionadas y guarde el abono en caso de haberlo. Número: 46 Prioridad: ALTA Estimación: 1 día Nombre: Desarrollar validaciones en los pagos. Descripción: Adaptar función de registro de pagos para validar su correcto funcionamiento. Número: 47 Prioridad: MEDIA Estimación: 1 día Nombre: Integrar método para enviar mensajes de texto al realizar pagos. Descripción: Invocar la función de envío de mensajes de texto al realizar pagos 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 46 Número: 49 Prioridad: MEDIA Estimación: 1 día Nombre: Diseñar vista para el balance de facturación diaria. Descripción: Escribir código CSS para el balance de facturación diaria. Número: 50 Prioridad: MEDIA Estimación: 1 día Nombre: Desarrollar método que construya el calendario mensual. Descripción: Crear función que permita construir el calendario mensual para el control del balance diario. Número: 51 Prioridad: ALTA Estimación: 2 días Nombre: Desarrollar método que genere el balance de un día seleccionado en un documento pdf. Descripción: Escribir función que permita la creación y descarga del balance de facturación en un documento pdf. Número: 52 Prioridad: MEDIA Estimación: 1 día Nombre: Desarrollar validaciones en la navegación y selección de los días en el calendario mensual. Descripción: Escribir validaciones donde se confirme la veracidad de las consultas del balance en los días seleccionados. Número: 53 Prioridad: BAJA Estimación: 1 día Nombre: Adaptar la vista del registro de clientes para el registro de usuarios. Descripción: Crear nuevas hojas de estilo a partir de las vistas asociadas al registro de clientes del módulo Administrador. Número: 54 Prioridad: ALTA Estimación: 1 día Nombre: Desarrollar método que permita el registro de usuarios. Descripción: Escribir función que guarde nuevos usuarios. Número: 55 Prioridad: MEDIA Estimación: 2 días Nombre: Diseñar interfaz de usuario para el ambiente de los clientes. Descripción: Crear nuevas hojas de estilo tomando en cuenta el diseño del sitio web del estudio Rock & Folk. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 47 Número: 56 Prioridad: MEDIA Estimación: 1 día Nombre: Adaptar la vista del estado de cuenta para el ambiente cliente. Descripción: Escribir el código correspondiente en las hojas de estilo del módulo Cliente, asociado al estado de cuenta de las bandas. Número: 57 Prioridad: MEDIA Estimación: 1 día Nombre: Adaptar la vista del calendario semanal para el ambiente cliente. Descripción: Escribir el código correspondiente en las hojas de estilo del módulo Cliente, asociado al estado de cuenta de las bandas. Número: 58 Prioridad: MEDIA Estimación: 1 día Nombre: Adaptar los métodos de consulta del calendario del ambiente cliente. Descripción: Escribir nuevas funciones de consulta del calendario para el ambiente cliente, a partir de las asociadas al módulo Administrador. 3.2 ANÁLISIS GLOBAL DEL SISTEMA Página 48 Las Historias de Usuario previamente descritas son el resultado del levantamiento de requerimientos que se realiza durante el análisis global del sistema. Para continuar con este proceso se menciona a continuación los componentes y especificaciones técnicas de la aplicación Web. 3.2.2 Interfaz gráfica del Sistema Web Es el sitio web con el que interactúan los clientes del estudio, y los administradores del mismo. Cuenta con un diseño sencillo y fácil de entender para responder sus respectivas necesidades. 3.2.3 Aplicación Web Aplicación que se encarga de llevar a cabo todas las funcionalidades solicitadas, para facilitar los requerimientos de los artistas, como las reservaciones de las salas de ensayo o grabación, consulta de disponibilidad de las mismas, solicitud para entrar en lista de espera por una pauta específica, entre otros. Cualquier músico puede realizar consultas, pero sólo los registrados podrán contar con los otros servicios. En el caso de los administradores, pueden gestionar las reservas de las salas rápidamente, disminuyendo los tiempos de respuesta a los clientes que se comuniquen por teléfono. Así como la gestión de los procesos relacionados, como el registro de clientes o bandas, configuración de la información de las salas que posee el estudio, así como de los equipos e instrumentos que tienen en alquiler, entre otros. 3.2.4 Especificaciones técnicas El desarrollo de la aplicación se lleva a cabo utilizando las siguientes herramientas tecnológicas: Ruby on Rails 3.0 sobre el servidor Mongrel. Procesamiento de Eventos: Javascript. Intercambio de información cliente-servidor: AJAX Gestión de usuarios, solicitudes y peticiones: SMBD MySQL 5.1 3.3 PLAN DE ITERACIÓN Página 49 3.3 Plan de Iteración Debido a la metodología de desarrollo utilizada para el presente Trabajo Especial de Grado, fue necesaria la definición y ejecución de un conjunto de iteraciones, las cuales se les estableció fecha de inicio y fecha de culminación, con previa asesoría del tutor. El mismo fue guía, en conjunto con el presidente del estudio Rock & Folk, para la definición de las historias de usuario, las cuales forman parte importante en la implementación dentro de los períodos tiempo establecidos. 3.3.1 Iteración 0 En esta iteración se detalla el planteamiento del problema, el cual se basa en la falta del uso de tecnología para llevar a cabo los procesos de reservación de las salas de ensayo y grabación del estudio Rock & Folk. Además, se presenta la propuesta y justificación de la solución, así como el diseño general de la aplicación Web, mejor conocido por la Programación Extrema como la metáfora del sistema. Adicionalmente, se establece el nombre “Conar Studio” a la aplicación, siendo el acrónimo de “Control de Agenda y Reservación de Estudios”. Planteamiento del problema Actualmente, el personal administrativo de los Estudios de Grabación realiza los procesos de reserva de forma manual, también otras actividades importantes para la empresa como el balance de facturación diaria y el registro de clientes. En algunos casos se hace uso de las hojas de cálculo para el apoyo de estas operaciones, pero lo más utilizado en los estudios es el block o agenda de papel. Esto conduce a un mayor esfuerzo de planificación y al aumento de la probabilidad de errores, sobretodo en el proceso de reserva o del balance de facturación diaria. Una de las actividades más afectadas por este proceso manual, es el alquiler de las salas de ensayo, ya que el estudio cuenta con 5 de ellas, ofreciéndole al cliente diversas opciones para elegir, pero perjudicando la eficiencia de todo el proceso. En este sentido, se toma mucho tiempo coordinando las pautas de los artistas y se dificulta la labor de los operadores, que por lo general están atendiendo simultáneamente a los clientes presentes 3.3 PLAN DE ITERACIÓN Página 50 en el estudio, lo cual provoca mayores posibilidades de error en alguna de las anotaciones de la agenda o del block. Lo más conveniente para un músico activo es contar con al menos una pauta fija. De lograrlo, el administrador realiza las anotaciones con lápiz en cada página de la agenda donde estén los días y horas solicitadas, desde el día actual hasta la fecha que el encargado considere. Es importante destacar que este proceso se renueva una vez cumplida la fecha si aún se mantiene la pauta fija. Esto ha sido razón de incomodidad para el estudio, ya que la mayoría de las bandas cuentan con este tipo de pauta y en diversas ocasiones cancelan la misma; lo que obliga al administrador a realizar la tediosa tarea de borrar todas las anotaciones escritas después de la fecha de la eliminación la pauta fija. Existe otra modalidad para la reservación de las salas: la lista de espera. Consiste en solicitar al encargado una pauta fija que ya fue previamente reservada por otra agrupación. En el caso de que sea liberada, los clientes anotados en dicha lista son notificados vía telefónica y se les brinda la posibilidad de alquilarla. Lo que sucede en el estudio de grabación es que el encargado olvida notificar a los clientes de la lista de espera, lo que convierte la reasignación de pautas en un proceso ineficiente. Lo que respecta a pagos y créditos, se les permite a los clientes regulares dejar cuentas abiertas o también abonar dinero para la próxima reserva. El encargado escribe a lápiz en cualquier papel la deuda o el abono generado por el cliente, y esta es la única constancia que se deja de la transacción. Esta improvisada constancia provoca muchas confusiones con respecto a los pagos. No se realizan recibos así que el artista o los grupos no tienen cómo comprobar el monto abonado o la deuda acreditada. Este proceso es altamente ineficiente, ineficaz y muy poco diligente. Propuesta de la solución La solución propuesta es realizar una aplicación Web que, utilizando las tecnologías actuales descritas anteriormente, permita solventar los problemas existentes en el estudio de grabación Rock & Folk, y que además pueda ser ajustable a las necesidades de otros estudios. 3.3 PLAN DE ITERACIÓN Página 51 Para cumplir con los principios de la Programación Extrema, se realiza un diseño general de la aplicación Web, o como es denominado en esta metodología de desarrollo ágil, una metáfora del sistema, la cual se muestra a continuación. (Ver Figura 5). Figura 5. Metáfora de la aplicación Web Justificación de la propuesta En adición al conocimiento de la problemática mencionada anteriormente, se hizo uso de la encuesta como técnica de obtención de información, la cual muestra resultados positivos que contribuyen a la motivación del desarrollo de la aplicación Web. Se diseñaron dos modelos de encuesta, dirigidas a los administradores de los estudios de grabación y a sus clientes respectivamente. Los resultados de ambas encuestas pueden consultarse en el Trabajo de Seminario titulado “Estudio de los procesos de reservación de las Salas de Ensayo y Estudios de Grabación para el Desarrollo de un Sistema en línea en Apoyo a la Calidad de Servicios”. (Morantes, 2010). 3.3 PLAN DE ITERACIÓN Página 52 3.3.2 Iteración 1 Esta iteración se basa en la creación de un prototipo de interfaz para el manejo de las reservaciones, siendo éste el módulo principal de la aplicación. Esto con la finalidad de brindarle al cliente una idea de la solución propuesta, discutiendo y acordando los requisitos que debe cumplir. Además, se realiza la función autenticar del módulo Admisión y el registro de clientes del módulo Administración, ambas con sus respectivas validaciones del lado del servidor y del lado del cliente. Planificación Iteración 1 Descripción Creación de prototipo de Interfaz de las reservaciones, e implementación de la Admisión y Registro de Usuarios. Historias de Usuario 1. Diseñar prototipo de interfaz de las reservaciones. 2. Desarrollar método autenticar del módulo Admisión. 3. Desarrollar interfaz de usuario del módulo Admisión. 4. Desarrollar validaciones para el formulario de Admisión. 5. Desarrollar interfaz de usuario general para el ambiente administrador. 6. Diseñar modelo para el registro de personas. 7. Desarrollar método que permita registrar personas. 8. Desarrollar vista del registro de personas. 9. Desarrollar validaciones del registro de personas. Tiempo Estimado 30 días Fecha Inicio - Fin 12/11/2010 – 16/12/2010 Bitácora de desarrollo En la presente fase se incluye la bitácora de desarrollo, describiendo el tiempo estimado y real de las actividades generales que se realizan durante este período. En este caso, se trata de la implementación del módulo Admisión y el registro de personas del módulo Administración, el cual puede verse en la siguiente tabla. (Ver Tabla 5). 3.3 PLAN DE ITERACIÓN Página 53 Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 12/11/2010 20/11/2010 8 8 2 Análisis e implementación N/A 20/11/2010 05/12/2010 12 15 3 Desarrollo de la interfaz N/A 05/12/2010 10/12/2010 5 5 4 Realización de pruebas N/A 10/12/2010 16/12/2010 5 6 Tabla 5. Bitácora de desarrollo - Iteración 1 Diseño Para llevar a cabo la presente fase, se toma en cuenta lo conversado con el encargado del estudio referente a la forma en que manejan los clientes. En este sentido, una persona puede ser parte de distintas bandas, y a su vez, una banda puede estar formada por diversos miembros. Además, cada cliente debe estar registrado según un perfil de usuario, y con un cargo que lo describa en la agrupación a la que se le está asociando en el momento de registro. Es por ello que las respectivas tablas de la base de datos se diseñan de la forma que se muestra a continuación. (Ver Figura 6). Figura 6. Tablas del módulo de Admisión y Registro de Personas 3.3 PLAN DE ITERACIÓN Página 54 Continuando con la fase de diseño de la presente iteración, se realizan las vistas del prototipo de interfaz para el manejo de las reservaciones. Esto con la finalidad de otorgarle al encargado del estudio, una visión general de la forma en la que puede consultar y controlar las reservas. Dicho prototipo se muestra en formato PowerPoint, como se apreciarse a continuación. (Ver Figuras 7 y 8). Figura 7. Prototipo de Interfaz para las reservaciones (ambiente administrador) Figura 8. Prototipo de interfaz para las reservaciones (ambiente cliente) 3.3 PLAN DE ITERACIÓN Página 55 Finalmente, en esta fase de diseño se lleva a cabo el desarrollo de la interfaz general del usuario basado en el prototipo mencionado anteriormente. Además, se establece el nombre de la aplicación Web (Conar Studio) y los colores que debe presentar. En la siguiente figura puede apreciarse una captura de pantalla del registro de clientes basado en el diseño mencionado. (Ver Figura 9). Figura 9. Interfaz general de usuario (ambiente administrador) Codificación Con el fin de cumplir los requerimientos planteados en la presente iteración, se crea en primer lugar, la hoja de estilo asociada a la interfaz del módulo Admisión, incluyendo el mensaje de error que pueda generarse al autenticar al usuario. (Ver Figura 10). Figura 10. Código CSS para la interfaz de inicio de sesión 3.3 PLAN DE ITERACIÓN Página 56 Basado en la hoja de estilo creada anteriormente, se realiza una nueva asociada a la interfaz general de la aplicación Web con la que debe interactuar el usuario una vez haya sido autenticado correctamente. (Ver Figura 11). Figura 11. Código CSS para la interfaz general de usuario (ambiente administrador) Posteriormente se escribe el código de los métodos que se encargan de autenticar a los usuarios y otorgarles acceso a la aplicación. Se toman los datos ingresados en el formulario de admisión y se realizan las validaciones pertinentes, asegurándose de escribir las instrucciones según las recomendaciones de Ruby evadiendo así el acceso malintencionado a través de inyección SQL. (Ver Figura 12). Figura 12. Código de los métodos para autenticar y cerrar sesión 3.3 PLAN DE ITERACIÓN Página 57 Finalmente se desarrolla el método que permite el registro de una persona, en la cual se le asocia obligatoriamente una banda existente o una nueva que se crea en el momento, además de asignar un nombre de usuario y contraseña de forma opcional, dependiendo de lo escogido por el cliente durante el ingreso de datos en el formulario correspondiente. (Ver Figura 13). Figura 13. Código que se encarga del registro de clientes 3.3 PLAN DE ITERACIÓN Página 58 Pruebas Las pruebas en esta iteración se basan en el acceso a usuarios autorizados, y al registro de nuevos clientes, incluyéndolos en bandas que ya estaban previamente cargadas en la base de datos, además de crear una nueva en caso de no estar registrada. La última prueba de la presente iteración refiere también al registro de un cliente, con la diferencia de asignarle un nombre de usuario y contraseña. (Ver Tabla 6). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Admisión Acceder a la aplicación con usuario y contraseña otorgados. Otorgar acceso al usuario registrado. Se le concedió acceso a la aplicación, indicando su nombre de usuario y permitiendo el cierre de sesión. 2 Administración Registrar una persona y asociarla a una banda existente. Creación de un nuevo cliente, relacionándolo con una banda existente. Se guardó la información básica de un cliente y se asoció a la banda seleccionada. 3 Administración Registrar una persona y asociarla a una banda nueva. Creación de un nuevo cliente, relacionándolo con una banda nueva. Se guardó la información básica de un cliente y se asoció a la banda indicada, creada en el mismo instante. 4 Administración Registrar una persona con nombre de usuario y contraseña Creación de un nuevo cliente bajo el nombre de usuario y contraseña ingresados. Se guardó la información básica del cliente, su banda asociada, además de su nombre de usuario y contraseña. Tabla 6. Casos de prueba - Iteración 1 3.3 PLAN DE ITERACIÓN Página 59 3.3.3 Iteración 2 La presente iteración se basa en la creación del modelo que permite agregar salas de ensayo o grabación, que en conjunto con lo creado en la iteración anterior (registro de personas y bandas), otorga continuidad al desarrollo del primer componente del módulo Reservación, el cual es el calendario semanal. El mismo tiene la finalidad de permitir consultas por sala o por semana, así como modificar reservaciones en los días seleccionados. Planificación Iteración 2 Descripción Creación del calendario para modificar reservas y consultarlas por sala o por semana. Historias de Usuario 10. Diseñar modelo para las reservas de salas. 11. Rediseño de interfaz de usuario. 12. Desarrollar método consultar por semana y por sala 13. Desarrollar ventana Modal (AJAX) para modificar reservas. 14. Desarrollar interfaz para el calendario y ventana Modal. 15. Desarrollar método para modificar una reserva. 16. Desarrollar validaciones para modificar una reserva. Tiempo Estimado 25 días Fecha Inicio - Fin 03/01/2011 – 01/02/2011 Bitácora de desarrollo La bitácora de desarrollo de la presente iteración describe el tiempo estimado y real de las actividades que se llevan a cabo durante este período, entre las cuales, se comienza el desarrollo del módulo más importante de la aplicación (Reservación). Las funcionalidades refieren específicamente a la consulta de las reservas y a las diversas opciones para modificarlas, así como el diseño y desarrollo de las vistas para tales propósitos. (Ver Tabla 7). 3.3 PLAN DE ITERACIÓN Página 60 Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 03/01/2011 06/01/2011 3 3 2 Análisis e implementación N/A 07/01/2011 20/01/2011 15 14 3 Desarrollo de la interfaz N/A 21/01/2011 28/01/2011 5 7 4 Realización de pruebas N/A 29/01/2011 01/02/2011 4 4 Tabla 7. Bitácora de desarrollo - Iteración 2 Diseño En esta fase de diseño se lleva a cabo la primera refactorización, en donde se recodifica la hoja de estilos de la interfaz general de usuario, se incluye el logotipo de la empresa Rock & Folk y se cambia el nombre de la aplicación Web a ConarSoft, ya que el nombre anterior (Conar Studio) puede ser confundido con el nombre de un estudio de grabación en lugar de un sistema Web. Otras razones de esta refactorización vienen dadas por el repetido uso del color gris en el diseño anterior, el cual lo hace poco llamativo. El nuevo diseño puede apreciarse en la siguiente figura. (Ver Figura 14). Figura 14. Interfaz general de usuario (rediseño) 3.3 PLAN DE ITERACIÓN Página 61 Basado en la nueva interfaz de usuario, se procede a diseñar el calendario que permite realizar las consultas de las reservas por semana y por sala. Se establece una diferencia de colores entre las pautas ocasionales (color azul) y las fijas (color blanco), ya que se toman diferentes acciones dependiendo de ello. (Ver Figura 15). Figura 15. Interfaz del calendario principal En el caso de seleccionar una reserva ocupada, se muestra una ventana Modal con las opciones correspondientes según el tipo de pauta escogida. (Ver Figura 16). Figura 16. Ventana Modal para modificar reservas 3.3 PLAN DE ITERACIÓN Página 62 El diseño de la presente iteración lo conforma también la creación de tablas en la base de datos referentes a la reserva de salas. Para ello se toma en cuenta que las salas poseen características importantes que deben ser modeladas en tablas únicas como lo son: el estado de la sala y la unidad de reserva (1 hora, 2 horas, etc.). Además, se crea una tabla padre llamada Reserva y su hija denominada Reserva_Sala con la finalidad de poder asociarle las reservas de instrumentos en una próxima iteración y de esta manera, manejar la información de cada elemento reservado (sala e instrumento) en tablas separadas, pero unidas por una tabla padre que contiene un identificador único. Este diseño puede verse en la siguiente figura. (Ver Figura 17). Figura 17. Tablas relacionadas con las reservaciones y salas 3.3 PLAN DE ITERACIÓN Página 63 Codificación En esta fase se crea el controlador destinado a manejar el módulo Reservación. Se comienza por escribir funciones básicas que puedan ser utilizadas para la construcción del calendario. Una de ellas por ejemplo, se encarga de obtener el primer día de la semana según una fecha dada, con el fin de enlazar el domingo (día establecido para iniciar las semanas del calendario) con la fecha que retorne la función. Además de estas funciones básicas, se crean otras adicionales que operan contra la base de datos, bien sea para cancelar una reserva específica, cancelar una pauta fija completa o crear una reserva con los parámetros indicados. Esto con la finalidad de hacer un código más legible y eficiente, ya que para modificar una reserva, se necesita realizar diversas acciones dependiendo de la selección del usuario. En la siguiente figura se muestran algunas de las funciones mencionadas (Ver Figura 18). Figura 18. Código de funciones básicas invocadas en la aplicación A continuación se muestra el código de la función que obtiene los datos para construir el calendario, tomando en cuenta las reservas ocupadas de la semana según una fecha dada, o según la fecha actual si es el caso. (Ver Figura 19). 3.3 PLAN DE ITERACIÓN Página 64 Figura 19. Función que permite la construcción del calendario principal de la aplicación 3.3 PLAN DE ITERACIÓN Página 65 Para la codificación del siguiente método, se consideran las diversas opciones que se tienen para cada tipo de pauta, las cuales se muestran a continuación. (Ver Figura 20). Figura 20. Acciones posibles a realizar sobre una pauta ocupada Al ser diversas las opciones que se tienen para una reserva seleccionada, se desarrolla la solución de cada una en distintas iteraciones. En este caso, se escribe el código del método que provee solución a la opción de modificar la reserva, sin importar si es ocasional o fija. (Ver Figura 21). Aunado a esto, se desarrolla el código en lenguaje Javascript para mostrar la información y controles asociados a dicha opción en la ventana Modal. Se muestra un campo de texto donde se debe escribir la nueva fecha a la que se desea cambiar, y una lista desplegable con las horas posibles según la configuración de la sala. Además de ello, se pregunta si se desea hacerla fija (para el caso de las ocasionales) o si se quiere mudar la pauta (para el caso de las fijas). En caso afirmativo se muestran dos listas desplegables para seleccionar la frecuencia (semanal o diaria) y la cantidad de ensayos a reservar. Puede apreciarse en la figura 16 de la fase de diseño de la presente iteración. 3.3 PLAN DE ITERACIÓN Página 66 Figura 21. Función que modifica una reserva seleccionada 3.3 PLAN DE ITERACIÓN Página 67 Pruebas Las pruebas en esta iteración se basan en la consulta del calendario, y en la modificación de reservas que ya están registradas en la base de datos. Se realizan las pruebas referentes al cambio de fecha y hora, permitiendo además, el paso a pauta fija para el caso de las ocasionales, y la “migración” de la pauta fija en caso contrario. Esta migración refiere a la anulación de todas las reservas asociadas a una pauta fija e indicarles la nueva fecha, hora, frecuencia y cantidad de reservas que conforman la nueva pauta. (Ver Tabla 8). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Reservación Navegar entre las salas registradas y las semanas del calendario Mostrar el calendario con las reservas libres y ocupadas correctamente en la semana y sala seleccionada. Se mostró correctamente las reservas libres y ocupadas en el calendario. 2 Reservación Modificar una pauta para una fecha y hora distinta. Cancelar la reserva seleccionada, crear la pauta nueva y mostrarla en el calendario. Se mostró el calendario con la reserva modificada y se canceló la antigua. 3 Reservación Modificar una pauta ocasional y hacerla pauta fija. Cancelar la reserva seleccionada, crear las nuevas pautas según la frecuencia y cantidad seleccionada, y mostrar la última en el calendario. Se canceló la reserva anterior y se crearon las nuevas reservas de la pauta fija, mostrando la última en el calendario. 4 Reservación Mudar una pauta fija a una nueva fecha, hora, frecuencia y cantidad. Cancelar todas las reservas de la pauta fija seleccionada, y crear las nuevas según las opciones escogidas. Se cancelaron todas las reservas de la pauta fija seleccionada y se crearon las nuevas, mostrando la última en el calendario. Tabla 8. Casos de prueba - Iteración 2 3.3 PLAN DE ITERACIÓN Página 68 3.3.4 Iteración 3 En esta iteración se continúa el desarrollo del módulo Reservación, con el fin de permitir el alquiler de instrumentos en la reserva de salas, así como otorgar las opciones restantes al modificar las ocupadas, las cuales son: Cancelar pauta puntual: la cual anula exclusivamente la reserva seleccionada en conjunto con los posibles instrumentos incluidos sin importar si es una pauta fija, ya que es una opción que se debe ofrecer a los clientes si no pueden asistir al estudio un día específico. Cancelar pauta fija: la cual anula todos los ensayos asociados a la frecuencia, hora y sala de la reserva seleccionada en el calendario, anulando además, el alquiler de los posibles instrumentos que hayan estado incluidos. Renovar pauta fija: la cual crea nuevas reservas según la frecuencia que tiene la pauta seleccionada, y se le permite al cliente elegir la cantidad de ensayos que desea renovar. Planificación Iteración 3 Descripción Creación de opciones para la modificación de reservas y creación de nuevas ocasionales o fijas incluyendo instrumentos. Historias de Usuario 17. Diseñar modelo para las reservas de instrumentos 18. Desarrollar método para renovar y cancelar una reserva 19. Desarrollar método (Javascript) para mostrar información en la ventana Modal según la opción seleccionada. 20. Integrar componentes JQuery en la aplicación. 21. Diseñar interfaz para la creación de reservas. 22. Desarrollar método para crear reservas con instrumentos. 23. Desarrollar las validaciones en la creación de reservas. Tiempo Estimado 35 días Fecha Inicio - Fin 02/02/2011 – 08/03/2011 3.3 PLAN DE ITERACIÓN Página 69 Bitácora de desarrollo La bitácora de desarrollo de la presente iteración describe el tiempo real y estimado de las actividades que se llevan a cabo durante el tiempo planificado. En este caso se refiere al agregado de las nuevas opciones para las reservas ocupadas, además de la creación de nuevas reservas, lo que conlleva a realizar el diseño de interfaz y nuevas funciones para tal propósito. En la siguiente tabla se muestra la mencionada bitácora de esta iteración. (Ver Tabla 9). Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 02/02/2011 08/02/2011 6 6 2 Análisis e implementación N/A 09/02/2011 27/02/2011 20 18 3 Desarrollo de la interfaz N/A 28/02/2011 05/03/2011 4 5 4 Realización de pruebas N/A 06/03/2011 08/03/2011 3 3 Tabla 9. Bitácora de desarrollo - Iteración 3 Diseño Esta fase de la presente iteración tiene el propósito de integrar el alquiler de instrumentos en el modelo de la base de datos, así como el diseño de los controles de la ventana Modal que permite realizar diversas acciones sobre una reserva seleccionada. Los mismos son mostrados u ocultados mediante código Javascript dependiendo de la opción escogida. Además, se diseña la interfaz para la creación de nuevas reservas, en donde se debe seleccionar al menos la banda que está tomando la pauta. A continuación se muestra la integración de las tablas correspondientes al alquiler de instrumentos, resaltando sobre el diseño de la iteración anterior referente a las reservas. (Ver Figura 22). 3.3 PLAN DE ITERACIÓN Página 70 Figura 22. Tablas relacionadas con el alquiler de instrumentos 3.3 PLAN DE ITERACIÓN Página 71 En el caso de la ventana Modal que ofrece las distintas opciones para modificar una reserva, se distribuyen los controles de forma que el usuario entienda fácilmente lo que debe hacer, por ejemplo, al seleccionar la renovación de la pauta fija se muestra la lista de ensayos que va a renovar, la frecuencia que tiene asociada (la cual no puede cambiarse en este momento), la cantidad de reservas (asociada a la lista de ensayos a renovar) y finalmente, el precio total que debe pagar por esta acción. Una muestra de esta interfaz puede apreciarse en la siguiente figura. (Ver Figura 23). Figura 23. Ventana Modal que ofrece las diversas opciones a realizar sobre una pauta ocupada En el caso de seleccionar una pauta libre, se muestra una interfaz diferente dividida en 3 columnas, las cuales se explican a continuación: Columna izquierda: Contiene los controles necesarios para permitir la creación de la nueva reserva, como el campo de texto autocompletar para seleccionar la banda, la lista de instrumentos disponibles, el tipo de pauta, y la frecuencia y cantidad de ensayos si se escoge el tipo de pauta fija. Columna central: Se encarga de mostrar la información de la reserva según lo escogido en la columna anterior. El propósito es simular una hoja de recibo con toda la información de la reserva, en la que se incluye el precio detallado de cada ensayo o instrumento y el total de la reservación. 3.3 PLAN DE ITERACIÓN Página 72 Columna derecha: Muestra un calendario pequeño similar al calendario principal, con el fin de navegar entre semanas o salas en caso de haber escogido una reserva no deseada, además de tener una mejor visualización de la fecha, hora y sala seleccionada. (Ver Figura 24). Figura 24. Interfaz para la creación de una nueva reserva Codificación En la presente fase se continúa el desarrollo del módulo Reservación, donde se realizan cambios al método que modifica una reserva ocupada, para permitir la renovación en caso de ser una pauta fija, y la anulación para cualquier otro caso. Cabe destacar que existen dos tipos de anulación, las cuales se diferencian por liberar una pauta puntual o cancelar todos los ensayos asociados a una pauta fija. El código final del método que realiza cambios en una reserva puede apreciarse en la siguiente figura. (Ver Figura 25). 3.3 PLAN DE ITERACIÓN Página 73 Figura 25. Código final para modificar una reserva Continuando con la fase de codificación, se desarrollan métodos para complementar las funciones de la ventana Modal de la iteración anterior. Se utiliza lenguaje Javascript para mostrar la información y controles pertinentes a la opción que haya sido escogida por el usuario en esta ventana. En el caso de cancelar una pauta puntual o cancelar una pauta fija, se ocultan todos los controles a excepción del botón para confirmar la acción. La función que permite modificar la reserva, perteneciente a la iteración anterior, se le integra el componente JQuery llamado “Date picker” el cual se asocia al campo de texto de la fecha a la que se desea cambiar. 3.3 PLAN DE ITERACIÓN Página 74 La acción restante que puede tomarse en esta ventana Modal es renovar la pauta fija, donde se muestra la lista de los ensayos que se desea reservar, así como el precio total que se le carga a la banda seleccionada. La lista desplegable de la frecuencia se muestra de forma desactivada, ya que al ser una renovación, no puede ser alterada. Sin embargo, se muestra una lista desplegable adicional, con la cantidad de ensayos que conforman dicha renovación. En el caso de escoger alguna acción que conlleve a mostrar la lista desplegable de la cantidad de ensayos a reservar o renovar, se muestra una etiqueta debajo de ella indicando la fecha del último ensayo. Esta información se actualiza al cambiar la selección de cualquiera de las listas desplegables, mejor conocido en el lenguaje Javascript, como los eventos “onChange”. En la siguiente figura puede apreciarse parte del código Javascript que se utiliza para mostrar y ocultar lo mencionado anteriormente. (Ver Figura 26). Figura 26. Código Javascript encargado de mostrar u ocultar las opciones correspondientes a las diversas acciones posibles sobre una reserva 3.3 PLAN DE ITERACIÓN Página 75 Finalmente, se desarrolla el método que permite crear una reserva al confirmar los datos desde la interfaz mencionada en la fase de diseño de la presente iteración. Para llevar a cabo este proceso, se guarda un registro en la tabla Reserva con un identificador asociado a la banda. Posteriormente se verifica el tipo de pauta escogido por el usuario, ya que dependiendo de ello se toman distintas acciones. En el caso de haber escogido crear una pauta ocasional, se guarda un registro en la tabla Reserva_Sala con la información obtenida desde la interfaz como la fecha, hora, sala y precio asociado a las ocasionales. Si seleccionan instrumentos, se recurre a un ciclo donde se guarda un registro por cada uno de ellos en la tabla Reserva_Servicio incluyendo también datos relevantes como la fecha, hora, sala y precio del instrumento. En caso de haber seleccionado crear una pauta fija, se toman los datos adicionales como la frecuencia y cantidad de ensayos que la conforman, para realizar el mismo procedimiento al crear pautas ocasionales, con la diferencia de hacerlo dentro de un ciclo que recorre la cantidad de ensayos deseados. El extracto de código que permite realizar nuevas reservas bajo lo mencionado anteriormente puede apreciarse en la siguiente figura. (Ver Figura 27). Figura 27. Función encargada de crear una nueva reserva 3.3 PLAN DE ITERACIÓN Página 76 Pruebas Las pruebas en esta iteración refieren a la anulación de reservas fijas y ocasionales, así como a la renovación de las pautas fijas. Se incluyen también en esta fase, la creación de una nueva reserva a partir del bloque seleccionado en el calendario, donde el usuario indica la banda, los instrumentos que se desean incluir, y el tipo de pauta en conjunto con la cantidad de ensayos si se trata de una pauta fija. A continuación se muestran las mencionadas pruebas. (Ver Tabla 10). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Reservación Cancelar una pauta ocasional Cancelar la pauta seleccionada y mostrar el calendario en la fecha y sala de la misma. Se canceló correctamente la pauta y se mostró el calendario. 2 Reservación Cancelar una pauta fija Cancelar los ensayos asociados y mostrar nuevamente el calendario. Se cancelaron las reservas asociadas a la pauta fija y se mostró el calendario. 3 Reservación Renovar una pauta fija Crear nuevas reservas bajo la misma frecuencia de la pauta fija seleccionada. Se creó la cantidad de reservas indicada, registradas como pauta fija. 4 Reservación Modificar una pauta utilizando componentes JQuery. Modificar la reserva y mostrar el calendario en la nueva fecha. Se modificó correctamente la pauta y se mostró el calendario actualizado. 5 Reservación Crear una pauta ocasional en la fecha y hora seleccionada con instrumentos Crear una pauta ocasional incluyendo instrumentos, con el precio correcto cargado a la banda. Se creó la nueva reserva con los instrumentos cargados a la banda 6 Reservación Crear una pauta ocasional sin instrumentos. Crear una pauta ocasional sin instrumentos, con el precio cargado. Se creó la nueva reserva con el precio de la sala cargado a la banda 7 Reservación Crear una pauta fija en la fecha y hora seleccionada con instrumentos Crear una pauta fija incluyendo instrumentos, con el precio correcto cargado a la banda. Se creó la pauta fija con los instrumentos cargados a la banda en cada ensayo asociado. 8 Reservación Crear una pauta fija en la fecha y hora seleccionada sin instrumentos Crear una pauta fija sin instrumentos, con el precio correcto cargado a la banda. Se creó la pauta fija con el precio de la sala cargado a la banda en cada ensayo asociado. Tabla 10. Casos de prueba - Iteración 3 3.3 PLAN DE ITERACIÓN Página 77 3.3.5 Iteración 4 En la presente iteración se continúa el desarrollo del módulo Reservación, agregando nuevas formas de búsqueda de pautas libres, permitiendo realizar consultas a través de filtros como un período de tiempo (desde una fecha inicial hasta una final), un rango de horas, las salas de ensayo específicas que se desea averiguar y finalmente, una opción para mostrar los resultados por fecha o por sala, según lo desee el usuario administrador. Además de este tipo de búsqueda, se agrega la consulta de todas las salas de forma simultánea, en donde es posible navegar entre las semanas mostrando un calendario asociado a cada sala en la misma página de consulta. Finalmente, se construye un calendario adicional para colocar a una banda en lista de espera por la pauta fija seleccionada. Planificación Iteración 4 Descripción Búsqueda personalizada de pautas libres, consulta de todas las salas de forma simultánea y calendario de lista de espera. Historias de Usuario 24. Desarrollar método para buscar pautas libres por parámetros personalizados. 25. Diseñar interfaz para la búsqueda de pautas libres personalizada. 26. Desarrollar método para consultar todas las salas de forma simultánea. 27. Diseñar interfaz para la consulta de salas simultánea. 28. Integrar las consultas y búsquedas del calendario en una sola página a través del uso de las pestañas JQuery. 29. Desarrollar método que construya el calendario de la lista de espera. 30. Diseñar interfaz del calendario de la lista de espera. 31. Desarrollar validaciones en la búsqueda de pautas libres personalizada. Tiempo Estimado 16 días Fecha Inicio - Fin 09/03/2011 – 25/03/2011 3.3 PLAN DE ITERACIÓN Página 78 Bitácora de desarrollo En la presente iteración se crea la bitácora de desarrollo especificando las actividades que se realizan durante el tiempo planificado, las cuales refieren al agregado de nuevos métodos de consulta de pautas libres así como la creación de un calendario adicional donde se muestran las pautas fijas exclusivamente, con el fin de colocar en lista de espera a las agrupaciones que lo deseen. La bitácora de desarrollo de esta iteración se muestra en la siguiente tabla. (Ver Tabla 11). Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 09/03/2011 11/03/2011 3 3 2 Análisis e implementación N/A 12/03/2011 20/03/2011 10 8 3 Desarrollo de la interfaz N/A 21/03/2011 23/03/2011 3 3 4 Realización de pruebas N/A 24/03/2011 25/03/2011 3 2 Tabla 11. Bitácora de desarrollo - Iteración 4 Diseño Inicialmente se busca crear una interfaz que permita realizar búsquedas de pautas libres, y de la forma más personalizada posible, sin sobrecargar la vista con controles innecesarios. Es por ello que se escogen los siguientes parámetros como filtros de búsqueda importantes: Rango de fechas: estableciendo un período predeterminado de dos semanas a partir de la fecha actual. Rango de horas: definiendo el turno nocturno de forma predeterminada en vista de la alta demanda que tiene dicho período en el estudio Rock & Folk. Salas: permitiendo escoger las salas de ensayo que se desean consultar, ya que las mismas difieren en espacio y equipos incluidos, lo que hace crear preferencias entre las distintas agrupaciones. 3.3 PLAN DE ITERACIÓN Página 79 Finalmente se incluye una lista desplegable el cual permite escoger la forma de mostrar los resultados de la búsqueda. La misma puede ser agrupada por sala o por fecha, según lo decida el usuario administrador. (Ver Figura 28). Figura 28. Interfaz para la búsqueda personalizada de pautas libres Una vez mostrado los resultados en esta búsqueda, se debe escoger la pauta libre que se desea solicitar, la cual lleva al usuario a la interfaz para crear una nueva reserva (Ver Figura 24 de la iteración anterior). Para agregar la consulta simultánea de todas las salas del estudio, se realiza un diseño conservando el estilo de los componentes e interfaces anteriores, en el que se presenta un calendario para cada sala en una misma vista. Se permite la navegación entre las semanas, recargando todos los calendarios y otorgando de esta manera, una forma rápida de visualizar las pautas de todas las salas del estudio para una semana específica. A continuación se presenta la mencionada interfaz. (Ver Figura 29). 3.3 PLAN DE ITERACIÓN Página 80 Figura 29. Interfaz para la consulta simultánea de salas Finalmente, se diseña una vista que incluya un calendario para agregar a una banda en lista de espera. En este sentido, sólo se debe mostrar las pautas fijas, ya que son las únicas que pueden ser solicitadas para tal fin, dejando inactivas las pautas restantes, sin importar si están libres o si son pautas ocasionales. Un ejemplo de esta interfaz puede verse en la siguiente figura. (Ver Figura 30). Figura 30. Interfaz para el calendario de la lista de espera 3.3 PLAN DE ITERACIÓN Página 81 Codificación La fase de codificación de la iteración actual se inicia con el desarrollo del método que permite realizar consultas de pautas libres, a través de los filtros manipulados por el administrador. Se obtienen dichos parámetros para construir la consulta y mostrar los resultados según la opción escogida en la lista desplegable, la cual puede ser por fecha o por sala. A continuación se presenta el código del método que permite la consulta personalizada de pautas libres. (Ver Figura 31). Figura 31. Código encargado de realizar la consulta personalizada de pautas libres Continuando con la fase de codificación de la iteración actual, se desarrolla el método para la consulta de todas las salas de forma simultánea. Sin embargo, la complejidad de dicha implementación se refleja en el código de la vista, ya que se basa en el calendario principal de la aplicación, con la diferencia que se muestra un número de calendarios de acuerdo a la cantidad de salas de ensayo que estén registradas en el sistema. 3.3 PLAN DE ITERACIÓN Página 82 Para ello se define una función general denominada “dibujar_calendario”, que se encarga de construir el correspondiente a una sala. Al contar con ella, se procede a obtener la información pertinente de todas las salas como la hora de apertura, hora de cierre, unidad de reserva, y el precio asociado a las pautas ocasionales y fijas, con el propósito de iterar sobre cada una y “dibujar” el calendario correspondiente. Para asegurar una correcta vista de la consulta, se crea una tabla de bordes invisibles que contiene cada uno de estos calendarios, en la que se agrega una fila por cada 4 salas del estudio, con el propósito de mantener una simetría si existen muchas salas registradas. En la siguiente figura se puede apreciar el código que permite esta consulta general, omitiendo las instrucciones internas de la función “dibujar_calendario”, en vista de la semejanza que presenta con la función que genera el calendario principal. (Ver Figura 32). Figura 32. Código encargado de mostrar la consulta simultánea de salas 3.3 PLAN DE ITERACIÓN Página 83 Pruebas En esta fase se procede a verificar que las consultas realizadas en la vista personalizada y en la vista general de las salas sean veraces, con el fin de asegurar que efectivamente es posible realizar una reserva en la pauta seleccionada en cualquiera de ambas interfaces. Finalmente se prueba el calendario de la lista de espera, donde debe mostrar exclusivamente las pautas fijas, dejando inactivas todas las restantes. (Ver Tabla 12). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Reservación Consultar pautas personalizadas solicitando el resultado agrupado por fecha. Mostrar la lista de las pautas disponibles agrupadas por fecha. Se mostraron correctamente las pautas libres por sala. 2 Reservación Consultar pautas personalizadas solicitando el resultado agrupado por sala. Mostrar la lista de las pautas disponibles agrupadas por sala. Se mostraron correctamente las pautas libres por sala. 3 Reservación Consultar todas las salas de forma simultánea. Mostrar las pautas libres de todas las salas. Se mostraron correctamente las pautas libres de todas las salas registradas. 4 Reservación Navegar entre las semanas de la consulta simultánea de salas. Mostrar las pautas libres de todas las semanas para la semana seleccionada. Se mostraron correctamente las pautas libres de todas las salas para la semana seleccionada. 5 Reservación Consultar el calendario de la lista de espera Mostrar el calendario exclusivamente con las pautas fijas e inhabilitar el resto. Se mostraron todas las pautas fijas del calendario para la semana correspondiente. Tabla 12. Casos de prueba - Iteración 4 3.3 PLAN DE ITERACIÓN Página 84 3.3.6 Iteración 5 En la iteración actual se continúa con el desarrollo de la lista de espera de la iteración anterior. Inicialmente se diseña una interfaz para agregar las bandas que deseen estar en espera por la pauta fija seleccionada en el calendario. En la misma vista se puede sacar las agrupaciones de la lista, simulando un carrito de compras online donde se agregan y retiran artículos del mismo. Una vez que existan bandas en una lista de espera y su pauta fija asociada sea liberada, se debe contactar a estas agrupaciones informándoles que se encuentra disponible a partir de ese momento. La forma de transmitir esta información es a través de mensajes de texto, para lo que se dispone del servicio SMS que provee una empresa particular llamada “041x”. Estos mensajes se envían exclusivamente a los miembros de las agrupaciones cuyo cargo sea “Responsable de Banda”, el cual es permitido tener este cargo a uno o varios integrantes de un mismo grupo musical. El correo electrónico se excluye como medio de comunicación por ser un requisito opcional al momento de registrar los clientes del estudio. En vista de ello, se procede a desarrollar el método que notifica a los responsables de banda cuando la pauta fija esté disponible, lo cual se consideran dos eventos que deben ocurrir para enviar los mensajes de texto correspondientes, los cuales son: Cancelar la pauta fija: es el caso más evidente ya que significa que la agrupación está confirmando la liberación de esa pauta. Dicha acción se lleva a cabo a través del calendario principal, específicamente en la ventana Modal. (Ver Figura 16). Pagar la reserva pendiente: si una agrupación culmina sus ensayos de una pauta fija sin renovarla, quiere decir que se encuentra disponible a partir de ese momento para las bandas que están en espera. En este sentido, al realizar el pago se le muestra un mensaje al usuario, el cual pregunta si desea notificarle a estas bandas que se ha liberado la pauta fija. (Ver Figura 40). Posteriormente se desarrolla la vista para crear bandas, otorgando la opción de agregar o eliminar integrantes, además de asignar los cargos que deben tener sobre la agrupación. 3.3 PLAN DE ITERACIÓN Página 85 Planificación Iteración 5 Descripción Lista de Espera para las pautas fijas. Notificación a las bandas en espera vía SMS y creación de nuevas agrupaciones. Historias de Usuario 32. Diseñar modelo para la lista de espera. 33. Diseñar interfaz para la lista de espera. 34. Desarrollar método para crear y editar la lista de espera. 35. Desarrollar método para enviar mensajes de texto. 36. Desarrollar interfaz para crear bandas nuevas. 37. Desarrollar método que permita crear y editar bandas. Tiempo Estimado 12 días Fecha Inicio – Fin 26/03/2011 – 06/04/2011 Bitácora de desarrollo La bitácora de desarrollo de la iteración actual presenta las actividades que se realizan en el período planificado para ello. Las mismas refieren al diseño de interfaz de la lista de espera, así como el desarrollo del método que permita crearlas o modificarlas. Así mismo, se implementa el envío de mensajes de texto a las agrupaciones en espera, y finalmente, se desarrolla la interfaz para la creación y modificación de las bandas que ensayan en el estudio. A continuación se muestra la bitácora de estas actividades. (Ver Tabla 13). Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 26/03/2011 27/03/2011 2 2 2 Análisis e implementación N/A 28/03/2011 02/04/2011 8 6 3 Desarrollo de la interfaz N/A 03/04/2011 04/04/2011 2 2 4 Realización de pruebas N/A 05/04/2011 06/04/2011 2 2 Tabla 13. Bitácora de desarrollo - Iteración 5 3.3 PLAN DE ITERACIÓN Página 86 Diseño En esta fase de la actual iteración, se integra la tabla asociada a las listas de espera en el modelo de la base de datos. La misma crea una relación entre las tablas Banda y Reserva_Sala, ya que cada pauta fija tiene un identificador único asociado a una banda, por lo que basta con crear dos claves foráneas en la tabla Lista_Espera. Este diseño puede apreciarse en la siguiente figura. (Ver Figura 33). Figura 33. Integración de la tabla lista_espera en el modelo de la base de datos 3.3 PLAN DE ITERACIÓN Página 87 Seguidamente se realiza el diseño de interfaz para manejar la lista de espera de una pauta fija previamente seleccionada. Esta vista contiene dos columnas que se explican a continuación: Columna izquierda: se presenta una tabla de todas las bandas registradas que no se encuentren en la actual lista de espera. La cantidad de agrupaciones puede ser numerosa, por lo que se incluyen dos campos de búsqueda en la parte superior, permitiendo encontrar fácilmente una banda por su nombre o estilo. En cada fila de la tabla se presenta un botón que indica la posibilidad de agregar la banda correspondiente a la lista de espera que se explica a continuación. Columna derecha: representa la lista de espera ya que muestra la información de la pauta fija previamente seleccionada, así como una tabla de las bandas que desean tomar la pauta. En este caso, se presenta un botón por cada fila, indicando que puede retirar del listado a la agrupación correspondiente, colocándola de nuevo en la columna izquierda. A continuación se presenta el diseño de interfaz explicado anteriormente. (Ver Figura 34). Figura 34. Interfaz para la lista de espera 3.3 PLAN DE ITERACIÓN Página 88 Finalmente se realiza el diseño de la interfaz para crear bandas nuevas, dividiéndose en dos vistas (Ver Figuras 35 y 36). La primera presenta dos columnas, las cuales se explican a continuación: Columna izquierda: contiene un formulario en el que se debe ingresar el nombre de la banda que se desea crear, y seleccionar el estilo de la misma. Al finalizar, se debe confirmar seleccionando el botón “Crear banda” para mostrar la siguiente vista. Columna derecha: contiene una plantilla vacía de los datos de la banda. Su propósito en esta vista es mantener el diseño de la interfaz que se muestra al crear la agrupación nueva. Figura 35. Interfaz para la creación de bandas. 1º vista Seguidamente se presenta la segunda vista, la cual contiene dos columnas, y su diseño está basado en la interfaz de la lista de espera, como se explica a continuación: Columna izquierda: se presenta una tabla con todos los clientes registrados que no pertenezcan a la banda creada. La cantidad de clientes puede ser numerosa, por lo que se incluyen dos campos de búsqueda en la parte superior, permitiendo encontrar fácilmente una persona por su nombre o cédula. En cada fila de la tabla se presenta un botón que indica la posibilidad de agregar el músico correspondiente a la agrupación creada. 3.3 PLAN DE ITERACIÓN Página 89 Columna derecha: muestra los datos de la banda recién registrada en la parte superior y una tabla que contiene los integrantes de la misma en la parte inferior. En cada fila se visualiza el nombre completo del integrante, su cargo en la banda (por defecto Responsable) y el botón que permite su exclusión de la agrupación. El cargo se presenta en una lista desplegable, permitiendo modificar este dato del músico, el cual se confirma al presionar el botón “Guardar”. Adicionalmente se muestra un mensaje para indicarle al usuario que la banda ha sido actualizada. A continuación se presenta la interfaz descrita anteriormente. (Ver Figura 36). Figura 36. Interfaz para la creación de bandas. 2º vista 3.3 PLAN DE ITERACIÓN Página 90 Codificación La codificación de la iteración actual culmina el desarrollo del módulo Reservación. En primer lugar, se crea el método que se encarga de mostrar la lista de espera según la pauta fija previamente seleccionada. Además, coloca a una banda en espera si recibe el identificador asociado como parámetro. Por otra parte, actualiza la tabla de las agrupaciones que se pueden agregar a la lista de espera, en la que se implementa la paginación y campos de búsqueda como puede apreciarse a continuación. (Ver Figura 37). Figura 37. Código encargado de cargar la lista de espera y asociarle una banda 3.3 PLAN DE ITERACIÓN Página 91 La siguiente codificación hace uso de una técnica de programación que provee el framework Rails llamada “Andamio”, o mejor conocida por su significado en inglés como “Scaffold”, el cual facilita la implementación de las funciones principales (crear, listar, editar y eliminar) para la administración de las bandas. En este caso se modifica uno de los métodos generados por Scaffold, para adaptarlo a los requerimientos de la presente iteración, los cuales requieren asociar una o varias personas a una banda determinada. Adicionalmente, se implementa la paginación y campos de búsqueda para encontrar los clientes rápidamente y agregarlos a la agrupación seleccionada. La codificación puede apreciarse en la siguiente figura. (Ver Figura 38). Figura 38. Código encargado de crear una banda nueva 3.3 PLAN DE ITERACIÓN Página 92 Pruebas En esta fase se llevan a cabo las pruebas para verificar el correcto funcionamiento de la lista de espera y de la creación de bandas nuevas. Inicialmente se selecciona una pauta fija previamente reservada y se colocan diversas bandas en lista de espera, asegurando que al menos un integrante de cada una tenga asociado el cargo Responsable para corroborar posteriormente que se les notifique por mensajes de texto cuando la pauta se haya liberado a través de la opción “Cancelar Pauta Fija”. Finalmente, se realizan pruebas en la creación de bandas nuevas y en la asignación de sus integrantes, así como el cambio de cargo. Las pruebas mencionadas pueden apreciarse en la siguiente tabla. (Ver Tabla 14). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Reservación Crear una lista de espera sobre una pauta fija con diversas bandas. Mostrar la lista de espera con las bandas agregadas. Se mostraron correctamente las bandas de la lista de espera creada. 2 Reservación Cancelar una pauta fija que asociada a una lista de espera. Enviar mensajes de texto a los responsables de las bandas de la lista de espera. Se enviaron correctamente los mensajes de texto a los responsables de las bandas. 3 Administración Crear una banda y asignarle diversos integrantes. Mostrar los datos de la banda y los integrantes asociados. Se mostraron correctamente los datos de la banda, incluyendo los miembros asociados. 4 Administración Cambiar el cargo a los integrantes de una banda. Mostrar los nuevos cargos de los miembros de la banda. Se mostraron correctamente los nuevos cargos de los integrantes de la banda. Tabla 14. Casos de prueba - Iteración 5 3.3 PLAN DE ITERACIÓN Página 93 3.3.7 Iteración 6 La presente iteración se centra en el desarrollo del módulo Facturación, cuyo objetivo principal es llevar el control de pagos de las agrupaciones. Para ello se diseña una interfaz la cual incluye una vista para las reservas pendientes y otra que contiene el historial de las últimas reservaciones pagadas o anuladas. Además, se consideran los abonos que puedan dejar las bandas para ser utilizados como parte de pago en las próximas reservaciones. Planificación Iteración 6 Descripción Módulo Facturación. Creación del estado de cuenta de las bandas, incluyendo deudas pendientes e historial de reservas. Historias de Usuario 38. Diseñar modelo para los abonos de las bandas. 39. Diseñar interfaz para el estado de cuenta. 40. Desarrollar método para obtener la información de los integrantes de la banda. 41. Integrar los paneles plegables JQuery en el estado de cuenta. 42. Desarrollar método para obtener las reservas pendientes 43. Desarrollar método para las reservas pendientes en detalle. 44. Desarrollar método para obtener el historial de reservas 45. Desarrollar método para realizar pagos. 46. Desarrollar validaciones en los pagos. 47. Integrar método para enviar mensajes de texto al realizar pagos. Tiempo Estimado 10 días Fecha Inicio – Fin 07/04/2011 – 16/04/2011 Bitácora de desarrollo La bitácora de desarrollo de la presente iteración muestra las actividades que se realizan en el período planificado, las cuales refieren al estado de cuenta de la banda y al control de 3.3 PLAN DE ITERACIÓN Página 94 los pagos y abonos de las reservas pendientes. Puede apreciarse esta información en la siguiente tabla. (Ver Tabla 16). Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 07/04/2011 08/04/2011 2 2 2 Análisis e implementación N/A 09/04/2011 12/04/2011 6 4 3 Desarrollo de la interfaz N/A 13/04/2011 14/04/2011 1 2 4 Realización de pruebas N/A 15/04/2011 16/04/2011 2 2 Tabla 15. Bitácora de desarrollo - Iteración 6 Diseño La fase de diseño se inicia con la integración de la tabla Abono en el modelo de la base de datos. Se encarga de contener una entrada por cada banda que tenga saldo a favor, ya que el monto abonado se actualiza si el pago es mayor a la deuda pendiente de la agrupación. Las tablas relacionadas con el módulo Facturación pueden apreciarse en la siguiente figura, destacando la tabla agregada en la presente fase. (Ver Figura 39). 3.3 PLAN DE ITERACIÓN Página 95 Figura 39. Tablas relacionadas con el módulo Facturación 3.3 PLAN DE ITERACIÓN Página 96 Posteriormente se diseña la interfaz del estado de cuenta de la banda, la cual consta de dos vistas que pueden ser mostradas u ocultadas por el usuario, a través de la implementación de los paneles plegables de JQuery. En la parte superior se puede observar una tabla con la información básica de la banda, la cual incluye los nombres, cédulas y cargos de sus integrantes, con el fin de conocer los clientes específicos que se están manejando en el momento. Debajo de esta tabla se muestra el primer panel que refiere a las reservas pendientes, el cual presenta una lista con los datos específicos de cada pauta que no se ha pagado hasta el momento. Una información importante de esta vista es el precio total de cada reserva, el cual varía si en ella incluyen instrumentos. Además, en la parte inferior se observa una remarcada tabla que muestra el monto total de las reservas, el abono, y el monto total pendiente, tomando en cuenta el mencionado abono en caso de haberlo. Figura 40. Estado de cuenta de la banda. Reservas pendientes 3.3 PLAN DE ITERACIÓN Página 97 Basado en el diseño de las reservas pendientes, se crea el segundo panel el cual muestra el historial de reservas, es decir, las últimas pautas que hayan sido pagadas o anuladas. El propósito de esta vista es conocer la actividad reciente de la agrupación, ya que indica las pautas que han sido pagadas o anuladas. (Ver Figura 41). Figura 41. Actividad reciente de una banda Las vistas mencionadas anteriormente cuentan con la opción de ver el detalle de cada pauta listada, la cual se muestra a continuación. (Ver Figura 42). Figura 42. Información detallada de una pauta 3.3 PLAN DE ITERACIÓN Página 98 Codificación La fase de codificación se inicia con el desarrollo del método que permite obtener las reservas pendientes de una banda y el monto abonado en el estudio para el pago de futuras pautas. Se realizan dos consultas a la base de datos para guardar la información correspondiente en dos variables que se despliegan en la vista correspondiente. El código puede apreciarse en la siguiente figura. (Ver Figura 43). Figura 43. Consultas que obtienen las reservas pendientes y abonos de una banda Seguidamente se desarrolla el método que obtiene las últimas reservaciones hechas por la banda, las cuales deben estar anuladas o pagadas, ya que tiene como finalidad informar la actividad reciente de la agrupación al administrador. A continuación se muestra el extracto de código que permite realizar la mencionada consulta. (Ver Figura 44). 3.3 PLAN DE ITERACIÓN Página 99 Figura 44. Consulta de la actividad reciente de la banda Continuando la fase de codificación, se crea el método que se invoca desde la ventana Modal de la presente iteración, con la finalidad de obtener la información detallada de las reservas pendientes o históricas, a la cual se tiene acceso desde ambas vistas. Para lograr esto, se escribe una sola consulta con una variable que toma un valor diferente dependiendo de la vista que esté invocando el método. Puede apreciarse la versatilidad del código en la siguiente figura. (Ver Figura 45). 3.3 PLAN DE ITERACIÓN Página 100 Figura 45. Código que obtiene la información detallada de las reservaciones Finalmente se escribe el código encargado de realizar el pago de las reservas seleccionadas en la vista Reservas Pendientes. Se validan los datos ingresados desde la vista, ya que el usuario tiene la opción de escribir el monto a pagar el cual puede ser diferente a la deuda pendiente, lo que genera el abono correspondiente en caso de ser un monto mayor. Se calcula el monto del abono inclusive si la banda cuenta con un saldo a favor en ese momento. (Ver Figura 46). Figura 46. Código encargado de realizar el pago correspondiente a las reservas seleccionadas 3.3 PLAN DE ITERACIÓN Página 101 Pruebas En esta fase se llevan a cabo las pruebas para comprobar la veracidad de la información mostrada en el estado de cuenta de las bandas registradas, así como verificar los cálculos que se realizan al pagar las reservas seleccionadas. Finalmente se hacen pruebas ingresando montos erróneos para comprobar la robustez del método encargado de registrar los pagos. A continuación se observa la tabla con los casos de prueba mencionados. (Ver Tabla 16). Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Facturación Crear reservas en una banda y buscar la información en el panel Reservas Pendientes Mostrar la información correcta según las reservas realizadas en el calendario. Se mostró correctamente la información de las reservas pendientes. 2 Facturación Anular reservas pendientes y buscar la información en el panel Historial de Reservas Mostrar la información correcta de las reservas anuladas. Se mostró correctamente la información de las reservas anuladas. 3 Facturación Consultar el detalle de reservas pendientes, anuladas y pagadas. Mostrar la información detallada de las reservas seleccionadas. Se mostró correctamente el detalle de las reservas seleccionadas. 4 Facturación Realizar pagos de reservas sin abono. Mostrar el estado de cuenta con la información actualizada. Se mostró correctamente las reservas pagadas en el panel Historial de Reservas. 5 Facturación Realizar pagos de reservas con abonos. Mostrar el estado de cuenta con la información actualizada y generar el abono correspondiente. Se mostró correctamente las reservas pagadas en el panel Historial de Reservas y el abono en el panel Reservas Pendientes Tabla 16. Casos de prueba - Iteración 6 3.3 PLAN DE ITERACIÓN Página 102 3.3.8 Iteración 7 La presente iteración conforma la última serie de actividades del desarrollo de la aplicación ConarSoft. Se agrega la funcionalidad de consultar el balance de facturación diaria, otorgando la opción de convertirla en un documento pdf para su posterior impresión e inclusión en la contabilidad de la empresa. Además, se crea la interfaz de usuario de los clientes del estudio, en conjunto con la adaptación para este tipo de usuario, de las funcionalidades mencionadas en iteraciones anteriores, como la consulta del calendario semanal, y del estado de cuenta de la banda a la que pertenezca el cliente autenticado. Planificación Iteración 7 Descripción Consulta del balance diario y creación del módulo Clientes. Historias de Usuario 48. Diseñar vista para el balance de facturación diaria. 49. Desarrollar método que consulte las reservas del día. 50. Desarrollar método que construya el calendario mensual. 51. Desarrollar método que genere el balance de un día seleccionado en un documento pdf. 52. Desarrollar validaciones en la navegación y selección de los días en el calendario mensual. 53. Adaptar la vista del registro de clientes para el registro de usuarios. 54. Desarrollar método que permita el registro de usuarios. 55. Diseñar interfaz de usuario para el ambiente de los clientes. 56. Adaptar la vista del estado de cuenta de una banda para el ambiente cliente. 57. Adaptar la vista del calendario semanal para el ambiente cliente. 58. Adaptar los métodos de consulta del calendario del ambiente cliente. Tiempo Estimado 14 días Fecha Inicio – Fin 17/04/2011 – 30/04/2011 3.3 PLAN DE ITERACIÓN Página 103 Bitácora de desarrollo En la presente iteración se define la última bitácora de desarrollo, que define las actividades que se realizan en un tiempo estimado, las cuales refieren a la consulta del balance de facturación diaria de la empresa, así como la creación de la interfaz de usuario que corresponde a los clientes. En la siguiente tabla se presenta el tiempo planificado y real del desarrollo de estas actividades. (Ver Tabla 17). Nº Tarea Precede Fecha Inicio Fecha Fin Días estimados Días realizados 1 Diseño de interfaz y montaje de plantillas (CSS + HTML) N/A 17/04/2011 18/04/2011 2 2 2 Análisis e implementación N/A 19/04/2011 23/04/2011 5 5 3 Desarrollo de la interfaz N/A 24/04/2011 28/04/2011 5 4 4 Realización de pruebas N/A 29/04/2011 30/04/2011 2 2 Tabla 17. Bitácora de desarrollo - Iteración 7 Diseño Esta fase de la presente iteración tiene el propósito de diseñar las vistas que contiene el balance de facturación diaria, así como la interfaz de usuario correspondiente a los clientes del estudio Rock & Folk. Para el primer caso, se toma en cuenta los anteriores diseños, ya que se divide la vista en dos columnas que se explican a continuación: Columna izquierda: contiene una tabla que lista los renglones de ventas de un día seleccionado, especificando la información detallada de cada, entre las que destacan el monto del ingreso, la banda asociada a la venta, y el estado de la reserva, resaltando en color rojo las que estén pendientes por pagar. Además, se muestran dos opciones en la parte superior para ocultar el detalle de cada reserva y para generar el balance en formato pdf. Columna derecha: muestra un calendario mensual con el fin de asociar la consulta del balance de facturación, con el día escogido en dicho calendario. (Ver Figura 47). 3.3 PLAN DE ITERACIÓN Página 104 Figura 47. Balance de facturación diaria del estudio Rock & Folk Posteriormente se realiza el diseño del mismo balance, pero esta vez dentro del documento pdf, el cual consta de una cabecera con la información y logotipo de la empresa, un título que indica la fecha consultada, y la tabla con el detalle de todas las reservas del día, incluyendo el monto total de las ventas. La razón de la creación del documento en formato pdf, se debe a la necesidad que presenta el estudio Rock & Folk de contar con un soporte físico de sus ventas, el cual es entregado mensualmente a su asesor contable. Además de las características mencionadas anteriormente, se incluye en el pie de página del balance, la información de la fecha en que fue generado, ya que es un requisito de la contabilidad del estudio. Dicho documento puede apreciarse en la siguiente figura (Ver Figura 48). 3.3 PLAN DE ITERACIÓN Página 105 Figura 48. Balance de facturación diaria. Formato PDF Continuando con la fase de diseño de la presente iteración, se crea la vista del registro de usuarios del estudio, basado en el registro de clientes del módulo Administración, ya que se requieren datos similares, a excepción del tipo de cargo del empleado, el cual puede ser Administrador u Operador de Sala. Además, se exige el nombre de usuario y contraseña, ya que se tiene acceso a ConarSoft a través de estos datos. Puede observarse esta adaptación del formulario en la siguiente figura. (Ver Figura 49). 3.3 PLAN DE ITERACIÓN Página 106 Figura 49. Formulario de registro de usuarios del estudio Rock & Folk Por otra parte, se realiza el diseño del módulo Cliente. En este caso particular se siguen los lineamientos de la interfaz del sitio web del estudio, ya que a través de éste se otorga el acceso a dicho módulo. Cabe mencionar que no requiere cambios drásticos debido a la alta presencia del color gris, obligando a realizar un diseño basado en ello. Puede apreciarse a continuación, las vistas de las dos funcionalidades permitidas al cliente: consulta del calendario y del estado de cuenta de sus agrupaciones. (Ver Figuras 50 y 51). Figura 50. Consulta del calendario semanal. Módulo Cliente 3.3 PLAN DE ITERACIÓN Página 107 Figura 51. Consulta del estado de cuenta de una banda. Módulo Cliente Codificación La fase de codificación de la iteración actual se inicia con el desarrollo del método que permite construir el calendario semanal en la vista de los clientes. Para ello se invoca la función creada en una iteración anterior, la cual permite crear el calendario en la vista administrador, y adicionalmente se realiza la consulta de las bandas que están asociadas al usuario autenticado, siempre y cuando sea responsable de ellas. (Ver Figura 52). Figura 52. Función que permite la creación del calendario semanal del módulo Cliente 3.3 PLAN DE ITERACIÓN Página 108 Posteriormente se realiza la codificación del método que permite la consulta del estado de cuenta de la banda seleccionada por el cliente. Cabe mencionar que al igual que la función descrita anteriormente, se invocan métodos de iteraciones anteriores, pero en este caso encargados de obtener las reservas pendientes e históricas respectivamente. Adicionalmente se realizan validaciones para garantizar que sólo puedan consultarse los estados de cuenta de las agrupaciones asociadas al cliente autenticado, siempre y cuando tenga el cargo Responsable. (Ver Figura 53). Figura 53. Extracto de código que obtiene el estado de cuenta de una banda en el módulo Cliente Posteriormente se lleva a cabo el desarrollo de la función que genera el balance de facturación de Rock & Folk en un documento pdf, el cual se crea a través de una librería conocida como “FPDF”. Para ello, se realiza la consulta de la información del estudio ya que forma parte de la cabecera del balance, luego se instancia un objeto FPDF y finalmente, se utiliza el mismo para generar la tabla que contiene las reservas de salas e instrumentos del día seleccionado en el calendario. Cabe destacar que se cuenta con una función adicional que permite darle estilo a la tabla de las reservas, la cual se denomina “FancyTable”. Viene incluida en la librería FPDF y se necesitan dos parámetros para darle uso, los cuales son dos arreglos que conforman la cabecera y el cuerpo de la tabla respectivamente. Puede observarse la implementación descrita en la siguiente figura (Ver Figura 54). 3.3 PLAN DE ITERACIÓN Página 109 Figura 54. Código que genera el documento pdf del balance de facturación diaria Pruebas En esta fase se llevan a cabo las pruebas para comprobar la veracidad de la información mostrada en el balance de facturación de un día seleccionado. De la misma forma se verifica el documento pdf, realizando una comparación con la información de la vista asociada. Posteriormente se realizan pruebas del módulo Cliente, en las que destacan las validaciones de acceso, ya que al ser manejado por usuarios externos, existe el riesgo de intrusiones malintencionadas, provocando errores en la aplicación y otorgando acceso de información a usuarios no deseados. A continuación se observa la tabla con los casos de prueba mencionados. (Ver Tabla 18). 3.3 PLAN DE ITERACIÓN Página 110 Nº Caso Prueba Módulo Caso de Prueba Resultado Esperado Resultado Obtenido 1 Facturación Consultar el balance de facturación de un día seleccionado. Mostrar la tabla con las reservas de salas e instrumentos. Se mostraron correctamente las reservas de salas e instrumentos del día seleccionado. 2 Facturación Seleccionar el botón para imprimir el reporte del balance de facturación del día seleccionado. Generar el documento pdf y descargarlo en el computador local con la información del día seleccionado. Se descargó el documento pdf en el computador local con la información correcta. 3 Facturación Seleccionar el botón para imprimir el reporte del balance en un día que no contenga reservas. Evitar la generación del documento pdf y mantenerse en la página del balance de facturación. Se mantuvo al usuario en la página del balance de facturación y se evitó la creación del documento pdf 4 Admisión Acceder al módulo Clientes ingresando nombre de usuario y contraseña. Otorgar acceso al cliente a la página principal del módulo Cliente. Se le concedió acceso al usuario a la página principal del módulo Cliente. 5 Cliente Consultar el calendario semanal de las reservas del estudio. Mostrar el calendario semanal, ocultando el nombre de las bandas que no estén asociadas al usuario autenticado como Responsable de ellas. Se mostró el calendario incluyendo los nombres de las bandas asociadas al usuario autenticado, ocultando los nombres de las agrupaciones restantes. 6 Cliente Acceder al estado de la cuenta de la banda seleccionada. Mostrar las reservas pendientes e históricas de la banda seleccionada, así como la deuda pendiente y abonos en caso de haberlo. Se mostró correctamente el estado de cuenta de la banda seleccionada, incluyendo la deuda pendiente y abonos. 7 Cliente Consultar el estado de cuenta de una banda escribiendo un id no válido en el URL del navegador. Redirigir al usuario a la lista de sus bandas asociadas, evitando mostrar la información de otra agrupación que no le pertenezca. Se redirigió al usuario a la lista de sus bandas asociadas, donde tiene el cargo de Responsable. Tabla 18. Casos de prueba - Iteración 7 3.3 PLAN DE ITERACIÓN Página 111 Conclusiones El objetivo principal del presente Trabajo Especial de Grado fue alcanzado exitosamente a través de la optimización de los procesos administrativos de reservación del estudio de grabación y ensayo Rock & Folk. En este sentido, se redujo la carga de trabajo de los administradores, al contar con la rapidez y simplicidad que ofrece ConarSoft en cuanto a las actividades del estudio, como el manejo de facturación y el control de las reservaciones de las salas e instrumentos, siendo éste el más importante. Por otra parte, los clientes cuentan ahora con una aplicación a la que pueden acceder desde cualquier lugar que disponga de conexión a Internet, para consultar la disponibilidad de los horarios de las salas, permitiéndoles un considerable ahorro de tiempo en los procesos de reservación vía telefónica. Además, les permite verificar las cuentas que mantienen con el estudio, así como la confirmación de las reservas que hayan solicitado. Adicionalmente, la aplicación cuenta con la funcionalidad de contactar a las bandas que se encuentren en listas de espera, a través de mensajes de texto automatizados, lo que produce un aumento en la población de agrupaciones interesadas en solicitar los servicios del estudio. Gracias a estas bondades, Rock & Folk ha ganado una mayor confiabilidad por parte de sus clientes. La aplicación fue desarrollada utilizando tecnologías actuales entre las que destaca el lenguaje de programación Ruby junto con su framework Rails, lo que significó un reto personal en vista de las diferencias que presenta con otros lenguajes aprendidos anteriormente. Además, durante el proceso de desarrollo se llevó a cabo una significativa actualización de Rails que constituye actualmente la versión 3.0, motivando de esta forma, un ajuste en la codificación de la aplicación y un aprendizaje de las novedades que ofrece. Otro aspecto importante a mencionar, es la adaptación que se llevó a cabo de la Programación Extrema como método ágil de desarrollo, el cual facilitó el trabajo de forma organizada, agrupando los requerimientos en un conjunto de iteraciones que se fueron desarrollando progresivamente. Además, la constante comunicación con el cliente permitió realizar frecuentes revisiones de los avances de la aplicación. 3.3 PLAN DE ITERACIÓN Página 112 Uno de los principios de la Programación Extrema sugiere la codificación en parejas, lo cual no pudo llevarse a cabo ya que el desarrollo de ConarSoft estuvo a cargo de una sola persona. Sin embargo, se obtuvo una aplicación acoplada a las necesidades del usuario, que en este caso refiere a los administradores y clientes del estudio de grabación Rock & Folk, además de adquirir el conocimiento y experiencia de un exitoso método de desarrollo para futuros proyectos. Finalmente, gracias a la elaboración de este Trabajo Especial de Grado se logró un aporte significativo a la industria musical, ya que hasta el momento no se contaba con un sistema que facilitara los procesos de reservación en los estudios de ensayo y grabación, pudiendo ser ConarSoft, la primera aplicación de una serie de subsiguientes adaptaciones que sean incluidas en el resto de los estudios existentes en Venezuela, y posiblemente también en el extranjero. 3.3 PLAN DE ITERACIÓN Página 113 Recomendaciones A pesar de las bondades que ahora pueden disfrutar los clientes y administradores del estudio Rock & Folk a través del uso de ConarSoft, se pueden considerar algunas mejoras y nuevas funcionalidades que permitan el constante crecimiento de la aplicación, como las siguientes:  Adaptar la interfaz del ambiente de los clientes para los accesos a la aplicación desde dispositivos móviles, ya que le brindaría una rápida opción a las agrupaciones al realizar las consultas de los horarios disponibles desde cualquier lugar con cobertura telefónica.  Integrar funcionalidades al módulo de facturación como el manejo de las formas de pago, reembolsos al cliente y anulación de facturas, así como agregar un módulo de cobranza que permita el control de las cuentas por pagar y por cobrar del estudio, así como los gastos de oficina y de nómina.  Brindar nuevas opciones para consultar el calendario, como proveer una vista mensual según un turno de día indicado, ya sea el matutino, vespertino o nocturno. Esto complementaría la consulta personalizada con la que cuenta actualmente ConarSoft, con la diferencia de mostrar los resultados de la búsqueda en una representación gráfica como lo es el calendario.  Permitir los pagos de las reservaciones a través del uso de tarjetas de crédito y otros servicios como PayPal. Esto le otorgaría a los clientes, la opción de realizar las reservas más rápidamente, sin necesidad de una llamada telefónica o de asistir personalmente al estudio, como es el caso actualmente.  Incluir una inteligencia de negocios le otorgaría al presidente del estudio, la oportunidad de realizar análisis de sus ventas, y reforzar las debilidades que pueda tener. En este sentido, podría consultar las salas u horarios menos solicitados de un período específico, o también las agrupaciones, salas u horarios que le brindan mayores ingresos, a fin de tomar acciones en los casos que así lo requieran. 3.3 PLAN DE ITERACIÓN Página 114 Referencias Bibliográficas Aranda, E., & Gómez, D. (2009). Programación Extrema. Recuperado el 19 de Marzo de 2010, de http://kmels.net/files/2009/uvg/cc2003/Resources/Contenidos/XP/xp.pdf Arias, F. G. (2006). El Proyecto de Investigación. Caracas: Episteme. Beck, K. (2005). Extreme Programming Explained: Embrace Change, Addison-Wesley. Estados Unidos. Dubois, P. (2008). MySQL, Addison-Wesley Professional. Estados Unidos. Github Inc. (28 de Abril de 2010). Mongrel. Recuperado el 14 de Mayo de 2010, de Github Social Coding: http://mongrel.Rubyforge.org/ González, Z. (2007). Medición y Visualización de Métricas de Software para Frameworks Web. Caso de Estudio: Ruby on Rails y Frameworks en Java. Facultad de Ciencias. Universidad Central de Venezuela. Caracas. Gunderloy, M., & Naik, P. (Febrero de 2010). RailsGuides. Recuperado el 18 de Abril de 2010, de http://guides.Rubyonrails.org/ Katz, Y. (10 de Enero de 2010). ActiveModel: Make Any Ruby Object Feel Like ActiveRecord. Recuperado el 14 de Febrero de 2011, de http://yehudakatz.com/2010/01/10/activemodel-make-any-Ruby-object-feel-like- activerecord/ López, J. M. (2008). Tecnologías del Sonido. Recuperado el 08 de Abril de 2010, de Servidor Oretano: http://oretano.iele- ab.uclm.es/~jmlova/Archivos/IIA/Archivos/IIA_Sonido.pdf Morantes, G. (2010). Estudio de los procesos de reservación de las Salas de Ensayo y Estudios de Grabación para el Desarrollo de un Sistema en línea en Apoyo a la Calidad de Servicios. Caracas. Oracle Corporation. (2010). Why MySQL? Recuperado el 28 de Marzo de 2010, de http://www.mysql.com/why-mysql/ Thomas, D., & Heinemeier Hansson, D. (2006). Agile Web Development with Rails Pragmatic Bookshelf. Estados Unidos. Zambrano, S., & León, J. C. (Febrero de 2010). Programación Extrema - Informe. Recuperado el 26 de Marzo de 2010, de http://www.scribd.com/doc/26495149/Programacion-extrema-Informe