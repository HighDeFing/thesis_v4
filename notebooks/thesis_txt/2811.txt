Microsoft Word - Tesis version final2.doc CARACAS, OCTUBRE 2008 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN OPCIÓN PROFESIONAL: APLICACIONES CON LA TECNOLOGÍA INTERNET ACTUALIZACIÓN TECNOLÓGICA PARA EL INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE. CASO DE ESTUDIO SISTEMA DE INVENTARIO DE PLACAS Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela Por los bachilleres: Gómez, Laura C.I.: 12.544.293 Calvo, Carlos C.I.: 17.285.319 Tutor Académico: Prof. Nora Montaño AGRADECIMIENTOS A nuestros padres, por el apoyo brindado, por la formación, por fomentar nuestros deseos de superación y del saber, además de enseñarnos que la perseverancia y el esfuerzo son el mejor medio para lograr nuestros objetivos. A nuestra tutora, Nora Montaño, por su asesoramiento y estímulo para seguir adelante, por su predisposición permanente en aclarar nuestras dudas y por todas sus sugerencias y observaciones críticas durante la redacción de este trabajo especial de grado. Al personal del Instituto de Tránsito y Transporte Terrestre, por darnos la bienvenida en su entorno de trabajo, por asesorarnos con nuestras dudas y darnos toda la información necesaria para el desarrollo del sistema, por abrirnos un espacio en el departamento de informática equipándonos con 2 computadoras con los programas necesarios para el desarrollo de la tesis. A Virginia Gómez, por aceptar nuestra propuesta de trabajo especial de grado en el INTTT, por el apoyo incondicional y por brindarnos un ambiente cómodo de trabajo. A Anacora Castro, por el apoyo prestado en el INTTT al momento de desarrollar, probar, liberar y poner en producción el sistema. A Iván Flores, por ayudarnos con la migración del sistema hacia una arquitectura orientada a servicios, por los consejos y las observaciones durante el desarrollo del sistema. RESUMEN El INTTT pretende incorporar la nueva forma de identificación de vehículos a mediados del 2008 (códigos de placas de 7 dígitos) para suplantar el viejo sistema (códigos de placas de 6 dígitos), se ha sugerido la descentralización del sistema actual de almacenamiento de identificaciones ya que el INTTT cuenta con 69 oficinas distribuidas a lo largo del país, por lo tanto, el nuevo sistema de identificación de vehículos pudiera masificarse en todo el país de manera rápida y efectiva. Se propone el desarrollo de una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor con una propuesta de migración hacia una arquitectura orientada a servicios, que sea accesible y fácil de usar, de manera tal, que pueda implantarse en cada una de las oficinas del INTTT y que permita agilizar la masificación de la nueva forma de identificación vehicular. TABLA DE CONTENIDO INTRODUCCIÓN ....................................................................................................................... 8 CAPÍTULO 1: CONTEXTO DEL TRABAJO .............................................................................. 11 1.1 DESCRIPCIÓN ORGANIZACIONAL .................................................................................... 11 1.1.1 INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE (INTTT) .................... 11 1.1.2 HORIZONTES DE VÍAS Y SEÑALES C.A. (HVS) ........................................................... 12 1.2 VEHÍCULOS .................................................................................................................. 13 1.2.1 CLASIFICACIÓN SEGÚN LA TOPOLOGÍA DE LOS VEHÍCULOS ........................................... 13 1.3 PLACAS O MATRICULAS VEHICULARES ........................................................................... 16 1.3.1 CLASIFICACIÓN DE LAS PLACAS ................................................................................ 16 1.4 DESCRIPCIÓN DE LA SITUACIÓN ACTUAL ........................................................................ 22 1.4.1 MODULO DE MANTENIMIENTO .................................................................................. 23 1.4.2 MÓDULO DE OPERACIONES ..................................................................................... 24 1.4.3 MÓDULO DE REPORTES .......................................................................................... 27 1.5 PLANTEAMIENTO DEL PROBLEMA .................................................................................. 30 1.5.1 LIMITACIONES Y ALCANCES DEL SISTEMA ACTUAL .................................................... 30 1.5.2 BASE DE DATOS ..................................................................................................... 32 1.5.3 REQUERIMIENTOS DEL SISTEMA .............................................................................. 33 CAPÍTULO 2: MARCO METODOLÓGICO ............................................................................... 34 2.1 MÉTODO PARA LA ELICITACIÓN DE REQUISITOS DE SISTEMAS DE SOFTWARE .................... 34 2.2 MÉTODO DE DESARROLLO ÁGIL .............................................................................. 39 2.2.1 AGILE MODEL DRIVEN DEVELOPMENT (AMDD) ....................................................... 40 2.2.2 PRINCIPIOS BÁSICOS .............................................................................................. 42 2.3 ARQUITECTURA ORIENTADA A SERVICIOS ...................................................................... 43 2.3.1 DEFINICIÓN ............................................................................................................ 43 2.3.2 BENEFICIOS ........................................................................................................... 44 2.3.3 PRINCIPIOS ............................................................................................................ 44 2.3.4 DISEÑO Y DESARROLLO .......................................................................................... 46 2.3.5 PROTOCOLOS DE SERVICIOS WEB .......................................................................... 46 2.4 PATRÓN DE DISEÑO MVC (MODELO VISTA CONTROLADOR) ............................................ 47 2.4.1 BENEFICIOS ............................................................................................................ 48 2.5 PROCESO DE PRUEBA .................................................................................................... 49 2.5.1 TIPOS DE PRUEBAS ............................................................................................................ 49 2.5.2 NIVEL DE PRUEBAS .......................................................................................................... 50 2.6 MÉTODO DE DESARROLLO PROPUESTO ............................................................................ 51 CAPÍTULO 3: MARCO DE DESARROLLO ............................................................................... 54 3.1 METODOLOGÍA DE DESARROLLO (ITERACIÓN 0) .............................................................. 54 3.1.1 ITERACIÓN 1 ...................................................................................................................... 56 TABLA DE CONTENIDO 3.1.2 ITERACIÓN 2 ...................................................................................................................... 62 3.1.3 ITERACIÓN 3 ...................................................................................................................... 66 3.1.4 ITERACIÓN 4 ...................................................................................................................... 70 3.1.5 ITERACIÓN 5 ...................................................................................................................... 73 3.1.6 ITERACIÓN 6 ...................................................................................................................... 76 3.1.7 ITERACIÓN 7 ...................................................................................................................... 81 3.1.8 ITERACIÓN 8 ...................................................................................................................... 84 3.1.9 ITERACIÓN 9 ...................................................................................................................... 88 3.1.10LIBERACIÓN DEL SISTEMA DE INVENTARIO DE PLACAS .................................................... 91 3.1.11PRODUCCIÓN .......................................................................................................... 91 3.2 ACTUALIZACIÓN DEL SISTEMA ...................................................................................... 92 3.2.1 ITERACIÓN 10 .................................................................................................................... 93 3.2.2 ITERACIÓN 11 .................................................................................................................... 95 3.3 LOGROS ALCANZADOS ............................................................................................... 104 CONCLUSIÓN ................................................................................................................................... 106 RECOMENDACIONES ..................................................................................................................... 107 REFERENCIAS BIBLIOGRÁFICAS ................................................................................................ 108 INDICE DE FIGURAS FIGURA 1: LOGOTIPO INTTT ................................................................................................................ 12 FIGURA 2: LOGOTIPO HVS ................................................................................................................... 13 FIGURA 3: PLACA PARTICULAR - TERCERA GENERACIÓN .................................................................... 18 FIGURA 4: UBICACIÓN FÍSICA ................................................................................................................ 25 FIGURA 5: CARGA DE PLACAS CON LECTOR ......................................................................................... 26 FIGURA 6: DIAGRAMA E/R - SISTEMA ACTUAL ...................................................................................... 32 FIGURA 7: PLANTILLA Y PATRONES-L PARA OBJETIVOS ....................................................................... 35 FIGURA 8: PLANTILLA Y PATRONES-L PARA REQUISITOS DE ALMACENAMIENTO DE INFORMACIÓN .... 36 FIGURA 9: PLANTILLA Y PATRONES-L PARA ACTORES ......................................................................... 36 FIGURA 10: PLANTILLA Y PATRONES-L PARA REQUISITOS FUNCIONALES (CASOS DE USO) ............... 37 FIGURA 11: PLANTILLA Y PATRONES-L PARA REQUISITOS NO FUNCIONALES...................................... 38 FIGURA 12: MATRIZ DE RASTREABILIDAD ............................................................................................. 38 FIGURA 13: TAREAS DE ELICITACIÓN DE REQUISITOS .......................................................................... 39 FIGURA 14: TAREAS DE ELICITACIÓN DE REQUISITOS .......................................................................... 40 FIGURA 15: AMDD - CICLO DE VIDA .................................................................................................... 41 FIGURA 16: AMDD A TRAVÉS DEL CICLO DE VIDA DE DESARROLLO ÁGIL ........................................... 41 FIGURA 17: LOS REQUERIMIENTOS AGILES CAMBIAN LA GESTIÓN DEL PROCESO ............................... 42 FIGURA 18: PATRÓN DE DISEÑO MVC ................................................................................................ 47 FIGURA 19: MAPA DEL SITIO ................................................................................................................ 55 FIGURA 20: DIAGRAMA E/R .................................................................................................................. 57 FIGURA 21: MODELO DE DATOS ........................................................................................................... 59 FIGURA 22: ESTRUCTURA DEL SISTEMA .............................................................................................. 60 FIGURA 23: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR USUARIOS.................... 62 FIGURA 24: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR EQUIPOS ...................... 64 FIGURA 25: MAPA DEL SITIO – ITERACIÓN 2 ........................................................................................ 64 FIGURA 26: INTERFAZ – AGREGAR USUARIO ....................................................................................... 65 FIGURA 27: DIAGRAMAS DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR STOCKS ..................... 66 FIGURA 28: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR ESPACIOS FÍSICOS ...... 68 FIGURA 29: MAPA DEL SITIO – ITERACIÓN 3 ........................................................................................ 68 FIGURA 30: INTERFAZ – CONSULTAR ESPACIO FÍSICO ....................................................................... 69 FIGURA 31: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – CARGA DE PLACAS ........................................................................................................................................ 70 FIGURA 32: MAPA DEL SITIO – ITERACIÓN 4 ........................................................................................ 72 FIGURA 33: INTERFAZ – CARGA DE PLACAS ........................................................................................ 72 FIGURA 34: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 1.... 74 FIGURA 35: MAPA DEL SITIO – ITERACIÓN 5 ........................................................................................ 75 FIGURA 36: INTERFAZ – LISTA PRELIMINAR ......................................................................................... 76 FIGURA 37: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – LIBERAR PLACAS ........................................................................................................................................ 77 FIGURA 38: MAPA DEL SITIO – ITERACIÓN 6 ........................................................................................ 78 FIGURA 39: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 1 ............................ 79 FIGURA 40: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 2 ............................ 79 FIGURA 41: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 2.... 81 ÍNDICE DE FIGURAS FIGURA 42: MAPA DEL SITIO – ITERACIÓN 7 ........................................................................................ 83 FIGURA 43: INTERFAZ – DEVOLUCIÓN DE PLACAS .............................................................................. 83 FIGURA 44: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 185 FIGURA 45: MAPA DEL SITIO – ITERACIÓN 8 ........................................................................................ 86 FIGURA 46: INTERFAZ – REPORTE DE PLACAS POR UBICACIÓN FÍSICA ............................................. 87 FIGURA 47: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 288 FIGURA 48: MAPA DEL SITIO – ITERACIÓN 9 ........................................................................................ 90 FIGURA 49: INTERFAZ – REPORTE DE EXISTENCIA DETALLADA DE PLACAS ...................................... 90 FIGURA 50: INTERFAZ – SERVICIO PARA CONSULTAR UNA PLACA AL DETALLE ................................... 95 FIGURA 51: INTERFAZ – SERVICIO PARA REALIZAR UN PEDIDO DE PLACAS ........................................ 97 FIGURA 52: DOCUMENTO WSDL ....................................................................................................... 104 INDICE DE TABLAS TABLA 1: GENERACIONES DE PLACAS SEGÚN FECHA .......................................................................... 16 TABLA 2: RESUMEN DE PLACAS DE TERCERA GENERACIÓN ................................................................ 21 TABLA 3: RELACIÓN CARÁCTER / ESTADO USADO EN LAS PLACAS ...................................................... 21 TABLA 4: RF – AGREGAR USUARIO ..................................................................................................... 63 TABLA 5: RF – AGREGAR STOCK ......................................................................................................... 67 TABLA 6: RF – CARGAR PLACAS .......................................................................................................... 72 TABLA 7: RF – CONSULTAR PLACAS .................................................................................................... 75 TABLA 8: RF – LIBERAR PRODUCCIÓN................................................................................................. 78 TABLA 9: RF – MODIFICAR UBICACIÓN DE LAS PLACAS ...................................................................... 82 TABLA 10: RF – REPORTE UBICACIÓN FÍSICA DE PLACAS .................................................................. 86 TABLA 11: RF – REPORTE EXISTENCIA GENERAL DE PLACAS ........................................................... 89 TABLA 12: SERVICIO 1 – CONSULTAR OFICINAS ................................................................................. 93 TABLA 13: SERVICIO 2 – CONSULTAR STOCKS ................................................................................... 94 TABLA 14: SERVICIO 3 – CONSULTAR UNA PLACA ............................................................................. 94 TABLA 15: SERVICIO 4 – CONSULTAR REGISTROS DE UNA PLACA ..................................................... 94 TABLA 16: SERVICIO 5 – CONSULTAR PLACAS .................................................................................... 96 TABLA 17: SERVICIO 6 – CONSULTAR PLACAS CARGADAS ................................................................. 96 TABLA 18: SERVICIO 7 – CONSULTAR PLACAS LIBERADAS ................................................................. 96 TABLA 19: SERVICIO 8 – PEDIDO DE PLACAS ...................................................................................... 96 8 INTRODUCCIÓN En las últimas décadas, el acelerado incremento del volumen de vehículos automotores en el país, ha ocasionado que se estudien nuevas formas de identificación vehicular. Los avances tecnológicos y de información han proporcionado una forma eficiente de identificación, la cual pretende albergar alrededor de 350.000.000 de identificaciones posibles, solventando así, la situación generada por el incremento de vehículos en el país. El Instituto Nacional de Tránsito y Transporte Terrestre (INTTT) es el ente gubernamental encargado de llevar un registro de las distintas acciones que se realizan sobre los vehículos a lo largo y ancho de país. Entre otros mecanismos para llevar el control, utiliza la identificación de los vehículos. Actualmente el INTTT almacena los identificadores en un único almacén, ubicado en la sede principal, antes de asignarlo a los vehículos, por lo cual, se requiere de varios días para trasladar las identificaciones de los vehículos de la sede principal, ubicada en Caracas (El Marqués), a las zonas del país donde se requieran identificadores. Debido a que el INTTT pretende incorporar la nueva forma de identificación de vehículos a mediados del 2008 para suplantar el viejo sistema, se ha sugerido la descentralización del sistema actual de almacenamiento de identificaciones ya que el INTTT cuenta con 69 oficinas distribuidas a lo largo del país, por lo tanto, el nuevo sistema de identificación de vehículos pudiera masificarse en todo el país de manera rápida y efectiva. En la actualidad, el sistema que maneja el proceso de almacenamiento de identificaciones es una aplicación stand-alone. Esta aplicación no fue diseñada para manejar la nueva forma de identificación vehicular, por lo que se plantea la creación de una nueva aplicación que le permita al personal del departamento de placas realizar sus tareas de manera automatizada, basándonos para ello en las carencias y las fortalezas del sistema actual, así como también, en las experiencias y los nuevos requerimientos del personal del departamento de placas. Para el levantamiento de información se realizaron visitas a las oficinas de registro de vehículos, lo cual permitió conocer como se realiza la asignación de identificaciones a los vehículos y posteriormente se pudo observar el proceso de almacenamiento de identificaciones en el almacén; gracias a esto y a la colaboración del personal, se identificaron las funcionalidades más importantes que deberán ser consideradas a la hora de desarrollar una nueva aplicación. Tomando en cuenta la importancia de cada una de las funcionalidades identificadas se propone el desarrollo de una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor INTRODUCCIÓN 9 con una propuesta de migración hacia una arquitectura orientada a servicios, que sea accesible y fácil de usar, de manera tal, que pueda implantarse en cada una de las oficinas del INTTT y que permita agilizar la masificación de la nueva forma de identificación vehicular, además de promover la actualización tecnológica de otros sistemas de la institución. Los beneficios que aportará la actualización tecnológica propuesta al INTTT son los siguientes: Automatización de los procesos identificados, Descentralización del sistema de almacenamiento de identificaciones vehiculares, Ahorro de tiempo a la hora de asignar una identificación a un vehículo, Alto rendimiento en el dominio manejado, Manejo de reportes. Promover la actualización tecnológica de los sistemas del INTTT. Para el desarrollo de este trabajo, fue necesario revisar algunos aspectos que conforman la base teórica y práctica para comprender el dominio del problema. Este documento se organizó de la siguiente manera: El primer capítulo, describe el contexto del trabajo, detallando información sobre las organizaciones relacionadas con la producción y asignación de identificaciones vehiculares en el país, así como también, se describe la situación actual y el planteamiento del problema. Además, en este capítulo se definen los identificadores vehiculares, su ciclo de vida, clasificación y descripción de las características principales, así como también, la importancia de las oficinas, operativos y ensambladoras, desde el punto de vista del INTTT. El segundo capítulo, describe la metodología para la elicitación de requisitos de sistemas de software, utilizada para el levantamiento de la información, sus principales fundamentos y la descripción de los modelos que son utilizados en el desarrollo de la aplicación, además de describir el método de desarrollo ágil sobre una arquitectura cliente-servidor y el desarrollo de un patrón de diseño MVC, utilizando PHP como lenguaje de programación, Sybase y MySQL como servidores de bases de datos y Apache como servidor de aplicaciones Web, de manera tal, que se pueda migrar fácilmente hacia una arquitectura orientada a servicios bajo SOAP. Además, se describen las estrategias, planeación, construcción y ejecución de las pruebas que se sustentarán en el desarrollo de la aplicación. INTRODUCCIÓN 10 Por último, en el tercer capítulo, se muestra el marco de desarrollo del sistema abarcado por el trabajo especial de grado, explicando las funcionalidades implementadas para cada iteración de desarrollo del sistema por medio de diagramas de casos de uso, interfaces y fases de prueba, para satisfacer los requerimientos del mismo. Además, se propone la migración del sistema utilizando una arquitectura orientada a servicios. 11 CAPÍTULO 1: CONTEXTO DEL TRABAJO En este capítulo se describen las organizaciones relacionadas con el proceso de creación y asignación de identificadores vehiculares, la situación actual del proceso de almacenamiento de placas en el INTTT para así identificar en el planteamiento del problema, los requerimientos, objetivos, alcances y limitaciones en el desarrollo de este trabajo. 1.1 DESCRIPCIÓN ORGANIZACIONAL En esta sección se presentara información sobre las organizaciones involucradas en el proceso de almacenamiento de identificadores vehiculares tales como el INTTT y Horizontes de Vías y Señales C.A. 1.1.1 INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE (INTTT) Según el Artículo 15 del Capítulo II, Título II, del Decreto Ley Numero 37.332 del 26 de noviembre del 2001, el INTTT es una entidad con personalidad jurídica y patrimonio propio e independiente de la República, con autonomía financiera, administrativa, técnica y organizativa, adscrita al Ministerio de Infraestructura (MINFRA), que habría de sustituir al Servicio Autónomo de Transporte y Tránsito Terrestre (SETRA), lo que permitiría contar con unas autoridades administrativas técnicamente calificadas, con autonomía suficiente para ejercer sus competencias, sin menoscabo de la vinculación con el órgano de planificación y elaboración de políticas públicas en materia de tránsito y transporte terrestre, representado por el Ejecutivo Nacional. [1] Las competencias del INTTT tienen un respaldo jurídico que va desde la propia Constitución de la República Bolivariana de Venezuela hasta la Ley Orgánica de Licitaciones y su Reglamento, pasando por la el Decreto con Fuerza de Ley de Tránsito y Transporte Terrestre que creó el Instituto, el Decreto sobre Organización y Funcionamiento de la Administración Pública, la Ley de Simplificación de Trámites Administrativos, la Ley Orgánica de Régimen Presupuestario y su Reglamento y la Ley Orgánica de la Contraloría General de la República del Sistema Nacional de Control Fiscal. CAPÍTULO 1: CONTEXTO DEL TRABAJO 12 1.1.1.1 LOGOTIPO FIGURA 1: LOGOTIPO INTTT 1.1.1.2 MISIÓN Regular, controlar y ejecutar políticas en materia de tránsito y transporte terrestre, a fin de garantizar la comodidad, calidad, eficiencia y seguridad para los usuarios, bajo los principios de honestidad, transparencia, celeridad, eficacia, rendición de cuentas y responsabilidad en la ejecución de sus funciones. 1.1.1.3 VISIÓN Ser una institución administrativa y técnicamente calificada, de vanguardia en materia de tránsito y transporte terrestre, orientada por los principios de calidad, eficiencia y eficacia, con honestidad y mística, generando confianza y satisfacción en el usuario. 1.1.1.4 OBJETIVO GENERAL Según el Artículo 16 del Capítulo II, Título II, del Decreto Ley Numero 37.332 del 26 de noviembre del 2001, el INTTT tiene como objetivo la regulación del tránsito y del transporte terrestre, a los fines de garantizar el derecho al libre tránsito de personas y de bienes por todo el territorio nacional; la realización de la actividad económica del transporte y de sus servicios conexos, por vías públicas y privadas, así como lo relacionado con la planificación, ejecución, gestión, control y infraestructura vial, todo lo cual conforma el sistema integral y coordinado de transporte terrestre nacional. 1.1.2 HORIZONTES DE VÍAS Y SEÑALES C.A. (HVS) HVS es una empresa de Ingeniería de Transito dedicada a la asesoría, fabricación, trasporte e instalación de elementos de señalización vial, vertical y horizontal, así como de señalización de seguridad industrial y publicidad comercial siendo de este modo la empresa líder de ingeniería de transito del país. [2] CAPÍTULO 1: CONTEXTO DEL TRABAJO 13 Inicio sus operaciones en Caracas, Distrito Federal en el año 1985, para posteriormente, establecerse en la ciudad de Barquisimeto, Estado Lara, donde cuenta con sus plantas de producción y oficinas administrativas. Su mercado abarca los sectores públicos, privados y petroleros entre los que se puede mencionar, Gobernaciones, Alcaldías, Institutos de Vialidad, Fundaciones, Concesionarias Viales, Constructoras y cualquier otra industria u organismo vinculado a la ingeniería de transito. En la actualidad, posee varias sucursales en varias zonas del país, y a nivel internacional cuenta con oficinas en República Dominicana y Costa Rica donde se ejecuta obras de señalización y demarcación. HVS, conjuntamente con el INTTT son los entes encargados de diseñar la 3º generación de placas. Actualmente, HVS es la empresa que se encarga de la fabricación y entrega de las placas al INTTT, así como también, a las empresas que tengan convenios operativos con el INTTT. 1.1.2.1 LOGOTIPO FIGURA 2: LOGOTIPO HVS 1.2 VEHÍCULOS Según el Artículo 5 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, se considera vehículo todo artefacto o aparato destinado al transporte de personas o cosas, capaz de circular por las vías públicas o privadas destinadas al uso público permanente o casual. [4] 1.2.1 CLASIFICACIÓN SEGÚN LA TOPOLOGÍA DE LOS VEHÍCULOS Según el Artículo 27 del Capítulo II, Título III, del Decreto Ley Número 37.332 del 26 de noviembre del 2001, los vehículos de tránsito y transporte terrestre se clasifican en: 1. Tracción a sangre. 2. A motor. [3] CAPÍTULO 1: CONTEXTO DEL TRABAJO 14 1.2.1.1 VEHÍCULOS DE TRACCIÓN DE SANGRE Según el Artículo 6 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, se entiende por vehículos de tracción de sangre aquellos cuya fuerza de propulsión proviene del ser humano o de bestias de tiro. Según el Artículo 9 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, los vehículos de tracción de sangre se clasifican en vehículos de tracción humana y vehículos de tracción animal. Los vehículos de tracción humana, a su vez, se clasifican en: Vehículos cuyo conductor es transportado por el vehículo, tales como bicicletas, triciclos, patinetas o patines, Vehículos cuyo conductor no es transportado por el vehículo, como los carros de mano y las carretillas. 1.2.1.2 VEHÍCULOS DE MOTOR Según el Artículo 6 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, se entiende por vehículos de motor los dotados de medios de propulsión mecánicos, propios o independientes. Según el Artículo 10 y 11 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los vehículos de motor se clasifican en: 1. Motocicletas: todo vehículo de motor de tipo bicicleta o triciclo. 2. Automóviles: todos aquellos vehículos destinados al transporte de personas y cuya capacidad no es mayor de nueve (9) puestos. Según el Artículo 13 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los automóviles se clasifican de la siguiente manera: 2.1 Automóviles de pasajeros sin fines de lucro: aquellos destinados al uso privado de su dueño, entendiéndose también por estos, todo vehículo conducido por la persona que lo alquila, quien lo destina a su uso privado. 2.2 Automóviles de pasajeros con fines de lucro: aquellos destinados al transporte de pasajeros mediante el pago de una cantidad de dinero por el servicio prestado. CAPÍTULO 1: CONTEXTO DEL TRABAJO 15 3. Minibuses: Los vehículos destinados al transporte de personas con capacidad de quince (15) a treinta y dos (32) pasajeros sentados más conductor, doble rueda trasera y con una altura interior que permita la circulación de los pasajeros dentro del vehículo en forma erguida. 4. Autobuses: Los vehículos destinados al transporte de pasajeros con capacidad mayor de treinta y dos puestos (32). Según el Artículo 16 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los autobuses se clasifican de la siguiente manera: 2.3 Autobuses de uso público: se entiende por autobuses de uso público aquellos destinados al servicio público de pasajeros. 2.4 Autobuses de uso privado: todos aquellos autobuses que no sean de uso público. 5. Vehículos de carga. 6. Vehículos especiales: Todo vehículo autorizado para circular en condiciones particulares. Según el Artículo 17 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los vehículos especiales se clasifican de la siguiente manera: 2.5 Vehículos de enseñanza: Aquellos destinados a dar lecciones para el manejo de vehículos. 2.6 Vehículos de Emergencia: Aquellos vehículos destinados a prestar servicios de urgencia. 2.7 Vehículos Escolares: Aquellos vehículos destinados al transporte de estudiantes. 2.8 Vehículos Diplomáticos: Aquellos destinados a prestar servicios a los representantes diplomáticos, consulares o representantes de organismos internacionales acreditados ante el Gobierno. 7. Otros aparatos aptos para circular. Según el Artículo 19 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, se entiende por aparato apto para circular todo tractor, pala mecánica, máquina de tracción, equipo para construcción de carretera, máquinas para perforación de pozos, aparatos montacargas, camiones eléctricos con ruedas de tamaño pequeño usados en fábricas, almacenes y estaciones de ferrocarril y, en fin, todo artefacto que sin ser considerado vehículo, CAPÍTULO 1: CONTEXTO DEL TRABAJO 16 necesite ocasionalmente trasladarse por las vías públicas o por las privadas de uso público, sin ser transportado por otro vehículo. 1.3 PLACAS O MATRICULAS VEHICULARES La placa o matrícula de un vehículo es una permutación de caracteres que identifica e individualiza el vehículo respecto a los demás. La placa se representa mediante un rectángulo metálico (que se conoce como placa del vehículo) en la que se graban o adhieren de forma inalterable los caracteres, que pueden ser letras, números o una combinación de ambos. 1.3.1 CLASIFICACIÓN DE LAS PLACAS Desde 1975 hasta nuestros días, los vehículos de la República Bolivariana de Venezuela han transitado con tres (3) distintos tipos de formatos de placas. A continuación se muestra una tabla que resume las generaciones de placas desde 1975. Generación Fecha 1º Generación 1975 - 1994 2º Generación 1994 - 2008 3º Generación 2008 - Actual TABLA 1: GENERACIONES DE PLACAS SEGÚN FECHA 1.3.1.1 GENERACIÓN Nº 1 Estas placas o matriculas fueron emitidas desde 1975 hasta 1994 por el Ministerio de Transporte y Comunicaciones (MTC), ahora el actual Ministerio de Infraestructura (MINFRA). Estuvieron en uso durante algo más de 20 años, y fueron derogados definitivamente con la Resolución 096 de agosto de 1997. A lo largo del documento nos referiremos a este tipo de placas como placas de formato número uno (formato 1). Este formato de placas, cuenta con el detalle común de que todas llevan el nombre de "VENEZUELA" en la parte superior, justo debajo del marco, el cual era otro elemento característico, del mismo color de las letras. La primera letra indicaba el estado al que pertenecía la placa. Además, estas eran secuenciales, es decir, el serial aumentaba acorde con los dígitos alfanuméricos de derecha a izquierda. CAPÍTULO 1: CONTEXTO DEL TRABAJO 17 1.3.1.2 GENERACIÓN Nº 2 Estas placas o matriculas fueron emitidas desde 1995 hasta 2007 por el MTC/MINFRA ratificadas según la resolución 096 del 25/08/1997, Gaceta Oficial 36279 del 28/08/1997 la define como deben ser las placas para los vehículos en circulación, así como también obliga la actualización de las placas con formato 1. Esta generación de placas se enfoca en la regionalización de seriales, los cuales facilitan la ubicación de cada placa en un determinado estado, esto se trata de una letra (usualmente la primera) asociada al estado (el cual también viene grabado en la placa). La tipografía de las placas luce basada en Arial Narrow, un poco más extendida para el serial, en el cual, la primera letra indica el estado al cual pertenece la placa, a menos que se indique lo contrario. Las placas fueron emitidas secuencialmente. Otro detalle que se introdujo con esta generación fue el mapa de Venezuela como fondo de la placa, en color gris, sobre el cual se encuentra el serial y el resto de la información. El marco de color ha sido eliminado en esta generación, y ahora la placa es plana, excepto en los bordes y las letras en altorrelieve. 1.3.1.3 GENERACIÓN Nº 3 Estas placas o matriculas son emitidas desde enero del 2008 con la idea de sustituir a las placas con formato 2 debido al agotamiento de placas y a la gran demanda que ha crecido en los últimos años. Estas placas son multicolores, dependiendo del tipo de placa. Para todas las placas es común ver el tricolor de la bandera de fondo, exceptuando las placas temporales. En la parte superior llevan la inscripción de República Bolivariana de Venezuela, en el centro el serial de la placa y debajo de esta el estado al cual pertenece la placa. Todas las placas bajo este formato son secuenciales. Además, el formato de las placas tiene una letra al final del serial la cual indica el estado al que pertenece la placa, a excepción de puerto libre que es indicado por la letra “O”. A continuación se describen los distintos formatos para los veintisiete (27) tipos de placas actuales: 1 Tracción Sangre: el serial se compone de un formato que consta de una (1) letra, un (1) número, dos (2) letras, un (1) número y una (1) letra. (Ej.: A6BL8L). 2 Motocicleta: el serial se compone de un formato que consta de dos (2) letras, un (1) número, una (1) letra, dos (2) números y una (1) letra. Estas placas son de un tamaño inferior a los demás tipos placas (Ej.: ZR1J85E). CAPÍTULO 1: CONTEXTO DEL TRABAJO 18 3 Particular: usada en carros particulares y camionetas. El serial se compone de un formato que consta de tres (3) letras, dos (2) números y tres (3) letras. (Ej.: CH540BA). FIGURA 3: PLACA PARTICULAR - TERCERA GENERACIÓN 4 Carga: el serial se compone de un formato que consta de una (1) letra, dos (2) números, dos (2) letras, un (1) número y una (1) letra. (Ej.: F34PT7M). 5 Grúa: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, dos (2) números y una (1) letra. (Ej.: H27D16D). 6 Minusválido: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, una (1) número y una (1) letra. (Ej.: T35B2B). 7 Transporte Escolar Minibús: el serial se compone de un formato que consta de una (1) letra, tres (3) números, una (1) letra, un (1) número y una (1) letra. (Ej.: R763E5G). 8 Transporte Escolar Autobús: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, dos (2) números y dos (2) letras. (Ej.: P8B14HW). 9 Trasporte Privado: el serial se compone de un formato que consta de una (1) letra, cuatro (4) números y dos (2) letras. (Ej.: F4398AK). 10 Transporte Turístico Rústico: el serial se compone de un formato que consta de una (1) letra, un (1) número, dos (2) letras, dos (2) números y una (1) letra. (Ej.: B6XN32S). 11 Transporte Turístico Minibús: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, un (1) número y dos (2) letras. (Ej.: A69C2NC). 12 Transporte Turístico Autobús: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, un (1) número, una (1) letra, un (1) número y una (1) letra. (Ej.: Z5K9N7I). CAPÍTULO 1: CONTEXTO DEL TRABAJO 19 13 Transporte Público Servicio Urbano Minibús y Autobús: el serial se compone de un formato que consta de el número cero (0), un (1) número, dos (2) letras, un (1) número y dos (2) letras. (Ej.: 03CL8JP). 14 Transporte Público Servicio Sub Urbano Automóvil: el serial se compone de un formato que consta de el número uno (1), un (1) número, una (1) letra, un (1) número, una (1) letra, un (1) número y una (1) letra. (Ej.: 13E5R4T). 15 Transporte Público Servicio Sub Urbano Minibús: el serial se compone de un formato que consta de el número dos (2), un (1) número, una (1) letra, dos (2) números y dos (2) letras. (Ej.: 27B83AU). 16 Transporte Público Servicio Sub Urbano Autobús: el serial se compone de un formato que consta de el número tres (3), un (1) número, dos (2) letras, dos (2) números y una (1) letra. (Ej.: 36FG15Y). 17 Transporte Público Servicio Interurbano Automóvil: el serial se compone de un formato que consta de el número cuatro (4), dos (2) números, una (1) letra, un (1) número y dos (2) letras. (Ej.: 423T5GH). 18 Transporte Público Servicio Interurbano Minibús: el serial se compone de un formato que consta de el número cinco (5), dos (2) números, dos (2) letras, un (1) número y una (1) letra. (Ej.: 517IM2F). 19 Transporte Público Servicio Interurbano Autobús: el serial se compone de un formato que consta de el número seis (6), tres (3) números, una (1) letra, un (1) número y una (1) letra. (Ej.: 6542N3X). 20 Transporte Público Servicio de Taxi: el serial se compone de un formato que consta de el número siete (7), una (1) letra, un (1) número, una (1) letra, un (1) número y dos (2) letras. (Ej.: 7S1T6DO). 21 Transporte Público Servicio en Zona Periférica Rústico: el serial se compone de un formato que consta de el número ocho (8), una (1) letra, un (1) número, una (1) letra, dos (2) números y una (1) letra. (Ej.: 8U2V44V). 22 Transporte Público Servicio en Zona Periférica Minibús: el serial se compone de un formato que consta de el número nueve (9), una (1) letra, tres (3) números y dos (2) letras. (Ej.: 9F137HR). 23 Temporal: el serial se compone de un formato que consta de seis (6) números y una (1) letra. (Ej.: 128765J). 24 Puerto Libre Motocicleta: el serial se compone de un formato que consta de dos (2) letras, cuatro (4) números y la letra O. (Ej.: VG2319O). CAPÍTULO 1: CONTEXTO DEL TRABAJO 20 25 Puerto Libre Particular: el serial se compone de un formato que consta de dos (2) letras, dos (2) números, una (1) letra, un (1) número y la letra O. (Ej.: RH35J8O). 26 Puerto Libre Carga: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, tres (3) números y la letra O. (Ej.: G2P054O). 27 Puerto Libre Transporte Público: el serial se encuentra subrayado. El serial se compone de un formato que consta de un (1) número, dos (2) letras, tres (3) números y la letra O. (Ej.: 1EX304O). A continuación se presentan los veinte y siete (27) tipos de placas identificados con su respectivo formato de números y letras. Tipo de Placa Formato Tracción de Sangre LNLLNL Motocicletas LLNLNNL Particulares LLNNNLL Carga LNNLLNL Grúas LNNLNNL Minusválidos LNNLNL Transporte Escolar Minibús LNNNLNL Transporte Escolar Autobuses LNLNNLL Transporte Privado LNNNNLL Transporte Turístico Rústicos LNLLNNL Transporte Turístico Minibús LNNLNLL Transporte Turístico Autobuses LNLNLNL Transporte Público Servicio Urbano Minibús y Autobús 0NLLNLL Transporte Público Servicio Sub Urbano Automóvil 1NLNLNL Transporte Público Servicio Sub Urbano Minibús 2NLNNLL Transporte Público Servicio Sub Urbano Autobús 3NLLNNL Transporte Público Servicio Interurbano Automóvil 4NNLNLL Transporte Público Servicio Interurbano Minibús 5NNLLNL Transporte Público Servicio Interurbano Autobús 6NNNLNL Transporte Público Servicio de Taxi 7LNLNLL Transporte Público Servicio en Zona Periférica Rústicos 8LNLNNL Transporte Público Servicio en Zona Periférica Minibús 9LNNNLL Temporales NNNNNNL CAPÍTULO 1: CONTEXTO DEL TRABAJO 21 Puerto Libre Motocicleta LLNNNNO Puerto Libre Particular LLNNLNO Puerto Libre Carga LNLNNNO Puerto Libre Transporte Público NLLNNNO TABLA 2: RESUMEN DE PLACAS DE TERCERA GENERACIÓN En la mayoría de las placas emitidas en los últimos 20 años, se puede identificar el estado en donde fue emitida, el cual viene determinado por una (1) letra (usualmente la primera). A continuación se muestra la tabla de equivalencia de letras por estado: Identificador Estado A DISTRITO CAPITAL B ANZOATEGUI C APURE D ARAGUA E BARINAS F BOLIVAR G CARABOBO H COJEDES I FALCON J GUARICO K LARA L MERIDA M MIRANDA N MONAGAS O NUEVA ESPARTA P PORTUGUESA R SUCRE S TACHIRA T TRUJILLO U YARACUY V ZULIA X AMAZONAS Y DELTA AMACURO W VARGAS TABLA 3: RELACIÓN CARÁCTER / ESTADO USADO EN LAS PLACAS CAPÍTULO 1: CONTEXTO DEL TRABAJO 22 La letra Q nunca ha sido usada en ningún tipo de placa a fin de evitar confusiones con la letra O, sin embargo, es fácil confundir el cero (0) con la letra O, especialmente en el formato 2. Las letras W, X y Y fueron introducidas como identificadores de estado en 1997 cuando se creó el Estado Vargas y cuando Amazonas y Delta Amacuro fueron ascendidos de Territorio Federal a Estados. Anteriormente, la letra W no se usaba como identificador, y las letras X e Y eran utilizadas como identificadores “genéricos”. 1.4 DESCRIPCIÓN DE LA SITUACIÓN ACTUAL En la República Bolivariana de Venezuela, el antiguo formato de placas (formato 1 y 2) constaba de seis (6) dígitos, lo que limitaba el número de identificadores que se podían asignar a los vehículos del país. Para ello, el INTTT desarrollo un nuevo formato de placas (formato 3) que consta de siete (7) dígitos, abarcando así, una producción de aproximadamente trescientos cincuenta millones (350.000.000) de placas. Aproximadamente en 1995, se desarrollo un sistema para la administración de inventario del formato 1 de las placas. Posteriormente, se desarrollaron actualizaciones sobre dicho sistema a fin de migrar hacia el formato 2. Actualmente, con la implementación del formato 3 de placas, este sistema ha quedado obsoleto, forzando de esta forma al personal del Departamento de Inventario a recurrir a tablas en documentos de Microsoft Excel para registrar las placas que entran y salen del INTTT. Cabe destacar que el sistema actual se mantuvo en funcionamiento hasta diciembre del 2007, fecha hasta la cual se despacharon placas con formato 2. Para inicios del año 2008, se comenzó a utilizar el formato 3, sin embargo, no se tomo en cuenta la migración del sistema para este tipo de formato. Este sistema no posee ninguna documentación sobre las funcionalidades que presta, así como también, la base de datos que maneja, por lo tanto, el levantamiento de la información fue un tanto engorroso. Para el levantamiento de la información sobre el funcionamiento del sistema actual, se realizaron pruebas unitarias con el personal del Departamento de Inventario a fin de comprender cuales son las funcionalidades que el sistema presta y las que se necesiten contemplar en el nuevo sistema. Las funcionalidades que presenta este sistema están clasificadas en tres (3) módulos principales. Los módulos identificados son los siguientes: Modulo de Mantenimiento (Administrativo), CAPÍTULO 1: CONTEXTO DEL TRABAJO 23 Modulo de Operaciones, Modulo de Reportes. 1.4.1 MODULO DE MANTENIMIENTO Este modulo contempla las funcionalidades relacionadas con la administración de datos relacionados con el departamento de Inventario de la sede principal del INTTT. A continuación, se listan las funcionalidades que se encuentran enmarcadas en este modulo: Administración de usuarios, Administración de equipos, Administración de stock, Administración de espacio físico, Administración de ensambladoras. 1.4.1.1 ADMINISTRACIÓN DE USUARIOS Esta funcionalidad le permite al personal agregar, modificar, eliminar usuarios en el sistema para que estos puedan acceder a todas las demás funcionalidades. Además, en todo momento, se puede consultar todos los usuarios registrados en el sistema. De los usuarios se desea registrar el nombre completo (usuario), nombre de usuario (login), contraseña (password), permisología de administrador y/o solicitud donde “administrador” se encarga de otorgar permisología a las funcionalidades del modulo de mantenimiento y “solicitud” se encarga de otorgar permisología a las funcionalidades de los módulos de operaciones y reportes. 1.4.1.2 ADMINISTRACIÓN DE EQUIPOS Esta funcionalidad le permite al personal agregar, modificar, eliminar equipos a un determinado usuario para el uso del sistema. Además, en todo momento, se puede consultar todos los equipos asociados a los usuarios registrados en el sistema. Para asignar un equipo, es necesario registrar el nombre de usuario (usuario) y el nombre del equipo (nombre). CAPÍTULO 1: CONTEXTO DEL TRABAJO 24 1.4.1.3 ADMINISTRACIÓN DE STOCK Esta funcionalidad le permite al personal agregar, modificar, eliminar los niveles máximos y mínimos de las placas en el inventario. Además, en todo momento, se puede consultar todos los stocks que posee el departamento de inventario. Para asignar un stock, es necesario seleccionar el estado, el tipo de placa, y luego indicar los valores máximos y mínimos de placas que se requieran en el almacén para suplir las necesidades. 1.4.1.4 ADMINISTRACIÓN DE ESPACIO FÍSICO Esta funcionalidad le permite al personal agregar, modificar, eliminar bóvedas, anaqueles, columnas y bandejas, en las cuales, se almacenarán las placas. Además, en todo momento, se puede consultar la estructura lógica de almacenamiento que posee el departamento de inventario. Para asignar un nuevo espacio físico, es necesario agregar una bóveda con un nombre y una nomenclatura única, luego se le agregan anaqueles a dicha bóveda, de los cuales se requiere: nombre, nomenclatura y descripción. Cada anaquel está conformado por un número finito de columnas, donde, estas columnas a su vez están conformadas por una serie de bandejas. Tanto de las columnas, como de las bandejas, se debe registrar el nombre y la nomenclatura. Para el caso de las bandejas se debe indicar la capacidad de placas que puede almacenar. 1.4.1.5 ADMINISTRACIÓN DE ENSAMBLADORAS Esta funcionalidad le permite al personal agregar, modificar, eliminar ensambladoras solicitantes de placas. De las ensambladoras se desea registrar el nombre y su identificador. Además, en todo momento, se pueden consultar los datos de ensambladoras asociadas al INTTT. 1.4.2 MÓDULO DE OPERACIONES Este modulo contempla las operaciones a realizar en el sistema actual del departamento de inventario del INTTT. Dichas operaciones se separan por funcionalidades, entre las cuales podemos mencionar: Ubicación física, Cargar placas con el lector, Consulta de placas, Devoluciones por convenio, CAPÍTULO 1: CONTEXTO DEL TRABAJO 25 Salida de producción diaria, Salida por convenio u operativo, Placas reversadas en producción. Estas funcionalidades le permiten al personal del departamento de inventario registrar la entrada y salida de las placas, así como también, realizar la consulta de datos relacionados, desde una placa específica, hasta un lote completo de las placas cargadas en el sistema. Además, permite conocer las placas que fueron reversadas en producción y la ubicación física de las mismas en el almacén del INTTT. 1.4.2.1 UBICACIÓN FÍSICA Esta funcionalidad le permite al personal conocer la ubicación física (bóveda, anaquel, columna y bandeja) tanto de una placa determinada, como de un lote completo de placas registradas en el sistema, para de esta forma facilitar el proceso de búsqueda y salida de placas del departamento de inventario. Por medio de esta funcionalidad el personal puede modificar los estados de una placa (recibida, etiqueta, salida y ubicación física). FIGURA 4: UBICACIÓN FÍSICA CAPÍTULO 1: CONTEXTO DEL TRABAJO 26 1.4.2.2 CARGAR PLACAS CON EL LECTOR Esta funcionalidad permite al personal realizar la carga de placas en el sistema por medio de un lector o pistola óptica que identifica el código de barra, el cual, puede pertenecer a una determinada placa o puede pertenecer a la caja contenedora de un lote de placas. Para el último caso, las placas deben pertenecer a un mismo tipo de vehículo y estado. Luego de obtener el código de la placa, el usuario debe seleccionar la localidad en la que desea almacenar las placas, además de la oficina en la que se encuentra, la cual, es el INTTT por defecto. FIGURA 5: CARGA DE PLACAS CON LECTOR 1.4.2.3 CONSULTA DE PLACAS Esta funcionalidad permite al personal realizar la consulta de la localidad y los estados (recibida, etiqueta, salida y ubicación física) de las placas que se encuentran registradas en el sistema, y que por ende, se encuentran asignadas a una determinada ubicación física en el departamento de inventario. 1.4.2.4 DEVOLUCIONES POR CONVENIO Esta funcionalidad permite al personal realizar las devoluciones de las placas otorgadas a empresas que tienen un convenio con el INTTT. Para esto el usuario del sistema debe ingresar el código de la placa, o ingresar el código de la caja contenedora de placas que se devolverán por convenio. CAPÍTULO 1: CONTEXTO DEL TRABAJO 27 1.4.2.5 SALIDA DE PRODUCCIÓN DIARIA Esta funcionalidad permite al personal registrar la salida de placas por producción diaria en el departamento de inventario del INTTT. Para dar salida de placas por producción diaria es necesario ingresar la fecha correspondiente a dicha producción además de seleccionar la oficina a la cual se desea realizar la entrega de placas. Luego se muestra una pantalla con las placas a entregar para la fecha y para la oficina seleccionada, al lado de cada placa mostrada se encuentra la opción para darle salida a dicha placa, por último el usuario tiene opción para imprimir la solicitud de salida. Si el usuario selecciona “imprimir solicitud” el sistema solicitara información sobre el nombre de usuario, permitiendo además el ingreso de una nota final que describa el motivo de salida de placas del departamento de inventario. 1.4.2.6 SALIDA POR CONVENIO/OPERATIVO Esta funcionalidad permite al personal registrar la salida de placas por convenio (ensambladora, importadora), o la salida de placas por medio de un operativo nacional. En este caso el sistema permite registrar una placa por vez o un lote de placas, esto puede realizarse ingresando cada placa manualmente o mediante la lectura del código de barra. Luego es necesario ingresar la oficina o la ensambladora a la cual se destinarán las placas, e igual que en el caso anterior, el sistema solicita el nombre de usuario y una nota alusiva al motivo de salida. 1.4.2.7 PLACAS REVERSADAS EN PRODUCCIÓN Esta funcionalidad permite al personal registrar como disponibles aquellas placas que han sido reversadas en producción, para que puedan ser asignadas nuevamente. Para que esto pueda ocurrir, el sistema solicita al usuario la selección de la oficina sobre la que desee verificar los reversos realizados y seguidamente se mostrará la pantalla con la información de cada una de las placas. Las placas aparecen resaltadas en color rojo si han sido reversadas, en este caso, el personal debe verificar que se encuentren físicamente en el depósito de inventario para así realizar la devolución. Por último el usuario selecciona el botón devolución para registrar las placas como disponibles en el inventario y en producción. 1.4.3 MÓDULO DE REPORTES Este modulo contempla los posibles reportes generados a partir de las operaciones realizadas en el sistema actual del departamento de inventario. Los posibles reportes a generar son los siguientes: Ubicación física, CAPÍTULO 1: CONTEXTO DEL TRABAJO 28 Movimiento al detalle del ingreso de placas, Movimiento de salidas de placas del inventario, Movimiento al detalle de salida de placas, Existencia general de placas, Existencia general de placas por estado, Existencia de placas por estado, Existencia de placas por tipo, Información específica de una placa, Existencia detallada de placas disponibles en un estado, Existencia de placas por su ubicación, Existencia detallada de placas disponibles por su ubicación, Existencia de placas por corridas, Operaciones del sistema (Auditoria), Operaciones del sistema (Auditoria Usuarios), Inventario general departamento de placas, Documentos de salida de placas, Existencia de placas por localidad, estados y tipos de placas. Estos diferentes reportes los podemos agrupar por funcionalidad de la siguiente manera: Ubicación física, Movimiento de placas, Existencia de placas, Información específica de una placa, Operaciones del sistema. 1.4.3.1 UBICACIÓN FÍSICA Esta funcionalidad permite al personal generar un reporte sobre la ubicación física y el código de las placas existentes o no existentes en el almacén. Para generar dicho reporte es necesario ingresar en el sistema la localidad en la que se encuentran las placas, el estado al que pertenece la placa y el tipo de placa. Luego el usuario debe CAPÍTULO 1: CONTEXTO DEL TRABAJO 29 seleccionar si desea generar un reporte con las placas existentes o si desea generar un reporte con las placas no existentes en dicha localidad que cumplan con los parámetros mencionados anteriormente. 1.4.3.2 MOVIMIENTO DE PLACAS Esta funcionalidad permite al personal generar reportes sobre el ingreso y la salida de placas en un determinado espacio de tiempo, seleccionando, o no, el tipo de placa sobre la que se desee generar el reporte. Para generar estos reportes es necesario ingresar en el sistema la fecha inicial y final del ingreso o salida de placas y si el usuario lo desea puede seleccionar el tipo de placa específico sobre el que se regirá el reporte. El reporte resultante muestra los identificadores de las placas ingresadas en el almacén para el intervalo de tiempo seleccionado para el caso en el que el usuario selecciono la generación de un reporte sobre las placas ingresadas en el almacén, en caso contrario, el usuario selecciono la generación de un reporte sobre las placas a las que se le ha dado salida del departamento de inventario. 1.4.3.3 EXISTENCIA DE PLACAS Esta funcionalidad permite al personal generar reportes sobre la existencia de las placas en el almacén, los cuales pueden ser generados de forma general (mencionando los identificadores de placas existentes), detalladamente (indicando la información necesaria sobre cada placa), por estado, por tipo de placa, por ubicación, y por último, por localidad. Para generar dichos reportes es necesario ingresar en el sistema el estado, en caso de que se desee un reporte por estado, o el tipo de placa, en caso de que se desee un reporte por tipo de placa o la ubicación, en caso de que se desee un reporte por ubicación física de placas. Por último el usuario debe ingresar en el sistema la localidad, el estado y el tipo de placa, en caso de que se desee generar un reporte condicionado por dicha información, si es así, el usuario debe seleccionar si desea generar un reporte con las placas existentes en el almacén o con las placas no existentes. 1.4.3.4 INFORMACIÓN ESPECÍFICA DE UNA PLACA Esta funcionalidad permite al personal generar un reporte con el estado, tipo, ubicación, status (registrada, impresión, salida), usuario solicitante y nota detallada sobre la salida de dicha placa. Para generar dicho reporte, es necesario que el usuario ingrese el identificador de la placa sobre la cual se desea consultar a detalle. CAPÍTULO 1: CONTEXTO DEL TRABAJO 30 1.4.3.5 OPERACIONES DEL SISTEMA Esta funcionalidad permite realizar una auditoría al personal del departamento de inventario para así conocer los reportes emitidos por estos en un determinado período de tiempo. La auditoría puede realizarse sobre un usuario en particular o sobre todos los usuarios que emitieron reportes. Para generar un reporte de auditoría es necesario ingresar la fecha de inicio y la fecha final que abarcará dicha auditoría. En el caso de que la auditoría a realizar sea para un usuario en particular se deberá ingresar el nombre de usuario (login). El reporte de auditoría muestra una descripción del reporte generado, el usuario y la hora en la que se genero dicho reporte. Esta información se encuentra separada por fecha. 1.5 PLANTEAMIENTO DEL PROBLEMA En esta sección se presentan los problemas encontrados en el sistema actual que contribuyen al bajo desempeño en los procesos de inventario de placas por parte del INTTT. 1.5.1 LIMITACIONES Y ALCANCES DEL SISTEMA ACTUAL A continuación se listan las limitaciones encontrada en el sistema actual, tanto a nivel de funcionalidades, como ha nivel de repositorio de información e interfaz de usuarios. No fue diseñado para soportar ningún cambio en el formato de placas. El sistema actual no soporta el nuevo formato de placas de siete (7) dígitos, por lo tanto, pese a las actualizaciones hechas, su estructura presenta una serie de carencias que se han dejado de lado por quienes se han encargado de realizar las actualizaciones al sistema. Redundancia de funcionalidades. El sistema contiene varios enlaces a operaciones que funcionan de la misma manera y dan los mismos resultados. Fallas en la comunicación con otros departamentos relacionados. El sistema obtiene información de la base de datos que alimenta el departamento de Gerencia de Registros, en la cual, se encuentran almacenadas las placas que son asignadas diariamente, además de las placas que fueron devueltas y/o reversadas. Además, debido a problemas en el sistema que maneja el departamento de Gerencia de Registro, es posible que la entrada de datos al sistema de inventario sean datos que no son validos, provocando así, errores en el sistema actual. CAPÍTULO 1: CONTEXTO DEL TRABAJO 31 Pobre generación de reportes. El usuario debe ingresar la mayoría de los datos que genera el reporte, exigiendo al personal una cantidad de tiempo y esfuerzo innecesaria. De igual forma, el sistema no genera un reporte completo, debido a la falta de información sobre la oficina regional y los operativos, en el caso de que se hayan asignado placas por medio de un operativo. Pocas opciones al momento de imprimir un determinado reporte. El sistema solo tiene las opciones de imprimir y cancelar. No se valida el caso en el que el usuario desee imprimir una determinada página. Funciona como todo o nada. El sistema no permite la eliminación de: usuarios, equipos, stocks, ensambladoras, oficinas, espacio físico y de placas. En el caso de que un usuario ingrese datos erróneos, este debe dirigirse al Departamento de Informática para que el personal ingrese a la base de datos y elimine los datos erróneos manualmente. Engorroso proceso en los criterios de consulta. El usuario del sistema de inventario al consultar una placa debe ingresar: localidad, estado, tipo de placa, siendo sumamente engorroso debido a que la localidad de las placas es, a menudo, lo que el usuario desea conocer. Asignación de placas sin un orden específico. El sistema permite la asignación de placas que poseen distintos números de serie, llegando a tener cajas semivacías en el almacén debido a que no las asigna el sistema. Manejo de datos no pertenecientes al departamento. El sistema permite que el usuario asigne ensambladoras y oficinas, datos con los que el personal del inventario no está relacionado directamente. Acceso de los usuarios al sistema de forma engorrosa y redundante. El sistema no mantiene un inicio de sesión por usuario para cada una de las funcionalidades que presta. El sistema no cuenta con un buen manejo del caso de devoluciones o reverso de placas. Las placas con estatus devuelto o reverso tienden a quedarse en el almacén debido a que el sistema no permite que vuelvan a ser asignadas nuevamente. El sistema no realiza las validaciones necesarias. El “desde” y “hasta” no funciona correctamente, ya que el usuario debe ingresar primero el código de la placa final y luego el código de placa del inicio de la serie, lo cual no es usable. Así mismo, el sistema presenta fallos con respecto a la validación de algunos tipos de placas. CAPÍTULO 1: CONTEXTO DEL TRABAJO 32 El sistema no maneja las alertas necesarias para avisar al personal si se ha llegado al mínimo o máximo del stock. Rango de placas fijo. Si el usuario ingresa un lote, de por ejemplo, 40 placas, y realmente deseaba agregar 30 placas, el usuario no tiene la opción de devolver los cambios. Debido a que no se puede detener la producción de placas, y que el sistema actual no acepta el nuevo formato de placas, el personal del inventario de placas se ha visto en la necesidad de recurrir a hojas de Microsoft Excel para registrar las placas liberadas por dicho departamento. 1.5.2 BASE DE DATOS La base de datos del sistema actual para el inventario de placas está constituida por una serie de tablas las cuales no se encuentran relacionadas. El modelo de datos de la base de datos del sistema actual es el siguiente: FIGURA 6: DIAGRAMA E/R - SISTEMA ACTUAL CAPÍTULO 1: CONTEXTO DEL TRABAJO 33 1.5.3 REQUERIMIENTOS DEL SISTEMA En base al levantamiento de información realizado en el departamento de inventario del INTTT se identificaron los siguientes requerimientos: Obtener la información necesaria para manejar la carga y la liberación de placas en el almacén, para así analizar y clasificar la información obtenida evitando de esta forma la redundancia de datos. Verificar el estatus de las placas en el sistema para su actualización automática, además de notificar al usuario si se tiene un stock mínimo o máximo en el almacén. Asignar en el sistema la fecha y hora de cada una de las placas registradas, de forma tal que puedan consultarse datos por fecha y hora. Esto beneficia enormemente al personal debido a la necesidad que tienen de generar reportes en donde aparezca la hora de carga y liberación de una placa del sistema. Administrar sesiones para cada tipo de usuario: administrador, coordinador y empleado la cual cerrará solo cuando el usuario desee salir del sistema. Los datos insertados, editados y/o eliminados serán almacenados en un Log de transacciones para su futura auditoria. Permitir que todos los usuarios autorizados puedan cargar placas en el sistema. Solo el usuario coordinador podrá eliminar placas. Realizar las validaciones necesarias para: • Reportes: Generar reportes con información más relevante sobre el proceso de entrada y salida de placas, contemplando: placa y la ubicación para el reporte interno y, placa, tipo de placa, estado y cantidad de placas para el reporte externo. • Estatus de las placas: verificar el estatus de las placas para así permitir que el personal conozca si dichas placas fueron cargadas o no en el sistema. De esta forma se podrá solventar el problema de que no se liberen placas con problemas de estado, o la asignación de una misma placa a más de un vehículo. • Consulta de placas: validar que se ingresen placas desde un rango válido hasta otro rango válido, además, verificar que dichas placas se hayan insertado en la base de datos. • Asignación ordenada de placas: verificar que se asignen las placas en orden, siguiendo el número de serie asignado, evitando de esta forma la asignación aleatoria de placas. 34 CAPÍTULO 2: MARCO METODOLÓGICO En este capítulo, se describe la metodología para la elicitación de requisitos de sistemas de software, utilizada para el levantamiento de la información, sus principales fundamentos y la descripción de los modelos que son utilizados en el desarrollo de la aplicación, además de describir el método de desarrollo ágil sobre una arquitectura cliente-servidor y el desarrollo de un patrón de diseño MVC, utilizando PHP como lenguaje de programación, Sybase y MySQL como servidores de bases de datos y Apache como servidor de aplicaciones Web, de manera tal, que se pueda migrar fácilmente hacia una arquitectura orientada a servicios bajo SOAP. Además, se describen las estrategias, planeación, construcción y ejecución de las pruebas que se sustentarán en el desarrollo de la aplicación. 2.1 MÉTODO PARA LA ELICITACIÓN DE REQUISITOS DE SISTEMAS DE SOFTWARE El objetivo de esta metodología es la definición de las tareas a realizar, los productos a obtener y las técnicas a emplear durante la actividad de elicitación de requisitos de la fase de ingeniería de requisitos del desarrollo de software. [5] En esta metodología se distinguen dos tipos de productos: los productos entregables y los productos no entregables o internos. Los productos entregables son aquellos que se entregan oficialmente al cliente como parte del desarrollo en fechas previamente acordadas, mientras que los no entregables son productos internos al desarrollo que no se entregan al cliente. Esta metodología hace uso de plantillas y patrones lingüísticos que se presentan en los siguientes apartados para utilizarse tanto durante las reuniones de elicitación con clientes y usuarios como para registrar y gestionar los requisitos. Las tareas recomendadas para obtener los productos descritos en esta metodología son las siguientes: 1 Tarea 1: Obtener información sobre el dominio del problema y el sistema actual. Para cumplir con esta tarea se realizo una propuesta que fue discutida y posteriormente aprobada como proyecto dentro del INTTT. 2 Tarea 2: Preparar y realizar las reuniones de elicitación / negociación. Para esta tarea se realizaron varias reuniones con el personal del Departamento de placas ya que estos son quienes usaran el sistema. Además se realizaron reuniones conjuntas con los demás departamentos involucrados en el problema para limitar el alcance del proyecto. CAPÍTULO 2: MARCO METODOLÓGICO 35 3 Tarea 3: Identificar/revisar los objetivos del sistema. En esta tarea se busca identificar los objetivos que se esperan alcanzar mediante el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los objetivos previamente identificados. OBJ–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Descripción El sistema deberá <objetivo a cumplir por el sistema> Subobjetivos OBJ–x <nombre del subobjetivo> Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 7: PLANTILLA Y PATRONES-L PARA OBJETIVOS 4 Tarea 4: Identificar/revisar los requisitos de almacenamiento de información. En esta tarea se busca identificar los requisitos de almacenamiento de información que deberá cumplir el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los requisitos de almacenamiento de información previamente identificados. RI–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá almacenar la información correspondiente a <concepto relevante>. En concreto: Datos específicos <datos específicos sobre el concepto relevante> Intervalo { pasado y presente, sólo presente } CAPÍTULO 2: MARCO METODOLÓGICO 36 temporal Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 8: PLANTILLA Y PATRONES-L PARA REQUISITOS DE ALMACENAMIENTO DE INFORMACIÓN 5 Tarea 5: Identificar/revisar los requisitos funcionales. En esta tarea se busca identificar los actores del sistema del sistema software a desarrollar. Del mismo modo, se deben identificar los requisitos funcionales (casos de uso) que deberá cumplir el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los requisitos funcionales previamente identificados. ACT–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Descripción Este actor representa a <rol que representa el actor> Comentarios <comentarios adicionales sobre el actor> FIGURA 9: PLANTILLA Y PATRONES-L PARA ACTORES RF–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso { durante la realización de los casos de uso <lista de casos de uso>, cuando <evento de activación> } CAPÍTULO 2: MARCO METODOLÓGICO 37 Precondición <precondición del caso de uso> Secuencia Normal Paso Acción p1 {El actor <actor>, El sistema} <acción/es realizada/s por actor/sistema> p2 Se realiza el caso de uso <caso de uso (RF–x)> p3 Si <condición>, {el actor <actor>, el sistema} <acción/es realizada/s por actor/sistema> p4 Si <condición>, se realiza el caso de uso <caso de uso (RF–x)> Postcondición <postcondición del caso de uso> Excepciones Paso Acción pi Si <condición de excepción>, {el actor <actor>, el sistema} <acción/es realizada/s por actor/sistema>, a continuación este caso de uso {continúa, termina} pj Si <condición de excepción>, se realiza el caso de uso <caso de uso (RF–x)>, a continuación este caso de uso {continúa, termina} Rendimiento Paso Acción pz m <unidad de tiempo> Frecuencia esperada <no de veces> veces / <unidad de tiempo> Importancia <importancia del requisito> Urgencia <urgencia del requisito> Estado <estado del requisito> Estabilidad <estabilidad del requisito> Comentarios <comentarios adicionales sobre el requisito> FIGURA 10: PLANTILLA Y PATRONES-L PARA REQUISITOS FUNCIONALES (CASOS DE USO) 6 Tarea 6: Identificar/revisar los requisitos no funcionales. En esta tarea se busca identificar los requisitos no funcionales, normalmente de carácter técnico o legal. RNF–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la CAPÍTULO 2: MARCO METODOLÓGICO 38 fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá <capacidad del sistema> Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 11: PLANTILLA Y PATRONES-L PARA REQUISITOS NO FUNCIONALES 7 Tarea 7: Priorizar objetivos y requisitos. Para cumplir con esta tarea se debe tomar en cuenta la prioridad de cada uno de los requerimientos funcionales identificados en la tarea 5. Cabe destacar que en el documento anexo de levantamiento de requisitos para el sistema de software, tanto los objetivos como los requisitos funcionales fueron situados en orden de prioridad según las entrevistas sostenidas en la tarea 2. Para ello, se hace uso de una matriz de rastreabilidad. Req / Obj OBJ-01 OBJ-02 OBJ-03 OBJ-04 OBJ-05 RF-01 * RF-02 * RF-03 * RF-04 * * RF-05 * * FIGURA 12: MATRIZ DE RASTREABILIDAD El orden recomendado de realización para estas tareas es del uno (1) al siete (7), aunque las tareas cuatro (4), cinco (5), y seis (6) pueden realizarse simultáneamente o en cualquier orden que se considere oportuno. A continuación se muestra un diagrama de flujo con las tareas a seguir en la metodología de elicitación de requisitos para sistemas de software. CAPÍTULO 2: MARCO METODOLÓGICO 39 FIGURA 13: TAREAS DE ELICITACIÓN DE REQUISITOS 2.2 MÉTODO DE DESARROLLO ÁGIL La Modelación Ágil o Agile Modeling (AM) es una metodología a basada en la práctica para el modelado y la documentación eficaz de sistemas de software. AM Es una colección de valores, principios, y prácticas para modelar el software que puede ser aplicada sobre un proyecto de desarrollo de software de una manera eficaz y ligera. Este método puede ser adaptado en otras metodologías de desarrollo, tales como XP, permitiendo desarrollar un proceso de software que cumpla con las necesidades del programador. Las técnicas de AM, en particular, el Modelo Ágil de Desarrollo de Unidad (Agile Model Driven Development (AMDD)), el ciclo de vida para el cual está representado en la siguiente figura, le permite escalar el desarrollo de software ágil a situaciones mucho más complejas.[6] AM realza otros procesos de software, como se puede apreciar en la siguiente figura: CAPÍTULO 2: MARCO METODOLÓGICO 40 FIGURA 14: TAREAS DE ELICITACIÓN DE REQUISITOS 2.2.1 AGILE MODEL DRIVEN DEVELOPMENT (AMDD) Como el nombre lo implica, AMDD es la versión ágil del desarrollo de la unidad de modelado o en inglés Model Driven Development (MDD). MDD es una aproximación al desarrollo de Software donde se crean modelos de gran alcance antes de que el código fuente sea escrito. La diferencia con AMDD es que en vez de crear amplios modelos antes de escribir el código se pueden crear modelos ágiles para manejar los esfuerzos globales de desarrollo. [16] En la siguiente figura veremos un ciclo de vida de alto nivel para la liberación del sistema. Cada caja del diagrama representa una actividad de desarrollo. La imaginación (envisioning) incluye dos sub actividades principales, la imaginación de requerimientos iniciales y la imaginación de la arquitectura inicial. Estas están listas durante la iteración 0, la cual es un término común para la primera iteración antes de comenzar las iteraciones de desarrollo. Las otras actividades (modelado de iteración, lluvia de modelos, reseñas e implementación) ocurren durante cualquier iteración, incluyendo la iteración 0. El tiempo indicado en cada caja representa el tamaño de una sesión promedio. [17] CAPÍTULO 2: MARCO METODOLÓGICO 41 FIGURA 15: AMDD - CICLO DE VIDA La siguiente figura representa como encajan las actividades de AMDD en las iteraciones del ciclo de vida de desarrollo ágil. Es simplemente otra manera de mostrar que un proyecto ágil comienza con algún modelaje inicial y que dicho modelaje sigue ocurriendo en cada una de las iteraciones. FIGURA 16: AMDD A TRAVÉS DEL CICLO DE VIDA DE DESARROLLO ÁGIL CAPÍTULO 2: MARCO METODOLÓGICO 42 Al comienzo de cada una de las construcciones de la iteración, el equipo de desarrollo debe planificar el trabajo que ellos realizaran en esa iteración. Los equipos ágiles implementan requerimientos por orden de prioridad, como se ve en la figura 17. Para hacerlo de forma exitosa se debe tener un estimado del trabajo necesario para cada uno de los requerimientos basándose en la rapidez de las iteraciones previas. FIGURA 17: LOS REQUERIMIENTOS AGILES CAMBIAN LA GESTIÓN DEL PROCESO 2.2.2 PRINCIPIOS BÁSICOS Modelar con un propósito: Muchos desarrolladores se preocupan sobre si sus artefactos (modelos, código fuente, documentos) están lo suficientemente detallados o si están demasiado detallados o de forma similar si están lo suficientemente precisos. Lo que no hacen es retroceder y preguntar porque están creando el artefacto en primer lugar y para quien lo están creando. El primer paso es identificar un propósito valido para la creación de un modelo e identificar la audiencia para dicho modelo, entonces, basado en ambos, desarrollarlo lo suficientemente exacto y detallado. Viajar ligero: Mientras más complejo y detallado sean los modelos, entonces cualquier cambio será más difícil de lograr. CAPÍTULO 2: MARCO METODOLÓGICO 43 Modelos múltiples: Se necesitan modelos múltiples para desarrollar software debido a que cada modelo describe un simple aspecto del software. El programador no necesita desarrollar todos los modelos para un sistema dado. Rápida retroalimentación: El tiempo entre una acción y la retroalimentación en dicha acción es crítico. Se debe trabajar de cerca con el cliente para así entender los requerimientos y luego analizarlos, o para desarrollar una interfaz de usuario que cumple con sus necesidades. Asumir la simplicidad: Mientras se desarrolla se debe asumir que la solución más simple es la mejor solución. No se debe sobrecargar el software, o en el caso de AM, no representar características adicionales que no se necesitarán en la actualidad en los modelos. Aceptar el cambio: Los requisitos evolucionan con el tiempo. Los proyectos pueden cambiar sus puntos de vista, sus metas y sus criterios. Cambio Incremental: No se necesita capturar cada simple detalle en los modelos al comienzo. En vez de eso se necesita desarrollar un modelo pequeño, o tal vez un modelo de alto nivel y evolucionarlo con el tiempo de forma incremental. Calidad de trabajo: El trabajo desarrollado debe ser fácil de entender y actualizar. Trabajar en el software es la meta principal: el objetivo del desarrollo de software es producir un software de alta calidad que cumpla con las necesidades del proyecto de forma efectiva. Permitir el próximo resultado es la meta secundaria: Se debe asegurar que el sistema sea lo suficientemente robusto como para permitir que sea ampliado con el paso del tiempo. 2.3 ARQUITECTURA ORIENTADA A SERVICIOS En esta sección se presenta la definición, beneficios y principios de la arquitectura orientada a servicios, además de los pasos que hay que seguir para diseñar y desarrollar dicha arquitectura. 2.3.1 DEFINICIÓN Es un concepto de Arquitectura de Software que define la utilización de servicios para dar soporte a los requerimientos de software del usuario proporcionando una CAPÍTULO 2: MARCO METODOLÓGICO 44 metodología y un marco de trabajo que documenta las capacidades de negocio y puede dar soporte a las actividades de integración y consolidación.[7] Las aplicaciones basadas en SOA utilizan ya tecnología XML y de servicios web para la mensajería, el acceso, las transacciones y otras actividades. Estándares como SOAP, Web Services Description Language (WSDL) y Business Process Execution Language (BPEL) estandarizan así la compartición de información, el modelo de integración de procesos y la cooperación entre aplicaciones. SOA representa la última tendencia como arquitectura de diseño de aplicaciones. Se basa en un modelo para construir componentes lo más básico posibles, con ellos construir otros y al final diseñar aplicaciones basadas en el concepto de reutilización. Aunque constituye un concepto clásico, la diferencia ahora estriba en la madurez de la tecnología y su adopción como estándares. La flexibilidad es tal que las compañías pueden conectar sus aplicaciones cuando realmente lo requieren, evitando la necesidad de mantener enlaces permanentes. Como ventaja añadida, se reduce el coste de desplegar y personalizar las aplicaciones. 2.3.2 BENEFICIOS Los beneficios principales de la arquitectura orientada a servicios son los siguientes: Eficiencia: Transforma los procesos de negocio en servicios compartidos con un menor coste de mantenimiento. Capacidad de respuesta: Rápida adaptación y despliegue de servicios, clave para responder a las demandas de clientes, socios y empleados. Adaptabilidad: Facilita la adopción de cambios añadiendo flexibilidad y reduciendo el esfuerzo. Reduce la complejidad gracias a la compatibilidad basada en estándares frente a la integración punto a punto. Reutiliza los servicios compartidos que han sido desplegados previamente. Integra aplicaciones heredadas limitando así el coste de mantenimiento e integración. 2.3.3 PRINCIPIOS Principios básicos para el desarrollo, mantenimiento y uso de SOA: Reuso, granularidad, modularidad, manejo de componentes, interrelacionamiento de los componentes e interoperabilidad. Cumplimiento con estándares. CAPÍTULO 2: MARCO METODOLÓGICO 45 Identificación, categorización de servicios y despacho, así como monitoreo y seguimiento. Principios específicos de la arquitectura SOA para el diseño y definición enfocada a servicios que deberán influenciar el comportamiento de un sistema, su estilo y diseño: Encapsulamiento de servicios. Servicios de Acoplamiento Suelto (Service Loose coupling) - Este servicio mantiene un relacionamiento que minimiza las dependencias entre sistemas y únicamente requiere que cada parte tenga conocimiento que otra parte existe. Contrato de servicios: Los servicios se deben incluir en los acuerdos de comunicaciones que se definen en los documentos de descripción de servicios entre uno o más servicios. Abstracción de servicios: Más allá de la descripción del servicio, está la lógica oculta de cómo funciona el servicio en el mundo real. Documentación del servicio: Una descripción del diseño orientado al servicio debe contener al menos tres usos diferentes de la frase “valor para el negocio”. Reutilización o reuso del servicio: Se deberán plantear servicios que puedan ser fácilmente reutilizados. Empaquetamiento de servicios: Una colección de servicios que pueden ser coordinados y ensamblados para formar un paquete compuesto de servicios. Autonomía de servicios: Servicios que tienen el control sobre la lógica que ellos encapsulan. Optimización de servicios: Aseguramiento de servicios de alta calidad. Habilidad de descubrimiento de servicios: Los servicios son creados con descripciones adecuadas de manera que puedan ser descubiertos utilizando los mecanismos adecuados para tal fin. Uso eficiente de los recursos del sistema Madurez del servicio y desempeño. EAI Enterprise Application Integration (integración con aplicaciones empresariales). CAPÍTULO 2: MARCO METODOLÓGICO 46 2.3.4 DISEÑO Y DESARROLLO La metodología de modelamiento y diseño utilizada por aplicaciones SOA se comenzó a conocer como “Diseño y análisis orientado a servicios” o SOAD (Service- oriented analysis and design). SOAD es una metodología de diseño para desarrollo de sistemas muy agiles en un modelo cliente/productor donde se abstrae la implementación de el proceso actual, de manera que el servicio provisto puede ser modificado o cambiado sin afectar al cliente. Básicamente se debe estructurar un contrato de servicios que debe contener los siguientes componentes: Encabezado Nombre del servicio. Versión del contrato de servicio. Propietario: Persona o equipo encargados del servicio RACI: Responsable de los entregables del contrato/servicio. Accountable (Dueño): Nivel máximo de escalamiento en términos del contrato/servicio. Consultado: Quien debe ser consultado antes de tomar cualquier acción sobre el presente contrato/servicio. Informado: quien debe ser informado sobre cualquier decisión o acción que se vaya a tomar sobre el presente contrato/servicio. Tipo: Es el tipo de servicio, ayuda a distinguir en que capa residirá. Funcionalidad: Requerimientos funcionales, indicando específicamente la funcionalidad que este servicio debe proveer. El lenguaje debe permitir la generación de casos de prueba sobre la funcionalidad. Operación del servicio y tipo de invocación del servicio (URL, interfaces, triggers). Requerimientos no funcionales, tales como: seguridad, calidad del servicio, ANS (Acuerdos de nivel de servicios) o SLA determinando la máxima latencia permitida para el servicio bajo la cual se pueden realizar acciones, semántica para definir el glosario de términos utilizados en la descripción e interfaces del servicio. 2.3.5 PROTOCOLOS DE SERVICIOS WEB SOA se puede construir sobre servicios web estándares (por ejemplo SOAP) los cuales gozan de gran aceptación industrial. Estos estándares también proveen gran interoperabilidad y protección contra vendedores de software propietario. Sin CAPÍTULO 2: MARCO METODOLÓGICO 47 embargo es posible implementar SOA utilizando cualquier tecnología basada en servicios. Los servicios web relevantes para SOA son los siguientes: XML: Un lenguaje de etiquetas para describir datos en mensajes en formato de documento. Similar a HTML pero mucho más completo y amplio. HTTP o HTTPS: Protocolo para solicitar o responder mensajes entre clientes y servicios. Protocolo estándar web. SOAP: Protocolo para intercambiar mensajes basados en XML en una red de computadores, usualmente usando HTTP. WSDL o Lenguaje de descripción de servicios web: Servicio basado en XML que describe las interfaces públicas, protocolos y formato de mensajes, requeridos para interactuar con un servicio web. UDDI o Descripción, descubrimiento e Integración Universal: Registro basado en XML para publicar descripciones de servicios (WSDL) y permitir su descubrimiento. 2.4 PATRÓN DE DISEÑO MVC (MODELO VISTA CONTROLADOR) El patrón MVC está compuesto de tres módulos diferentes, llamados Modelo, Vista y Controlador como se puede observar en la figura 18. El Modelo está compuesto por el estado y los datos que la aplicación representa. La Vista es la interfaz de usuario que muestra información sobre el modelo y que representa el dispositivo de entrada que se usa para modificarlo. Finalmente, el Controlador es lo que une a los dos anteriores. Hace corresponder las peticiones que llegan del cliente con las acciones correspondientes y dirige las respuestas a las vistas adecuadas. FIGURA 18: PATRÓN DE DISEÑO MVC CAPÍTULO 2: MARCO METODOLÓGICO 48 El Controlador interpreta las acciones del usuario, accediendo a las operaciones de negocio de la aplicación y modificando a partir de sus resultados el estado del modelo y la navegación entre vistas. El Controlador recibe todas las peticiones realizadas a la aplicación. Cada petición se identifica mediante un parámetro. En base a esta identificación, el Controlador decide qué objeto u objetos de negocio (Modelo) debe ejecutar para resolver la petición. [15] Tras la ejecución de los objetos de negocio, y en función del resultado devuelto por estos, el Controlador determina qué vista se usará para visualizar el resultado, generando una redirección que concluirá con la generación del código HTML de la página. [14] El Modelo es la lógica del negocio, representa las operaciones que se efectúan sobre los datos que se reciben o las consultas a base de datos que se hacen, su objetivo es preparar los datos para que la vista sólo se tenga que preocupar de mostrarlos, así si hay que realizar cambios en la estructura de la base de datos o cambiar las operaciones que se hacen con los datos lo tendríamos que hacer sólo en el modelo, evitando que un cambio se tenga que realizar en todas las vistas que utilicen unos determinados datos.[8] La Vista presenta el modelo en un formato adecuado para interactuar, usualmente un elemento de interfaz de usuario. En este componente se puede detectar que tipo de cliente esta accediendo a los datos para personalizar su presentación dando lugar a versiones en distintos idiomas o bien a versiones para distintos canales como PDAs, SMS, WAP, etc. [9] 2.4.1 BENEFICIOS La aplicación del modelo-vista-controlador para el desarrollo de aplicaciones Web tiene varios beneficios: [10] Menor acoplamiento. Desacopla las vistas de los modelos y se desacopla los modelos de la forma en que se muestran y se capturan los datos. Mayor cohesión. Cada elemento del patrón está altamente especializado en su tarea (la vista en mostrar datos al usuario, el controlador en las entradas y el modelo en su objetivo de negocio). Las vistas proveen mayor flexibilidad y agilidad. Se puede crear múltiples vistas de un modelo y se pueden crear, añadir, modificar y eliminar nuevas vistas dinámicamente. Las vistas pueden anidarse. Se puede cambiar el modo en que una vista responde al usuario sin cambiar su representación visual. Se pueden sincronizar las vistas. CAPÍTULO 2: MARCO METODOLÓGICO 49 Mayor facilidad para el desarrollo de clientes ricos en múltiples dispositivos y canales. Es posible crear una vista para cada dispositivo que puede variar según sus capacidades. Además de que se puede tener una vista para el entorno Web y otra para aplicaciones de escritorio. Más claridad en el diseño. Facilita el mantenimiento de las aplicaciones. 2.5 PROCESO DE PRUEBA El proceso de prueba involucra consideraciones similares al del proceso de desarrollo de software, incluyendo estrategias, actividades y métodos, los cuales deben ser aplicados de manera concurrente con el proceso de desarrollo de software. [13] Las etapas del proceso de prueba se dividen en: Estrategia de pruebas, o Orden de pruebas, o Alcance de pruebas, o Automatización de pruebas. Planeación de pruebas, Construcción de las pruebas, Ejecución de las pruebas. Las pruebas deben tener como objetivo la certificación de la calidad del producto y no la búsqueda de errores. En toda prueba se considera que “evitar defectos” es más importante que “removerlos”. 2.5.1 TIPOS DE PRUEBAS Los tipos de prueba se dividen de manera general en pruebas de verificación y validación. En las pruebas de verificación se revisa si el resultado corresponde a la especificación del sistema, es decir, si se está construyendo el sistema de manera correcta. En las pruebas de validación, se revisa si el resultado es realmente lo que el cliente quería, en otras palabras, si se está construyendo el sistema correcto, de manera que tanto la especificación como el resultado lo sean. [13] Entre las técnicas de prueba se encuentran las siguientes: CAPÍTULO 2: MARCO METODOLÓGICO 50 Prueba de regresión: Tiene como propósito verificar el sistema luego, de haberle introducido cambios, de manera que se mantenga la funcionalidad especificada originalmente. Prueba de operación: Su objetivo es verificar el sistema en operación por un largo periodo bajo condiciones normales de uso. Este tipo de prueba mide la confiabilidad del sistema. Prueba de escala completa: Trata de verificar el sistema en su carga máxima mediante la asignación de los parámetros a su valor límite y la interconexión del sistema con un máximo de equipos y usuarios simultáneos. Prueba de rendimiento o capacidad: Tiene como propósito medir la capacidad de procesamiento del sistema bajo diferentes cargas, incluyendo espacio de almacenamiento y utilización de la unidad de procesamiento. Pruebas de sobrecarga: Pretende observar cómo se comporta el sistema cuando se le aplica una sobrecarga, más allá de las pruebas de escala completa y rendimiento. El sistema debería sobrevivir a picos de carga y evitar que ocurra una catástrofe. Prueba negativa: Tiene como propósito medir el estrés del sistema en situaciones inesperadas, como casos de uso que no serian utilizados de manera simultánea. Pruebas basadas en requisitos o pruebas de casos de uso: Intenta llevar a cabo pruebas basadas directamente en la especificación de requisitos. Pueden utilizarse los mismos casos de uso originales como casos de prueba. Pruebas ergonómicas: Tiene como propósito probar los aspectos ergonómicos del sistema, en otras palabras, las interfaces hombre-máquina en el caso de que estas existan. Prueba de documentación de usuario: Tiene como propósito probar la documentación de usuario, incluyendo el manual de este y la documentación de mantenimiento y servicio. Prueba de aceptación o validación: Pretende lograr una revisión final por parte de la organización que solicito el sistema, lo cual a menudo, significa validación del sistema. El sistema se prueba en su ambiente real a menudo por un periodo extenso. 2.5.2 NIVEL DE PRUEBAS Existen tres (3) niveles principales para aplicar las diversas técnicas de pruebas: CAPÍTULO 2: MARCO METODOLÓGICO 51 Prueba de unidad: mediante esta prueba solo una unidad es probada como tal, como una clase, un paquete de servicio o un subsistema. La prueba de unidad es la de más bajo nivel, En un sistema tradicional son, a menudo, pruebas de procedimientos o subrutinas. Según el orden de ejecución, estas pruebas se clasifican en: o Prueba de especificación o caja negra: Tiene como propósito verificar las relaciones de entrada y salida de una unidad. Su objetivo es verificar “que” hace la unidad, pero sin averiguar “como” lo hace. o Prueba basada en estado: Verifica las interacciones entre operaciones de una clase según cambios en los atributos de un objeto. Es necesario hacer pruebas del objeto de acuerdo con su ciclo de vida, lo cual es especialmente importante cuando se trata de objetos controlados por estado, descritos mediante diagramas de transición de estados. o Prueba estructural: Tiene como propósito verificar que la estructura interna de la unidad sea correcta, se conoce también como prueba basada en programa o de caja blanca, dado que debe conocerse como esta implementa internamente la unidad. Prueba de integración: El propósito de esta prueba es verificar que las diferentes unidades trabajen juntas de manera apropiada. En esta prueba se incluyen los paquetes de servicio, casos de uso, subsistemas y el sistema completo. Se prueban primero los flujos básicos, los esenciales del sistema, para luego concentrar la atención en los flujos alternos, correspondientes a flujos que ocurren de manera inusual, como en el caso del manejo de excepciones. Prueba de sistema: Se ejecutan varios casos de uso en paralelo y se somete el sistema a diferentes cargas. Las pruebas del sistema pueden involucrar pruebas de operación, de escala completa, negativas, basadas en requisitos o casos de uso y pruebas de documentación de usuario. 2.6 MÉTODO DE DESARROLLO PROPUESTO Proponemos aplicar el método de desarrollo ágil basándonos en la modelación de iteraciones, en donde se cubren todos los requerimientos que presenta el sistema. Como parte modelo de desarrollo se plantea una implementación por iteraciones comenzando por la Iteración 0 que cubre la organización de las funcionalidades requeridas por el sistema en las demás iteraciones, así como también, los pasos a seguir durante el desarrollo y los entregables definidos en cada iteración. Estas CAPÍTULO 2: MARCO METODOLÓGICO 52 iteraciones estarán pautadas para ser desarrolladas en determinadas fechas según la extensión y complejidad de las funcionalidades que abarcan. FIGURA 21: MÉTODO DE DESARROLLO PROPUESTO Con el fin de producir un sistema de calidad, se realizaran pruebas sobre el sistema para minimizar la mayor cantidad de fallas que este pueda presentar. Para ello, basándonos en el proceso de pruebas, hemos tomado la siguiente estrategia: Orden de Prueba: se realizara un diseño de pruebas de abajo hacia arriba, es decir, se certifican primero las unidades de bajo nivel y luego las interfaces entre ellas. Durante el desarrollo de las pruebas de unidad se tocaran las pruebas de caja negra para validar las especificaciones, pruebas de caja blanca para verificar la estructura interna del sistema y pruebas de estado para verificar las relaciones entre las operaciones de una misma clase y sus cambios de estados. CAPÍTULO 2: MARCO METODOLÓGICO 53 Alcance de las pruebas: a fin de producir un sistema de calidad, se realizaran la mayor cantidad de pruebas tanto a nivel de unidades como de integración y sistema. Automatización de pruebas: una ventaja de usar el diseño de pruebas de abajo hacia arriba es que eliminar la necesidad de crear unidades especializadas para pruebas que recreen el ambiente alrededor de la unidad que se verifica. 54 CAPÍTULO 3: MARCO DE DESARROLLO Debido a la necesidad de agilizar el proceso de entrada y salida de placas en el INTTT, además de registrar las placas asignadas de forma única a un vehículo o a una empresa desde alguna sede del INTTT o desde una computadora en un operativo nacional, se propone como trabajo especial de grado el desarrollo de un Sistema Web basado en una Arquitectura Cliente-Servidor como parte de una propuesta de actualización tecnológica para el INTTT, con opción de migración hacia una Arquitectura Orientada a Servicios para facilitar la conexión de las funcionalidades del sistema con la base de datos del inventario de placas del INTTT y de esta forma permitir la automatización del proceso de carga y liberación de placas desde el departamento de placas del INTTT, agilizando dicho proceso y facilitando el trabajo a realizar por el personal. Objetivo del TEG: desarrollar una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor proponiendo una migración hacia una arquitectura orientada a servicios, que permita agilizar la masificación de la nueva forma de identificación vehicular, además de promover la actualización tecnológica de otros sistemas de la institución. 3.1 METODOLOGÍA DE DESARROLLO (ITERACIÓN 0) En base a lo expuesto en el capítulo 2, planteamos la siguiente metodología para el desarrollo del sistema propuesto, en la cual, los requerimientos iníciales fueron levantados a través de la metodología de elicitación de requisitos para sistemas de software que se muestra en el anexo a este documento. En base al levantamiento de información fueron identificados los siguientes subsistemas. FIGURA 19: DIAGRAMA DE SUBSISTEMAS CAPÍTULO 3: MARCO DE DESARROLLO 55 A continuación mostraremos los mapas de sitios con las interfaces de las funcionalidades para cada iteración donde E: Estático, D: Dinámico y F: Formulario. Los recuadros pintados en fondo gris ya se encuentran desarrollados y los recuadros pintados de blanco no. Inicio de sesión: E Página Principal: E Usuarios Equipos Stocks Espacio Físico Placas Reportes Agregar Stock: D, F Modificar Stock: D, F Consultar Stocks: D, F Agregar Espacio Físico: D, F Modificar Espacio Físico: D, F Consultar Espacio Físico: D, F Consultar placas: D, F Agregar Usuario: D, F Modificar Usuario: D, F Consultar Usuarios: D, F Agregar Equipo: D, F Modificar Equipo: D, F Consultar Equipos: D, F Reiniciar Contraseña: D, F Eliminar Usuario: D, F Eliminar Equipo: D, F Eliminar Stock: D, F Cargar Placas: D, F Modificar Ubicación Física: D, F Liberar Placas: D, F Producción diaria: D,F Producción para operativos: D, F Producción para oficinas: D, F Producción para ensambladoras: D, F Caso Extraordinario: D, F Reversar Placas: D, F Devolver Placas: D, F Eliminar Placas: D, F Ubicación física de placas: D,F Movimiento al detalle de carga de Placas: D, F Movimiento al detalle de liberación de placas: D, F Movimiento de carga de placas: D, F Movimiento de liberación de placas: D, F Existencia detallada de placas: D, F Reporte del Inventario general de placas: D, F Información detallada de una placa: D, F Operaciones del sistema (Auditoria): D, F Existencia general de placas: D, F FIGURA 19: MAPA DEL SITIO CAPÍTULO 3: MARCO DE DESARROLLO 56 3.1.1 ITERACIÓN 1 Esta iteración está programada para la semana 1 de desarrollo comprendida entre el 21/04/2008 y el 25/04/2008. En esta iteración se contemplan la configuración de los equipos de desarrollo, creación de la Base de Datos y creación de la estructura MVC del Sistema de Inventario de Placas. 3.1.1.1 CONFIGURACIÓN DE LOS EQUIPOS DE DESARROLLO El desarrollo del sistema Web se realizó en el lenguaje PHP 5.0, utilizando el cliente Sybase ASE para el acceso a los datos y la librería nusoap para la creación de los servicios Web. Para verificar el funcionamiento del mismo se trabajo con el servidor de aplicaciones Apache. PHP PHP (acrónimo de Hypertext Preprocessor) es un lenguaje de código abierto interpretado, de alto nivel, embebido en páginas HTML y ejecutado en el servidor. PHP puede ser utilizado en cualquiera de los principales sistemas operativos del mercado, incluyendo Linux, muchas variantes Unix (incluyendo HP-UX, Solaris y OpenBSD), Microsoft Windows, Mac OS X, RISC OS y probablemente alguno más. PHP soporta la mayoría de servidores web de hoy en día, incluyendo Apache, Microsoft Internet Information Server, Personal Web Server, Netscape e iPlanet, Oreilly Website Pro server, Caudium, Xitami, OmniHTTPd y muchos otros. PHP tiene módulos disponibles para la mayoría de los servidores, para aquellos otros que soporten el estándar CGI, PHP puede usarse como procesador CGI. Entre las habilidades de PHP se incluyen: creación de imágenes, archivos PDF y películas Flash (usando libswf y Ming) sobre la marcha. También puede presentar otros resultados, como XHTM y archivos XML. PHP puede autogenerar estos archivos y almacenarlos en el sistema de archivos en vez de presentarlos en la pantalla. [11] SYBASE ASE Por sus siglas en ingles, Adaptive Server Enterprise (ASE) es el motor de bases de datos (RDBMS) insignia de la compañía Sybase, Inc. ASE es un sistema de gestión de datos, altamente escalable, de alto rendimiento, con soporte a grandes volúmenes de datos, transacciones y usuarios, y de bajo costo, que permite: almacenar datos de manera segura, tener acceso y procesar datos de manera inteligente y movilizar datos. [12] 3.1.1.2 BASE DE DATOS En la siguiente figura se puede observar el diagrama entidad-relación diseñado para almacenar los datos relacionados tanto con el sistema de inventario de placas, CAPÍTULO 3: MARCO DE DESARROLLO 57 como con el sistema del departamento de informática para la asignación de placas a los vehículos del país. dp_placa inttt_portal_v4 _institucion dp_auditoria dp_rol dp_equipo dp_usuario dp_tipo_placa dp_evento dp_stock dp_estatus dp_nacionalidad dp_tipo_fecha inttt_portal_v4 _estado inttt_portal_v4 _tramite inttt_portal_v4 _tramite_vehiculo inttt_portal_v4 _placadp_oficina _espacio_fisico inttt_portal_v4 _oficina dp_espacio_fisico dp_registro FIGURA 20: DIAGRAMA E/R Las tablas desarrolladas en esta iteración comienzan con las siglas dp (departamento de placas). Las tablas que comienzan con inttt_portal_v4 son aquellas diseñadas por el departamento de informática para los trámites de asignación de placas a un vehículo en particular. Estas últimas tablas son de consulta para evitar la redundancia de datos, excepto la tabla inttt_portal_v4_placa en la cual se modifica la ubicación y el estatus de la misma dependiendo de las operaciones realizadas en el departamento de placas. CAPÍTULO 3: MARCO DE DESARROLLO 58 En la siguiente figura se puede observar el modelo de datos diseñado para almacenar solo los datos necesarios para el buen funcionamiento del sistema de inventario de placas. Las tablas con mayor importancia son dp_placa, dp_registro, dp_espacio físico y dp_stock. Con la tabla dp_placa se logra almacenar el código de placa, el tipo de placa, el estado al que pertenece la placa, el estatus de la placa (cargada, liberada, devuelta, reversada, en ensambladora, en operativo, en oficina, eliminada), la ubicación física en la que se encuentra almacenada la placa, la oficina en la que fue cargada la placa y la entidad correspondiente. Se ingresan datos en la tabla dp_registro cada vez que se realiza una operación con una placa. En esta tabla se almacena el código de la placa, el tipo de placa y la fecha y hora en la que se realizo la operación, además de almacenar el tipo de fecha (para distinguir la operación realizada en esa fecha y hora en particular), la oficina regional en la que se realizo la operación con la placa, la entidad correspondiente, el nombre del usuario que realizo la operación y la descripción ingresada por el usuario al momento de realizar una determinada operación en el módulo de placas. Con la tabla dp_espacio_fisico se logra almacenar la cantidad de placas existentes para una determinada bandeja la cual se encuentra en una columna de un determinado anaquel en la bóveda. En esta tabla se almacena la oficina en la cual se está agregando la placa, así como la entidad y la nomenclatura de la ubicación física de la placa (por ejemplo: BO01AN01CL01BA01, lo cual significa que la placa fue almacenada en la bóveda 1, en el anaquel 1, en la columna 1, en la primera bandeja). Con la tabla dp_stock se almacena la cantidad existente, la cantidad mínima y la cantidad máxima de placas que se pueden cargar en la bóveda de un determinado tipo de placa y estado para una entidad y oficina especificadas por el usuario. CAPÍTULO 3: MARCO DE DESARROLLO 59 FIGURA 21: MODELO DE DATOS CAPÍTULO 3: MARCO DE DESARROLLO 60 3.1.1.3 ESTRUCTURA DEL SISTEMA La estructura del sistema sigue la vertiente del patrón de diseño Modelo – Vista – Controlador. Como se puede ver en la figura 22, el directorio raíz fue llamado inventario y dentro de este encuentran el directorio controladores (que decide que dependiendo de la vista que lo llame invoca a ciertas funciones en el modelo y redirecciona a una vista); el directorio modelos (que realiza las operaciones sobre las Bases de Datos y retorna los resultados al modelo); el directorio vistas (que contiene todas las interfaces que presenta el sistema); el directorio público (que contiene los logs de transacciones, hojas de estilos, fuentes de letras, imágenes, javascripts y librerías de soporte al sistema); y por último, el directorio servicios (que contiene los servicios proporcionados por el sistema para que cualquier aplicación cliente pueda implementar las funcionalidades ofrecidas por el mismo). FIGURA 22: ESTRUCTURA DEL SISTEMA 3.1.1.4 PRUEBAS Con respecto a las pruebas a realizar durante el desarrollo del sistema se tienen, siguiendo el orden de aparición, las siguientes pruebas globales para cada una de las siguientes iteraciones: Prueba basada en requisitos o prueba de casos de uso: con estas pruebas se trata de verificar que cada unidad o funcionalidad de cada iteración realice lo que tenga que hacer según lo convenido en el levantamiento de CAPÍTULO 3: MARCO DE DESARROLLO 61 información y las especificaciones de los casos de uso. Entre las pruebas a realizar se tienen: o Modificación de los datos en base de datos (visualizar en base de datos las modificaciones que realicen las funcionalidades del sistema), o Comportamiento a nivel de datos en la interfaz (que se muestren únicamente los datos que cumplen las especificaciones de los casos de uso). Pruebas ergonómicas: este tipo de pruebas permite verificar que la interfaz corresponda de manera adecuada con las especificaciones descritas para los casos de uso. Entre las pruebas a realizar se tienen: o Información visual sobre los campos obligatorios (dando en algunos casos un ejemplo de los valores), o Formato, longitud y tipo de datos admitidos en los campos de un formulario ( campos del formulario limitados por el tamaño máximo permitido para cada caso), o Mensajes de confirmación (antes de realizar cada una de las operaciones del sistema), o Mensajes de éxito o de error (después de realizar cada operación se mostrara un mensaje al usuario indicando el estado de la operación realizada), o Redireccionamiento (que vuelva siempre al inicio del sistema indicando el estado de la operación realizada, enlaces redireccionados correctamente). o Navegabilidad del sistema (nombres de las funcionalidades en el menú de usuario, funcionalidades permitidas dependiendo del rol del usuario, acceso al menú de usuario en cualquier funcionalidad, acceso a cancelar la operación en la que se encuentra, permitir eliminar todos los datos de un formulario), Prueba negativa: permitirá encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentra: o Intentar realizar una operación sin rellenar los valores en el formulario que son de tipo obligatorio. Pruebas de rendimiento: estas pruebas serán realizadas luego de la culminación de cada funcionalidad con el fin de comparar el tiempo esperado CAPÍTULO 3: MARCO DE DESARROLLO 62 con el tiempo real de procesamiento durante el desarrollo de la operación. Como por ejemplo al cargar placas por lotes o al liberar una gran cantidad de placas del inventario. Pruebas de regresión: estas pruebas se aplicaran luego de la culminación de cada una de las pruebas mencionadas anteriormente, con el fin de, evaluar si se introdujeron nuevas fallas en el sistema al momento de las correcciones. Pruebas de documentación de usuario: tiene como objetivo evaluar si el documento explica el comportamiento del sistema. Además, se verifica que el documento sea legible, con buena redacción e ilustrativo. 3.1.2 ITERACIÓN 2 Esta iteración está programada para la semana 2 de desarrollo comprendida entre el 28/04/2008 y el 02/05/2008. En esta iteración se contemplan funcionalidades del modulo administrativo del Sistema de Inventario de Placas. 3.1.2.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 23: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR USUARIOS CAPÍTULO 3: MARCO DE DESARROLLO 63 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF – 01 Agregar Usuario Versión 1.0 Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el administrador solicite agregar un nuevo usuario. Precondición El solicitante no es un usuario del sistema y tiene los datos solicitados disponibles. Secuencia Normal Paso Acción 1 El administrador del sistema solicita comenzar el proceso de agregar un nuevo usuario. 2 El sistema solicita los siguientes datos al administrador: nombre, apellido, CI, login, contraseña, rol y estatus. 3 El administrador del sistema solicita los datos requeridos y la documentación al nuevo usuario. 4 El administrador del sistema proporciona los datos requeridos y solicita al sistema que los almacene. 5 El sistema almacena los datos proporcionados y lista todos los usuarios que presenta actualmente el sistema. Postcondición El solicitante es ahora usuario del sistema y puede operarlo de acuerdo al rol asignado por el administrador. Excepciones Paso Acción 4 Si los datos aportados al sistema son incorrectos, el sistema cancela la operación, a continuación este caso de uso termina. 4 Si el sistema detecta que el solicitante ya es usuario del sistema, el sistema informa de la situación al administrador del sistema permitiéndole modificar los datos proporcionados, a continuación este caso de uso continúa. 4 Si el administrador del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada La frecuencia será mayor durante los primeros días. Estabilidad Alta. Comentarios Ninguno. TABLA 4: RF – AGREGAR USUARIO CAPÍTULO 3: MARCO DE DESARROLLO 64 FIGURA 24: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR EQUIPOS 3.1.2.2 MAPA DEL SITIO A continuacion, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 25: MAPA DEL SITIO – ITERACIÓN 2 3.1.2.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primera funcionalidad de esta iteración, en este caso, agregar un usuario. CAPÍTULO 3: MARCO DE DESARROLLO 65 FIGURA 26: INTERFAZ – AGREGAR USUARIO 3.1.2.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en los campos nombres y apellidos, o La cédula debe ser de tipo numérico. El campo cédula debe tener un máximo de 8 números y un mínimo de 6, o El campo usuario, así como la contraseña, debe contener solo caracteres válidos (mayúsculas, minúsculas, acentos y números). Tanto el nombre de usuario como la contraseña deben tener una longitud mayor a 4 caracteres y menor o igual a 15, o Se verifica que la clave de confirmación sea igual a 12345, o El campo clave debe tener un máximo de 5 caracteres, CAPÍTULO 3: MARCO DE DESARROLLO 66 o La IP a ingresar debe ser válida (X.X.X.X, donde 0 <= X < 256) verificando que el primer número ingresado no sea igual a 0, o El campo equipo solo debe tener caracteres válidos (mayúsculas, minúsculas, y números), Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Introducir un usuario cuyo login ya se encuentre registrado en el sistema, o Introducir un equipo cuyo código de equipo ya se encuentre registrado en el sistema. 3.1.3 ITERACIÓN 3 Esta iteración está programada para la semana 3 de desarrollo comprendida entre el 05/05/2008 y el 09/05/2008. En esta iteración se contemplan funcionalidades del modulo administrativo del Sistema de Inventario de Placas. 3.1.3.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 27: DIAGRAMAS DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR STOCKS CAPÍTULO 3: MARCO DE DESARROLLO 67 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 10 Agregar Stock Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el coordinador solicite agregar un nuevo stock. Precondición El stock a agregar no se encuentra registrado en el sistema y el coordinador tiene los datos solicitados disponibles. Secuencia Normal Paso Acción 1 El coordinador del sistema solicita comenzar el proceso de agregar un nuevo stock. 2 El sistema solicita los siguientes datos al coordinador: estado, tipo de placa, mínimo, máximo. 3 El coordinador del sistema proporciona los datos requeridos y solicita al sistema que los almacene. 4 El sistema almacena los datos proporcionados. Postcondición El nuevo stock se encuentra ahora registrado en el sistema. Excepciones Paso Acción 3 Si los datos aportados al sistema son incorrectos, el coordinador del sistema cancela la operación, a continuación este caso de uso termina. 3 Si el sistema detecta que el stock ya se encuentra registrado, el sistema informa de la situación al coordinador permitiéndole modificar los datos proporcionados, a continuación este caso de uso continúa. 3 Si el coordinador del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Debe ser cargado antes de colocar en producción los módulos operativos y de reportes del sistema. Estabilidad Alta. Comentarios Es preciso que “todos los stocks” se encuentre disponibles en el sistema para evitar problemas posteriores con los módulos operativos y de reportes. TABLA 5: RF – AGREGAR STOCK CAPÍTULO 3: MARCO DE DESARROLLO 68 FIGURA 28: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR ESPACIOS FÍSICOS 3.1.3.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 29: MAPA DEL SITIO – ITERACIÓN 3 3.1.3.3 INTERFAZ La siguiente interfaz corresponde a la vista de la ultima funcionalidad de esta iteración, en este caso, consultar los espacios físicos. CAPÍTULO 3: MARCO DE DESARROLLO 69 FIGURA 30: INTERFAZ – CONSULTAR ESPACIO FÍSICO 3.1.3.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Tipo de dato numérico en los campos máximo y mínimo y con una longitud menor o igual a 5 caracteres. Además, se valida que tanto el máximo como el mínimo sean mayor a 0. Se valida que al modificar el stock, el máximo sea mayor o igual a la existencia de placas para dicho stock, o Tipo de dato numérico para Bóveda, cantidad de anaqueles, cantidad de columnas y cantidad de bandejas y capacidad de la bandeja. Todos los campos deben ser mayor a 0. Bóveda, cantidad de columnas y cantidad de bandejas con una longitud igual a 1, cantidad de anaqueles con una longitud igual a 2 y capacidad de la bandeja con una longitud igual a 3. Se valida que los valores a modificar sean siempre mayor a la cantidad de Espacio Físico actual. CAPÍTULO 3: MARCO DE DESARROLLO 70 Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Introducir un stock cuya combinación de tipo de placa, estado y oficina ya se encuentre registrada en el sistema, o Introducir un espacio físico cuya bóveda ya se encuentre registrada en el sistema, o Consultar usuarios, equipos, stocks y espacio físico de los cuales no se cuente con información en base de datos que cumplan con los parámetros solicitados. 3.1.4 ITERACIÓN 4 Esta iteración está programada para la semana 4 de desarrollo comprendida entre el 12/05/2008 y el 16/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. 3.1.4.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 31: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – CARGA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 71 A continuación, se muestra la especificación del caso de uso general de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 17 Cargar Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite cargar una/s nueva/s Placa/s. Precondición La/s Placa/s no se encuentra registrada/s en el sistema. Secuencia Normal Paso Acción 1 El usuario del sistema solicita comenzar el proceso de cargar una/s nueva/s Placa/s. 2 El sistema solicita los siguientes datos al usuario: numero de placa o rango de placas en caso de que sea una carga por lote. 3 El usuario proporciona los datos requeridos y solicita al sistema que los cargue en una lista preliminar. 4 El usuario puede seguir cargando placas, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha cargado todas las placas deseadas, este solicita al sistema que almacene las placas. 6 El sistema asigna según la disponibilidad en el almacén una localización a cada placa y registra el almacenamiento. 7 El sistema genera un reporte con la identificación de cada placa almacenada así como la localización que el sistema asigno a cada una de las placas. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la colocación de las placas en el almacén. Postcondición La/s Placa/s se encuentra ahora registrada/s en el sistema y almacenada/s en el inventario. Excepciones Paso Acción 3 Si la Placa aportada al sistema ya se encuentra registrada, el sistema indica la situación al usuario, a continuación este caso de uso continua 5 Si el usuario del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Diariamente. Estabilidad Alta. Comentarios Todos los tipos de carga de placas se encuentran contemplados en este caso CAPÍTULO 3: MARCO DE DESARROLLO 72 de uso, sin embargo para una mayor comprensión del proceso de carga de placas se explotaran los distintos casos por separado. TABLA 6: RF – CARGAR PLACAS 3.1.4.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 32: MAPA DEL SITIO – ITERACIÓN 4 3.1.4.3 INTERFAZ La siguiente interfaz corresponde a la vista del caso de uso general de esta iteración, en este caso, la carga de placas en el inventario. FIGURA 33: INTERFAZ – CARGA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 73 3.1.4.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Los campos Placa, desde y hasta deben ser de tipo alfanumérico y con una longitud entre 6 y 7 caracteres. Además, se valida que tanto en placa, como en desde y hasta, la placa introducida tenga un formato y un estado valido. o Tipo de dato numérico en el campo lote con una longitud de 10 caracteres y debe ser mayor a 0. o El formato de la fecha de ráfaga está definido por el calendario y debe tener una longitud fija de 8 caracteres. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Cargar una placa cuyo stock no ha sido agregado aun en el sistema, o Cargar que ya ha sido cargada en el sistema, o Cargar placas en una ubicación física donde no hay espacio disponible. Pruebas de sobrecarga: como parte de la prueba de sobrecarga se probó cargar una cantidad mayor a 250 placas respondiendo el sistema satisfactoriamente. A medida que se aumenta este número se disminuyen las prestaciones del sistema, por lo que no se recomienda realizar una carga de más de 250 placas. Además, por configuraciones en el servidor, los tiempos de espera por procesamiento expiran en 25 segundos, por lo tanto, operaciones que realicen más de 20 segundos de procesamiento no podrán ser llevadas a cabo. 3.1.5 ITERACIÓN 5 Esta iteración está programada para la semana 5 de desarrollo comprendida entre el 19/05/2008 y el 23/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. CAPÍTULO 3: MARCO DE DESARROLLO 74 3.1.5.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 34: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 1 A continuación, se muestra la especificación del ultimo caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 23 Consultar Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite consultar la localización en Espacio Físico de ciertas Placas. Precondición Ninguna. Secuencia Normal Paso Acción 1 El usuario del sistema provee los parámetros de la consulta para comenzar el proceso de consulta de las placas en el sistema. 2 El usuario solicita al sistema que busque las placas que concuerden con los parámetros de la consulta. 3 El sistema lista las placas que cumplieron con los parámetros de la CAPÍTULO 3: MARCO DE DESARROLLO 75 consulta. 4 El usuario puede generar un reporte con la información de la consulta. 5 El usuario puede imprimir un reporte con la información de la consulta. Postcondición Ninguna. Excepciones Paso Acción 2 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. 3 Si no se encontró ningún resultado según los parámetros de la consulta, el sistema comunica al usuario la situación, a continuación este caso de uso termina. Frecuencias esperada Veinticinco (25) veces a la semana. Estabilidad Alta. Comentarios Ninguno. TABLA 7: RF – CONSULTAR PLACAS 3.1.5.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 35: MAPA DEL SITIO – ITERACIÓN 5 3.1.5.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primera funcionalidad de esta iteración, en este caso, la vista preliminar de las placas, implementada en la carga de placas. CAPÍTULO 3: MARCO DE DESARROLLO 76 FIGURA 36: INTERFAZ – LISTA PRELIMINAR 3.1.5.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Agregar una placa a la lista preliminar que ya se encuentre en dicha lista, o Consultar una placa que no haya sido cargada en el sistema. 3.1.6 ITERACIÓN 6 Esta iteración está programada para la semana 6 de desarrollo comprendida entre el 26/05/2008 y el 30/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. CAPÍTULO 3: MARCO DE DESARROLLO 77 3.1.6.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 37: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – LIBERAR PLACAS A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 24 Liberar Producción Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite liberar una/s placa/s existente/s del almacén. Precondición La/s Placa/s se encuentra registrada/s en el sistema. Secuencia Normal Paso Acción 1 El usuario del sistema solicita comenzar el proceso de liberar una/s placa/s existente/s 2 El sistema solicita los siguientes datos al usuario: numero de placa o rango de placas en caso de que sea una liberación por lote. En caso de otra liberación, se requerirán los parámetros pertinentes para realizar la operación. 3 El usuario proporciona los datos requeridos y solicita al sistema que busque las placas y las cargue en una lista preliminar. CAPÍTULO 3: MARCO DE DESARROLLO 78 4 El usuario puede seguir liberando placas, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha buscado todas las placas deseadas, este solicita al sistema que libere las placas. 6 El sistema libera las placas del almacén registra el motivo de la liberación. 7 El sistema genera un reporte con la identificación de cada placa liberada así como la localización que tiene en el almacén para facilitar su búsqueda. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la ubicación de las placas en el almacén. Postcondición La/s Placa/s se encuentra ahora liberadas/s del almacén. Excepciones Paso Acción 3 Si la Placa buscada no se encuentra en el sistema, el sistema indica la situación al usuario, a continuación este caso de uso continua. 5 Si el usuario del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Diariamente. Estabilidad Alta. Comentarios Todos los tipos de liberación de placas se encuentran contemplados en este caso de uso, sin embargo, para una mayor comprensión del proceso de liberación de placas se explotaran los distintos casos por separado. TABLA 8: RF – LIBERAR PRODUCCIÓN 3.1.6.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 38: MAPA DEL SITIO – ITERACIÓN 6 CAPÍTULO 3: MARCO DE DESARROLLO 79 3.1.6.3 INTERFAZ La siguiente interfaz corresponde a la vista de la segunda funcionalidad de esta iteración, en este caso, la liberación de producción de placas para operativos, en donde el usuario deberá seleccionar las placas deseadas para la liberación. FIGURA 39: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 1 En a siguiente interfaz, luego de que el usuario ha seleccionado las placas deseadas, estas se cargan en la lista preliminar y posteriormente se procede a agregar una nota y liberarlas del inventario. FIGURA 40: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 2 CAPÍTULO 3: MARCO DE DESARROLLO 80 3.1.6.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El formato de la fecha en la liberación por producción diaria está definido por el calendario y debe tener una longitud fija de 10 caracteres. o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en el campo descripción. o Tipo de dato numérico en el campo cantidad con una longitud de 3 dígitos y debe ser mayor a 0. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Liberar producción diaria cuando no se ha solicitado ninguna placa por RAPAL, o Liberar producción para operativos, oficinas y ensambladoras de tipos de placas y estados cuyo stock no ha sido registrado en el sistema, o Liberar producción para operativos, oficinas y ensambladoras con una cantidad de placas mayor a las disponibles en el sistema, o Liberar por caso extraordinario, reversar o devolver una placa que no ha sido cargada. Pruebas de sobrecarga: como parte de la prueba de sobrecarga se probó cargar una cantidad mayor a 250 placas respondiendo el sistema satisfactoriamente. A medida que se aumenta este número se disminuyen las prestaciones del sistema, por lo que no se recomienda realizar una carga de más de 250 placas. Además, por configuraciones en el servidor, los tiempos de espera por procesamiento expiran en 25 segundos, por lo tanto, operaciones que realicen más de 20 segundos de procesamiento no podrán ser llevadas a cabo. CAPÍTULO 3: MARCO DE DESARROLLO 81 3.1.7 ITERACIÓN 7 Esta iteración está programada para la semana 7 de desarrollo comprendida entre el 02/06/2008 y el 06/06/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. 3.1.7.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 41: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 2 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 22 Modificar Ubicación de Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite modificar la ubicación de alguna/s placa/s en el almacén. Precondición La/s Placa/s ya se encuentra registradas en un espacio físico dentro del CAPÍTULO 3: MARCO DE DESARROLLO 82 almacén. Secuencia Normal Paso Acción 1 El usuario del sistema solicita modificar la ubicación de alguna/s placa/s. 2 El sistema solicita los siguientes datos al usuario: identificación de la placa o rango de placas en caso de que sea una carga por lote. 3 El usuario proporciona los datos requeridos y solicita al sistema que los cargue en una lista preliminar. 4 El usuario puede seguir cargando placas en la lista preliminar, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha cargado todas las placas en la lista preliminar, este selecciona un espacio físico dentro del almacén y solicite al sistema que se cambie la ubicación de las placas. 6 El sistema asigna según la disponibilidad en el almacén la nueva ubicación a cada placa y registra el almacenamiento. 7 El sistema genera un reporte con la identificación de cada placa almacenada así como la ubicación que el sistema asigno a cada una de las placas. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la colocación de las placas en el almacén. Postcondición La/s placa/s se encuentra ahora registrada/s en una nuevo espacio físico en el almacén. Excepciones Paso Acción 5 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Cinco (5) veces al día. Estabilidad Alta. Comentarios Ninguno. TABLA 9: RF – MODIFICAR UBICACIÓN DE LAS PLACAS 3.1.7.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. CAPÍTULO 3: MARCO DE DESARROLLO 83 FIGURA 42: MAPA DEL SITIO – ITERACIÓN 7 3.1.7.3 INTERFAZ La siguiente interfaz corresponde a la vista de la tercera funcionalidad de esta iteración, en este caso, la devolución de las placas al inventario. FIGURA 43: INTERFAZ – DEVOLUCIÓN DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 84 3.1.7.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en el campo descripción. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Modificar la ubicación física de unas placas a una nueva ubicación donde no hay espacio disponible, o Reversar una placa que no cuente con estatus de reversada, o Reversar o devolver una placa que no ha sido liberada, o Eliminar una placa que posee historia en el Sistema de Inventario de placas. 3.1.8 ITERACIÓN 8 Esta iteración está programada para la semana 8 de desarrollo comprendida entre el 09/06/2008 y el 13/06/2008. En esta iteración se contemplan funcionalidades del modulo de reportes del Sistema de Inventario de Placas. 3.1.8.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. CAPÍTULO 3: MARCO DE DESARROLLO 85 FIGURA 44: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 1 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 35 Reporte Ubicación Física de las Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite un Reporte con la Ubicación Física de las Placas. Precondición Debe haber placas ubicadas en un espacio físico dentro del almacén. Secuencia Normal Paso Acción 1 El usuario del sistema solicita un Reporte de Ubicación Física. 2 El sistema solicita al usuario seleccione: oficina, estado de la placa y tipo de placa. CAPÍTULO 3: MARCO DE DESARROLLO 86 3 El usuario provee los parámetros para la generación del reporte y solicita al sistema generar el reporte. 4 El sistema le permite al usuario guardar el reporte. 5 El sistema le permite al usuario imprimir el reporte. Postcondición Ninguna. Excepciones Paso Acción 3 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Tres (3) veces por semana. Estabilidad Alta. Comentarios Por defecto, los parámetros se muestran como sigue: Oficina: Oficina Actual, Estado: TODOS, Tipo de Placa: TODOS. Únicamente la sede principal puede visualizar las placas que se encuentran en otras oficinas. TABLA 10: RF – REPORTE UBICACIÓN FÍSICA DE PLACAS 3.1.8.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. Inicio de sesión: E Página Principal: E Reporte de placas por ubicación física: D,F Movimiento al detalle de carga de Placas: D, F Movimiento al detalle de liberación de placas: D, F Iteración 8 Movimiento de carga de placas: D, F Movimiento de liberación de placas: D, F FIGURA 45: MAPA DEL SITIO – ITERACIÓN 8 CAPÍTULO 3: MARCO DE DESARROLLO 87 3.1.8.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primara funcionalidad de esta iteración, en este caso, la generación del reporte de placas por ubicación física en donde se deberá seleccionar la ubicación deseada. FIGURA 46: INTERFAZ – REPORTE DE PLACAS POR UBICACIÓN FÍSICA 3.1.8.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El campo para la fecha de inicio y para la fecha de fin tiene una longitud de 10 caracteres, con un formato propio del calendario. Se valida además, que fecha de inicio ingresada sea menor a la fecha de fin. CAPÍTULO 3: MARCO DE DESARROLLO 88 Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Obtener un reporte que no cuenta con información en base de datos que cumplan con los parámetros solicitados. 3.1.9 ITERACIÓN 9 Esta iteración está programada para la semana 9 de desarrollo comprendida entre el 16/06/2008 y el 20/06/2008. En esta iteración se contemplan funcionalidades del modulo de reportes del Sistema de Inventario de Placas. 3.1.9.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 47: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 2 CAPÍTULO 3: MARCO DE DESARROLLO 89 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 40 Reporte de Existencia General de Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite un Reporte con la Existencia General de Placas en el Inventario. Precondición Ninguna. Secuencia Normal Paso Acción 1 El usuario del sistema solicita un Reporte con la Existencia General de Placas en el Inventario. 2 El sistema solicita al usuario seleccione: tipo de reporte (general, por estado o por tipo de placa). 3 El usuario provee el parámetro para la generación del reporte y solicita al sistema generar el reporte. 4 El sistema le permite al usuario guardar el reporte. 5 El sistema le permite al usuario imprimir el reporte. Postcondición Ninguna. Excepciones Paso Acción 3 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Una (1) vez a la semana. Estabilidad Alta. Comentarios Por defecto, los parámetros se muestran como sigue: Tipo de Reporte: General. Si el Reporte es General se muestra un listado por Estado y sus respectivas cantidades para cada Tipo de Placa, totalizando por cada Tipo de Placa y por todo el Reporte. Si el Reporte es General por Estado se muestran los Estados y sus respetivas cantidades totalizando al final del Reporte. Si el Reporte es General por Tipo de Placa se muestran los Tipos de Placas y sus respectivas cantidades totalizando al final del Reporte. TABLA 11: RF – REPORTE EXISTENCIA GENERAL DE PLACAS 3.1.9.2 MAPA DEL SITIO CAPÍTULO 3: MARCO DE DESARROLLO 90 A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 48: MAPA DEL SITIO – ITERACIÓN 9 3.1.9.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primara funcionalidad de esta iteración, en este caso, la generación del reporte de existencia detallada de placas. FIGURA 49: INTERFAZ – REPORTE DE EXISTENCIA DETALLADA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 91 3.1.9.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El campo para la fecha de inicio y para la fecha de fin tiene una longitud de 10 caracteres, con un formato propio del calendario. Se valida además, que fecha de inicio ingresada sea menor a la fecha de fin. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentra: o Obtener un reporte que no cuenta con información en base de datos que cumplan con los parámetros solicitados. 3.1.10 LIBERACIÓN DEL SISTEMA DE INVENTARIO DE PLACAS Una vez realizadas todas las iteraciones para cumplir con el desarrollo del sistema, se procedió a la entrega del sistema al Departamento de Informática. Esta entrega fue programada en la fecha comprendida entre 07/07/2008 y el 11/07/2008. Después de la entrega de sistema, el Departamento de Informática, conjuntamente con el personal del Departamento de Placas de INTTT, se encargaron de realizar las pruebas de operaciones y de aceptación o validación del sistema antes de montar el sistema en producción. Durante el transcurso de esta semana se evaluaron todas las posibles funcionalidades del sistema en condiciones normales y con un máximo de usuarios y equipos. Estas pruebas fueron realizadas en un ambiente totalmente de desarrollo. 3.1.11 PRODUCCIÓN Luego de las pruebas realizadas por el Departamento de Placas y el Departamento de Informática del INTTT y habiendo evaluado la calidad del sistema, se decidió la puesta en producción del mismo. La puesta en producción del sistema fue programada para la semana comprendida entre el 14/07/2008 y el 18/07/2008. CAPÍTULO 3: MARCO DE DESARROLLO 92 3.2 ACTUALIZACIÓN DEL SISTEMA El Sistema de Inventario de Placas fue puesto en producción debido a que se requería con urgencia en el Departamento de Placas. Sin embargo, se propone una migración a una arquitectura orientada a servicios. Siguiendo el método de desarrollo ágil basado en la modelación de iteraciones, se propone la migración del sistema de inventario de placas en las iteraciones 10 y 11. Debido a que el sistema fue puesto en producción solo en la sede principal, se desarrollaron servicios de consulta los cuales servirán como soporte para otros sistemas de los diferentes departamentos de la sede principal del INTTT. Estos servicios servirán como base y como ejemplo para el futuro desarrollo de otros servicios, los cuales en un futuro constituirán una base para la migración completa de una arquitectura cliente-servidor hacia una arquitectura orientada a servicios. Los servicios a implementar en el sistema de inventario son los siguientes: Consultar Oficinas: este servicio permite que cualquier aplicación cliente pueda acceder a la lista de las 69 oficinas que tiene el INTTT. Se tomo la decisión de crear este servicio, debido a que el usuario de la aplicación cliente instalada en una de las oficinas del INTTT puede desear conocer el stock que posee su oficina. Consultar Stocks: este servicio permite que cualquier aplicación cliente pueda conocer el stock de una oficina del INTTT. Se tomo la decisión de crear este servicio debido a que para cualquier oficina del INTTT es necesario conocer la cantidad existente por tipo de placa y estado, además del máximo y el mínimo de placas permitido por stock. Esto permite que la oficina lleve un control de la cantidad de placas que necesita solicitar y de la cantidad de placas que puede liberar para un determinado stock. Consultar datos de una placa: este servicio permite que cualquier aplicación cliente pueda conocer los datos de una placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina conozca los datos completos de una placa. Consultar el registro de una placa: este servicio permite que cualquier aplicación cliente pueda conocer las operaciones que se han realizado con una placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina lleve un control sobre las operaciones realizadas con las placas. Consultar placas: este servicio permite que cualquier aplicación cliente pueda conocer los datos de una placa o de un lote de placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina conozca CAPÍTULO 3: MARCO DE DESARROLLO 93 el estatus final que tienen las placas, conociendo así el tipo de placa, el estado, la ubicación, el estatus y la oficina en la que se encuentran. Consultar placas cargadas: este servicio permite que cualquier aplicación cliente pueda conocer cuales placas han sido cargadas en el sistema en un rango específico de fechas. Se tomo la decisión de crear este servicio debido a que una oficina puede consultar los códigos de las placas que han sido cargadas en el departamento de placas en un rango de tiempo, permitiendo tener un control sobre las placas que se encuentran almacenadas, lo cual es de mucha ayuda en caso del extravío de una placa. Consultar placas liberadas: este servicio permite que cualquier aplicación cliente pueda conocer cuales placas han sido liberadas en el sistema en un rango específico de fechas. Se tomo la decisión de crear este servicio debido a que una oficina puede consultar los códigos de las placas que han sido liberadas del departamento de placas en un rango de tiempo, permitiendo tener un control sobre las placas a las que se les ha dado salida. Pedido de placas: este servicio permite que cualquier aplicación cliente pueda conocer la cantidad de placas a solicitar por stock. Se tomo la decisión de crear este servicio debido a que una oficina puede tener la necesidad de consultar un servicio que le provea la cantidad de placas máxima que puede solicitar para cada tipo de placa de cada estado del país. 3.2.1 ITERACIÓN 10 Esta iteración está programada para la semana 10 de desarrollo comprendida entre el 23/06/2008 y el 27/06/2008. En esta iteración se realiza la primera etapa de la propuesta de migración a SOA del Sistema de Inventario de Placas. 3.2.1.1 SERVICIOS IMPLEMENTADOS Nombre consultarOficinas Descripción Se encarga de obtener la lista de las oficinas del INTTT, es decir, todas las oficinas que se encuentren en la entidad IN. Datos de entrada Ninguno Datos de Salida Retorna un arreglo de Oficinas. Contiene id_oficina, id_entidad y nombre_oficina TABLA 12: SERVICIO 1 – CONSULTAR OFICINAS CAPÍTULO 3: MARCO DE DESARROLLO 94 Nombre consultarStocks Descripción Se encarga de obtener la lista de los stocks pertenecientes a una oficina dada. Datos de entrada Id_oficina, id_entidad. Datos de Salida Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa, máximo, mínimo y existencia TABLA 13: SERVICIO 2 – CONSULTAR STOCKS Nombre consultarPlaca Descripción Se encarga de obtener los datos completos de una placa. Datos de entrada Id_placa. Datos de Salida Retorna un arreglo datos de una placa. Contiene id_placa, id_estado, nombre_estado, id_tipo_placa, tipo_placa, id_ubicacion, ubicacion, id_estatus. TABLA 14: SERVICIO 3 – CONSULTAR UNA PLACA Nombre consultarRegistros Descripción Se encarga de obtener la lista de las operaciones realizadas con una placa, además de obtener los datos del usuario que realizo la operación. Datos de entrada Id_placa. Datos de Salida Retorna un arreglo de registros de una placa. Contiene id_placa, operacion, fecha, nombre_usuario, apellido_usuario, nombre_oficina, descripcion TABLA 15: SERVICIO 4 – CONSULTAR REGISTROS DE UNA PLACA Los servicios desarrollados que tienen mayor importancia en esta iteración son los de consultar una placa y consultar registros, debido a que estos permitirán que se pueda visualizar en una aplicación cliente, los datos y el registro de las operaciones realizadas con una determinada placa. Esto servirá al momento de realizar una auditoría de usuario o al momento de tener una traza de las operaciones realizadas con una placa antes de ser asignada a un vehículo especifico por parte del departamento de informática del INTTT. CAPÍTULO 3: MARCO DE DESARROLLO 95 Como ejemplo de acceso a los servicios se desarrollo una aplicación cliente de prueba que mostrara los resultados deseados por el usuario final de la misma. El código fuente intradocumentado se entregó al departamento de informática del INTTT para facilitar el entendimiento y la reutilización en caso de que se acepte la propuesta de migración a SOA. En la siguiente figura podemos observar la interfaz de la aplicación cliente de ejemplo con la funcionalidad de consultar una placa al detalle, teniendo acceso a los servicios de consulta de una placa y consulta del registro de una placa, una vez ingresado el parámetro de entrada, que en este caso es la placa de código AA000AA correspondiente al tipo de placa de vehículos particulares para el Distrito Capital. FIGURA 50: INTERFAZ – SERVICIO PARA CONSULTAR UNA PLACA AL DETALLE 3.2.2 ITERACIÓN 11 Esta iteración está programada para la semana 11 de desarrollo comprendida entre el 30/06/2008 y el 04/07/2008. En esta iteración se realiza la segunda etapa de la propuesta de migración a SOA del Sistema de Inventario de Placas. 3.2.2.1 SERVICIOS IMPLEMENTADOS Nombre consultarPlacas Descripción Se encarga de obtener una lista con los datos completos de una placa o de un lote de placas. CAPÍTULO 3: MARCO DE DESARROLLO 96 Datos de entrada Id_placa, desde, hasta. Donde desde y hasta son los códigos de las placas que marcan el comienzo y el fin de un lote de placas. Datos de Salida Retorna un arreglo de datos de una placa o de un lote de placas. Contiene id_placa, id_tipo_placa, id_estado, id_estatus, ubicacion, id_oficina, tipo_placa, estado, nombre_oficina. TABLA 16: SERVICIO 5 – CONSULTAR PLACAS Nombre consultar_detalle_carga Descripción Se encarga de obtener una lista con los códigos de las placas que han sido cargadas en el departamento de placas en un determinado rango de tiempo. Datos de entrada fecha_inicio, fecha_fin. Datos de Salida Retorna un arreglo de placas cargadas en un rango de tiempo. Contiene id_placa. TABLA 17: SERVICIO 6 – CONSULTAR PLACAS CARGADAS Nombre consultar_detalle_liberacion Descripción Se encarga de obtener una lista con los códigos de las placas que han sido liberadas del departamento de placas en un determinado rango de tiempo. Datos de entrada fecha_inicio, fecha_fin. Datos de Salida Retorna un arreglo de placas liberadas en un rango de tiempo. Contiene id_placa. TABLA 18: SERVICIO 7 – CONSULTAR PLACAS LIBERADAS Nombre pedidoPlacas Descripción Se encarga de obtener una lista con la cantidad de placas que se pueden solicitar para cada stock de la oficina seleccionada. Datos de entrada Id_oficina, id_entidad Datos de Salida Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa y cantidad. TABLA 19: SERVICIO 8 – PEDIDO DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 97 Entre los servicios desarrollados en esta iteración el que tiene mayor importancia es el de pedido de placas, debido a que permitirá que se pueda visualizar en una aplicación cliente, la cantidad de placas que necesita pedir la sede principal del INTTT a Horizonte Vías y Señales para tener el máximo de placas en los stocks del departamento de placas, garantizando de esta manera que siempre hayan placas disponibles para la liberación, ya sea hacia un operativo nacional, una oficina regional o hacia un determinado vehículo. Este servicio puede ser utilizado por el departamento del INTTT que se encargue de la relación entre el instituto y HVS. Como se menciono en la iteración 10, se desarrollo una aplicación cliente de prueba como ejemplo de acceso a los servicios webs desarrollados. En la siguiente figura podemos observar la interfaz de la aplicación cliente de ejemplo con la funcionalidad de pedido de placas. Antes de acceder a este servicio se debe pasar la oficina como parámetro de entrada, accediendo de esta manera al servicio de consulta de oficinas. Una vez seleccionada la oficina se muestra al usuario el estado, el tipo de placas y la cantidad a solicitar a HVS para tener todas las placas necesarias para satisfacer las necesidades del departamento de placas del INTTT. FIGURA 51: INTERFAZ – SERVICIO PARA REALIZAR UN PEDIDO DE PLACAS 3.2.2.2 DOCUMENTO WSDL A continuación se encuentra el código WSDL completo e intradocumentado (una vez por cada término encontrado) generado por medio de la librería nusoap versión CAPÍTULO 3: MARCO DE DESARROLLO 98 0.7.3. Este código es al que acceden las aplicaciones clientes para utilizar cualquier funcionalidad que presten los servicios definidos por medio de este lenguaje. <?xml version="1.0" encoding="ISO-8859-1"?> <!-- Se define la versión a utilizar de xml --> <definitions xmlns:SOAP- ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd= "http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="urn:servidor_soap" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl= "http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace= "urn:servidor_soap"> <types> <!-- Definición de los tipos de datos que se utilizaran en cada una de las funcionalidades que prestaran los servicios web --> <xsd:schema targetNamespace="urn:servidor_soap"> <!-- Las aplicaciones clientes se conectaran a servidor_soap.php?wsdl para acceder a los servicios web --> <xsd:import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> <xsd:import namespace="http://schemas.xmlsoap.org/wsdl/" /> <!-- Datos a importar para la creación de elementos --> <xsd:complexType name="Stock"> <!-- Creación de un arreglo de datos llamado stock --> <xsd:all> <xsd:element name="nombre_estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <!-- Elemento tipo cadena de texto, es obligatorio ingresar un solo valor --> <xsd:element name="descripcion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="maximo" type="xsd:int" maxOccurs="1" minOccurs="1"/> <!-- Elemento tipo entero, es obligatorio ingresar un solo valor --> <xsd:element name="minimo" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="existencia" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="cantidad" type="xsd:int" maxOccurs="1" minOccurs="1"/> </xsd:all> <!-- Elementos que conforman el arreglo Stock --> </xsd:complexType> <xsd:complexType name="lista_stocks"> <!-- Creación de un arreglo llamado lista_stocks --> <xsd:complexContent> <!-- Elemento de contenido complejo, se refiere a listas o a matrices --> <xsd:restriction base="SOAP-ENC:Array"> <!-- Se especifica que la lista de stocks contendra arreglos como elementos --> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Stock[]" maxOccurs="unbounded" minOccurs="0"/> <!-- lista_stocks solo contendrá elementos que sean del tipo complejo Stock definido anteriormente, puede contener de 0 a n elementos --> </xsd:restriction> CAPÍTULO 3: MARCO DE DESARROLLO 99 </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Oficina"> <!-- Creación de un arreglo de datos llamado Oficina --> <xsd:all> <xsd:element name="id_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_entidad" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> <!-- Elementos que conforman el arreglo Oficina --> </xsd:complexType> <xsd:complexType name="lista_oficinas"> <!-- Creación de un arreglo llamado lista_oficinas --> <xsd:complexContent> <!-- Elemento de contenido complejo, se refiere a listas o a matrices --> <xsd:restriction base="SOAP-ENC:Array"> <!-- Se especifica que la lista de oficinas contendra arreglos como elementos --> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Oficina[]" maxOccurs="unbounded" minOccurs="0"/> <!-- lista_oficinas solo contendrá elementos que sean del tipo complejo Oficina definido anteriormente, puede contener de 0 a n elementos --> </xsd:restriction> </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Placa"> <xsd:all> <xsd:element name="id_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_tipo_placa" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="tipo_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_ubicacion" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="ubicacion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_estatus" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> </xsd:complexType> <xsd:complexType name="lista_placas"> <xsd:complexContent> <xsd:restriction base="SOAP-ENC:Array"> CAPÍTULO 3: MARCO DE DESARROLLO 100 <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Placa[]" maxOccurs="unbounded" minOccurs="0"/> </xsd:restriction> </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Registro"> <xsd:all> <xsd:element name="id_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="operacion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="fecha" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_usuario" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="apellido_usuario" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="descripcion" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> </xsd:complexType> <xsd:complexType name="lista_registros"> <xsd:complexContent> <xsd:restriction base="SOAP-ENC:Array"> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Registro[]" maxOccurs="unbounded" minOccurs="0"/> </xsd:restriction> </xsd:complexContent> </xsd:complexType> </xsd:schema> </types> <!-- Se completo la definición de los tipos a utilizar en las funciones --> <message name="consultarStocksRequest"> <part name="id_oficina" type="xsd:string" /> <part name="id_entidad" type="xsd:string" /></message> <!-- Definición de los parámetros de entrada para la función consultarStocks --> <message name="consultarStocksResponse"> <part name="return" type="tns:lista_stocks" /></message> <!-- Definición del tipo de dato que se obtendrá como respuesta al usar la función consultarStocks --> <!-- Se utiliza tipo tns cuando el elemento de salida es un arreglo, lista o matriz --> <message name="pdfInventarioRequest"> <part name="lista_stocks" type="tns:lista_stocks" /></message> <message name="pdfInventarioResponse"></message> <message name="consultarOficinasRequest"></message> <!-- La función consultarOficinas no recibe parámetros de entrada --> <message name="consultarOficinasResponse"> <part name="return" type="tns:lista_oficinas" /></message> <!-- Definición del tipo de dato que se obtendrá como respuesta al usar la función consultarOficinas --> <message name="consultarPlacaRequest"> <part name="id_placa" type="xsd:string" /></message> <!-- Se utiliza tipo xsd cuando el elemento de salida es tipo cadena de texto o entero --> CAPÍTULO 3: MARCO DE DESARROLLO 101 <message name="consultarPlacaResponse"> <part name="return" type="tns:Placa" /></message> <message name="consultarRegistrosRequest"> <part name="id_placa" type="xsd:string" /> <part name="id_tipo_placa" type="xsd:int" /></message> <message name="consultarRegistrosResponse"> <part name="return" type="tns:lista_registros" /></message> <message name="consultarPlacasRequest"> <part name="id_placa" type="xsd:string" /> <part name="desde" type="xsd:string" /> <part name="hasta" type="xsd:string" /></message> <message name="consultarPlacasResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="consultar_detalle_cargaRequest"> <part name="fecha_inicio" type="xsd:string" /> <part name="fecha_fin" type="xsd:string" /></message> <message name="consultar_detalle_cargaResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="consultar_detalle_liberacionRequest"> <part name="fecha_inicio" type="xsd:string" /> <part name="fecha_fin" type="xsd:string" /></message> <message name="consultar_detalle_liberacionResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="pedidoPlacasRequest"> <part name="id_oficina" type="xsd:string" /> <part name="id_entidad" type="xsd:string" /></message> <message name="pedidoPlacasResponse"> <part name="return" type="tns:lista_stocks" /></message> <!-- Se completo la definición de los parametros de entrada y de las respuestas de cada función --> <portType name="servidor_soapPortType"> <!-- Asignación de los parámetros de entrada y de respuesta definidos anteriormente para cada una de las funciones --> <operation name="consultarStocks"> <!-- Se especifica el nombre de la función --> <documentation>Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa, maximo, minimo y existencia</documentation> <!-- Muestra al usuario final documentación para conocer los datos que contiene y los tipos de datos de salida de la función consultarStocks --> <input message="tns:consultarStocksRequest"/> <!-- Se agrega el mensaje definido para identificar los parámetros de entrada en consultarStocks --> <output message="tns:consultarStocksResponse"/> <!-- Se agrega el mensaje definido para identificar los tipos de datos de salida al usar la función consultarStocks--> </operation> <!-- Fin de la definición de la operación consultarStocks --> <operation name="pdfInventario"> <documentation>Se abre una nueva ventana con el pdf del inventario general de placas </documentation> <input message="tns:pdfInventarioRequest"/> <output message="tns:pdfInventarioResponse"/> </operation> <operation name="consultarOficinas"> <documentation>Retorna un arreglo de un arreglo de Oficina. Contiene id_oficina,id_entidad y nombre_oficina</documentation> CAPÍTULO 3: MARCO DE DESARROLLO 102 <input message="tns:consultarOficinasRequest"/> <output message="tns:consultarOficinasResponse"/> </operation> <operation name="consultarPlaca"> <documentation>Retorna los datos de una placa. Contiene id_placa, id_estado,nombre_estado, id_tipo_placa, tipo_placa, id_ubicacion, ubicacion, id_estatus</documentation> <input message="tns:consultarPlacaRequest"/> <output message="tns:consultarPlacaResponse"/> </operation> <operation name="consultarRegistros"> <documentation>Retorna un arreglo de registros de una placa. Contiene id_placa,operacion, fecha, nombre_usuario, apellido_usuario, nombre_oficina, descripcion </documentation> <input message="tns:consultarRegistrosRequest"/> <output message="tns:consultarRegistrosResponse"/> </operation> <operation name="consultarPlacas"> <documentation>Retorna un arreglo de datos de una placa o de un lote de placas. Contiene id_placa, id_tipo_placa, id_estado, id_estatus, ubicacion, id_oficina, tipo_placa, estado, nombre_oficina</documentation> <input message="tns:consultarPlacasRequest"/> <output message="tns:consultarPlacasResponse"/> </operation> <operation name="consultar_detalle_carga"> <documentation>Retorna un arreglo de placas cargadas en un rango de tiempo. Contiene id_placa</documentation> <input message="tns:consultar_detalle_cargaRequest"/> <output message="tns:consultar_detalle_cargaResponse"/> </operation> <operation name="consultar_detalle_liberacion"> <documentation>Retorna un arreglo de placas liberadas en un rango de tiempo. Contiene id_placa</documentation> <input message="tns:consultar_detalle_liberacionRequest"/> <output message="tns:consultar_detalle_liberacionResponse"/> </operation> <operation name="pedidoPlacas"> <documentation>Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa y cantidad a pedir</documentation> <input message="tns:pedidoPlacasRequest"/> <output message="tns:pedidoPlacasResponse"/> </operation> </portType> <!-- Se finaliza la asignación de los parámetros de entrada y de respuesta definidos para cada una de las funciones --> <binding name="servidor_soapBinding" type="tns:servidor_soapPortType"> <!-- Se especifica que servidor_soapBinding hará una referencia a un conjunto de datos por medio de un puerto --> <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/> <!-- Se define el protocolo de llamada a procedimiento remoto --> <operation name="consultarStocks"> CAPÍTULO 3: MARCO DE DESARROLLO 103 <!-- Se define la operación consultarStocks --> <soap:operation soapAction="urn:servidor_soap#consultarStocks" style="rpc"/> <!-- Al utilizar la operación consultarStocks se accede a la función consultarStocks del servidor soap por medio del protocolo rpc --> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle= "http://schemas.xmlsoap.org/soap/encoding/"/></output> <!--Se establece servidor_soap como nombre uniforme de recurso tanto para los datos de entrada como de salida - -> </operation> <operation name="pdfInventario"> <soap:operation soapAction="urn:servidor_soap#pdfInventario" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarOficinas"> <soap:operation soapAction="urn:servidor_soap#consultarOficinas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarPlaca"> <soap:operation soapAction="urn:servidor_soap#consultarPlaca" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarRegistros"> <soap:operation soapAction="urn:servidor_soap#consultarRegistros" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarPlacas"> <soap:operation soapAction="urn:servidor_soap#consultarPlacas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle= "http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> CAPÍTULO 3: MARCO DE DESARROLLO 104 <operation name="consultar_detalle_carga"> <soap:operation soapAction="urn:servidor_soap#consultar_detalle_carga" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultar_detalle_liberacion"> <soap:operation soapAction="urn:servidor_soap#consultar_detalle_liberacion" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="pedidoPlacas"> <soap:operation soapAction="urn:servidor_soap#pedidoPlacas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> </binding> <!-- Se terminan de establecer las referencias para cada una de las operaciones en servidor_soap --> <service name="servidor_soap"> <!-- El servicio web se accedera con el nombre de servidor_soap --> <port name="servidor_soapPort" binding="tns:servidor_soapBinding"> <soap:address location="http://localhost/inventario/servicios/servidor_soap.php"/> <!-- En este caso usamos como servidor a localhost, aqui se especifica el servidor que contendra el servicio web ademas del puerto de acceso, en este caso es el puerto 80 --> </port> </service> </definitions> FIGURA 52: DOCUMENTO WSDL 3.3 LOGROS ALCANZADOS A continuación se listan los logros alcanzados por el nuevo sistema, tanto a nivel de funcionalidades, como a nivel de repositorio de información e interfaz de usuarios. El sistema soporta el nuevo formato de placas de siete (7) dígitos, además de validar las placas con formato de seis (6) dígitos. Este último caso se da cuando el tipo de placa es tracción sangre o minusválidos. No existe redundancia de funcionalidades. Cada módulo tiene las funcionalidades necesarias para que el departamento de placas funcione de forma eficaz y eficiente. CAPÍTULO 3: MARCO DE DESARROLLO 105 El departamento de placas se comunica con la base de datos utilizada por el portal del INTTT para la asignación de vehículos, de forma tal que si una placa se encuentra reversada o asignada se tomará en cuenta en el sistema. Se generan reportes en formato PDF al realizar cualquier operación con placas, excepto al consultar placas ya que los datos aparecen en una vista del sistema. El sistema de inventario contiene un módulo de reportes, de forma tal que el usuario puede consultar cualquier información relacionada con los datos manejados en el inventario. El sistema permite la eliminación de: usuarios, equipos, stocks, ensambladoras, oficinas, espacio físico y placas. El usuario puede eliminar estos datos si y solo si ha ingresado datos erróneos y no se ha realizado ninguna operación previa con los mismos. La asignación de placas se realiza de forma manual debido a las necesidades del personal del departamento de placas por mantener el orden del almacén. La salida de placas se realiza de forma ordenada y automática, dando salida a las primeras placas ingresadas en el sistema. El inició de sesión se mantiene hasta que el usuario desee salir del sistema. Se termina una sesión en caso de que el usuario haya estado ausente por un determinado tiempo. Este tiempo es determinado por el departamento de informática del INTTT. El sistema muestra mensajes de alerta para cada operación realizada. En caso de que no exista un stock, o en caso de que la existencia en stock sea mayor que el máximo o menor que el mínimo, el sistema muestra un mensaje de alerta una vez iniciada la sesión. 106 CONCLUSIÓN El desarrollo de este trabajo especial de grado permitió la actualización tecnológica de software del sistema de inventario basado en una arquitectura orientada a servicios para el departamento de placas del Instituto Nacional de Tránsito y Transporte Terrestre, logrando así la puesta en producción del sistema. Debido a la aplicación del método de elicitación de requisitos para el desarrollo de sistemas de software, se pudo obtener toda la información necesaria para la actualización del sistema de inventario de placas, facilitando de esta forma el desarrollo del sistema, además de disponer de una serie de documentos entregables que servirán de apoyo en el momento de realizar un futuro mantenimiento en el sistema. Motivados por la urgencia presentada por el INTTT para el desarrollo del sistema de inventario de placas, se escogió aplicar la metodología de desarrollo ágil, debido a que esta metodología nos permitía un alto nivel de flexibilidad al momento de la estructuración del tiempo de desarrollo del sistema. El uso de esta metodología nos permitió liberar por primera vez el sistema bajo una arquitectura cliente-servidor contemplando todas las funcionalidades deseadas por el INTTT, para luego liberar por segunda vez el sistema bajo una arquitectura orientada a servicios. El uso de esta metodología fue de gran ayuda debido a que se pudo realizar la migración del sistema sin afectar el tiempo de liberación deseado por el INTTT. El uso del patrón de diseño MVC desde el comienzo del desarrollo del sistema de inventario de placas, facilitó en gran medida la migración del sistema hacia una arquitectura orientada a servicios, ya que se pudo realizar la reutilización de muchas de las funcionalidades implementadas en el sistema basado en una arquitectura cliente-servidor. Podemos concluir que el objetivo del trabajo especial de grado, se cumplió perfectamente, ya que se logró recolectar información por medio de entrevistas con los usuarios finales del sistema para así permitir el diseño y el desarrollo del mismo utilizando un método de desarrollo ágil en once (11) iteraciones, en un contexto de trabajo real, cubriendo así todos los requerimientos identificados en el departamento de placas del INTTT, además de ofrecer una actualización que permite la reutilización de las funcionalidades permitiendo un alto grado de escalabilidad y flexibilidad del sistema. 107 RECOMENDACIONES Debido a que el sistema de inventario de placas fue puesto en producción solo en la sede principal del INTTT, se recomienda el uso de los servicios propuestos para tener un mejor acoplamiento entre los diferentes sistemas de los departamentos de esta oficina, de esta manera se podrán realizar las consultas necesarias para realizar una correcta solicitud de placas a HVS, de forma que lleguen solo las placas necesarias al INTTT, así como realizar la entrega de placas a empresas y oficinas, de forma que no queden vacios los stocks correspondientes a las placas entregadas. Así mismo, se tienen tres recomendaciones de posibles trabajos futuros que puede realizar la institución utilizando como base el sistema desarrollado. Las recomendaciones son las siguientes: 1. Crear una VPN para permitir el acceso de las 69 oficinas al sistema de inventario de placas alojado en el servidor de la sede principal, de forma tal que los usuarios realicen las operaciones por medio de la página web, teniendo una base de datos centralizada. 2. Permitir el acceso al sistema de inventario en cada una de las 69 oficinas, instalando una base de datos distribuida, de forma tal que las oficinas del INTTT se comuniquen por medio de vistas. De esta manera se descentralizaría la llegada y la asignación de las placas, reduciendo el trabajo realizado por el personal del departamento de placas debido a que se ocuparían de manejar únicamente las placas del estado correspondiente. 3. Continuar con el desarrollo de la propuesta de servicios web, creando servicios para cada una de las funcionalidades del sistema y de esta manera diseñar una aplicación cliente para cada una de las 69 oficinas regionales del INTTT que accederá a los servicios web definidos, para así encargarse de la llegada, del almacenamiento y de la entrega de placas. Por último, se recomienda tomar el sistema de inventario de placas como ejemplo para la creación de nuevos sistemas y como base para la modificación de sistemas ya existentes, para así lograr una actualización tecnológica y una mejor integración de los sistemas correspondientes a cada departamento de la institución. 108 REFERENCIAS BIBLIOGRÁFICAS [1] Instituto de Tránsito y Transporte Terrestre http://www.inttt.gov.ve/ Consultado: Junio de 2008 [2] Horizontes Vías y Señales http://www.hvsca.com/ Consultado: Junio de 2008 [3] Decreto Ley Número 37.332 del 26 de noviembre del 2001 [4] Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988 [5] Metodología para la Elicitación de Requisitos de Sistemas de Software Versión 2.1, Autores: Amador Durán, Beatriz Bernárdez Universidad de Sevilla, Octubre de 2000 [6] Modelación Ágil http://www.agilemodeling.com/ Consultado: Junio de 2008 [7] Arquitectura Orientada a Servicios http://www.wadooa.com/doku.php/soa Consultado: Junio de 2008 [8] Componentes del Modelo MVC http://www.net2u.es/index.php/mod.pags/mem.listado Consultado: Junio de 2008 [9] Proyecto Ciclope. Modelo MVC http://www.ciclope.info/doc/mvc/index.php?action=model Consultado: Junio de 2008 [10] Microsoft, Beneficios del Modelo MVC http://www.microsoft.com/spanish/msdn/comunidad/mtj.net/voices/mtj_3317. asp Consultado: Junio de 2008 REFERENCIAS BIBLIOGRÁFICAS 109 [11] PHP http://ve2.php.net/manual/es/intro-whatcando.php Consultado: Junio de 2008 [12] Sybase ASE http://www.sybasease.info/ase.htm Consultado: Junio de 2008 [13] Ingeniería de Software Orientada a Objetos con UML, JAVA e Internet Versión 2.1, Autor: Alfredo Weitzenfeld Editorial Thomson. Capítulo: 10 [14] Pattern-Oriented Software Architecture – A System of Patterns, Autor: Frank Buschmann. [15] PHP | Architect's Guide to PHP Design Patterns, Autor: Jason E. Sweat. [16] El libro Agile Project Management with Scrum, Autor: Ken Schwaber. [17] Practices of an Agile Developer: Working in the Real World, Autor: Venkat Subramaniam y Andy HuntMicrosoft Word - Tesis version final2.doc CARACAS, OCTUBRE 2008 UNIVERSIDAD CENTRAL DE VENEZUELA FACULTAD DE CIENCIAS ESCUELA DE COMPUTACIÓN OPCIÓN PROFESIONAL: APLICACIONES CON LA TECNOLOGÍA INTERNET ACTUALIZACIÓN TECNOLÓGICA PARA EL INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE. CASO DE ESTUDIO SISTEMA DE INVENTARIO DE PLACAS Trabajo Especial de Grado presentado ante la Ilustre Universidad Central de Venezuela Por los bachilleres: Gómez, Laura C.I.: 12.544.293 Calvo, Carlos C.I.: 17.285.319 Tutor Académico: Prof. Nora Montaño AGRADECIMIENTOS A nuestros padres, por el apoyo brindado, por la formación, por fomentar nuestros deseos de superación y del saber, además de enseñarnos que la perseverancia y el esfuerzo son el mejor medio para lograr nuestros objetivos. A nuestra tutora, Nora Montaño, por su asesoramiento y estímulo para seguir adelante, por su predisposición permanente en aclarar nuestras dudas y por todas sus sugerencias y observaciones críticas durante la redacción de este trabajo especial de grado. Al personal del Instituto de Tránsito y Transporte Terrestre, por darnos la bienvenida en su entorno de trabajo, por asesorarnos con nuestras dudas y darnos toda la información necesaria para el desarrollo del sistema, por abrirnos un espacio en el departamento de informática equipándonos con 2 computadoras con los programas necesarios para el desarrollo de la tesis. A Virginia Gómez, por aceptar nuestra propuesta de trabajo especial de grado en el INTTT, por el apoyo incondicional y por brindarnos un ambiente cómodo de trabajo. A Anacora Castro, por el apoyo prestado en el INTTT al momento de desarrollar, probar, liberar y poner en producción el sistema. A Iván Flores, por ayudarnos con la migración del sistema hacia una arquitectura orientada a servicios, por los consejos y las observaciones durante el desarrollo del sistema. RESUMEN El INTTT pretende incorporar la nueva forma de identificación de vehículos a mediados del 2008 (códigos de placas de 7 dígitos) para suplantar el viejo sistema (códigos de placas de 6 dígitos), se ha sugerido la descentralización del sistema actual de almacenamiento de identificaciones ya que el INTTT cuenta con 69 oficinas distribuidas a lo largo del país, por lo tanto, el nuevo sistema de identificación de vehículos pudiera masificarse en todo el país de manera rápida y efectiva. Se propone el desarrollo de una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor con una propuesta de migración hacia una arquitectura orientada a servicios, que sea accesible y fácil de usar, de manera tal, que pueda implantarse en cada una de las oficinas del INTTT y que permita agilizar la masificación de la nueva forma de identificación vehicular. TABLA DE CONTENIDO INTRODUCCIÓN ....................................................................................................................... 8 CAPÍTULO 1: CONTEXTO DEL TRABAJO .............................................................................. 11 1.1 DESCRIPCIÓN ORGANIZACIONAL .................................................................................... 11 1.1.1 INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE (INTTT) .................... 11 1.1.2 HORIZONTES DE VÍAS Y SEÑALES C.A. (HVS) ........................................................... 12 1.2 VEHÍCULOS .................................................................................................................. 13 1.2.1 CLASIFICACIÓN SEGÚN LA TOPOLOGÍA DE LOS VEHÍCULOS ........................................... 13 1.3 PLACAS O MATRICULAS VEHICULARES ........................................................................... 16 1.3.1 CLASIFICACIÓN DE LAS PLACAS ................................................................................ 16 1.4 DESCRIPCIÓN DE LA SITUACIÓN ACTUAL ........................................................................ 22 1.4.1 MODULO DE MANTENIMIENTO .................................................................................. 23 1.4.2 MÓDULO DE OPERACIONES ..................................................................................... 24 1.4.3 MÓDULO DE REPORTES .......................................................................................... 27 1.5 PLANTEAMIENTO DEL PROBLEMA .................................................................................. 30 1.5.1 LIMITACIONES Y ALCANCES DEL SISTEMA ACTUAL .................................................... 30 1.5.2 BASE DE DATOS ..................................................................................................... 32 1.5.3 REQUERIMIENTOS DEL SISTEMA .............................................................................. 33 CAPÍTULO 2: MARCO METODOLÓGICO ............................................................................... 34 2.1 MÉTODO PARA LA ELICITACIÓN DE REQUISITOS DE SISTEMAS DE SOFTWARE .................... 34 2.2 MÉTODO DE DESARROLLO ÁGIL .............................................................................. 39 2.2.1 AGILE MODEL DRIVEN DEVELOPMENT (AMDD) ....................................................... 40 2.2.2 PRINCIPIOS BÁSICOS .............................................................................................. 42 2.3 ARQUITECTURA ORIENTADA A SERVICIOS ...................................................................... 43 2.3.1 DEFINICIÓN ............................................................................................................ 43 2.3.2 BENEFICIOS ........................................................................................................... 44 2.3.3 PRINCIPIOS ............................................................................................................ 44 2.3.4 DISEÑO Y DESARROLLO .......................................................................................... 46 2.3.5 PROTOCOLOS DE SERVICIOS WEB .......................................................................... 46 2.4 PATRÓN DE DISEÑO MVC (MODELO VISTA CONTROLADOR) ............................................ 47 2.4.1 BENEFICIOS ............................................................................................................ 48 2.5 PROCESO DE PRUEBA .................................................................................................... 49 2.5.1 TIPOS DE PRUEBAS ............................................................................................................ 49 2.5.2 NIVEL DE PRUEBAS .......................................................................................................... 50 2.6 MÉTODO DE DESARROLLO PROPUESTO ............................................................................ 51 CAPÍTULO 3: MARCO DE DESARROLLO ............................................................................... 54 3.1 METODOLOGÍA DE DESARROLLO (ITERACIÓN 0) .............................................................. 54 3.1.1 ITERACIÓN 1 ...................................................................................................................... 56 TABLA DE CONTENIDO 3.1.2 ITERACIÓN 2 ...................................................................................................................... 62 3.1.3 ITERACIÓN 3 ...................................................................................................................... 66 3.1.4 ITERACIÓN 4 ...................................................................................................................... 70 3.1.5 ITERACIÓN 5 ...................................................................................................................... 73 3.1.6 ITERACIÓN 6 ...................................................................................................................... 76 3.1.7 ITERACIÓN 7 ...................................................................................................................... 81 3.1.8 ITERACIÓN 8 ...................................................................................................................... 84 3.1.9 ITERACIÓN 9 ...................................................................................................................... 88 3.1.10LIBERACIÓN DEL SISTEMA DE INVENTARIO DE PLACAS .................................................... 91 3.1.11PRODUCCIÓN .......................................................................................................... 91 3.2 ACTUALIZACIÓN DEL SISTEMA ...................................................................................... 92 3.2.1 ITERACIÓN 10 .................................................................................................................... 93 3.2.2 ITERACIÓN 11 .................................................................................................................... 95 3.3 LOGROS ALCANZADOS ............................................................................................... 104 CONCLUSIÓN ................................................................................................................................... 106 RECOMENDACIONES ..................................................................................................................... 107 REFERENCIAS BIBLIOGRÁFICAS ................................................................................................ 108 INDICE DE FIGURAS FIGURA 1: LOGOTIPO INTTT ................................................................................................................ 12 FIGURA 2: LOGOTIPO HVS ................................................................................................................... 13 FIGURA 3: PLACA PARTICULAR - TERCERA GENERACIÓN .................................................................... 18 FIGURA 4: UBICACIÓN FÍSICA ................................................................................................................ 25 FIGURA 5: CARGA DE PLACAS CON LECTOR ......................................................................................... 26 FIGURA 6: DIAGRAMA E/R - SISTEMA ACTUAL ...................................................................................... 32 FIGURA 7: PLANTILLA Y PATRONES-L PARA OBJETIVOS ....................................................................... 35 FIGURA 8: PLANTILLA Y PATRONES-L PARA REQUISITOS DE ALMACENAMIENTO DE INFORMACIÓN .... 36 FIGURA 9: PLANTILLA Y PATRONES-L PARA ACTORES ......................................................................... 36 FIGURA 10: PLANTILLA Y PATRONES-L PARA REQUISITOS FUNCIONALES (CASOS DE USO) ............... 37 FIGURA 11: PLANTILLA Y PATRONES-L PARA REQUISITOS NO FUNCIONALES...................................... 38 FIGURA 12: MATRIZ DE RASTREABILIDAD ............................................................................................. 38 FIGURA 13: TAREAS DE ELICITACIÓN DE REQUISITOS .......................................................................... 39 FIGURA 14: TAREAS DE ELICITACIÓN DE REQUISITOS .......................................................................... 40 FIGURA 15: AMDD - CICLO DE VIDA .................................................................................................... 41 FIGURA 16: AMDD A TRAVÉS DEL CICLO DE VIDA DE DESARROLLO ÁGIL ........................................... 41 FIGURA 17: LOS REQUERIMIENTOS AGILES CAMBIAN LA GESTIÓN DEL PROCESO ............................... 42 FIGURA 18: PATRÓN DE DISEÑO MVC ................................................................................................ 47 FIGURA 19: MAPA DEL SITIO ................................................................................................................ 55 FIGURA 20: DIAGRAMA E/R .................................................................................................................. 57 FIGURA 21: MODELO DE DATOS ........................................................................................................... 59 FIGURA 22: ESTRUCTURA DEL SISTEMA .............................................................................................. 60 FIGURA 23: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR USUARIOS.................... 62 FIGURA 24: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR EQUIPOS ...................... 64 FIGURA 25: MAPA DEL SITIO – ITERACIÓN 2 ........................................................................................ 64 FIGURA 26: INTERFAZ – AGREGAR USUARIO ....................................................................................... 65 FIGURA 27: DIAGRAMAS DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR STOCKS ..................... 66 FIGURA 28: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR ESPACIOS FÍSICOS ...... 68 FIGURA 29: MAPA DEL SITIO – ITERACIÓN 3 ........................................................................................ 68 FIGURA 30: INTERFAZ – CONSULTAR ESPACIO FÍSICO ....................................................................... 69 FIGURA 31: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – CARGA DE PLACAS ........................................................................................................................................ 70 FIGURA 32: MAPA DEL SITIO – ITERACIÓN 4 ........................................................................................ 72 FIGURA 33: INTERFAZ – CARGA DE PLACAS ........................................................................................ 72 FIGURA 34: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 1.... 74 FIGURA 35: MAPA DEL SITIO – ITERACIÓN 5 ........................................................................................ 75 FIGURA 36: INTERFAZ – LISTA PRELIMINAR ......................................................................................... 76 FIGURA 37: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – LIBERAR PLACAS ........................................................................................................................................ 77 FIGURA 38: MAPA DEL SITIO – ITERACIÓN 6 ........................................................................................ 78 FIGURA 39: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 1 ............................ 79 FIGURA 40: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 2 ............................ 79 FIGURA 41: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 2.... 81 ÍNDICE DE FIGURAS FIGURA 42: MAPA DEL SITIO – ITERACIÓN 7 ........................................................................................ 83 FIGURA 43: INTERFAZ – DEVOLUCIÓN DE PLACAS .............................................................................. 83 FIGURA 44: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 185 FIGURA 45: MAPA DEL SITIO – ITERACIÓN 8 ........................................................................................ 86 FIGURA 46: INTERFAZ – REPORTE DE PLACAS POR UBICACIÓN FÍSICA ............................................. 87 FIGURA 47: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 288 FIGURA 48: MAPA DEL SITIO – ITERACIÓN 9 ........................................................................................ 90 FIGURA 49: INTERFAZ – REPORTE DE EXISTENCIA DETALLADA DE PLACAS ...................................... 90 FIGURA 50: INTERFAZ – SERVICIO PARA CONSULTAR UNA PLACA AL DETALLE ................................... 95 FIGURA 51: INTERFAZ – SERVICIO PARA REALIZAR UN PEDIDO DE PLACAS ........................................ 97 FIGURA 52: DOCUMENTO WSDL ....................................................................................................... 104 INDICE DE TABLAS TABLA 1: GENERACIONES DE PLACAS SEGÚN FECHA .......................................................................... 16 TABLA 2: RESUMEN DE PLACAS DE TERCERA GENERACIÓN ................................................................ 21 TABLA 3: RELACIÓN CARÁCTER / ESTADO USADO EN LAS PLACAS ...................................................... 21 TABLA 4: RF – AGREGAR USUARIO ..................................................................................................... 63 TABLA 5: RF – AGREGAR STOCK ......................................................................................................... 67 TABLA 6: RF – CARGAR PLACAS .......................................................................................................... 72 TABLA 7: RF – CONSULTAR PLACAS .................................................................................................... 75 TABLA 8: RF – LIBERAR PRODUCCIÓN................................................................................................. 78 TABLA 9: RF – MODIFICAR UBICACIÓN DE LAS PLACAS ...................................................................... 82 TABLA 10: RF – REPORTE UBICACIÓN FÍSICA DE PLACAS .................................................................. 86 TABLA 11: RF – REPORTE EXISTENCIA GENERAL DE PLACAS ........................................................... 89 TABLA 12: SERVICIO 1 – CONSULTAR OFICINAS ................................................................................. 93 TABLA 13: SERVICIO 2 – CONSULTAR STOCKS ................................................................................... 94 TABLA 14: SERVICIO 3 – CONSULTAR UNA PLACA ............................................................................. 94 TABLA 15: SERVICIO 4 – CONSULTAR REGISTROS DE UNA PLACA ..................................................... 94 TABLA 16: SERVICIO 5 – CONSULTAR PLACAS .................................................................................... 96 TABLA 17: SERVICIO 6 – CONSULTAR PLACAS CARGADAS ................................................................. 96 TABLA 18: SERVICIO 7 – CONSULTAR PLACAS LIBERADAS ................................................................. 96 TABLA 19: SERVICIO 8 – PEDIDO DE PLACAS ...................................................................................... 96 8 INTRODUCCIÓN En las últimas décadas, el acelerado incremento del volumen de vehículos automotores en el país, ha ocasionado que se estudien nuevas formas de identificación vehicular. Los avances tecnológicos y de información han proporcionado una forma eficiente de identificación, la cual pretende albergar alrededor de 350.000.000 de identificaciones posibles, solventando así, la situación generada por el incremento de vehículos en el país. El Instituto Nacional de Tránsito y Transporte Terrestre (INTTT) es el ente gubernamental encargado de llevar un registro de las distintas acciones que se realizan sobre los vehículos a lo largo y ancho de país. Entre otros mecanismos para llevar el control, utiliza la identificación de los vehículos. Actualmente el INTTT almacena los identificadores en un único almacén, ubicado en la sede principal, antes de asignarlo a los vehículos, por lo cual, se requiere de varios días para trasladar las identificaciones de los vehículos de la sede principal, ubicada en Caracas (El Marqués), a las zonas del país donde se requieran identificadores. Debido a que el INTTT pretende incorporar la nueva forma de identificación de vehículos a mediados del 2008 para suplantar el viejo sistema, se ha sugerido la descentralización del sistema actual de almacenamiento de identificaciones ya que el INTTT cuenta con 69 oficinas distribuidas a lo largo del país, por lo tanto, el nuevo sistema de identificación de vehículos pudiera masificarse en todo el país de manera rápida y efectiva. En la actualidad, el sistema que maneja el proceso de almacenamiento de identificaciones es una aplicación stand-alone. Esta aplicación no fue diseñada para manejar la nueva forma de identificación vehicular, por lo que se plantea la creación de una nueva aplicación que le permita al personal del departamento de placas realizar sus tareas de manera automatizada, basándonos para ello en las carencias y las fortalezas del sistema actual, así como también, en las experiencias y los nuevos requerimientos del personal del departamento de placas. Para el levantamiento de información se realizaron visitas a las oficinas de registro de vehículos, lo cual permitió conocer como se realiza la asignación de identificaciones a los vehículos y posteriormente se pudo observar el proceso de almacenamiento de identificaciones en el almacén; gracias a esto y a la colaboración del personal, se identificaron las funcionalidades más importantes que deberán ser consideradas a la hora de desarrollar una nueva aplicación. Tomando en cuenta la importancia de cada una de las funcionalidades identificadas se propone el desarrollo de una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor INTRODUCCIÓN 9 con una propuesta de migración hacia una arquitectura orientada a servicios, que sea accesible y fácil de usar, de manera tal, que pueda implantarse en cada una de las oficinas del INTTT y que permita agilizar la masificación de la nueva forma de identificación vehicular, además de promover la actualización tecnológica de otros sistemas de la institución. Los beneficios que aportará la actualización tecnológica propuesta al INTTT son los siguientes: Automatización de los procesos identificados, Descentralización del sistema de almacenamiento de identificaciones vehiculares, Ahorro de tiempo a la hora de asignar una identificación a un vehículo, Alto rendimiento en el dominio manejado, Manejo de reportes. Promover la actualización tecnológica de los sistemas del INTTT. Para el desarrollo de este trabajo, fue necesario revisar algunos aspectos que conforman la base teórica y práctica para comprender el dominio del problema. Este documento se organizó de la siguiente manera: El primer capítulo, describe el contexto del trabajo, detallando información sobre las organizaciones relacionadas con la producción y asignación de identificaciones vehiculares en el país, así como también, se describe la situación actual y el planteamiento del problema. Además, en este capítulo se definen los identificadores vehiculares, su ciclo de vida, clasificación y descripción de las características principales, así como también, la importancia de las oficinas, operativos y ensambladoras, desde el punto de vista del INTTT. El segundo capítulo, describe la metodología para la elicitación de requisitos de sistemas de software, utilizada para el levantamiento de la información, sus principales fundamentos y la descripción de los modelos que son utilizados en el desarrollo de la aplicación, además de describir el método de desarrollo ágil sobre una arquitectura cliente-servidor y el desarrollo de un patrón de diseño MVC, utilizando PHP como lenguaje de programación, Sybase y MySQL como servidores de bases de datos y Apache como servidor de aplicaciones Web, de manera tal, que se pueda migrar fácilmente hacia una arquitectura orientada a servicios bajo SOAP. Además, se describen las estrategias, planeación, construcción y ejecución de las pruebas que se sustentarán en el desarrollo de la aplicación. INTRODUCCIÓN 10 Por último, en el tercer capítulo, se muestra el marco de desarrollo del sistema abarcado por el trabajo especial de grado, explicando las funcionalidades implementadas para cada iteración de desarrollo del sistema por medio de diagramas de casos de uso, interfaces y fases de prueba, para satisfacer los requerimientos del mismo. Además, se propone la migración del sistema utilizando una arquitectura orientada a servicios. 11 CAPÍTULO 1: CONTEXTO DEL TRABAJO En este capítulo se describen las organizaciones relacionadas con el proceso de creación y asignación de identificadores vehiculares, la situación actual del proceso de almacenamiento de placas en el INTTT para así identificar en el planteamiento del problema, los requerimientos, objetivos, alcances y limitaciones en el desarrollo de este trabajo. 1.1 DESCRIPCIÓN ORGANIZACIONAL En esta sección se presentara información sobre las organizaciones involucradas en el proceso de almacenamiento de identificadores vehiculares tales como el INTTT y Horizontes de Vías y Señales C.A. 1.1.1 INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE (INTTT) Según el Artículo 15 del Capítulo II, Título II, del Decreto Ley Numero 37.332 del 26 de noviembre del 2001, el INTTT es una entidad con personalidad jurídica y patrimonio propio e independiente de la República, con autonomía financiera, administrativa, técnica y organizativa, adscrita al Ministerio de Infraestructura (MINFRA), que habría de sustituir al Servicio Autónomo de Transporte y Tránsito Terrestre (SETRA), lo que permitiría contar con unas autoridades administrativas técnicamente calificadas, con autonomía suficiente para ejercer sus competencias, sin menoscabo de la vinculación con el órgano de planificación y elaboración de políticas públicas en materia de tránsito y transporte terrestre, representado por el Ejecutivo Nacional. [1] Las competencias del INTTT tienen un respaldo jurídico que va desde la propia Constitución de la República Bolivariana de Venezuela hasta la Ley Orgánica de Licitaciones y su Reglamento, pasando por la el Decreto con Fuerza de Ley de Tránsito y Transporte Terrestre que creó el Instituto, el Decreto sobre Organización y Funcionamiento de la Administración Pública, la Ley de Simplificación de Trámites Administrativos, la Ley Orgánica de Régimen Presupuestario y su Reglamento y la Ley Orgánica de la Contraloría General de la República del Sistema Nacional de Control Fiscal. CAPÍTULO 1: CONTEXTO DEL TRABAJO 12 1.1.1.1 LOGOTIPO FIGURA 1: LOGOTIPO INTTT 1.1.1.2 MISIÓN Regular, controlar y ejecutar políticas en materia de tránsito y transporte terrestre, a fin de garantizar la comodidad, calidad, eficiencia y seguridad para los usuarios, bajo los principios de honestidad, transparencia, celeridad, eficacia, rendición de cuentas y responsabilidad en la ejecución de sus funciones. 1.1.1.3 VISIÓN Ser una institución administrativa y técnicamente calificada, de vanguardia en materia de tránsito y transporte terrestre, orientada por los principios de calidad, eficiencia y eficacia, con honestidad y mística, generando confianza y satisfacción en el usuario. 1.1.1.4 OBJETIVO GENERAL Según el Artículo 16 del Capítulo II, Título II, del Decreto Ley Numero 37.332 del 26 de noviembre del 2001, el INTTT tiene como objetivo la regulación del tránsito y del transporte terrestre, a los fines de garantizar el derecho al libre tránsito de personas y de bienes por todo el territorio nacional; la realización de la actividad económica del transporte y de sus servicios conexos, por vías públicas y privadas, así como lo relacionado con la planificación, ejecución, gestión, control y infraestructura vial, todo lo cual conforma el sistema integral y coordinado de transporte terrestre nacional. 1.1.2 HORIZONTES DE VÍAS Y SEÑALES C.A. (HVS) HVS es una empresa de Ingeniería de Transito dedicada a la asesoría, fabricación, trasporte e instalación de elementos de señalización vial, vertical y horizontal, así como de señalización de seguridad industrial y publicidad comercial siendo de este modo la empresa líder de ingeniería de transito del país. [2] CAPÍTULO 1: CONTEXTO DEL TRABAJO 13 Inicio sus operaciones en Caracas, Distrito Federal en el año 1985, para posteriormente, establecerse en la ciudad de Barquisimeto, Estado Lara, donde cuenta con sus plantas de producción y oficinas administrativas. Su mercado abarca los sectores públicos, privados y petroleros entre los que se puede mencionar, Gobernaciones, Alcaldías, Institutos de Vialidad, Fundaciones, Concesionarias Viales, Constructoras y cualquier otra industria u organismo vinculado a la ingeniería de transito. En la actualidad, posee varias sucursales en varias zonas del país, y a nivel internacional cuenta con oficinas en República Dominicana y Costa Rica donde se ejecuta obras de señalización y demarcación. HVS, conjuntamente con el INTTT son los entes encargados de diseñar la 3º generación de placas. Actualmente, HVS es la empresa que se encarga de la fabricación y entrega de las placas al INTTT, así como también, a las empresas que tengan convenios operativos con el INTTT. 1.1.2.1 LOGOTIPO FIGURA 2: LOGOTIPO HVS 1.2 VEHÍCULOS Según el Artículo 5 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, se considera vehículo todo artefacto o aparato destinado al transporte de personas o cosas, capaz de circular por las vías públicas o privadas destinadas al uso público permanente o casual. [4] 1.2.1 CLASIFICACIÓN SEGÚN LA TOPOLOGÍA DE LOS VEHÍCULOS Según el Artículo 27 del Capítulo II, Título III, del Decreto Ley Número 37.332 del 26 de noviembre del 2001, los vehículos de tránsito y transporte terrestre se clasifican en: 1. Tracción a sangre. 2. A motor. [3] CAPÍTULO 1: CONTEXTO DEL TRABAJO 14 1.2.1.1 VEHÍCULOS DE TRACCIÓN DE SANGRE Según el Artículo 6 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, se entiende por vehículos de tracción de sangre aquellos cuya fuerza de propulsión proviene del ser humano o de bestias de tiro. Según el Artículo 9 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, los vehículos de tracción de sangre se clasifican en vehículos de tracción humana y vehículos de tracción animal. Los vehículos de tracción humana, a su vez, se clasifican en: Vehículos cuyo conductor es transportado por el vehículo, tales como bicicletas, triciclos, patinetas o patines, Vehículos cuyo conductor no es transportado por el vehículo, como los carros de mano y las carretillas. 1.2.1.2 VEHÍCULOS DE MOTOR Según el Artículo 6 del Capítulo I, Título II, del Reglamento de la Ley de Tránsito Terrestre, Numero 5420 del 26 de junio del 1988, se entiende por vehículos de motor los dotados de medios de propulsión mecánicos, propios o independientes. Según el Artículo 10 y 11 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los vehículos de motor se clasifican en: 1. Motocicletas: todo vehículo de motor de tipo bicicleta o triciclo. 2. Automóviles: todos aquellos vehículos destinados al transporte de personas y cuya capacidad no es mayor de nueve (9) puestos. Según el Artículo 13 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los automóviles se clasifican de la siguiente manera: 2.1 Automóviles de pasajeros sin fines de lucro: aquellos destinados al uso privado de su dueño, entendiéndose también por estos, todo vehículo conducido por la persona que lo alquila, quien lo destina a su uso privado. 2.2 Automóviles de pasajeros con fines de lucro: aquellos destinados al transporte de pasajeros mediante el pago de una cantidad de dinero por el servicio prestado. CAPÍTULO 1: CONTEXTO DEL TRABAJO 15 3. Minibuses: Los vehículos destinados al transporte de personas con capacidad de quince (15) a treinta y dos (32) pasajeros sentados más conductor, doble rueda trasera y con una altura interior que permita la circulación de los pasajeros dentro del vehículo en forma erguida. 4. Autobuses: Los vehículos destinados al transporte de pasajeros con capacidad mayor de treinta y dos puestos (32). Según el Artículo 16 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los autobuses se clasifican de la siguiente manera: 2.3 Autobuses de uso público: se entiende por autobuses de uso público aquellos destinados al servicio público de pasajeros. 2.4 Autobuses de uso privado: todos aquellos autobuses que no sean de uso público. 5. Vehículos de carga. 6. Vehículos especiales: Todo vehículo autorizado para circular en condiciones particulares. Según el Artículo 17 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, los vehículos especiales se clasifican de la siguiente manera: 2.5 Vehículos de enseñanza: Aquellos destinados a dar lecciones para el manejo de vehículos. 2.6 Vehículos de Emergencia: Aquellos vehículos destinados a prestar servicios de urgencia. 2.7 Vehículos Escolares: Aquellos vehículos destinados al transporte de estudiantes. 2.8 Vehículos Diplomáticos: Aquellos destinados a prestar servicios a los representantes diplomáticos, consulares o representantes de organismos internacionales acreditados ante el Gobierno. 7. Otros aparatos aptos para circular. Según el Artículo 19 del Capítulo II, Título II, del Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988, se entiende por aparato apto para circular todo tractor, pala mecánica, máquina de tracción, equipo para construcción de carretera, máquinas para perforación de pozos, aparatos montacargas, camiones eléctricos con ruedas de tamaño pequeño usados en fábricas, almacenes y estaciones de ferrocarril y, en fin, todo artefacto que sin ser considerado vehículo, CAPÍTULO 1: CONTEXTO DEL TRABAJO 16 necesite ocasionalmente trasladarse por las vías públicas o por las privadas de uso público, sin ser transportado por otro vehículo. 1.3 PLACAS O MATRICULAS VEHICULARES La placa o matrícula de un vehículo es una permutación de caracteres que identifica e individualiza el vehículo respecto a los demás. La placa se representa mediante un rectángulo metálico (que se conoce como placa del vehículo) en la que se graban o adhieren de forma inalterable los caracteres, que pueden ser letras, números o una combinación de ambos. 1.3.1 CLASIFICACIÓN DE LAS PLACAS Desde 1975 hasta nuestros días, los vehículos de la República Bolivariana de Venezuela han transitado con tres (3) distintos tipos de formatos de placas. A continuación se muestra una tabla que resume las generaciones de placas desde 1975. Generación Fecha 1º Generación 1975 - 1994 2º Generación 1994 - 2008 3º Generación 2008 - Actual TABLA 1: GENERACIONES DE PLACAS SEGÚN FECHA 1.3.1.1 GENERACIÓN Nº 1 Estas placas o matriculas fueron emitidas desde 1975 hasta 1994 por el Ministerio de Transporte y Comunicaciones (MTC), ahora el actual Ministerio de Infraestructura (MINFRA). Estuvieron en uso durante algo más de 20 años, y fueron derogados definitivamente con la Resolución 096 de agosto de 1997. A lo largo del documento nos referiremos a este tipo de placas como placas de formato número uno (formato 1). Este formato de placas, cuenta con el detalle común de que todas llevan el nombre de "VENEZUELA" en la parte superior, justo debajo del marco, el cual era otro elemento característico, del mismo color de las letras. La primera letra indicaba el estado al que pertenecía la placa. Además, estas eran secuenciales, es decir, el serial aumentaba acorde con los dígitos alfanuméricos de derecha a izquierda. CAPÍTULO 1: CONTEXTO DEL TRABAJO 17 1.3.1.2 GENERACIÓN Nº 2 Estas placas o matriculas fueron emitidas desde 1995 hasta 2007 por el MTC/MINFRA ratificadas según la resolución 096 del 25/08/1997, Gaceta Oficial 36279 del 28/08/1997 la define como deben ser las placas para los vehículos en circulación, así como también obliga la actualización de las placas con formato 1. Esta generación de placas se enfoca en la regionalización de seriales, los cuales facilitan la ubicación de cada placa en un determinado estado, esto se trata de una letra (usualmente la primera) asociada al estado (el cual también viene grabado en la placa). La tipografía de las placas luce basada en Arial Narrow, un poco más extendida para el serial, en el cual, la primera letra indica el estado al cual pertenece la placa, a menos que se indique lo contrario. Las placas fueron emitidas secuencialmente. Otro detalle que se introdujo con esta generación fue el mapa de Venezuela como fondo de la placa, en color gris, sobre el cual se encuentra el serial y el resto de la información. El marco de color ha sido eliminado en esta generación, y ahora la placa es plana, excepto en los bordes y las letras en altorrelieve. 1.3.1.3 GENERACIÓN Nº 3 Estas placas o matriculas son emitidas desde enero del 2008 con la idea de sustituir a las placas con formato 2 debido al agotamiento de placas y a la gran demanda que ha crecido en los últimos años. Estas placas son multicolores, dependiendo del tipo de placa. Para todas las placas es común ver el tricolor de la bandera de fondo, exceptuando las placas temporales. En la parte superior llevan la inscripción de República Bolivariana de Venezuela, en el centro el serial de la placa y debajo de esta el estado al cual pertenece la placa. Todas las placas bajo este formato son secuenciales. Además, el formato de las placas tiene una letra al final del serial la cual indica el estado al que pertenece la placa, a excepción de puerto libre que es indicado por la letra “O”. A continuación se describen los distintos formatos para los veintisiete (27) tipos de placas actuales: 1 Tracción Sangre: el serial se compone de un formato que consta de una (1) letra, un (1) número, dos (2) letras, un (1) número y una (1) letra. (Ej.: A6BL8L). 2 Motocicleta: el serial se compone de un formato que consta de dos (2) letras, un (1) número, una (1) letra, dos (2) números y una (1) letra. Estas placas son de un tamaño inferior a los demás tipos placas (Ej.: ZR1J85E). CAPÍTULO 1: CONTEXTO DEL TRABAJO 18 3 Particular: usada en carros particulares y camionetas. El serial se compone de un formato que consta de tres (3) letras, dos (2) números y tres (3) letras. (Ej.: CH540BA). FIGURA 3: PLACA PARTICULAR - TERCERA GENERACIÓN 4 Carga: el serial se compone de un formato que consta de una (1) letra, dos (2) números, dos (2) letras, un (1) número y una (1) letra. (Ej.: F34PT7M). 5 Grúa: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, dos (2) números y una (1) letra. (Ej.: H27D16D). 6 Minusválido: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, una (1) número y una (1) letra. (Ej.: T35B2B). 7 Transporte Escolar Minibús: el serial se compone de un formato que consta de una (1) letra, tres (3) números, una (1) letra, un (1) número y una (1) letra. (Ej.: R763E5G). 8 Transporte Escolar Autobús: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, dos (2) números y dos (2) letras. (Ej.: P8B14HW). 9 Trasporte Privado: el serial se compone de un formato que consta de una (1) letra, cuatro (4) números y dos (2) letras. (Ej.: F4398AK). 10 Transporte Turístico Rústico: el serial se compone de un formato que consta de una (1) letra, un (1) número, dos (2) letras, dos (2) números y una (1) letra. (Ej.: B6XN32S). 11 Transporte Turístico Minibús: el serial se compone de un formato que consta de una (1) letra, dos (2) números, una (1) letra, un (1) número y dos (2) letras. (Ej.: A69C2NC). 12 Transporte Turístico Autobús: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, un (1) número, una (1) letra, un (1) número y una (1) letra. (Ej.: Z5K9N7I). CAPÍTULO 1: CONTEXTO DEL TRABAJO 19 13 Transporte Público Servicio Urbano Minibús y Autobús: el serial se compone de un formato que consta de el número cero (0), un (1) número, dos (2) letras, un (1) número y dos (2) letras. (Ej.: 03CL8JP). 14 Transporte Público Servicio Sub Urbano Automóvil: el serial se compone de un formato que consta de el número uno (1), un (1) número, una (1) letra, un (1) número, una (1) letra, un (1) número y una (1) letra. (Ej.: 13E5R4T). 15 Transporte Público Servicio Sub Urbano Minibús: el serial se compone de un formato que consta de el número dos (2), un (1) número, una (1) letra, dos (2) números y dos (2) letras. (Ej.: 27B83AU). 16 Transporte Público Servicio Sub Urbano Autobús: el serial se compone de un formato que consta de el número tres (3), un (1) número, dos (2) letras, dos (2) números y una (1) letra. (Ej.: 36FG15Y). 17 Transporte Público Servicio Interurbano Automóvil: el serial se compone de un formato que consta de el número cuatro (4), dos (2) números, una (1) letra, un (1) número y dos (2) letras. (Ej.: 423T5GH). 18 Transporte Público Servicio Interurbano Minibús: el serial se compone de un formato que consta de el número cinco (5), dos (2) números, dos (2) letras, un (1) número y una (1) letra. (Ej.: 517IM2F). 19 Transporte Público Servicio Interurbano Autobús: el serial se compone de un formato que consta de el número seis (6), tres (3) números, una (1) letra, un (1) número y una (1) letra. (Ej.: 6542N3X). 20 Transporte Público Servicio de Taxi: el serial se compone de un formato que consta de el número siete (7), una (1) letra, un (1) número, una (1) letra, un (1) número y dos (2) letras. (Ej.: 7S1T6DO). 21 Transporte Público Servicio en Zona Periférica Rústico: el serial se compone de un formato que consta de el número ocho (8), una (1) letra, un (1) número, una (1) letra, dos (2) números y una (1) letra. (Ej.: 8U2V44V). 22 Transporte Público Servicio en Zona Periférica Minibús: el serial se compone de un formato que consta de el número nueve (9), una (1) letra, tres (3) números y dos (2) letras. (Ej.: 9F137HR). 23 Temporal: el serial se compone de un formato que consta de seis (6) números y una (1) letra. (Ej.: 128765J). 24 Puerto Libre Motocicleta: el serial se compone de un formato que consta de dos (2) letras, cuatro (4) números y la letra O. (Ej.: VG2319O). CAPÍTULO 1: CONTEXTO DEL TRABAJO 20 25 Puerto Libre Particular: el serial se compone de un formato que consta de dos (2) letras, dos (2) números, una (1) letra, un (1) número y la letra O. (Ej.: RH35J8O). 26 Puerto Libre Carga: el serial se compone de un formato que consta de una (1) letra, un (1) número, una (1) letra, tres (3) números y la letra O. (Ej.: G2P054O). 27 Puerto Libre Transporte Público: el serial se encuentra subrayado. El serial se compone de un formato que consta de un (1) número, dos (2) letras, tres (3) números y la letra O. (Ej.: 1EX304O). A continuación se presentan los veinte y siete (27) tipos de placas identificados con su respectivo formato de números y letras. Tipo de Placa Formato Tracción de Sangre LNLLNL Motocicletas LLNLNNL Particulares LLNNNLL Carga LNNLLNL Grúas LNNLNNL Minusválidos LNNLNL Transporte Escolar Minibús LNNNLNL Transporte Escolar Autobuses LNLNNLL Transporte Privado LNNNNLL Transporte Turístico Rústicos LNLLNNL Transporte Turístico Minibús LNNLNLL Transporte Turístico Autobuses LNLNLNL Transporte Público Servicio Urbano Minibús y Autobús 0NLLNLL Transporte Público Servicio Sub Urbano Automóvil 1NLNLNL Transporte Público Servicio Sub Urbano Minibús 2NLNNLL Transporte Público Servicio Sub Urbano Autobús 3NLLNNL Transporte Público Servicio Interurbano Automóvil 4NNLNLL Transporte Público Servicio Interurbano Minibús 5NNLLNL Transporte Público Servicio Interurbano Autobús 6NNNLNL Transporte Público Servicio de Taxi 7LNLNLL Transporte Público Servicio en Zona Periférica Rústicos 8LNLNNL Transporte Público Servicio en Zona Periférica Minibús 9LNNNLL Temporales NNNNNNL CAPÍTULO 1: CONTEXTO DEL TRABAJO 21 Puerto Libre Motocicleta LLNNNNO Puerto Libre Particular LLNNLNO Puerto Libre Carga LNLNNNO Puerto Libre Transporte Público NLLNNNO TABLA 2: RESUMEN DE PLACAS DE TERCERA GENERACIÓN En la mayoría de las placas emitidas en los últimos 20 años, se puede identificar el estado en donde fue emitida, el cual viene determinado por una (1) letra (usualmente la primera). A continuación se muestra la tabla de equivalencia de letras por estado: Identificador Estado A DISTRITO CAPITAL B ANZOATEGUI C APURE D ARAGUA E BARINAS F BOLIVAR G CARABOBO H COJEDES I FALCON J GUARICO K LARA L MERIDA M MIRANDA N MONAGAS O NUEVA ESPARTA P PORTUGUESA R SUCRE S TACHIRA T TRUJILLO U YARACUY V ZULIA X AMAZONAS Y DELTA AMACURO W VARGAS TABLA 3: RELACIÓN CARÁCTER / ESTADO USADO EN LAS PLACAS CAPÍTULO 1: CONTEXTO DEL TRABAJO 22 La letra Q nunca ha sido usada en ningún tipo de placa a fin de evitar confusiones con la letra O, sin embargo, es fácil confundir el cero (0) con la letra O, especialmente en el formato 2. Las letras W, X y Y fueron introducidas como identificadores de estado en 1997 cuando se creó el Estado Vargas y cuando Amazonas y Delta Amacuro fueron ascendidos de Territorio Federal a Estados. Anteriormente, la letra W no se usaba como identificador, y las letras X e Y eran utilizadas como identificadores “genéricos”. 1.4 DESCRIPCIÓN DE LA SITUACIÓN ACTUAL En la República Bolivariana de Venezuela, el antiguo formato de placas (formato 1 y 2) constaba de seis (6) dígitos, lo que limitaba el número de identificadores que se podían asignar a los vehículos del país. Para ello, el INTTT desarrollo un nuevo formato de placas (formato 3) que consta de siete (7) dígitos, abarcando así, una producción de aproximadamente trescientos cincuenta millones (350.000.000) de placas. Aproximadamente en 1995, se desarrollo un sistema para la administración de inventario del formato 1 de las placas. Posteriormente, se desarrollaron actualizaciones sobre dicho sistema a fin de migrar hacia el formato 2. Actualmente, con la implementación del formato 3 de placas, este sistema ha quedado obsoleto, forzando de esta forma al personal del Departamento de Inventario a recurrir a tablas en documentos de Microsoft Excel para registrar las placas que entran y salen del INTTT. Cabe destacar que el sistema actual se mantuvo en funcionamiento hasta diciembre del 2007, fecha hasta la cual se despacharon placas con formato 2. Para inicios del año 2008, se comenzó a utilizar el formato 3, sin embargo, no se tomo en cuenta la migración del sistema para este tipo de formato. Este sistema no posee ninguna documentación sobre las funcionalidades que presta, así como también, la base de datos que maneja, por lo tanto, el levantamiento de la información fue un tanto engorroso. Para el levantamiento de la información sobre el funcionamiento del sistema actual, se realizaron pruebas unitarias con el personal del Departamento de Inventario a fin de comprender cuales son las funcionalidades que el sistema presta y las que se necesiten contemplar en el nuevo sistema. Las funcionalidades que presenta este sistema están clasificadas en tres (3) módulos principales. Los módulos identificados son los siguientes: Modulo de Mantenimiento (Administrativo), CAPÍTULO 1: CONTEXTO DEL TRABAJO 23 Modulo de Operaciones, Modulo de Reportes. 1.4.1 MODULO DE MANTENIMIENTO Este modulo contempla las funcionalidades relacionadas con la administración de datos relacionados con el departamento de Inventario de la sede principal del INTTT. A continuación, se listan las funcionalidades que se encuentran enmarcadas en este modulo: Administración de usuarios, Administración de equipos, Administración de stock, Administración de espacio físico, Administración de ensambladoras. 1.4.1.1 ADMINISTRACIÓN DE USUARIOS Esta funcionalidad le permite al personal agregar, modificar, eliminar usuarios en el sistema para que estos puedan acceder a todas las demás funcionalidades. Además, en todo momento, se puede consultar todos los usuarios registrados en el sistema. De los usuarios se desea registrar el nombre completo (usuario), nombre de usuario (login), contraseña (password), permisología de administrador y/o solicitud donde “administrador” se encarga de otorgar permisología a las funcionalidades del modulo de mantenimiento y “solicitud” se encarga de otorgar permisología a las funcionalidades de los módulos de operaciones y reportes. 1.4.1.2 ADMINISTRACIÓN DE EQUIPOS Esta funcionalidad le permite al personal agregar, modificar, eliminar equipos a un determinado usuario para el uso del sistema. Además, en todo momento, se puede consultar todos los equipos asociados a los usuarios registrados en el sistema. Para asignar un equipo, es necesario registrar el nombre de usuario (usuario) y el nombre del equipo (nombre). CAPÍTULO 1: CONTEXTO DEL TRABAJO 24 1.4.1.3 ADMINISTRACIÓN DE STOCK Esta funcionalidad le permite al personal agregar, modificar, eliminar los niveles máximos y mínimos de las placas en el inventario. Además, en todo momento, se puede consultar todos los stocks que posee el departamento de inventario. Para asignar un stock, es necesario seleccionar el estado, el tipo de placa, y luego indicar los valores máximos y mínimos de placas que se requieran en el almacén para suplir las necesidades. 1.4.1.4 ADMINISTRACIÓN DE ESPACIO FÍSICO Esta funcionalidad le permite al personal agregar, modificar, eliminar bóvedas, anaqueles, columnas y bandejas, en las cuales, se almacenarán las placas. Además, en todo momento, se puede consultar la estructura lógica de almacenamiento que posee el departamento de inventario. Para asignar un nuevo espacio físico, es necesario agregar una bóveda con un nombre y una nomenclatura única, luego se le agregan anaqueles a dicha bóveda, de los cuales se requiere: nombre, nomenclatura y descripción. Cada anaquel está conformado por un número finito de columnas, donde, estas columnas a su vez están conformadas por una serie de bandejas. Tanto de las columnas, como de las bandejas, se debe registrar el nombre y la nomenclatura. Para el caso de las bandejas se debe indicar la capacidad de placas que puede almacenar. 1.4.1.5 ADMINISTRACIÓN DE ENSAMBLADORAS Esta funcionalidad le permite al personal agregar, modificar, eliminar ensambladoras solicitantes de placas. De las ensambladoras se desea registrar el nombre y su identificador. Además, en todo momento, se pueden consultar los datos de ensambladoras asociadas al INTTT. 1.4.2 MÓDULO DE OPERACIONES Este modulo contempla las operaciones a realizar en el sistema actual del departamento de inventario del INTTT. Dichas operaciones se separan por funcionalidades, entre las cuales podemos mencionar: Ubicación física, Cargar placas con el lector, Consulta de placas, Devoluciones por convenio, CAPÍTULO 1: CONTEXTO DEL TRABAJO 25 Salida de producción diaria, Salida por convenio u operativo, Placas reversadas en producción. Estas funcionalidades le permiten al personal del departamento de inventario registrar la entrada y salida de las placas, así como también, realizar la consulta de datos relacionados, desde una placa específica, hasta un lote completo de las placas cargadas en el sistema. Además, permite conocer las placas que fueron reversadas en producción y la ubicación física de las mismas en el almacén del INTTT. 1.4.2.1 UBICACIÓN FÍSICA Esta funcionalidad le permite al personal conocer la ubicación física (bóveda, anaquel, columna y bandeja) tanto de una placa determinada, como de un lote completo de placas registradas en el sistema, para de esta forma facilitar el proceso de búsqueda y salida de placas del departamento de inventario. Por medio de esta funcionalidad el personal puede modificar los estados de una placa (recibida, etiqueta, salida y ubicación física). FIGURA 4: UBICACIÓN FÍSICA CAPÍTULO 1: CONTEXTO DEL TRABAJO 26 1.4.2.2 CARGAR PLACAS CON EL LECTOR Esta funcionalidad permite al personal realizar la carga de placas en el sistema por medio de un lector o pistola óptica que identifica el código de barra, el cual, puede pertenecer a una determinada placa o puede pertenecer a la caja contenedora de un lote de placas. Para el último caso, las placas deben pertenecer a un mismo tipo de vehículo y estado. Luego de obtener el código de la placa, el usuario debe seleccionar la localidad en la que desea almacenar las placas, además de la oficina en la que se encuentra, la cual, es el INTTT por defecto. FIGURA 5: CARGA DE PLACAS CON LECTOR 1.4.2.3 CONSULTA DE PLACAS Esta funcionalidad permite al personal realizar la consulta de la localidad y los estados (recibida, etiqueta, salida y ubicación física) de las placas que se encuentran registradas en el sistema, y que por ende, se encuentran asignadas a una determinada ubicación física en el departamento de inventario. 1.4.2.4 DEVOLUCIONES POR CONVENIO Esta funcionalidad permite al personal realizar las devoluciones de las placas otorgadas a empresas que tienen un convenio con el INTTT. Para esto el usuario del sistema debe ingresar el código de la placa, o ingresar el código de la caja contenedora de placas que se devolverán por convenio. CAPÍTULO 1: CONTEXTO DEL TRABAJO 27 1.4.2.5 SALIDA DE PRODUCCIÓN DIARIA Esta funcionalidad permite al personal registrar la salida de placas por producción diaria en el departamento de inventario del INTTT. Para dar salida de placas por producción diaria es necesario ingresar la fecha correspondiente a dicha producción además de seleccionar la oficina a la cual se desea realizar la entrega de placas. Luego se muestra una pantalla con las placas a entregar para la fecha y para la oficina seleccionada, al lado de cada placa mostrada se encuentra la opción para darle salida a dicha placa, por último el usuario tiene opción para imprimir la solicitud de salida. Si el usuario selecciona “imprimir solicitud” el sistema solicitara información sobre el nombre de usuario, permitiendo además el ingreso de una nota final que describa el motivo de salida de placas del departamento de inventario. 1.4.2.6 SALIDA POR CONVENIO/OPERATIVO Esta funcionalidad permite al personal registrar la salida de placas por convenio (ensambladora, importadora), o la salida de placas por medio de un operativo nacional. En este caso el sistema permite registrar una placa por vez o un lote de placas, esto puede realizarse ingresando cada placa manualmente o mediante la lectura del código de barra. Luego es necesario ingresar la oficina o la ensambladora a la cual se destinarán las placas, e igual que en el caso anterior, el sistema solicita el nombre de usuario y una nota alusiva al motivo de salida. 1.4.2.7 PLACAS REVERSADAS EN PRODUCCIÓN Esta funcionalidad permite al personal registrar como disponibles aquellas placas que han sido reversadas en producción, para que puedan ser asignadas nuevamente. Para que esto pueda ocurrir, el sistema solicita al usuario la selección de la oficina sobre la que desee verificar los reversos realizados y seguidamente se mostrará la pantalla con la información de cada una de las placas. Las placas aparecen resaltadas en color rojo si han sido reversadas, en este caso, el personal debe verificar que se encuentren físicamente en el depósito de inventario para así realizar la devolución. Por último el usuario selecciona el botón devolución para registrar las placas como disponibles en el inventario y en producción. 1.4.3 MÓDULO DE REPORTES Este modulo contempla los posibles reportes generados a partir de las operaciones realizadas en el sistema actual del departamento de inventario. Los posibles reportes a generar son los siguientes: Ubicación física, CAPÍTULO 1: CONTEXTO DEL TRABAJO 28 Movimiento al detalle del ingreso de placas, Movimiento de salidas de placas del inventario, Movimiento al detalle de salida de placas, Existencia general de placas, Existencia general de placas por estado, Existencia de placas por estado, Existencia de placas por tipo, Información específica de una placa, Existencia detallada de placas disponibles en un estado, Existencia de placas por su ubicación, Existencia detallada de placas disponibles por su ubicación, Existencia de placas por corridas, Operaciones del sistema (Auditoria), Operaciones del sistema (Auditoria Usuarios), Inventario general departamento de placas, Documentos de salida de placas, Existencia de placas por localidad, estados y tipos de placas. Estos diferentes reportes los podemos agrupar por funcionalidad de la siguiente manera: Ubicación física, Movimiento de placas, Existencia de placas, Información específica de una placa, Operaciones del sistema. 1.4.3.1 UBICACIÓN FÍSICA Esta funcionalidad permite al personal generar un reporte sobre la ubicación física y el código de las placas existentes o no existentes en el almacén. Para generar dicho reporte es necesario ingresar en el sistema la localidad en la que se encuentran las placas, el estado al que pertenece la placa y el tipo de placa. Luego el usuario debe CAPÍTULO 1: CONTEXTO DEL TRABAJO 29 seleccionar si desea generar un reporte con las placas existentes o si desea generar un reporte con las placas no existentes en dicha localidad que cumplan con los parámetros mencionados anteriormente. 1.4.3.2 MOVIMIENTO DE PLACAS Esta funcionalidad permite al personal generar reportes sobre el ingreso y la salida de placas en un determinado espacio de tiempo, seleccionando, o no, el tipo de placa sobre la que se desee generar el reporte. Para generar estos reportes es necesario ingresar en el sistema la fecha inicial y final del ingreso o salida de placas y si el usuario lo desea puede seleccionar el tipo de placa específico sobre el que se regirá el reporte. El reporte resultante muestra los identificadores de las placas ingresadas en el almacén para el intervalo de tiempo seleccionado para el caso en el que el usuario selecciono la generación de un reporte sobre las placas ingresadas en el almacén, en caso contrario, el usuario selecciono la generación de un reporte sobre las placas a las que se le ha dado salida del departamento de inventario. 1.4.3.3 EXISTENCIA DE PLACAS Esta funcionalidad permite al personal generar reportes sobre la existencia de las placas en el almacén, los cuales pueden ser generados de forma general (mencionando los identificadores de placas existentes), detalladamente (indicando la información necesaria sobre cada placa), por estado, por tipo de placa, por ubicación, y por último, por localidad. Para generar dichos reportes es necesario ingresar en el sistema el estado, en caso de que se desee un reporte por estado, o el tipo de placa, en caso de que se desee un reporte por tipo de placa o la ubicación, en caso de que se desee un reporte por ubicación física de placas. Por último el usuario debe ingresar en el sistema la localidad, el estado y el tipo de placa, en caso de que se desee generar un reporte condicionado por dicha información, si es así, el usuario debe seleccionar si desea generar un reporte con las placas existentes en el almacén o con las placas no existentes. 1.4.3.4 INFORMACIÓN ESPECÍFICA DE UNA PLACA Esta funcionalidad permite al personal generar un reporte con el estado, tipo, ubicación, status (registrada, impresión, salida), usuario solicitante y nota detallada sobre la salida de dicha placa. Para generar dicho reporte, es necesario que el usuario ingrese el identificador de la placa sobre la cual se desea consultar a detalle. CAPÍTULO 1: CONTEXTO DEL TRABAJO 30 1.4.3.5 OPERACIONES DEL SISTEMA Esta funcionalidad permite realizar una auditoría al personal del departamento de inventario para así conocer los reportes emitidos por estos en un determinado período de tiempo. La auditoría puede realizarse sobre un usuario en particular o sobre todos los usuarios que emitieron reportes. Para generar un reporte de auditoría es necesario ingresar la fecha de inicio y la fecha final que abarcará dicha auditoría. En el caso de que la auditoría a realizar sea para un usuario en particular se deberá ingresar el nombre de usuario (login). El reporte de auditoría muestra una descripción del reporte generado, el usuario y la hora en la que se genero dicho reporte. Esta información se encuentra separada por fecha. 1.5 PLANTEAMIENTO DEL PROBLEMA En esta sección se presentan los problemas encontrados en el sistema actual que contribuyen al bajo desempeño en los procesos de inventario de placas por parte del INTTT. 1.5.1 LIMITACIONES Y ALCANCES DEL SISTEMA ACTUAL A continuación se listan las limitaciones encontrada en el sistema actual, tanto a nivel de funcionalidades, como ha nivel de repositorio de información e interfaz de usuarios. No fue diseñado para soportar ningún cambio en el formato de placas. El sistema actual no soporta el nuevo formato de placas de siete (7) dígitos, por lo tanto, pese a las actualizaciones hechas, su estructura presenta una serie de carencias que se han dejado de lado por quienes se han encargado de realizar las actualizaciones al sistema. Redundancia de funcionalidades. El sistema contiene varios enlaces a operaciones que funcionan de la misma manera y dan los mismos resultados. Fallas en la comunicación con otros departamentos relacionados. El sistema obtiene información de la base de datos que alimenta el departamento de Gerencia de Registros, en la cual, se encuentran almacenadas las placas que son asignadas diariamente, además de las placas que fueron devueltas y/o reversadas. Además, debido a problemas en el sistema que maneja el departamento de Gerencia de Registro, es posible que la entrada de datos al sistema de inventario sean datos que no son validos, provocando así, errores en el sistema actual. CAPÍTULO 1: CONTEXTO DEL TRABAJO 31 Pobre generación de reportes. El usuario debe ingresar la mayoría de los datos que genera el reporte, exigiendo al personal una cantidad de tiempo y esfuerzo innecesaria. De igual forma, el sistema no genera un reporte completo, debido a la falta de información sobre la oficina regional y los operativos, en el caso de que se hayan asignado placas por medio de un operativo. Pocas opciones al momento de imprimir un determinado reporte. El sistema solo tiene las opciones de imprimir y cancelar. No se valida el caso en el que el usuario desee imprimir una determinada página. Funciona como todo o nada. El sistema no permite la eliminación de: usuarios, equipos, stocks, ensambladoras, oficinas, espacio físico y de placas. En el caso de que un usuario ingrese datos erróneos, este debe dirigirse al Departamento de Informática para que el personal ingrese a la base de datos y elimine los datos erróneos manualmente. Engorroso proceso en los criterios de consulta. El usuario del sistema de inventario al consultar una placa debe ingresar: localidad, estado, tipo de placa, siendo sumamente engorroso debido a que la localidad de las placas es, a menudo, lo que el usuario desea conocer. Asignación de placas sin un orden específico. El sistema permite la asignación de placas que poseen distintos números de serie, llegando a tener cajas semivacías en el almacén debido a que no las asigna el sistema. Manejo de datos no pertenecientes al departamento. El sistema permite que el usuario asigne ensambladoras y oficinas, datos con los que el personal del inventario no está relacionado directamente. Acceso de los usuarios al sistema de forma engorrosa y redundante. El sistema no mantiene un inicio de sesión por usuario para cada una de las funcionalidades que presta. El sistema no cuenta con un buen manejo del caso de devoluciones o reverso de placas. Las placas con estatus devuelto o reverso tienden a quedarse en el almacén debido a que el sistema no permite que vuelvan a ser asignadas nuevamente. El sistema no realiza las validaciones necesarias. El “desde” y “hasta” no funciona correctamente, ya que el usuario debe ingresar primero el código de la placa final y luego el código de placa del inicio de la serie, lo cual no es usable. Así mismo, el sistema presenta fallos con respecto a la validación de algunos tipos de placas. CAPÍTULO 1: CONTEXTO DEL TRABAJO 32 El sistema no maneja las alertas necesarias para avisar al personal si se ha llegado al mínimo o máximo del stock. Rango de placas fijo. Si el usuario ingresa un lote, de por ejemplo, 40 placas, y realmente deseaba agregar 30 placas, el usuario no tiene la opción de devolver los cambios. Debido a que no se puede detener la producción de placas, y que el sistema actual no acepta el nuevo formato de placas, el personal del inventario de placas se ha visto en la necesidad de recurrir a hojas de Microsoft Excel para registrar las placas liberadas por dicho departamento. 1.5.2 BASE DE DATOS La base de datos del sistema actual para el inventario de placas está constituida por una serie de tablas las cuales no se encuentran relacionadas. El modelo de datos de la base de datos del sistema actual es el siguiente: FIGURA 6: DIAGRAMA E/R - SISTEMA ACTUAL CAPÍTULO 1: CONTEXTO DEL TRABAJO 33 1.5.3 REQUERIMIENTOS DEL SISTEMA En base al levantamiento de información realizado en el departamento de inventario del INTTT se identificaron los siguientes requerimientos: Obtener la información necesaria para manejar la carga y la liberación de placas en el almacén, para así analizar y clasificar la información obtenida evitando de esta forma la redundancia de datos. Verificar el estatus de las placas en el sistema para su actualización automática, además de notificar al usuario si se tiene un stock mínimo o máximo en el almacén. Asignar en el sistema la fecha y hora de cada una de las placas registradas, de forma tal que puedan consultarse datos por fecha y hora. Esto beneficia enormemente al personal debido a la necesidad que tienen de generar reportes en donde aparezca la hora de carga y liberación de una placa del sistema. Administrar sesiones para cada tipo de usuario: administrador, coordinador y empleado la cual cerrará solo cuando el usuario desee salir del sistema. Los datos insertados, editados y/o eliminados serán almacenados en un Log de transacciones para su futura auditoria. Permitir que todos los usuarios autorizados puedan cargar placas en el sistema. Solo el usuario coordinador podrá eliminar placas. Realizar las validaciones necesarias para: • Reportes: Generar reportes con información más relevante sobre el proceso de entrada y salida de placas, contemplando: placa y la ubicación para el reporte interno y, placa, tipo de placa, estado y cantidad de placas para el reporte externo. • Estatus de las placas: verificar el estatus de las placas para así permitir que el personal conozca si dichas placas fueron cargadas o no en el sistema. De esta forma se podrá solventar el problema de que no se liberen placas con problemas de estado, o la asignación de una misma placa a más de un vehículo. • Consulta de placas: validar que se ingresen placas desde un rango válido hasta otro rango válido, además, verificar que dichas placas se hayan insertado en la base de datos. • Asignación ordenada de placas: verificar que se asignen las placas en orden, siguiendo el número de serie asignado, evitando de esta forma la asignación aleatoria de placas. 34 CAPÍTULO 2: MARCO METODOLÓGICO En este capítulo, se describe la metodología para la elicitación de requisitos de sistemas de software, utilizada para el levantamiento de la información, sus principales fundamentos y la descripción de los modelos que son utilizados en el desarrollo de la aplicación, además de describir el método de desarrollo ágil sobre una arquitectura cliente-servidor y el desarrollo de un patrón de diseño MVC, utilizando PHP como lenguaje de programación, Sybase y MySQL como servidores de bases de datos y Apache como servidor de aplicaciones Web, de manera tal, que se pueda migrar fácilmente hacia una arquitectura orientada a servicios bajo SOAP. Además, se describen las estrategias, planeación, construcción y ejecución de las pruebas que se sustentarán en el desarrollo de la aplicación. 2.1 MÉTODO PARA LA ELICITACIÓN DE REQUISITOS DE SISTEMAS DE SOFTWARE El objetivo de esta metodología es la definición de las tareas a realizar, los productos a obtener y las técnicas a emplear durante la actividad de elicitación de requisitos de la fase de ingeniería de requisitos del desarrollo de software. [5] En esta metodología se distinguen dos tipos de productos: los productos entregables y los productos no entregables o internos. Los productos entregables son aquellos que se entregan oficialmente al cliente como parte del desarrollo en fechas previamente acordadas, mientras que los no entregables son productos internos al desarrollo que no se entregan al cliente. Esta metodología hace uso de plantillas y patrones lingüísticos que se presentan en los siguientes apartados para utilizarse tanto durante las reuniones de elicitación con clientes y usuarios como para registrar y gestionar los requisitos. Las tareas recomendadas para obtener los productos descritos en esta metodología son las siguientes: 1 Tarea 1: Obtener información sobre el dominio del problema y el sistema actual. Para cumplir con esta tarea se realizo una propuesta que fue discutida y posteriormente aprobada como proyecto dentro del INTTT. 2 Tarea 2: Preparar y realizar las reuniones de elicitación / negociación. Para esta tarea se realizaron varias reuniones con el personal del Departamento de placas ya que estos son quienes usaran el sistema. Además se realizaron reuniones conjuntas con los demás departamentos involucrados en el problema para limitar el alcance del proyecto. CAPÍTULO 2: MARCO METODOLÓGICO 35 3 Tarea 3: Identificar/revisar los objetivos del sistema. En esta tarea se busca identificar los objetivos que se esperan alcanzar mediante el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los objetivos previamente identificados. OBJ–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Descripción El sistema deberá <objetivo a cumplir por el sistema> Subobjetivos OBJ–x <nombre del subobjetivo> Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 7: PLANTILLA Y PATRONES-L PARA OBJETIVOS 4 Tarea 4: Identificar/revisar los requisitos de almacenamiento de información. En esta tarea se busca identificar los requisitos de almacenamiento de información que deberá cumplir el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los requisitos de almacenamiento de información previamente identificados. RI–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá almacenar la información correspondiente a <concepto relevante>. En concreto: Datos específicos <datos específicos sobre el concepto relevante> Intervalo { pasado y presente, sólo presente } CAPÍTULO 2: MARCO METODOLÓGICO 36 temporal Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 8: PLANTILLA Y PATRONES-L PARA REQUISITOS DE ALMACENAMIENTO DE INFORMACIÓN 5 Tarea 5: Identificar/revisar los requisitos funcionales. En esta tarea se busca identificar los actores del sistema del sistema software a desarrollar. Del mismo modo, se deben identificar los requisitos funcionales (casos de uso) que deberá cumplir el sistema software a desarrollar. Además, es necesario revisar, en el caso de que haya conflictos, los requisitos funcionales previamente identificados. ACT–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Descripción Este actor representa a <rol que representa el actor> Comentarios <comentarios adicionales sobre el actor> FIGURA 9: PLANTILLA Y PATRONES-L PARA ACTORES RF–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso { durante la realización de los casos de uso <lista de casos de uso>, cuando <evento de activación> } CAPÍTULO 2: MARCO METODOLÓGICO 37 Precondición <precondición del caso de uso> Secuencia Normal Paso Acción p1 {El actor <actor>, El sistema} <acción/es realizada/s por actor/sistema> p2 Se realiza el caso de uso <caso de uso (RF–x)> p3 Si <condición>, {el actor <actor>, el sistema} <acción/es realizada/s por actor/sistema> p4 Si <condición>, se realiza el caso de uso <caso de uso (RF–x)> Postcondición <postcondición del caso de uso> Excepciones Paso Acción pi Si <condición de excepción>, {el actor <actor>, el sistema} <acción/es realizada/s por actor/sistema>, a continuación este caso de uso {continúa, termina} pj Si <condición de excepción>, se realiza el caso de uso <caso de uso (RF–x)>, a continuación este caso de uso {continúa, termina} Rendimiento Paso Acción pz m <unidad de tiempo> Frecuencia esperada <no de veces> veces / <unidad de tiempo> Importancia <importancia del requisito> Urgencia <urgencia del requisito> Estado <estado del requisito> Estabilidad <estabilidad del requisito> Comentarios <comentarios adicionales sobre el requisito> FIGURA 10: PLANTILLA Y PATRONES-L PARA REQUISITOS FUNCIONALES (CASOS DE USO) 6 Tarea 6: Identificar/revisar los requisitos no funcionales. En esta tarea se busca identificar los requisitos no funcionales, normalmente de carácter técnico o legal. RNF–<id> <nombre descriptivo> Versión <no de la versión actual> (<fecha de la versión actual>) Autores <autor de la versión actual> (<organización del autor>) Fuentes <fuente de la versión actual> (<organización de la CAPÍTULO 2: MARCO METODOLÓGICO 38 fuente>) Objetivos asociados OBJ–x <nombre del objetivo> Requisitos asociados Rx–y <nombre del requisito> Descripción El sistema deberá <capacidad del sistema> Importancia <importancia del objetivo> Urgencia <urgencia del objetivo> Estado <estado del objetivo> Estabilidad <estabilidad del objetivo> Comentarios <comentarios adicionales sobre el objetivo> FIGURA 11: PLANTILLA Y PATRONES-L PARA REQUISITOS NO FUNCIONALES 7 Tarea 7: Priorizar objetivos y requisitos. Para cumplir con esta tarea se debe tomar en cuenta la prioridad de cada uno de los requerimientos funcionales identificados en la tarea 5. Cabe destacar que en el documento anexo de levantamiento de requisitos para el sistema de software, tanto los objetivos como los requisitos funcionales fueron situados en orden de prioridad según las entrevistas sostenidas en la tarea 2. Para ello, se hace uso de una matriz de rastreabilidad. Req / Obj OBJ-01 OBJ-02 OBJ-03 OBJ-04 OBJ-05 RF-01 * RF-02 * RF-03 * RF-04 * * RF-05 * * FIGURA 12: MATRIZ DE RASTREABILIDAD El orden recomendado de realización para estas tareas es del uno (1) al siete (7), aunque las tareas cuatro (4), cinco (5), y seis (6) pueden realizarse simultáneamente o en cualquier orden que se considere oportuno. A continuación se muestra un diagrama de flujo con las tareas a seguir en la metodología de elicitación de requisitos para sistemas de software. CAPÍTULO 2: MARCO METODOLÓGICO 39 FIGURA 13: TAREAS DE ELICITACIÓN DE REQUISITOS 2.2 MÉTODO DE DESARROLLO ÁGIL La Modelación Ágil o Agile Modeling (AM) es una metodología a basada en la práctica para el modelado y la documentación eficaz de sistemas de software. AM Es una colección de valores, principios, y prácticas para modelar el software que puede ser aplicada sobre un proyecto de desarrollo de software de una manera eficaz y ligera. Este método puede ser adaptado en otras metodologías de desarrollo, tales como XP, permitiendo desarrollar un proceso de software que cumpla con las necesidades del programador. Las técnicas de AM, en particular, el Modelo Ágil de Desarrollo de Unidad (Agile Model Driven Development (AMDD)), el ciclo de vida para el cual está representado en la siguiente figura, le permite escalar el desarrollo de software ágil a situaciones mucho más complejas.[6] AM realza otros procesos de software, como se puede apreciar en la siguiente figura: CAPÍTULO 2: MARCO METODOLÓGICO 40 FIGURA 14: TAREAS DE ELICITACIÓN DE REQUISITOS 2.2.1 AGILE MODEL DRIVEN DEVELOPMENT (AMDD) Como el nombre lo implica, AMDD es la versión ágil del desarrollo de la unidad de modelado o en inglés Model Driven Development (MDD). MDD es una aproximación al desarrollo de Software donde se crean modelos de gran alcance antes de que el código fuente sea escrito. La diferencia con AMDD es que en vez de crear amplios modelos antes de escribir el código se pueden crear modelos ágiles para manejar los esfuerzos globales de desarrollo. [16] En la siguiente figura veremos un ciclo de vida de alto nivel para la liberación del sistema. Cada caja del diagrama representa una actividad de desarrollo. La imaginación (envisioning) incluye dos sub actividades principales, la imaginación de requerimientos iniciales y la imaginación de la arquitectura inicial. Estas están listas durante la iteración 0, la cual es un término común para la primera iteración antes de comenzar las iteraciones de desarrollo. Las otras actividades (modelado de iteración, lluvia de modelos, reseñas e implementación) ocurren durante cualquier iteración, incluyendo la iteración 0. El tiempo indicado en cada caja representa el tamaño de una sesión promedio. [17] CAPÍTULO 2: MARCO METODOLÓGICO 41 FIGURA 15: AMDD - CICLO DE VIDA La siguiente figura representa como encajan las actividades de AMDD en las iteraciones del ciclo de vida de desarrollo ágil. Es simplemente otra manera de mostrar que un proyecto ágil comienza con algún modelaje inicial y que dicho modelaje sigue ocurriendo en cada una de las iteraciones. FIGURA 16: AMDD A TRAVÉS DEL CICLO DE VIDA DE DESARROLLO ÁGIL CAPÍTULO 2: MARCO METODOLÓGICO 42 Al comienzo de cada una de las construcciones de la iteración, el equipo de desarrollo debe planificar el trabajo que ellos realizaran en esa iteración. Los equipos ágiles implementan requerimientos por orden de prioridad, como se ve en la figura 17. Para hacerlo de forma exitosa se debe tener un estimado del trabajo necesario para cada uno de los requerimientos basándose en la rapidez de las iteraciones previas. FIGURA 17: LOS REQUERIMIENTOS AGILES CAMBIAN LA GESTIÓN DEL PROCESO 2.2.2 PRINCIPIOS BÁSICOS Modelar con un propósito: Muchos desarrolladores se preocupan sobre si sus artefactos (modelos, código fuente, documentos) están lo suficientemente detallados o si están demasiado detallados o de forma similar si están lo suficientemente precisos. Lo que no hacen es retroceder y preguntar porque están creando el artefacto en primer lugar y para quien lo están creando. El primer paso es identificar un propósito valido para la creación de un modelo e identificar la audiencia para dicho modelo, entonces, basado en ambos, desarrollarlo lo suficientemente exacto y detallado. Viajar ligero: Mientras más complejo y detallado sean los modelos, entonces cualquier cambio será más difícil de lograr. CAPÍTULO 2: MARCO METODOLÓGICO 43 Modelos múltiples: Se necesitan modelos múltiples para desarrollar software debido a que cada modelo describe un simple aspecto del software. El programador no necesita desarrollar todos los modelos para un sistema dado. Rápida retroalimentación: El tiempo entre una acción y la retroalimentación en dicha acción es crítico. Se debe trabajar de cerca con el cliente para así entender los requerimientos y luego analizarlos, o para desarrollar una interfaz de usuario que cumple con sus necesidades. Asumir la simplicidad: Mientras se desarrolla se debe asumir que la solución más simple es la mejor solución. No se debe sobrecargar el software, o en el caso de AM, no representar características adicionales que no se necesitarán en la actualidad en los modelos. Aceptar el cambio: Los requisitos evolucionan con el tiempo. Los proyectos pueden cambiar sus puntos de vista, sus metas y sus criterios. Cambio Incremental: No se necesita capturar cada simple detalle en los modelos al comienzo. En vez de eso se necesita desarrollar un modelo pequeño, o tal vez un modelo de alto nivel y evolucionarlo con el tiempo de forma incremental. Calidad de trabajo: El trabajo desarrollado debe ser fácil de entender y actualizar. Trabajar en el software es la meta principal: el objetivo del desarrollo de software es producir un software de alta calidad que cumpla con las necesidades del proyecto de forma efectiva. Permitir el próximo resultado es la meta secundaria: Se debe asegurar que el sistema sea lo suficientemente robusto como para permitir que sea ampliado con el paso del tiempo. 2.3 ARQUITECTURA ORIENTADA A SERVICIOS En esta sección se presenta la definición, beneficios y principios de la arquitectura orientada a servicios, además de los pasos que hay que seguir para diseñar y desarrollar dicha arquitectura. 2.3.1 DEFINICIÓN Es un concepto de Arquitectura de Software que define la utilización de servicios para dar soporte a los requerimientos de software del usuario proporcionando una CAPÍTULO 2: MARCO METODOLÓGICO 44 metodología y un marco de trabajo que documenta las capacidades de negocio y puede dar soporte a las actividades de integración y consolidación.[7] Las aplicaciones basadas en SOA utilizan ya tecnología XML y de servicios web para la mensajería, el acceso, las transacciones y otras actividades. Estándares como SOAP, Web Services Description Language (WSDL) y Business Process Execution Language (BPEL) estandarizan así la compartición de información, el modelo de integración de procesos y la cooperación entre aplicaciones. SOA representa la última tendencia como arquitectura de diseño de aplicaciones. Se basa en un modelo para construir componentes lo más básico posibles, con ellos construir otros y al final diseñar aplicaciones basadas en el concepto de reutilización. Aunque constituye un concepto clásico, la diferencia ahora estriba en la madurez de la tecnología y su adopción como estándares. La flexibilidad es tal que las compañías pueden conectar sus aplicaciones cuando realmente lo requieren, evitando la necesidad de mantener enlaces permanentes. Como ventaja añadida, se reduce el coste de desplegar y personalizar las aplicaciones. 2.3.2 BENEFICIOS Los beneficios principales de la arquitectura orientada a servicios son los siguientes: Eficiencia: Transforma los procesos de negocio en servicios compartidos con un menor coste de mantenimiento. Capacidad de respuesta: Rápida adaptación y despliegue de servicios, clave para responder a las demandas de clientes, socios y empleados. Adaptabilidad: Facilita la adopción de cambios añadiendo flexibilidad y reduciendo el esfuerzo. Reduce la complejidad gracias a la compatibilidad basada en estándares frente a la integración punto a punto. Reutiliza los servicios compartidos que han sido desplegados previamente. Integra aplicaciones heredadas limitando así el coste de mantenimiento e integración. 2.3.3 PRINCIPIOS Principios básicos para el desarrollo, mantenimiento y uso de SOA: Reuso, granularidad, modularidad, manejo de componentes, interrelacionamiento de los componentes e interoperabilidad. Cumplimiento con estándares. CAPÍTULO 2: MARCO METODOLÓGICO 45 Identificación, categorización de servicios y despacho, así como monitoreo y seguimiento. Principios específicos de la arquitectura SOA para el diseño y definición enfocada a servicios que deberán influenciar el comportamiento de un sistema, su estilo y diseño: Encapsulamiento de servicios. Servicios de Acoplamiento Suelto (Service Loose coupling) - Este servicio mantiene un relacionamiento que minimiza las dependencias entre sistemas y únicamente requiere que cada parte tenga conocimiento que otra parte existe. Contrato de servicios: Los servicios se deben incluir en los acuerdos de comunicaciones que se definen en los documentos de descripción de servicios entre uno o más servicios. Abstracción de servicios: Más allá de la descripción del servicio, está la lógica oculta de cómo funciona el servicio en el mundo real. Documentación del servicio: Una descripción del diseño orientado al servicio debe contener al menos tres usos diferentes de la frase “valor para el negocio”. Reutilización o reuso del servicio: Se deberán plantear servicios que puedan ser fácilmente reutilizados. Empaquetamiento de servicios: Una colección de servicios que pueden ser coordinados y ensamblados para formar un paquete compuesto de servicios. Autonomía de servicios: Servicios que tienen el control sobre la lógica que ellos encapsulan. Optimización de servicios: Aseguramiento de servicios de alta calidad. Habilidad de descubrimiento de servicios: Los servicios son creados con descripciones adecuadas de manera que puedan ser descubiertos utilizando los mecanismos adecuados para tal fin. Uso eficiente de los recursos del sistema Madurez del servicio y desempeño. EAI Enterprise Application Integration (integración con aplicaciones empresariales). CAPÍTULO 2: MARCO METODOLÓGICO 46 2.3.4 DISEÑO Y DESARROLLO La metodología de modelamiento y diseño utilizada por aplicaciones SOA se comenzó a conocer como “Diseño y análisis orientado a servicios” o SOAD (Service- oriented analysis and design). SOAD es una metodología de diseño para desarrollo de sistemas muy agiles en un modelo cliente/productor donde se abstrae la implementación de el proceso actual, de manera que el servicio provisto puede ser modificado o cambiado sin afectar al cliente. Básicamente se debe estructurar un contrato de servicios que debe contener los siguientes componentes: Encabezado Nombre del servicio. Versión del contrato de servicio. Propietario: Persona o equipo encargados del servicio RACI: Responsable de los entregables del contrato/servicio. Accountable (Dueño): Nivel máximo de escalamiento en términos del contrato/servicio. Consultado: Quien debe ser consultado antes de tomar cualquier acción sobre el presente contrato/servicio. Informado: quien debe ser informado sobre cualquier decisión o acción que se vaya a tomar sobre el presente contrato/servicio. Tipo: Es el tipo de servicio, ayuda a distinguir en que capa residirá. Funcionalidad: Requerimientos funcionales, indicando específicamente la funcionalidad que este servicio debe proveer. El lenguaje debe permitir la generación de casos de prueba sobre la funcionalidad. Operación del servicio y tipo de invocación del servicio (URL, interfaces, triggers). Requerimientos no funcionales, tales como: seguridad, calidad del servicio, ANS (Acuerdos de nivel de servicios) o SLA determinando la máxima latencia permitida para el servicio bajo la cual se pueden realizar acciones, semántica para definir el glosario de términos utilizados en la descripción e interfaces del servicio. 2.3.5 PROTOCOLOS DE SERVICIOS WEB SOA se puede construir sobre servicios web estándares (por ejemplo SOAP) los cuales gozan de gran aceptación industrial. Estos estándares también proveen gran interoperabilidad y protección contra vendedores de software propietario. Sin CAPÍTULO 2: MARCO METODOLÓGICO 47 embargo es posible implementar SOA utilizando cualquier tecnología basada en servicios. Los servicios web relevantes para SOA son los siguientes: XML: Un lenguaje de etiquetas para describir datos en mensajes en formato de documento. Similar a HTML pero mucho más completo y amplio. HTTP o HTTPS: Protocolo para solicitar o responder mensajes entre clientes y servicios. Protocolo estándar web. SOAP: Protocolo para intercambiar mensajes basados en XML en una red de computadores, usualmente usando HTTP. WSDL o Lenguaje de descripción de servicios web: Servicio basado en XML que describe las interfaces públicas, protocolos y formato de mensajes, requeridos para interactuar con un servicio web. UDDI o Descripción, descubrimiento e Integración Universal: Registro basado en XML para publicar descripciones de servicios (WSDL) y permitir su descubrimiento. 2.4 PATRÓN DE DISEÑO MVC (MODELO VISTA CONTROLADOR) El patrón MVC está compuesto de tres módulos diferentes, llamados Modelo, Vista y Controlador como se puede observar en la figura 18. El Modelo está compuesto por el estado y los datos que la aplicación representa. La Vista es la interfaz de usuario que muestra información sobre el modelo y que representa el dispositivo de entrada que se usa para modificarlo. Finalmente, el Controlador es lo que une a los dos anteriores. Hace corresponder las peticiones que llegan del cliente con las acciones correspondientes y dirige las respuestas a las vistas adecuadas. FIGURA 18: PATRÓN DE DISEÑO MVC CAPÍTULO 2: MARCO METODOLÓGICO 48 El Controlador interpreta las acciones del usuario, accediendo a las operaciones de negocio de la aplicación y modificando a partir de sus resultados el estado del modelo y la navegación entre vistas. El Controlador recibe todas las peticiones realizadas a la aplicación. Cada petición se identifica mediante un parámetro. En base a esta identificación, el Controlador decide qué objeto u objetos de negocio (Modelo) debe ejecutar para resolver la petición. [15] Tras la ejecución de los objetos de negocio, y en función del resultado devuelto por estos, el Controlador determina qué vista se usará para visualizar el resultado, generando una redirección que concluirá con la generación del código HTML de la página. [14] El Modelo es la lógica del negocio, representa las operaciones que se efectúan sobre los datos que se reciben o las consultas a base de datos que se hacen, su objetivo es preparar los datos para que la vista sólo se tenga que preocupar de mostrarlos, así si hay que realizar cambios en la estructura de la base de datos o cambiar las operaciones que se hacen con los datos lo tendríamos que hacer sólo en el modelo, evitando que un cambio se tenga que realizar en todas las vistas que utilicen unos determinados datos.[8] La Vista presenta el modelo en un formato adecuado para interactuar, usualmente un elemento de interfaz de usuario. En este componente se puede detectar que tipo de cliente esta accediendo a los datos para personalizar su presentación dando lugar a versiones en distintos idiomas o bien a versiones para distintos canales como PDAs, SMS, WAP, etc. [9] 2.4.1 BENEFICIOS La aplicación del modelo-vista-controlador para el desarrollo de aplicaciones Web tiene varios beneficios: [10] Menor acoplamiento. Desacopla las vistas de los modelos y se desacopla los modelos de la forma en que se muestran y se capturan los datos. Mayor cohesión. Cada elemento del patrón está altamente especializado en su tarea (la vista en mostrar datos al usuario, el controlador en las entradas y el modelo en su objetivo de negocio). Las vistas proveen mayor flexibilidad y agilidad. Se puede crear múltiples vistas de un modelo y se pueden crear, añadir, modificar y eliminar nuevas vistas dinámicamente. Las vistas pueden anidarse. Se puede cambiar el modo en que una vista responde al usuario sin cambiar su representación visual. Se pueden sincronizar las vistas. CAPÍTULO 2: MARCO METODOLÓGICO 49 Mayor facilidad para el desarrollo de clientes ricos en múltiples dispositivos y canales. Es posible crear una vista para cada dispositivo que puede variar según sus capacidades. Además de que se puede tener una vista para el entorno Web y otra para aplicaciones de escritorio. Más claridad en el diseño. Facilita el mantenimiento de las aplicaciones. 2.5 PROCESO DE PRUEBA El proceso de prueba involucra consideraciones similares al del proceso de desarrollo de software, incluyendo estrategias, actividades y métodos, los cuales deben ser aplicados de manera concurrente con el proceso de desarrollo de software. [13] Las etapas del proceso de prueba se dividen en: Estrategia de pruebas, o Orden de pruebas, o Alcance de pruebas, o Automatización de pruebas. Planeación de pruebas, Construcción de las pruebas, Ejecución de las pruebas. Las pruebas deben tener como objetivo la certificación de la calidad del producto y no la búsqueda de errores. En toda prueba se considera que “evitar defectos” es más importante que “removerlos”. 2.5.1 TIPOS DE PRUEBAS Los tipos de prueba se dividen de manera general en pruebas de verificación y validación. En las pruebas de verificación se revisa si el resultado corresponde a la especificación del sistema, es decir, si se está construyendo el sistema de manera correcta. En las pruebas de validación, se revisa si el resultado es realmente lo que el cliente quería, en otras palabras, si se está construyendo el sistema correcto, de manera que tanto la especificación como el resultado lo sean. [13] Entre las técnicas de prueba se encuentran las siguientes: CAPÍTULO 2: MARCO METODOLÓGICO 50 Prueba de regresión: Tiene como propósito verificar el sistema luego, de haberle introducido cambios, de manera que se mantenga la funcionalidad especificada originalmente. Prueba de operación: Su objetivo es verificar el sistema en operación por un largo periodo bajo condiciones normales de uso. Este tipo de prueba mide la confiabilidad del sistema. Prueba de escala completa: Trata de verificar el sistema en su carga máxima mediante la asignación de los parámetros a su valor límite y la interconexión del sistema con un máximo de equipos y usuarios simultáneos. Prueba de rendimiento o capacidad: Tiene como propósito medir la capacidad de procesamiento del sistema bajo diferentes cargas, incluyendo espacio de almacenamiento y utilización de la unidad de procesamiento. Pruebas de sobrecarga: Pretende observar cómo se comporta el sistema cuando se le aplica una sobrecarga, más allá de las pruebas de escala completa y rendimiento. El sistema debería sobrevivir a picos de carga y evitar que ocurra una catástrofe. Prueba negativa: Tiene como propósito medir el estrés del sistema en situaciones inesperadas, como casos de uso que no serian utilizados de manera simultánea. Pruebas basadas en requisitos o pruebas de casos de uso: Intenta llevar a cabo pruebas basadas directamente en la especificación de requisitos. Pueden utilizarse los mismos casos de uso originales como casos de prueba. Pruebas ergonómicas: Tiene como propósito probar los aspectos ergonómicos del sistema, en otras palabras, las interfaces hombre-máquina en el caso de que estas existan. Prueba de documentación de usuario: Tiene como propósito probar la documentación de usuario, incluyendo el manual de este y la documentación de mantenimiento y servicio. Prueba de aceptación o validación: Pretende lograr una revisión final por parte de la organización que solicito el sistema, lo cual a menudo, significa validación del sistema. El sistema se prueba en su ambiente real a menudo por un periodo extenso. 2.5.2 NIVEL DE PRUEBAS Existen tres (3) niveles principales para aplicar las diversas técnicas de pruebas: CAPÍTULO 2: MARCO METODOLÓGICO 51 Prueba de unidad: mediante esta prueba solo una unidad es probada como tal, como una clase, un paquete de servicio o un subsistema. La prueba de unidad es la de más bajo nivel, En un sistema tradicional son, a menudo, pruebas de procedimientos o subrutinas. Según el orden de ejecución, estas pruebas se clasifican en: o Prueba de especificación o caja negra: Tiene como propósito verificar las relaciones de entrada y salida de una unidad. Su objetivo es verificar “que” hace la unidad, pero sin averiguar “como” lo hace. o Prueba basada en estado: Verifica las interacciones entre operaciones de una clase según cambios en los atributos de un objeto. Es necesario hacer pruebas del objeto de acuerdo con su ciclo de vida, lo cual es especialmente importante cuando se trata de objetos controlados por estado, descritos mediante diagramas de transición de estados. o Prueba estructural: Tiene como propósito verificar que la estructura interna de la unidad sea correcta, se conoce también como prueba basada en programa o de caja blanca, dado que debe conocerse como esta implementa internamente la unidad. Prueba de integración: El propósito de esta prueba es verificar que las diferentes unidades trabajen juntas de manera apropiada. En esta prueba se incluyen los paquetes de servicio, casos de uso, subsistemas y el sistema completo. Se prueban primero los flujos básicos, los esenciales del sistema, para luego concentrar la atención en los flujos alternos, correspondientes a flujos que ocurren de manera inusual, como en el caso del manejo de excepciones. Prueba de sistema: Se ejecutan varios casos de uso en paralelo y se somete el sistema a diferentes cargas. Las pruebas del sistema pueden involucrar pruebas de operación, de escala completa, negativas, basadas en requisitos o casos de uso y pruebas de documentación de usuario. 2.6 MÉTODO DE DESARROLLO PROPUESTO Proponemos aplicar el método de desarrollo ágil basándonos en la modelación de iteraciones, en donde se cubren todos los requerimientos que presenta el sistema. Como parte modelo de desarrollo se plantea una implementación por iteraciones comenzando por la Iteración 0 que cubre la organización de las funcionalidades requeridas por el sistema en las demás iteraciones, así como también, los pasos a seguir durante el desarrollo y los entregables definidos en cada iteración. Estas CAPÍTULO 2: MARCO METODOLÓGICO 52 iteraciones estarán pautadas para ser desarrolladas en determinadas fechas según la extensión y complejidad de las funcionalidades que abarcan. FIGURA 21: MÉTODO DE DESARROLLO PROPUESTO Con el fin de producir un sistema de calidad, se realizaran pruebas sobre el sistema para minimizar la mayor cantidad de fallas que este pueda presentar. Para ello, basándonos en el proceso de pruebas, hemos tomado la siguiente estrategia: Orden de Prueba: se realizara un diseño de pruebas de abajo hacia arriba, es decir, se certifican primero las unidades de bajo nivel y luego las interfaces entre ellas. Durante el desarrollo de las pruebas de unidad se tocaran las pruebas de caja negra para validar las especificaciones, pruebas de caja blanca para verificar la estructura interna del sistema y pruebas de estado para verificar las relaciones entre las operaciones de una misma clase y sus cambios de estados. CAPÍTULO 2: MARCO METODOLÓGICO 53 Alcance de las pruebas: a fin de producir un sistema de calidad, se realizaran la mayor cantidad de pruebas tanto a nivel de unidades como de integración y sistema. Automatización de pruebas: una ventaja de usar el diseño de pruebas de abajo hacia arriba es que eliminar la necesidad de crear unidades especializadas para pruebas que recreen el ambiente alrededor de la unidad que se verifica. 54 CAPÍTULO 3: MARCO DE DESARROLLO Debido a la necesidad de agilizar el proceso de entrada y salida de placas en el INTTT, además de registrar las placas asignadas de forma única a un vehículo o a una empresa desde alguna sede del INTTT o desde una computadora en un operativo nacional, se propone como trabajo especial de grado el desarrollo de un Sistema Web basado en una Arquitectura Cliente-Servidor como parte de una propuesta de actualización tecnológica para el INTTT, con opción de migración hacia una Arquitectura Orientada a Servicios para facilitar la conexión de las funcionalidades del sistema con la base de datos del inventario de placas del INTTT y de esta forma permitir la automatización del proceso de carga y liberación de placas desde el departamento de placas del INTTT, agilizando dicho proceso y facilitando el trabajo a realizar por el personal. Objetivo del TEG: desarrollar una plataforma de software aplicando un método de desarrollo ágil en un contexto de trabajo real bajo una arquitectura cliente-servidor proponiendo una migración hacia una arquitectura orientada a servicios, que permita agilizar la masificación de la nueva forma de identificación vehicular, además de promover la actualización tecnológica de otros sistemas de la institución. 3.1 METODOLOGÍA DE DESARROLLO (ITERACIÓN 0) En base a lo expuesto en el capítulo 2, planteamos la siguiente metodología para el desarrollo del sistema propuesto, en la cual, los requerimientos iníciales fueron levantados a través de la metodología de elicitación de requisitos para sistemas de software que se muestra en el anexo a este documento. En base al levantamiento de información fueron identificados los siguientes subsistemas. FIGURA 19: DIAGRAMA DE SUBSISTEMAS CAPÍTULO 3: MARCO DE DESARROLLO 55 A continuación mostraremos los mapas de sitios con las interfaces de las funcionalidades para cada iteración donde E: Estático, D: Dinámico y F: Formulario. Los recuadros pintados en fondo gris ya se encuentran desarrollados y los recuadros pintados de blanco no. Inicio de sesión: E Página Principal: E Usuarios Equipos Stocks Espacio Físico Placas Reportes Agregar Stock: D, F Modificar Stock: D, F Consultar Stocks: D, F Agregar Espacio Físico: D, F Modificar Espacio Físico: D, F Consultar Espacio Físico: D, F Consultar placas: D, F Agregar Usuario: D, F Modificar Usuario: D, F Consultar Usuarios: D, F Agregar Equipo: D, F Modificar Equipo: D, F Consultar Equipos: D, F Reiniciar Contraseña: D, F Eliminar Usuario: D, F Eliminar Equipo: D, F Eliminar Stock: D, F Cargar Placas: D, F Modificar Ubicación Física: D, F Liberar Placas: D, F Producción diaria: D,F Producción para operativos: D, F Producción para oficinas: D, F Producción para ensambladoras: D, F Caso Extraordinario: D, F Reversar Placas: D, F Devolver Placas: D, F Eliminar Placas: D, F Ubicación física de placas: D,F Movimiento al detalle de carga de Placas: D, F Movimiento al detalle de liberación de placas: D, F Movimiento de carga de placas: D, F Movimiento de liberación de placas: D, F Existencia detallada de placas: D, F Reporte del Inventario general de placas: D, F Información detallada de una placa: D, F Operaciones del sistema (Auditoria): D, F Existencia general de placas: D, F FIGURA 19: MAPA DEL SITIO CAPÍTULO 3: MARCO DE DESARROLLO 56 3.1.1 ITERACIÓN 1 Esta iteración está programada para la semana 1 de desarrollo comprendida entre el 21/04/2008 y el 25/04/2008. En esta iteración se contemplan la configuración de los equipos de desarrollo, creación de la Base de Datos y creación de la estructura MVC del Sistema de Inventario de Placas. 3.1.1.1 CONFIGURACIÓN DE LOS EQUIPOS DE DESARROLLO El desarrollo del sistema Web se realizó en el lenguaje PHP 5.0, utilizando el cliente Sybase ASE para el acceso a los datos y la librería nusoap para la creación de los servicios Web. Para verificar el funcionamiento del mismo se trabajo con el servidor de aplicaciones Apache. PHP PHP (acrónimo de Hypertext Preprocessor) es un lenguaje de código abierto interpretado, de alto nivel, embebido en páginas HTML y ejecutado en el servidor. PHP puede ser utilizado en cualquiera de los principales sistemas operativos del mercado, incluyendo Linux, muchas variantes Unix (incluyendo HP-UX, Solaris y OpenBSD), Microsoft Windows, Mac OS X, RISC OS y probablemente alguno más. PHP soporta la mayoría de servidores web de hoy en día, incluyendo Apache, Microsoft Internet Information Server, Personal Web Server, Netscape e iPlanet, Oreilly Website Pro server, Caudium, Xitami, OmniHTTPd y muchos otros. PHP tiene módulos disponibles para la mayoría de los servidores, para aquellos otros que soporten el estándar CGI, PHP puede usarse como procesador CGI. Entre las habilidades de PHP se incluyen: creación de imágenes, archivos PDF y películas Flash (usando libswf y Ming) sobre la marcha. También puede presentar otros resultados, como XHTM y archivos XML. PHP puede autogenerar estos archivos y almacenarlos en el sistema de archivos en vez de presentarlos en la pantalla. [11] SYBASE ASE Por sus siglas en ingles, Adaptive Server Enterprise (ASE) es el motor de bases de datos (RDBMS) insignia de la compañía Sybase, Inc. ASE es un sistema de gestión de datos, altamente escalable, de alto rendimiento, con soporte a grandes volúmenes de datos, transacciones y usuarios, y de bajo costo, que permite: almacenar datos de manera segura, tener acceso y procesar datos de manera inteligente y movilizar datos. [12] 3.1.1.2 BASE DE DATOS En la siguiente figura se puede observar el diagrama entidad-relación diseñado para almacenar los datos relacionados tanto con el sistema de inventario de placas, CAPÍTULO 3: MARCO DE DESARROLLO 57 como con el sistema del departamento de informática para la asignación de placas a los vehículos del país. dp_placa inttt_portal_v4 _institucion dp_auditoria dp_rol dp_equipo dp_usuario dp_tipo_placa dp_evento dp_stock dp_estatus dp_nacionalidad dp_tipo_fecha inttt_portal_v4 _estado inttt_portal_v4 _tramite inttt_portal_v4 _tramite_vehiculo inttt_portal_v4 _placadp_oficina _espacio_fisico inttt_portal_v4 _oficina dp_espacio_fisico dp_registro FIGURA 20: DIAGRAMA E/R Las tablas desarrolladas en esta iteración comienzan con las siglas dp (departamento de placas). Las tablas que comienzan con inttt_portal_v4 son aquellas diseñadas por el departamento de informática para los trámites de asignación de placas a un vehículo en particular. Estas últimas tablas son de consulta para evitar la redundancia de datos, excepto la tabla inttt_portal_v4_placa en la cual se modifica la ubicación y el estatus de la misma dependiendo de las operaciones realizadas en el departamento de placas. CAPÍTULO 3: MARCO DE DESARROLLO 58 En la siguiente figura se puede observar el modelo de datos diseñado para almacenar solo los datos necesarios para el buen funcionamiento del sistema de inventario de placas. Las tablas con mayor importancia son dp_placa, dp_registro, dp_espacio físico y dp_stock. Con la tabla dp_placa se logra almacenar el código de placa, el tipo de placa, el estado al que pertenece la placa, el estatus de la placa (cargada, liberada, devuelta, reversada, en ensambladora, en operativo, en oficina, eliminada), la ubicación física en la que se encuentra almacenada la placa, la oficina en la que fue cargada la placa y la entidad correspondiente. Se ingresan datos en la tabla dp_registro cada vez que se realiza una operación con una placa. En esta tabla se almacena el código de la placa, el tipo de placa y la fecha y hora en la que se realizo la operación, además de almacenar el tipo de fecha (para distinguir la operación realizada en esa fecha y hora en particular), la oficina regional en la que se realizo la operación con la placa, la entidad correspondiente, el nombre del usuario que realizo la operación y la descripción ingresada por el usuario al momento de realizar una determinada operación en el módulo de placas. Con la tabla dp_espacio_fisico se logra almacenar la cantidad de placas existentes para una determinada bandeja la cual se encuentra en una columna de un determinado anaquel en la bóveda. En esta tabla se almacena la oficina en la cual se está agregando la placa, así como la entidad y la nomenclatura de la ubicación física de la placa (por ejemplo: BO01AN01CL01BA01, lo cual significa que la placa fue almacenada en la bóveda 1, en el anaquel 1, en la columna 1, en la primera bandeja). Con la tabla dp_stock se almacena la cantidad existente, la cantidad mínima y la cantidad máxima de placas que se pueden cargar en la bóveda de un determinado tipo de placa y estado para una entidad y oficina especificadas por el usuario. CAPÍTULO 3: MARCO DE DESARROLLO 59 FIGURA 21: MODELO DE DATOS CAPÍTULO 3: MARCO DE DESARROLLO 60 3.1.1.3 ESTRUCTURA DEL SISTEMA La estructura del sistema sigue la vertiente del patrón de diseño Modelo – Vista – Controlador. Como se puede ver en la figura 22, el directorio raíz fue llamado inventario y dentro de este encuentran el directorio controladores (que decide que dependiendo de la vista que lo llame invoca a ciertas funciones en el modelo y redirecciona a una vista); el directorio modelos (que realiza las operaciones sobre las Bases de Datos y retorna los resultados al modelo); el directorio vistas (que contiene todas las interfaces que presenta el sistema); el directorio público (que contiene los logs de transacciones, hojas de estilos, fuentes de letras, imágenes, javascripts y librerías de soporte al sistema); y por último, el directorio servicios (que contiene los servicios proporcionados por el sistema para que cualquier aplicación cliente pueda implementar las funcionalidades ofrecidas por el mismo). FIGURA 22: ESTRUCTURA DEL SISTEMA 3.1.1.4 PRUEBAS Con respecto a las pruebas a realizar durante el desarrollo del sistema se tienen, siguiendo el orden de aparición, las siguientes pruebas globales para cada una de las siguientes iteraciones: Prueba basada en requisitos o prueba de casos de uso: con estas pruebas se trata de verificar que cada unidad o funcionalidad de cada iteración realice lo que tenga que hacer según lo convenido en el levantamiento de CAPÍTULO 3: MARCO DE DESARROLLO 61 información y las especificaciones de los casos de uso. Entre las pruebas a realizar se tienen: o Modificación de los datos en base de datos (visualizar en base de datos las modificaciones que realicen las funcionalidades del sistema), o Comportamiento a nivel de datos en la interfaz (que se muestren únicamente los datos que cumplen las especificaciones de los casos de uso). Pruebas ergonómicas: este tipo de pruebas permite verificar que la interfaz corresponda de manera adecuada con las especificaciones descritas para los casos de uso. Entre las pruebas a realizar se tienen: o Información visual sobre los campos obligatorios (dando en algunos casos un ejemplo de los valores), o Formato, longitud y tipo de datos admitidos en los campos de un formulario ( campos del formulario limitados por el tamaño máximo permitido para cada caso), o Mensajes de confirmación (antes de realizar cada una de las operaciones del sistema), o Mensajes de éxito o de error (después de realizar cada operación se mostrara un mensaje al usuario indicando el estado de la operación realizada), o Redireccionamiento (que vuelva siempre al inicio del sistema indicando el estado de la operación realizada, enlaces redireccionados correctamente). o Navegabilidad del sistema (nombres de las funcionalidades en el menú de usuario, funcionalidades permitidas dependiendo del rol del usuario, acceso al menú de usuario en cualquier funcionalidad, acceso a cancelar la operación en la que se encuentra, permitir eliminar todos los datos de un formulario), Prueba negativa: permitirá encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentra: o Intentar realizar una operación sin rellenar los valores en el formulario que son de tipo obligatorio. Pruebas de rendimiento: estas pruebas serán realizadas luego de la culminación de cada funcionalidad con el fin de comparar el tiempo esperado CAPÍTULO 3: MARCO DE DESARROLLO 62 con el tiempo real de procesamiento durante el desarrollo de la operación. Como por ejemplo al cargar placas por lotes o al liberar una gran cantidad de placas del inventario. Pruebas de regresión: estas pruebas se aplicaran luego de la culminación de cada una de las pruebas mencionadas anteriormente, con el fin de, evaluar si se introdujeron nuevas fallas en el sistema al momento de las correcciones. Pruebas de documentación de usuario: tiene como objetivo evaluar si el documento explica el comportamiento del sistema. Además, se verifica que el documento sea legible, con buena redacción e ilustrativo. 3.1.2 ITERACIÓN 2 Esta iteración está programada para la semana 2 de desarrollo comprendida entre el 28/04/2008 y el 02/05/2008. En esta iteración se contemplan funcionalidades del modulo administrativo del Sistema de Inventario de Placas. 3.1.2.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 23: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR USUARIOS CAPÍTULO 3: MARCO DE DESARROLLO 63 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF – 01 Agregar Usuario Versión 1.0 Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el administrador solicite agregar un nuevo usuario. Precondición El solicitante no es un usuario del sistema y tiene los datos solicitados disponibles. Secuencia Normal Paso Acción 1 El administrador del sistema solicita comenzar el proceso de agregar un nuevo usuario. 2 El sistema solicita los siguientes datos al administrador: nombre, apellido, CI, login, contraseña, rol y estatus. 3 El administrador del sistema solicita los datos requeridos y la documentación al nuevo usuario. 4 El administrador del sistema proporciona los datos requeridos y solicita al sistema que los almacene. 5 El sistema almacena los datos proporcionados y lista todos los usuarios que presenta actualmente el sistema. Postcondición El solicitante es ahora usuario del sistema y puede operarlo de acuerdo al rol asignado por el administrador. Excepciones Paso Acción 4 Si los datos aportados al sistema son incorrectos, el sistema cancela la operación, a continuación este caso de uso termina. 4 Si el sistema detecta que el solicitante ya es usuario del sistema, el sistema informa de la situación al administrador del sistema permitiéndole modificar los datos proporcionados, a continuación este caso de uso continúa. 4 Si el administrador del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada La frecuencia será mayor durante los primeros días. Estabilidad Alta. Comentarios Ninguno. TABLA 4: RF – AGREGAR USUARIO CAPÍTULO 3: MARCO DE DESARROLLO 64 FIGURA 24: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR EQUIPOS 3.1.2.2 MAPA DEL SITIO A continuacion, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 25: MAPA DEL SITIO – ITERACIÓN 2 3.1.2.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primera funcionalidad de esta iteración, en este caso, agregar un usuario. CAPÍTULO 3: MARCO DE DESARROLLO 65 FIGURA 26: INTERFAZ – AGREGAR USUARIO 3.1.2.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en los campos nombres y apellidos, o La cédula debe ser de tipo numérico. El campo cédula debe tener un máximo de 8 números y un mínimo de 6, o El campo usuario, así como la contraseña, debe contener solo caracteres válidos (mayúsculas, minúsculas, acentos y números). Tanto el nombre de usuario como la contraseña deben tener una longitud mayor a 4 caracteres y menor o igual a 15, o Se verifica que la clave de confirmación sea igual a 12345, o El campo clave debe tener un máximo de 5 caracteres, CAPÍTULO 3: MARCO DE DESARROLLO 66 o La IP a ingresar debe ser válida (X.X.X.X, donde 0 <= X < 256) verificando que el primer número ingresado no sea igual a 0, o El campo equipo solo debe tener caracteres válidos (mayúsculas, minúsculas, y números), Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Introducir un usuario cuyo login ya se encuentre registrado en el sistema, o Introducir un equipo cuyo código de equipo ya se encuentre registrado en el sistema. 3.1.3 ITERACIÓN 3 Esta iteración está programada para la semana 3 de desarrollo comprendida entre el 05/05/2008 y el 09/05/2008. En esta iteración se contemplan funcionalidades del modulo administrativo del Sistema de Inventario de Placas. 3.1.3.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 27: DIAGRAMAS DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR STOCKS CAPÍTULO 3: MARCO DE DESARROLLO 67 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 10 Agregar Stock Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el coordinador solicite agregar un nuevo stock. Precondición El stock a agregar no se encuentra registrado en el sistema y el coordinador tiene los datos solicitados disponibles. Secuencia Normal Paso Acción 1 El coordinador del sistema solicita comenzar el proceso de agregar un nuevo stock. 2 El sistema solicita los siguientes datos al coordinador: estado, tipo de placa, mínimo, máximo. 3 El coordinador del sistema proporciona los datos requeridos y solicita al sistema que los almacene. 4 El sistema almacena los datos proporcionados. Postcondición El nuevo stock se encuentra ahora registrado en el sistema. Excepciones Paso Acción 3 Si los datos aportados al sistema son incorrectos, el coordinador del sistema cancela la operación, a continuación este caso de uso termina. 3 Si el sistema detecta que el stock ya se encuentra registrado, el sistema informa de la situación al coordinador permitiéndole modificar los datos proporcionados, a continuación este caso de uso continúa. 3 Si el coordinador del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Debe ser cargado antes de colocar en producción los módulos operativos y de reportes del sistema. Estabilidad Alta. Comentarios Es preciso que “todos los stocks” se encuentre disponibles en el sistema para evitar problemas posteriores con los módulos operativos y de reportes. TABLA 5: RF – AGREGAR STOCK CAPÍTULO 3: MARCO DE DESARROLLO 68 FIGURA 28: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR ESPACIOS FÍSICOS 3.1.3.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 29: MAPA DEL SITIO – ITERACIÓN 3 3.1.3.3 INTERFAZ La siguiente interfaz corresponde a la vista de la ultima funcionalidad de esta iteración, en este caso, consultar los espacios físicos. CAPÍTULO 3: MARCO DE DESARROLLO 69 FIGURA 30: INTERFAZ – CONSULTAR ESPACIO FÍSICO 3.1.3.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Tipo de dato numérico en los campos máximo y mínimo y con una longitud menor o igual a 5 caracteres. Además, se valida que tanto el máximo como el mínimo sean mayor a 0. Se valida que al modificar el stock, el máximo sea mayor o igual a la existencia de placas para dicho stock, o Tipo de dato numérico para Bóveda, cantidad de anaqueles, cantidad de columnas y cantidad de bandejas y capacidad de la bandeja. Todos los campos deben ser mayor a 0. Bóveda, cantidad de columnas y cantidad de bandejas con una longitud igual a 1, cantidad de anaqueles con una longitud igual a 2 y capacidad de la bandeja con una longitud igual a 3. Se valida que los valores a modificar sean siempre mayor a la cantidad de Espacio Físico actual. CAPÍTULO 3: MARCO DE DESARROLLO 70 Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Introducir un stock cuya combinación de tipo de placa, estado y oficina ya se encuentre registrada en el sistema, o Introducir un espacio físico cuya bóveda ya se encuentre registrada en el sistema, o Consultar usuarios, equipos, stocks y espacio físico de los cuales no se cuente con información en base de datos que cumplan con los parámetros solicitados. 3.1.4 ITERACIÓN 4 Esta iteración está programada para la semana 4 de desarrollo comprendida entre el 12/05/2008 y el 16/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. 3.1.4.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 31: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – CARGA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 71 A continuación, se muestra la especificación del caso de uso general de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 17 Cargar Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite cargar una/s nueva/s Placa/s. Precondición La/s Placa/s no se encuentra registrada/s en el sistema. Secuencia Normal Paso Acción 1 El usuario del sistema solicita comenzar el proceso de cargar una/s nueva/s Placa/s. 2 El sistema solicita los siguientes datos al usuario: numero de placa o rango de placas en caso de que sea una carga por lote. 3 El usuario proporciona los datos requeridos y solicita al sistema que los cargue en una lista preliminar. 4 El usuario puede seguir cargando placas, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha cargado todas las placas deseadas, este solicita al sistema que almacene las placas. 6 El sistema asigna según la disponibilidad en el almacén una localización a cada placa y registra el almacenamiento. 7 El sistema genera un reporte con la identificación de cada placa almacenada así como la localización que el sistema asigno a cada una de las placas. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la colocación de las placas en el almacén. Postcondición La/s Placa/s se encuentra ahora registrada/s en el sistema y almacenada/s en el inventario. Excepciones Paso Acción 3 Si la Placa aportada al sistema ya se encuentra registrada, el sistema indica la situación al usuario, a continuación este caso de uso continua 5 Si el usuario del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Diariamente. Estabilidad Alta. Comentarios Todos los tipos de carga de placas se encuentran contemplados en este caso CAPÍTULO 3: MARCO DE DESARROLLO 72 de uso, sin embargo para una mayor comprensión del proceso de carga de placas se explotaran los distintos casos por separado. TABLA 6: RF – CARGAR PLACAS 3.1.4.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 32: MAPA DEL SITIO – ITERACIÓN 4 3.1.4.3 INTERFAZ La siguiente interfaz corresponde a la vista del caso de uso general de esta iteración, en este caso, la carga de placas en el inventario. FIGURA 33: INTERFAZ – CARGA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 73 3.1.4.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Los campos Placa, desde y hasta deben ser de tipo alfanumérico y con una longitud entre 6 y 7 caracteres. Además, se valida que tanto en placa, como en desde y hasta, la placa introducida tenga un formato y un estado valido. o Tipo de dato numérico en el campo lote con una longitud de 10 caracteres y debe ser mayor a 0. o El formato de la fecha de ráfaga está definido por el calendario y debe tener una longitud fija de 8 caracteres. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Cargar una placa cuyo stock no ha sido agregado aun en el sistema, o Cargar que ya ha sido cargada en el sistema, o Cargar placas en una ubicación física donde no hay espacio disponible. Pruebas de sobrecarga: como parte de la prueba de sobrecarga se probó cargar una cantidad mayor a 250 placas respondiendo el sistema satisfactoriamente. A medida que se aumenta este número se disminuyen las prestaciones del sistema, por lo que no se recomienda realizar una carga de más de 250 placas. Además, por configuraciones en el servidor, los tiempos de espera por procesamiento expiran en 25 segundos, por lo tanto, operaciones que realicen más de 20 segundos de procesamiento no podrán ser llevadas a cabo. 3.1.5 ITERACIÓN 5 Esta iteración está programada para la semana 5 de desarrollo comprendida entre el 19/05/2008 y el 23/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. CAPÍTULO 3: MARCO DE DESARROLLO 74 3.1.5.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 34: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 1 A continuación, se muestra la especificación del ultimo caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 23 Consultar Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite consultar la localización en Espacio Físico de ciertas Placas. Precondición Ninguna. Secuencia Normal Paso Acción 1 El usuario del sistema provee los parámetros de la consulta para comenzar el proceso de consulta de las placas en el sistema. 2 El usuario solicita al sistema que busque las placas que concuerden con los parámetros de la consulta. 3 El sistema lista las placas que cumplieron con los parámetros de la CAPÍTULO 3: MARCO DE DESARROLLO 75 consulta. 4 El usuario puede generar un reporte con la información de la consulta. 5 El usuario puede imprimir un reporte con la información de la consulta. Postcondición Ninguna. Excepciones Paso Acción 2 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. 3 Si no se encontró ningún resultado según los parámetros de la consulta, el sistema comunica al usuario la situación, a continuación este caso de uso termina. Frecuencias esperada Veinticinco (25) veces a la semana. Estabilidad Alta. Comentarios Ninguno. TABLA 7: RF – CONSULTAR PLACAS 3.1.5.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 35: MAPA DEL SITIO – ITERACIÓN 5 3.1.5.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primera funcionalidad de esta iteración, en este caso, la vista preliminar de las placas, implementada en la carga de placas. CAPÍTULO 3: MARCO DE DESARROLLO 76 FIGURA 36: INTERFAZ – LISTA PRELIMINAR 3.1.5.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Agregar una placa a la lista preliminar que ya se encuentre en dicha lista, o Consultar una placa que no haya sido cargada en el sistema. 3.1.6 ITERACIÓN 6 Esta iteración está programada para la semana 6 de desarrollo comprendida entre el 26/05/2008 y el 30/05/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. CAPÍTULO 3: MARCO DE DESARROLLO 77 3.1.6.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 37: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – LIBERAR PLACAS A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 24 Liberar Producción Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite liberar una/s placa/s existente/s del almacén. Precondición La/s Placa/s se encuentra registrada/s en el sistema. Secuencia Normal Paso Acción 1 El usuario del sistema solicita comenzar el proceso de liberar una/s placa/s existente/s 2 El sistema solicita los siguientes datos al usuario: numero de placa o rango de placas en caso de que sea una liberación por lote. En caso de otra liberación, se requerirán los parámetros pertinentes para realizar la operación. 3 El usuario proporciona los datos requeridos y solicita al sistema que busque las placas y las cargue en una lista preliminar. CAPÍTULO 3: MARCO DE DESARROLLO 78 4 El usuario puede seguir liberando placas, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha buscado todas las placas deseadas, este solicita al sistema que libere las placas. 6 El sistema libera las placas del almacén registra el motivo de la liberación. 7 El sistema genera un reporte con la identificación de cada placa liberada así como la localización que tiene en el almacén para facilitar su búsqueda. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la ubicación de las placas en el almacén. Postcondición La/s Placa/s se encuentra ahora liberadas/s del almacén. Excepciones Paso Acción 3 Si la Placa buscada no se encuentra en el sistema, el sistema indica la situación al usuario, a continuación este caso de uso continua. 5 Si el usuario del sistema solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Diariamente. Estabilidad Alta. Comentarios Todos los tipos de liberación de placas se encuentran contemplados en este caso de uso, sin embargo, para una mayor comprensión del proceso de liberación de placas se explotaran los distintos casos por separado. TABLA 8: RF – LIBERAR PRODUCCIÓN 3.1.6.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 38: MAPA DEL SITIO – ITERACIÓN 6 CAPÍTULO 3: MARCO DE DESARROLLO 79 3.1.6.3 INTERFAZ La siguiente interfaz corresponde a la vista de la segunda funcionalidad de esta iteración, en este caso, la liberación de producción de placas para operativos, en donde el usuario deberá seleccionar las placas deseadas para la liberación. FIGURA 39: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 1 En a siguiente interfaz, luego de que el usuario ha seleccionado las placas deseadas, estas se cargan en la lista preliminar y posteriormente se procede a agregar una nota y liberarlas del inventario. FIGURA 40: INTERFAZ – LIBERAR PRODUCCIÓN DE PLACAS PARA OPERATIVOS 2 CAPÍTULO 3: MARCO DE DESARROLLO 80 3.1.6.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El formato de la fecha en la liberación por producción diaria está definido por el calendario y debe tener una longitud fija de 10 caracteres. o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en el campo descripción. o Tipo de dato numérico en el campo cantidad con una longitud de 3 dígitos y debe ser mayor a 0. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Liberar producción diaria cuando no se ha solicitado ninguna placa por RAPAL, o Liberar producción para operativos, oficinas y ensambladoras de tipos de placas y estados cuyo stock no ha sido registrado en el sistema, o Liberar producción para operativos, oficinas y ensambladoras con una cantidad de placas mayor a las disponibles en el sistema, o Liberar por caso extraordinario, reversar o devolver una placa que no ha sido cargada. Pruebas de sobrecarga: como parte de la prueba de sobrecarga se probó cargar una cantidad mayor a 250 placas respondiendo el sistema satisfactoriamente. A medida que se aumenta este número se disminuyen las prestaciones del sistema, por lo que no se recomienda realizar una carga de más de 250 placas. Además, por configuraciones en el servidor, los tiempos de espera por procesamiento expiran en 25 segundos, por lo tanto, operaciones que realicen más de 20 segundos de procesamiento no podrán ser llevadas a cabo. CAPÍTULO 3: MARCO DE DESARROLLO 81 3.1.7 ITERACIÓN 7 Esta iteración está programada para la semana 7 de desarrollo comprendida entre el 02/06/2008 y el 06/06/2008. En esta iteración se contemplan funcionalidades del modulo operativo del Sistema de Inventario de Placas. 3.1.7.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 41: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – PLACAS 2 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 22 Modificar Ubicación de Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite modificar la ubicación de alguna/s placa/s en el almacén. Precondición La/s Placa/s ya se encuentra registradas en un espacio físico dentro del CAPÍTULO 3: MARCO DE DESARROLLO 82 almacén. Secuencia Normal Paso Acción 1 El usuario del sistema solicita modificar la ubicación de alguna/s placa/s. 2 El sistema solicita los siguientes datos al usuario: identificación de la placa o rango de placas en caso de que sea una carga por lote. 3 El usuario proporciona los datos requeridos y solicita al sistema que los cargue en una lista preliminar. 4 El usuario puede seguir cargando placas en la lista preliminar, bien sea individualmente o por lotes, así como también, manualmente o por lector de código de barras. 5 Una vez que el usuario ha cargado todas las placas en la lista preliminar, este selecciona un espacio físico dentro del almacén y solicite al sistema que se cambie la ubicación de las placas. 6 El sistema asigna según la disponibilidad en el almacén la nueva ubicación a cada placa y registra el almacenamiento. 7 El sistema genera un reporte con la identificación de cada placa almacenada así como la ubicación que el sistema asigno a cada una de las placas. 8 El usuario puede imprimir el reporte generado por el sistema como una ayuda para la colocación de las placas en el almacén. Postcondición La/s placa/s se encuentra ahora registrada/s en una nuevo espacio físico en el almacén. Excepciones Paso Acción 5 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Cinco (5) veces al día. Estabilidad Alta. Comentarios Ninguno. TABLA 9: RF – MODIFICAR UBICACIÓN DE LAS PLACAS 3.1.7.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. CAPÍTULO 3: MARCO DE DESARROLLO 83 FIGURA 42: MAPA DEL SITIO – ITERACIÓN 7 3.1.7.3 INTERFAZ La siguiente interfaz corresponde a la vista de la tercera funcionalidad de esta iteración, en este caso, la devolución de las placas al inventario. FIGURA 43: INTERFAZ – DEVOLUCIÓN DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 84 3.1.7.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o Solo se permiten caracteres válidos (mayúsculas, minúsculas y acentos) en el campo descripción. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Modificar la ubicación física de unas placas a una nueva ubicación donde no hay espacio disponible, o Reversar una placa que no cuente con estatus de reversada, o Reversar o devolver una placa que no ha sido liberada, o Eliminar una placa que posee historia en el Sistema de Inventario de placas. 3.1.8 ITERACIÓN 8 Esta iteración está programada para la semana 8 de desarrollo comprendida entre el 09/06/2008 y el 13/06/2008. En esta iteración se contemplan funcionalidades del modulo de reportes del Sistema de Inventario de Placas. 3.1.8.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. CAPÍTULO 3: MARCO DE DESARROLLO 85 FIGURA 44: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 1 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 35 Reporte Ubicación Física de las Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite un Reporte con la Ubicación Física de las Placas. Precondición Debe haber placas ubicadas en un espacio físico dentro del almacén. Secuencia Normal Paso Acción 1 El usuario del sistema solicita un Reporte de Ubicación Física. 2 El sistema solicita al usuario seleccione: oficina, estado de la placa y tipo de placa. CAPÍTULO 3: MARCO DE DESARROLLO 86 3 El usuario provee los parámetros para la generación del reporte y solicita al sistema generar el reporte. 4 El sistema le permite al usuario guardar el reporte. 5 El sistema le permite al usuario imprimir el reporte. Postcondición Ninguna. Excepciones Paso Acción 3 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Tres (3) veces por semana. Estabilidad Alta. Comentarios Por defecto, los parámetros se muestran como sigue: Oficina: Oficina Actual, Estado: TODOS, Tipo de Placa: TODOS. Únicamente la sede principal puede visualizar las placas que se encuentran en otras oficinas. TABLA 10: RF – REPORTE UBICACIÓN FÍSICA DE PLACAS 3.1.8.2 MAPA DEL SITIO A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. Inicio de sesión: E Página Principal: E Reporte de placas por ubicación física: D,F Movimiento al detalle de carga de Placas: D, F Movimiento al detalle de liberación de placas: D, F Iteración 8 Movimiento de carga de placas: D, F Movimiento de liberación de placas: D, F FIGURA 45: MAPA DEL SITIO – ITERACIÓN 8 CAPÍTULO 3: MARCO DE DESARROLLO 87 3.1.8.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primara funcionalidad de esta iteración, en este caso, la generación del reporte de placas por ubicación física en donde se deberá seleccionar la ubicación deseada. FIGURA 46: INTERFAZ – REPORTE DE PLACAS POR UBICACIÓN FÍSICA 3.1.8.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El campo para la fecha de inicio y para la fecha de fin tiene una longitud de 10 caracteres, con un formato propio del calendario. Se valida además, que fecha de inicio ingresada sea menor a la fecha de fin. CAPÍTULO 3: MARCO DE DESARROLLO 88 Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentran: o Obtener un reporte que no cuenta con información en base de datos que cumplan con los parámetros solicitados. 3.1.9 ITERACIÓN 9 Esta iteración está programada para la semana 9 de desarrollo comprendida entre el 16/06/2008 y el 20/06/2008. En esta iteración se contemplan funcionalidades del modulo de reportes del Sistema de Inventario de Placas. 3.1.9.1 CASOS DE USO En esta sección se muestran las funcionalidades desarrolladas en esta iteración representadas por medio de diagramas de casos de uso. FIGURA 47: DIAGRAMA DE CASOS DE USO DEL SUBSISTEMA ADMINISTRAR PLACAS – REPORTES 2 CAPÍTULO 3: MARCO DE DESARROLLO 89 A continuación, se muestra la especificación del primer caso se uso de esta iteración. Las demás especificaciones de los casos de usos realizados en esta iteración se encuentran en un documento anexo a este documento. RF - 40 Reporte de Existencia General de Placas Fuentes Sistema de Inventario de Placas antiguo. Descripción El sistema deberá comportarse tal como se describe en el siguiente caso de uso cuando el personal del Departamento de Placas solicite un Reporte con la Existencia General de Placas en el Inventario. Precondición Ninguna. Secuencia Normal Paso Acción 1 El usuario del sistema solicita un Reporte con la Existencia General de Placas en el Inventario. 2 El sistema solicita al usuario seleccione: tipo de reporte (general, por estado o por tipo de placa). 3 El usuario provee el parámetro para la generación del reporte y solicita al sistema generar el reporte. 4 El sistema le permite al usuario guardar el reporte. 5 El sistema le permite al usuario imprimir el reporte. Postcondición Ninguna. Excepciones Paso Acción 3 Si el usuario solicita cancelar la operación, el sistema cancela la operación, a continuación este caso de uso termina. Frecuencias esperada Una (1) vez a la semana. Estabilidad Alta. Comentarios Por defecto, los parámetros se muestran como sigue: Tipo de Reporte: General. Si el Reporte es General se muestra un listado por Estado y sus respectivas cantidades para cada Tipo de Placa, totalizando por cada Tipo de Placa y por todo el Reporte. Si el Reporte es General por Estado se muestran los Estados y sus respetivas cantidades totalizando al final del Reporte. Si el Reporte es General por Tipo de Placa se muestran los Tipos de Placas y sus respectivas cantidades totalizando al final del Reporte. TABLA 11: RF – REPORTE EXISTENCIA GENERAL DE PLACAS 3.1.9.2 MAPA DEL SITIO CAPÍTULO 3: MARCO DE DESARROLLO 90 A continuación, se muestra el mapa de vistas de las funcionalidades desarrolladas en esta iteración. FIGURA 48: MAPA DEL SITIO – ITERACIÓN 9 3.1.9.3 INTERFAZ La siguiente interfaz corresponde a la vista de la primara funcionalidad de esta iteración, en este caso, la generación del reporte de existencia detallada de placas. FIGURA 49: INTERFAZ – REPORTE DE EXISTENCIA DETALLADA DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 91 3.1.9.4 PRUEBAS En esta iteración, además de realizar las pruebas globales propuestas en la iteración 1, se tienen las siguientes: Pruebas ergonómicas: o El campo para la fecha de inicio y para la fecha de fin tiene una longitud de 10 caracteres, con un formato propio del calendario. Se valida además, que fecha de inicio ingresada sea menor a la fecha de fin. Pruebas negativas: permitirán encontrar fallas en los casos que se realice el flujo normal de funcionalidades de manera incorrecta. Entre estas pruebas se encuentra: o Obtener un reporte que no cuenta con información en base de datos que cumplan con los parámetros solicitados. 3.1.10 LIBERACIÓN DEL SISTEMA DE INVENTARIO DE PLACAS Una vez realizadas todas las iteraciones para cumplir con el desarrollo del sistema, se procedió a la entrega del sistema al Departamento de Informática. Esta entrega fue programada en la fecha comprendida entre 07/07/2008 y el 11/07/2008. Después de la entrega de sistema, el Departamento de Informática, conjuntamente con el personal del Departamento de Placas de INTTT, se encargaron de realizar las pruebas de operaciones y de aceptación o validación del sistema antes de montar el sistema en producción. Durante el transcurso de esta semana se evaluaron todas las posibles funcionalidades del sistema en condiciones normales y con un máximo de usuarios y equipos. Estas pruebas fueron realizadas en un ambiente totalmente de desarrollo. 3.1.11 PRODUCCIÓN Luego de las pruebas realizadas por el Departamento de Placas y el Departamento de Informática del INTTT y habiendo evaluado la calidad del sistema, se decidió la puesta en producción del mismo. La puesta en producción del sistema fue programada para la semana comprendida entre el 14/07/2008 y el 18/07/2008. CAPÍTULO 3: MARCO DE DESARROLLO 92 3.2 ACTUALIZACIÓN DEL SISTEMA El Sistema de Inventario de Placas fue puesto en producción debido a que se requería con urgencia en el Departamento de Placas. Sin embargo, se propone una migración a una arquitectura orientada a servicios. Siguiendo el método de desarrollo ágil basado en la modelación de iteraciones, se propone la migración del sistema de inventario de placas en las iteraciones 10 y 11. Debido a que el sistema fue puesto en producción solo en la sede principal, se desarrollaron servicios de consulta los cuales servirán como soporte para otros sistemas de los diferentes departamentos de la sede principal del INTTT. Estos servicios servirán como base y como ejemplo para el futuro desarrollo de otros servicios, los cuales en un futuro constituirán una base para la migración completa de una arquitectura cliente-servidor hacia una arquitectura orientada a servicios. Los servicios a implementar en el sistema de inventario son los siguientes: Consultar Oficinas: este servicio permite que cualquier aplicación cliente pueda acceder a la lista de las 69 oficinas que tiene el INTTT. Se tomo la decisión de crear este servicio, debido a que el usuario de la aplicación cliente instalada en una de las oficinas del INTTT puede desear conocer el stock que posee su oficina. Consultar Stocks: este servicio permite que cualquier aplicación cliente pueda conocer el stock de una oficina del INTTT. Se tomo la decisión de crear este servicio debido a que para cualquier oficina del INTTT es necesario conocer la cantidad existente por tipo de placa y estado, además del máximo y el mínimo de placas permitido por stock. Esto permite que la oficina lleve un control de la cantidad de placas que necesita solicitar y de la cantidad de placas que puede liberar para un determinado stock. Consultar datos de una placa: este servicio permite que cualquier aplicación cliente pueda conocer los datos de una placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina conozca los datos completos de una placa. Consultar el registro de una placa: este servicio permite que cualquier aplicación cliente pueda conocer las operaciones que se han realizado con una placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina lleve un control sobre las operaciones realizadas con las placas. Consultar placas: este servicio permite que cualquier aplicación cliente pueda conocer los datos de una placa o de un lote de placa. Se tomo la decisión de crear este servicio debido a que permite que la oficina conozca CAPÍTULO 3: MARCO DE DESARROLLO 93 el estatus final que tienen las placas, conociendo así el tipo de placa, el estado, la ubicación, el estatus y la oficina en la que se encuentran. Consultar placas cargadas: este servicio permite que cualquier aplicación cliente pueda conocer cuales placas han sido cargadas en el sistema en un rango específico de fechas. Se tomo la decisión de crear este servicio debido a que una oficina puede consultar los códigos de las placas que han sido cargadas en el departamento de placas en un rango de tiempo, permitiendo tener un control sobre las placas que se encuentran almacenadas, lo cual es de mucha ayuda en caso del extravío de una placa. Consultar placas liberadas: este servicio permite que cualquier aplicación cliente pueda conocer cuales placas han sido liberadas en el sistema en un rango específico de fechas. Se tomo la decisión de crear este servicio debido a que una oficina puede consultar los códigos de las placas que han sido liberadas del departamento de placas en un rango de tiempo, permitiendo tener un control sobre las placas a las que se les ha dado salida. Pedido de placas: este servicio permite que cualquier aplicación cliente pueda conocer la cantidad de placas a solicitar por stock. Se tomo la decisión de crear este servicio debido a que una oficina puede tener la necesidad de consultar un servicio que le provea la cantidad de placas máxima que puede solicitar para cada tipo de placa de cada estado del país. 3.2.1 ITERACIÓN 10 Esta iteración está programada para la semana 10 de desarrollo comprendida entre el 23/06/2008 y el 27/06/2008. En esta iteración se realiza la primera etapa de la propuesta de migración a SOA del Sistema de Inventario de Placas. 3.2.1.1 SERVICIOS IMPLEMENTADOS Nombre consultarOficinas Descripción Se encarga de obtener la lista de las oficinas del INTTT, es decir, todas las oficinas que se encuentren en la entidad IN. Datos de entrada Ninguno Datos de Salida Retorna un arreglo de Oficinas. Contiene id_oficina, id_entidad y nombre_oficina TABLA 12: SERVICIO 1 – CONSULTAR OFICINAS CAPÍTULO 3: MARCO DE DESARROLLO 94 Nombre consultarStocks Descripción Se encarga de obtener la lista de los stocks pertenecientes a una oficina dada. Datos de entrada Id_oficina, id_entidad. Datos de Salida Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa, máximo, mínimo y existencia TABLA 13: SERVICIO 2 – CONSULTAR STOCKS Nombre consultarPlaca Descripción Se encarga de obtener los datos completos de una placa. Datos de entrada Id_placa. Datos de Salida Retorna un arreglo datos de una placa. Contiene id_placa, id_estado, nombre_estado, id_tipo_placa, tipo_placa, id_ubicacion, ubicacion, id_estatus. TABLA 14: SERVICIO 3 – CONSULTAR UNA PLACA Nombre consultarRegistros Descripción Se encarga de obtener la lista de las operaciones realizadas con una placa, además de obtener los datos del usuario que realizo la operación. Datos de entrada Id_placa. Datos de Salida Retorna un arreglo de registros de una placa. Contiene id_placa, operacion, fecha, nombre_usuario, apellido_usuario, nombre_oficina, descripcion TABLA 15: SERVICIO 4 – CONSULTAR REGISTROS DE UNA PLACA Los servicios desarrollados que tienen mayor importancia en esta iteración son los de consultar una placa y consultar registros, debido a que estos permitirán que se pueda visualizar en una aplicación cliente, los datos y el registro de las operaciones realizadas con una determinada placa. Esto servirá al momento de realizar una auditoría de usuario o al momento de tener una traza de las operaciones realizadas con una placa antes de ser asignada a un vehículo especifico por parte del departamento de informática del INTTT. CAPÍTULO 3: MARCO DE DESARROLLO 95 Como ejemplo de acceso a los servicios se desarrollo una aplicación cliente de prueba que mostrara los resultados deseados por el usuario final de la misma. El código fuente intradocumentado se entregó al departamento de informática del INTTT para facilitar el entendimiento y la reutilización en caso de que se acepte la propuesta de migración a SOA. En la siguiente figura podemos observar la interfaz de la aplicación cliente de ejemplo con la funcionalidad de consultar una placa al detalle, teniendo acceso a los servicios de consulta de una placa y consulta del registro de una placa, una vez ingresado el parámetro de entrada, que en este caso es la placa de código AA000AA correspondiente al tipo de placa de vehículos particulares para el Distrito Capital. FIGURA 50: INTERFAZ – SERVICIO PARA CONSULTAR UNA PLACA AL DETALLE 3.2.2 ITERACIÓN 11 Esta iteración está programada para la semana 11 de desarrollo comprendida entre el 30/06/2008 y el 04/07/2008. En esta iteración se realiza la segunda etapa de la propuesta de migración a SOA del Sistema de Inventario de Placas. 3.2.2.1 SERVICIOS IMPLEMENTADOS Nombre consultarPlacas Descripción Se encarga de obtener una lista con los datos completos de una placa o de un lote de placas. CAPÍTULO 3: MARCO DE DESARROLLO 96 Datos de entrada Id_placa, desde, hasta. Donde desde y hasta son los códigos de las placas que marcan el comienzo y el fin de un lote de placas. Datos de Salida Retorna un arreglo de datos de una placa o de un lote de placas. Contiene id_placa, id_tipo_placa, id_estado, id_estatus, ubicacion, id_oficina, tipo_placa, estado, nombre_oficina. TABLA 16: SERVICIO 5 – CONSULTAR PLACAS Nombre consultar_detalle_carga Descripción Se encarga de obtener una lista con los códigos de las placas que han sido cargadas en el departamento de placas en un determinado rango de tiempo. Datos de entrada fecha_inicio, fecha_fin. Datos de Salida Retorna un arreglo de placas cargadas en un rango de tiempo. Contiene id_placa. TABLA 17: SERVICIO 6 – CONSULTAR PLACAS CARGADAS Nombre consultar_detalle_liberacion Descripción Se encarga de obtener una lista con los códigos de las placas que han sido liberadas del departamento de placas en un determinado rango de tiempo. Datos de entrada fecha_inicio, fecha_fin. Datos de Salida Retorna un arreglo de placas liberadas en un rango de tiempo. Contiene id_placa. TABLA 18: SERVICIO 7 – CONSULTAR PLACAS LIBERADAS Nombre pedidoPlacas Descripción Se encarga de obtener una lista con la cantidad de placas que se pueden solicitar para cada stock de la oficina seleccionada. Datos de entrada Id_oficina, id_entidad Datos de Salida Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa y cantidad. TABLA 19: SERVICIO 8 – PEDIDO DE PLACAS CAPÍTULO 3: MARCO DE DESARROLLO 97 Entre los servicios desarrollados en esta iteración el que tiene mayor importancia es el de pedido de placas, debido a que permitirá que se pueda visualizar en una aplicación cliente, la cantidad de placas que necesita pedir la sede principal del INTTT a Horizonte Vías y Señales para tener el máximo de placas en los stocks del departamento de placas, garantizando de esta manera que siempre hayan placas disponibles para la liberación, ya sea hacia un operativo nacional, una oficina regional o hacia un determinado vehículo. Este servicio puede ser utilizado por el departamento del INTTT que se encargue de la relación entre el instituto y HVS. Como se menciono en la iteración 10, se desarrollo una aplicación cliente de prueba como ejemplo de acceso a los servicios webs desarrollados. En la siguiente figura podemos observar la interfaz de la aplicación cliente de ejemplo con la funcionalidad de pedido de placas. Antes de acceder a este servicio se debe pasar la oficina como parámetro de entrada, accediendo de esta manera al servicio de consulta de oficinas. Una vez seleccionada la oficina se muestra al usuario el estado, el tipo de placas y la cantidad a solicitar a HVS para tener todas las placas necesarias para satisfacer las necesidades del departamento de placas del INTTT. FIGURA 51: INTERFAZ – SERVICIO PARA REALIZAR UN PEDIDO DE PLACAS 3.2.2.2 DOCUMENTO WSDL A continuación se encuentra el código WSDL completo e intradocumentado (una vez por cada término encontrado) generado por medio de la librería nusoap versión CAPÍTULO 3: MARCO DE DESARROLLO 98 0.7.3. Este código es al que acceden las aplicaciones clientes para utilizar cualquier funcionalidad que presten los servicios definidos por medio de este lenguaje. <?xml version="1.0" encoding="ISO-8859-1"?> <!-- Se define la versión a utilizar de xml --> <definitions xmlns:SOAP- ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd= "http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="urn:servidor_soap" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl= "http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace= "urn:servidor_soap"> <types> <!-- Definición de los tipos de datos que se utilizaran en cada una de las funcionalidades que prestaran los servicios web --> <xsd:schema targetNamespace="urn:servidor_soap"> <!-- Las aplicaciones clientes se conectaran a servidor_soap.php?wsdl para acceder a los servicios web --> <xsd:import namespace="http://schemas.xmlsoap.org/soap/encoding/" /> <xsd:import namespace="http://schemas.xmlsoap.org/wsdl/" /> <!-- Datos a importar para la creación de elementos --> <xsd:complexType name="Stock"> <!-- Creación de un arreglo de datos llamado stock --> <xsd:all> <xsd:element name="nombre_estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <!-- Elemento tipo cadena de texto, es obligatorio ingresar un solo valor --> <xsd:element name="descripcion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="maximo" type="xsd:int" maxOccurs="1" minOccurs="1"/> <!-- Elemento tipo entero, es obligatorio ingresar un solo valor --> <xsd:element name="minimo" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="existencia" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="cantidad" type="xsd:int" maxOccurs="1" minOccurs="1"/> </xsd:all> <!-- Elementos que conforman el arreglo Stock --> </xsd:complexType> <xsd:complexType name="lista_stocks"> <!-- Creación de un arreglo llamado lista_stocks --> <xsd:complexContent> <!-- Elemento de contenido complejo, se refiere a listas o a matrices --> <xsd:restriction base="SOAP-ENC:Array"> <!-- Se especifica que la lista de stocks contendra arreglos como elementos --> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Stock[]" maxOccurs="unbounded" minOccurs="0"/> <!-- lista_stocks solo contendrá elementos que sean del tipo complejo Stock definido anteriormente, puede contener de 0 a n elementos --> </xsd:restriction> CAPÍTULO 3: MARCO DE DESARROLLO 99 </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Oficina"> <!-- Creación de un arreglo de datos llamado Oficina --> <xsd:all> <xsd:element name="id_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_entidad" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> <!-- Elementos que conforman el arreglo Oficina --> </xsd:complexType> <xsd:complexType name="lista_oficinas"> <!-- Creación de un arreglo llamado lista_oficinas --> <xsd:complexContent> <!-- Elemento de contenido complejo, se refiere a listas o a matrices --> <xsd:restriction base="SOAP-ENC:Array"> <!-- Se especifica que la lista de oficinas contendra arreglos como elementos --> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Oficina[]" maxOccurs="unbounded" minOccurs="0"/> <!-- lista_oficinas solo contendrá elementos que sean del tipo complejo Oficina definido anteriormente, puede contener de 0 a n elementos --> </xsd:restriction> </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Placa"> <xsd:all> <xsd:element name="id_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="estado" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_tipo_placa" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="tipo_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_ubicacion" type="xsd:int" maxOccurs="1" minOccurs="1"/> <xsd:element name="ubicacion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_estatus" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="id_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> </xsd:complexType> <xsd:complexType name="lista_placas"> <xsd:complexContent> <xsd:restriction base="SOAP-ENC:Array"> CAPÍTULO 3: MARCO DE DESARROLLO 100 <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Placa[]" maxOccurs="unbounded" minOccurs="0"/> </xsd:restriction> </xsd:complexContent> </xsd:complexType> <xsd:complexType name="Registro"> <xsd:all> <xsd:element name="id_placa" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="operacion" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="fecha" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_usuario" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="apellido_usuario" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="nombre_oficina" type="xsd:string" maxOccurs="1" minOccurs="1"/> <xsd:element name="descripcion" type="xsd:string" maxOccurs="1" minOccurs="1"/> </xsd:all> </xsd:complexType> <xsd:complexType name="lista_registros"> <xsd:complexContent> <xsd:restriction base="SOAP-ENC:Array"> <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:Registro[]" maxOccurs="unbounded" minOccurs="0"/> </xsd:restriction> </xsd:complexContent> </xsd:complexType> </xsd:schema> </types> <!-- Se completo la definición de los tipos a utilizar en las funciones --> <message name="consultarStocksRequest"> <part name="id_oficina" type="xsd:string" /> <part name="id_entidad" type="xsd:string" /></message> <!-- Definición de los parámetros de entrada para la función consultarStocks --> <message name="consultarStocksResponse"> <part name="return" type="tns:lista_stocks" /></message> <!-- Definición del tipo de dato que se obtendrá como respuesta al usar la función consultarStocks --> <!-- Se utiliza tipo tns cuando el elemento de salida es un arreglo, lista o matriz --> <message name="pdfInventarioRequest"> <part name="lista_stocks" type="tns:lista_stocks" /></message> <message name="pdfInventarioResponse"></message> <message name="consultarOficinasRequest"></message> <!-- La función consultarOficinas no recibe parámetros de entrada --> <message name="consultarOficinasResponse"> <part name="return" type="tns:lista_oficinas" /></message> <!-- Definición del tipo de dato que se obtendrá como respuesta al usar la función consultarOficinas --> <message name="consultarPlacaRequest"> <part name="id_placa" type="xsd:string" /></message> <!-- Se utiliza tipo xsd cuando el elemento de salida es tipo cadena de texto o entero --> CAPÍTULO 3: MARCO DE DESARROLLO 101 <message name="consultarPlacaResponse"> <part name="return" type="tns:Placa" /></message> <message name="consultarRegistrosRequest"> <part name="id_placa" type="xsd:string" /> <part name="id_tipo_placa" type="xsd:int" /></message> <message name="consultarRegistrosResponse"> <part name="return" type="tns:lista_registros" /></message> <message name="consultarPlacasRequest"> <part name="id_placa" type="xsd:string" /> <part name="desde" type="xsd:string" /> <part name="hasta" type="xsd:string" /></message> <message name="consultarPlacasResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="consultar_detalle_cargaRequest"> <part name="fecha_inicio" type="xsd:string" /> <part name="fecha_fin" type="xsd:string" /></message> <message name="consultar_detalle_cargaResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="consultar_detalle_liberacionRequest"> <part name="fecha_inicio" type="xsd:string" /> <part name="fecha_fin" type="xsd:string" /></message> <message name="consultar_detalle_liberacionResponse"> <part name="return" type="tns:lista_placas" /></message> <message name="pedidoPlacasRequest"> <part name="id_oficina" type="xsd:string" /> <part name="id_entidad" type="xsd:string" /></message> <message name="pedidoPlacasResponse"> <part name="return" type="tns:lista_stocks" /></message> <!-- Se completo la definición de los parametros de entrada y de las respuestas de cada función --> <portType name="servidor_soapPortType"> <!-- Asignación de los parámetros de entrada y de respuesta definidos anteriormente para cada una de las funciones --> <operation name="consultarStocks"> <!-- Se especifica el nombre de la función --> <documentation>Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa, maximo, minimo y existencia</documentation> <!-- Muestra al usuario final documentación para conocer los datos que contiene y los tipos de datos de salida de la función consultarStocks --> <input message="tns:consultarStocksRequest"/> <!-- Se agrega el mensaje definido para identificar los parámetros de entrada en consultarStocks --> <output message="tns:consultarStocksResponse"/> <!-- Se agrega el mensaje definido para identificar los tipos de datos de salida al usar la función consultarStocks--> </operation> <!-- Fin de la definición de la operación consultarStocks --> <operation name="pdfInventario"> <documentation>Se abre una nueva ventana con el pdf del inventario general de placas </documentation> <input message="tns:pdfInventarioRequest"/> <output message="tns:pdfInventarioResponse"/> </operation> <operation name="consultarOficinas"> <documentation>Retorna un arreglo de un arreglo de Oficina. Contiene id_oficina,id_entidad y nombre_oficina</documentation> CAPÍTULO 3: MARCO DE DESARROLLO 102 <input message="tns:consultarOficinasRequest"/> <output message="tns:consultarOficinasResponse"/> </operation> <operation name="consultarPlaca"> <documentation>Retorna los datos de una placa. Contiene id_placa, id_estado,nombre_estado, id_tipo_placa, tipo_placa, id_ubicacion, ubicacion, id_estatus</documentation> <input message="tns:consultarPlacaRequest"/> <output message="tns:consultarPlacaResponse"/> </operation> <operation name="consultarRegistros"> <documentation>Retorna un arreglo de registros de una placa. Contiene id_placa,operacion, fecha, nombre_usuario, apellido_usuario, nombre_oficina, descripcion </documentation> <input message="tns:consultarRegistrosRequest"/> <output message="tns:consultarRegistrosResponse"/> </operation> <operation name="consultarPlacas"> <documentation>Retorna un arreglo de datos de una placa o de un lote de placas. Contiene id_placa, id_tipo_placa, id_estado, id_estatus, ubicacion, id_oficina, tipo_placa, estado, nombre_oficina</documentation> <input message="tns:consultarPlacasRequest"/> <output message="tns:consultarPlacasResponse"/> </operation> <operation name="consultar_detalle_carga"> <documentation>Retorna un arreglo de placas cargadas en un rango de tiempo. Contiene id_placa</documentation> <input message="tns:consultar_detalle_cargaRequest"/> <output message="tns:consultar_detalle_cargaResponse"/> </operation> <operation name="consultar_detalle_liberacion"> <documentation>Retorna un arreglo de placas liberadas en un rango de tiempo. Contiene id_placa</documentation> <input message="tns:consultar_detalle_liberacionRequest"/> <output message="tns:consultar_detalle_liberacionResponse"/> </operation> <operation name="pedidoPlacas"> <documentation>Retorna un arreglo de Stocks de una Oficina. Contiene estado, tipo de placa y cantidad a pedir</documentation> <input message="tns:pedidoPlacasRequest"/> <output message="tns:pedidoPlacasResponse"/> </operation> </portType> <!-- Se finaliza la asignación de los parámetros de entrada y de respuesta definidos para cada una de las funciones --> <binding name="servidor_soapBinding" type="tns:servidor_soapPortType"> <!-- Se especifica que servidor_soapBinding hará una referencia a un conjunto de datos por medio de un puerto --> <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/> <!-- Se define el protocolo de llamada a procedimiento remoto --> <operation name="consultarStocks"> CAPÍTULO 3: MARCO DE DESARROLLO 103 <!-- Se define la operación consultarStocks --> <soap:operation soapAction="urn:servidor_soap#consultarStocks" style="rpc"/> <!-- Al utilizar la operación consultarStocks se accede a la función consultarStocks del servidor soap por medio del protocolo rpc --> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle= "http://schemas.xmlsoap.org/soap/encoding/"/></output> <!--Se establece servidor_soap como nombre uniforme de recurso tanto para los datos de entrada como de salida - -> </operation> <operation name="pdfInventario"> <soap:operation soapAction="urn:servidor_soap#pdfInventario" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarOficinas"> <soap:operation soapAction="urn:servidor_soap#consultarOficinas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarPlaca"> <soap:operation soapAction="urn:servidor_soap#consultarPlaca" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarRegistros"> <soap:operation soapAction="urn:servidor_soap#consultarRegistros" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultarPlacas"> <soap:operation soapAction="urn:servidor_soap#consultarPlacas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle= "http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> CAPÍTULO 3: MARCO DE DESARROLLO 104 <operation name="consultar_detalle_carga"> <soap:operation soapAction="urn:servidor_soap#consultar_detalle_carga" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="consultar_detalle_liberacion"> <soap:operation soapAction="urn:servidor_soap#consultar_detalle_liberacion" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> <operation name="pedidoPlacas"> <soap:operation soapAction="urn:servidor_soap#pedidoPlacas" style="rpc"/> <input><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input> <output><soap:body use="encoded" namespace="urn:servidor_soap" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output> </operation> </binding> <!-- Se terminan de establecer las referencias para cada una de las operaciones en servidor_soap --> <service name="servidor_soap"> <!-- El servicio web se accedera con el nombre de servidor_soap --> <port name="servidor_soapPort" binding="tns:servidor_soapBinding"> <soap:address location="http://localhost/inventario/servicios/servidor_soap.php"/> <!-- En este caso usamos como servidor a localhost, aqui se especifica el servidor que contendra el servicio web ademas del puerto de acceso, en este caso es el puerto 80 --> </port> </service> </definitions> FIGURA 52: DOCUMENTO WSDL 3.3 LOGROS ALCANZADOS A continuación se listan los logros alcanzados por el nuevo sistema, tanto a nivel de funcionalidades, como a nivel de repositorio de información e interfaz de usuarios. El sistema soporta el nuevo formato de placas de siete (7) dígitos, además de validar las placas con formato de seis (6) dígitos. Este último caso se da cuando el tipo de placa es tracción sangre o minusválidos. No existe redundancia de funcionalidades. Cada módulo tiene las funcionalidades necesarias para que el departamento de placas funcione de forma eficaz y eficiente. CAPÍTULO 3: MARCO DE DESARROLLO 105 El departamento de placas se comunica con la base de datos utilizada por el portal del INTTT para la asignación de vehículos, de forma tal que si una placa se encuentra reversada o asignada se tomará en cuenta en el sistema. Se generan reportes en formato PDF al realizar cualquier operación con placas, excepto al consultar placas ya que los datos aparecen en una vista del sistema. El sistema de inventario contiene un módulo de reportes, de forma tal que el usuario puede consultar cualquier información relacionada con los datos manejados en el inventario. El sistema permite la eliminación de: usuarios, equipos, stocks, ensambladoras, oficinas, espacio físico y placas. El usuario puede eliminar estos datos si y solo si ha ingresado datos erróneos y no se ha realizado ninguna operación previa con los mismos. La asignación de placas se realiza de forma manual debido a las necesidades del personal del departamento de placas por mantener el orden del almacén. La salida de placas se realiza de forma ordenada y automática, dando salida a las primeras placas ingresadas en el sistema. El inició de sesión se mantiene hasta que el usuario desee salir del sistema. Se termina una sesión en caso de que el usuario haya estado ausente por un determinado tiempo. Este tiempo es determinado por el departamento de informática del INTTT. El sistema muestra mensajes de alerta para cada operación realizada. En caso de que no exista un stock, o en caso de que la existencia en stock sea mayor que el máximo o menor que el mínimo, el sistema muestra un mensaje de alerta una vez iniciada la sesión. 106 CONCLUSIÓN El desarrollo de este trabajo especial de grado permitió la actualización tecnológica de software del sistema de inventario basado en una arquitectura orientada a servicios para el departamento de placas del Instituto Nacional de Tránsito y Transporte Terrestre, logrando así la puesta en producción del sistema. Debido a la aplicación del método de elicitación de requisitos para el desarrollo de sistemas de software, se pudo obtener toda la información necesaria para la actualización del sistema de inventario de placas, facilitando de esta forma el desarrollo del sistema, además de disponer de una serie de documentos entregables que servirán de apoyo en el momento de realizar un futuro mantenimiento en el sistema. Motivados por la urgencia presentada por el INTTT para el desarrollo del sistema de inventario de placas, se escogió aplicar la metodología de desarrollo ágil, debido a que esta metodología nos permitía un alto nivel de flexibilidad al momento de la estructuración del tiempo de desarrollo del sistema. El uso de esta metodología nos permitió liberar por primera vez el sistema bajo una arquitectura cliente-servidor contemplando todas las funcionalidades deseadas por el INTTT, para luego liberar por segunda vez el sistema bajo una arquitectura orientada a servicios. El uso de esta metodología fue de gran ayuda debido a que se pudo realizar la migración del sistema sin afectar el tiempo de liberación deseado por el INTTT. El uso del patrón de diseño MVC desde el comienzo del desarrollo del sistema de inventario de placas, facilitó en gran medida la migración del sistema hacia una arquitectura orientada a servicios, ya que se pudo realizar la reutilización de muchas de las funcionalidades implementadas en el sistema basado en una arquitectura cliente-servidor. Podemos concluir que el objetivo del trabajo especial de grado, se cumplió perfectamente, ya que se logró recolectar información por medio de entrevistas con los usuarios finales del sistema para así permitir el diseño y el desarrollo del mismo utilizando un método de desarrollo ágil en once (11) iteraciones, en un contexto de trabajo real, cubriendo así todos los requerimientos identificados en el departamento de placas del INTTT, además de ofrecer una actualización que permite la reutilización de las funcionalidades permitiendo un alto grado de escalabilidad y flexibilidad del sistema. 107 RECOMENDACIONES Debido a que el sistema de inventario de placas fue puesto en producción solo en la sede principal del INTTT, se recomienda el uso de los servicios propuestos para tener un mejor acoplamiento entre los diferentes sistemas de los departamentos de esta oficina, de esta manera se podrán realizar las consultas necesarias para realizar una correcta solicitud de placas a HVS, de forma que lleguen solo las placas necesarias al INTTT, así como realizar la entrega de placas a empresas y oficinas, de forma que no queden vacios los stocks correspondientes a las placas entregadas. Así mismo, se tienen tres recomendaciones de posibles trabajos futuros que puede realizar la institución utilizando como base el sistema desarrollado. Las recomendaciones son las siguientes: 1. Crear una VPN para permitir el acceso de las 69 oficinas al sistema de inventario de placas alojado en el servidor de la sede principal, de forma tal que los usuarios realicen las operaciones por medio de la página web, teniendo una base de datos centralizada. 2. Permitir el acceso al sistema de inventario en cada una de las 69 oficinas, instalando una base de datos distribuida, de forma tal que las oficinas del INTTT se comuniquen por medio de vistas. De esta manera se descentralizaría la llegada y la asignación de las placas, reduciendo el trabajo realizado por el personal del departamento de placas debido a que se ocuparían de manejar únicamente las placas del estado correspondiente. 3. Continuar con el desarrollo de la propuesta de servicios web, creando servicios para cada una de las funcionalidades del sistema y de esta manera diseñar una aplicación cliente para cada una de las 69 oficinas regionales del INTTT que accederá a los servicios web definidos, para así encargarse de la llegada, del almacenamiento y de la entrega de placas. Por último, se recomienda tomar el sistema de inventario de placas como ejemplo para la creación de nuevos sistemas y como base para la modificación de sistemas ya existentes, para así lograr una actualización tecnológica y una mejor integración de los sistemas correspondientes a cada departamento de la institución. 108 REFERENCIAS BIBLIOGRÁFICAS [1] Instituto de Tránsito y Transporte Terrestre http://www.inttt.gov.ve/ Consultado: Junio de 2008 [2] Horizontes Vías y Señales http://www.hvsca.com/ Consultado: Junio de 2008 [3] Decreto Ley Número 37.332 del 26 de noviembre del 2001 [4] Reglamento de la Ley de Tránsito Terrestre, Número 5420 del 26 de junio del 1988 [5] Metodología para la Elicitación de Requisitos de Sistemas de Software Versión 2.1, Autores: Amador Durán, Beatriz Bernárdez Universidad de Sevilla, Octubre de 2000 [6] Modelación Ágil http://www.agilemodeling.com/ Consultado: Junio de 2008 [7] Arquitectura Orientada a Servicios http://www.wadooa.com/doku.php/soa Consultado: Junio de 2008 [8] Componentes del Modelo MVC http://www.net2u.es/index.php/mod.pags/mem.listado Consultado: Junio de 2008 [9] Proyecto Ciclope. Modelo MVC http://www.ciclope.info/doc/mvc/index.php?action=model Consultado: Junio de 2008 [10] Microsoft, Beneficios del Modelo MVC http://www.microsoft.com/spanish/msdn/comunidad/mtj.net/voices/mtj_3317. asp Consultado: Junio de 2008 REFERENCIAS BIBLIOGRÁFICAS 109 [11] PHP http://ve2.php.net/manual/es/intro-whatcando.php Consultado: Junio de 2008 [12] Sybase ASE http://www.sybasease.info/ase.htm Consultado: Junio de 2008 [13] Ingeniería de Software Orientada a Objetos con UML, JAVA e Internet Versión 2.1, Autor: Alfredo Weitzenfeld Editorial Thomson. Capítulo: 10 [14] Pattern-Oriented Software Architecture – A System of Patterns, Autor: Frank Buschmann. [15] PHP | Architect's Guide to PHP Design Patterns, Autor: Jason E. Sweat. [16] El libro Agile Project Management with Scrum, Autor: Ken Schwaber. [17] Practices of an Agile Developer: Working in the Real World, Autor: Venkat Subramaniam y Andy Hunt